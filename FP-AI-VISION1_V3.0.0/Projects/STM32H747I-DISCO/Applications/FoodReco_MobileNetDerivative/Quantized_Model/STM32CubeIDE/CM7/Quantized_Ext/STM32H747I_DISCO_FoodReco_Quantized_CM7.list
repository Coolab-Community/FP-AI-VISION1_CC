
STM32H747I_DISCO_FoodReco_Quantized_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector_m4 00000008  08100000  08100000  000f0000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata2      000e4e1e  08100020  08100020  000f0020  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         000288cc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0009b4a0  08028b80  08028b80  00038b80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  080c4020  080c4020  000d4020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  080c4028  080c4028  000d4028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080c402c  080c402c  000d402c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000076cc  24000000  080c4030  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .uart_rx_buffer 00000020  240076e0  080cb6fc  000e76e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .uart_tx_buffer 00000080  24007700  080cb71c  000e7700  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002ff8  24007780  080cb79c  000e7780  2**5
                  ALLOC
 12 ._user_heap_stack 00001400  2400a778  080cb79c  000ea778  2**0
                  ALLOC
 13 .sram_section 000003c0  30000000  30000000  001e0000  2**2
                  ALLOC
 14 .sdram_section 00e82880  d0000000  d0000000  001e0000  2**5
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  001d4e3e  2**0
                  CONTENTS, READONLY
 16 .debug_line   0008064f  00000000  00000000  001d4e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   0009a847  00000000  00000000  002554bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000c1b1  00000000  00000000  002efd02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003460  00000000  00000000  002fbeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001dd958  00000000  00000000  002ff318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00010eb8  00000000  00000000  004dcc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0007dbb2  00000000  00000000  004edb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  000544f0  00000000  00000000  0056b6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000cb  00000000  00000000  005bfbca  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000d790  00000000  00000000  005bfc98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .stab         000000cc  00000000  00000000  005cd428  2**2
                  CONTENTS, READONLY, DEBUGGING
 27 .stabstr      000001b9  00000000  00000000  005cd4f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24007780 	.word	0x24007780
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08028b54 	.word	0x08028b54

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24007784 	.word	0x24007784
 80002dc:	08028b54 	.word	0x08028b54

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b9a8 	b.w	8000718 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f83a 	bl	8000448 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__aeabi_f2lz>:
 80003e0:	ee07 0a90 	vmov	s15, r0
 80003e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ec:	d401      	bmi.n	80003f2 <__aeabi_f2lz+0x12>
 80003ee:	f000 b80b 	b.w	8000408 <__aeabi_f2ulz>
 80003f2:	eef1 7a67 	vneg.f32	s15, s15
 80003f6:	b508      	push	{r3, lr}
 80003f8:	ee17 0a90 	vmov	r0, s15
 80003fc:	f000 f804 	bl	8000408 <__aeabi_f2ulz>
 8000400:	4240      	negs	r0, r0
 8000402:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000406:	bd08      	pop	{r3, pc}

08000408 <__aeabi_f2ulz>:
 8000408:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000438 <__aeabi_f2ulz+0x30>
 800040c:	ee07 0a90 	vmov	s15, r0
 8000410:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000440 <__aeabi_f2ulz+0x38>
 8000414:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000418:	ee27 6b06 	vmul.f64	d6, d7, d6
 800041c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000420:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000424:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000428:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800042c:	ee16 1a10 	vmov	r1, s12
 8000430:	ee17 0a90 	vmov	r0, s15
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	00000000 	.word	0x00000000
 800043c:	3df00000 	.word	0x3df00000
 8000440:	00000000 	.word	0x00000000
 8000444:	41f00000 	.word	0x41f00000

08000448 <__udivmoddi4>:
 8000448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800044c:	9d08      	ldr	r5, [sp, #32]
 800044e:	4604      	mov	r4, r0
 8000450:	468e      	mov	lr, r1
 8000452:	2b00      	cmp	r3, #0
 8000454:	d14d      	bne.n	80004f2 <__udivmoddi4+0xaa>
 8000456:	428a      	cmp	r2, r1
 8000458:	4694      	mov	ip, r2
 800045a:	d969      	bls.n	8000530 <__udivmoddi4+0xe8>
 800045c:	fab2 f282 	clz	r2, r2
 8000460:	b152      	cbz	r2, 8000478 <__udivmoddi4+0x30>
 8000462:	fa01 f302 	lsl.w	r3, r1, r2
 8000466:	f1c2 0120 	rsb	r1, r2, #32
 800046a:	fa20 f101 	lsr.w	r1, r0, r1
 800046e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000472:	ea41 0e03 	orr.w	lr, r1, r3
 8000476:	4094      	lsls	r4, r2
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	0c21      	lsrs	r1, r4, #16
 800047e:	fbbe f6f8 	udiv	r6, lr, r8
 8000482:	fa1f f78c 	uxth.w	r7, ip
 8000486:	fb08 e316 	mls	r3, r8, r6, lr
 800048a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800048e:	fb06 f107 	mul.w	r1, r6, r7
 8000492:	4299      	cmp	r1, r3
 8000494:	d90a      	bls.n	80004ac <__udivmoddi4+0x64>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f106 30ff 	add.w	r0, r6, #4294967295
 800049e:	f080 811f 	bcs.w	80006e0 <__udivmoddi4+0x298>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 811c 	bls.w	80006e0 <__udivmoddi4+0x298>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b4:	fb08 3310 	mls	r3, r8, r0, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb00 f707 	mul.w	r7, r0, r7
 80004c0:	42a7      	cmp	r7, r4
 80004c2:	d90a      	bls.n	80004da <__udivmoddi4+0x92>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80004cc:	f080 810a 	bcs.w	80006e4 <__udivmoddi4+0x29c>
 80004d0:	42a7      	cmp	r7, r4
 80004d2:	f240 8107 	bls.w	80006e4 <__udivmoddi4+0x29c>
 80004d6:	4464      	add	r4, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004de:	1be4      	subs	r4, r4, r7
 80004e0:	2600      	movs	r6, #0
 80004e2:	b11d      	cbz	r5, 80004ec <__udivmoddi4+0xa4>
 80004e4:	40d4      	lsrs	r4, r2
 80004e6:	2300      	movs	r3, #0
 80004e8:	e9c5 4300 	strd	r4, r3, [r5]
 80004ec:	4631      	mov	r1, r6
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d909      	bls.n	800050a <__udivmoddi4+0xc2>
 80004f6:	2d00      	cmp	r5, #0
 80004f8:	f000 80ef 	beq.w	80006da <__udivmoddi4+0x292>
 80004fc:	2600      	movs	r6, #0
 80004fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000502:	4630      	mov	r0, r6
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	fab3 f683 	clz	r6, r3
 800050e:	2e00      	cmp	r6, #0
 8000510:	d14a      	bne.n	80005a8 <__udivmoddi4+0x160>
 8000512:	428b      	cmp	r3, r1
 8000514:	d302      	bcc.n	800051c <__udivmoddi4+0xd4>
 8000516:	4282      	cmp	r2, r0
 8000518:	f200 80f9 	bhi.w	800070e <__udivmoddi4+0x2c6>
 800051c:	1a84      	subs	r4, r0, r2
 800051e:	eb61 0303 	sbc.w	r3, r1, r3
 8000522:	2001      	movs	r0, #1
 8000524:	469e      	mov	lr, r3
 8000526:	2d00      	cmp	r5, #0
 8000528:	d0e0      	beq.n	80004ec <__udivmoddi4+0xa4>
 800052a:	e9c5 4e00 	strd	r4, lr, [r5]
 800052e:	e7dd      	b.n	80004ec <__udivmoddi4+0xa4>
 8000530:	b902      	cbnz	r2, 8000534 <__udivmoddi4+0xec>
 8000532:	deff      	udf	#255	; 0xff
 8000534:	fab2 f282 	clz	r2, r2
 8000538:	2a00      	cmp	r2, #0
 800053a:	f040 8092 	bne.w	8000662 <__udivmoddi4+0x21a>
 800053e:	eba1 010c 	sub.w	r1, r1, ip
 8000542:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000546:	fa1f fe8c 	uxth.w	lr, ip
 800054a:	2601      	movs	r6, #1
 800054c:	0c20      	lsrs	r0, r4, #16
 800054e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000552:	fb07 1113 	mls	r1, r7, r3, r1
 8000556:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800055a:	fb0e f003 	mul.w	r0, lr, r3
 800055e:	4288      	cmp	r0, r1
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x12c>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f103 38ff 	add.w	r8, r3, #4294967295
 800056a:	d202      	bcs.n	8000572 <__udivmoddi4+0x12a>
 800056c:	4288      	cmp	r0, r1
 800056e:	f200 80cb 	bhi.w	8000708 <__udivmoddi4+0x2c0>
 8000572:	4643      	mov	r3, r8
 8000574:	1a09      	subs	r1, r1, r0
 8000576:	b2a4      	uxth	r4, r4
 8000578:	fbb1 f0f7 	udiv	r0, r1, r7
 800057c:	fb07 1110 	mls	r1, r7, r0, r1
 8000580:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000584:	fb0e fe00 	mul.w	lr, lr, r0
 8000588:	45a6      	cmp	lr, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x156>
 800058c:	eb1c 0404 	adds.w	r4, ip, r4
 8000590:	f100 31ff 	add.w	r1, r0, #4294967295
 8000594:	d202      	bcs.n	800059c <__udivmoddi4+0x154>
 8000596:	45a6      	cmp	lr, r4
 8000598:	f200 80bb 	bhi.w	8000712 <__udivmoddi4+0x2ca>
 800059c:	4608      	mov	r0, r1
 800059e:	eba4 040e 	sub.w	r4, r4, lr
 80005a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x9a>
 80005a8:	f1c6 0720 	rsb	r7, r6, #32
 80005ac:	40b3      	lsls	r3, r6
 80005ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80005b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80005b6:	fa20 f407 	lsr.w	r4, r0, r7
 80005ba:	fa01 f306 	lsl.w	r3, r1, r6
 80005be:	431c      	orrs	r4, r3
 80005c0:	40f9      	lsrs	r1, r7
 80005c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005c6:	fa00 f306 	lsl.w	r3, r0, r6
 80005ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80005ce:	0c20      	lsrs	r0, r4, #16
 80005d0:	fa1f fe8c 	uxth.w	lr, ip
 80005d4:	fb09 1118 	mls	r1, r9, r8, r1
 80005d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005dc:	fb08 f00e 	mul.w	r0, r8, lr
 80005e0:	4288      	cmp	r0, r1
 80005e2:	fa02 f206 	lsl.w	r2, r2, r6
 80005e6:	d90b      	bls.n	8000600 <__udivmoddi4+0x1b8>
 80005e8:	eb1c 0101 	adds.w	r1, ip, r1
 80005ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80005f0:	f080 8088 	bcs.w	8000704 <__udivmoddi4+0x2bc>
 80005f4:	4288      	cmp	r0, r1
 80005f6:	f240 8085 	bls.w	8000704 <__udivmoddi4+0x2bc>
 80005fa:	f1a8 0802 	sub.w	r8, r8, #2
 80005fe:	4461      	add	r1, ip
 8000600:	1a09      	subs	r1, r1, r0
 8000602:	b2a4      	uxth	r4, r4
 8000604:	fbb1 f0f9 	udiv	r0, r1, r9
 8000608:	fb09 1110 	mls	r1, r9, r0, r1
 800060c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000610:	fb00 fe0e 	mul.w	lr, r0, lr
 8000614:	458e      	cmp	lr, r1
 8000616:	d908      	bls.n	800062a <__udivmoddi4+0x1e2>
 8000618:	eb1c 0101 	adds.w	r1, ip, r1
 800061c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000620:	d26c      	bcs.n	80006fc <__udivmoddi4+0x2b4>
 8000622:	458e      	cmp	lr, r1
 8000624:	d96a      	bls.n	80006fc <__udivmoddi4+0x2b4>
 8000626:	3802      	subs	r0, #2
 8000628:	4461      	add	r1, ip
 800062a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800062e:	fba0 9402 	umull	r9, r4, r0, r2
 8000632:	eba1 010e 	sub.w	r1, r1, lr
 8000636:	42a1      	cmp	r1, r4
 8000638:	46c8      	mov	r8, r9
 800063a:	46a6      	mov	lr, r4
 800063c:	d356      	bcc.n	80006ec <__udivmoddi4+0x2a4>
 800063e:	d053      	beq.n	80006e8 <__udivmoddi4+0x2a0>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x212>
 8000642:	ebb3 0208 	subs.w	r2, r3, r8
 8000646:	eb61 010e 	sbc.w	r1, r1, lr
 800064a:	fa01 f707 	lsl.w	r7, r1, r7
 800064e:	fa22 f306 	lsr.w	r3, r2, r6
 8000652:	40f1      	lsrs	r1, r6
 8000654:	431f      	orrs	r7, r3
 8000656:	e9c5 7100 	strd	r7, r1, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	f1c2 0320 	rsb	r3, r2, #32
 8000666:	40d8      	lsrs	r0, r3
 8000668:	fa0c fc02 	lsl.w	ip, ip, r2
 800066c:	fa21 f303 	lsr.w	r3, r1, r3
 8000670:	4091      	lsls	r1, r2
 8000672:	4301      	orrs	r1, r0
 8000674:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000678:	fa1f fe8c 	uxth.w	lr, ip
 800067c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000680:	fb07 3610 	mls	r6, r7, r0, r3
 8000684:	0c0b      	lsrs	r3, r1, #16
 8000686:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800068a:	fb00 f60e 	mul.w	r6, r0, lr
 800068e:	429e      	cmp	r6, r3
 8000690:	fa04 f402 	lsl.w	r4, r4, r2
 8000694:	d908      	bls.n	80006a8 <__udivmoddi4+0x260>
 8000696:	eb1c 0303 	adds.w	r3, ip, r3
 800069a:	f100 38ff 	add.w	r8, r0, #4294967295
 800069e:	d22f      	bcs.n	8000700 <__udivmoddi4+0x2b8>
 80006a0:	429e      	cmp	r6, r3
 80006a2:	d92d      	bls.n	8000700 <__udivmoddi4+0x2b8>
 80006a4:	3802      	subs	r0, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	1b9b      	subs	r3, r3, r6
 80006aa:	b289      	uxth	r1, r1
 80006ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80006b0:	fb07 3316 	mls	r3, r7, r6, r3
 80006b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006b8:	fb06 f30e 	mul.w	r3, r6, lr
 80006bc:	428b      	cmp	r3, r1
 80006be:	d908      	bls.n	80006d2 <__udivmoddi4+0x28a>
 80006c0:	eb1c 0101 	adds.w	r1, ip, r1
 80006c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80006c8:	d216      	bcs.n	80006f8 <__udivmoddi4+0x2b0>
 80006ca:	428b      	cmp	r3, r1
 80006cc:	d914      	bls.n	80006f8 <__udivmoddi4+0x2b0>
 80006ce:	3e02      	subs	r6, #2
 80006d0:	4461      	add	r1, ip
 80006d2:	1ac9      	subs	r1, r1, r3
 80006d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006d8:	e738      	b.n	800054c <__udivmoddi4+0x104>
 80006da:	462e      	mov	r6, r5
 80006dc:	4628      	mov	r0, r5
 80006de:	e705      	b.n	80004ec <__udivmoddi4+0xa4>
 80006e0:	4606      	mov	r6, r0
 80006e2:	e6e3      	b.n	80004ac <__udivmoddi4+0x64>
 80006e4:	4618      	mov	r0, r3
 80006e6:	e6f8      	b.n	80004da <__udivmoddi4+0x92>
 80006e8:	454b      	cmp	r3, r9
 80006ea:	d2a9      	bcs.n	8000640 <__udivmoddi4+0x1f8>
 80006ec:	ebb9 0802 	subs.w	r8, r9, r2
 80006f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006f4:	3801      	subs	r0, #1
 80006f6:	e7a3      	b.n	8000640 <__udivmoddi4+0x1f8>
 80006f8:	4646      	mov	r6, r8
 80006fa:	e7ea      	b.n	80006d2 <__udivmoddi4+0x28a>
 80006fc:	4620      	mov	r0, r4
 80006fe:	e794      	b.n	800062a <__udivmoddi4+0x1e2>
 8000700:	4640      	mov	r0, r8
 8000702:	e7d1      	b.n	80006a8 <__udivmoddi4+0x260>
 8000704:	46d0      	mov	r8, sl
 8000706:	e77b      	b.n	8000600 <__udivmoddi4+0x1b8>
 8000708:	3b02      	subs	r3, #2
 800070a:	4461      	add	r1, ip
 800070c:	e732      	b.n	8000574 <__udivmoddi4+0x12c>
 800070e:	4630      	mov	r0, r6
 8000710:	e709      	b.n	8000526 <__udivmoddi4+0xde>
 8000712:	4464      	add	r4, ip
 8000714:	3802      	subs	r0, #2
 8000716:	e742      	b.n	800059e <__udivmoddi4+0x156>

08000718 <__aeabi_idiv0>:
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop

0800071c <Reset_Handler_m4>:
    .section  .text.Reset_Handler_m4
  .weak  Reset_Handler_m4
  .type  Reset_Handler_m4, %function
Reset_Handler_m4:
 Infinite_Loop:
  b  Infinite_Loop
 800071c:	e7fe      	b.n	800071c <Reset_Handler_m4>
	...

08000720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000758 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000724:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000726:	e003      	b.n	8000730 <LoopCopyDataInit>

08000728 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800072a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800072c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800072e:	3104      	adds	r1, #4

08000730 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000730:	480b      	ldr	r0, [pc, #44]	; (8000760 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000734:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000736:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000738:	d3f6      	bcc.n	8000728 <CopyDataInit>
  ldr  r2, =_sbss
 800073a:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800073c:	e002      	b.n	8000744 <LoopFillZerobss>

0800073e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800073e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000740:	f842 3b04 	str.w	r3, [r2], #4

08000744 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000746:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000748:	d3f9      	bcc.n	800073e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800074a:	f006 fa7b 	bl	8006c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800074e:	f024 ffcd 	bl	80256ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000752:	f004 fcad 	bl	80050b0 <main>
  bx  lr    
 8000756:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000758:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800075c:	080c4030 	.word	0x080c4030
  ldr  r0, =_sdata
 8000760:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000764:	240076cc 	.word	0x240076cc
  ldr  r2, =_sbss
 8000768:	24007780 	.word	0x24007780
  ldr  r3, = _ebss
 800076c:	2400a778 	.word	0x2400a778

08000770 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC3_IRQHandler>
	...

08000774 <ai_get_input_height>:

/**
 * @brief Returns value of the height for the first input tensor
 * @retval ai_u16 Height for the first input tensor
 */
ai_u16 ai_get_input_height(void) { return (AI_BUFFER_HEIGHT(&ai_input[0])); }
 8000774:	4b01      	ldr	r3, [pc, #4]	; (800077c <ai_get_input_height+0x8>)
 8000776:	88d8      	ldrh	r0, [r3, #6]
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	2400779c 	.word	0x2400779c

08000780 <ai_get_input_width>:

/**
 * @brief Returns value of the width for the first input tensor
 * @retval ai_u16 Width for the first input tensor
 */
ai_u16 ai_get_input_width(void) { return (AI_BUFFER_WIDTH(&ai_input[0])); }
 8000780:	4b01      	ldr	r3, [pc, #4]	; (8000788 <ai_get_input_width+0x8>)
 8000782:	8918      	ldrh	r0, [r3, #8]
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	2400779c 	.word	0x2400779c

0800078c <ai_get_input_channels>:

/**
 * @brief Returns value of the channels for the first input tensor
 * @retval ai_u16 Channels for the first input tensor
 */
ai_u16 ai_get_input_channels(void) { return (AI_BUFFER_CHANNELS(&ai_input[0])); }
 800078c:	4b01      	ldr	r3, [pc, #4]	; (8000794 <ai_get_input_channels+0x8>)
 800078e:	8998      	ldrh	r0, [r3, #12]
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	2400779c 	.word	0x2400779c

08000798 <ai_get_input_format>:
 * @brief Returns the input format type
 * @retval ai_size Input format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_input_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[0]);
 8000798:	4b02      	ldr	r3, [pc, #8]	; (80007a4 <ai_get_input_format+0xc>)
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 800079a:	6818      	ldr	r0, [r3, #0]
}
 800079c:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	2400779c 	.word	0x2400779c

080007a8 <ai_get_output_format>:
 * @brief Returns the output format type
 * @retval ai_size Output format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_output_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_output[0]);
 80007a8:	4b02      	ldr	r3, [pc, #8]	; (80007b4 <ai_get_output_format+0xc>)
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 80007aa:	6818      	ldr	r0, [r3, #0]
}
 80007ac:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	240077b4 	.word	0x240077b4

080007b8 <ai_get_input_quantized_format>:
 * @brief Returns value of the input quantized format
 * @retval ai_size Input quantized format
 */
ai_size ai_get_input_quantized_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[0]);
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <ai_get_input_quantized_format+0x18>)
 80007ba:	6818      	ldr	r0, [r3, #0]
  return (AI_BUFFER_FMT_GET_BITS(fmt) - AI_BUFFER_FMT_GET_SIGN(fmt) - AI_BUFFER_FMT_GET_FBITS(fmt));
 80007bc:	f3c0 52c0 	ubfx	r2, r0, #23, #1
 80007c0:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80007c4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80007c8:	1a9b      	subs	r3, r3, r2
 80007ca:	3840      	subs	r0, #64	; 0x40
}
 80007cc:	1a18      	subs	r0, r3, r0
 80007ce:	4770      	bx	lr
 80007d0:	2400779c 	.word	0x2400779c

080007d4 <ai_get_input_quantization_scheme>:
 * @brief Returns value of the scale for the input quantized format
 * @retval ai_size Scale for input quantized format
 */
ai_float ai_get_input_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_input[0].meta_info, 0);
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <ai_get_input_quantization_scheme+0x38>)
 80007d6:	6953      	ldr	r3, [r2, #20]
 80007d8:	b1b3      	cbz	r3, 8000808 <ai_get_input_quantization_scheme+0x34>
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	f010 0001 	ands.w	r0, r0, #1
 80007e0:	d013      	beq.n	800080a <ai_get_input_quantization_scheme+0x36>
 80007e2:	6858      	ldr	r0, [r3, #4]
 80007e4:	b188      	cbz	r0, 800080a <ai_get_input_quantization_scheme+0x36>
 80007e6:	6843      	ldr	r3, [r0, #4]
 80007e8:	b173      	cbz	r3, 8000808 <ai_get_input_quantization_scheme+0x34>
 80007ea:	8840      	ldrh	r0, [r0, #2]
 80007ec:	b168      	cbz	r0, 800080a <ai_get_input_quantization_scheme+0x36>
 80007ee:	681b      	ldr	r3, [r3, #0]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 80007f0:	6810      	ldr	r0, [r2, #0]
  if(scale==0)
 80007f2:	edd3 7a00 	vldr	s15, [r3]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 80007f6:	f3c0 50c0 	ubfx	r0, r0, #23, #1
  if(scale==0)
 80007fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80007fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000802:	d001      	beq.n	8000808 <ai_get_input_quantization_scheme+0x34>
    if(sign==0)
 8000804:	3001      	adds	r0, #1
 8000806:	4770      	bx	lr
    return AI_FXP_Q;
 8000808:	2000      	movs	r0, #0
}
 800080a:	4770      	bx	lr
 800080c:	2400779c 	.word	0x2400779c

08000810 <ai_get_output_quantization_scheme>:
 * @brief Returns value of the scale for the output quantized format
 * @retval ai_size Scale for output quantized format
 */
ai_float ai_get_output_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <ai_get_output_quantization_scheme+0x38>)
 8000812:	6953      	ldr	r3, [r2, #20]
 8000814:	b1b3      	cbz	r3, 8000844 <ai_get_output_quantization_scheme+0x34>
 8000816:	6818      	ldr	r0, [r3, #0]
 8000818:	f010 0001 	ands.w	r0, r0, #1
 800081c:	d013      	beq.n	8000846 <ai_get_output_quantization_scheme+0x36>
 800081e:	6858      	ldr	r0, [r3, #4]
 8000820:	b188      	cbz	r0, 8000846 <ai_get_output_quantization_scheme+0x36>
 8000822:	6843      	ldr	r3, [r0, #4]
 8000824:	b173      	cbz	r3, 8000844 <ai_get_output_quantization_scheme+0x34>
 8000826:	8840      	ldrh	r0, [r0, #2]
 8000828:	b168      	cbz	r0, 8000846 <ai_get_output_quantization_scheme+0x36>
 800082a:	681b      	ldr	r3, [r3, #0]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 800082c:	6810      	ldr	r0, [r2, #0]
  if(scale==0)
 800082e:	edd3 7a00 	vldr	s15, [r3]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 8000832:	f3c0 50c0 	ubfx	r0, r0, #23, #1
  if(scale==0)
 8000836:	eef5 7a40 	vcmp.f32	s15, #0.0
 800083a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083e:	d001      	beq.n	8000844 <ai_get_output_quantization_scheme+0x34>
    if(sign==0)
 8000840:	3001      	adds	r0, #1
 8000842:	4770      	bx	lr
    return AI_FXP_Q;
 8000844:	2000      	movs	r0, #0
}
 8000846:	4770      	bx	lr
 8000848:	240077b4 	.word	0x240077b4

0800084c <ai_get_output_fxp_scale>:
  fmt_1 = AI_BUFFER_FORMAT(&ai_output[0]);
 800084c:	4a07      	ldr	r2, [pc, #28]	; (800086c <ai_get_output_fxp_scale+0x20>)
  scale = 1.0f / (0x1U << AI_BUFFER_FMT_GET_FBITS(fmt_1));
 800084e:	2301      	movs	r3, #1
 8000850:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000854:	6812      	ldr	r2, [r2, #0]
 8000856:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800085a:	3a40      	subs	r2, #64	; 0x40
 800085c:	4093      	lsls	r3, r2
 800085e:	ee07 3a90 	vmov	s15, r3
 8000862:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8000866:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800086a:	4770      	bx	lr
 800086c:	240077b4 	.word	0x240077b4

08000870 <ai_get_input_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_input[0].meta_info, 0);
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <ai_get_input_scale+0x28>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	b163      	cbz	r3, 8000890 <ai_get_input_scale+0x20>
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	07d2      	lsls	r2, r2, #31
 800087a:	d509      	bpl.n	8000890 <ai_get_input_scale+0x20>
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	b13b      	cbz	r3, 8000890 <ai_get_input_scale+0x20>
 8000880:	685a      	ldr	r2, [r3, #4]
 8000882:	b12a      	cbz	r2, 8000890 <ai_get_input_scale+0x20>
 8000884:	885b      	ldrh	r3, [r3, #2]
 8000886:	b11b      	cbz	r3, 8000890 <ai_get_input_scale+0x20>
 8000888:	6813      	ldr	r3, [r2, #0]
 800088a:	ed93 0a00 	vldr	s0, [r3]
 800088e:	4770      	bx	lr
 8000890:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800089c <ai_get_input_scale+0x2c>
}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	2400779c 	.word	0x2400779c
 800089c:	00000000 	.word	0x00000000

080008a0 <ai_get_input_zero_point>:
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_input[0].meta_info, 0);
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <ai_get_input_zero_point+0x44>)
 80008a2:	695a      	ldr	r2, [r3, #20]
 80008a4:	b192      	cbz	r2, 80008cc <ai_get_input_zero_point+0x2c>
 80008a6:	6813      	ldr	r3, [r2, #0]
 80008a8:	f013 0001 	ands.w	r0, r3, #1
 80008ac:	d00d      	beq.n	80008ca <ai_get_input_zero_point+0x2a>
 80008ae:	6850      	ldr	r0, [r2, #4]
 80008b0:	b158      	cbz	r0, 80008ca <ai_get_input_zero_point+0x2a>
 80008b2:	8803      	ldrh	r3, [r0, #0]
 80008b4:	f013 0f02 	tst.w	r3, #2
 80008b8:	6843      	ldr	r3, [r0, #4]
 80008ba:	d009      	beq.n	80008d0 <ai_get_input_zero_point+0x30>
 80008bc:	b123      	cbz	r3, 80008c8 <ai_get_input_zero_point+0x28>
 80008be:	8840      	ldrh	r0, [r0, #2]
 80008c0:	b118      	cbz	r0, 80008ca <ai_get_input_zero_point+0x2a>
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	7818      	ldrb	r0, [r3, #0]
 80008c6:	4770      	bx	lr
 80008c8:	4618      	mov	r0, r3
}
 80008ca:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_input[0].meta_info, 0);
 80008cc:	4610      	mov	r0, r2
 80008ce:	4770      	bx	lr
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0f9      	beq.n	80008c8 <ai_get_input_zero_point+0x28>
 80008d4:	8840      	ldrh	r0, [r0, #2]
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d0f7      	beq.n	80008ca <ai_get_input_zero_point+0x2a>
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f993 0000 	ldrsb.w	r0, [r3]
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	2400779c 	.word	0x2400779c

080008e8 <ai_get_output_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <ai_get_output_scale+0x28>)
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	b163      	cbz	r3, 8000908 <ai_get_output_scale+0x20>
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	07d2      	lsls	r2, r2, #31
 80008f2:	d509      	bpl.n	8000908 <ai_get_output_scale+0x20>
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	b13b      	cbz	r3, 8000908 <ai_get_output_scale+0x20>
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	b12a      	cbz	r2, 8000908 <ai_get_output_scale+0x20>
 80008fc:	885b      	ldrh	r3, [r3, #2]
 80008fe:	b11b      	cbz	r3, 8000908 <ai_get_output_scale+0x20>
 8000900:	6813      	ldr	r3, [r2, #0]
 8000902:	ed93 0a00 	vldr	s0, [r3]
 8000906:	4770      	bx	lr
 8000908:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000914 <ai_get_output_scale+0x2c>
}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	240077b4 	.word	0x240077b4
 8000914:	00000000 	.word	0x00000000

08000918 <ai_get_output_zero_point>:
 * @brief Returns value of the zero point for the output quantized format
 * @retval ai_size Zero point for output quantized format
 */
ai_i32 ai_get_output_zero_point(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <ai_get_output_zero_point+0x44>)
 800091a:	695a      	ldr	r2, [r3, #20]
 800091c:	b192      	cbz	r2, 8000944 <ai_get_output_zero_point+0x2c>
 800091e:	6813      	ldr	r3, [r2, #0]
 8000920:	f013 0001 	ands.w	r0, r3, #1
 8000924:	d00d      	beq.n	8000942 <ai_get_output_zero_point+0x2a>
 8000926:	6850      	ldr	r0, [r2, #4]
 8000928:	b158      	cbz	r0, 8000942 <ai_get_output_zero_point+0x2a>
 800092a:	8803      	ldrh	r3, [r0, #0]
 800092c:	f013 0f02 	tst.w	r3, #2
 8000930:	6843      	ldr	r3, [r0, #4]
 8000932:	d009      	beq.n	8000948 <ai_get_output_zero_point+0x30>
 8000934:	b123      	cbz	r3, 8000940 <ai_get_output_zero_point+0x28>
 8000936:	8840      	ldrh	r0, [r0, #2]
 8000938:	b118      	cbz	r0, 8000942 <ai_get_output_zero_point+0x2a>
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	7818      	ldrb	r0, [r3, #0]
 800093e:	4770      	bx	lr
 8000940:	4618      	mov	r0, r3
}
 8000942:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 8000944:	4610      	mov	r0, r2
 8000946:	4770      	bx	lr
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0f9      	beq.n	8000940 <ai_get_output_zero_point+0x28>
 800094c:	8840      	ldrh	r0, [r0, #2]
 800094e:	2800      	cmp	r0, #0
 8000950:	d0f7      	beq.n	8000942 <ai_get_output_zero_point+0x2a>
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f993 0000 	ldrsb.w	r0, [r3]
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	240077b4 	.word	0x240077b4

08000960 <ai_init>:
 * @brief Initializes the generated C model for a neural network
 * @param  activation_buffer Pointer to the activation buffer (i.e. working buffer used during NN inference)
 * @retval ai_handle
 */
ai_handle ai_init(void* activation_buffer)
{
 8000960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  network_handle = AI_HANDLE_NULL;
 8000964:	4c21      	ldr	r4, [pc, #132]	; (80009ec <ai_init+0x8c>)
 8000966:	2500      	movs	r5, #0
{
 8000968:	b08d      	sub	sp, #52	; 0x34
 800096a:	4606      	mov	r6, r0

  /* Creating the network */
  ai_network_create(&network_handle, AI_NETWORK_DATA_CONFIG);
 800096c:	4629      	mov	r1, r5
 800096e:	4620      	mov	r0, r4

  /* Initialize param structure for the activation and weight buffers */
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8000970:	f04f 1901 	mov.w	r9, #65537	; 0x10001
  network_handle = AI_HANDLE_NULL;
 8000974:	6025      	str	r5, [r4, #0]
  ai_network_create(&network_handle, AI_NETWORK_DATA_CONFIG);
 8000976:	f004 fd33 	bl	80053e0 <ai_network_create>
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <ai_init+0x90>)
 800097c:	f04f 0801 	mov.w	r8, #1

  /* Initializing the network */
  ai_network_init(network_handle, &params);
  
  /*Retrieve network descriptor*/
  ai_network_get_info(network_handle, &desc_report);
 8000980:	4f1c      	ldr	r7, [pc, #112]	; (80009f4 <ai_init+0x94>)
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8000982:	e9cd 3900 	strd	r3, r9, [sp]
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <ai_init+0x98>)
 8000988:	f8ad 8008 	strh.w	r8, [sp, #8]
 800098c:	9303      	str	r3, [sp, #12]
 800098e:	f005 ffa5 	bl	80068dc <ai_network_data_weights_get>
 8000992:	4a1a      	ldr	r2, [pc, #104]	; (80009fc <ai_init+0x9c>)
  ai_network_init(network_handle, &params);
 8000994:	4669      	mov	r1, sp
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <ai_init+0xa0>)
 8000998:	9004      	str	r0, [sp, #16]
  ai_network_init(network_handle, &params);
 800099a:	6820      	ldr	r0, [r4, #0]
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 800099c:	9206      	str	r2, [sp, #24]
 800099e:	9309      	str	r3, [sp, #36]	; 0x24
 80009a0:	960a      	str	r6, [sp, #40]	; 0x28
 80009a2:	9505      	str	r5, [sp, #20]
 80009a4:	950b      	str	r5, [sp, #44]	; 0x2c
 80009a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80009aa:	f8ad 8020 	strh.w	r8, [sp, #32]
  ai_network_init(network_handle, &params);
 80009ae:	f004 fd27 	bl	8005400 <ai_network_init>
  ai_network_get_info(network_handle, &desc_report);
 80009b2:	4639      	mov	r1, r7
 80009b4:	6820      	ldr	r0, [r4, #0]
 80009b6:	f004 fcc7 	bl	8005348 <ai_network_get_info>
  
  /*Copy descriptor info*/
  ai_input[0]= desc_report.inputs[0];
 80009ba:	f8d7 e034 	ldr.w	lr, [r7, #52]	; 0x34
 80009be:	4e11      	ldr	r6, [pc, #68]	; (8000a04 <ai_init+0xa4>)
 80009c0:	46f4      	mov	ip, lr
  ai_output[0]= desc_report.outputs[0];
 80009c2:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 80009c4:	4c10      	ldr	r4, [pc, #64]	; (8000a08 <ai_init+0xa8>)
  ai_input[0]= desc_report.inputs[0];
 80009c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80009cc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80009d0:	e886 0003 	stmia.w	r6, {r0, r1}
  ai_output[0]= desc_report.outputs[0];
 80009d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009dc:	e884 0003 	stmia.w	r4, {r0, r1}
  
  return desc_report.inputs->data;
}
 80009e0:	f8de 0010 	ldr.w	r0, [lr, #16]
 80009e4:	b00d      	add	sp, #52	; 0x34
 80009e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009ea:	bf00      	nop
 80009ec:	24007840 	.word	0x24007840
 80009f0:	40040440 	.word	0x40040440
 80009f4:	240077cc 	.word	0x240077cc
 80009f8:	000839f8 	.word	0x000839f8
 80009fc:	00040440 	.word	0x00040440
 8000a00:	000951e0 	.word	0x000951e0
 8000a04:	2400779c 	.word	0x2400779c
 8000a08:	240077b4 	.word	0x240077b4

08000a0c <ai_deinit>:

/**
 * @brief De-initializes the generated C model for a neural network
 */
void ai_deinit(void) { ai_network_destroy(network_handle); }
 8000a0c:	4b01      	ldr	r3, [pc, #4]	; (8000a14 <ai_deinit+0x8>)
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	f004 bcf4 	b.w	80053fc <ai_network_destroy>
 8000a14:	24007840 	.word	0x24007840

08000a18 <ai_run>:
 * @brief  Run an inference of the generated C model for a neural network
 * @param  input   Pointer to the buffer containing the inference input data
 * @param  output  Pointer to the buffer for the inference output data
 */
void ai_run(void* input, void* output)
{
 8000a18:	b570      	push	{r4, r5, r6, lr}
  ai_i32 nbatch;
  
  ai_input[0].data = AI_HANDLE_PTR(input);
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <ai_run+0x20>)
{
 8000a1c:	4605      	mov	r5, r0
  ai_output[0].data = AI_HANDLE_PTR(output);
 8000a1e:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <ai_run+0x24>)
{
 8000a20:	460c      	mov	r4, r1
  
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 8000a22:	4e07      	ldr	r6, [pc, #28]	; (8000a40 <ai_run+0x28>)
 8000a24:	4619      	mov	r1, r3
  ai_input[0].data = AI_HANDLE_PTR(input);
 8000a26:	611d      	str	r5, [r3, #16]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 8000a28:	6830      	ldr	r0, [r6, #0]
  ai_output[0].data = AI_HANDLE_PTR(output);
 8000a2a:	6114      	str	r4, [r2, #16]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 8000a2c:	f005 ff54 	bl	80068d8 <ai_network_run>
  
  if (nbatch != 1) {
 8000a30:	2801      	cmp	r0, #1
 8000a32:	d000      	beq.n	8000a36 <ai_run+0x1e>
        while(1);
 8000a34:	e7fe      	b.n	8000a34 <ai_run+0x1c>
  }
}
 8000a36:	bd70      	pop	{r4, r5, r6, pc}
 8000a38:	2400779c 	.word	0x2400779c
 8000a3c:	240077b4 	.word	0x240077b4
 8000a40:	24007840 	.word	0x24007840

08000a44 <AUDIO_Process.part.0>:

  switch(audio_state)
  {
  case AUDIO_STATE_PLAYING:

    if(buffer_ctl.fptr >= buffer_ctl.AudioFileSize)
 8000a44:	4b42      	ldr	r3, [pc, #264]	; (8000b50 <AUDIO_Process.part.0+0x10c>)
uint8_t AUDIO_Process(void)
 8000a46:	b570      	push	{r4, r5, r6, lr}
    if(buffer_ctl.fptr >= buffer_ctl.AudioFileSize)
 8000a48:	f8d3 1808 	ldr.w	r1, [r3, #2056]	; 0x808
 8000a4c:	f8d3 4800 	ldr.w	r4, [r3, #2048]	; 0x800
 8000a50:	428c      	cmp	r4, r1
 8000a52:	d30b      	bcc.n	8000a6c <AUDIO_Process.part.0+0x28>
      error_state = AUDIO_ERROR_EOF;

    }

    /* 1st half buffer played; so fill it and continue playing from bottom*/
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8000a54:	f893 2804 	ldrb.w	r2, [r3, #2052]	; 0x804
      buffer_ctl.fptr = 0;
 8000a58:	2400      	movs	r4, #0
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8000a5a:	2a01      	cmp	r2, #1
      buffer_ctl.fptr = 0;
 8000a5c:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8000a60:	d070      	beq.n	8000b44 <AUDIO_Process.part.0+0x100>
      SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
      }
    }

    /* 2nd half buffer played; so fill it and continue playing from top */
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 8000a62:	2a02      	cmp	r2, #2
      error_state = AUDIO_ERROR_EOF;
 8000a64:	f04f 0003 	mov.w	r0, #3
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 8000a68:	d007      	beq.n	8000a7a <AUDIO_Process.part.0+0x36>
    error_state = AUDIO_ERROR_NOTREADY;

    break;
  }
  return (uint8_t) error_state;
}
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8000a6c:	f893 2804 	ldrb.w	r2, [r3, #2052]	; 0x804
 8000a70:	2a01      	cmp	r2, #1
 8000a72:	d035      	beq.n	8000ae0 <AUDIO_Process.part.0+0x9c>
  AUDIO_ErrorTypeDef error_state = AUDIO_ERROR_NONE;
 8000a74:	2000      	movs	r0, #0
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 8000a76:	2a02      	cmp	r2, #2
 8000a78:	d1f7      	bne.n	8000a6a <AUDIO_Process.part.0+0x26>
      bytesread = GetData((void *)buffer_ctl.SrcAddress,
 8000a7a:	f8d3 5800 	ldr.w	r5, [r3, #2048]	; 0x800
{
  uint8_t *lptr = pdata;
  uint32_t ReadDataNbr;

  ReadDataNbr = 0;
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000a7e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
      bytesread = GetData((void *)buffer_ctl.SrcAddress,
 8000a82:	f8d3 180c 	ldr.w	r1, [r3, #2060]	; 0x80c
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000a86:	4295      	cmp	r5, r2
 8000a88:	d2ef      	bcs.n	8000a6a <AUDIO_Process.part.0+0x26>
 8000a8a:	1e6a      	subs	r2, r5, #1
 8000a8c:	4c31      	ldr	r4, [pc, #196]	; (8000b54 <AUDIO_Process.part.0+0x110>)
 8000a8e:	4411      	add	r1, r2
  ReadDataNbr = 0;
 8000a90:	2200      	movs	r2, #0
 8000a92:	e002      	b.n	8000a9a <AUDIO_Process.part.0+0x56>
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000a94:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000a98:	d00a      	beq.n	8000ab0 <AUDIO_Process.part.0+0x6c>
  {
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
    ReadDataNbr++;
 8000a9a:	3201      	adds	r2, #1
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000a9c:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000aa0:	eb05 0c02 	add.w	ip, r5, r2
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000aa4:	f804 ef01 	strb.w	lr, [r4, #1]!
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000aa8:	f8d3 6808 	ldr.w	r6, [r3, #2056]	; 0x808
 8000aac:	45b4      	cmp	ip, r6
 8000aae:	d3f1      	bcc.n	8000a94 <AUDIO_Process.part.0+0x50>
        buffer_ctl.fptr += bytesread;
 8000ab0:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000ab4:	2400      	movs	r4, #0
        buffer_ctl.fptr += bytesread;
 8000ab6:	440a      	add	r2, r1
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000ab8:	f883 4804 	strb.w	r4, [r3, #2052]	; 0x804
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t) addr;
 8000abc:	4926      	ldr	r1, [pc, #152]	; (8000b58 <AUDIO_Process.part.0+0x114>)
        buffer_ctl.fptr += bytesread;
 8000abe:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac2:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCMVAC = op_addr;
 8000ac6:	4a25      	ldr	r2, [pc, #148]	; (8000b5c <AUDIO_Process.part.0+0x118>)
 8000ac8:	f501 6380 	add.w	r3, r1, #1024	; 0x400
 8000acc:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000ad0:	3120      	adds	r1, #32
    while (op_size > 0) {
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	d1fa      	bne.n	8000acc <AUDIO_Process.part.0+0x88>
 8000ad6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ada:	f3bf 8f6f 	isb	sy
}
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
      bytesread = GetData((void *)buffer_ctl.SrcAddress,
 8000ae0:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
  AUDIO_ErrorTypeDef error_state = AUDIO_ERROR_NONE;
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	1e61      	subs	r1, r4, #1
      error_state = AUDIO_ERROR_EOF;
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <AUDIO_Process.part.0+0x10c>)
 8000aea:	4411      	add	r1, r2
 8000aec:	469c      	mov	ip, r3
  ReadDataNbr = 0;
 8000aee:	2200      	movs	r2, #0
 8000af0:	e002      	b.n	8000af8 <AUDIO_Process.part.0+0xb4>
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000af2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000af6:	d00a      	beq.n	8000b0e <AUDIO_Process.part.0+0xca>
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000af8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    ReadDataNbr++;
 8000afc:	3201      	adds	r2, #1
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000afe:	f80c 5b01 	strb.w	r5, [ip], #1
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000b02:	eb04 0e02 	add.w	lr, r4, r2
 8000b06:	f8d3 5808 	ldr.w	r5, [r3, #2056]	; 0x808
 8000b0a:	4575      	cmp	r5, lr
 8000b0c:	d8f1      	bhi.n	8000af2 <AUDIO_Process.part.0+0xae>
        buffer_ctl.fptr += bytesread;
 8000b0e:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000b12:	2400      	movs	r4, #0
        buffer_ctl.fptr += bytesread;
 8000b14:	440a      	add	r2, r1
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000b16:	f883 4804 	strb.w	r4, [r3, #2052]	; 0x804
        buffer_ctl.fptr += bytesread;
 8000b1a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    uint32_t op_addr = (uint32_t) addr;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <AUDIO_Process.part.0+0x10c>)
 8000b20:	461a      	mov	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8000b22:	f3bf 8f4f 	dsb	sy
      SCB->DCCMVAC = op_addr;
 8000b26:	4c0d      	ldr	r4, [pc, #52]	; (8000b5c <AUDIO_Process.part.0+0x118>)
 8000b28:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 8000b2c:	f8c4 2268 	str.w	r2, [r4, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000b30:	3220      	adds	r2, #32
    while (op_size > 0) {
 8000b32:	428a      	cmp	r2, r1
 8000b34:	d1fa      	bne.n	8000b2c <AUDIO_Process.part.0+0xe8>
 8000b36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b3a:	f3bf 8f6f 	isb	sy
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 8000b3e:	f893 2804 	ldrb.w	r2, [r3, #2052]	; 0x804
    }

    __DSB();
    __ISB();
  #endif
}
 8000b42:	e798      	b.n	8000a76 <AUDIO_Process.part.0+0x32>
      bytesread = GetData((void *)buffer_ctl.SrcAddress,
 8000b44:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
      error_state = AUDIO_ERROR_EOF;
 8000b48:	2003      	movs	r0, #3
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d1cb      	bne.n	8000ae6 <AUDIO_Process.part.0+0xa2>
}
 8000b4e:	bd70      	pop	{r4, r5, r6, pc}
 8000b50:	24007860 	.word	0x24007860
 8000b54:	24007c5f 	.word	0x24007c5f
 8000b58:	24007c60 	.word	0x24007c60
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <AudioPlay_demo>:
{
 8000b60:	b570      	push	{r4, r5, r6, lr}
	if(myTest == 0 )
 8000b62:	4604      	mov	r4, r0
 8000b64:	b198      	cbz	r0, 8000b8e <AudioPlay_demo+0x2e>
	else if(myTest == 1  )
 8000b66:	2801      	cmp	r0, #1
 8000b68:	d059      	beq.n	8000c1e <AudioPlay_demo+0xbe>
	else if(myTest == 2  )
 8000b6a:	2802      	cmp	r0, #2
 8000b6c:	d033      	beq.n	8000bd6 <AudioPlay_demo+0x76>
	else if(myTest == 3  )
 8000b6e:	2803      	cmp	r0, #3
 8000b70:	d06e      	beq.n	8000c50 <AudioPlay_demo+0xf0>
  switch(audio_state)
 8000b72:	4b44      	ldr	r3, [pc, #272]	; (8000c84 <AudioPlay_demo+0x124>)
 8000b74:	781c      	ldrb	r4, [r3, #0]
 8000b76:	2c02      	cmp	r4, #2
 8000b78:	d000      	beq.n	8000b7c <AudioPlay_demo+0x1c>
 8000b7a:	e7fe      	b.n	8000b7a <AudioPlay_demo+0x1a>
 8000b7c:	f7ff ff62 	bl	8000a44 <AUDIO_Process.part.0>
  }while(flag !=3);
 8000b80:	2803      	cmp	r0, #3
 8000b82:	d1fb      	bne.n	8000b7c <AudioPlay_demo+0x1c>
  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8000b84:	2001      	movs	r0, #1
}
 8000b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8000b8a:	f00a bdb7 	b.w	800b6fc <BSP_AUDIO_OUT_Stop>
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000b8e:	4b3e      	ldr	r3, [pc, #248]	; (8000c88 <AudioPlay_demo+0x128>)
  buffer_ctl.AudioFileSize = file_size;
 8000b90:	f649 72d0 	movw	r2, #40912	; 0x9fd0
  buffer_ctl.SrcAddress = psrc_address;
 8000b94:	493d      	ldr	r1, [pc, #244]	; (8000c8c <AudioPlay_demo+0x12c>)
 8000b96:	461d      	mov	r5, r3
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000b98:	f883 0804 	strb.w	r0, [r3, #2052]	; 0x804
  buffer_ctl.AudioFileSize = file_size;
 8000b9c:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  buffer_ctl.SrcAddress = psrc_address;
 8000ba0:	f8c3 180c 	str.w	r1, [r3, #2060]	; 0x80c
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000ba4:	e002      	b.n	8000bac <AudioPlay_demo+0x4c>
 8000ba6:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8000baa:	d007      	beq.n	8000bbc <AudioPlay_demo+0x5c>
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000bac:	5c62      	ldrb	r2, [r4, r1]
    ReadDataNbr++;
 8000bae:	3401      	adds	r4, #1
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000bb0:	f803 2b01 	strb.w	r2, [r3], #1
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000bb4:	f8d5 2808 	ldr.w	r2, [r5, #2056]	; 0x808
 8000bb8:	4294      	cmp	r4, r2
 8000bba:	d3f4      	bcc.n	8000ba6 <AudioPlay_demo+0x46>
    BSP_AUDIO_OUT_Play(0,(uint8_t *)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 8000bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bc0:	4931      	ldr	r1, [pc, #196]	; (8000c88 <AudioPlay_demo+0x128>)
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f00a fd60 	bl	800b688 <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	4a2e      	ldr	r2, [pc, #184]	; (8000c84 <AudioPlay_demo+0x124>)
    buffer_ctl.fptr = bytesread;
 8000bcc:	f8c5 4800 	str.w	r4, [r5, #2048]	; 0x800
    return AUDIO_ERROR_NONE;
 8000bd0:	461c      	mov	r4, r3
    audio_state = AUDIO_STATE_PLAYING;
 8000bd2:	7013      	strb	r3, [r2, #0]
    return AUDIO_ERROR_NONE;
 8000bd4:	e7cf      	b.n	8000b76 <AudioPlay_demo+0x16>
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000bd6:	4d2c      	ldr	r5, [pc, #176]	; (8000c88 <AudioPlay_demo+0x128>)
  buffer_ctl.AudioFileSize = file_size;
 8000bd8:	f649 73d0 	movw	r3, #40912	; 0x9fd0
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000bdc:	2600      	movs	r6, #0
  buffer_ctl.SrcAddress = psrc_address;
 8000bde:	492c      	ldr	r1, [pc, #176]	; (8000c90 <AudioPlay_demo+0x130>)
  buffer_ctl.AudioFileSize = file_size;
 8000be0:	f8c5 3808 	str.w	r3, [r5, #2056]	; 0x808
 8000be4:	462b      	mov	r3, r5
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000be6:	f885 6804 	strb.w	r6, [r5, #2052]	; 0x804
  buffer_ctl.SrcAddress = psrc_address;
 8000bea:	f8c5 180c 	str.w	r1, [r5, #2060]	; 0x80c
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000bee:	e002      	b.n	8000bf6 <AudioPlay_demo+0x96>
 8000bf0:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 8000bf4:	d007      	beq.n	8000c06 <AudioPlay_demo+0xa6>
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000bf6:	5c72      	ldrb	r2, [r6, r1]
    ReadDataNbr++;
 8000bf8:	3601      	adds	r6, #1
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000bfa:	f803 2b01 	strb.w	r2, [r3], #1
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000bfe:	f8d5 2808 	ldr.w	r2, [r5, #2056]	; 0x808
 8000c02:	4296      	cmp	r6, r2
 8000c04:	d3f4      	bcc.n	8000bf0 <AudioPlay_demo+0x90>
    BSP_AUDIO_OUT_Play(0,(uint8_t *)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 8000c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c0a:	491f      	ldr	r1, [pc, #124]	; (8000c88 <AudioPlay_demo+0x128>)
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f00a fd3b 	bl	800b688 <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <AudioPlay_demo+0x124>)
 8000c14:	2202      	movs	r2, #2
    buffer_ctl.fptr = bytesread;
 8000c16:	f8c5 6800 	str.w	r6, [r5, #2048]	; 0x800
    audio_state = AUDIO_STATE_PLAYING;
 8000c1a:	701a      	strb	r2, [r3, #0]
    return AUDIO_ERROR_NONE;
 8000c1c:	e7ab      	b.n	8000b76 <AudioPlay_demo+0x16>
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <AudioPlay_demo+0x128>)
 8000c20:	2400      	movs	r4, #0
  buffer_ctl.AudioFileSize = file_size;
 8000c22:	f649 72d0 	movw	r2, #40912	; 0x9fd0
  buffer_ctl.SrcAddress = psrc_address;
 8000c26:	491b      	ldr	r1, [pc, #108]	; (8000c94 <AudioPlay_demo+0x134>)
 8000c28:	461d      	mov	r5, r3
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000c2a:	f883 4804 	strb.w	r4, [r3, #2052]	; 0x804
  buffer_ctl.AudioFileSize = file_size;
 8000c2e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  buffer_ctl.SrcAddress = psrc_address;
 8000c32:	f8c3 180c 	str.w	r1, [r3, #2060]	; 0x80c
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000c36:	e002      	b.n	8000c3e <AudioPlay_demo+0xde>
 8000c38:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8000c3c:	d0be      	beq.n	8000bbc <AudioPlay_demo+0x5c>
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000c3e:	5c62      	ldrb	r2, [r4, r1]
    ReadDataNbr++;
 8000c40:	3401      	adds	r4, #1
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000c42:	f803 2b01 	strb.w	r2, [r3], #1
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000c46:	f8d5 2808 	ldr.w	r2, [r5, #2056]	; 0x808
 8000c4a:	4294      	cmp	r4, r2
 8000c4c:	d3f4      	bcc.n	8000c38 <AudioPlay_demo+0xd8>
 8000c4e:	e7b5      	b.n	8000bbc <AudioPlay_demo+0x5c>
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <AudioPlay_demo+0x128>)
 8000c52:	2400      	movs	r4, #0
  buffer_ctl.AudioFileSize = file_size;
 8000c54:	f649 72d0 	movw	r2, #40912	; 0x9fd0
  buffer_ctl.SrcAddress = psrc_address;
 8000c58:	490f      	ldr	r1, [pc, #60]	; (8000c98 <AudioPlay_demo+0x138>)
 8000c5a:	461d      	mov	r5, r3
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000c5c:	f883 4804 	strb.w	r4, [r3, #2052]	; 0x804
  buffer_ctl.AudioFileSize = file_size;
 8000c60:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  buffer_ctl.SrcAddress = psrc_address;
 8000c64:	f8c3 180c 	str.w	r1, [r3, #2060]	; 0x80c
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000c68:	e002      	b.n	8000c70 <AudioPlay_demo+0x110>
 8000c6a:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8000c6e:	d0a5      	beq.n	8000bbc <AudioPlay_demo+0x5c>
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000c70:	5c62      	ldrb	r2, [r4, r1]
    ReadDataNbr++;
 8000c72:	3401      	adds	r4, #1
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000c74:	f803 2b01 	strb.w	r2, [r3], #1
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000c78:	f8d5 2808 	ldr.w	r2, [r5, #2056]	; 0x808
 8000c7c:	4294      	cmp	r4, r2
 8000c7e:	d3f4      	bcc.n	8000c6a <AudioPlay_demo+0x10a>
 8000c80:	e79c      	b.n	8000bbc <AudioPlay_demo+0x5c>
 8000c82:	bf00      	nop
 8000c84:	24007844 	.word	0x24007844
 8000c88:	24007860 	.word	0x24007860
 8000c8c:	90050000 	.word	0x90050000
 8000c90:	900f0000 	.word	0x900f0000
 8000c94:	900a0000 	.word	0x900a0000
 8000c98:	90100000 	.word	0x90100000

08000c9c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(uint32_t Instance)
{
    if(audio_state == AUDIO_STATE_PLAYING)
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d102      	bne.n	8000caa <BSP_AUDIO_OUT_TransferComplete_CallBack+0xe>
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8000ca4:	4a02      	ldr	r2, [pc, #8]	; (8000cb0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
 8000ca6:	f882 3804 	strb.w	r3, [r2, #2052]	; 0x804
  }

}
 8000caa:	4770      	bx	lr
 8000cac:	24007844 	.word	0x24007844
 8000cb0:	24007860 	.word	0x24007860

08000cb4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Instance)
{
    if(audio_state == AUDIO_STATE_PLAYING)
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d103      	bne.n	8000cc4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x10>
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x18>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
  }

}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	24007844 	.word	0x24007844
 8000ccc:	24007860 	.word	0x24007860

08000cd0 <BSP_AUDIO_OUT_Error_CallBack>:
  //UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_RED);
  //UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
  //UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f00a b86d 	b.w	800adb0 <BSP_PB_GetState>
 8000cd6:	bf00      	nop

08000cd8 <AI_Init>:
  input_data_ptr =ai_init((void*)(Ai_Context_Ptr->activation_buffer));
  
  if(input_data_ptr!= NULL)
    Ai_Context_Ptr->nn_input_buffer=input_data_ptr;
#else
  if (Ai_Context_Ptr->nn_input_buffer == NULL)
 8000cd8:	6843      	ldr	r3, [r0, #4]
 8000cda:	b303      	cbz	r3, 8000d1e <AI_Init+0x46>
{
 8000cdc:	b530      	push	{r4, r5, lr}
 8000cde:	4605      	mov	r5, r0
  {
    while(1);
  }
  
  /*Initialize the AI library*/
  ai_init((void*)(Ai_Context_Ptr->activation_buffer));
 8000ce0:	6880      	ldr	r0, [r0, #8]
 Ai_Context_Ptr->lut=pixel_conv_lut;
 8000ce2:	4c5f      	ldr	r4, [pc, #380]	; (8000e60 <AI_Init+0x188>)
{
 8000ce4:	ed2d 8b02 	vpush	{d8}
 8000ce8:	b083      	sub	sp, #12
  ai_init((void*)(Ai_Context_Ptr->activation_buffer));
 8000cea:	f7ff fe39 	bl	8000960 <ai_init>
 Ai_Context_Ptr->nn_width=ai_get_input_width();
 8000cee:	f7ff fd47 	bl	8000780 <ai_get_input_width>
 8000cf2:	6128      	str	r0, [r5, #16]
 Ai_Context_Ptr->nn_height=ai_get_input_height();
 8000cf4:	f7ff fd3e 	bl	8000774 <ai_get_input_height>
 8000cf8:	6168      	str	r0, [r5, #20]
 Ai_Context_Ptr->nn_channels=ai_get_input_channels();
 8000cfa:	f7ff fd47 	bl	800078c <ai_get_input_channels>
 Ai_Context_Ptr->lut=pixel_conv_lut;
 8000cfe:	60ec      	str	r4, [r5, #12]
 Ai_Context_Ptr->nn_channels=ai_get_input_channels();
 8000d00:	61a8      	str	r0, [r5, #24]
  float prepro_scale = Ai_Context_Ptr->nn_input_norm_scale;
 8000d02:	ed95 8a07 	vldr	s16, [r5, #28]
  int32_t prepro_zp = Ai_Context_Ptr->nn_input_norm_zp;
 8000d06:	6a2d      	ldr	r5, [r5, #32]
  switch(ai_get_input_quantization_scheme())
 8000d08:	f7ff fd64 	bl	80007d4 <ai_get_input_quantization_scheme>
 8000d0c:	2801      	cmp	r0, #1
 8000d0e:	d05f      	beq.n	8000dd0 <AI_Init+0xf8>
 8000d10:	2802      	cmp	r0, #2
 8000d12:	d01b      	beq.n	8000d4c <AI_Init+0x74>
 8000d14:	b120      	cbz	r0, 8000d20 <AI_Init+0x48>
#endif
  
  Ai_Context_Init(Ai_Context_Ptr);
  Compute_pix_conv_tab(Ai_Context_Ptr);
}
 8000d16:	b003      	add	sp, #12
 8000d18:	ecbd 8b02 	vpop	{d8}
 8000d1c:	bd30      	pop	{r4, r5, pc}
    while(1);
 8000d1e:	e7fe      	b.n	8000d1e <AI_Init+0x46>
    Precompute_8FXP(lut, ai_get_input_quantized_format());
 8000d20:	f7ff fd4a 	bl	80007b8 <ai_get_input_quantized_format>
   *(lut+index)=__USAT((index + (1 << q_input_shift)) >> (1 + q_input_shift), 8);
 8000d24:	2301      	movs	r3, #1
 8000d26:	1e62      	subs	r2, r4, #1
 for(index=0;index<256;index++)
 8000d28:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8000d2c:	1b19      	subs	r1, r3, r4
   *(lut+index)=__USAT((index + (1 << q_input_shift)) >> (1 + q_input_shift), 8);
 8000d2e:	4083      	lsls	r3, r0
 8000d30:	3001      	adds	r0, #1
 8000d32:	4419      	add	r1, r3
 8000d34:	188b      	adds	r3, r1, r2
 8000d36:	40c3      	lsrs	r3, r0
 8000d38:	f383 0308 	usat	r3, #8, r3
 8000d3c:	f802 3f01 	strb.w	r3, [r2, #1]!
 for(index=0;index<256;index++)
 8000d40:	4295      	cmp	r5, r2
 8000d42:	d1f7      	bne.n	8000d34 <AI_Init+0x5c>
}
 8000d44:	b003      	add	sp, #12
 8000d46:	ecbd 8b02 	vpop	{d8}
 8000d4a:	bd30      	pop	{r4, r5, pc}
    Precompute_8IntS(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000d4c:	f7ff fd90 	bl	8000870 <ai_get_input_scale>
 8000d50:	eef0 8a40 	vmov.f32	s17, s0
 8000d54:	f7ff fda4 	bl	80008a0 <ai_get_input_zero_point>
 8000d58:	f1c4 0101 	rsb	r1, r4, #1
 8000d5c:	1e62      	subs	r2, r4, #1
 8000d5e:	f104 0cff 	add.w	ip, r4, #255	; 0xff
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000d62:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    float tmp = (i - zp_prepro) * scale_prepro;
 8000d66:	1b49      	subs	r1, r1, r5
 8000d68:	ee68 6a28 	vmul.f32	s13, s16, s17
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000d6c:	b2c4      	uxtb	r4, r0
 8000d6e:	e016      	b.n	8000d9e <AI_Init+0xc6>
 8000d70:	337f      	adds	r3, #127	; 0x7f
 8000d72:	db70      	blt.n	8000e56 <AI_Init+0x17e>
 8000d74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7c:	bf4c      	ite	mi
 8000d7e:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 8000d82:	ee77 7a86 	vaddpl.f32	s15, s15, s12
 8000d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d8a:	edcd 7a01 	vstr	s15, [sp, #4]
 8000d8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000d92:	4423      	add	r3, r4
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f802 3f01 	strb.w	r3, [r2, #1]!
  for (int32_t i = 0 ; i < 256 ; i++)
 8000d9a:	4594      	cmp	ip, r2
 8000d9c:	d0bb      	beq.n	8000d16 <AI_Init+0x3e>
    float tmp = (i - zp_prepro) * scale_prepro;
 8000d9e:	188b      	adds	r3, r1, r2
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000da8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000dac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db4:	bf4c      	ite	mi
 8000db6:	ee37 7ac6 	vsubmi.f32	s14, s15, s12
 8000dba:	ee37 7a86 	vaddpl.f32	s14, s15, s12
 8000dbe:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000dc2:	ee17 3a10 	vmov	r3, s14
 8000dc6:	4403      	add	r3, r0
 8000dc8:	2b7e      	cmp	r3, #126	; 0x7e
 8000dca:	ddd1      	ble.n	8000d70 <AI_Init+0x98>
 8000dcc:	237f      	movs	r3, #127	; 0x7f
 8000dce:	e7e2      	b.n	8000d96 <AI_Init+0xbe>
    Precompute_8IntU(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000dd0:	f7ff fd4e 	bl	8000870 <ai_get_input_scale>
 8000dd4:	eef0 8a40 	vmov.f32	s17, s0
 8000dd8:	f7ff fd62 	bl	80008a0 <ai_get_input_zero_point>
 8000ddc:	f1c4 0101 	rsb	r1, r4, #1
 8000de0:	1e62      	subs	r2, r4, #1
 8000de2:	f104 0cff 	add.w	ip, r4, #255	; 0xff
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000de6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    float tmp = (i - zp_prepro) * scale_prepro;
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ee68 6a28 	vmul.f32	s13, s16, s17
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000df0:	b2c4      	uxtb	r4, r0
 8000df2:	e017      	b.n	8000e24 <AI_Init+0x14c>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dd30      	ble.n	8000e5a <AI_Init+0x182>
 8000df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e00:	bf4c      	ite	mi
 8000e02:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 8000e06:	ee77 7a86 	vaddpl.f32	s15, s15, s12
 8000e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e0e:	edcd 7a01 	vstr	s15, [sp, #4]
 8000e12:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000e16:	4423      	add	r3, r4
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	f802 3f01 	strb.w	r3, [r2, #1]!
  for (int32_t i = 0 ; i < 256 ; i++)
 8000e1e:	4562      	cmp	r2, ip
 8000e20:	f43f af79 	beq.w	8000d16 <AI_Init+0x3e>
    float tmp = (i - zp_prepro) * scale_prepro;
 8000e24:	188b      	adds	r3, r1, r2
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000e2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3a:	bf4c      	ite	mi
 8000e3c:	ee37 7ac6 	vsubmi.f32	s14, s15, s12
 8000e40:	ee37 7a86 	vaddpl.f32	s14, s15, s12
 8000e44:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000e48:	ee17 3a10 	vmov	r3, s14
 8000e4c:	4403      	add	r3, r0
 8000e4e:	2bfe      	cmp	r3, #254	; 0xfe
 8000e50:	ddd0      	ble.n	8000df4 <AI_Init+0x11c>
 8000e52:	23ff      	movs	r3, #255	; 0xff
 8000e54:	e7e1      	b.n	8000e1a <AI_Init+0x142>
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	e79d      	b.n	8000d96 <AI_Init+0xbe>
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e7dd      	b.n	8000e1a <AI_Init+0x142>
 8000e5e:	bf00      	nop
 8000e60:	24008098 	.word	0x24008098

08000e64 <AI_Run>:
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @retval None
*/
void AI_Run(AiContext_TypeDef* Ai_Context_Ptr)
{
  ai_run((void*)Ai_Context_Ptr->nn_input_buffer, (void*)Ai_Context_Ptr->nn_output_buffer);
 8000e64:	e9d0 1000 	ldrd	r1, r0, [r0]
 8000e68:	f7ff bdd6 	b.w	8000a18 <ai_run>

08000e6c <AI_PixelValueConversion>:
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @param  pSrc           Pointer to source buffer
* @retval None
*/
void AI_PixelValueConversion(AiContext_TypeDef* Ai_Context_Ptr, void *pSrc)
{
 8000e6c:	b538      	push	{r3, r4, r5, lr}
 8000e6e:	4605      	mov	r5, r0
 8000e70:	460c      	mov	r4, r1
  /**Check format of the input so to call the right fucntion for pixel format conversion**/
  if(ai_get_input_format() == AI_BUFFER_FMT_TYPE_Q)
 8000e72:	f7ff fc91 	bl	8000798 <ai_get_input_format>
 8000e76:	2802      	cmp	r0, #2
 8000e78:	d026      	beq.n	8000ec8 <AI_PixelValueConversion+0x5c>
  {
    AI_PixelValueConversion_QuantizedNN(Ai_Context_Ptr, (uint8_t *)pSrc);
  }
  else if(ai_get_input_format() == AI_BUFFER_FMT_TYPE_FLOAT)
 8000e7a:	f7ff fc8d 	bl	8000798 <ai_get_input_format>
 8000e7e:	2801      	cmp	r0, #1
 8000e80:	d000      	beq.n	8000e84 <AI_PixelValueConversion+0x18>
      while(1);
    }
  }
  else
  {
    while(1);
 8000e82:	e7fe      	b.n	8000e82 <AI_PixelValueConversion+0x16>
    if(Ai_Context_Ptr->nn_input_norm_scale == 255.0f)
 8000e84:	edd5 7a07 	vldr	s15, [r5, #28]
 8000e88:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000f60 <AI_PixelValueConversion+0xf4>
 8000e8c:	eef4 7a47 	vcmp.f32	s15, s14
 8000e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e94:	d13e      	bne.n	8000f14 <AI_PixelValueConversion+0xa8>
 * @param  normalization_type  Asymmetric normalization (=0), i.e. in the range [0,+1] or Symmetric normalization (=1), i.e. in the range [-1,+1]
 * @retval None
 */
void AI_PixelValueConversion_FloatNN(AiContext_TypeDef* Ai_Context_Ptr, uint8_t *pSrc, uint32_t normalization_type)
{
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000e96:	69a9      	ldr	r1, [r5, #24]
  float *pDst = (float *) Ai_Context_Ptr->nn_input_buffer;
 8000e98:	686b      	ldr	r3, [r5, #4]
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000e9a:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 8000e9e:	fb00 f202 	mul.w	r2, r0, r2
 8000ea2:	fb01 f202 	mul.w	r2, r1, r2
  else
  {
    while(1);
  }

  for (int32_t i = 0; i < nb_pixels; i++)
 8000ea6:	b172      	cbz	r2, 8000ec6 <AI_PixelValueConversion+0x5a>
 8000ea8:	4422      	add	r2, r4
  {
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000eaa:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000f64 <AI_PixelValueConversion+0xf8>
 8000eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eb2:	ee07 1a90 	vmov	s15, r1
  for (int32_t i = 0; i < nb_pixels; i++)
 8000eb6:	4294      	cmp	r4, r2
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ec0:	ece3 7a01 	vstmia	r3!, {s15}
  for (int32_t i = 0; i < nb_pixels; i++)
 8000ec4:	d1f3      	bne.n	8000eae <AI_PixelValueConversion+0x42>
}
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000ec8:	e9d5 1304 	ldrd	r1, r3, [r5, #16]
 8000ecc:	69aa      	ldr	r2, [r5, #24]
 8000ece:	fb01 f303 	mul.w	r3, r1, r3
  const uint8_t *lut = Ai_Context_Ptr->lut;
 8000ed2:	68e8      	ldr	r0, [r5, #12]
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000ed4:	fb03 f202 	mul.w	r2, r3, r2
  uint8_t *pDst = (uint8_t *) Ai_Context_Ptr->nn_input_buffer;
 8000ed8:	686b      	ldr	r3, [r5, #4]
  if (pDst > pSrc)
 8000eda:	429c      	cmp	r4, r3
 8000edc:	d20d      	bcs.n	8000efa <AI_PixelValueConversion+0x8e>
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000ede:	2a01      	cmp	r2, #1
 8000ee0:	d4f1      	bmi.n	8000ec6 <AI_PixelValueConversion+0x5a>
 8000ee2:	18a1      	adds	r1, r4, r2
 8000ee4:	4413      	add	r3, r2
      pDst[i] = lut[pSrc[i]];
 8000ee6:	460a      	mov	r2, r1
 8000ee8:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000eec:	1b12      	subs	r2, r2, r4
      pDst[i] = lut[pSrc[i]];
 8000eee:	5d45      	ldrb	r5, [r0, r5]
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000ef0:	2a02      	cmp	r2, #2
      pDst[i] = lut[pSrc[i]];
 8000ef2:	f803 5d01 	strb.w	r5, [r3, #-1]!
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000ef6:	d5f6      	bpl.n	8000ee6 <AI_PixelValueConversion+0x7a>
}
 8000ef8:	bd38      	pop	{r3, r4, r5, pc}
    for (int32_t i = 0; i < nb_pixels; i++)
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	d0e3      	beq.n	8000ec6 <AI_PixelValueConversion+0x5a>
 8000efe:	3c01      	subs	r4, #1
 8000f00:	3b01      	subs	r3, #1
 8000f02:	4422      	add	r2, r4
      pDst[i] = lut[pSrc[i]];
 8000f04:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000f08:	5c41      	ldrb	r1, [r0, r1]
    for (int32_t i = 0; i < nb_pixels; i++)
 8000f0a:	42a2      	cmp	r2, r4
      pDst[i] = lut[pSrc[i]];
 8000f0c:	f803 1f01 	strb.w	r1, [r3, #1]!
    for (int32_t i = 0; i < nb_pixels; i++)
 8000f10:	d1f8      	bne.n	8000f04 <AI_PixelValueConversion+0x98>
}
 8000f12:	bd38      	pop	{r3, r4, r5, pc}
    else if(Ai_Context_Ptr->nn_input_norm_scale == 127.0f)
 8000f14:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f68 <AI_PixelValueConversion+0xfc>
 8000f18:	eef4 7a47 	vcmp.f32	s15, s14
 8000f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f20:	d11d      	bne.n	8000f5e <AI_PixelValueConversion+0xf2>
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000f22:	69a9      	ldr	r1, [r5, #24]
  float *pDst = (float *) Ai_Context_Ptr->nn_input_buffer;
 8000f24:	686b      	ldr	r3, [r5, #4]
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000f26:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 8000f2a:	fb00 f202 	mul.w	r2, r0, r2
 8000f2e:	fb01 f202 	mul.w	r2, r1, r2
  for (int32_t i = 0; i < nb_pixels; i++)
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d0c7      	beq.n	8000ec6 <AI_PixelValueConversion+0x5a>
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000f36:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 8000f3a:	4422      	add	r2, r4
 8000f3c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000f6c <AI_PixelValueConversion+0x100>
 8000f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f44:	eeb0 7a46 	vmov.f32	s14, s12
 8000f48:	ee07 1a90 	vmov	s15, r1
  for (int32_t i = 0; i < nb_pixels; i++)
 8000f4c:	4294      	cmp	r4, r2
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f52:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8000f56:	eca3 7a01 	vstmia	r3!, {s14}
  for (int32_t i = 0; i < nb_pixels; i++)
 8000f5a:	d1f1      	bne.n	8000f40 <AI_PixelValueConversion+0xd4>
}
 8000f5c:	bd38      	pop	{r3, r4, r5, pc}
      while(1);
 8000f5e:	e7fe      	b.n	8000f5e <AI_PixelValueConversion+0xf2>
 8000f60:	437f0000 	.word	0x437f0000
 8000f64:	3b808081 	.word	0x3b808081
 8000f68:	42fe0000 	.word	0x42fe0000
 8000f6c:	3c008081 	.word	0x3c008081

08000f70 <AI_Output_Dequantize>:
* @brief  Performs the dequantization of a quantized NN output
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @retval None
*/
void AI_Output_Dequantize(AiContext_TypeDef* Ai_Context_Ptr)
{
 8000f70:	b510      	push	{r4, lr}
 8000f72:	ed2d 8b02 	vpush	{d8}
 8000f76:	4604      	mov	r4, r0
  /**Check format of the output and convert to float if required**/
  if(ai_get_output_format() == AI_BUFFER_FMT_TYPE_Q)
 8000f78:	f7ff fc16 	bl	80007a8 <ai_get_output_format>
 8000f7c:	2802      	cmp	r0, #2
 8000f7e:	d002      	beq.n	8000f86 <AI_Output_Dequantize+0x16>
      
    default:
      break;
    }  
  }
}
 8000f80:	ecbd 8b02 	vpop	{d8}
 8000f84:	bd10      	pop	{r4, pc}
    switch(ai_get_output_quantization_scheme())
 8000f86:	f7ff fc43 	bl	8000810 <ai_get_output_quantization_scheme>
 8000f8a:	2801      	cmp	r0, #1
 8000f8c:	d07b      	beq.n	8001086 <AI_Output_Dequantize+0x116>
 8000f8e:	2802      	cmp	r0, #2
 8000f90:	d037      	beq.n	8001002 <AI_Output_Dequantize+0x92>
 8000f92:	2800      	cmp	r0, #0
 8000f94:	d1f4      	bne.n	8000f80 <AI_Output_Dequantize+0x10>
      scale=ai_get_output_fxp_scale();
 8000f96:	f7ff fc59 	bl	800084c <ai_get_output_fxp_scale>
      nn_output_i8 = (ai_i8 *) Ai_Context_Ptr->nn_output_buffer;
 8000f9a:	6823      	ldr	r3, [r4, #0]
        float q_value = (float) *(nn_output_i8 + i);
 8000f9c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8000fa0:	ee05 2a90 	vmov	s11, r2
 8000fa4:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000fa8:	ee06 2a10 	vmov	s12, r2
 8000fac:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000fb0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8000fb4:	ee06 2a90 	vmov	s13, r2
 8000fb8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000fbc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000fc0:	ee07 2a10 	vmov	s14, r2
 8000fc4:	f993 2000 	ldrsb.w	r2, [r3]
 8000fc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000fcc:	ee07 2a90 	vmov	s15, r2
 8000fd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        *(nn_output_f32 + i) = scale * q_value;
 8000fd4:	ee65 5a80 	vmul.f32	s11, s11, s0
        float q_value = (float) *(nn_output_i8 + i);
 8000fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        *(nn_output_f32 + i) = scale * q_value;
 8000fdc:	ee26 6a00 	vmul.f32	s12, s12, s0
 8000fe0:	ee66 6a80 	vmul.f32	s13, s13, s0
 8000fe4:	edc3 5a04 	vstr	s11, [r3, #16]
 8000fe8:	ee27 7a00 	vmul.f32	s14, s14, s0
 8000fec:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000ff0:	ed83 6a03 	vstr	s12, [r3, #12]
 8000ff4:	edc3 6a02 	vstr	s13, [r3, #8]
 8000ff8:	ed83 7a01 	vstr	s14, [r3, #4]
 8000ffc:	ed83 0a00 	vstr	s0, [r3]
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8001000:	e7be      	b.n	8000f80 <AI_Output_Dequantize+0x10>
      scale = ai_get_output_scale();
 8001002:	f7ff fc71 	bl	80008e8 <ai_get_output_scale>
 8001006:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 800100a:	f7ff fc85 	bl	8000918 <ai_get_output_zero_point>
      nn_output_i8 = (ai_i8 *) Ai_Context_Ptr->nn_output_buffer;
 800100e:	6823      	ldr	r3, [r4, #0]
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8001010:	f993 c004 	ldrsb.w	ip, [r3, #4]
 8001014:	f993 4003 	ldrsb.w	r4, [r3, #3]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8001018:	ebac 0200 	sub.w	r2, ip, r0
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 800101c:	f993 1002 	ldrsb.w	r1, [r3, #2]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8001020:	ee05 2a90 	vmov	s11, r2
 8001024:	1a22      	subs	r2, r4, r0
 8001026:	ee06 2a10 	vmov	s12, r2
 800102a:	1a0a      	subs	r2, r1, r0
 800102c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8001030:	f993 1001 	ldrsb.w	r1, [r3, #1]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8001034:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001038:	ee07 2a90 	vmov	s15, r2
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 800103c:	f993 2000 	ldrsb.w	r2, [r3]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8001040:	1a09      	subs	r1, r1, r0
 8001042:	1a12      	subs	r2, r2, r0
 8001044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001048:	ee06 1a90 	vmov	s13, r1
 800104c:	ee07 2a10 	vmov	s14, r2
 8001050:	ee65 5a88 	vmul.f32	s11, s11, s16
 8001054:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001058:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800105c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001060:	edc3 5a04 	vstr	s11, [r3, #16]
 8001064:	ee26 6a08 	vmul.f32	s12, s12, s16
 8001068:	edc3 7a02 	vstr	s15, [r3, #8]
 800106c:	ee66 6a88 	vmul.f32	s13, s13, s16
 8001070:	ee67 7a08 	vmul.f32	s15, s14, s16
 8001074:	ed83 6a03 	vstr	s12, [r3, #12]
 8001078:	edc3 6a01 	vstr	s13, [r3, #4]
 800107c:	edc3 7a00 	vstr	s15, [r3]
}
 8001080:	ecbd 8b02 	vpop	{d8}
 8001084:	bd10      	pop	{r4, pc}
      scale = ai_get_output_scale();
 8001086:	f7ff fc2f 	bl	80008e8 <ai_get_output_scale>
 800108a:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 800108e:	f7ff fc43 	bl	8000918 <ai_get_output_zero_point>
      nn_output_u8 = (ai_u8 *) Ai_Context_Ptr->nn_output_buffer;
 8001092:	6823      	ldr	r3, [r4, #0]
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 8001094:	f893 c004 	ldrb.w	ip, [r3, #4]
 8001098:	78dc      	ldrb	r4, [r3, #3]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 800109a:	ebac 0200 	sub.w	r2, ip, r0
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 800109e:	7899      	ldrb	r1, [r3, #2]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 80010a0:	ee05 2a90 	vmov	s11, r2
 80010a4:	1a22      	subs	r2, r4, r0
 80010a6:	ee06 2a10 	vmov	s12, r2
 80010aa:	1a0a      	subs	r2, r1, r0
 80010ac:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 80010b0:	7859      	ldrb	r1, [r3, #1]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 80010b2:	ee07 2a90 	vmov	s15, r2
 80010b6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	e7c0      	b.n	8001040 <AI_Output_Dequantize+0xd0>
 80010be:	bf00      	nop

080010c0 <AI_Deinit>:
/**
 * @brief De-initializes the generated C model for a neural network
 */
void AI_Deinit(void) 
{ 
  ai_deinit(); 
 80010c0:	f7ff bca4 	b.w	8000a0c <ai_deinit>

080010c4 <APP_Init>:
 * @brief Initializes the application context structure
 * @param App_Context_Ptr pointer to application context
 */
static void App_Context_Init(AppContext_TypeDef *App_Context_Ptr)
{  
  App_Context_Ptr->Operating_Mode=NOMINAL;
 80010c4:	2101      	movs	r1, #1
  
  /*Initializes app pointers to contextx*/
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
  App_Context_Ptr->Utils_ContextPtr=&UtilsContext;
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 80010c6:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <APP_Init+0x70>)
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <APP_Init+0x74>)
  App_Context_Ptr->Utils_ContextPtr->AppCtxPtr =App_Context_Ptr;
  
  /**Test**/
  App_Context_Ptr->Test_ContextPtr->AppCtxPtr =App_Context_Ptr;
#if CAMERA_CAPTURE_RES == VGA_640_480_RES
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_vga/");
 80010ca:	f502 7c70 	add.w	ip, r2, #960	; 0x3c0
  
  /**AI**/
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
  /*{scale,zero-point} set to {255,0} since Food Reco NN model was trained using input data normalized in the range [0, 1]*/
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_scale=255.0f;
 80010ce:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800113c <APP_Init+0x78>
/**
 * @brief Initializes the application context structure
 * @param App_Context_Ptr pointer to application context
 */
void APP_Init(AppContext_TypeDef *App_Context_Ptr)
{  
 80010d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  App_Context_Ptr->Operating_Mode=NOMINAL;
 80010d4:	7001      	strb	r1, [r0, #0]
{  
 80010d6:	4604      	mov	r4, r0
  App_Context_Ptr->run_loop=1;
 80010d8:	6041      	str	r1, [r0, #4]
  App_Context_Ptr->Camera_ContextPtr->mirror_flip=CAMERA_MIRRORFLIP_NONE;
 80010da:	2600      	movs	r6, #0
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 80010dc:	4918      	ldr	r1, [pc, #96]	; (8001140 <APP_Init+0x7c>)
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.format=PXFMT_RGB888;
 80010de:	f04f 0e02 	mov.w	lr, #2
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 80010e2:	6283      	str	r3, [r0, #40]	; 0x28
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 80010e4:	6301      	str	r1, [r0, #48]	; 0x30
  App_Context_Ptr->Utils_ContextPtr=&UtilsContext;
 80010e6:	4917      	ldr	r1, [pc, #92]	; (8001144 <APP_Init+0x80>)
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 80010e8:	6382      	str	r2, [r0, #56]	; 0x38
  App_Context_Ptr->Utils_ContextPtr=&UtilsContext;
 80010ea:	6341      	str	r1, [r0, #52]	; 0x34
  App_Context_Ptr->Camera_ContextPtr->AppCtxPtr =App_Context_Ptr;
 80010ec:	6198      	str	r0, [r3, #24]
  App_Context_Ptr->Ai_ContextPtr=&Ai_Context;
 80010ee:	4816      	ldr	r0, [pc, #88]	; (8001148 <APP_Init+0x84>)
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_vga/");
 80010f0:	4d16      	ldr	r5, [pc, #88]	; (800114c <APP_Init+0x88>)
  App_Context_Ptr->Ai_ContextPtr=&Ai_Context;
 80010f2:	63e0      	str	r0, [r4, #60]	; 0x3c
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 80010f4:	4816      	ldr	r0, [pc, #88]	; (8001150 <APP_Init+0x8c>)
  App_Context_Ptr->Camera_ContextPtr->mirror_flip=CAMERA_MIRRORFLIP_NONE;
 80010f6:	61de      	str	r6, [r3, #28]
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 80010f8:	62e0      	str	r0, [r4, #44]	; 0x2c
  App_Context_Ptr->Utils_ContextPtr->AppCtxPtr =App_Context_Ptr;
 80010fa:	638c      	str	r4, [r1, #56]	; 0x38
  App_Context_Ptr->Test_ContextPtr->AppCtxPtr =App_Context_Ptr;
 80010fc:	f8c2 45fc 	str.w	r4, [r2, #1532]	; 0x5fc
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
 8001100:	4f14      	ldr	r7, [pc, #80]	; (8001154 <APP_Init+0x90>)
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_vga/");
 8001102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001104:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001108:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800110c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  App_Context_Ptr->Display_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8001110:	6b23      	ldr	r3, [r4, #48]	; 0x30
  App_Context_Init(App_Context_Ptr);
  Init_DataMemoryLayout(App_Context_Ptr);
 8001112:	4620      	mov	r0, r4
  App_Context_Ptr->Display_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8001114:	60dc      	str	r4, [r3, #12]
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8001116:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
 8001118:	601f      	str	r7, [r3, #0]
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
 800111a:	625c      	str	r4, [r3, #36]	; 0x24
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_scale=255.0f;
 800111c:	edc3 7a07 	vstr	s15, [r3, #28]
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_zp=0;
 8001120:	621e      	str	r6, [r3, #32]
  App_Context_Ptr->Preproc_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8001122:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001124:	65dc      	str	r4, [r3, #92]	; 0x5c
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.format=PXFMT_RGB888;
 8001126:	f883 e038 	strb.w	lr, [r3, #56]	; 0x38
}
 800112a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  Init_DataMemoryLayout(App_Context_Ptr);
 800112e:	f01a b9eb 	b.w	801b508 <Init_DataMemoryLayout>
 8001132:	bf00      	nop
 8001134:	240083e0 	.word	0x240083e0
 8001138:	240081ec 	.word	0x240081ec
 800113c:	437f0000 	.word	0x437f0000
 8001140:	24008278 	.word	0x24008278
 8001144:	24008be0 	.word	0x24008be0
 8001148:	24008070 	.word	0x24008070
 800114c:	08028c40 	.word	0x08028c40
 8001150:	24008288 	.word	0x24008288
 8001154:	240081d8 	.word	0x240081d8

08001158 <APP_GetNextReadyFrame>:
 *        1. send it to LCD for display
 *        2. make it available for subsequent processing
 * @param App_Context_Ptr pointer to application context
 */
void APP_GetNextReadyFrame(AppContext_TypeDef *App_Context_Ptr)
{
 8001158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
#endif
  
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 800115c:	7803      	ldrb	r3, [r0, #0]
{
 800115e:	4606      	mov	r6, r0
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
 8001160:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
 8001162:	b089      	sub	sp, #36	; 0x24
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8001164:	2b02      	cmp	r3, #2
  ValidationContext_TypeDef* Validation_Ctx_Ptr=&App_Context_Ptr->Test_ContextPtr->ValidationContext;
 8001166:	6b80      	ldr	r0, [r0, #56]	; 0x38
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8001168:	e9d2 4500 	ldrd	r4, r5, [r2]
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 800116c:	f000 8093 	beq.w	8001296 <APP_GetNextReadyFrame+0x13e>
  {
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
                                cam_capture_buff);    
  } 
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8001170:	2b03      	cmp	r3, #3
 8001172:	d033      	beq.n	80011dc <APP_GetNextReadyFrame+0x84>
                          cam_capture_buff);
  }
  else
  {
    /* Wait for current camera acquisition to complete*/
    while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8001174:	7d13      	ldrb	r3, [r2, #20]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0fc      	beq.n	8001174 <APP_GetNextReadyFrame+0x1c>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800117a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800117e:	f01b fc85 	bl	801ca8c <UTIL_LCD_Clear>
  if((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE))
 8001182:	7833      	ldrb	r3, [r6, #0]
  if(App_Context_Ptr->Operating_Mode == VALID || ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE)))
 8001184:	2b02      	cmp	r3, #2
 8001186:	d034      	beq.n	80011f2 <APP_GetNextReadyFrame+0x9a>
 8001188:	2b03      	cmp	r3, #3
 800118a:	d02e      	beq.n	80011ea <APP_GetNextReadyFrame+0x92>
    DISPLAY_Copy2LCDWriteBuffer(App_Context_Ptr->Display_ContextPtr, (uint32_t *)(App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer), 
 800118c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800118e:	2300      	movs	r3, #0
 8001190:	6811      	ldr	r1, [r2, #0]
 8001192:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001196:	9303      	str	r3, [sp, #12]
 8001198:	e9cd 2200 	strd	r2, r2, [sp]
 800119c:	2202      	movs	r2, #2
 800119e:	9202      	str	r2, [sp, #8]
 80011a0:	22a0      	movs	r2, #160	; 0xa0
 80011a2:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80011a4:	f000 fd60 	bl	8001c68 <DISPLAY_Copy2LCDWriteBuffer>
  
  /* DMA2D transfer from camera frame buffer to LCD write buffer */
  CameraCaptureBuff2LcdBuff_Copy(App_Context_Ptr);
  
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT  
  if(App_Context_Ptr->Operating_Mode != VALID)
 80011a8:	7833      	ldrb	r3, [r6, #0]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d005      	beq.n	80011ba <APP_GetNextReadyFrame+0x62>
  {
    /****Coherency purpose: invalidate the camera_capture_buffer area in L1 D-Cache before CPU reading****/
    UTILS_DCache_Coherency_Maintenance((void*)cam_capture_buff, 
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 21e1 	mov.w	r1, #460800	; 0x70800
 80011b4:	4620      	mov	r0, r4
 80011b6:	f003 fefd 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
 80011ba:	1c63      	adds	r3, r4, #1
 80011bc:	1aeb      	subs	r3, r5, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d972      	bls.n	80012a8 <APP_GetNextReadyFrame+0x150>
 80011c2:	4623      	mov	r3, r4
 80011c4:	462a      	mov	r2, r5
 80011c6:	f504 20e1 	add.w	r0, r4, #460800	; 0x70800
  }
  
  /****Copy the camera_capture_buff buffer content onto the camera_frame_buff buffer so to release the camera capture buffer before triggering the subsequent camera frame capture****/
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
  {
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 80011ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80011ce:	4283      	cmp	r3, r0
 80011d0:	f842 1b04 	str.w	r1, [r2], #4
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 80011d4:	d1f9      	bne.n	80011ca <APP_GetNextReadyFrame+0x72>
  }
#endif
}
 80011d6:	b009      	add	sp, #36	; 0x24
 80011d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 80011dc:	7903      	ldrb	r3, [r0, #4]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d1c8      	bne.n	8001174 <APP_GetNextReadyFrame+0x1c>
    TEST_GetNextDumpInput(App_Context_Ptr->Test_ContextPtr, 
 80011e2:	4621      	mov	r1, r4
 80011e4:	f002 f898 	bl	8003318 <TEST_GetNextDumpInput>
 80011e8:	e7c7      	b.n	800117a <APP_GetNextReadyFrame+0x22>
  if(App_Context_Ptr->Operating_Mode == VALID || ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE)))
 80011ea:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80011ec:	791b      	ldrb	r3, [r3, #4]
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d1cc      	bne.n	800118c <APP_GetNextReadyFrame+0x34>
    UTILS_DCache_Coherency_Maintenance((void *)App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer,
 80011f2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80011f4:	2202      	movs	r2, #2
 80011f6:	f44f 21e1 	mov.w	r1, #460800	; 0x70800
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	f003 feda 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
  if(App_Context_Ptr->Operating_Mode == VALID)
 8001200:	f896 9000 	ldrb.w	r9, [r6]
 8001204:	f1b9 0f02 	cmp.w	r9, #2
 8001208:	d1c0      	bne.n	800118c <APP_GetNextReadyFrame+0x34>
      UTILS_Dma2d_Memcpy((uint32_t *)(App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer), 
 800120a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800120c:	2700      	movs	r7, #0
 800120e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80012cc <APP_GetNextReadyFrame+0x174>
 8001212:	f44f 7af0 	mov.w	sl, #480	; 0x1e0
 8001216:	f04f 0b01 	mov.w	fp, #1
 800121a:	6818      	ldr	r0, [r3, #0]
 800121c:	4641      	mov	r1, r8
 800121e:	463b      	mov	r3, r7
 8001220:	463a      	mov	r2, r7
 8001222:	f8cd 900c 	str.w	r9, [sp, #12]
 8001226:	9706      	str	r7, [sp, #24]
 8001228:	f8cd a000 	str.w	sl, [sp]
 800122c:	e9cd aa01 	strd	sl, sl, [sp, #4]
 8001230:	e9cd bb04 	strd	fp, fp, [sp, #16]
 8001234:	f003 fe12 	bl	8004e5c <UTILS_Dma2d_Memcpy>
      UTILS_DCache_Coherency_Maintenance((void *)valid_image_buff, CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_888_BPP, INVALIDATE);
 8001238:	465a      	mov	r2, fp
 800123a:	4640      	mov	r0, r8
 800123c:	4921      	ldr	r1, [pc, #132]	; (80012c4 <APP_GetNextReadyFrame+0x16c>)
 800123e:	f003 feb9 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
      App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img.pData=valid_image_buff;
 8001242:	6af2      	ldr	r2, [r6, #44]	; 0x2c
      App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.width=224;
 8001244:	23e0      	movs	r3, #224	; 0xe0
      App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img.pData=valid_image_buff;
 8001246:	f8c2 8044 	str.w	r8, [r2, #68]	; 0x44
      ImageResize_NearestNeighbor(&App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img, 
 800124a:	f102 014c 	add.w	r1, r2, #76	; 0x4c
      App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img.format=PXFMT_RGB888;
 800124e:	f882 9048 	strb.w	r9, [r2, #72]	; 0x48
      ImageResize_NearestNeighbor(&App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img, 
 8001252:	f102 003c 	add.w	r0, r2, #60	; 0x3c
      App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData=valid_image_buff;
 8001256:	f8c2 8054 	str.w	r8, [r2, #84]	; 0x54
      App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.format=PXFMT_RGB888;
 800125a:	f882 9058 	strb.w	r9, [r2, #88]	; 0x58
      App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.height=224;
 800125e:	e9c2 3313 	strd	r3, r3, [r2, #76]	; 0x4c
      App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img.height=CAM_RES_HEIGHT;
 8001262:	e9c2 aa0f 	strd	sl, sl, [r2, #60]	; 0x3c
      App_Context_Ptr->Preproc_ContextPtr->Roi.y0=0;
 8001266:	e9c2 7703 	strd	r7, r7, [r2, #12]
      App_Context_Ptr->Preproc_ContextPtr->Roi.height=0;
 800126a:	e9c2 7705 	strd	r7, r7, [r2, #20]
      ImageResize_NearestNeighbor(&App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img, 
 800126e:	320c      	adds	r2, #12
 8001270:	f01b fbaa 	bl	801c9c8 <ImageResize_NearestNeighbor>
      UTILS_DCache_Coherency_Maintenance((void *)valid_image_buff, CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_888_BPP, CLEAN);
 8001274:	464a      	mov	r2, r9
 8001276:	4640      	mov	r0, r8
 8001278:	4912      	ldr	r1, [pc, #72]	; (80012c4 <APP_GetNextReadyFrame+0x16c>)
 800127a:	f003 fe9b 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
      DISPLAY_Copy2LCDWriteBuffer(App_Context_Ptr->Display_ContextPtr, (uint32_t *)(valid_image_buff), 50,
 800127e:	23e0      	movs	r3, #224	; 0xe0
 8001280:	4641      	mov	r1, r8
 8001282:	2232      	movs	r2, #50	; 0x32
 8001284:	e9cd 3300 	strd	r3, r3, [sp]
 8001288:	e9cd b702 	strd	fp, r7, [sp, #8]
 800128c:	2382      	movs	r3, #130	; 0x82
 800128e:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8001290:	f000 fcea 	bl	8001c68 <DISPLAY_Copy2LCDWriteBuffer>
 8001294:	e788      	b.n	80011a8 <APP_GetNextReadyFrame+0x50>
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8001296:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800129a:	2b00      	cmp	r3, #0
 800129c:	f47f af6a 	bne.w	8001174 <APP_GetNextReadyFrame+0x1c>
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
 80012a0:	4621      	mov	r1, r4
 80012a2:	f002 f879 	bl	8003398 <TEST_GetNextValidationInput>
 80012a6:	e768      	b.n	800117a <APP_GetNextReadyFrame+0x22>
 80012a8:	4807      	ldr	r0, [pc, #28]	; (80012c8 <APP_GetNextReadyFrame+0x170>)
 80012aa:	1e63      	subs	r3, r4, #1
 80012ac:	1e6a      	subs	r2, r5, #1
 80012ae:	4420      	add	r0, r4
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 80012b0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 80012b4:	4283      	cmp	r3, r0
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 80012b6:	f802 1f01 	strb.w	r1, [r2, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 80012ba:	d1f9      	bne.n	80012b0 <APP_GetNextReadyFrame+0x158>
}
 80012bc:	b009      	add	sp, #36	; 0x24
 80012be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012c2:	bf00      	nop
 80012c4:	000a8c00 	.word	0x000a8c00
 80012c8:	000707ff 	.word	0x000707ff
 80012cc:	d0aa15e0 	.word	0xd0aa15e0

080012d0 <APP_StartNewFrameAcquisition>:
/**
 * @brief Start the camera acquisition of the subsequent frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_StartNewFrameAcquisition(AppContext_TypeDef *App_Context_Ptr)
{
 80012d0:	b570      	push	{r4, r5, r6, lr}
  if(App_Context_Ptr->Operating_Mode == NOMINAL || 
 80012d2:	7803      	ldrb	r3, [r0, #0]
{
 80012d4:	4604      	mov	r4, r0
  if(App_Context_Ptr->Operating_Mode == NOMINAL || 
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d008      	beq.n	80012ec <APP_StartNewFrameAcquisition+0x1c>
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d006      	beq.n	80012ec <APP_StartNewFrameAcquisition+0x1c>
     App_Context_Ptr->Operating_Mode == CAPTURE || 
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d000      	beq.n	80012e4 <APP_StartNewFrameAcquisition+0x14>
    
    /***Resume the camera capture in NOMINAL mode****/
    BSP_CAMERA_Resume(0);
  //  __enable_irq();
  }
}
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
       ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)))
 80012e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80012e6:	791b      	ldrb	r3, [r3, #4]
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d0fa      	beq.n	80012e2 <APP_StartNewFrameAcquisition+0x12>
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 80012ec:	2500      	movs	r5, #0
 80012ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 80012f0:	6b66      	ldr	r6, [r4, #52]	; 0x34
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 80012f2:	609d      	str	r5, [r3, #8]
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 80012f4:	f00c fb90 	bl	800da18 <HAL_GetTick>
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 80012f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 80012fa:	4602      	mov	r2, r0
    BSP_CAMERA_Resume(0);
 80012fc:	4628      	mov	r0, r5
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 80012fe:	61b2      	str	r2, [r6, #24]
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8001300:	751d      	strb	r5, [r3, #20]
}
 8001302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BSP_CAMERA_Resume(0);
 8001306:	f00b b95d 	b.w	800c5c4 <BSP_CAMERA_Resume>
 800130a:	bf00      	nop

0800130c <APP_FramePreprocess>:
 * @param App_Context_Ptr pointer to application context
 */
void APP_FramePreprocess(AppContext_TypeDef *App_Context_Ptr)
{
  /*Call a fct in charge of executing the sequence of preprocessing steps*/
  Run_Preprocessing(App_Context_Ptr);
 800130c:	f01a b912 	b.w	801b534 <Run_Preprocessing>

08001310 <APP_NetworkInference>:
/**
 * @brief Run neural network inference on preprocessed captured frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_NetworkInference(AppContext_TypeDef *App_Context_Ptr)
{
 8001310:	b538      	push	{r3, r4, r5, lr}
  uint32_t tinf_start;
  uint32_t tinf_stop;
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8001312:	e9d0 530e 	ldrd	r5, r3, [r0, #56]	; 0x38
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 8001316:	4a16      	ldr	r2, [pc, #88]	; (8001370 <APP_NetworkInference+0x60>)
{
 8001318:	4604      	mov	r4, r0
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
 800131a:	685b      	ldr	r3, [r3, #4]
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 800131c:	f8c5 25cc 	str.w	r2, [r5, #1484]	; 0x5cc
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
 8001320:	f8c5 35c8 	str.w	r3, [r5, #1480]	; 0x5c8
  TestRunCtxt_Ptr->src_width_size=ai_get_input_width();
 8001324:	f7ff fa2c 	bl	8000780 <ai_get_input_width>
 8001328:	f8c5 05d0 	str.w	r0, [r5, #1488]	; 0x5d0
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 800132c:	f7ff fa22 	bl	8000774 <ai_get_input_height>
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE;
  TestRunCtxt_Ptr->PerformCapture=1;
 8001330:	2301      	movs	r3, #1
  TestRunCtxt_Ptr->DumpFormat=BMP888;
 8001332:	2202      	movs	r2, #2
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE;
 8001334:	f44f 3113 	mov.w	r1, #150528	; 0x24c00
  TestRunCtxt_Ptr->PerformCapture=1;
 8001338:	f8c5 35dc 	str.w	r3, [r5, #1500]	; 0x5dc
  TestRunCtxt_Ptr->DumpFormat=BMP888;
 800133c:	f885 25e0 	strb.w	r2, [r5, #1504]	; 0x5e0
  TestRunCtxt_Ptr->rb_swap=1;
 8001340:	f8c5 35e4 	str.w	r3, [r5, #1508]	; 0x5e4
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 8001344:	f8c5 05d4 	str.w	r0, [r5, #1492]	; 0x5d4
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE;
 8001348:	f8c5 15d8 	str.w	r1, [r5, #1496]	; 0x5d8
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 800134c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800134e:	7821      	ldrb	r1, [r4, #0]
 8001350:	f002 fd2a 	bl	8003da8 <TEST_Run>
 
  tinf_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8001354:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001356:	f003 fd7f 	bl	8004e58 <UTILS_GetTimeStamp>
 800135a:	4605      	mov	r5, r0
  
  /***********************************/
  /*********Run NN inference**********/
  /***********************************/
  AI_Run(App_Context_Ptr->Ai_ContextPtr);
 800135c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800135e:	f7ff fd81 	bl	8000e64 <AI_Run>
  
  tinf_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8001362:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001364:	f003 fd78 	bl	8004e58 <UTILS_GetTimeStamp>

  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]=tinf_stop-tinf_start;
 8001368:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800136a:	1b40      	subs	r0, r0, r5
 800136c:	6118      	str	r0, [r3, #16]
}
 800136e:	bd38      	pop	{r3, r4, r5, pc}
 8001370:	24000084 	.word	0x24000084

08001374 <APP_Postprocess>:
/**
 * @brief Run post-processing operation
 * @param App_Context_Ptr pointer to application context
 */
void APP_Postprocess(AppContext_TypeDef *App_Context_Ptr)
{
 8001374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;

  /*** At that point, it is recommended to wait until current camera acquisition is completed before proceeding  
  *** before proceeding in order to avoid bottleneck at FMC slave (btw LTDC/DMA2D and DMA).
  ***/
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8001378:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
 800137a:	b094      	sub	sp, #80	; 0x50
 800137c:	4604      	mov	r4, r0
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 800137e:	6b85      	ldr	r5, [r0, #56]	; 0x38
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8001380:	7d13      	ldrb	r3, [r2, #20]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0fc      	beq.n	8001380 <APP_Postprocess+0xc>
  
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 8001386:	6b60      	ldr	r0, [r4, #52]	; 0x34
  /**NN ouput dequantization if required**/
  AI_Output_Dequantize(App_Context_Ptr->Ai_ContextPtr);

  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
  TestRunCtxt_Ptr->src_width_size=0;
 8001388:	2600      	movs	r6, #0
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 800138a:	f003 fe6f 	bl	800506c <UTILS_Compute_ExecutionTiming>
  AI_Output_Dequantize(App_Context_Ptr->Ai_ContextPtr);
 800138e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001390:	f7ff fdee 	bl	8000f70 <AI_Output_Dequantize>
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 8001394:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  TestRunCtxt_Ptr->src_height_size=0;
  TestRunCtxt_Ptr->src_size=/*AI_NETWORK_OUT_1_SIZE*/AI_NETWORK_OUT_1_SIZE_BYTES;//so to make it compatible w/ case where dump is in SDRAM
 8001396:	2705      	movs	r7, #5
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 8001398:	4aa1      	ldr	r2, [pc, #644]	; (8001620 <APP_Postprocess+0x2ac>)
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 800139a:	681b      	ldr	r3, [r3, #0]
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 800139c:	f8c5 25cc 	str.w	r2, [r5, #1484]	; 0x5cc
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=TXT;
 80013a0:	f885 75e0 	strb.w	r7, [r5, #1504]	; 0x5e0
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 80013a4:	f8c5 35c8 	str.w	r3, [r5, #1480]	; 0x5c8
  TestRunCtxt_Ptr->src_width_size=0;
 80013a8:	f8c5 65d0 	str.w	r6, [r5, #1488]	; 0x5d0
  TestRunCtxt_Ptr->src_height_size=0;
 80013ac:	f8c5 65d4 	str.w	r6, [r5, #1492]	; 0x5d4
  TestRunCtxt_Ptr->src_size=/*AI_NETWORK_OUT_1_SIZE*/AI_NETWORK_OUT_1_SIZE_BYTES;//so to make it compatible w/ case where dump is in SDRAM
 80013b0:	f8c5 75d8 	str.w	r7, [r5, #1496]	; 0x5d8
  TestRunCtxt_Ptr->PerformCapture=0;
 80013b4:	f8c5 65dc 	str.w	r6, [r5, #1500]	; 0x5dc
  TestRunCtxt_Ptr->rb_swap=0;
 80013b8:	f8c5 65e4 	str.w	r6, [r5, #1508]	; 0x5e4
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80013bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013be:	7821      	ldrb	r1, [r4, #0]
 80013c0:	f002 fcf2 	bl	8003da8 <TEST_Run>
  for (int i = 0; i < NN_OUTPUT_CLASS_NUMBER; i++)
  {
    App_Context_Ptr->ranking[i] = i;
  }
  
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 80013c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    App_Context_Ptr->ranking[i] = i;
 80013c6:	2101      	movs	r1, #1
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 80013c8:	463a      	mov	r2, r7
 80013ca:	6818      	ldr	r0, [r3, #0]
    App_Context_Ptr->ranking[i] = i;
 80013cc:	2302      	movs	r3, #2
 80013ce:	6166      	str	r6, [r4, #20]
  
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80013d0:	4d94      	ldr	r5, [pc, #592]	; (8001624 <APP_Postprocess+0x2b0>)
    App_Context_Ptr->ranking[i] = i;
 80013d2:	e9c4 1306 	strd	r1, r3, [r4, #24]
 80013d6:	2304      	movs	r3, #4
 80013d8:	2103      	movs	r1, #3
 80013da:	e9c4 1308 	strd	r1, r3, [r4, #32]
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 80013de:	f104 0114 	add.w	r1, r4, #20
 80013e2:	f003 fe19 	bl	8005018 <UTILS_Bubblesort>
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80013e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80013e8:	6961      	ldr	r1, [r4, #20]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80013ea:	681a      	ldr	r2, [r3, #0]
  
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 80013ec:	7823      	ldrb	r3, [r4, #0]
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80013ee:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80013f2:	6812      	ldr	r2, [r2, #0]
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 80013f4:	2b01      	cmp	r3, #1
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80013f6:	60e1      	str	r1, [r4, #12]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80013f8:	6122      	str	r2, [r4, #16]
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 80013fa:	d005      	beq.n	8001408 <APP_Postprocess+0x94>
    //AudioPlay_demo();

  }
  else 
  {
    TEST_PostProcess(App_Context_Ptr->Test_ContextPtr);
 80013fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  }
}
 80013fe:	b014      	add	sp, #80	; 0x50
 8001400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TEST_PostProcess(App_Context_Ptr->Test_ContextPtr);
 8001404:	f003 b80c 	b.w	8004420 <TEST_PostProcess>
  occurrence_number--;
 8001408:	4b87      	ldr	r3, [pc, #540]	; (8001628 <APP_Postprocess+0x2b4>)
 800140a:	6818      	ldr	r0, [r3, #0]
  if (occurrence_number == 0)
 800140c:	3801      	subs	r0, #1
 800140e:	d003      	beq.n	8001418 <APP_Postprocess+0xa4>
  occurrence_number--;
 8001410:	6018      	str	r0, [r3, #0]
}
 8001412:	b014      	add	sp, #80	; 0x50
 8001414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      display_mode = !display_mode;
 8001418:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8001648 <APP_Postprocess+0x2d4>
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 800141c:	f009 fcc8 	bl	800adb0 <BSP_PB_GetState>
 8001420:	2800      	cmp	r0, #0
 8001422:	d179      	bne.n	8001518 <APP_Postprocess+0x1a4>
 8001424:	ae02      	add	r6, sp, #8
    if (display_mode == 0)
 8001426:	f8d8 7000 	ldr.w	r7, [r8]
 800142a:	2f00      	cmp	r7, #0
 800142c:	f000 80be 	beq.w	80015ac <APP_Postprocess+0x238>
    else  if (display_mode == 1)
 8001430:	2f01      	cmp	r7, #1
 8001432:	f000 80c7 	beq.w	80015c4 <APP_Postprocess+0x250>
      sprintf(msg, "%s %.0f%%", NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[i]], *((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+i) * 100);
 8001436:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001438:	4630      	mov	r0, r6
 800143a:	eddf 7a7c 	vldr	s15, [pc, #496]	; 800162c <APP_Postprocess+0x2b8>
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6962      	ldr	r2, [r4, #20]
 8001442:	ed93 7a00 	vldr	s14, [r3]
 8001446:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800144a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800144e:	4978      	ldr	r1, [pc, #480]	; (8001630 <APP_Postprocess+0x2bc>)
 8001450:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001454:	ed8d 7b00 	vstr	d7, [sp]
 8001458:	f024 fec4 	bl	80261e4 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + i), (uint8_t *)msg, CENTER_MODE);
 800145c:	f01b fb0e 	bl	801ca7c <UTIL_LCD_GetFont>
 8001460:	88c1      	ldrh	r1, [r0, #6]
 8001462:	2301      	movs	r3, #1
 8001464:	4632      	mov	r2, r6
 8001466:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800146a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800146e:	2000      	movs	r0, #0
 8001470:	f01b fbfc 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Context_Ptr->nn_inference_time);
 8001474:	68a2      	ldr	r2, [r4, #8]
 8001476:	496f      	ldr	r1, [pc, #444]	; (8001634 <APP_Postprocess+0x2c0>)
 8001478:	4630      	mov	r0, r6
      myTest = App_Context_Ptr->ranking[i];
 800147a:	6965      	ldr	r5, [r4, #20]
    sprintf(msg, "Inference: %ldms", App_Context_Ptr->nn_inference_time);
 800147c:	f024 feb2 	bl	80261e4 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 8001480:	f01b fafc 	bl	801ca7c <UTIL_LCD_GetFont>
 8001484:	88c1      	ldrh	r1, [r0, #6]
 8001486:	2301      	movs	r3, #1
 8001488:	4632      	mov	r2, r6
 800148a:	0109      	lsls	r1, r1, #4
 800148c:	2000      	movs	r0, #0
 800148e:	f01b fbed 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Fps: %.1f", 1000.0F / (float)(App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.Tfps));
 8001492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001494:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001638 <APP_Postprocess+0x2c4>
 8001498:	4630      	mov	r0, r6
 800149a:	edd3 7a05 	vldr	s15, [r3, #20]
 800149e:	4967      	ldr	r1, [pc, #412]	; (800163c <APP_Postprocess+0x2c8>)
 80014a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014a8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80014ac:	ec53 2b17 	vmov	r2, r3, d7
 80014b0:	f024 fe98 	bl	80261e4 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_FPS_LINE), (uint8_t *)msg, CENTER_MODE);
 80014b4:	f01b fae2 	bl	801ca7c <UTIL_LCD_GetFont>
 80014b8:	88c1      	ldrh	r1, [r0, #6]
 80014ba:	2301      	movs	r3, #1
 80014bc:	4632      	mov	r2, r6
 80014be:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80014c2:	2000      	movs	r0, #0
 80014c4:	4099      	lsls	r1, r3
 80014c6:	f01b fbd1 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 80014ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80014cc:	f000 fbaa 	bl	8001c24 <DISPLAY_Refresh>
    BSP_LED_Off(LED_GREEN);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f009 fbf9 	bl	800acc8 <BSP_LED_Off>
    BSP_LED_Off(LED_ORANGE);
 80014d6:	2001      	movs	r0, #1
 80014d8:	f009 fbf6 	bl	800acc8 <BSP_LED_Off>
    BSP_LED_Off(LED_RED);
 80014dc:	2002      	movs	r0, #2
 80014de:	f009 fbf3 	bl	800acc8 <BSP_LED_Off>
    if ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_BAD_RES)
 80014e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014e4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001640 <APP_Postprocess+0x2cc>
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d452      	bmi.n	800159e <APP_Postprocess+0x22a>
    else if (((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) >= NN_BAD_RES) && ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_GOOD_RES))
 80014f8:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001644 <APP_Postprocess+0x2d0>
      myTest = App_Context_Ptr->ranking[i];
 80014fc:	b2ed      	uxtb	r5, r5
    else if (((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) >= NN_BAD_RES) && ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_GOOD_RES))
 80014fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      BSP_LED_On(LED_ORANGE);
 8001506:	bf4c      	ite	mi
 8001508:	2001      	movmi	r0, #1
      BSP_LED_On(LED_GREEN);
 800150a:	2000      	movpl	r0, #0
 800150c:	f009 fbca 	bl	800aca4 <BSP_LED_On>
    	  AudioPlay_demo(myTest);
 8001510:	4628      	mov	r0, r5
 8001512:	f7ff fb25 	bl	8000b60 <AudioPlay_demo>
 8001516:	e77c      	b.n	8001412 <APP_Postprocess+0x9e>
      display_mode = !display_mode;
 8001518:	f8d8 3000 	ldr.w	r3, [r8]
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800151c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
        sprintf(msg, "Entering CAMERA PREVIEW mode");
 8001520:	ae02      	add	r6, sp, #8
      display_mode = !display_mode;
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	f8c8 3000 	str.w	r3, [r8]
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800152c:	f01b faae 	bl	801ca8c <UTIL_LCD_Clear>
      if (display_mode == 1)
 8001530:	f8d8 3000 	ldr.w	r3, [r8]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d068      	beq.n	800160a <APP_Postprocess+0x296>
      else  if (display_mode == 0)
 8001538:	2b00      	cmp	r3, #0
 800153a:	d05b      	beq.n	80015f4 <APP_Postprocess+0x280>
      UTIL_LCD_DisplayStringAt(0, LINE(9), (uint8_t*)msg, CENTER_MODE);
 800153c:	f01b fa9e 	bl	801ca7c <UTIL_LCD_GetFont>
 8001540:	88c1      	ldrh	r1, [r0, #6]
 8001542:	2301      	movs	r3, #1
 8001544:	4632      	mov	r2, r6
 8001546:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800154a:	2000      	movs	r0, #0
 800154c:	f01b fb8e 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "Please release button");
 8001550:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800164c <APP_Postprocess+0x2d8>
 8001554:	4637      	mov	r7, r6
 8001556:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800155a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800155c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001560:	f847 0b04 	str.w	r0, [r7], #4
 8001564:	8039      	strh	r1, [r7, #0]
      UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t*)msg, CENTER_MODE);
 8001566:	f01b fa89 	bl	801ca7c <UTIL_LCD_GetFont>
 800156a:	88c1      	ldrh	r1, [r0, #6]
 800156c:	2301      	movs	r3, #1
 800156e:	2000      	movs	r0, #0
 8001570:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8001574:	4632      	mov	r2, r6
 8001576:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800157a:	f01b fb77 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 800157e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001580:	f000 fb50 	bl	8001c24 <DISPLAY_Refresh>
      while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET);
 8001584:	2000      	movs	r0, #0
 8001586:	f009 fc13 	bl	800adb0 <BSP_PB_GetState>
 800158a:	2800      	cmp	r0, #0
 800158c:	d1fa      	bne.n	8001584 <APP_Postprocess+0x210>
      HAL_Delay(200);
 800158e:	20c8      	movs	r0, #200	; 0xc8
 8001590:	f00c fa48 	bl	800da24 <HAL_Delay>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001594:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001598:	f01b fa78 	bl	801ca8c <UTIL_LCD_Clear>
 800159c:	e743      	b.n	8001426 <APP_Postprocess+0xb2>
      BSP_LED_On(LED_RED);
 800159e:	2002      	movs	r0, #2
 80015a0:	f009 fb80 	bl	800aca4 <BSP_LED_On>
      AudioPlay_demo(myTest);
 80015a4:	2006      	movs	r0, #6
 80015a6:	f7ff fadb 	bl	8000b60 <AudioPlay_demo>
 80015aa:	e732      	b.n	8001412 <APP_Postprocess+0x9e>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);/*To clear the camera capture*/
 80015ac:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80015b0:	f01b fa6c 	bl	801ca8c <UTIL_LCD_Clear>
      DISPLAY_FoodLogo(App_Context_Ptr->Display_ContextPtr, LCD_RES_WIDTH / 2 - 64, LCD_RES_HEIGHT / 2 -100, App_Context_Ptr->ranking[0]);
 80015b4:	6963      	ldr	r3, [r4, #20]
 80015b6:	228c      	movs	r2, #140	; 0x8c
 80015b8:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80015bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80015be:	f000 fb13 	bl	8001be8 <DISPLAY_FoodLogo>
 80015c2:	e738      	b.n	8001436 <APP_Postprocess+0xc2>
      sprintf(msg, "CAMERA PREVIEW MODE");
 80015c4:	f8df e088 	ldr.w	lr, [pc, #136]	; 8001650 <APP_Postprocess+0x2dc>
 80015c8:	46b4      	mov	ip, r6
 80015ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80015ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80015d2:	f8de 3000 	ldr.w	r3, [lr]
 80015d6:	f8cc 3000 	str.w	r3, [ip]
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_ACQU_MODE_LINE), (uint8_t*)msg, CENTER_MODE);
 80015da:	f01b fa4f 	bl	801ca7c <UTIL_LCD_GetFont>
 80015de:	88c1      	ldrh	r1, [r0, #6]
 80015e0:	463b      	mov	r3, r7
 80015e2:	4632      	mov	r2, r6
 80015e4:	eb01 07c1 	add.w	r7, r1, r1, lsl #3
 80015e8:	2000      	movs	r0, #0
 80015ea:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80015ee:	f01b fb3d 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
 80015f2:	e720      	b.n	8001436 <APP_Postprocess+0xc2>
        sprintf(msg, "Exiting CAMERA PREVIEW mode");
 80015f4:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8001654 <APP_Postprocess+0x2e0>
 80015f8:	4637      	mov	r7, r6
 80015fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80015fe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001600:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8001604:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8001608:	e798      	b.n	800153c <APP_Postprocess+0x1c8>
        sprintf(msg, "Entering CAMERA PREVIEW mode");
 800160a:	f8df c04c 	ldr.w	ip, [pc, #76]	; 8001658 <APP_Postprocess+0x2e4>
 800160e:	4637      	mov	r7, r6
 8001610:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001614:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001616:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800161a:	c707      	stmia	r7!, {r0, r1, r2}
 800161c:	703b      	strb	r3, [r7, #0]
 800161e:	e78d      	b.n	800153c <APP_Postprocess+0x1c8>
 8001620:	240000a4 	.word	0x240000a4
 8001624:	24000008 	.word	0x24000008
 8001628:	24000004 	.word	0x24000004
 800162c:	42c80000 	.word	0x42c80000
 8001630:	08028cc4 	.word	0x08028cc4
 8001634:	08028cd0 	.word	0x08028cd0
 8001638:	447a0000 	.word	0x447a0000
 800163c:	08028ce4 	.word	0x08028ce4
 8001640:	3f0ccccd 	.word	0x3f0ccccd
 8001644:	3f333333 	.word	0x3f333333
 8001648:	24000000 	.word	0x24000000
 800164c:	08028c98 	.word	0x08028c98
 8001650:	08028cb0 	.word	0x08028cb0
 8001654:	08028c7c 	.word	0x08028c7c
 8001658:	08028c5c 	.word	0x08028c5c

0800165c <DCMI_MDMAError>:
  * @retval None
  */
static void DCMI_MDMAError(MDMA_HandleTypeDef *hmdma)
{
  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800165c:	6802      	ldr	r2, [r0, #0]
 800165e:	68d3      	ldr	r3, [r2, #12]
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	60d3      	str	r3, [r2, #12]

  Error_Handler();
 8001666:	f003 bd15 	b.w	8005094 <Error_Handler>
 800166a:	bf00      	nop

0800166c <DCMI_DMAError>:
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800166c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800166e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001670:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001672:	2a02      	cmp	r2, #2
 8001674:	d006      	beq.n	8001684 <DCMI_DMAError+0x18>
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800167c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800167e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001682:	64da      	str	r2, [r3, #76]	; 0x4c
  Error_Handler();
 8001684:	f003 bd06 	b.w	8005094 <Error_Handler>

08001688 <DCMI_DMALineXferCplt>:
{
 8001688:	4603      	mov	r3, r0
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 800168a:	490b      	ldr	r1, [pc, #44]	; (80016b8 <DCMI_DMALineXferCplt+0x30>)
 800168c:	480b      	ldr	r0, [pc, #44]	; (80016bc <DCMI_DMALineXferCplt+0x34>)
{
 800168e:	b570      	push	{r4, r5, r6, lr}
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001690:	6b9c      	ldr	r4, [r3, #56]	; 0x38
{
 8001692:	b082      	sub	sp, #8
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8001694:	2601      	movs	r6, #1
  uint32_t line_size =  hdcmi->XferSize * 4U;
 8001696:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 8001698:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800169a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  uint32_t line_size =  hdcmi->XferSize * 4U;
 800169c:	009b      	lsls	r3, r3, #2
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 800169e:	9600      	str	r6, [sp, #0]
 80016a0:	fb03 2205 	mla	r2, r3, r5, r2
 80016a4:	f00f fede 	bl	8011464 <HAL_MDMA_Start_IT>
 80016a8:	b908      	cbnz	r0, 80016ae <DCMI_DMALineXferCplt+0x26>
}
 80016aa:	b002      	add	sp, #8
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
 80016ae:	b002      	add	sp, #8
 80016b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 80016b4:	f003 bcee 	b.w	8005094 <Error_Handler>
 80016b8:	30000000 	.word	0x30000000
 80016bc:	2400820c 	.word	0x2400820c

080016c0 <DCMI_MDMAFrameXferCplt>:
  __HAL_MDMA_DISABLE(hmdma);
 80016c0:	6801      	ldr	r1, [r0, #0]
  hdcmi->XferCount++;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <DCMI_MDMAFrameXferCplt+0x3c>)
  __HAL_MDMA_DISABLE(hmdma);
 80016c4:	68ca      	ldr	r2, [r1, #12]
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80016c6:	6c18      	ldr	r0, [r3, #64]	; 0x40
  __HAL_MDMA_DISABLE(hmdma);
 80016c8:	f022 0201 	bic.w	r2, r2, #1
 80016cc:	60ca      	str	r2, [r1, #12]
  hdcmi->XferCount++;
 80016ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016d0:	3201      	adds	r2, #1
 80016d2:	639a      	str	r2, [r3, #56]	; 0x38
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80016d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016d6:	4282      	cmp	r2, r0
 80016d8:	d000      	beq.n	80016dc <DCMI_MDMAFrameXferCplt+0x1c>
}
 80016da:	4770      	bx	lr
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68d1      	ldr	r1, [r2, #12]
 80016e0:	f041 0101 	orr.w	r1, r1, #1
 80016e4:	60d1      	str	r1, [r2, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	f012 0202 	ands.w	r2, r2, #2
 80016ec:	d003      	beq.n	80016f6 <DCMI_MDMAFrameXferCplt+0x36>
      hdcmi->State = HAL_DCMI_STATE_READY;
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80016f4:	4770      	bx	lr
      hdcmi->XferCount = 0;
 80016f6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	24009e04 	.word	0x24009e04

08001700 <CAMERA_Init>:
  Camera_Context_Ptr->new_frame_ready=0;
 8001700:	2300      	movs	r3, #0
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001702:	4a65      	ldr	r2, [pc, #404]	; (8001898 <CAMERA_Init+0x198>)
  Camera_Context_Ptr->mirror_flip=1;
 8001704:	2101      	movs	r1, #1
{
 8001706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Camera_Context_Ptr->vsync_it=0;
 800170a:	6083      	str	r3, [r0, #8]
{
 800170c:	b084      	sub	sp, #16
  Camera_Context_Ptr->new_frame_ready=0;
 800170e:	7503      	strb	r3, [r0, #20]
{
 8001710:	4605      	mov	r5, r0
  Camera_Context_Ptr->mirror_flip=1;
 8001712:	61c1      	str	r1, [r0, #28]
  hmdma.Instance = MDMA_Channel0;
 8001714:	4c61      	ldr	r4, [pc, #388]	; (800189c <CAMERA_Init+0x19c>)
  Camera_Context_Ptr->Tvsync_evt=0;
 8001716:	e9c0 3303 	strd	r3, r3, [r0, #12]
  __HAL_RCC_MDMA_CLK_ENABLE();
 800171a:	f8d2 10d4 	ldr.w	r1, [r2, #212]	; 0xd4
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 800171e:	4620      	mov	r0, r4
  hmdma.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001720:	6123      	str	r3, [r4, #16]
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001722:	f041 0101 	orr.w	r1, r1, #1
  hmdma.Init.SourceBurst              = MDMA_DEST_BURST_SINGLE;
 8001726:	62e3      	str	r3, [r4, #44]	; 0x2c
  hmdma.Init.DestBlockAddressOffset   = 0;
 8001728:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
  __HAL_RCC_MDMA_CLK_ENABLE();
 800172c:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 8001730:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  hmdma.Instance = MDMA_Channel0;
 8001734:	4a5a      	ldr	r2, [pc, #360]	; (80018a0 <CAMERA_Init+0x1a0>)
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001736:	f003 0301 	and.w	r3, r3, #1
  hmdma.Instance = MDMA_Channel0;
 800173a:	6022      	str	r2, [r4, #0]
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 800173c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001740:	9303      	str	r3, [sp, #12]
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8001742:	2380      	movs	r3, #128	; 0x80
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 8001744:	6062      	str	r2, [r4, #4]
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8001746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800174a:	60e3      	str	r3, [r4, #12]
  hmdma.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800174c:	6223      	str	r3, [r4, #32]
  hmdma.Init.BufferTransferLength     = 128;
 800174e:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8001750:	f240 2302 	movw	r3, #514	; 0x202
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8001754:	60a2      	str	r2, [r4, #8]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8001756:	f640 0208 	movw	r2, #2056	; 0x808
  hmdma.Init.SourceInc                = MDMA_SRC_INC_WORD;
 800175a:	6163      	str	r3, [r4, #20]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800175c:	2320      	movs	r3, #32
  __HAL_RCC_MDMA_CLK_ENABLE();
 800175e:	9903      	ldr	r1, [sp, #12]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8001760:	e9c4 2306 	strd	r2, r3, [r4, #24]
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8001764:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 8001768:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800176c:	6262      	str	r2, [r4, #36]	; 0x24
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 800176e:	6323      	str	r3, [r4, #48]	; 0x30
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 8001770:	f00f fdfe 	bl	8011370 <HAL_MDMA_Init>
 8001774:	2800      	cmp	r0, #0
 8001776:	f040 8086 	bne.w	8001886 <CAMERA_Init+0x186>
  HAL_NVIC_SetPriority(MDMA_IRQn, 15U, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	210f      	movs	r1, #15
 800177e:	207a      	movs	r0, #122	; 0x7a
 8001780:	f00c f982 	bl	800da88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001784:	207a      	movs	r0, #122	; 0x7a
 8001786:	f00c f9bd 	bl	800db04 <HAL_NVIC_EnableIRQ>
  BSP_CAMERA_PwrDown(0);
 800178a:	2000      	movs	r0, #0
 800178c:	f00a ff98 	bl	800c6c0 <BSP_CAMERA_PwrDown>
  HAL_Delay(200);
 8001790:	20c8      	movs	r0, #200	; 0xc8
 8001792:	f00c f947 	bl	800da24 <HAL_Delay>
  if (BSP_CAMERA_Init(0, CAMERA_RESOLUTION, CAMERA_PF_RGB565) != BSP_ERROR_NONE) 
 8001796:	2200      	movs	r2, #0
 8001798:	2103      	movs	r1, #3
 800179a:	4610      	mov	r0, r2
 800179c:	f00a fcd8 	bl	800c150 <BSP_CAMERA_Init>
 80017a0:	2800      	cmp	r0, #0
 80017a2:	d16d      	bne.n	8001880 <CAMERA_Init+0x180>
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 80017a4:	4a3f      	ldr	r2, [pc, #252]	; (80018a4 <CAMERA_Init+0x1a4>)
 80017a6:	f245 6340 	movw	r3, #22080	; 0x5640
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d057      	beq.n	8001860 <CAMERA_Init+0x160>
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 80017b0:	69e9      	ldr	r1, [r5, #28]
 80017b2:	2000      	movs	r0, #0
 80017b4:	f00a ff5e 	bl	800c674 <BSP_CAMERA_SetMirrorFlip>
 80017b8:	4607      	mov	r7, r0
 80017ba:	2800      	cmp	r0, #0
 80017bc:	d14f      	bne.n	800185e <CAMERA_Init+0x15e>
  HAL_Delay(100);
 80017be:	2064      	movs	r0, #100	; 0x64
   HAL_DCMI_ConfigCrop(&hcamera_dcmi,
 80017c0:	4e39      	ldr	r6, [pc, #228]	; (80018a8 <CAMERA_Init+0x1a8>)
  HAL_Delay(100);
 80017c2:	f00c f92f 	bl	800da24 <HAL_Delay>
   HAL_DCMI_ConfigCrop(&hcamera_dcmi,
 80017c6:	f240 13df 	movw	r3, #479	; 0x1df
 80017ca:	463a      	mov	r2, r7
 80017cc:	21a0      	movs	r1, #160	; 0xa0
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	4630      	mov	r0, r6
 80017d2:	f240 33bf 	movw	r3, #959	; 0x3bf
 80017d6:	f00c fb7b 	bl	800ded0 <HAL_DCMI_ConfigCrop>
   HAL_DCMI_EnableCrop(&hcamera_dcmi);
 80017da:	4630      	mov	r0, r6
 80017dc:	f00c fbae 	bl	800df3c <HAL_DCMI_EnableCrop>
   HAL_Delay(200);
 80017e0:	20c8      	movs	r0, #200	; 0xc8
 80017e2:	f00c f91f 	bl	800da24 <HAL_Delay>
  __HAL_LOCK(hdcmi);
 80017e6:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d052      	beq.n	8001894 <CAMERA_Init+0x194>
  __HAL_DCMI_ENABLE(hdcmi);
 80017ee:	6831      	ldr	r1, [r6, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80017f0:	2302      	movs	r3, #2
  __HAL_LOCK(hdcmi);
 80017f2:	f04f 0801 	mov.w	r8, #1
  if (HAL_DCMIEx_Start_DMA_MDMA(&hcamera_dcmi, CAMERA_MODE_CONTINUOUS,
 80017f6:	682a      	ldr	r2, [r5, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80017f8:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 80017fc:	f886 8034 	strb.w	r8, [r6, #52]	; 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 8001800:	680b      	ldr	r3, [r1, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8001802:	6cb0      	ldr	r0, [r6, #72]	; 0x48
  __HAL_DCMI_ENABLE(hdcmi);
 8001804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001808:	600b      	str	r3, [r1, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800180a:	680b      	ldr	r3, [r1, #0]
 800180c:	f023 0302 	bic.w	r3, r3, #2
 8001810:	600b      	str	r3, [r1, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001812:	680b      	ldr	r3, [r1, #0]
 8001814:	f841 3b28 	str.w	r3, [r1], #40
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <CAMERA_Init+0x1ac>)
  hdcmi->XferCount = 0;
 800181a:	63b7      	str	r7, [r6, #56]	; 0x38
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 800181c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdcmi->XferSize = line_size / 4U;
 800181e:	23f0      	movs	r3, #240	; 0xf0
  hdcmi->pBuffPtr = (uint32_t) pData;
 8001820:	6472      	str	r2, [r6, #68]	; 0x44
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 8001822:	4a23      	ldr	r2, [pc, #140]	; (80018b0 <CAMERA_Init+0x1b0>)
  hdcmi->XferSize = line_size / 4U;
 8001824:	63f3      	str	r3, [r6, #60]	; 0x3c
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 8001826:	6462      	str	r2, [r4, #68]	; 0x44
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <CAMERA_Init+0x1b4>)
  hmdma.XferErrorCallback = DCMI_MDMAError;
 800182a:	4a23      	ldr	r2, [pc, #140]	; (80018b8 <CAMERA_Init+0x1b8>)
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800182c:	64c3      	str	r3, [r0, #76]	; 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800182e:	6507      	str	r7, [r0, #80]	; 0x50
  hmdma.XferErrorCallback = DCMI_MDMAError;
 8001830:	6562      	str	r2, [r4, #84]	; 0x54
  hdcmi->XferTransferNumber = num_lines;
 8001832:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8001836:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  hdcmi->XferTransferNumber = num_lines;
 8001838:	6432      	str	r2, [r6, #64]	; 0x40
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 800183a:	4a20      	ldr	r2, [pc, #128]	; (80018bc <CAMERA_Init+0x1bc>)
 800183c:	f00d f802 	bl	800e844 <HAL_DMA_Start_IT>
 8001840:	4603      	mov	r3, r0
 8001842:	bb18      	cbnz	r0, 800188c <CAMERA_Init+0x18c>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001844:	6831      	ldr	r1, [r6, #0]
  HAL_Delay(200);
 8001846:	20c8      	movs	r0, #200	; 0xc8
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001848:	680a      	ldr	r2, [r1, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	600a      	str	r2, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 8001850:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 8001854:	b004      	add	sp, #16
 8001856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_Delay(200);
 800185a:	f00c b8e3 	b.w	800da24 <HAL_Delay>
    while(1);
 800185e:	e7fe      	b.n	800185e <CAMERA_Init+0x15e>
    OV5640_Object_t *pObj = Camera_CompObj;
 8001860:	4917      	ldr	r1, [pc, #92]	; (80018c0 <CAMERA_Init+0x1c0>)
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 8001862:	22c0      	movs	r2, #192	; 0xc0
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8001864:	2301      	movs	r3, #1
    OV5640_Object_t *pObj = Camera_CompObj;
 8001866:	6808      	ldr	r0, [r1, #0]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8001868:	f243 0136 	movw	r1, #12342	; 0x3036
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 800186c:	f88d 200b 	strb.w	r2, [sp, #11]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8001870:	f10d 020b 	add.w	r2, sp, #11
 8001874:	3018      	adds	r0, #24
 8001876:	f007 fb07 	bl	8008e88 <ov5640_write_reg>
 800187a:	2800      	cmp	r0, #0
 800187c:	d098      	beq.n	80017b0 <CAMERA_Init+0xb0>
      while(1);
 800187e:	e7fe      	b.n	800187e <CAMERA_Init+0x17e>
    Error_Handler();
 8001880:	f003 fc08 	bl	8005094 <Error_Handler>
 8001884:	e78e      	b.n	80017a4 <CAMERA_Init+0xa4>
    Error_Handler();
 8001886:	f003 fc05 	bl	8005094 <Error_Handler>
 800188a:	e776      	b.n	800177a <CAMERA_Init+0x7a>
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800188c:	2340      	movs	r3, #64	; 0x40
 800188e:	64f3      	str	r3, [r6, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001890:	f886 8035 	strb.w	r8, [r6, #53]	; 0x35
    while(1);
 8001894:	e7fe      	b.n	8001894 <CAMERA_Init+0x194>
 8001896:	bf00      	nop
 8001898:	58024400 	.word	0x58024400
 800189c:	2400820c 	.word	0x2400820c
 80018a0:	52000040 	.word	0x52000040
 80018a4:	24009d78 	.word	0x24009d78
 80018a8:	24009e04 	.word	0x24009e04
 80018ac:	08001689 	.word	0x08001689
 80018b0:	080016c1 	.word	0x080016c1
 80018b4:	0800166d 	.word	0x0800166d
 80018b8:	0800165d 	.word	0x0800165d
 80018bc:	30000000 	.word	0x30000000
 80018c0:	24009d74 	.word	0x24009d74

080018c4 <CAMERA_Set_TestBar_Mode>:
  uint32_t camera_id = Camera_Ctx[0].CameraId;
 80018c4:	4a16      	ldr	r2, [pc, #88]	; (8001920 <CAMERA_Set_TestBar_Mode+0x5c>)
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <CAMERA_Set_TestBar_Mode+0x60>)
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	2b01      	cmp	r3, #1
{
 80018ce:	b510      	push	{r4, lr}
 80018d0:	b082      	sub	sp, #8
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 80018d2:	d906      	bls.n	80018e2 <CAMERA_Set_TestBar_Mode+0x1e>
    OV5640_Object_t *pObj = Camera_CompObj;
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <CAMERA_Set_TestBar_Mode+0x64>)
    if (OV5640_ColorbarModeConfig(pObj, COLORBAR_MODE_ENABLE) != OV5640_OK)
 80018d6:	2101      	movs	r1, #1
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	f007 fa89 	bl	8008df0 <OV5640_ColorbarModeConfig>
 80018de:	b1b8      	cbz	r0, 8001910 <CAMERA_Set_TestBar_Mode+0x4c>
      while(1);
 80018e0:	e7fe      	b.n	80018e0 <CAMERA_Set_TestBar_Mode+0x1c>
    OV9655_Object_t *pObj = Camera_CompObj;
 80018e2:	4a11      	ldr	r2, [pc, #68]	; (8001928 <CAMERA_Set_TestBar_Mode+0x64>)
    ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 80018e4:	2301      	movs	r3, #1
 80018e6:	218d      	movs	r1, #141	; 0x8d
 80018e8:	6814      	ldr	r4, [r2, #0]
 80018ea:	f10d 0207 	add.w	r2, sp, #7
 80018ee:	3418      	adds	r4, #24
 80018f0:	4620      	mov	r0, r4
 80018f2:	f007 ff7f 	bl	80097f4 <ov9655_read_reg>
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 80018f6:	f89d c007 	ldrb.w	ip, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 80018fa:	2301      	movs	r3, #1
 80018fc:	f10d 0207 	add.w	r2, sp, #7
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 8001900:	f04c 0c10 	orr.w	ip, ip, #16
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001904:	218d      	movs	r1, #141	; 0x8d
 8001906:	4620      	mov	r0, r4
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 8001908:	f88d c007 	strb.w	ip, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 800190c:	f007 ff7a 	bl	8009804 <ov9655_write_reg>
  HAL_Delay(500);
 8001910:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 8001914:	b002      	add	sp, #8
 8001916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_Delay(500);
 800191a:	f00c b883 	b.w	800da24 <HAL_Delay>
 800191e:	bf00      	nop
 8001920:	24009d78 	.word	0x24009d78
 8001924:	ffff69aa 	.word	0xffff69aa
 8001928:	24009d74 	.word	0x24009d74

0800192c <BSP_CAMERA_FrameEventCallback>:
{
 800192c:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 800192e:	4c0c      	ldr	r4, [pc, #48]	; (8001960 <BSP_CAMERA_FrameEventCallback+0x34>)
 8001930:	69a3      	ldr	r3, [r4, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8001932:	b672      	cpsid	i
  CameraContext.new_frame_ready = 1;
 8001934:	2501      	movs	r5, #1
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 8001936:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  CameraContext.new_frame_ready = 1;
 8001938:	7525      	strb	r5, [r4, #20]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 800193a:	f00c f86d 	bl	800da18 <HAL_GetTick>
 800193e:	6270      	str	r0, [r6, #36]	; 0x24
  CameraContext.new_frame_ready = 1;
 8001940:	7525      	strb	r5, [r4, #20]
  CameraContext.Tframe_evt=HAL_GetTick();
 8001942:	f00c f869 	bl	800da18 <HAL_GetTick>
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 8001946:	6923      	ldr	r3, [r4, #16]
  CameraContext.Tframe_evt=HAL_GetTick();
 8001948:	60e0      	str	r0, [r4, #12]
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 800194a:	1ac3      	subs	r3, r0, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d801      	bhi.n	8001954 <BSP_CAMERA_FrameEventCallback+0x28>
    CameraContext.vsync_it =2;
 8001950:	2302      	movs	r3, #2
 8001952:	60a3      	str	r3, [r4, #8]
  BSP_CAMERA_Suspend(0);
 8001954:	2000      	movs	r0, #0
 8001956:	f00a fe25 	bl	800c5a4 <BSP_CAMERA_Suspend>
  __ASM volatile ("cpsie i" : : : "memory");
 800195a:	b662      	cpsie	i
}
 800195c:	bd70      	pop	{r4, r5, r6, pc}
 800195e:	bf00      	nop
 8001960:	240081ec 	.word	0x240081ec

08001964 <BSP_CAMERA_VsyncEventCallback>:
{ 
 8001964:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 8001966:	4c19      	ldr	r4, [pc, #100]	; (80019cc <BSP_CAMERA_VsyncEventCallback+0x68>)
 8001968:	69a5      	ldr	r5, [r4, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800196a:	b672      	cpsid	i
  CameraContext.Tvsync_evt=HAL_GetTick();
 800196c:	f00c f854 	bl	800da18 <HAL_GetTick>
  if(CameraContext.vsync_it==0)
 8001970:	68a3      	ldr	r3, [r4, #8]
  CameraContext.Tvsync_evt=HAL_GetTick();
 8001972:	6120      	str	r0, [r4, #16]
  if(CameraContext.vsync_it==0)
 8001974:	b19b      	cbz	r3, 800199e <BSP_CAMERA_VsyncEventCallback+0x3a>
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 8001976:	2b01      	cmp	r3, #1
 8001978:	d007      	beq.n	800198a <BSP_CAMERA_VsyncEventCallback+0x26>
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 800197a:	68e3      	ldr	r3, [r4, #12]
 800197c:	1ac0      	subs	r0, r0, r3
 800197e:	2802      	cmp	r0, #2
 8001980:	d801      	bhi.n	8001986 <BSP_CAMERA_VsyncEventCallback+0x22>
    CameraContext.vsync_it =2;
 8001982:	2302      	movs	r3, #2
 8001984:	60a3      	str	r3, [r4, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001986:	b662      	cpsie	i
}
 8001988:	bd70      	pop	{r4, r5, r6, pc}
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 800198a:	7d23      	ldrb	r3, [r4, #20]
 800198c:	b9a3      	cbnz	r3, 80019b8 <BSP_CAMERA_VsyncEventCallback+0x54>
 800198e:	68e3      	ldr	r3, [r4, #12]
 8001990:	1ac0      	subs	r0, r0, r3
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 8001992:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    CameraContext.vsync_it ++;
 8001994:	2102      	movs	r1, #2
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 8001996:	69da      	ldr	r2, [r3, #28]
    CameraContext.vsync_it ++;
 8001998:	60a1      	str	r1, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 800199a:	621a      	str	r2, [r3, #32]
    CameraContext.vsync_it ++;
 800199c:	e7ef      	b.n	800197e <BSP_CAMERA_VsyncEventCallback+0x1a>
    CameraContext.vsync_it ++;
 800199e:	2301      	movs	r3, #1
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 80019a0:	6b6e      	ldr	r6, [r5, #52]	; 0x34
    CameraContext.vsync_it ++;
 80019a2:	60a3      	str	r3, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 80019a4:	f00c f838 	bl	800da18 <HAL_GetTick>
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 80019a8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 80019aa:	6923      	ldr	r3, [r4, #16]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 80019ac:	6991      	ldr	r1, [r2, #24]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 80019ae:	61f0      	str	r0, [r6, #28]
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 80019b0:	68e0      	ldr	r0, [r4, #12]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 80019b2:	6211      	str	r1, [r2, #32]
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 80019b4:	1a18      	subs	r0, r3, r0
 80019b6:	e7e2      	b.n	800197e <BSP_CAMERA_VsyncEventCallback+0x1a>
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 80019b8:	7d23      	ldrb	r3, [r4, #20]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	68e3      	ldr	r3, [r4, #12]
 80019be:	eba0 0003 	sub.w	r0, r0, r3
 80019c2:	d1dc      	bne.n	800197e <BSP_CAMERA_VsyncEventCallback+0x1a>
 80019c4:	2802      	cmp	r0, #2
 80019c6:	d8de      	bhi.n	8001986 <BSP_CAMERA_VsyncEventCallback+0x22>
 80019c8:	e7e3      	b.n	8001992 <BSP_CAMERA_VsyncEventCallback+0x2e>
 80019ca:	bf00      	nop
 80019cc:	240081ec 	.word	0x240081ec

080019d0 <BSP_CAMERA_ErrorCallback>:
  Error_Handler();
 80019d0:	f003 bb60 	b.w	8005094 <Error_Handler>

080019d4 <DISPLAY_Init>:
 * @param Display_Context_Ptr pointer to display context
 * @retval None
 */
static void Display_Context_Init(DisplayContext_TypeDef* Display_Context_Ptr)
{
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 80019d4:	4921      	ldr	r1, [pc, #132]	; (8001a5c <DISPLAY_Init+0x88>)
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 80019d6:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <DISPLAY_Init+0x8c>)

  /*
   * Disable FMC Bank1 to prevent CPU speculative read accesses
   * AN4861: 4.6.1 Disable FMC bank1 if not used.
   */
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 80019d8:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <DISPLAY_Init+0x90>)
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 80019da:	6809      	ldr	r1, [r1, #0]
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 80019dc:	681b      	ldr	r3, [r3, #0]
{
 80019de:	b530      	push	{r4, r5, lr}
  Display_Context_Ptr->lcd_sync=0;
 80019e0:	2500      	movs	r5, #0
{
 80019e2:	b087      	sub	sp, #28
 80019e4:	4604      	mov	r4, r0
  Display_Context_Ptr->lcd_sync=0;
 80019e6:	6085      	str	r5, [r0, #8]
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 80019e8:	e9c0 1300 	strd	r1, r3, [r0]
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 80019ec:	6813      	ldr	r3, [r2, #0]

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 80019ee:	2101      	movs	r1, #1
 80019f0:	4628      	mov	r0, r5
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	6013      	str	r3, [r2, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 80019f8:	f00b fc3a 	bl	800d270 <BSP_LCD_Init>

  config.X0          = 0;
 80019fc:	2000      	movs	r0, #0
 80019fe:	f44f 7148 	mov.w	r1, #800	; 0x320
  config.X1          = LCD_DEFAULT_WIDTH;
  config.Y0          = 0;
  config.Y1          = LCD_DEFAULT_HEIGHT;
  config.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 8001a02:	6823      	ldr	r3, [r4, #0]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 8001a04:	466a      	mov	r2, sp
  config.X0          = 0;
 8001a06:	e9cd 0100 	strd	r0, r1, [sp]
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 8001a14:	4629      	mov	r1, r5
 8001a16:	4628      	mov	r0, r5
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 8001a18:	e9cd 5304 	strd	r5, r3, [sp, #16]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 8001a1c:	f00b fc34 	bl	800d288 <BSP_LCD_ConfigLayer>
  
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8001a20:	4811      	ldr	r0, [pc, #68]	; (8001a68 <DISPLAY_Init+0x94>)
 8001a22:	f01a ffd3 	bl	801c9cc <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 8001a26:	4628      	mov	r0, r5
 8001a28:	f01b f800 	bl	801ca2c <UTIL_LCD_SetLayer>
  
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8001a2c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a30:	f01b f814 	bl	801ca5c <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f01b f808 	bl	801ca4c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 8001a3c:	480b      	ldr	r0, [pc, #44]	; (8001a6c <DISPLAY_Init+0x98>)
 8001a3e:	f01b f815 	bl	801ca6c <UTIL_LCD_SetFont>
  
  /*Use lcd_frame_write_buff buffer for display composition*/
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <DISPLAY_Init+0x9c>)
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <DISPLAY_Init+0xa0>)
 8001a46:	2534      	movs	r5, #52	; 0x34
 8001a48:	689b      	ldr	r3, [r3, #8]
  
  /*LCD sync: set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001a4a:	2102      	movs	r1, #2
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 8001a4c:	6862      	ldr	r2, [r4, #4]
 8001a4e:	fb05 0303 	mla	r3, r5, r3, r0
 8001a52:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001a54:	f00f fc70 	bl	8011338 <HAL_LTDC_Reload>
}
 8001a58:	b007      	add	sp, #28
 8001a5a:	bd30      	pop	{r4, r5, pc}
 8001a5c:	2400001c 	.word	0x2400001c
 8001a60:	24000020 	.word	0x24000020
 8001a64:	52004000 	.word	0x52004000
 8001a68:	080bfe50 	.word	0x080bfe50
 8001a6c:	240074f4 	.word	0x240074f4
 8001a70:	24009ed0 	.word	0x24009ed0
 8001a74:	24009f94 	.word	0x24009f94

08001a78 <DISPLAY_WelcomeScreen>:
 *
 * @param Display_Context_Ptr pointer to display context
 * @return int boolean value, 1 if WakeUp button has been pressed, 0 otherwise
 */
int DISPLAY_WelcomeScreen(DisplayContext_TypeDef* Display_Context_Ptr)
{
 8001a78:	b530      	push	{r4, r5, lr}
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	b089      	sub	sp, #36	; 0x24
  int magic_menu = 0;
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001a7e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a82:	f01b f803 	bl	801ca8c <UTIL_LCD_Clear>

  /* Draw logos.*/
  BSP_LCD_DrawBitmap(0, 50, 77, (uint8_t *)stlogo);
 8001a86:	4b4d      	ldr	r3, [pc, #308]	; (8001bbc <DISPLAY_WelcomeScreen+0x144>)
 8001a88:	224d      	movs	r2, #77	; 0x4d
 8001a8a:	2132      	movs	r1, #50	; 0x32
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f00a ff17 	bl	800c8c0 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(0, 620, 85, (uint8_t *)stm32h7logo);
 8001a92:	4b4b      	ldr	r3, [pc, #300]	; (8001bc0 <DISPLAY_WelcomeScreen+0x148>)
 8001a94:	2255      	movs	r2, #85	; 0x55
 8001a96:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f00a ff10 	bl	800c8c0 <BSP_LCD_DrawBitmap>

  /*Display welcome message*/
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"VISION1 Function Pack", CENTER_MODE);
 8001aa0:	f01a ffec 	bl	801ca7c <UTIL_LCD_GetFont>
 8001aa4:	4601      	mov	r1, r0
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	4a46      	ldr	r2, [pc, #280]	; (8001bc4 <DISPLAY_WelcomeScreen+0x14c>)
 8001aaa:	88c9      	ldrh	r1, [r1, #6]
 8001aac:	2000      	movs	r0, #0
 8001aae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001ab2:	4099      	lsls	r1, r3
 8001ab4:	f01b f8da 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"V3.0.0", CENTER_MODE);
 8001ab8:	f01a ffe0 	bl	801ca7c <UTIL_LCD_GetFont>
 8001abc:	4601      	mov	r1, r0
 8001abe:	2301      	movs	r3, #1
 8001ac0:	4a41      	ldr	r2, [pc, #260]	; (8001bc8 <DISPLAY_WelcomeScreen+0x150>)
 8001ac2:	88c9      	ldrh	r1, [r1, #6]
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001aca:	f01b f8cf 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(10), (uint8_t *)WELCOME_MSG_0, CENTER_MODE);
 8001ace:	f01a ffd5 	bl	801ca7c <UTIL_LCD_GetFont>
 8001ad2:	4601      	mov	r1, r0
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	4a3d      	ldr	r2, [pc, #244]	; (8001bcc <DISPLAY_WelcomeScreen+0x154>)
 8001ad8:	88c9      	ldrh	r1, [r1, #6]
 8001ada:	2000      	movs	r0, #0
 8001adc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001ae0:	4099      	lsls	r1, r3
 8001ae2:	f01b f8c3 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t *)WELCOME_MSG_2, CENTER_MODE);
 8001ae6:	f01a ffc9 	bl	801ca7c <UTIL_LCD_GetFont>
 8001aea:	88c1      	ldrh	r1, [r0, #6]
 8001aec:	2301      	movs	r3, #1
 8001aee:	4a38      	ldr	r2, [pc, #224]	; (8001bd0 <DISPLAY_WelcomeScreen+0x158>)
 8001af0:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001af4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001af8:	2000      	movs	r0, #0
 8001afa:	f01b f8b7 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)WELCOME_MSG_1, CENTER_MODE);
 8001afe:	f01a ffbd 	bl	801ca7c <UTIL_LCD_GetFont>
 8001b02:	4601      	mov	r1, r0
 8001b04:	2301      	movs	r3, #1
 8001b06:	4a33      	ldr	r2, [pc, #204]	; (8001bd4 <DISPLAY_WelcomeScreen+0x15c>)
 8001b08:	88c9      	ldrh	r1, [r1, #6]
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001b10:	0089      	lsls	r1, r1, #2
 8001b12:	f01b f8ab 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *)WELCOME_MSG_4, CENTER_MODE);
 8001b16:	f01a ffb1 	bl	801ca7c <UTIL_LCD_GetFont>
 8001b1a:	88c1      	ldrh	r1, [r0, #6]
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	4a2e      	ldr	r2, [pc, #184]	; (8001bd8 <DISPLAY_WelcomeScreen+0x160>)
 8001b20:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8001b24:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f01b f89f 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)WELCOME_MSG_5, CENTER_MODE);
 8001b2e:	f01a ffa5 	bl	801ca7c <UTIL_LCD_GetFont>
 8001b32:	4601      	mov	r1, r0
 8001b34:	2301      	movs	r3, #1
 8001b36:	4a29      	ldr	r2, [pc, #164]	; (8001bdc <DISPLAY_WelcomeScreen+0x164>)
 8001b38:	88c9      	ldrh	r1, [r1, #6]
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001b40:	4099      	lsls	r1, r3
 8001b42:	f01b f893 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *)WELCOME_MSG_3, CENTER_MODE);
 8001b46:	f01a ff99 	bl	801ca7c <UTIL_LCD_GetFont>
 8001b4a:	4601      	mov	r1, r0
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	4a24      	ldr	r2, [pc, #144]	; (8001be0 <DISPLAY_WelcomeScreen+0x168>)
 8001b50:	88c9      	ldrh	r1, [r1, #6]
 8001b52:	2000      	movs	r0, #0
 8001b54:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001b58:	f01b f888 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
 */
void DISPLAY_Refresh(DisplayContext_TypeDef* Display_Context_Ptr)
{
  /*LCD sync: wait for next VSYNC event before refreshing, i.e. before updating the content of the buffer that will be read by the LTDC for display. 
  The refresh occurs during the blanking period => this sync mecanism should enable to avoid tearing effect*/
  Display_Context_Ptr->lcd_sync =0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60a3      	str	r3, [r4, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 8001b60:	68a3      	ldr	r3, [r4, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0fc      	beq.n	8001b60 <DISPLAY_WelcomeScreen+0xe8>
  
  /*Coherency purpose: clean the lcd_frame_write_buff area in L1 D-Cache before DMA2D reading*/
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8001b66:	6860      	ldr	r0, [r4, #4]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	491e      	ldr	r1, [pc, #120]	; (8001be4 <DISPLAY_WelcomeScreen+0x16c>)
 8001b6c:	f003 fa22 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
  
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001b70:	2300      	movs	r3, #0
 8001b72:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b76:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  int magic_menu = 0;
 8001b7a:	461d      	mov	r5, r3
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001b7c:	9200      	str	r2, [sp, #0]
 8001b7e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001b82:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001b86:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001b8a:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001b8e:	2405      	movs	r4, #5
 8001b90:	461a      	mov	r2, r3
 8001b92:	f003 f963 	bl	8004e5c <UTILS_Dma2d_Memcpy>
    HAL_Delay(500);
 8001b96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b9a:	f00b ff43 	bl	800da24 <HAL_Delay>
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f009 f906 	bl	800adb0 <BSP_PB_GetState>
      magic_menu = 1;
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	bf18      	it	ne
 8001ba8:	2501      	movne	r5, #1
  for (int i = 0; i < 5; i++)
 8001baa:	3c01      	subs	r4, #1
 8001bac:	d1f3      	bne.n	8001b96 <DISPLAY_WelcomeScreen+0x11e>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001bae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001bb2:	f01a ff6b 	bl	801ca8c <UTIL_LCD_Clear>
}
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	b009      	add	sp, #36	; 0x24
 8001bba:	bd30      	pop	{r4, r5, pc}
 8001bbc:	081d80c0 	.word	0x081d80c0
 8001bc0:	081e0308 	.word	0x081e0308
 8001bc4:	08100020 	.word	0x08100020
 8001bc8:	08100038 	.word	0x08100038
 8001bcc:	08100040 	.word	0x08100040
 8001bd0:	0810005c 	.word	0x0810005c
 8001bd4:	08100070 	.word	0x08100070
 8001bd8:	08100088 	.word	0x08100088
 8001bdc:	08100098 	.word	0x08100098
 8001be0:	081000b8 	.word	0x081000b8
 8001be4:	00177000 	.word	0x00177000

08001be8 <DISPLAY_FoodLogo>:
{
 8001be8:	b510      	push	{r4, lr}
 8001bea:	460c      	mov	r4, r1
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 is no swap, 1 is swap
 */
void DISPLAY_Copy2LCDWriteBuffer(DisplayContext_TypeDef* Display_Context_Ptr, uint32_t *pSrc, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                              uint32_t input_color_format, int red_blue_swap)
{
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001bec:	6841      	ldr	r1, [r0, #4]
  DISPLAY_Copy2LCDWriteBuffer(Display_Context_Ptr, (uint32_t *)(Logos_128x128_raw[index]), x,
 8001bee:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <DISPLAY_FoodLogo+0x38>)
{
 8001bf4:	b088      	sub	sp, #32
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001bf6:	f44f 7c48 	mov.w	ip, #800	; 0x320
 8001bfa:	eb03 3080 	add.w	r0, r3, r0, lsl #14
 8001bfe:	b293      	uxth	r3, r2
 8001c00:	b2a2      	uxth	r2, r4
 8001c02:	2401      	movs	r4, #1
 8001c04:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001c08:	9403      	str	r4, [sp, #12]
 8001c0a:	2480      	movs	r4, #128	; 0x80
 8001c0c:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 8001c10:	9400      	str	r4, [sp, #0]
 8001c12:	2400      	movs	r4, #0
 8001c14:	9404      	str	r4, [sp, #16]
 8001c16:	f003 f921 	bl	8004e5c <UTILS_Dma2d_Memcpy>
}
 8001c1a:	b008      	add	sp, #32
 8001c1c:	bd10      	pop	{r4, pc}
 8001c1e:	bf00      	nop
 8001c20:	081000c0 	.word	0x081000c0

08001c24 <DISPLAY_Refresh>:
{
 8001c24:	b510      	push	{r4, lr}
  Display_Context_Ptr->lcd_sync =0;
 8001c26:	2300      	movs	r3, #0
{
 8001c28:	b088      	sub	sp, #32
 8001c2a:	4604      	mov	r4, r0
  Display_Context_Ptr->lcd_sync =0;
 8001c2c:	6083      	str	r3, [r0, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 8001c2e:	68a3      	ldr	r3, [r4, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0fc      	beq.n	8001c2e <DISPLAY_Refresh+0xa>
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8001c34:	6860      	ldr	r0, [r4, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	490a      	ldr	r1, [pc, #40]	; (8001c64 <DISPLAY_Refresh+0x40>)
 8001c3a:	f003 f9bb 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001c44:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	9100      	str	r1, [sp, #0]
 8001c4c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001c50:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001c54:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001c58:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001c5c:	f003 f8fe 	bl	8004e5c <UTILS_Dma2d_Memcpy>
}
 8001c60:	b008      	add	sp, #32
 8001c62:	bd10      	pop	{r4, pc}
 8001c64:	00177000 	.word	0x00177000

08001c68 <DISPLAY_Copy2LCDWriteBuffer>:
{
 8001c68:	b510      	push	{r4, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	4684      	mov	ip, r0
 8001c6e:	4608      	mov	r0, r1
 8001c70:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001c74:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8001c78:	f04f 0c01 	mov.w	ip, #1
 8001c7c:	9400      	str	r4, [sp, #0]
{
 8001c7e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001c82:	9401      	str	r4, [sp, #4]
{
 8001c84:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001c86:	9403      	str	r4, [sp, #12]
 8001c88:	f44f 7448 	mov.w	r4, #800	; 0x320
 8001c8c:	9402      	str	r4, [sp, #8]
{
 8001c8e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001c90:	9406      	str	r4, [sp, #24]
 8001c92:	2400      	movs	r4, #0
 8001c94:	e9cd 4c04 	strd	r4, ip, [sp, #16]
 8001c98:	f003 f8e0 	bl	8004e5c <UTILS_Dma2d_Memcpy>
                input_color_format, DMA2D_OUTPUT_ARGB8888, 1, red_blue_swap);
}
 8001c9c:	b008      	add	sp, #32
 8001c9e:	bd10      	pop	{r4, pc}

08001ca0 <HAL_LTDC_ReloadEventCallback>:

}

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
  Display_Context.lcd_sync=1;
 8001ca0:	4b02      	ldr	r3, [pc, #8]	; (8001cac <HAL_LTDC_ReloadEventCallback+0xc>)
 8001ca2:	2201      	movs	r2, #1
  
  /*Set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001ca4:	2102      	movs	r1, #2
  Display_Context.lcd_sync=1;
 8001ca6:	609a      	str	r2, [r3, #8]
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001ca8:	f00f bb46 	b.w	8011338 <HAL_LTDC_Reload>
 8001cac:	24008278 	.word	0x24008278

08001cb0 <PREPROC_ImageResize>:
 * @param Preproc_Context_Ptr Pointer to PREPROC context
 */
void PREPROC_ImageResize(PreprocContext_TypeDef* Preproc_Context_Ptr)
{  
#if RESIZING_ALGO == RESIZING_NEAREST_NEIGHBOR
  ImageResize_NearestNeighbor(&Preproc_Context_Ptr->Resize_Src_Img, 
 8001cb0:	f100 020c 	add.w	r2, r0, #12
 8001cb4:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 8001cb8:	303c      	adds	r0, #60	; 0x3c
 8001cba:	f01a be85 	b.w	801c9c8 <ImageResize_NearestNeighbor>
 8001cbe:	bf00      	nop

08001cc0 <PREPROC_PixelFormatConversion>:
 * @param Preproc_Context_Ptr Pointer to PREPROC context
 */
void PREPROC_PixelFormatConversion(PreprocContext_TypeDef* Preproc_Context_Ptr)
{
#if PIXEL_FMT_CONV == HW_PFC
  if(Preproc_Context_Ptr->Pfc_Src_Img.format==PXFMT_RGB565 && 
 8001cc0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d000      	beq.n	8001cca <PREPROC_PixelFormatConversion+0xa>
                       1, 
                       Preproc_Context_Ptr->red_blue_swap);
  }
  else
  {
    while(1);
 8001cc8:	e7fe      	b.n	8001cc8 <PREPROC_PixelFormatConversion+0x8>
  if(Preproc_Context_Ptr->Pfc_Src_Img.format==PXFMT_RGB565 && 
 8001cca:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8001cce:	2a02      	cmp	r2, #2
 8001cd0:	d1fa      	bne.n	8001cc8 <PREPROC_PixelFormatConversion+0x8>
{
 8001cd2:	b530      	push	{r4, r5, lr}
    UTILS_Dma2d_Memcpy((uint32_t *)(Preproc_Context_Ptr->Pfc_Src_Img.pData), 
 8001cd4:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
{
 8001cd8:	b089      	sub	sp, #36	; 0x24
    UTILS_Dma2d_Memcpy((uint32_t *)(Preproc_Context_Ptr->Pfc_Src_Img.pData), 
 8001cda:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001cde:	9106      	str	r1, [sp, #24]
 8001ce0:	8c04      	ldrh	r4, [r0, #32]
 8001ce2:	8b81      	ldrh	r1, [r0, #28]
 8001ce4:	e9cd 5202 	strd	r5, r2, [sp, #8]
 8001ce8:	8843      	ldrh	r3, [r0, #2]
 8001cea:	8802      	ldrh	r2, [r0, #0]
 8001cec:	e9cd 1400 	strd	r1, r4, [sp]
 8001cf0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001cf2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001cf4:	f003 f8b2 	bl	8004e5c <UTILS_Dma2d_Memcpy>
    while(1);
  }
#else
 #error PFC method not valid!
#endif
}
 8001cf8:	b009      	add	sp, #36	; 0x24
 8001cfa:	bd30      	pop	{r4, r5, pc}

08001cfc <PREPROC_Pixel_RB_Swap>:
  uint8_t tmp_r;
  
  struct rgb_Src *pivot = (struct rgb_Src *) pSrc;
  struct rgb_Dst *dest = (struct rgb_Dst *) pDst;
  
  for (int i = pixels-1; i >= 0; i--)
 8001cfc:	1e53      	subs	r3, r2, #1
 8001cfe:	d412      	bmi.n	8001d26 <PREPROC_Pixel_RB_Swap+0x2a>
 8001d00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d04:	4410      	add	r0, r2
 8001d06:	4411      	add	r1, r2
  {
    tmp_r=pivot[i].r;
 8001d08:	f810 2c03 	ldrb.w	r2, [r0, #-3]
  for (int i = pixels-1; i >= 0; i--)
 8001d0c:	3803      	subs	r0, #3
    
    dest[i].r = pivot[i].b;
 8001d0e:	f890 c002 	ldrb.w	ip, [r0, #2]
  for (int i = pixels-1; i >= 0; i--)
 8001d12:	3b01      	subs	r3, #1
    dest[i].b = tmp_r;
 8001d14:	f801 2c01 	strb.w	r2, [r1, #-1]
  for (int i = pixels-1; i >= 0; i--)
 8001d18:	3903      	subs	r1, #3
    dest[i].r = pivot[i].b;
 8001d1a:	f881 c000 	strb.w	ip, [r1]
    dest[i].g = pivot[i].g;
 8001d1e:	7842      	ldrb	r2, [r0, #1]
 8001d20:	704a      	strb	r2, [r1, #1]
  for (int i = pixels-1; i >= 0; i--)
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	d1f0      	bne.n	8001d08 <PREPROC_Pixel_RB_Swap+0xc>
  }
}
 8001d26:	4770      	bx	lr

08001d28 <UartCmd_Run_NonRegression>:
  *Number of consecutive full run (-1) to execute (4 bytes): 0x00000000 <=> one run, 0xFFFFFFFE <=> 2^32 runs and 0xFFFFFFFF <=> infinite runs (= debug mode)
  ************************************************************************************************************************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001d28:	2301      	movs	r3, #1
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001d2a:	f8d0 25fc 	ldr.w	r2, [r0, #1532]	; 0x5fc
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001d2e:	f04f 0c03 	mov.w	ip, #3
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001d32:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001d36:	f880 c524 	strb.w	ip, [r0, #1316]	; 0x524
{
 8001d3a:	b410      	push	{r4}
  App_Cxt_Ptr->run_loop = 0;
 8001d3c:	2400      	movs	r4, #0
 8001d3e:	6054      	str	r4, [r2, #4]

  Test_Context_Ptr->UartContext.uart_host_requested_dump_submode=CAMERA_COLORBAR;
 8001d40:	2202      	movs	r2, #2
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=SDRAM;

  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001d42:	4c07      	ldr	r4, [pc, #28]	; (8001d60 <UartCmd_Run_NonRegression+0x38>)
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=SDRAM;
 8001d44:	f880 3526 	strb.w	r3, [r0, #1318]	; 0x526
  Test_Context_Ptr->UartContext.uart_host_requested_dump_submode=CAMERA_COLORBAR;
 8001d48:	f880 2525 	strb.w	r2, [r0, #1317]	; 0x525

  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001d4c:	680a      	ldr	r2, [r1, #0]
  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001d4e:	6004      	str	r4, [r0, #0]

  Test_Context_Ptr->UartContext.uart_host_nonreg_run=1;
 8001d50:	f8c0 3538 	str.w	r3, [r0, #1336]	; 0x538
}
 8001d54:	f85d 4b04 	ldr.w	r4, [sp], #4
  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001d58:	f8c0 2528 	str.w	r2, [r0, #1320]	; 0x528
}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	d0cdd680 	.word	0xd0cdd680

08001d64 <UartCmd_Run_Validation>:

static void UartCmd_Run_Validation(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001d64:	b410      	push	{r4}
  ************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 8001d66:	f04f 0c02 	mov.w	ip, #2
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001d6a:	2401      	movs	r4, #1
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 8001d6c:	4906      	ldr	r1, [pc, #24]	; (8001d88 <UartCmd_Run_Validation+0x24>)
  App_Cxt_Ptr->run_loop = 0;
 8001d6e:	2200      	movs	r2, #0
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001d70:	f8d0 35fc 	ldr.w	r3, [r0, #1532]	; 0x5fc
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001d74:	f8c0 4520 	str.w	r4, [r0, #1312]	; 0x520
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 8001d78:	f880 c524 	strb.w	ip, [r0, #1316]	; 0x524
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 8001d7c:	f8c0 151c 	str.w	r1, [r0, #1308]	; 0x51c
}
 8001d80:	f85d 4b04 	ldr.w	r4, [sp], #4
  App_Cxt_Ptr->run_loop = 0;
 8001d84:	605a      	str	r2, [r3, #4]
}
 8001d86:	4770      	bx	lr
 8001d88:	d0cdaf00 	.word	0xd0cdaf00

08001d8c <UartCmd_Launch_Dump>:
  *This command has two parameters:
  *Dump sub-mode (1 byte): CAMERA_LIVE= 0x01, CAMERA_COLORBAR= 0x02, SDCARD_FILE= 0x03
  *Dump memory location (1 byte): SDCARD (0x00) or SDRAM (0x01)
  ***********************************************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001d8c:	f8d0 35fc 	ldr.w	r3, [r0, #1532]	; 0x5fc

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001d90:	f04f 0c03 	mov.w	ip, #3
  App_Cxt_Ptr->run_loop = 0;
 8001d94:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001d96:	f880 c524 	strb.w	ip, [r0, #1316]	; 0x524
{
 8001d9a:	b410      	push	{r4}
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001d9c:	2401      	movs	r4, #1
 8001d9e:	f8c0 4520 	str.w	r4, [r0, #1312]	; 0x520
  App_Cxt_Ptr->run_loop = 0;
 8001da2:	605a      	str	r2, [r3, #4]

  Test_Context_Ptr->UartContext.uart_host_requested_dump_submode=(MemDumpFrameSource_TypeDef)(*(uint8_t*)(data_buffer));
 8001da4:	780b      	ldrb	r3, [r1, #0]
 8001da6:	f880 3525 	strb.w	r3, [r0, #1317]	; 0x525
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 8001daa:	784b      	ldrb	r3, [r1, #1]

  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8001dac:	42a3      	cmp	r3, r4
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 8001dae:	f880 3526 	strb.w	r3, [r0, #1318]	; 0x526
  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8001db2:	d101      	bne.n	8001db8 <UartCmd_Launch_Dump+0x2c>
    Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001db4:	4b02      	ldr	r3, [pc, #8]	; (8001dc0 <UartCmd_Launch_Dump+0x34>)
 8001db6:	6003      	str	r3, [r0, #0]
}
 8001db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	d0cdd680 	.word	0xd0cdd680

08001dc4 <UartCmd_Launch_Capture>:
    Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
  }
}

static void UartCmd_Launch_Capture(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001dc4:	b410      	push	{r4}

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
  App_Cxt_Ptr->run_loop = 0;
 8001dc6:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001dc8:	2401      	movs	r4, #1
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001dca:	f8d0 35fc 	ldr.w	r3, [r0, #1532]	; 0x5fc
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 8001dce:	f04f 0c04 	mov.w	ip, #4
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001dd2:	f8c0 4520 	str.w	r4, [r0, #1312]	; 0x520
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 8001dd6:	f880 c524 	strb.w	ip, [r0, #1316]	; 0x524
  App_Cxt_Ptr->run_loop = 0;
 8001dda:	605a      	str	r2, [r3, #4]

  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
 8001ddc:	780b      	ldrb	r3, [r1, #0]
  else
  {
    /*Automatic mode => Program TIM for periodic capture*/
    ;
  }
}
 8001dde:	f85d 4b04 	ldr.w	r4, [sp], #4
  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
 8001de2:	f880 352c 	strb.w	r3, [r0, #1324]	; 0x52c
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001de6:	f8b1 2001 	ldrh.w	r2, [r1, #1]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001dea:	f8b1 3003 	ldrh.w	r3, [r1, #3]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001dee:	f8c0 2530 	str.w	r2, [r0, #1328]	; 0x530
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001df2:	f8c0 3534 	str.w	r3, [r0, #1332]	; 0x534
}
 8001df6:	4770      	bx	lr

08001df8 <UartCmd_Write_Camera_Register>:
  *Write the content of a camera register
  *This command has two parameters:
  *Register address (1 bytes)
  *Register value to be written (1 byte)
  ***********************************************************************************/
  OV9655_Object_t *pObj=Camera_CompObj;
 8001df8:	4a10      	ldr	r2, [pc, #64]	; (8001e3c <UartCmd_Write_Camera_Register+0x44>)
  uint8_t tmp=*(data_buffer+1);

  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001dfa:	2301      	movs	r3, #1
{
 8001dfc:	b530      	push	{r4, r5, lr}
  OV9655_Object_t *pObj=Camera_CompObj;
 8001dfe:	6815      	ldr	r5, [r2, #0]
{
 8001e00:	b083      	sub	sp, #12
 8001e02:	4604      	mov	r4, r0
  uint8_t tmp=*(data_buffer+1);
 8001e04:	7848      	ldrb	r0, [r1, #1]
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001e06:	f10d 0207 	add.w	r2, sp, #7
 8001e0a:	7809      	ldrb	r1, [r1, #0]
  uint8_t tmp=*(data_buffer+1);
 8001e0c:	f88d 0007 	strb.w	r0, [sp, #7]
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001e10:	f105 0018 	add.w	r0, r5, #24
 8001e14:	f007 fcf6 	bl	8009804 <ov9655_write_reg>

  HAL_Delay(300);
 8001e18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e1c:	f00b fe02 	bl	800da24 <HAL_Delay>
 * @param RxDataSize Data size in bytes expected to RX
 */
static void Uart_Rx(TestContext_TypeDef *Test_Context_Ptr, uint8_t *RxDataBufPtr, uint32_t RxDataSize)
{
  /**Configure the UART in reception mode for receiving subsequent command from Host**/
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001e20:	220a      	movs	r2, #10
 8001e22:	4907      	ldr	r1, [pc, #28]	; (8001e40 <UartCmd_Write_Camera_Register+0x48>)
 8001e24:	f204 503c 	addw	r0, r4, #1340	; 0x53c
 8001e28:	f013 fdd6 	bl	80159d8 <HAL_UART_Receive_DMA>
 8001e2c:	b908      	cbnz	r0, 8001e32 <UartCmd_Write_Camera_Register+0x3a>
}
 8001e2e:	b003      	add	sp, #12
 8001e30:	bd30      	pop	{r4, r5, pc}
  {
    /* Transfer error in reception process */
    Error_Handler();
 8001e32:	f003 f92f 	bl	8005094 <Error_Handler>
}
 8001e36:	b003      	add	sp, #12
 8001e38:	bd30      	pop	{r4, r5, pc}
 8001e3a:	bf00      	nop
 8001e3c:	24009d74 	.word	0x24009d74
 8001e40:	240076e0 	.word	0x240076e0

08001e44 <UartCmd_Set_Camera_Mode>:
  OV9655_Object_t *pObj=Camera_CompObj;
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <UartCmd_Set_Camera_Mode+0x94>)
{
 8001e46:	b570      	push	{r4, r5, r6, lr}
  OV9655_Object_t *pObj=Camera_CompObj;
 8001e48:	681e      	ldr	r6, [r3, #0]
{
 8001e4a:	b082      	sub	sp, #8
  if(*(data_buffer) == 0x00)
 8001e4c:	780b      	ldrb	r3, [r1, #0]
{
 8001e4e:	460c      	mov	r4, r1
 8001e50:	4605      	mov	r5, r0
  if(*(data_buffer) == 0x00)
 8001e52:	b163      	cbz	r3, 8001e6e <UartCmd_Set_Camera_Mode+0x2a>
  else if(*(data_buffer) == 0x01)
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d02e      	beq.n	8001eb6 <UartCmd_Set_Camera_Mode+0x72>
  if(*(data_buffer) == 0x02)
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d024      	beq.n	8001ea6 <UartCmd_Set_Camera_Mode+0x62>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001e5c:	220a      	movs	r2, #10
 8001e5e:	491f      	ldr	r1, [pc, #124]	; (8001edc <UartCmd_Set_Camera_Mode+0x98>)
 8001e60:	f205 503c 	addw	r0, r5, #1340	; 0x53c
 8001e64:	f013 fdb8 	bl	80159d8 <HAL_UART_Receive_DMA>
 8001e68:	bb08      	cbnz	r0, 8001eae <UartCmd_Set_Camera_Mode+0x6a>
}
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd70      	pop	{r4, r5, r6, pc}
    ov9655_write_reg(&pObj->Ctx, /*0x8D*/OV9655_COMMON_CTRL20, &tmp, 1);
 8001e6e:	3618      	adds	r6, #24
 8001e70:	f10d 0207 	add.w	r2, sp, #7
 8001e74:	218d      	movs	r1, #141	; 0x8d
    tmp=0x00;
 8001e76:	f88d 3007 	strb.w	r3, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, /*0x8D*/OV9655_COMMON_CTRL20, &tmp, 1);
 8001e7a:	4630      	mov	r0, r6
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	f007 fcc1 	bl	8009804 <ov9655_write_reg>
    HAL_Delay(300);
 8001e82:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e86:	f00b fdcd 	bl	800da24 <HAL_Delay>
    ov9655_write_reg(&pObj->Ctx, /*0x0C*/OV9655_COMMON_CTRL3, &tmp, 1);
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f10d 0207 	add.w	r2, sp, #7
 8001e90:	210c      	movs	r1, #12
 8001e92:	4630      	mov	r0, r6
 8001e94:	f007 fcb6 	bl	8009804 <ov9655_write_reg>
    HAL_Delay(300);
 8001e98:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e9c:	f00b fdc2 	bl	800da24 <HAL_Delay>
  if(*(data_buffer) == 0x02)
 8001ea0:	7823      	ldrb	r3, [r4, #0]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d1da      	bne.n	8001e5c <UartCmd_Set_Camera_Mode+0x18>
    CAMERA_Set_TestBar_Mode(NULL);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff fd0c 	bl	80018c4 <CAMERA_Set_TestBar_Mode>
 8001eac:	e7d6      	b.n	8001e5c <UartCmd_Set_Camera_Mode+0x18>
    Error_Handler();
 8001eae:	f003 f8f1 	bl	8005094 <Error_Handler>
}
 8001eb2:	b002      	add	sp, #8
 8001eb4:	bd70      	pop	{r4, r5, r6, pc}
    tmp=0x10;
 8001eb6:	2210      	movs	r2, #16
    ov9655_write_reg(&pObj->Ctx, /*0x8D*/OV9655_COMMON_CTRL20, &tmp, 1);
 8001eb8:	218d      	movs	r1, #141	; 0x8d
 8001eba:	f106 0018 	add.w	r0, r6, #24
    tmp=0x10;
 8001ebe:	f88d 2007 	strb.w	r2, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, /*0x8D*/OV9655_COMMON_CTRL20, &tmp, 1);
 8001ec2:	f10d 0207 	add.w	r2, sp, #7
 8001ec6:	f007 fc9d 	bl	8009804 <ov9655_write_reg>
    HAL_Delay(300);
 8001eca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ece:	f00b fda9 	bl	800da24 <HAL_Delay>
  if(*(data_buffer) == 0x02)
 8001ed2:	7823      	ldrb	r3, [r4, #0]
 8001ed4:	e7c0      	b.n	8001e58 <UartCmd_Set_Camera_Mode+0x14>
 8001ed6:	bf00      	nop
 8001ed8:	24009d74 	.word	0x24009d74
 8001edc:	240076e0 	.word	0x240076e0

08001ee0 <FrameCaptureInit>:
{
 8001ee0:	b570      	push	{r4, r5, r6, lr}
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8001ee2:	f04f 35ff 	mov.w	r5, #4294967295
{
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	4604      	mov	r4, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001eea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001eee:	f8d4 65fc 	ldr.w	r6, [r4, #1532]	; 0x5fc
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001ef2:	f01a fdcb 	bl	801ca8c <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8001ef6:	2332      	movs	r3, #50	; 0x32
 8001ef8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001efc:	210a      	movs	r1, #10
 8001efe:	20c8      	movs	r0, #200	; 0xc8
 8001f00:	9500      	str	r5, [sp, #0]
 8001f02:	f01a ff95 	bl	801ce30 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Capture file format", CENTER_MODE);
 8001f06:	f01a fdb9 	bl	801ca7c <UTIL_LCD_GetFont>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	88c1      	ldrh	r1, [r0, #6]
 8001f0e:	2000      	movs	r0, #0
 8001f10:	4a68      	ldr	r2, [pc, #416]	; (80020b4 <FrameCaptureInit+0x1d4>)
 8001f12:	f01a feab 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 8001f16:	f01a fdb1 	bl	801ca7c <UTIL_LCD_GetFont>
 8001f1a:	88c1      	ldrh	r1, [r0, #6]
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	4a66      	ldr	r2, [pc, #408]	; (80020b8 <FrameCaptureInit+0x1d8>)
 8001f20:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001f24:	2000      	movs	r0, #0
 8001f26:	f01a fea1 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the format of the captured files", CENTER_MODE);
 8001f2a:	f01a fda7 	bl	801ca7c <UTIL_LCD_GetFont>
 8001f2e:	88c1      	ldrh	r1, [r0, #6]
 8001f30:	2301      	movs	r3, #1
 8001f32:	4a62      	ldr	r2, [pc, #392]	; (80020bc <FrameCaptureInit+0x1dc>)
 8001f34:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001f38:	2000      	movs	r0, #0
 8001f3a:	4099      	lsls	r1, r3
 8001f3c:	f01a fe96 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 8001f40:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001f44:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001f48:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	9500      	str	r5, [sp, #0]
 8001f50:	f01a fee0 	bl	801cd14 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8001f54:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001f58:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001f5c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f60:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001f64:	9500      	str	r5, [sp, #0]
 8001f66:	f01a fed5 	bl	801cd14 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8001f6a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f6e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001f72:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001f76:	461a      	mov	r2, r3
 8001f78:	9500      	str	r5, [sp, #0]
 8001f7a:	f01a fecb 	bl	801cd14 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8001f7e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001f82:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001f86:	9500      	str	r5, [sp, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4608      	mov	r0, r1
 8001f8c:	f01a fec2 	bl	801cd14 <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8001f90:	f01a fd74 	bl	801ca7c <UTIL_LCD_GetFont>
 8001f94:	2301      	movs	r3, #1
 8001f96:	88c1      	ldrh	r1, [r0, #6]
 8001f98:	2000      	movs	r0, #0
 8001f9a:	4a49      	ldr	r2, [pc, #292]	; (80020c0 <FrameCaptureInit+0x1e0>)
 8001f9c:	4099      	lsls	r1, r3
 8001f9e:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8001fa2:	f01a fe63 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[1], CENTER_MODE);//DOWN
 8001fa6:	f01a fd69 	bl	801ca7c <UTIL_LCD_GetFont>
 8001faa:	88c1      	ldrh	r1, [r0, #6]
 8001fac:	2301      	movs	r3, #1
 8001fae:	4a45      	ldr	r2, [pc, #276]	; (80020c4 <FrameCaptureInit+0x1e4>)
 8001fb0:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f01a fe59 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8001fba:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8001fbc:	f7ff fe32 	bl	8001c24 <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8001fc0:	f8d4 3520 	ldr.w	r3, [r4, #1312]	; 0x520
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d05a      	beq.n	800207e <FrameCaptureInit+0x19e>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_capture_format)
 8001fc8:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d050      	beq.n	8002072 <FrameCaptureInit+0x192>
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d04e      	beq.n	8002072 <FrameCaptureInit+0x192>
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8001fd4:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001fd6:	220a      	movs	r2, #10
 8001fd8:	493b      	ldr	r1, [pc, #236]	; (80020c8 <FrameCaptureInit+0x1e8>)
 8001fda:	f204 503c 	addw	r0, r4, #1340	; 0x53c
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8001fde:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001fe2:	f013 fcf9 	bl	80159d8 <HAL_UART_Receive_DMA>
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	d146      	bne.n	8002078 <FrameCaptureInit+0x198>
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8001fea:	4b38      	ldr	r3, [pc, #224]	; (80020cc <FrameCaptureInit+0x1ec>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8001fec:	f504 65bd 	add.w	r5, r4, #1512	; 0x5e8
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8001ff0:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8001ff4:	4628      	mov	r0, r5
 8001ff6:	f011 ff95 	bl	8013f24 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 8001ffa:	4628      	mov	r0, r5
 8001ffc:	f011 ff56 	bl	8013eac <HAL_RNG_Init>
  HAL_RNG_GenerateRandomNumber(&Test_Context_Ptr->RngHandle, &Test_Context_Ptr->CaptureContext.capture_session_id);
 8002000:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 8002004:	4628      	mov	r0, r5
 8002006:	f011 ffa7 	bl	8013f58 <HAL_RNG_GenerateRandomNumber>
  sprintf(Test_Context_Ptr->CaptureContext.capture_session_name, "Session %X", (unsigned int)Test_Context_Ptr->CaptureContext.capture_session_id);
 800200a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800200e:	4930      	ldr	r1, [pc, #192]	; (80020d0 <FrameCaptureInit+0x1f0>)
 8002010:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8002014:	f024 f8e6 	bl	80261e4 <siprintf>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8002018:	2000      	movs	r0, #0
 800201a:	f00b fbbd 	bl	800d798 <BSP_SD_Init>
 800201e:	4605      	mov	r5, r0
 8002020:	b188      	cbz	r0, 8002046 <FrameCaptureInit+0x166>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8002022:	f01a fd2b 	bl	801ca7c <UTIL_LCD_GetFont>
 8002026:	88c1      	ldrh	r1, [r0, #6]
 8002028:	2301      	movs	r3, #1
 800202a:	4a2a      	ldr	r2, [pc, #168]	; (80020d4 <FrameCaptureInit+0x1f4>)
 800202c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002030:	2000      	movs	r0, #0
 8002032:	4099      	lsls	r1, r3
 8002034:	f01a fe1a 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002038:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800203a:	f7ff fdf3 	bl	8001c24 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 800203e:	2002      	movs	r0, #2
 8002040:	f008 fe30 	bl	800aca4 <BSP_LED_On>
    while (1);
 8002044:	e7fe      	b.n	8002044 <FrameCaptureInit+0x164>
  sprintf(Test_Context_Ptr->CaptureContext.capture_folder_name, "/Camera_Capture/CAM_CAPTURE_SESS_%X", (unsigned int)Test_Context_Ptr->CaptureContext.capture_session_id);
 8002046:	f104 06de 	add.w	r6, r4, #222	; 0xde
  STM32Fs_Init();
 800204a:	f019 fec9 	bl	801bde0 <STM32Fs_Init>
  STM32Fs_CreateDir("/Camera_Capture");
 800204e:	4822      	ldr	r0, [pc, #136]	; (80020d8 <FrameCaptureInit+0x1f8>)
 8002050:	f019 ff20 	bl	801be94 <STM32Fs_CreateDir>
  sprintf(Test_Context_Ptr->CaptureContext.capture_folder_name, "/Camera_Capture/CAM_CAPTURE_SESS_%X", (unsigned int)Test_Context_Ptr->CaptureContext.capture_session_id);
 8002054:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8002058:	4920      	ldr	r1, [pc, #128]	; (80020dc <FrameCaptureInit+0x1fc>)
 800205a:	4630      	mov	r0, r6
 800205c:	f024 f8c2 	bl	80261e4 <siprintf>
  STM32Fs_CreateDir(Test_Context_Ptr->CaptureContext.capture_folder_name);
 8002060:	4630      	mov	r0, r6
 8002062:	f019 ff17 	bl	801be94 <STM32Fs_CreateDir>
  BSP_SD_DeInit(0);
 8002066:	4628      	mov	r0, r5
}
 8002068:	b002      	add	sp, #8
 800206a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_SD_DeInit(0);
 800206e:	f00b bb55 	b.w	800d71c <BSP_SD_DeInit>
      Test_Context_Ptr->CaptureContext.capture_file_format=BMP;
 8002072:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 8002076:	e7ad      	b.n	8001fd4 <FrameCaptureInit+0xf4>
    Error_Handler();
 8002078:	f003 f80c 	bl	8005094 <Error_Handler>
 800207c:	e7b5      	b.n	8001fea <FrameCaptureInit+0x10a>
    HAL_Delay(200);
 800207e:	20c8      	movs	r0, #200	; 0xc8
 8002080:	f00b fcd0 	bl	800da24 <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002084:	2100      	movs	r1, #0
 8002086:	4608      	mov	r0, r1
 8002088:	f008 ff3a 	bl	800af00 <BSP_JOY_GetState>
    while (joy_state == JOY_NONE || joy_state == JOY_RIGHT || joy_state == JOY_LEFT || joy_state == JOY_SEL)
 800208c:	f010 0ff7 	tst.w	r0, #247	; 0xf7
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002090:	b2c3      	uxtb	r3, r0
    while (joy_state == JOY_NONE || joy_state == JOY_RIGHT || joy_state == JOY_LEFT || joy_state == JOY_SEL)
 8002092:	d0f7      	beq.n	8002084 <FrameCaptureInit+0x1a4>
 8002094:	2b04      	cmp	r3, #4
 8002096:	d0f5      	beq.n	8002084 <FrameCaptureInit+0x1a4>
 8002098:	2b01      	cmp	r3, #1
 800209a:	d0f3      	beq.n	8002084 <FrameCaptureInit+0x1a4>
    switch (joy_state)
 800209c:	2b02      	cmp	r3, #2
 800209e:	d005      	beq.n	80020ac <FrameCaptureInit+0x1cc>
 80020a0:	2b10      	cmp	r3, #16
 80020a2:	d1a2      	bne.n	8001fea <FrameCaptureInit+0x10a>
      Test_Context_Ptr->CaptureContext.capture_file_format=RAW;
 80020a4:	2303      	movs	r3, #3
 80020a6:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 80020aa:	e79e      	b.n	8001fea <FrameCaptureInit+0x10a>
      Test_Context_Ptr->CaptureContext.capture_file_format=BMP;
 80020ac:	2304      	movs	r3, #4
 80020ae:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 80020b2:	e79a      	b.n	8001fea <FrameCaptureInit+0x10a>
 80020b4:	08028d88 	.word	0x08028d88
 80020b8:	08028d9c 	.word	0x08028d9c
 80020bc:	08028dc4 	.word	0x08028dc4
 80020c0:	08028d5c 	.word	0x08028d5c
 80020c4:	08028d60 	.word	0x08028d60
 80020c8:	240076e0 	.word	0x240076e0
 80020cc:	48021800 	.word	0x48021800
 80020d0:	08028df0 	.word	0x08028df0
 80020d4:	08028dfc 	.word	0x08028dfc
 80020d8:	08028e18 	.word	0x08028e18
 80020dc:	08028e28 	.word	0x08028e28

080020e0 <MemoryDumpInit>:
{
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  char  dump_dir_path[64]=  "/dump_src_image_vga";
 80020e2:	4dab      	ldr	r5, [pc, #684]	; (8002390 <MemoryDumpInit+0x2b0>)
{
 80020e4:	b095      	sub	sp, #84	; 0x54
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 80020e6:	f8d0 75fc 	ldr.w	r7, [r0, #1532]	; 0x5fc
{
 80020ea:	4604      	mov	r4, r0
  char  dump_dir_path[64]=  "/dump_src_image_vga";
 80020ec:	f10d 0c10 	add.w	ip, sp, #16
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 80020f0:	f04f 36ff 	mov.w	r6, #4294967295
  char  dump_dir_path[64]=  "/dump_src_image_vga";
 80020f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80020fa:	682b      	ldr	r3, [r5, #0]
 80020fc:	222c      	movs	r2, #44	; 0x2c
 80020fe:	2100      	movs	r1, #0
 8002100:	a809      	add	r0, sp, #36	; 0x24
 8002102:	f8cc 3000 	str.w	r3, [ip]
 8002106:	f023 fb33 	bl	8025770 <memset>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800210a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800210e:	f01a fcbd 	bl	801ca8c <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002112:	2332      	movs	r3, #50	; 0x32
 8002114:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002118:	210a      	movs	r1, #10
 800211a:	20c8      	movs	r0, #200	; 0xc8
 800211c:	9600      	str	r6, [sp, #0]
 800211e:	f01a fe87 	bl	801ce30 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Memory dump sub-mode", CENTER_MODE);
 8002122:	f01a fcab 	bl	801ca7c <UTIL_LCD_GetFont>
 8002126:	2301      	movs	r3, #1
 8002128:	88c1      	ldrh	r1, [r0, #6]
 800212a:	2000      	movs	r0, #0
 800212c:	4a99      	ldr	r2, [pc, #612]	; (8002394 <MemoryDumpInit+0x2b4>)
 800212e:	f01a fd9d 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 8002132:	f01a fca3 	bl	801ca7c <UTIL_LCD_GetFont>
 8002136:	88c1      	ldrh	r1, [r0, #6]
 8002138:	2301      	movs	r3, #1
 800213a:	4a97      	ldr	r2, [pc, #604]	; (8002398 <MemoryDumpInit+0x2b8>)
 800213c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002140:	2000      	movs	r0, #0
 8002142:	f01a fd93 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the frame source", CENTER_MODE);
 8002146:	f01a fc99 	bl	801ca7c <UTIL_LCD_GetFont>
 800214a:	88c1      	ldrh	r1, [r0, #6]
 800214c:	2301      	movs	r3, #1
 800214e:	4a93      	ldr	r2, [pc, #588]	; (800239c <MemoryDumpInit+0x2bc>)
 8002150:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002154:	2000      	movs	r0, #0
 8002156:	0049      	lsls	r1, r1, #1
 8002158:	f01a fd88 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 800215c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002160:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002164:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002168:	4608      	mov	r0, r1
 800216a:	9600      	str	r6, [sp, #0]
 800216c:	f01a fdd2 	bl	801cd14 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002170:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002174:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002178:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800217c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002180:	9600      	str	r6, [sp, #0]
 8002182:	f01a fdc7 	bl	801cd14 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8002186:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800218a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800218e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002192:	461a      	mov	r2, r3
 8002194:	9600      	str	r6, [sp, #0]
 8002196:	f01a fdbd 	bl	801cd14 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 800219a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800219e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80021a2:	9600      	str	r6, [sp, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	4608      	mov	r0, r1
 80021a8:	f01a fdb4 	bl	801cd14 <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 80021ac:	f01a fc66 	bl	801ca7c <UTIL_LCD_GetFont>
 80021b0:	2301      	movs	r3, #1
 80021b2:	88c1      	ldrh	r1, [r0, #6]
 80021b4:	2000      	movs	r0, #0
 80021b6:	4a7a      	ldr	r2, [pc, #488]	; (80023a0 <MemoryDumpInit+0x2c0>)
 80021b8:	4099      	lsls	r1, r3
 80021ba:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 80021be:	f01a fd55 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 80021c2:	f01a fc5b 	bl	801ca7c <UTIL_LCD_GetFont>
 80021c6:	88c1      	ldrh	r1, [r0, #6]
 80021c8:	2303      	movs	r3, #3
 80021ca:	4a76      	ldr	r2, [pc, #472]	; (80023a4 <MemoryDumpInit+0x2c4>)
 80021cc:	1049      	asrs	r1, r1, #1
 80021ce:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 80021d2:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 80021d6:	f01a fd49 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(200, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[2], LEFT_MODE);//LEFT
 80021da:	f01a fc4f 	bl	801ca7c <UTIL_LCD_GetFont>
 80021de:	88c1      	ldrh	r1, [r0, #6]
 80021e0:	2303      	movs	r3, #3
 80021e2:	4a71      	ldr	r2, [pc, #452]	; (80023a8 <MemoryDumpInit+0x2c8>)
 80021e4:	1049      	asrs	r1, r1, #1
 80021e6:	20c8      	movs	r0, #200	; 0xc8
 80021e8:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 80021ec:	f01a fd3e 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80021f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021f2:	f7ff fd17 	bl	8001c24 <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 80021f6:	f8d4 3520 	ldr.w	r3, [r4, #1312]	; 0x520
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d06d      	beq.n	80022da <MemoryDumpInit+0x1fa>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_dump_submode)
 80021fe:	f894 3525 	ldrb.w	r3, [r4, #1317]	; 0x525
 8002202:	2b02      	cmp	r3, #2
 8002204:	f000 8099 	beq.w	800233a <MemoryDumpInit+0x25a>
 8002208:	2b03      	cmp	r3, #3
 800220a:	d060      	beq.n	80022ce <MemoryDumpInit+0x1ee>
 800220c:	2b01      	cmp	r3, #1
 800220e:	d05e      	beq.n	80022ce <MemoryDumpInit+0x1ee>
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 8002210:	f8d4 2538 	ldr.w	r2, [r4, #1336]	; 0x538
 8002214:	2a01      	cmp	r2, #1
 8002216:	d122      	bne.n	800225e <MemoryDumpInit+0x17e>
        dump_output_buff[i]=0x00;
 8002218:	4b64      	ldr	r3, [pc, #400]	; (80023ac <MemoryDumpInit+0x2cc>)
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 800221a:	2100      	movs	r1, #0
      Test_Context_Ptr->DumpContext.dump_state = 1;
 800221c:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
        dump_output_buff[i]=0x00;
 8002220:	2200      	movs	r2, #0
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8002222:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
        dump_output_buff[i]=0x00;
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8002230:	2000      	movs	r0, #0
 8002232:	f00b fab1 	bl	800d798 <BSP_SD_Init>
 8002236:	4605      	mov	r5, r0
 8002238:	b320      	cbz	r0, 8002284 <MemoryDumpInit+0x1a4>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 800223a:	f01a fc1f 	bl	801ca7c <UTIL_LCD_GetFont>
 800223e:	88c1      	ldrh	r1, [r0, #6]
 8002240:	2301      	movs	r3, #1
 8002242:	4a5b      	ldr	r2, [pc, #364]	; (80023b0 <MemoryDumpInit+0x2d0>)
 8002244:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002248:	2000      	movs	r0, #0
 800224a:	4099      	lsls	r1, r3
 800224c:	f01a fd0e 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002252:	f7ff fce7 	bl	8001c24 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002256:	2002      	movs	r0, #2
 8002258:	f008 fd24 	bl	800aca4 <BSP_LED_On>
    while (1);
 800225c:	e7fe      	b.n	800225c <MemoryDumpInit+0x17c>
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 800225e:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002260:	220a      	movs	r2, #10
 8002262:	4954      	ldr	r1, [pc, #336]	; (80023b4 <MemoryDumpInit+0x2d4>)
 8002264:	f204 503c 	addw	r0, r4, #1340	; 0x53c
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002268:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800226c:	f013 fbb4 	bl	80159d8 <HAL_UART_Receive_DMA>
 8002270:	2800      	cmp	r0, #0
 8002272:	d0dd      	beq.n	8002230 <MemoryDumpInit+0x150>
    Error_Handler();
 8002274:	f002 ff0e 	bl	8005094 <Error_Handler>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8002278:	2000      	movs	r0, #0
 800227a:	f00b fa8d 	bl	800d798 <BSP_SD_Init>
 800227e:	4605      	mov	r5, r0
 8002280:	2800      	cmp	r0, #0
 8002282:	d1da      	bne.n	800223a <MemoryDumpInit+0x15a>
  STM32Fs_Init();
 8002284:	f019 fdac 	bl	801bde0 <STM32Fs_Init>
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002288:	f504 66bd 	add.w	r6, r4, #1512	; 0x5e8
  Test_Context_Ptr->RngHandle.Instance = RNG;
 800228c:	4b4a      	ldr	r3, [pc, #296]	; (80023b8 <MemoryDumpInit+0x2d8>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 800228e:	4630      	mov	r0, r6
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8002290:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002294:	f011 fe46 	bl	8013f24 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 8002298:	4630      	mov	r0, r6
 800229a:	f011 fe07 	bl	8013eac <HAL_RNG_Init>
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <MemoryDumpInit+0x2dc>)
 80022a0:	f104 0622 	add.w	r6, r4, #34	; 0x22
 80022a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
  STM32Fs_CreateDir(Test_Context_Ptr->DumpContext.dump_folder_name);
 80022ac:	4630      	mov	r0, r6
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 80022ae:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80022b2:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
 80022b6:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
  STM32Fs_CreateDir(Test_Context_Ptr->DumpContext.dump_folder_name);
 80022ba:	f019 fdeb 	bl	801be94 <STM32Fs_CreateDir>
  if(Test_Context_Ptr->DumpContext.Dump_FrameSource==SDCARD_FILE)
 80022be:	7923      	ldrb	r3, [r4, #4]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d01d      	beq.n	8002300 <MemoryDumpInit+0x220>
    BSP_SD_DeInit(0);
 80022c4:	4628      	mov	r0, r5
 80022c6:	f00b fa29 	bl	800d71c <BSP_SD_DeInit>
}
 80022ca:	b015      	add	sp, #84	; 0x54
 80022cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 80022ce:	f8d4 2538 	ldr.w	r2, [r4, #1336]	; 0x538
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 80022d2:	7123      	strb	r3, [r4, #4]
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 80022d4:	2a01      	cmp	r2, #1
 80022d6:	d09f      	beq.n	8002218 <MemoryDumpInit+0x138>
 80022d8:	e7c1      	b.n	800225e <MemoryDumpInit+0x17e>
    HAL_Delay(200);
 80022da:	20c8      	movs	r0, #200	; 0xc8
 80022dc:	f00b fba2 	bl	800da24 <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 80022e0:	2100      	movs	r1, #0
 80022e2:	4608      	mov	r0, r1
 80022e4:	f008 fe0c 	bl	800af00 <BSP_JOY_GetState>
 80022e8:	b2c3      	uxtb	r3, r0
    while (joy_state == JOY_NONE || joy_state == JOY_DOWN || joy_state == JOY_SEL)
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d9f8      	bls.n	80022e0 <MemoryDumpInit+0x200>
    switch (joy_state)
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d030      	beq.n	8002354 <MemoryDumpInit+0x274>
 80022f2:	2b10      	cmp	r3, #16
 80022f4:	d037      	beq.n	8002366 <MemoryDumpInit+0x286>
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d19a      	bne.n	8002230 <MemoryDumpInit+0x150>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 80022fa:	2303      	movs	r3, #3
 80022fc:	7123      	strb	r3, [r4, #4]
   break;
 80022fe:	e797      	b.n	8002230 <MemoryDumpInit+0x150>
    ret = STM32Fs_GetNumberFiles(dump_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 8002300:	2202      	movs	r2, #2
 8002302:	a903      	add	r1, sp, #12
 8002304:	a804      	add	r0, sp, #16
    nbr_dir = 0;
 8002306:	9503      	str	r5, [sp, #12]
    ret = STM32Fs_GetNumberFiles(dump_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 8002308:	f019 fd84 	bl	801be14 <STM32Fs_GetNumberFiles>
    if (ret == STM32FS_ERROR_DIR_NOT_FOUND)
 800230c:	2809      	cmp	r0, #9
 800230e:	d02d      	beq.n	800236c <MemoryDumpInit+0x28c>
    if (nbr_dir != 0)
 8002310:	9b03      	ldr	r3, [sp, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0d9      	beq.n	80022ca <MemoryDumpInit+0x1ea>
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 8002316:	f01a fbb1 	bl	801ca7c <UTIL_LCD_GetFont>
 800231a:	88c1      	ldrh	r1, [r0, #6]
 800231c:	2301      	movs	r3, #1
 800231e:	4a28      	ldr	r2, [pc, #160]	; (80023c0 <MemoryDumpInit+0x2e0>)
 8002320:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002324:	4628      	mov	r0, r5
 8002326:	4099      	lsls	r1, r3
 8002328:	f01a fca0 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800232c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800232e:	f7ff fc79 	bl	8001c24 <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 8002332:	2002      	movs	r0, #2
 8002334:	f008 fcb6 	bl	800aca4 <BSP_LED_On>
      while (1)
 8002338:	e7fe      	b.n	8002338 <MemoryDumpInit+0x258>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 800233a:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 800233c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800233e:	f7ff f9df 	bl	8001700 <CAMERA_Init>
      CAMERA_Set_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8002342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002344:	f7ff fabe 	bl	80018c4 <CAMERA_Set_TestBar_Mode>
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 8002348:	f8d4 2538 	ldr.w	r2, [r4, #1336]	; 0x538
 800234c:	2a01      	cmp	r2, #1
 800234e:	f43f af63 	beq.w	8002218 <MemoryDumpInit+0x138>
 8002352:	e784      	b.n	800225e <MemoryDumpInit+0x17e>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 8002354:	2302      	movs	r3, #2
 8002356:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8002358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800235a:	f7ff f9d1 	bl	8001700 <CAMERA_Init>
      CAMERA_Set_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 800235e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002360:	f7ff fab0 	bl	80018c4 <CAMERA_Set_TestBar_Mode>
      break;
 8002364:	e764      	b.n	8002230 <MemoryDumpInit+0x150>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002366:	2301      	movs	r3, #1
 8002368:	7123      	strb	r3, [r4, #4]
      break;
 800236a:	e761      	b.n	8002230 <MemoryDumpInit+0x150>
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Directory 'dataset' doesn't exist", CENTER_MODE);
 800236c:	f01a fb86 	bl	801ca7c <UTIL_LCD_GetFont>
 8002370:	88c1      	ldrh	r1, [r0, #6]
 8002372:	2301      	movs	r3, #1
 8002374:	4a13      	ldr	r2, [pc, #76]	; (80023c4 <MemoryDumpInit+0x2e4>)
 8002376:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800237a:	4628      	mov	r0, r5
 800237c:	4099      	lsls	r1, r3
 800237e:	f01a fc75 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002382:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002384:	f7ff fc4e 	bl	8001c24 <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 8002388:	2002      	movs	r0, #2
 800238a:	f008 fc8b 	bl	800aca4 <BSP_LED_On>
      while (1)
 800238e:	e7fe      	b.n	800238e <MemoryDumpInit+0x2ae>
 8002390:	08028b80 	.word	0x08028b80
 8002394:	08028e4c 	.word	0x08028e4c
 8002398:	08028d9c 	.word	0x08028d9c
 800239c:	08028e64 	.word	0x08028e64
 80023a0:	08028d64 	.word	0x08028d64
 80023a4:	08028d70 	.word	0x08028d70
 80023a8:	08028d80 	.word	0x08028d80
 80023ac:	d0cdae80 	.word	0xd0cdae80
 80023b0:	08028dfc 	.word	0x08028dfc
 80023b4:	240076e0 	.word	0x240076e0
 80023b8:	48021800 	.word	0x48021800
 80023bc:	08028e80 	.word	0x08028e80
 80023c0:	08028ebc 	.word	0x08028ebc
 80023c4:	08028e90 	.word	0x08028e90

080023c8 <OnBoardValidInit>:
{
 80023c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023cc:	4604      	mov	r4, r0
 80023ce:	b094      	sub	sp, #80	; 0x50
static void DisplayIntroMessage(TestContext_TypeDef *Test_Context_Ptr)
{
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
  static const uint16_t margin = 15; /* margin for text in pixels*/

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80023d0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 80023d4:	f8d4 55fc 	ldr.w	r5, [r4, #1532]	; 0x5fc
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80023d8:	f01a fb58 	bl	801ca8c <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 80023dc:	f04f 31ff 	mov.w	r1, #4294967295
 80023e0:	2332      	movs	r3, #50	; 0x32
 80023e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80023e6:	20c8      	movs	r0, #200	; 0xc8
 80023e8:	9100      	str	r1, [sp, #0]
 80023ea:	210a      	movs	r1, #10
 80023ec:	f01a fd20 	bl	801ce30 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Onboard Validation", CENTER_MODE);
 80023f0:	f01a fb44 	bl	801ca7c <UTIL_LCD_GetFont>
 80023f4:	2301      	movs	r3, #1
 80023f6:	88c1      	ldrh	r1, [r0, #6]
 80023f8:	2000      	movs	r0, #0
 80023fa:	4aaf      	ldr	r2, [pc, #700]	; (80026b8 <OnBoardValidInit+0x2f0>)
 80023fc:	f01a fc36 	bl	801cc6c <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(4), (uint8_t *)"Onboard validation will look for a directory", LEFT_MODE);
 8002400:	f01a fb3c 	bl	801ca7c <UTIL_LCD_GetFont>
 8002404:	88c1      	ldrh	r1, [r0, #6]
 8002406:	2303      	movs	r3, #3
 8002408:	4aac      	ldr	r2, [pc, #688]	; (80026bc <OnBoardValidInit+0x2f4>)
 800240a:	0089      	lsls	r1, r1, #2
 800240c:	200f      	movs	r0, #15
 800240e:	f01a fc2d 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(5), (uint8_t *)"named 'onboard_valid_dataset_vga or _qvga'", LEFT_MODE);
 8002412:	f01a fb33 	bl	801ca7c <UTIL_LCD_GetFont>
 8002416:	88c1      	ldrh	r1, [r0, #6]
 8002418:	2303      	movs	r3, #3
 800241a:	4aa9      	ldr	r2, [pc, #676]	; (80026c0 <OnBoardValidInit+0x2f8>)
 800241c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002420:	200f      	movs	r0, #15
 8002422:	f01a fc23 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(6), (uint8_t *)"at the root of the SDCard.", LEFT_MODE);
 8002426:	f01a fb29 	bl	801ca7c <UTIL_LCD_GetFont>
 800242a:	88c1      	ldrh	r1, [r0, #6]
 800242c:	2303      	movs	r3, #3
 800242e:	4aa5      	ldr	r2, [pc, #660]	; (80026c4 <OnBoardValidInit+0x2fc>)
 8002430:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002434:	200f      	movs	r0, #15
 8002436:	0049      	lsls	r1, r1, #1
 8002438:	f01a fc18 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(7), (uint8_t *)"This directory should contain one directory", LEFT_MODE);
 800243c:	f01a fb1e 	bl	801ca7c <UTIL_LCD_GetFont>
 8002440:	88c1      	ldrh	r1, [r0, #6]
 8002442:	2303      	movs	r3, #3
 8002444:	4aa0      	ldr	r2, [pc, #640]	; (80026c8 <OnBoardValidInit+0x300>)
 8002446:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800244a:	200f      	movs	r0, #15
 800244c:	f01a fc0e 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(8), (uint8_t *)"per class containing images in BPM 16 bpp", LEFT_MODE);
 8002450:	f01a fb14 	bl	801ca7c <UTIL_LCD_GetFont>
 8002454:	2303      	movs	r3, #3
 8002456:	88c1      	ldrh	r1, [r0, #6]
 8002458:	200f      	movs	r0, #15
 800245a:	4a9c      	ldr	r2, [pc, #624]	; (80026cc <OnBoardValidInit+0x304>)
 800245c:	4099      	lsls	r1, r3
 800245e:	f01a fc05 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(9), (uint8_t *)"format.", LEFT_MODE);
 8002462:	f01a fb0b 	bl	801ca7c <UTIL_LCD_GetFont>
 8002466:	88c1      	ldrh	r1, [r0, #6]
 8002468:	2303      	movs	r3, #3
 800246a:	4a99      	ldr	r2, [pc, #612]	; (80026d0 <OnBoardValidInit+0x308>)
 800246c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002470:	200f      	movs	r0, #15
 8002472:	f01a fbfb 	bl	801cc6c <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(12), (uint8_t *)"Please insert the SDCard now,", LEFT_MODE);
 8002476:	f01a fb01 	bl	801ca7c <UTIL_LCD_GetFont>
 800247a:	88c1      	ldrh	r1, [r0, #6]
 800247c:	2303      	movs	r3, #3
 800247e:	4a95      	ldr	r2, [pc, #596]	; (80026d4 <OnBoardValidInit+0x30c>)
 8002480:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002484:	200f      	movs	r0, #15
 8002486:	0089      	lsls	r1, r1, #2
 8002488:	f01a fbf0 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(13), (uint8_t *)"then press the WAKE-UP button to get started", LEFT_MODE);
 800248c:	f01a faf6 	bl	801ca7c <UTIL_LCD_GetFont>
 8002490:	88c1      	ldrh	r1, [r0, #6]
 8002492:	2303      	movs	r3, #3
 8002494:	4a90      	ldr	r2, [pc, #576]	; (80026d8 <OnBoardValidInit+0x310>)
 8002496:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800249a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800249e:	200f      	movs	r0, #15
 80024a0:	f01a fbe4 	bl	801cc6c <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80024a4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80024a6:	f7ff fbbd 	bl	8001c24 <DISPLAY_Refresh>

  /* Wait for button input */
  while ((Test_Context_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 80024aa:	e002      	b.n	80024b2 <OnBoardValidInit+0xea>
 80024ac:	f008 fc80 	bl	800adb0 <BSP_PB_GetState>
 80024b0:	b918      	cbnz	r0, 80024ba <OnBoardValidInit+0xf2>
 80024b2:	f8d4 0520 	ldr.w	r0, [r4, #1312]	; 0x520
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d0f8      	beq.n	80024ac <OnBoardValidInit+0xe4>
  sd_error = BSP_SD_Init(0);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f00b f96c 	bl	800d798 <BSP_SD_Init>
  if (sd_error != BSP_ERROR_NONE)
 80024c0:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 80024c4:	d011      	beq.n	80024ea <OnBoardValidInit+0x122>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 80024c6:	f01a fad9 	bl	801ca7c <UTIL_LCD_GetFont>
 80024ca:	88c1      	ldrh	r1, [r0, #6]
 80024cc:	2301      	movs	r3, #1
 80024ce:	4a83      	ldr	r2, [pc, #524]	; (80026dc <OnBoardValidInit+0x314>)
 80024d0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80024d4:	2000      	movs	r0, #0
 80024d6:	4099      	lsls	r1, r3
 80024d8:	f01a fbc8 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80024dc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80024de:	f7ff fba1 	bl	8001c24 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80024e2:	2002      	movs	r0, #2
 80024e4:	f008 fbde 	bl	800aca4 <BSP_LED_On>
    while (1)
 80024e8:	e7fe      	b.n	80024e8 <OnBoardValidInit+0x120>
  strcpy(valid_dir_path, Test_Context_Ptr->ValidationContext.class_path);
 80024ea:	af04      	add	r7, sp, #16
 80024ec:	f504 7870 	add.w	r8, r4, #960	; 0x3c0
  STM32Fs_Init();
 80024f0:	f019 fc76 	bl	801bde0 <STM32Fs_Init>
  nbr_dir = 0;
 80024f4:	9603      	str	r6, [sp, #12]
  strcpy(valid_dir_path, Test_Context_Ptr->ValidationContext.class_path);
 80024f6:	4641      	mov	r1, r8
 80024f8:	4638      	mov	r0, r7
 80024fa:	f023 fe93 	bl	8026224 <stpcpy>
  valid_dir_path[strlen(valid_dir_path)-1]='\0';/*so to remove the '/' at the end of the string*/
 80024fe:	1bc0      	subs	r0, r0, r7
  ret = STM32Fs_GetNumberFiles(valid_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 8002500:	2202      	movs	r2, #2
 8002502:	a903      	add	r1, sp, #12
  valid_dir_path[strlen(valid_dir_path)-1]='\0';/*so to remove the '/' at the end of the string*/
 8002504:	f100 0350 	add.w	r3, r0, #80	; 0x50
  ret = STM32Fs_GetNumberFiles(valid_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 8002508:	4638      	mov	r0, r7
  valid_dir_path[strlen(valid_dir_path)-1]='\0';/*so to remove the '/' at the end of the string*/
 800250a:	446b      	add	r3, sp
 800250c:	f803 6c41 	strb.w	r6, [r3, #-65]
  ret = STM32Fs_GetNumberFiles(valid_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 8002510:	f019 fc80 	bl	801be14 <STM32Fs_GetNumberFiles>
  if (ret == STM32FS_ERROR_DIR_NOT_FOUND)
 8002514:	2809      	cmp	r0, #9
 8002516:	d014      	beq.n	8002542 <OnBoardValidInit+0x17a>
  if (nbr_dir != AI_NETWORK_OUT_1_SIZE)
 8002518:	9b03      	ldr	r3, [sp, #12]
 800251a:	2b05      	cmp	r3, #5
 800251c:	d023      	beq.n	8002566 <OnBoardValidInit+0x19e>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 800251e:	f01a faad 	bl	801ca7c <UTIL_LCD_GetFont>
 8002522:	88c1      	ldrh	r1, [r0, #6]
 8002524:	2301      	movs	r3, #1
 8002526:	4a6e      	ldr	r2, [pc, #440]	; (80026e0 <OnBoardValidInit+0x318>)
 8002528:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800252c:	4630      	mov	r0, r6
 800252e:	4099      	lsls	r1, r3
 8002530:	f01a fb9c 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002534:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002536:	f7ff fb75 	bl	8001c24 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 800253a:	2002      	movs	r0, #2
 800253c:	f008 fbb2 	bl	800aca4 <BSP_LED_On>
    while (1)
 8002540:	e7fe      	b.n	8002540 <OnBoardValidInit+0x178>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Directory 'onboard_valid_dataset' doesn't exist", CENTER_MODE);
 8002542:	f01a fa9b 	bl	801ca7c <UTIL_LCD_GetFont>
 8002546:	88c1      	ldrh	r1, [r0, #6]
 8002548:	2301      	movs	r3, #1
 800254a:	4a66      	ldr	r2, [pc, #408]	; (80026e4 <OnBoardValidInit+0x31c>)
 800254c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002550:	4630      	mov	r0, r6
 8002552:	4099      	lsls	r1, r3
 8002554:	f01a fb8a 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002558:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800255a:	f7ff fb63 	bl	8001c24 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 800255e:	2002      	movs	r0, #2
 8002560:	f008 fba0 	bl	800aca4 <BSP_LED_On>
    while (1)
 8002564:	e7fe      	b.n	8002564 <OnBoardValidInit+0x19c>
  BSP_LED_On(LED_GREEN);
 8002566:	4630      	mov	r0, r6
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002568:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8002700 <OnBoardValidInit+0x338>
  BSP_LED_On(LED_GREEN);
 800256c:	f008 fb9a 	bl	800aca4 <BSP_LED_On>
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002570:	f8df c190 	ldr.w	ip, [pc, #400]	; 8002704 <OnBoardValidInit+0x33c>
 8002574:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002578:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800257c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8002580:	e8a9 0007 	stmia.w	r9!, {r0, r1, r2}
 8002584:	f829 3b02 	strh.w	r3, [r9], #2
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	4649      	mov	r1, r9
  if (STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_CREATE_NEW_FILE) != STM32FS_ERROR_NONE)
 800258c:	4632      	mov	r2, r6
 800258e:	4856      	ldr	r0, [pc, #344]	; (80026e8 <OnBoardValidInit+0x320>)
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002590:	f801 391e 	strb.w	r3, [r1], #-30
  if (STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_CREATE_NEW_FILE) != STM32FS_ERROR_NONE)
 8002594:	f01a f83a 	bl	801c60c <STM32Fs_WriteTextToFile>
 8002598:	4682      	mov	sl, r0
 800259a:	b188      	cbz	r0, 80025c0 <OnBoardValidInit+0x1f8>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Unable to create the missclassified file", CENTER_MODE);
 800259c:	f01a fa6e 	bl	801ca7c <UTIL_LCD_GetFont>
 80025a0:	88c1      	ldrh	r1, [r0, #6]
 80025a2:	2301      	movs	r3, #1
 80025a4:	4a51      	ldr	r2, [pc, #324]	; (80026ec <OnBoardValidInit+0x324>)
 80025a6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80025aa:	4630      	mov	r0, r6
 80025ac:	4099      	lsls	r1, r3
 80025ae:	f01a fb5d 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80025b2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80025b4:	f7ff fb36 	bl	8001c24 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80025b8:	2002      	movs	r0, #2
 80025ba:	f008 fb73 	bl	800aca4 <BSP_LED_On>
    while (1)
 80025be:	e7fe      	b.n	80025be <OnBoardValidInit+0x1f6>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80025c0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  STM32Fs_OpenDir(valid_dir_path, &Test_Context_Ptr->ValidationContext.dataset_dir);
 80025c4:	f504 7692 	add.w	r6, r4, #292	; 0x124
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80025c8:	f01a fa60 	bl	801ca8c <UTIL_LCD_Clear>
  UTIL_LCD_SetFont(&Font20);
 80025cc:	4848      	ldr	r0, [pc, #288]	; (80026f0 <OnBoardValidInit+0x328>)
 80025ce:	f01a fa4d 	bl	801ca6c <UTIL_LCD_SetFont>
  sprintf(tmp_msg, "Found %d classes", (unsigned int)nbr_dir);
 80025d2:	9a03      	ldr	r2, [sp, #12]
 80025d4:	4947      	ldr	r1, [pc, #284]	; (80026f4 <OnBoardValidInit+0x32c>)
 80025d6:	f1a9 001e 	sub.w	r0, r9, #30
 80025da:	f023 fe03 	bl	80261e4 <siprintf>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 80025de:	f01a fa4d 	bl	801ca7c <UTIL_LCD_GetFont>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f1a9 021e 	sub.w	r2, r9, #30
 80025e8:	4650      	mov	r0, sl
 80025ea:	88d9      	ldrh	r1, [r3, #6]
 80025ec:	2301      	movs	r3, #1
 80025ee:	f01a fb3d 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  STM32Fs_OpenDir(valid_dir_path, &Test_Context_Ptr->ValidationContext.dataset_dir);
 80025f2:	4631      	mov	r1, r6
 80025f4:	4638      	mov	r0, r7
 80025f6:	f019 fc43 	bl	801be80 <STM32Fs_OpenDir>
  if(STM32Fs_GetNextDir(&Test_Context_Ptr->ValidationContext.dataset_dir, &Test_Context_Ptr->ValidationContext.fno) != STM32FS_ERROR_NONE)
 80025fa:	f504 71ac 	add.w	r1, r4, #344	; 0x158
 80025fe:	4630      	mov	r0, r6
 8002600:	f019 fc50 	bl	801bea4 <STM32Fs_GetNextDir>
 8002604:	2800      	cmp	r0, #0
 8002606:	d138      	bne.n	800267a <OnBoardValidInit+0x2b2>
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002608:	f504 76b7 	add.w	r6, r4, #366	; 0x16e
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 800260c:	4f3a      	ldr	r7, [pc, #232]	; (80026f8 <OnBoardValidInit+0x330>)
 800260e:	4630      	mov	r0, r6
 8002610:	6839      	ldr	r1, [r7, #0]
 8002612:	f7fd fe65 	bl	80002e0 <strcmp>
 8002616:	b390      	cbz	r0, 800267e <OnBoardValidInit+0x2b6>
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4630      	mov	r0, r6
 800261c:	f7fd fe60 	bl	80002e0 <strcmp>
 8002620:	b360      	cbz	r0, 800267c <OnBoardValidInit+0x2b4>
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	4630      	mov	r0, r6
 8002626:	f7fd fe5b 	bl	80002e0 <strcmp>
 800262a:	2800      	cmp	r0, #0
 800262c:	d041      	beq.n	80026b2 <OnBoardValidInit+0x2ea>
 800262e:	68f9      	ldr	r1, [r7, #12]
 8002630:	4630      	mov	r0, r6
 8002632:	f7fd fe55 	bl	80002e0 <strcmp>
 8002636:	2800      	cmp	r0, #0
 8002638:	d039      	beq.n	80026ae <OnBoardValidInit+0x2e6>
 800263a:	6939      	ldr	r1, [r7, #16]
 800263c:	4630      	mov	r0, r6
 800263e:	f7fd fe4f 	bl	80002e0 <strcmp>
 8002642:	b390      	cbz	r0, 80026aa <OnBoardValidInit+0x2e2>
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
    sprintf(tmp_msg, "Error, class %s doesn't exists", Test_Context_Ptr->ValidationContext.fno.fname);
 8002648:	4632      	mov	r2, r6
 800264a:	492c      	ldr	r1, [pc, #176]	; (80026fc <OnBoardValidInit+0x334>)
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 800264c:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
    sprintf(tmp_msg, "Error, class %s doesn't exists", Test_Context_Ptr->ValidationContext.fno.fname);
 8002650:	482b      	ldr	r0, [pc, #172]	; (8002700 <OnBoardValidInit+0x338>)
 8002652:	f023 fdc7 	bl	80261e4 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)tmp_msg, CENTER_MODE);
 8002656:	f01a fa11 	bl	801ca7c <UTIL_LCD_GetFont>
 800265a:	4601      	mov	r1, r0
 800265c:	2301      	movs	r3, #1
 800265e:	4a28      	ldr	r2, [pc, #160]	; (8002700 <OnBoardValidInit+0x338>)
 8002660:	88c9      	ldrh	r1, [r1, #6]
 8002662:	2000      	movs	r0, #0
 8002664:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002668:	f01a fb00 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800266c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800266e:	f7ff fad9 	bl	8001c24 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002672:	2002      	movs	r0, #2
 8002674:	f008 fb16 	bl	800aca4 <BSP_LED_On>
    while (1)
 8002678:	e7fe      	b.n	8002678 <OnBoardValidInit+0x2b0>
    while(1);
 800267a:	e7fe      	b.n	800267a <OnBoardValidInit+0x2b2>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 800267c:	2001      	movs	r0, #1
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, ""); //string "null"
 800267e:	f504 6580 	add.w	r5, r4, #1024	; 0x400
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 8002682:	4641      	mov	r1, r8
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002684:	f8c4 03bc 	str.w	r0, [r4, #956]	; 0x3bc
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 8002688:	4628      	mov	r0, r5
 800268a:	f023 fdcb 	bl	8026224 <stpcpy>
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.fno.fname);
 800268e:	4631      	mov	r1, r6
 8002690:	f023 fdd1 	bl	8026236 <strcpy>
  STM32Fs_OpenDir(Test_Context_Ptr->ValidationContext.tmp_class_path, &Test_Context_Ptr->ValidationContext.class_dir);
 8002694:	f504 711c 	add.w	r1, r4, #624	; 0x270
 8002698:	4628      	mov	r0, r5
 800269a:	f019 fbf1 	bl	801be80 <STM32Fs_OpenDir>
  Test_Context_Ptr->ValidationContext.validation_completed = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 80026a4:	b014      	add	sp, #80	; 0x50
 80026a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 80026aa:	2004      	movs	r0, #4
 80026ac:	e7e7      	b.n	800267e <OnBoardValidInit+0x2b6>
 80026ae:	2003      	movs	r0, #3
 80026b0:	e7e5      	b.n	800267e <OnBoardValidInit+0x2b6>
 80026b2:	2002      	movs	r0, #2
 80026b4:	e7e3      	b.n	800267e <OnBoardValidInit+0x2b6>
 80026b6:	bf00      	nop
 80026b8:	08028eec 	.word	0x08028eec
 80026bc:	08028f00 	.word	0x08028f00
 80026c0:	08028f30 	.word	0x08028f30
 80026c4:	08028f5c 	.word	0x08028f5c
 80026c8:	08028f78 	.word	0x08028f78
 80026cc:	08028fa4 	.word	0x08028fa4
 80026d0:	08028fd0 	.word	0x08028fd0
 80026d4:	08028fd8 	.word	0x08028fd8
 80026d8:	08028ff8 	.word	0x08028ff8
 80026dc:	08028dfc 	.word	0x08028dfc
 80026e0:	08028ebc 	.word	0x08028ebc
 80026e4:	08029028 	.word	0x08029028
 80026e8:	08029080 	.word	0x08029080
 80026ec:	08029094 	.word	0x08029094
 80026f0:	240074ec 	.word	0x240074ec
 80026f4:	080290c4 	.word	0x080290c4
 80026f8:	24000008 	.word	0x24000008
 80026fc:	080290d8 	.word	0x080290d8
 8002700:	240089e0 	.word	0x240089e0
 8002704:	08029060 	.word	0x08029060

08002708 <UartCmd_Get_Validation_Final_Accuracy>:
{
 8002708:	b538      	push	{r3, r4, r5, lr}
 800270a:	4604      	mov	r4, r0
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 800270c:	4d12      	ldr	r5, [pc, #72]	; (8002758 <UartCmd_Get_Validation_Final_Accuracy+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800270e:	2202      	movs	r2, #2
 8002710:	2180      	movs	r1, #128	; 0x80
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8002712:	f204 4344 	addw	r3, r4, #1092	; 0x444
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002716:	f204 543c 	addw	r4, r4, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800271a:	4628      	mov	r0, r5
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002720:	f002 fc48 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002724:	2204      	movs	r2, #4
 8002726:	4629      	mov	r1, r5
 8002728:	4620      	mov	r0, r4
 800272a:	f013 f903 	bl	8015934 <HAL_UART_Transmit_DMA>
 800272e:	b958      	cbnz	r0, 8002748 <UartCmd_Get_Validation_Final_Accuracy+0x40>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002730:	4620      	mov	r0, r4
 8002732:	f013 fb2f 	bl	8015d94 <HAL_UART_GetState>
 8002736:	2820      	cmp	r0, #32
 8002738:	d1fa      	bne.n	8002730 <UartCmd_Get_Validation_Final_Accuracy+0x28>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800273a:	220a      	movs	r2, #10
 800273c:	4907      	ldr	r1, [pc, #28]	; (800275c <UartCmd_Get_Validation_Final_Accuracy+0x54>)
 800273e:	4620      	mov	r0, r4
 8002740:	f013 f94a 	bl	80159d8 <HAL_UART_Receive_DMA>
 8002744:	b918      	cbnz	r0, 800274e <UartCmd_Get_Validation_Final_Accuracy+0x46>
}
 8002746:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002748:	f002 fca4 	bl	8005094 <Error_Handler>
 800274c:	e7f0      	b.n	8002730 <UartCmd_Get_Validation_Final_Accuracy+0x28>
}
 800274e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002752:	f002 bc9f 	b.w	8005094 <Error_Handler>
 8002756:	bf00      	nop
 8002758:	24007700 	.word	0x24007700
 800275c:	240076e0 	.word	0x240076e0

08002760 <UartCmd_Get_Dump_Output_Data_Size>:
{
 8002760:	b538      	push	{r3, r4, r5, lr}
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE_BYTES;
 8002762:	4d11      	ldr	r5, [pc, #68]	; (80027a8 <UartCmd_Get_Dump_Output_Data_Size+0x48>)
 8002764:	2305      	movs	r3, #5
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002766:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800276a:	2202      	movs	r2, #2
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	4628      	mov	r0, r5
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE_BYTES;
 8002770:	802b      	strh	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002772:	f002 fc1f 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002776:	2202      	movs	r2, #2
 8002778:	4629      	mov	r1, r5
 800277a:	4620      	mov	r0, r4
 800277c:	f013 f8da 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002780:	b958      	cbnz	r0, 800279a <UartCmd_Get_Dump_Output_Data_Size+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002782:	4620      	mov	r0, r4
 8002784:	f013 fb06 	bl	8015d94 <HAL_UART_GetState>
 8002788:	2820      	cmp	r0, #32
 800278a:	d1fa      	bne.n	8002782 <UartCmd_Get_Dump_Output_Data_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800278c:	220a      	movs	r2, #10
 800278e:	4907      	ldr	r1, [pc, #28]	; (80027ac <UartCmd_Get_Dump_Output_Data_Size+0x4c>)
 8002790:	4620      	mov	r0, r4
 8002792:	f013 f921 	bl	80159d8 <HAL_UART_Receive_DMA>
 8002796:	b918      	cbnz	r0, 80027a0 <UartCmd_Get_Dump_Output_Data_Size+0x40>
}
 8002798:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 800279a:	f002 fc7b 	bl	8005094 <Error_Handler>
 800279e:	e7f0      	b.n	8002782 <UartCmd_Get_Dump_Output_Data_Size+0x22>
}
 80027a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80027a4:	f002 bc76 	b.w	8005094 <Error_Handler>
 80027a8:	24007700 	.word	0x24007700
 80027ac:	240076e0 	.word	0x240076e0

080027b0 <UartCmd_Upload_Timing_Report>:
{
 80027b0:	b510      	push	{r4, lr}
 80027b2:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80027b4:	2202      	movs	r2, #2
 80027b6:	2180      	movs	r1, #128	; 0x80
 80027b8:	480e      	ldr	r0, [pc, #56]	; (80027f4 <UartCmd_Upload_Timing_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80027ba:	f204 543c 	addw	r4, r4, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80027be:	f002 fbf9 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80027c2:	2214      	movs	r2, #20
 80027c4:	490b      	ldr	r1, [pc, #44]	; (80027f4 <UartCmd_Upload_Timing_Report+0x44>)
 80027c6:	4620      	mov	r0, r4
 80027c8:	f013 f8b4 	bl	8015934 <HAL_UART_Transmit_DMA>
 80027cc:	b958      	cbnz	r0, 80027e6 <UartCmd_Upload_Timing_Report+0x36>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80027ce:	4620      	mov	r0, r4
 80027d0:	f013 fae0 	bl	8015d94 <HAL_UART_GetState>
 80027d4:	2820      	cmp	r0, #32
 80027d6:	d1fa      	bne.n	80027ce <UartCmd_Upload_Timing_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80027d8:	220a      	movs	r2, #10
 80027da:	4907      	ldr	r1, [pc, #28]	; (80027f8 <UartCmd_Upload_Timing_Report+0x48>)
 80027dc:	4620      	mov	r0, r4
 80027de:	f013 f8fb 	bl	80159d8 <HAL_UART_Receive_DMA>
 80027e2:	b918      	cbnz	r0, 80027ec <UartCmd_Upload_Timing_Report+0x3c>
}
 80027e4:	bd10      	pop	{r4, pc}
      Error_Handler();
 80027e6:	f002 fc55 	bl	8005094 <Error_Handler>
 80027ea:	e7f0      	b.n	80027ce <UartCmd_Upload_Timing_Report+0x1e>
}
 80027ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80027f0:	f002 bc50 	b.w	8005094 <Error_Handler>
 80027f4:	d0e82800 	.word	0xd0e82800
 80027f8:	240076e0 	.word	0x240076e0

080027fc <UartCmd_Upload_Validation_Report>:
{
 80027fc:	b510      	push	{r4, lr}
 80027fe:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002800:	2202      	movs	r2, #2
 8002802:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 8002806:	480f      	ldr	r0, [pc, #60]	; (8002844 <UartCmd_Upload_Validation_Report+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002808:	f204 543c 	addw	r4, r4, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800280c:	f002 fbd2 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002810:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002814:	490b      	ldr	r1, [pc, #44]	; (8002844 <UartCmd_Upload_Validation_Report+0x48>)
 8002816:	4620      	mov	r0, r4
 8002818:	f013 f88c 	bl	8015934 <HAL_UART_Transmit_DMA>
 800281c:	b958      	cbnz	r0, 8002836 <UartCmd_Upload_Validation_Report+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800281e:	4620      	mov	r0, r4
 8002820:	f013 fab8 	bl	8015d94 <HAL_UART_GetState>
 8002824:	2820      	cmp	r0, #32
 8002826:	d1fa      	bne.n	800281e <UartCmd_Upload_Validation_Report+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002828:	220a      	movs	r2, #10
 800282a:	4907      	ldr	r1, [pc, #28]	; (8002848 <UartCmd_Upload_Validation_Report+0x4c>)
 800282c:	4620      	mov	r0, r4
 800282e:	f013 f8d3 	bl	80159d8 <HAL_UART_Receive_DMA>
 8002832:	b918      	cbnz	r0, 800283c <UartCmd_Upload_Validation_Report+0x40>
}
 8002834:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002836:	f002 fc2d 	bl	8005094 <Error_Handler>
 800283a:	e7f0      	b.n	800281e <UartCmd_Upload_Validation_Report+0x22>
}
 800283c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002840:	f002 bc28 	b.w	8005094 <Error_Handler>
 8002844:	d0cdaf00 	.word	0xd0cdaf00
 8002848:	240076e0 	.word	0x240076e0

0800284c <UartCmd_Upload_NonRegression_Report>:
{
 800284c:	b510      	push	{r4, lr}
 800284e:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002850:	2202      	movs	r2, #2
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	480e      	ldr	r0, [pc, #56]	; (8002890 <UartCmd_Upload_NonRegression_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002856:	f204 543c 	addw	r4, r4, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800285a:	f002 fbab 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800285e:	2205      	movs	r2, #5
 8002860:	490b      	ldr	r1, [pc, #44]	; (8002890 <UartCmd_Upload_NonRegression_Report+0x44>)
 8002862:	4620      	mov	r0, r4
 8002864:	f013 f866 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002868:	b958      	cbnz	r0, 8002882 <UartCmd_Upload_NonRegression_Report+0x36>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800286a:	4620      	mov	r0, r4
 800286c:	f013 fa92 	bl	8015d94 <HAL_UART_GetState>
 8002870:	2820      	cmp	r0, #32
 8002872:	d1fa      	bne.n	800286a <UartCmd_Upload_NonRegression_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002874:	220a      	movs	r2, #10
 8002876:	4907      	ldr	r1, [pc, #28]	; (8002894 <UartCmd_Upload_NonRegression_Report+0x48>)
 8002878:	4620      	mov	r0, r4
 800287a:	f013 f8ad 	bl	80159d8 <HAL_UART_Receive_DMA>
 800287e:	b918      	cbnz	r0, 8002888 <UartCmd_Upload_NonRegression_Report+0x3c>
}
 8002880:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002882:	f002 fc07 	bl	8005094 <Error_Handler>
 8002886:	e7f0      	b.n	800286a <UartCmd_Upload_NonRegression_Report+0x1e>
}
 8002888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800288c:	f002 bc02 	b.w	8005094 <Error_Handler>
 8002890:	d0cdae80 	.word	0xd0cdae80
 8002894:	240076e0 	.word	0x240076e0

08002898 <UartCmd_Upload_Dump_Output_Data>:
 8002898:	b510      	push	{r4, lr}
 800289a:	4604      	mov	r4, r0
 800289c:	2202      	movs	r2, #2
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	480e      	ldr	r0, [pc, #56]	; (80028dc <UartCmd_Upload_Dump_Output_Data+0x44>)
 80028a2:	f204 543c 	addw	r4, r4, #1340	; 0x53c
 80028a6:	f002 fb85 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
 80028aa:	2205      	movs	r2, #5
 80028ac:	490b      	ldr	r1, [pc, #44]	; (80028dc <UartCmd_Upload_Dump_Output_Data+0x44>)
 80028ae:	4620      	mov	r0, r4
 80028b0:	f013 f840 	bl	8015934 <HAL_UART_Transmit_DMA>
 80028b4:	b958      	cbnz	r0, 80028ce <UartCmd_Upload_Dump_Output_Data+0x36>
 80028b6:	4620      	mov	r0, r4
 80028b8:	f013 fa6c 	bl	8015d94 <HAL_UART_GetState>
 80028bc:	2820      	cmp	r0, #32
 80028be:	d1fa      	bne.n	80028b6 <UartCmd_Upload_Dump_Output_Data+0x1e>
 80028c0:	220a      	movs	r2, #10
 80028c2:	4907      	ldr	r1, [pc, #28]	; (80028e0 <UartCmd_Upload_Dump_Output_Data+0x48>)
 80028c4:	4620      	mov	r0, r4
 80028c6:	f013 f887 	bl	80159d8 <HAL_UART_Receive_DMA>
 80028ca:	b918      	cbnz	r0, 80028d4 <UartCmd_Upload_Dump_Output_Data+0x3c>
 80028cc:	bd10      	pop	{r4, pc}
 80028ce:	f002 fbe1 	bl	8005094 <Error_Handler>
 80028d2:	e7f0      	b.n	80028b6 <UartCmd_Upload_Dump_Output_Data+0x1e>
 80028d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028d8:	f002 bbdc 	b.w	8005094 <Error_Handler>
 80028dc:	d0cdae80 	.word	0xd0cdae80
 80028e0:	240076e0 	.word	0x240076e0

080028e4 <UartCmd_Upload_Valid_Output>:
 80028e4:	b510      	push	{r4, lr}
 80028e6:	4604      	mov	r4, r0
 80028e8:	2202      	movs	r2, #2
 80028ea:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 80028ee:	480f      	ldr	r0, [pc, #60]	; (800292c <UartCmd_Upload_Valid_Output+0x48>)
 80028f0:	f204 543c 	addw	r4, r4, #1340	; 0x53c
 80028f4:	f002 fb5e 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
 80028f8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80028fc:	490b      	ldr	r1, [pc, #44]	; (800292c <UartCmd_Upload_Valid_Output+0x48>)
 80028fe:	4620      	mov	r0, r4
 8002900:	f013 f818 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002904:	b958      	cbnz	r0, 800291e <UartCmd_Upload_Valid_Output+0x3a>
 8002906:	4620      	mov	r0, r4
 8002908:	f013 fa44 	bl	8015d94 <HAL_UART_GetState>
 800290c:	2820      	cmp	r0, #32
 800290e:	d1fa      	bne.n	8002906 <UartCmd_Upload_Valid_Output+0x22>
 8002910:	220a      	movs	r2, #10
 8002912:	4907      	ldr	r1, [pc, #28]	; (8002930 <UartCmd_Upload_Valid_Output+0x4c>)
 8002914:	4620      	mov	r0, r4
 8002916:	f013 f85f 	bl	80159d8 <HAL_UART_Receive_DMA>
 800291a:	b918      	cbnz	r0, 8002924 <UartCmd_Upload_Valid_Output+0x40>
 800291c:	bd10      	pop	{r4, pc}
 800291e:	f002 fbb9 	bl	8005094 <Error_Handler>
 8002922:	e7f0      	b.n	8002906 <UartCmd_Upload_Valid_Output+0x22>
 8002924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002928:	f002 bbb4 	b.w	8005094 <Error_Handler>
 800292c:	d0cdaf00 	.word	0xd0cdaf00
 8002930:	240076e0 	.word	0x240076e0

08002934 <UartCmd_Get_Valid_Output_Size>:
 8002934:	b538      	push	{r3, r4, r5, lr}
 8002936:	4d12      	ldr	r5, [pc, #72]	; (8002980 <UartCmd_Get_Valid_Output_Size+0x4c>)
 8002938:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800293c:	f200 543c 	addw	r4, r0, #1340	; 0x53c
 8002940:	2202      	movs	r2, #2
 8002942:	2180      	movs	r1, #128	; 0x80
 8002944:	4628      	mov	r0, r5
 8002946:	602b      	str	r3, [r5, #0]
 8002948:	f002 fb34 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
 800294c:	2204      	movs	r2, #4
 800294e:	4629      	mov	r1, r5
 8002950:	4620      	mov	r0, r4
 8002952:	f012 ffef 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002956:	b958      	cbnz	r0, 8002970 <UartCmd_Get_Valid_Output_Size+0x3c>
 8002958:	4620      	mov	r0, r4
 800295a:	f013 fa1b 	bl	8015d94 <HAL_UART_GetState>
 800295e:	2820      	cmp	r0, #32
 8002960:	d1fa      	bne.n	8002958 <UartCmd_Get_Valid_Output_Size+0x24>
 8002962:	220a      	movs	r2, #10
 8002964:	4907      	ldr	r1, [pc, #28]	; (8002984 <UartCmd_Get_Valid_Output_Size+0x50>)
 8002966:	4620      	mov	r0, r4
 8002968:	f013 f836 	bl	80159d8 <HAL_UART_Receive_DMA>
 800296c:	b918      	cbnz	r0, 8002976 <UartCmd_Get_Valid_Output_Size+0x42>
 800296e:	bd38      	pop	{r3, r4, r5, pc}
 8002970:	f002 fb90 	bl	8005094 <Error_Handler>
 8002974:	e7f0      	b.n	8002958 <UartCmd_Get_Valid_Output_Size+0x24>
 8002976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800297a:	f002 bb8b 	b.w	8005094 <Error_Handler>
 800297e:	bf00      	nop
 8002980:	24007700 	.word	0x24007700
 8002984:	240076e0 	.word	0x240076e0

08002988 <UartCmd_Get_Timing_Report_Size>:
{
 8002988:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = APP_FRAMEOPERATION_NUM*sizeof(uint32_t);
 800298a:	4d11      	ldr	r5, [pc, #68]	; (80029d0 <UartCmd_Get_Timing_Report_Size+0x48>)
 800298c:	2314      	movs	r3, #20
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800298e:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002992:	2202      	movs	r2, #2
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = APP_FRAMEOPERATION_NUM*sizeof(uint32_t);
 8002998:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800299a:	f002 fb0b 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800299e:	2204      	movs	r2, #4
 80029a0:	4629      	mov	r1, r5
 80029a2:	4620      	mov	r0, r4
 80029a4:	f012 ffc6 	bl	8015934 <HAL_UART_Transmit_DMA>
 80029a8:	b958      	cbnz	r0, 80029c2 <UartCmd_Get_Timing_Report_Size+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80029aa:	4620      	mov	r0, r4
 80029ac:	f013 f9f2 	bl	8015d94 <HAL_UART_GetState>
 80029b0:	2820      	cmp	r0, #32
 80029b2:	d1fa      	bne.n	80029aa <UartCmd_Get_Timing_Report_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80029b4:	220a      	movs	r2, #10
 80029b6:	4907      	ldr	r1, [pc, #28]	; (80029d4 <UartCmd_Get_Timing_Report_Size+0x4c>)
 80029b8:	4620      	mov	r0, r4
 80029ba:	f013 f80d 	bl	80159d8 <HAL_UART_Receive_DMA>
 80029be:	b918      	cbnz	r0, 80029c8 <UartCmd_Get_Timing_Report_Size+0x40>
}
 80029c0:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 80029c2:	f002 fb67 	bl	8005094 <Error_Handler>
 80029c6:	e7f0      	b.n	80029aa <UartCmd_Get_Timing_Report_Size+0x22>
}
 80029c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80029cc:	f002 bb62 	b.w	8005094 <Error_Handler>
 80029d0:	24007700 	.word	0x24007700
 80029d4:	240076e0 	.word	0x240076e0

080029d8 <UartCmd_Get_NonRegression_Debug_Report_Size>:
{
 80029d8:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 80029da:	4d11      	ldr	r5, [pc, #68]	; (8002a20 <UartCmd_Get_NonRegression_Debug_Report_Size+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80029dc:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 80029e0:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <UartCmd_Get_NonRegression_Debug_Report_Size+0x4c>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80029e2:	2202      	movs	r2, #2
 80029e4:	2180      	movs	r1, #128	; 0x80
 80029e6:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 80029e8:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80029ea:	f002 fae3 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80029ee:	2204      	movs	r2, #4
 80029f0:	4629      	mov	r1, r5
 80029f2:	4620      	mov	r0, r4
 80029f4:	f012 ff9e 	bl	8015934 <HAL_UART_Transmit_DMA>
 80029f8:	b958      	cbnz	r0, 8002a12 <UartCmd_Get_NonRegression_Debug_Report_Size+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80029fa:	4620      	mov	r0, r4
 80029fc:	f013 f9ca 	bl	8015d94 <HAL_UART_GetState>
 8002a00:	2820      	cmp	r0, #32
 8002a02:	d1fa      	bne.n	80029fa <UartCmd_Get_NonRegression_Debug_Report_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002a04:	220a      	movs	r2, #10
 8002a06:	4908      	ldr	r1, [pc, #32]	; (8002a28 <UartCmd_Get_NonRegression_Debug_Report_Size+0x50>)
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f012 ffe5 	bl	80159d8 <HAL_UART_Receive_DMA>
 8002a0e:	b918      	cbnz	r0, 8002a18 <UartCmd_Get_NonRegression_Debug_Report_Size+0x40>
}
 8002a10:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002a12:	f002 fb3f 	bl	8005094 <Error_Handler>
 8002a16:	e7f0      	b.n	80029fa <UartCmd_Get_NonRegression_Debug_Report_Size+0x22>
}
 8002a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002a1c:	f002 bb3a 	b.w	8005094 <Error_Handler>
 8002a20:	24007700 	.word	0x24007700
 8002a24:	001a514a 	.word	0x001a514a
 8002a28:	240076e0 	.word	0x240076e0

08002a2c <UartCmd_Get_NonRegression_Report_Size>:
{
 8002a2c:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE_BYTES;
 8002a2e:	4d11      	ldr	r5, [pc, #68]	; (8002a74 <UartCmd_Get_NonRegression_Report_Size+0x48>)
 8002a30:	2305      	movs	r3, #5
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002a32:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002a36:	2202      	movs	r2, #2
 8002a38:	2180      	movs	r1, #128	; 0x80
 8002a3a:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE_BYTES;
 8002a3c:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002a3e:	f002 fab9 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002a42:	2204      	movs	r2, #4
 8002a44:	4629      	mov	r1, r5
 8002a46:	4620      	mov	r0, r4
 8002a48:	f012 ff74 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002a4c:	b958      	cbnz	r0, 8002a66 <UartCmd_Get_NonRegression_Report_Size+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002a4e:	4620      	mov	r0, r4
 8002a50:	f013 f9a0 	bl	8015d94 <HAL_UART_GetState>
 8002a54:	2820      	cmp	r0, #32
 8002a56:	d1fa      	bne.n	8002a4e <UartCmd_Get_NonRegression_Report_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002a58:	220a      	movs	r2, #10
 8002a5a:	4907      	ldr	r1, [pc, #28]	; (8002a78 <UartCmd_Get_NonRegression_Report_Size+0x4c>)
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	f012 ffbb 	bl	80159d8 <HAL_UART_Receive_DMA>
 8002a62:	b918      	cbnz	r0, 8002a6c <UartCmd_Get_NonRegression_Report_Size+0x40>
}
 8002a64:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002a66:	f002 fb15 	bl	8005094 <Error_Handler>
 8002a6a:	e7f0      	b.n	8002a4e <UartCmd_Get_NonRegression_Report_Size+0x22>
}
 8002a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002a70:	f002 bb10 	b.w	8005094 <Error_Handler>
 8002a74:	24007700 	.word	0x24007700
 8002a78:	240076e0 	.word	0x240076e0

08002a7c <UartCmd_Get_Validation_Report_Size>:
{
 8002a7c:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*AI_NET_OUTPUT_SIZE_BYTES*NUM_FILE_PER_DIR;
 8002a7e:	4d12      	ldr	r5, [pc, #72]	; (8002ac8 <UartCmd_Get_Validation_Report_Size+0x4c>)
 8002a80:	f640 13c4 	movw	r3, #2500	; 0x9c4
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002a84:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002a88:	2202      	movs	r2, #2
 8002a8a:	2180      	movs	r1, #128	; 0x80
 8002a8c:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*AI_NET_OUTPUT_SIZE_BYTES*NUM_FILE_PER_DIR;
 8002a8e:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002a90:	f002 fa90 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002a94:	2204      	movs	r2, #4
 8002a96:	4629      	mov	r1, r5
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f012 ff4b 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002a9e:	b958      	cbnz	r0, 8002ab8 <UartCmd_Get_Validation_Report_Size+0x3c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f013 f977 	bl	8015d94 <HAL_UART_GetState>
 8002aa6:	2820      	cmp	r0, #32
 8002aa8:	d1fa      	bne.n	8002aa0 <UartCmd_Get_Validation_Report_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002aaa:	220a      	movs	r2, #10
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <UartCmd_Get_Validation_Report_Size+0x50>)
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f012 ff92 	bl	80159d8 <HAL_UART_Receive_DMA>
 8002ab4:	b918      	cbnz	r0, 8002abe <UartCmd_Get_Validation_Report_Size+0x42>
}
 8002ab6:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002ab8:	f002 faec 	bl	8005094 <Error_Handler>
 8002abc:	e7f0      	b.n	8002aa0 <UartCmd_Get_Validation_Report_Size+0x24>
}
 8002abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002ac2:	f002 bae7 	b.w	8005094 <Error_Handler>
 8002ac6:	bf00      	nop
 8002ac8:	24007700 	.word	0x24007700
 8002acc:	240076e0 	.word	0x240076e0

08002ad0 <UartCmd_Get_Dump_Whole_Data_Size>:
{
 8002ad0:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8002ad2:	4d11      	ldr	r5, [pc, #68]	; (8002b18 <UartCmd_Get_Dump_Whole_Data_Size+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002ad4:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <UartCmd_Get_Dump_Whole_Data_Size+0x4c>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002ada:	2202      	movs	r2, #2
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	4628      	mov	r0, r5
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8002ae0:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002ae2:	f002 fa67 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	4629      	mov	r1, r5
 8002aea:	4620      	mov	r0, r4
 8002aec:	f012 ff22 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002af0:	b958      	cbnz	r0, 8002b0a <UartCmd_Get_Dump_Whole_Data_Size+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002af2:	4620      	mov	r0, r4
 8002af4:	f013 f94e 	bl	8015d94 <HAL_UART_GetState>
 8002af8:	2820      	cmp	r0, #32
 8002afa:	d1fa      	bne.n	8002af2 <UartCmd_Get_Dump_Whole_Data_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002afc:	220a      	movs	r2, #10
 8002afe:	4908      	ldr	r1, [pc, #32]	; (8002b20 <UartCmd_Get_Dump_Whole_Data_Size+0x50>)
 8002b00:	4620      	mov	r0, r4
 8002b02:	f012 ff69 	bl	80159d8 <HAL_UART_Receive_DMA>
 8002b06:	b918      	cbnz	r0, 8002b10 <UartCmd_Get_Dump_Whole_Data_Size+0x40>
}
 8002b08:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002b0a:	f002 fac3 	bl	8005094 <Error_Handler>
 8002b0e:	e7f0      	b.n	8002af2 <UartCmd_Get_Dump_Whole_Data_Size+0x22>
}
 8002b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002b14:	f002 babe 	b.w	8005094 <Error_Handler>
 8002b18:	24007700 	.word	0x24007700
 8002b1c:	000d28a5 	.word	0x000d28a5
 8002b20:	240076e0 	.word	0x240076e0

08002b24 <UartCmd_Upload_NonRegression_Debug_Report>:
{
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	4d31      	ldr	r5, [pc, #196]	; (8002bec <UartCmd_Upload_NonRegression_Debug_Report+0xc8>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002b28:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	4930      	ldr	r1, [pc, #192]	; (8002bf0 <UartCmd_Upload_NonRegression_Debug_Report+0xcc>)
 8002b30:	4628      	mov	r0, r5
 8002b32:	4f30      	ldr	r7, [pc, #192]	; (8002bf4 <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002b34:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002b38:	f002 fa3c 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b40:	4629      	mov	r1, r5
 8002b42:	4620      	mov	r0, r4
 8002b44:	f012 fef6 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	d142      	bne.n	8002bd2 <UartCmd_Upload_NonRegression_Debug_Report+0xae>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f013 f921 	bl	8015d94 <HAL_UART_GetState>
 8002b52:	2820      	cmp	r0, #32
 8002b54:	d1fa      	bne.n	8002b4c <UartCmd_Upload_NonRegression_Debug_Report+0x28>
    for(i=0;i<dma_xfer_num;i++)
 8002b56:	4435      	add	r5, r6
 8002b58:	42af      	cmp	r7, r5
 8002b5a:	d1ef      	bne.n	8002b3c <UartCmd_Upload_NonRegression_Debug_Report+0x18>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002b5c:	f642 02b2 	movw	r2, #10418	; 0x28b2
 8002b60:	4924      	ldr	r1, [pc, #144]	; (8002bf4 <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
 8002b62:	4620      	mov	r0, r4
 8002b64:	f012 fee6 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d13c      	bne.n	8002be6 <UartCmd_Upload_NonRegression_Debug_Report+0xc2>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f013 f911 	bl	8015d94 <HAL_UART_GetState>
 8002b72:	2820      	cmp	r0, #32
 8002b74:	d1fa      	bne.n	8002b6c <UartCmd_Upload_NonRegression_Debug_Report+0x48>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002b76:	4d20      	ldr	r5, [pc, #128]	; (8002bf8 <UartCmd_Upload_NonRegression_Debug_Report+0xd4>)
 8002b78:	2202      	movs	r2, #2
 8002b7a:	491d      	ldr	r1, [pc, #116]	; (8002bf0 <UartCmd_Upload_NonRegression_Debug_Report+0xcc>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002b7c:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002b80:	4628      	mov	r0, r5
 8002b82:	4f1e      	ldr	r7, [pc, #120]	; (8002bfc <UartCmd_Upload_NonRegression_Debug_Report+0xd8>)
 8002b84:	f002 fa16 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f012 fed0 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002b94:	b9d0      	cbnz	r0, 8002bcc <UartCmd_Upload_NonRegression_Debug_Report+0xa8>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002b96:	4620      	mov	r0, r4
 8002b98:	f013 f8fc 	bl	8015d94 <HAL_UART_GetState>
 8002b9c:	2820      	cmp	r0, #32
 8002b9e:	d1fa      	bne.n	8002b96 <UartCmd_Upload_NonRegression_Debug_Report+0x72>
    for(i=0;i<dma_xfer_num;i++)
 8002ba0:	4435      	add	r5, r6
 8002ba2:	42bd      	cmp	r5, r7
 8002ba4:	d1f0      	bne.n	8002b88 <UartCmd_Upload_NonRegression_Debug_Report+0x64>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002ba6:	f642 02b2 	movw	r2, #10418	; 0x28b2
 8002baa:	4914      	ldr	r1, [pc, #80]	; (8002bfc <UartCmd_Upload_NonRegression_Debug_Report+0xd8>)
 8002bac:	4620      	mov	r0, r4
 8002bae:	f012 fec1 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002bb2:	b9a8      	cbnz	r0, 8002be0 <UartCmd_Upload_NonRegression_Debug_Report+0xbc>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f013 f8ed 	bl	8015d94 <HAL_UART_GetState>
 8002bba:	2820      	cmp	r0, #32
 8002bbc:	d1fa      	bne.n	8002bb4 <UartCmd_Upload_NonRegression_Debug_Report+0x90>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002bbe:	220a      	movs	r2, #10
 8002bc0:	490f      	ldr	r1, [pc, #60]	; (8002c00 <UartCmd_Upload_NonRegression_Debug_Report+0xdc>)
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f012 ff08 	bl	80159d8 <HAL_UART_Receive_DMA>
 8002bc8:	b930      	cbnz	r0, 8002bd8 <UartCmd_Upload_NonRegression_Debug_Report+0xb4>
}
 8002bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Error_Handler();
 8002bcc:	f002 fa62 	bl	8005094 <Error_Handler>
 8002bd0:	e7e1      	b.n	8002b96 <UartCmd_Upload_NonRegression_Debug_Report+0x72>
 8002bd2:	f002 fa5f 	bl	8005094 <Error_Handler>
 8002bd6:	e7b9      	b.n	8002b4c <UartCmd_Upload_NonRegression_Debug_Report+0x28>
}
 8002bd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002bdc:	f002 ba5a 	b.w	8005094 <Error_Handler>
        Error_Handler();
 8002be0:	f002 fa58 	bl	8005094 <Error_Handler>
 8002be4:	e7e6      	b.n	8002bb4 <UartCmd_Upload_NonRegression_Debug_Report+0x90>
 8002be6:	f002 fa55 	bl	8005094 <Error_Handler>
 8002bea:	e7bf      	b.n	8002b6c <UartCmd_Upload_NonRegression_Debug_Report+0x48>
 8002bec:	d0cdd680 	.word	0xd0cdd680
 8002bf0:	000d28c0 	.word	0x000d28c0
 8002bf4:	d0dad673 	.word	0xd0dad673
 8002bf8:	d0daff40 	.word	0xd0daff40
 8002bfc:	d0e7ff33 	.word	0xd0e7ff33
 8002c00:	240076e0 	.word	0x240076e0

08002c04 <UartCmd_Read_Camera_Register>:
{
 8002c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c08:	460e      	mov	r6, r1
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 8002c0a:	7809      	ldrb	r1, [r1, #0]
{
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	4681      	mov	r9, r0
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 8002c10:	7875      	ldrb	r5, [r6, #1]
 8002c12:	1a6d      	subs	r5, r5, r1
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8002c14:	3501      	adds	r5, #1
 8002c16:	d017      	beq.n	8002c48 <UartCmd_Read_Camera_Register+0x44>
 8002c18:	2400      	movs	r4, #0
 8002c1a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8002c98 <UartCmd_Read_Camera_Register+0x94>
 8002c1e:	4f1c      	ldr	r7, [pc, #112]	; (8002c90 <UartCmd_Read_Camera_Register+0x8c>)
 8002c20:	e000      	b.n	8002c24 <UartCmd_Read_Camera_Register+0x20>
    ov9655_read_reg(&pObj->Ctx, *(data_buffer+i), &tmp, 1);
 8002c22:	5d31      	ldrb	r1, [r6, r4]
 8002c24:	f8d8 0000 	ldr.w	r0, [r8]
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f10d 0207 	add.w	r2, sp, #7
 8002c2e:	3018      	adds	r0, #24
 8002c30:	f006 fde0 	bl	80097f4 <ov9655_read_reg>
    Cam_Reg_Table[i]=tmp;
 8002c34:	f89d 2007 	ldrb.w	r2, [sp, #7]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8002c38:	1c63      	adds	r3, r4, #1
    Cam_Reg_Table[i]=tmp;
 8002c3a:	553a      	strb	r2, [r7, r4]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8002c3c:	b2dc      	uxtb	r4, r3
 8002c3e:	42ac      	cmp	r4, r5
 8002c40:	d3ef      	bcc.n	8002c22 <UartCmd_Read_Camera_Register+0x1e>
  if(TxDataTransferSize > TxDataBufSize)
 8002c42:	2de0      	cmp	r5, #224	; 0xe0
 8002c44:	d900      	bls.n	8002c48 <UartCmd_Read_Camera_Register+0x44>
    while(1);
 8002c46:	e7fe      	b.n	8002c46 <UartCmd_Read_Camera_Register+0x42>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002c48:	f209 593c 	addw	r9, r9, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	21e0      	movs	r1, #224	; 0xe0
 8002c50:	480f      	ldr	r0, [pc, #60]	; (8002c90 <UartCmd_Read_Camera_Register+0x8c>)
 8002c52:	f002 f9af 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002c56:	490e      	ldr	r1, [pc, #56]	; (8002c90 <UartCmd_Read_Camera_Register+0x8c>)
 8002c58:	b2aa      	uxth	r2, r5
 8002c5a:	4648      	mov	r0, r9
 8002c5c:	f012 fe6a 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002c60:	b990      	cbnz	r0, 8002c88 <UartCmd_Read_Camera_Register+0x84>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002c62:	4648      	mov	r0, r9
 8002c64:	f013 f896 	bl	8015d94 <HAL_UART_GetState>
 8002c68:	2820      	cmp	r0, #32
 8002c6a:	d1fa      	bne.n	8002c62 <UartCmd_Read_Camera_Register+0x5e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002c6c:	220a      	movs	r2, #10
 8002c6e:	4909      	ldr	r1, [pc, #36]	; (8002c94 <UartCmd_Read_Camera_Register+0x90>)
 8002c70:	4648      	mov	r0, r9
 8002c72:	f012 feb1 	bl	80159d8 <HAL_UART_Receive_DMA>
 8002c76:	b910      	cbnz	r0, 8002c7e <UartCmd_Read_Camera_Register+0x7a>
}
 8002c78:	b003      	add	sp, #12
 8002c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c7e:	b003      	add	sp, #12
 8002c80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    Error_Handler();
 8002c84:	f002 ba06 	b.w	8005094 <Error_Handler>
      Error_Handler();
 8002c88:	f002 fa04 	bl	8005094 <Error_Handler>
 8002c8c:	e7e9      	b.n	8002c62 <UartCmd_Read_Camera_Register+0x5e>
 8002c8e:	bf00      	nop
 8002c90:	24008300 	.word	0x24008300
 8002c94:	240076e0 	.word	0x240076e0
 8002c98:	24009d74 	.word	0x24009d74

08002c9c <UartCmd_Trigger_Capture>:
{
 8002c9c:	b538      	push	{r3, r4, r5, lr}
  if((Test_Context_Ptr->UartContext.uart_host_requested_mode==CAPTURE)&&(Test_Context_Ptr->UartContext.uart_host_requested_capture_delay==0))
 8002c9e:	f890 3524 	ldrb.w	r3, [r0, #1316]	; 0x524
{
 8002ca2:	4604      	mov	r4, r0
  if((Test_Context_Ptr->UartContext.uart_host_requested_mode==CAPTURE)&&(Test_Context_Ptr->UartContext.uart_host_requested_capture_delay==0))
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d108      	bne.n	8002cba <UartCmd_Trigger_Capture+0x1e>
 8002ca8:	f8d0 3530 	ldr.w	r3, [r0, #1328]	; 0x530
 8002cac:	b92b      	cbnz	r3, 8002cba <UartCmd_Trigger_Capture+0x1e>
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    Test_Context_Ptr->CaptureContext.capture_state = 1;
 8002cb4:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
}
 8002cb8:	bd38      	pop	{r3, r4, r5, pc}
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002cba:	4d14      	ldr	r5, [pc, #80]	; (8002d0c <UartCmd_Trigger_Capture+0x70>)
 8002cbc:	2304      	movs	r3, #4
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002cbe:	f204 543c 	addw	r4, r4, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	2180      	movs	r1, #128	; 0x80
 8002cc6:	4628      	mov	r0, r5
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002cc8:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002cca:	f002 f973 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f012 fe2e 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002cd8:	b978      	cbnz	r0, 8002cfa <UartCmd_Trigger_Capture+0x5e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f013 f85a 	bl	8015d94 <HAL_UART_GetState>
 8002ce0:	2820      	cmp	r0, #32
 8002ce2:	d1fa      	bne.n	8002cda <UartCmd_Trigger_Capture+0x3e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002ce4:	220a      	movs	r2, #10
 8002ce6:	490a      	ldr	r1, [pc, #40]	; (8002d10 <UartCmd_Trigger_Capture+0x74>)
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f012 fe75 	bl	80159d8 <HAL_UART_Receive_DMA>
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d0e2      	beq.n	8002cb8 <UartCmd_Trigger_Capture+0x1c>
}
 8002cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002cf6:	f002 b9cd 	b.w	8005094 <Error_Handler>
      Error_Handler();
 8002cfa:	f002 f9cb 	bl	8005094 <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f013 f848 	bl	8015d94 <HAL_UART_GetState>
 8002d04:	2820      	cmp	r0, #32
 8002d06:	d1e8      	bne.n	8002cda <UartCmd_Trigger_Capture+0x3e>
 8002d08:	e7ec      	b.n	8002ce4 <UartCmd_Trigger_Capture+0x48>
 8002d0a:	bf00      	nop
 8002d0c:	24007700 	.word	0x24007700
 8002d10:	240076e0 	.word	0x240076e0

08002d14 <UartCmd_Trigger_Dump>:
{
 8002d14:	b538      	push	{r3, r4, r5, lr}
  if(Test_Context_Ptr->UartContext.uart_host_requested_mode==DUMP)
 8002d16:	f890 3524 	ldrb.w	r3, [r0, #1316]	; 0x524
{
 8002d1a:	4604      	mov	r4, r0
  if(Test_Context_Ptr->UartContext.uart_host_requested_mode==DUMP)
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d10f      	bne.n	8002d40 <UartCmd_Trigger_Dump+0x2c>
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 8002d20:	8808      	ldrh	r0, [r1, #0]
      dump_output_buff[i]=0x00;
 8002d22:	2200      	movs	r2, #0
 8002d24:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <UartCmd_Trigger_Dump+0x74>)
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8002d26:	2101      	movs	r1, #1
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 8002d28:	f8c4 0528 	str.w	r0, [r4, #1320]	; 0x528
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8002d2c:	f8c4 1520 	str.w	r1, [r4, #1312]	; 0x520
    Test_Context_Ptr->DumpContext.dump_state = 1;
 8002d30:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
      dump_output_buff[i]=0x00;
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	609a      	str	r2, [r3, #8]
 8002d3a:	60da      	str	r2, [r3, #12]
 8002d3c:	611a      	str	r2, [r3, #16]
}
 8002d3e:	bd38      	pop	{r3, r4, r5, pc}
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002d40:	4d12      	ldr	r5, [pc, #72]	; (8002d8c <UartCmd_Trigger_Dump+0x78>)
 8002d42:	2304      	movs	r3, #4
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002d44:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d48:	2202      	movs	r2, #2
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	4628      	mov	r0, r5
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002d4e:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d50:	f002 f930 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002d54:	2201      	movs	r2, #1
 8002d56:	4629      	mov	r1, r5
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f012 fdeb 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002d5e:	b978      	cbnz	r0, 8002d80 <UartCmd_Trigger_Dump+0x6c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002d60:	4620      	mov	r0, r4
 8002d62:	f013 f817 	bl	8015d94 <HAL_UART_GetState>
 8002d66:	2820      	cmp	r0, #32
 8002d68:	d1fa      	bne.n	8002d60 <UartCmd_Trigger_Dump+0x4c>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002d6a:	220a      	movs	r2, #10
 8002d6c:	4908      	ldr	r1, [pc, #32]	; (8002d90 <UartCmd_Trigger_Dump+0x7c>)
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f012 fe32 	bl	80159d8 <HAL_UART_Receive_DMA>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d0e2      	beq.n	8002d3e <UartCmd_Trigger_Dump+0x2a>
}
 8002d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002d7c:	f002 b98a 	b.w	8005094 <Error_Handler>
      Error_Handler();
 8002d80:	f002 f988 	bl	8005094 <Error_Handler>
 8002d84:	e7ec      	b.n	8002d60 <UartCmd_Trigger_Dump+0x4c>
 8002d86:	bf00      	nop
 8002d88:	d0cdae80 	.word	0xd0cdae80
 8002d8c:	24007700 	.word	0x24007700
 8002d90:	240076e0 	.word	0x240076e0

08002d94 <UartCmd_Upload_Dump_Whole_Data>:
{
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((*(uint8_t*)(data_buffer))== 0x00)
 8002d96:	780b      	ldrb	r3, [r1, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d04f      	beq.n	8002e3c <UartCmd_Upload_Dump_Whole_Data+0xa8>
  else if((*(uint8_t*)(data_buffer))== 0x01)
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d01d      	beq.n	8002ddc <UartCmd_Upload_Dump_Whole_Data+0x48>
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002da0:	4d45      	ldr	r5, [pc, #276]	; (8002eb8 <UartCmd_Upload_Dump_Whole_Data+0x124>)
 8002da2:	2304      	movs	r3, #4
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002da4:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002da8:	2202      	movs	r2, #2
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	4628      	mov	r0, r5
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002dae:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002db0:	f002 f900 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002db4:	2201      	movs	r2, #1
 8002db6:	4629      	mov	r1, r5
 8002db8:	4620      	mov	r0, r4
 8002dba:	f012 fdbb 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d170      	bne.n	8002ea4 <UartCmd_Upload_Dump_Whole_Data+0x110>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f012 ffe6 	bl	8015d94 <HAL_UART_GetState>
 8002dc8:	2820      	cmp	r0, #32
 8002dca:	d1fa      	bne.n	8002dc2 <UartCmd_Upload_Dump_Whole_Data+0x2e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002dcc:	220a      	movs	r2, #10
 8002dce:	493b      	ldr	r1, [pc, #236]	; (8002ebc <UartCmd_Upload_Dump_Whole_Data+0x128>)
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f012 fe01 	bl	80159d8 <HAL_UART_Receive_DMA>
 8002dd6:	2800      	cmp	r0, #0
 8002dd8:	d15d      	bne.n	8002e96 <UartCmd_Upload_Dump_Whole_Data+0x102>
}
 8002dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002ddc:	4d38      	ldr	r5, [pc, #224]	; (8002ec0 <UartCmd_Upload_Dump_Whole_Data+0x12c>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002dde:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002de2:	2202      	movs	r2, #2
 8002de4:	4937      	ldr	r1, [pc, #220]	; (8002ec4 <UartCmd_Upload_Dump_Whole_Data+0x130>)
 8002de6:	4628      	mov	r0, r5
 8002de8:	4f37      	ldr	r7, [pc, #220]	; (8002ec8 <UartCmd_Upload_Dump_Whole_Data+0x134>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002dea:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002dee:	f002 f8e1 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df6:	4629      	mov	r1, r5
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f012 fd9b 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002dfe:	b9d0      	cbnz	r0, 8002e36 <UartCmd_Upload_Dump_Whole_Data+0xa2>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e00:	4620      	mov	r0, r4
 8002e02:	f012 ffc7 	bl	8015d94 <HAL_UART_GetState>
 8002e06:	2820      	cmp	r0, #32
 8002e08:	d1fa      	bne.n	8002e00 <UartCmd_Upload_Dump_Whole_Data+0x6c>
    for(i=0;i<dma_xfer_num;i++)
 8002e0a:	4435      	add	r5, r6
 8002e0c:	42af      	cmp	r7, r5
 8002e0e:	d1f0      	bne.n	8002df2 <UartCmd_Upload_Dump_Whole_Data+0x5e>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002e10:	f642 02b2 	movw	r2, #10418	; 0x28b2
 8002e14:	492c      	ldr	r1, [pc, #176]	; (8002ec8 <UartCmd_Upload_Dump_Whole_Data+0x134>)
 8002e16:	4620      	mov	r0, r4
 8002e18:	f012 fd8c 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d144      	bne.n	8002eaa <UartCmd_Upload_Dump_Whole_Data+0x116>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e20:	4620      	mov	r0, r4
 8002e22:	f012 ffb7 	bl	8015d94 <HAL_UART_GetState>
 8002e26:	2820      	cmp	r0, #32
 8002e28:	d0d0      	beq.n	8002dcc <UartCmd_Upload_Dump_Whole_Data+0x38>
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f012 ffb2 	bl	8015d94 <HAL_UART_GetState>
 8002e30:	2820      	cmp	r0, #32
 8002e32:	d1f5      	bne.n	8002e20 <UartCmd_Upload_Dump_Whole_Data+0x8c>
 8002e34:	e7ca      	b.n	8002dcc <UartCmd_Upload_Dump_Whole_Data+0x38>
        Error_Handler();
 8002e36:	f002 f92d 	bl	8005094 <Error_Handler>
 8002e3a:	e7e1      	b.n	8002e00 <UartCmd_Upload_Dump_Whole_Data+0x6c>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e3c:	4d23      	ldr	r5, [pc, #140]	; (8002ecc <UartCmd_Upload_Dump_Whole_Data+0x138>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e3e:	f200 543c 	addw	r4, r0, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e42:	2202      	movs	r2, #2
 8002e44:	491f      	ldr	r1, [pc, #124]	; (8002ec4 <UartCmd_Upload_Dump_Whole_Data+0x130>)
 8002e46:	4628      	mov	r0, r5
 8002e48:	4f21      	ldr	r7, [pc, #132]	; (8002ed0 <UartCmd_Upload_Dump_Whole_Data+0x13c>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e4a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e4e:	f002 f8b1 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e56:	4629      	mov	r1, r5
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f012 fd6b 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002e5e:	b9f0      	cbnz	r0, 8002e9e <UartCmd_Upload_Dump_Whole_Data+0x10a>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e60:	4620      	mov	r0, r4
 8002e62:	f012 ff97 	bl	8015d94 <HAL_UART_GetState>
 8002e66:	2820      	cmp	r0, #32
 8002e68:	d1fa      	bne.n	8002e60 <UartCmd_Upload_Dump_Whole_Data+0xcc>
    for(i=0;i<dma_xfer_num;i++)
 8002e6a:	4435      	add	r5, r6
 8002e6c:	42bd      	cmp	r5, r7
 8002e6e:	d1f0      	bne.n	8002e52 <UartCmd_Upload_Dump_Whole_Data+0xbe>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002e70:	f642 02b2 	movw	r2, #10418	; 0x28b2
 8002e74:	4916      	ldr	r1, [pc, #88]	; (8002ed0 <UartCmd_Upload_Dump_Whole_Data+0x13c>)
 8002e76:	4620      	mov	r0, r4
 8002e78:	f012 fd5c 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002e7c:	b9c0      	cbnz	r0, 8002eb0 <UartCmd_Upload_Dump_Whole_Data+0x11c>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e7e:	4620      	mov	r0, r4
 8002e80:	f012 ff88 	bl	8015d94 <HAL_UART_GetState>
 8002e84:	2820      	cmp	r0, #32
 8002e86:	d1fa      	bne.n	8002e7e <UartCmd_Upload_Dump_Whole_Data+0xea>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002e88:	220a      	movs	r2, #10
 8002e8a:	490c      	ldr	r1, [pc, #48]	; (8002ebc <UartCmd_Upload_Dump_Whole_Data+0x128>)
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f012 fda3 	bl	80159d8 <HAL_UART_Receive_DMA>
 8002e92:	2800      	cmp	r0, #0
 8002e94:	d0a1      	beq.n	8002dda <UartCmd_Upload_Dump_Whole_Data+0x46>
}
 8002e96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002e9a:	f002 b8fb 	b.w	8005094 <Error_Handler>
        Error_Handler();
 8002e9e:	f002 f8f9 	bl	8005094 <Error_Handler>
 8002ea2:	e7dd      	b.n	8002e60 <UartCmd_Upload_Dump_Whole_Data+0xcc>
      Error_Handler();
 8002ea4:	f002 f8f6 	bl	8005094 <Error_Handler>
 8002ea8:	e78b      	b.n	8002dc2 <UartCmd_Upload_Dump_Whole_Data+0x2e>
        Error_Handler();
 8002eaa:	f002 f8f3 	bl	8005094 <Error_Handler>
 8002eae:	e7b7      	b.n	8002e20 <UartCmd_Upload_Dump_Whole_Data+0x8c>
 8002eb0:	f002 f8f0 	bl	8005094 <Error_Handler>
 8002eb4:	e7e3      	b.n	8002e7e <UartCmd_Upload_Dump_Whole_Data+0xea>
 8002eb6:	bf00      	nop
 8002eb8:	24007700 	.word	0x24007700
 8002ebc:	240076e0 	.word	0x240076e0
 8002ec0:	d0daff40 	.word	0xd0daff40
 8002ec4:	000d28c0 	.word	0x000d28c0
 8002ec8:	d0e7ff33 	.word	0xd0e7ff33
 8002ecc:	d0cdd680 	.word	0xd0cdd680
 8002ed0:	d0dad673 	.word	0xd0dad673
 8002ed4:	00000000 	.word	0x00000000

08002ed8 <TEST_Init>:
 * @param TestContext_Ptr pointer to test context
 */
static void Test_Context_Init(TestContext_TypeDef *Test_Context_Ptr)
{
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002ed8:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8003028 <TEST_Init+0x150>
 * @brief Test Init
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_Init(TestContext_TypeDef *Test_Context_Ptr)
{
 8002edc:	b5f0      	push	{r4, r5, r6, r7, lr}
  Test_Context_Ptr->DumpContext.dump_state = 0;
 8002ede:	2200      	movs	r2, #0
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002ee0:	2101      	movs	r1, #1
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002ee2:	2400      	movs	r4, #0
 8002ee4:	2500      	movs	r5, #0
  Test_Context_Ptr->ValidationContext.validation_completed=0;
 8002ee6:	f8c0 2440 	str.w	r2, [r0, #1088]	; 0x440
{
 8002eea:	4603      	mov	r3, r0
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002eec:	7101      	strb	r1, [r0, #4]
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002eee:	f500 6e8a 	add.w	lr, r0, #1104	; 0x450
  Test_Context_Ptr->ValidationContext.nbr_tested = 1;
 8002ef2:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002ef6:	f500 6c8c 	add.w	ip, r0, #1120	; 0x460
  Test_Context_Ptr->DumpContext.dump_state = 0;
 8002efa:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002efe:	f500 668e 	add.w	r6, r0, #1136	; 0x470
  Test_Context_Ptr->CaptureContext.capture_frame_count=0;
 8002f02:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
  Test_Context_Ptr->CaptureContext.capture_file_format=RAW;
 8002f06:	2703      	movs	r7, #3
{
 8002f08:	b091      	sub	sp, #68	; 0x44
  Test_Context_Ptr->CaptureContext.capture_state=0;
 8002f0a:	ed80 7b30 	vstr	d7, [r0, #192]	; 0xc0
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002f0e:	e9c0 4544 	strd	r4, r5, [r0, #272]	; 0x110
  Test_Context_Ptr->ValidationContext.avg_loss = 0.0;
 8002f12:	e9c0 4546 	strd	r4, r5, [r0, #280]	; 0x118
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002f16:	ed80 7b02 	vstr	d7, [r0, #8]
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002f1a:	f500 6490 	add.w	r4, r0, #1152	; 0x480
 8002f1e:	f500 6092 	add.w	r0, r0, #1168	; 0x490
  Test_Context_Ptr->CaptureContext.capture_file_format=RAW;
 8002f22:	f883 70bc 	strb.w	r7, [r3, #188]	; 0xbc
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002f26:	f203 553c 	addw	r5, r3, #1340	; 0x53c
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002f2a:	ed0e 7b02 	vstr	d7, [lr, #-8]
 8002f2e:	ed8e 7b00 	vstr	d7, [lr]
 8002f32:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8002f36:	ed8c 7b00 	vstr	d7, [ip]
 8002f3a:	ed06 7b02 	vstr	d7, [r6, #-8]
 8002f3e:	ed86 7b00 	vstr	d7, [r6]
 8002f42:	ed04 7b02 	vstr	d7, [r4, #-8]
 8002f46:	ed84 7b00 	vstr	d7, [r4]
 8002f4a:	ed00 7b02 	vstr	d7, [r0, #-8]
 8002f4e:	ed80 7b00 	vstr	d7, [r0]
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002f52:	4837      	ldr	r0, [pc, #220]	; (8003030 <TEST_Init+0x158>)
  Test_Context_Ptr->UartContext.uart_host_requested_mode = NOMINAL;
 8002f54:	f883 1524 	strb.w	r1, [r3, #1316]	; 0x524
  Test_Context_Ptr->UartContext.UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002f58:	210c      	movs	r1, #12
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002f5a:	f8c3 053c 	str.w	r0, [r3, #1340]	; 0x53c
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002f5e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002f62:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002f66:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002f6a:	4628      	mov	r0, r5
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002f6c:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
 8002f70:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0
 8002f74:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
 8002f78:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
  Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;
 8002f7c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
  Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8002f80:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
  Test_Context_Ptr->UartContext.UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002f84:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
  Test_Context_Ptr->UartContext.UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002f88:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
  Test_Context_Ptr->UartContext.UartHandle.Init.Parity     = UART_PARITY_NONE;
 8002f8c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
  Test_Context_Ptr->UartContext.UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002f90:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554
  Test_Context_Ptr->UartContext.UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002f94:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
  Test_Context_Ptr->UartContext.UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f98:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
  Test_Context_Ptr->UartContext.UartHandle.Init.ClockPrescaler  = UART_PRESCALER_DIV1;
 8002f9c:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
  Test_Context_Ptr->UartContext.UartHandle.Init.OneBitSampling  = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fa0:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002fa4:	f013 fa56 	bl	8016454 <HAL_UART_Init>
 8002fa8:	bb98      	cbnz	r0, 8003012 <TEST_Init+0x13a>
  char alive_msg[64]="Board ON & UART link OK \n";
 8002faa:	4e22      	ldr	r6, [pc, #136]	; (8003034 <TEST_Init+0x15c>)
 8002fac:	46ec      	mov	ip, sp
  strcpy((char*)aTxBuffer, alive_msg);
 8002fae:	4c22      	ldr	r4, [pc, #136]	; (8003038 <TEST_Init+0x160>)
  char alive_msg[64]="Board ON & UART link OK \n";
 8002fb0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002fb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002fb6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002fba:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	f8ac 2000 	strh.w	r2, [ip]
 8002fc4:	f10d 001a 	add.w	r0, sp, #26
 8002fc8:	2226      	movs	r2, #38	; 0x26
 8002fca:	f022 fbd1 	bl	8025770 <memset>
  strcpy((char*)aTxBuffer, alive_msg);
 8002fce:	46ec      	mov	ip, sp
 8002fd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fd6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002fda:	c403      	stmia	r4!, {r0, r1}
 8002fdc:	4620      	mov	r0, r4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002fde:	2180      	movs	r1, #128	; 0x80
  strcpy((char*)aTxBuffer, alive_msg);
 8002fe0:	f820 2918 	strh.w	r2, [r0], #-24
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	f001 ffe5 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002fea:	2219      	movs	r2, #25
 8002fec:	f1a4 0118 	sub.w	r1, r4, #24
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	f012 fc9f 	bl	8015934 <HAL_UART_Transmit_DMA>
 8002ff6:	b9a0      	cbnz	r0, 8003022 <TEST_Init+0x14a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f012 fecb 	bl	8015d94 <HAL_UART_GetState>
 8002ffe:	2820      	cmp	r0, #32
 8003000:	d1fa      	bne.n	8002ff8 <TEST_Init+0x120>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8003002:	220a      	movs	r2, #10
 8003004:	490d      	ldr	r1, [pc, #52]	; (800303c <TEST_Init+0x164>)
 8003006:	4628      	mov	r0, r5
 8003008:	f012 fce6 	bl	80159d8 <HAL_UART_Receive_DMA>
 800300c:	b920      	cbnz	r0, 8003018 <TEST_Init+0x140>
  Test_Context_Init(Test_Context_Ptr);

#ifndef OBJECTDETECT
  Test_ComIf_Init(Test_Context_Ptr);
#endif /* !OBJECTDETECT */
}
 800300e:	b011      	add	sp, #68	; 0x44
 8003010:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8003012:	f002 f83f 	bl	8005094 <Error_Handler>
 8003016:	e7c8      	b.n	8002faa <TEST_Init+0xd2>
}
 8003018:	b011      	add	sp, #68	; 0x44
 800301a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    Error_Handler();
 800301e:	f002 b839 	b.w	8005094 <Error_Handler>
      Error_Handler();
 8003022:	f002 f837 	bl	8005094 <Error_Handler>
 8003026:	e7e7      	b.n	8002ff8 <TEST_Init+0x120>
	...
 8003030:	40011000 	.word	0x40011000
 8003034:	08028bc0 	.word	0x08028bc0
 8003038:	24007700 	.word	0x24007700
 800303c:	240076e0 	.word	0x240076e0

08003040 <TEST_CmdIf_Check>:
 * @brief Check UART status for any received frame
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_CmdIf_Check(TestContext_TypeDef *Test_Context_Ptr)
{
 8003040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8003044:	f200 553c 	addw	r5, r0, #1340	; 0x53c
{
 8003048:	4604      	mov	r4, r0
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 800304a:	4628      	mov	r0, r5
 800304c:	f012 fea2 	bl	8015d94 <HAL_UART_GetState>
 8003050:	2820      	cmp	r0, #32
 8003052:	d001      	beq.n	8003058 <TEST_CmdIf_Check+0x18>

      /**Configure the UART in reception mode for receiving subsequent command from Host**/
      Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
    }
  }
}
 8003054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8003058:	f8d4 6520 	ldr.w	r6, [r4, #1312]	; 0x520
 800305c:	2e00      	cmp	r6, #0
 800305e:	d1f9      	bne.n	8003054 <TEST_CmdIf_Check+0x14>
    UTILS_DCache_Coherency_Maintenance((void *)aRxBuffer, RX_BUFFER_SIZE, INVALIDATE);
 8003060:	4f26      	ldr	r7, [pc, #152]	; (80030fc <TEST_CmdIf_Check+0xbc>)
 8003062:	4601      	mov	r1, r0
 8003064:	2201      	movs	r2, #1
 8003066:	4638      	mov	r0, r7
 8003068:	f001 ffa4 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(aRxBuffer[0]< UART_CMD_NUMBER)
 800306c:	783b      	ldrb	r3, [r7, #0]
 800306e:	2b18      	cmp	r3, #24
 8003070:	d81f      	bhi.n	80030b2 <TEST_CmdIf_Check+0x72>
      *(aTxBuffer) = CMD_ACK_EVT;
 8003072:	4823      	ldr	r0, [pc, #140]	; (8003100 <TEST_CmdIf_Check+0xc0>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003074:	2202      	movs	r2, #2
 8003076:	2180      	movs	r1, #128	; 0x80
      *(aTxBuffer) = CMD_ACK_EVT;
 8003078:	7006      	strb	r6, [r0, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800307a:	f001 ff9b 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800307e:	4820      	ldr	r0, [pc, #128]	; (8003100 <TEST_CmdIf_Check+0xc0>)
 8003080:	2201      	movs	r2, #1
 8003082:	4601      	mov	r1, r0
 8003084:	4628      	mov	r0, r5
 8003086:	f012 fc55 	bl	8015934 <HAL_UART_Transmit_DMA>
 800308a:	bb98      	cbnz	r0, 80030f4 <TEST_CmdIf_Check+0xb4>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800308c:	4628      	mov	r0, r5
 800308e:	f012 fe81 	bl	8015d94 <HAL_UART_GetState>
 8003092:	2820      	cmp	r0, #32
 8003094:	d1fa      	bne.n	800308c <TEST_CmdIf_Check+0x4c>
      HAL_Delay(500);
 8003096:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800309a:	f00a fcc3 	bl	800da24 <HAL_Delay>
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 800309e:	783d      	ldrb	r5, [r7, #0]
 80030a0:	4b18      	ldr	r3, [pc, #96]	; (8003104 <TEST_CmdIf_Check+0xc4>)
 80030a2:	4620      	mov	r0, r4
 80030a4:	2200      	movs	r2, #0
 80030a6:	4918      	ldr	r1, [pc, #96]	; (8003108 <TEST_CmdIf_Check+0xc8>)
 80030a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
}
 80030ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 80030b0:	4718      	bx	r3
      *(aTxBuffer) = CMD_NACK_EVT;
 80030b2:	4c13      	ldr	r4, [pc, #76]	; (8003100 <TEST_CmdIf_Check+0xc0>)
 80030b4:	2601      	movs	r6, #1
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80030b6:	2202      	movs	r2, #2
 80030b8:	2180      	movs	r1, #128	; 0x80
 80030ba:	4620      	mov	r0, r4
      *(aTxBuffer) = CMD_NACK_EVT;
 80030bc:	7026      	strb	r6, [r4, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80030be:	f001 ff79 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80030c2:	4632      	mov	r2, r6
 80030c4:	4621      	mov	r1, r4
 80030c6:	4628      	mov	r0, r5
 80030c8:	f012 fc34 	bl	8015934 <HAL_UART_Transmit_DMA>
 80030cc:	b978      	cbnz	r0, 80030ee <TEST_CmdIf_Check+0xae>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80030ce:	4628      	mov	r0, r5
 80030d0:	f012 fe60 	bl	8015d94 <HAL_UART_GetState>
 80030d4:	2820      	cmp	r0, #32
 80030d6:	d1fa      	bne.n	80030ce <TEST_CmdIf_Check+0x8e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80030d8:	220a      	movs	r2, #10
 80030da:	4908      	ldr	r1, [pc, #32]	; (80030fc <TEST_CmdIf_Check+0xbc>)
 80030dc:	4628      	mov	r0, r5
 80030de:	f012 fc7b 	bl	80159d8 <HAL_UART_Receive_DMA>
 80030e2:	2800      	cmp	r0, #0
 80030e4:	d0b6      	beq.n	8003054 <TEST_CmdIf_Check+0x14>
}
 80030e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Error_Handler();
 80030ea:	f001 bfd3 	b.w	8005094 <Error_Handler>
      Error_Handler();
 80030ee:	f001 ffd1 	bl	8005094 <Error_Handler>
 80030f2:	e7ec      	b.n	80030ce <TEST_CmdIf_Check+0x8e>
 80030f4:	f001 ffce 	bl	8005094 <Error_Handler>
 80030f8:	e7c8      	b.n	800308c <TEST_CmdIf_Check+0x4c>
 80030fa:	bf00      	nop
 80030fc:	240076e0 	.word	0x240076e0
 8003100:	24007700 	.word	0x24007700
 8003104:	0802942c 	.word	0x0802942c
 8003108:	240076e1 	.word	0x240076e1

0800310c <TEST_MainMenu>:
 *        - Camera Capture
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_MainMenu(TestContext_TypeDef *Test_Context_Ptr)
{
 800310c:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800310e:	f04f 35ff 	mov.w	r5, #4294967295
{
 8003112:	b082      	sub	sp, #8
 8003114:	4604      	mov	r4, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003116:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 800311a:	f8d4 65fc 	ldr.w	r6, [r4, #1532]	; 0x5fc
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800311e:	f019 fcb5 	bl	801ca8c <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8003122:	2332      	movs	r3, #50	; 0x32
 8003124:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003128:	210a      	movs	r1, #10
 800312a:	20c8      	movs	r0, #200	; 0xc8
 800312c:	9500      	str	r5, [sp, #0]
 800312e:	f019 fe7f 	bl	801ce30 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Operating mode", CENTER_MODE);
 8003132:	f019 fca3 	bl	801ca7c <UTIL_LCD_GetFont>
 8003136:	2301      	movs	r3, #1
 8003138:	88c1      	ldrh	r1, [r0, #6]
 800313a:	2000      	movs	r0, #0
 800313c:	4a6f      	ldr	r2, [pc, #444]	; (80032fc <TEST_MainMenu+0x1f0>)
 800313e:	f019 fd95 	bl	801cc6c <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 8003142:	f019 fc9b 	bl	801ca7c <UTIL_LCD_GetFont>
 8003146:	88c1      	ldrh	r1, [r0, #6]
 8003148:	2301      	movs	r3, #1
 800314a:	4a6d      	ldr	r2, [pc, #436]	; (8003300 <TEST_MainMenu+0x1f4>)
 800314c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003150:	2000      	movs	r0, #0
 8003152:	f019 fd8b 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select an operating mode", CENTER_MODE);
 8003156:	f019 fc91 	bl	801ca7c <UTIL_LCD_GetFont>
 800315a:	88c1      	ldrh	r1, [r0, #6]
 800315c:	2301      	movs	r3, #1
 800315e:	4a69      	ldr	r2, [pc, #420]	; (8003304 <TEST_MainMenu+0x1f8>)
 8003160:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003164:	2000      	movs	r0, #0
 8003166:	4099      	lsls	r1, r3
 8003168:	f019 fd80 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    uint16_t y;
  };
  const struct point_t pt_center = {.x = 400, .y = 350}; /* x,y coordinates */
  const uint16_t pt_offset = 50;                         /* pixels offset from the center (wideness of the square) */

  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 800316c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003170:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003174:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003178:	4608      	mov	r0, r1
 800317a:	9500      	str	r5, [sp, #0]
 800317c:	f019 fdca 	bl	801cd14 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8003180:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003184:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8003188:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800318c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003190:	9500      	str	r5, [sp, #0]
 8003192:	f019 fdbf 	bl	801cd14 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8003196:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800319a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800319e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80031a2:	461a      	mov	r2, r3
 80031a4:	9500      	str	r5, [sp, #0]
 80031a6:	f019 fdb5 	bl	801cd14 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 80031aa:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80031ae:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80031b2:	9500      	str	r5, [sp, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	4608      	mov	r0, r1
 80031b8:	f019 fdac 	bl	801cd14 <UTIL_LCD_DrawLine>

  const char *appli_names[] = {"Nominal Run", "Frame Capture", "OnBoard Validation",
                                   "Memory Dump"};

  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 80031bc:	f019 fc5e 	bl	801ca7c <UTIL_LCD_GetFont>
 80031c0:	2301      	movs	r3, #1
 80031c2:	88c1      	ldrh	r1, [r0, #6]
 80031c4:	2000      	movs	r0, #0
 80031c6:	4a50      	ldr	r2, [pc, #320]	; (8003308 <TEST_MainMenu+0x1fc>)
 80031c8:	4099      	lsls	r1, r3
 80031ca:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 80031ce:	f019 fd4d 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 80031d2:	f019 fc53 	bl	801ca7c <UTIL_LCD_GetFont>
 80031d6:	88c1      	ldrh	r1, [r0, #6]
 80031d8:	2303      	movs	r3, #3
 80031da:	4a4c      	ldr	r2, [pc, #304]	; (800330c <TEST_MainMenu+0x200>)
 80031dc:	1049      	asrs	r1, r1, #1
 80031de:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 80031e2:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 80031e6:	f019 fd41 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[2], CENTER_MODE);//DOWN
 80031ea:	f019 fc47 	bl	801ca7c <UTIL_LCD_GetFont>
 80031ee:	88c1      	ldrh	r1, [r0, #6]
 80031f0:	2301      	movs	r3, #1
 80031f2:	4a47      	ldr	r2, [pc, #284]	; (8003310 <TEST_MainMenu+0x204>)
 80031f4:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 80031f8:	2000      	movs	r0, #0
 80031fa:	f019 fd37 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(150, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[3], LEFT_MODE);//LEFT
 80031fe:	f019 fc3d 	bl	801ca7c <UTIL_LCD_GetFont>
 8003202:	88c1      	ldrh	r1, [r0, #6]
 8003204:	2303      	movs	r3, #3
 8003206:	4a43      	ldr	r2, [pc, #268]	; (8003314 <TEST_MainMenu+0x208>)
 8003208:	1049      	asrs	r1, r1, #1
 800320a:	2096      	movs	r0, #150	; 0x96
 800320c:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8003210:	f019 fd2c 	bl	801cc6c <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003214:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8003216:	f7fe fd05 	bl	8001c24 <DISPLAY_Refresh>

  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 800321a:	f8d4 3520 	ldr.w	r3, [r4, #1312]	; 0x520
 800321e:	b143      	cbz	r3, 8003232 <TEST_MainMenu+0x126>
  {
    switch (Test_Context_Ptr->UartContext.uart_host_requested_mode)
 8003220:	f894 3524 	ldrb.w	r3, [r4, #1316]	; 0x524
 8003224:	442b      	add	r3, r5
 8003226:	2b03      	cmp	r3, #3
 8003228:	d827      	bhi.n	800327a <TEST_MainMenu+0x16e>
 800322a:	e8df f003 	tbb	[pc, r3]
 800322e:	2f21      	.short	0x2f21
 8003230:	2839      	.short	0x2839
  else
  {
    JOYPin_TypeDef joy_state = JOY_NONE;
    while (joy_state == JOY_NONE)
    {
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8003232:	2100      	movs	r1, #0
 8003234:	4608      	mov	r0, r1
 8003236:	f007 fe63 	bl	800af00 <BSP_JOY_GetState>
    while (joy_state == JOY_NONE)
 800323a:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 800323e:	d0f8      	beq.n	8003232 <TEST_MainMenu+0x126>
    }

    switch (joy_state)
 8003240:	3b02      	subs	r3, #2
 8003242:	2b0e      	cmp	r3, #14
 8003244:	d80e      	bhi.n	8003264 <TEST_MainMenu+0x158>
 8003246:	e8df f003 	tbb	[pc, r3]
 800324a:	0d43      	.short	0x0d43
 800324c:	0d0d0d37 	.word	0x0d0d0d37
 8003250:	0d0d0d08 	.word	0x0d0d0d08
 8003254:	0d0d0d0d 	.word	0x0d0d0d0d
 8003258:	51          	.byte	0x51
 8003259:	00          	.byte	0x00
    {
    case JOY_RIGHT:
      FrameCaptureInit(Test_Context_Ptr);
 800325a:	4620      	mov	r0, r4
 800325c:	f7fe fe40 	bl	8001ee0 <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 8003260:	2304      	movs	r3, #4
 8003262:	7033      	strb	r3, [r6, #0]
    default:
      break;
    };

    //Tempo joystick
    HAL_Delay(200);
 8003264:	20c8      	movs	r0, #200	; 0xc8
  }
}
 8003266:	b002      	add	sp, #8
 8003268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 800326c:	f00a bbda 	b.w	800da24 <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8003270:	2201      	movs	r2, #1
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 8003272:	2300      	movs	r3, #0
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8003274:	7032      	strb	r2, [r6, #0]
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 8003276:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
}
 800327a:	b002      	add	sp, #8
 800327c:	bd70      	pop	{r4, r5, r6, pc}
      FrameCaptureInit(Test_Context_Ptr);
 800327e:	4620      	mov	r0, r4
 8003280:	f7fe fe2e 	bl	8001ee0 <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 8003284:	2304      	movs	r3, #4
 8003286:	7033      	strb	r3, [r6, #0]
}
 8003288:	b002      	add	sp, #8
 800328a:	bd70      	pop	{r4, r5, r6, pc}
      OnBoardValidInit(Test_Context_Ptr);
 800328c:	4620      	mov	r0, r4
 800328e:	f7ff f89b 	bl	80023c8 <OnBoardValidInit>
      App_Cxt_Ptr->Operating_Mode=VALID;
 8003292:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003294:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003296:	2201      	movs	r2, #1
      App_Cxt_Ptr->Operating_Mode=VALID;
 8003298:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 800329a:	751a      	strb	r2, [r3, #20]
}
 800329c:	b002      	add	sp, #8
 800329e:	bd70      	pop	{r4, r5, r6, pc}
      MemoryDumpInit(Test_Context_Ptr);
 80032a0:	4620      	mov	r0, r4
 80032a2:	f7fe ff1d 	bl	80020e0 <MemoryDumpInit>
      App_Cxt_Ptr->Operating_Mode=DUMP;
 80032a6:	2303      	movs	r3, #3
 80032a8:	7033      	strb	r3, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 80032aa:	7923      	ldrb	r3, [r4, #4]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d1e4      	bne.n	800327a <TEST_MainMenu+0x16e>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80032b0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80032b2:	2201      	movs	r2, #1
 80032b4:	751a      	strb	r2, [r3, #20]
 80032b6:	e7e0      	b.n	800327a <TEST_MainMenu+0x16e>
      MemoryDumpInit(Test_Context_Ptr);
 80032b8:	4620      	mov	r0, r4
 80032ba:	f7fe ff11 	bl	80020e0 <MemoryDumpInit>
      App_Cxt_Ptr->Operating_Mode=DUMP;
 80032be:	2303      	movs	r3, #3
 80032c0:	7033      	strb	r3, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 80032c2:	7923      	ldrb	r3, [r4, #4]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d1cd      	bne.n	8003264 <TEST_MainMenu+0x158>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80032c8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80032ca:	2201      	movs	r2, #1
 80032cc:	751a      	strb	r2, [r3, #20]
 80032ce:	e7c9      	b.n	8003264 <TEST_MainMenu+0x158>
      OnBoardValidInit(Test_Context_Ptr);
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7ff f879 	bl	80023c8 <OnBoardValidInit>
      App_Cxt_Ptr->Operating_Mode=VALID;
 80032d6:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80032d8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80032da:	2201      	movs	r2, #1
    HAL_Delay(200);
 80032dc:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=VALID;
 80032de:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 80032e0:	751a      	strb	r2, [r3, #20]
}
 80032e2:	b002      	add	sp, #8
 80032e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 80032e8:	f00a bb9c 	b.w	800da24 <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80032ec:	2301      	movs	r3, #1
    HAL_Delay(200);
 80032ee:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80032f0:	7033      	strb	r3, [r6, #0]
}
 80032f2:	b002      	add	sp, #8
 80032f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 80032f8:	f00a bb94 	b.w	800da24 <HAL_Delay>
 80032fc:	080290f8 	.word	0x080290f8
 8003300:	08028d9c 	.word	0x08028d9c
 8003304:	08029108 	.word	0x08029108
 8003308:	08028d20 	.word	0x08028d20
 800330c:	08028d2c 	.word	0x08028d2c
 8003310:	08028d3c 	.word	0x08028d3c
 8003314:	08028d50 	.word	0x08028d50

08003318 <TEST_GetNextDumpInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextDumpInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 8003318:	b570      	push	{r4, r5, r6, lr}
  DIR class_dir;
  FILINFO img_fno;
#if CAMERA_CAPTURE_RES == VGA_640_480_RES
  char  class_path[64]=  "/dump_src_image_vga";
 800331a:	4c1c      	ldr	r4, [pc, #112]	; (800338c <TEST_GetNextDumpInput+0x74>)
{
 800331c:	b0e4      	sub	sp, #400	; 0x190
 800331e:	4605      	mov	r5, r0
 8003320:	460e      	mov	r6, r1
  char  class_path[64]=  "/dump_src_image_vga";
 8003322:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8003326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003328:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	222c      	movs	r2, #44	; 0x2c
 8003330:	2100      	movs	r1, #0
 8003332:	a813      	add	r0, sp, #76	; 0x4c
 8003334:	f8cc 3000 	str.w	r3, [ip]
 8003338:	f022 fa1a 	bl	8025770 <memset>
#endif
  stm32fs_err_t err;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;


  STM32Fs_OpenDir(class_path, &class_dir);
 800333c:	a901      	add	r1, sp, #4
 800333e:	a80e      	add	r0, sp, #56	; 0x38
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003340:	f8d5 45fc 	ldr.w	r4, [r5, #1532]	; 0x5fc
  STM32Fs_OpenDir(class_path, &class_dir);
 8003344:	f018 fd9c 	bl	801be80 <STM32Fs_OpenDir>

  /* For each image in this directory (i.e class) */
  if(STM32Fs_GetNextFile(&class_dir, &img_fno) != STM32FS_ERROR_NONE)
 8003348:	a91e      	add	r1, sp, #120	; 0x78
 800334a:	a801      	add	r0, sp, #4
 800334c:	f018 fdba 	bl	801bec4 <STM32Fs_GetNextFile>
 8003350:	b100      	cbz	r0, 8003354 <TEST_GetNextDumpInput+0x3c>
    while(1);
 8003352:	e7fe      	b.n	8003352 <TEST_GetNextDumpInput+0x3a>

  strcpy(tmp_msg, class_path);
 8003354:	4d0e      	ldr	r5, [pc, #56]	; (8003390 <TEST_GetNextDumpInput+0x78>)
 8003356:	a90e      	add	r1, sp, #56	; 0x38
 8003358:	4628      	mov	r0, r5
 800335a:	f022 ff63 	bl	8026224 <stpcpy>
  strcat(tmp_msg, "/");
 800335e:	232f      	movs	r3, #47	; 0x2f
  strcat(tmp_msg, img_fno.fname);
 8003360:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8003364:	3001      	adds	r0, #1
  strcat(tmp_msg, "/");
 8003366:	f800 3c01 	strb.w	r3, [r0, #-1]
  strcat(tmp_msg, img_fno.fname);
 800336a:	f022 ff64 	bl	8026236 <strcpy>

  /* Read the image to DestBuffPtr */
  err = STM23Fs_ReadImageBMP(tmp_msg, DestBuffPtr);
 800336e:	4631      	mov	r1, r6
 8003370:	4628      	mov	r0, r5
 8003372:	f019 f981 	bl	801c678 <STM23Fs_ReadImageBMP>
  if (err != STM32FS_ERROR_NONE)
 8003376:	b100      	cbz	r0, 800337a <TEST_GetNextDumpInput+0x62>
  {
    while(1);
 8003378:	e7fe      	b.n	8003378 <TEST_GetNextDumpInput+0x60>
  }

  f_closedir(&class_dir);
 800337a:	a801      	add	r0, sp, #4
 800337c:	f017 fc2c 	bl	801abd8 <f_closedir>

  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 8003380:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003382:	2201      	movs	r2, #1
 8003384:	751a      	strb	r2, [r3, #20]
}
 8003386:	b064      	add	sp, #400	; 0x190
 8003388:	bd70      	pop	{r4, r5, r6, pc}
 800338a:	bf00      	nop
 800338c:	08028b80 	.word	0x08028b80
 8003390:	240089e0 	.word	0x240089e0
 8003394:	00000000 	.word	0x00000000

08003398 <TEST_GetNextValidationInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextValidationInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 8003398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DestBuffPtr = App_Cxt_Ptr->Camera_ContextPtr->camera_capture_buffer;
#endif
#endif /* OBJECTDETECT */

  /* Get next image in this directory (i.e class) */
  if(STM32Fs_GetNextFile(&TestContext_Ptr->ValidationContext.class_dir, &TestContext_Ptr->ValidationContext.img_fno) == STM32FS_ERROR_NONE)
 800339c:	f500 7829 	add.w	r8, r0, #676	; 0x2a4
 80033a0:	f500 771c 	add.w	r7, r0, #624	; 0x270
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80033a4:	f8d0 35fc 	ldr.w	r3, [r0, #1532]	; 0x5fc
{
 80033a8:	4683      	mov	fp, r0
 80033aa:	460d      	mov	r5, r1
  if(STM32Fs_GetNextFile(&TestContext_Ptr->ValidationContext.class_dir, &TestContext_Ptr->ValidationContext.img_fno) == STM32FS_ERROR_NONE)
 80033ac:	4638      	mov	r0, r7
{
 80033ae:	ed2d 8b10 	vpush	{d8-d15}
 80033b2:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
 80033b6:	9109      	str	r1, [sp, #36]	; 0x24
  if(STM32Fs_GetNextFile(&TestContext_Ptr->ValidationContext.class_dir, &TestContext_Ptr->ValidationContext.img_fno) == STM32FS_ERROR_NONE)
 80033b8:	4641      	mov	r1, r8
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80033ba:	9308      	str	r3, [sp, #32]
  if(STM32Fs_GetNextFile(&TestContext_Ptr->ValidationContext.class_dir, &TestContext_Ptr->ValidationContext.img_fno) == STM32FS_ERROR_NONE)
 80033bc:	f018 fd82 	bl	801bec4 <STM32Fs_GetNextFile>
 80033c0:	bb20      	cbnz	r0, 800340c <TEST_GetNextValidationInput+0x74>
    stm32fs_err_t err;

    BSP_LED_Toggle(LED_BLUE);
    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80033c2:	4cbd      	ldr	r4, [pc, #756]	; (80036b8 <TEST_GetNextValidationInput+0x320>)
    BSP_LED_Toggle(LED_BLUE);
 80033c4:	2003      	movs	r0, #3
 80033c6:	f007 fc91 	bl	800acec <BSP_LED_Toggle>
    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80033ca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80033ce:	f019 fb5d 	bl	801ca8c <UTIL_LCD_Clear>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80033d2:	f50b 6180 	add.w	r1, fp, #1024	; 0x400
 80033d6:	4620      	mov	r0, r4
 80033d8:	f022 ff24 	bl	8026224 <stpcpy>
    strcat(tmp_msg, "/");
 80033dc:	232f      	movs	r3, #47	; 0x2f
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80033de:	f20b 21ba 	addw	r1, fp, #698	; 0x2ba
 80033e2:	3001      	adds	r0, #1
    strcat(tmp_msg, "/");
 80033e4:	f800 3c01 	strb.w	r3, [r0, #-1]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80033e8:	f022 ff25 	bl	8026236 <strcpy>

    /* Read the image to DestBuffPtr */
    err = STM23Fs_ReadImageBMP(tmp_msg, DestBuffPtr);
 80033ec:	4629      	mov	r1, r5
 80033ee:	4620      	mov	r0, r4
 80033f0:	f019 f942 	bl	801c678 <STM23Fs_ReadImageBMP>

    if (err != STM32FS_ERROR_NONE)
 80033f4:	b948      	cbnz	r0, 800340a <TEST_GetNextValidationInput+0x72>
        if (err != STM32FS_ERROR_NONE)
        {
          while(1);
        }

        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 80033f6:	9b08      	ldr	r3, [sp, #32]
 80033f8:	2201      	movs	r2, #1
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	751a      	strb	r2, [r3, #20]
        HAL_Delay(1000);

      TestContext_Ptr->ValidationContext.validation_completed =1;
    }
  }
}
 80033fe:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
 8003402:	ecbd 8b10 	vpop	{d8-d15}
 8003406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while(1);
 800340a:	e7fe      	b.n	800340a <TEST_GetNextValidationInput+0x72>
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 800340c:	4638      	mov	r0, r7
    if(STM32Fs_GetNextDir(&TestContext_Ptr->ValidationContext.dataset_dir, &TestContext_Ptr->ValidationContext.fno) == STM32FS_ERROR_NONE)
 800340e:	f50b 7992 	add.w	r9, fp, #292	; 0x124
 8003412:	f50b 7aac 	add.w	sl, fp, #344	; 0x158
 8003416:	4ea9      	ldr	r6, [pc, #676]	; (80036bc <TEST_GetNextValidationInput+0x324>)
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 8003418:	f50b 74b7 	add.w	r4, fp, #366	; 0x16e
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 800341c:	f017 fbdc 	bl	801abd8 <f_closedir>
    if(STM32Fs_GetNextDir(&TestContext_Ptr->ValidationContext.dataset_dir, &TestContext_Ptr->ValidationContext.fno) == STM32FS_ERROR_NONE)
 8003420:	4651      	mov	r1, sl
 8003422:	4648      	mov	r0, r9
 8003424:	f018 fd3e 	bl	801bea4 <STM32Fs_GetNextDir>
 8003428:	4605      	mov	r5, r0
 800342a:	2800      	cmp	r0, #0
 800342c:	d171      	bne.n	8003512 <TEST_GetNextValidationInput+0x17a>
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 800342e:	6831      	ldr	r1, [r6, #0]
 8003430:	4620      	mov	r0, r4
 8003432:	f7fc ff55 	bl	80002e0 <strcmp>
 8003436:	2800      	cmp	r0, #0
 8003438:	d033      	beq.n	80034a2 <TEST_GetNextValidationInput+0x10a>
 800343a:	6871      	ldr	r1, [r6, #4]
 800343c:	4620      	mov	r0, r4
 800343e:	f7fc ff4f 	bl	80002e0 <strcmp>
 8003442:	b368      	cbz	r0, 80034a0 <TEST_GetNextValidationInput+0x108>
 8003444:	68b1      	ldr	r1, [r6, #8]
 8003446:	4620      	mov	r0, r4
 8003448:	f7fc ff4a 	bl	80002e0 <strcmp>
 800344c:	2800      	cmp	r0, #0
 800344e:	d05a      	beq.n	8003506 <TEST_GetNextValidationInput+0x16e>
 8003450:	68f1      	ldr	r1, [r6, #12]
 8003452:	4620      	mov	r0, r4
 8003454:	f7fc ff44 	bl	80002e0 <strcmp>
 8003458:	2800      	cmp	r0, #0
 800345a:	d056      	beq.n	800350a <TEST_GetNextValidationInput+0x172>
 800345c:	6931      	ldr	r1, [r6, #16]
 800345e:	4620      	mov	r0, r4
 8003460:	f7fc ff3e 	bl	80002e0 <strcmp>
 8003464:	2800      	cmp	r0, #0
 8003466:	d052      	beq.n	800350e <TEST_GetNextValidationInput+0x176>
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 8003468:	f04f 33ff 	mov.w	r3, #4294967295
        sprintf(tmp_msg, "Error, class %s doesn't exists", TestContext_Ptr->ValidationContext.fno.fname);
 800346c:	4622      	mov	r2, r4
 800346e:	4994      	ldr	r1, [pc, #592]	; (80036c0 <TEST_GetNextValidationInput+0x328>)
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 8003470:	f8cb 33bc 	str.w	r3, [fp, #956]	; 0x3bc
        sprintf(tmp_msg, "Error, class %s doesn't exists", TestContext_Ptr->ValidationContext.fno.fname);
 8003474:	4890      	ldr	r0, [pc, #576]	; (80036b8 <TEST_GetNextValidationInput+0x320>)
 8003476:	f022 feb5 	bl	80261e4 <siprintf>
        UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)tmp_msg, CENTER_MODE);
 800347a:	f019 faff 	bl	801ca7c <UTIL_LCD_GetFont>
 800347e:	4601      	mov	r1, r0
 8003480:	2301      	movs	r3, #1
 8003482:	4a8d      	ldr	r2, [pc, #564]	; (80036b8 <TEST_GetNextValidationInput+0x320>)
 8003484:	88c9      	ldrh	r1, [r1, #6]
 8003486:	4628      	mov	r0, r5
 8003488:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800348c:	f019 fbee 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003490:	9b08      	ldr	r3, [sp, #32]
 8003492:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003494:	f7fe fbc6 	bl	8001c24 <DISPLAY_Refresh>
        BSP_LED_On(LED_RED);
 8003498:	2002      	movs	r0, #2
 800349a:	f007 fc03 	bl	800aca4 <BSP_LED_On>
        while (1)
 800349e:	e7fe      	b.n	800349e <TEST_GetNextValidationInput+0x106>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 80034a0:	2001      	movs	r0, #1
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, ""); //chaine "nulle"
 80034a2:	f50b 6580 	add.w	r5, fp, #1024	; 0x400
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
 80034a6:	f50b 7170 	add.w	r1, fp, #960	; 0x3c0
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 80034aa:	f8cb 03bc 	str.w	r0, [fp, #956]	; 0x3bc
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
 80034ae:	4628      	mov	r0, r5
 80034b0:	f022 feb8 	bl	8026224 <stpcpy>
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.fno.fname);
 80034b4:	4621      	mov	r1, r4
 80034b6:	f022 febe 	bl	8026236 <strcpy>
      STM32Fs_OpenDir(TestContext_Ptr->ValidationContext.tmp_class_path, &TestContext_Ptr->ValidationContext.class_dir);
 80034ba:	4639      	mov	r1, r7
 80034bc:	4628      	mov	r0, r5
 80034be:	f018 fcdf 	bl	801be80 <STM32Fs_OpenDir>
      if(STM32Fs_GetNextFile(&TestContext_Ptr->ValidationContext.class_dir, &TestContext_Ptr->ValidationContext.img_fno) == STM32FS_ERROR_NONE)
 80034c2:	4641      	mov	r1, r8
 80034c4:	4638      	mov	r0, r7
 80034c6:	f018 fcfd 	bl	801bec4 <STM32Fs_GetNextFile>
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d1a8      	bne.n	8003420 <TEST_GetNextValidationInput+0x88>
        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80034ce:	4c7a      	ldr	r4, [pc, #488]	; (80036b8 <TEST_GetNextValidationInput+0x320>)
        BSP_LED_Toggle(LED_BLUE);
 80034d0:	2003      	movs	r0, #3
 80034d2:	f007 fc0b 	bl	800acec <BSP_LED_Toggle>
        UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80034d6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80034da:	f019 fad7 	bl	801ca8c <UTIL_LCD_Clear>
        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80034de:	4629      	mov	r1, r5
 80034e0:	4620      	mov	r0, r4
 80034e2:	f022 fe9f 	bl	8026224 <stpcpy>
        strcat(tmp_msg, "/");
 80034e6:	232f      	movs	r3, #47	; 0x2f
        strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80034e8:	f20b 21ba 	addw	r1, fp, #698	; 0x2ba
 80034ec:	3001      	adds	r0, #1
        strcat(tmp_msg, "/");
 80034ee:	f800 3c01 	strb.w	r3, [r0, #-1]
        strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80034f2:	f022 fea0 	bl	8026236 <strcpy>
        err = STM23Fs_ReadImageBMP(tmp_msg, DestBuffPtr);
 80034f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80034f8:	4620      	mov	r0, r4
 80034fa:	f019 f8bd 	bl	801c678 <STM23Fs_ReadImageBMP>
        if (err != STM32FS_ERROR_NONE)
 80034fe:	2800      	cmp	r0, #0
 8003500:	f43f af79 	beq.w	80033f6 <TEST_GetNextValidationInput+0x5e>
          while(1);
 8003504:	e7fe      	b.n	8003504 <TEST_GetNextValidationInput+0x16c>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 8003506:	2002      	movs	r0, #2
 8003508:	e7cb      	b.n	80034a2 <TEST_GetNextValidationInput+0x10a>
 800350a:	2003      	movs	r0, #3
 800350c:	e7c9      	b.n	80034a2 <TEST_GetNextValidationInput+0x10a>
 800350e:	2004      	movs	r0, #4
 8003510:	e7c7      	b.n	80034a2 <TEST_GetNextValidationInput+0x10a>
      f_closedir(&TestContext_Ptr->ValidationContext.dataset_dir);
 8003512:	4648      	mov	r0, r9
      BSP_LCD_FillRect(0, 50, 130, 224, 224, UTIL_LCD_COLOR_WHITE);
 8003514:	f04f 34ff 	mov.w	r4, #4294967295
      f_closedir(&TestContext_Ptr->ValidationContext.dataset_dir);
 8003518:	f017 fb5e 	bl	801abd8 <f_closedir>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 800351c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003520:	f019 fa94 	bl	801ca4c <UTIL_LCD_SetTextColor>
      BSP_LCD_FillRect(0, 50, 130, 224, 224, UTIL_LCD_COLOR_WHITE);
 8003524:	23e0      	movs	r3, #224	; 0xe0
 8003526:	2282      	movs	r2, #130	; 0x82
 8003528:	2132      	movs	r1, #50	; 0x32
 800352a:	2000      	movs	r0, #0
 800352c:	e9cd 3400 	strd	r3, r4, [sp]
 8003530:	f009 fb72 	bl	800cc18 <BSP_LCD_FillRect>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8003534:	4620      	mov	r0, r4
 8003536:	f019 fa89 	bl	801ca4c <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAt(40, LINE(10), (uint8_t*)"End of validation.", LEFT_MODE);
 800353a:	f019 fa9f 	bl	801ca7c <UTIL_LCD_GetFont>
 800353e:	88c1      	ldrh	r1, [r0, #6]
 8003540:	2303      	movs	r3, #3
 8003542:	4a60      	ldr	r2, [pc, #384]	; (80036c4 <TEST_GetNextValidationInput+0x32c>)
 8003544:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003548:	2028      	movs	r0, #40	; 0x28
 800354a:	0049      	lsls	r1, r1, #1
 800354c:	f019 fb8e 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(40, LINE(11), (uint8_t*)"Press wake-up", LEFT_MODE);
 8003550:	f019 fa94 	bl	801ca7c <UTIL_LCD_GetFont>
 8003554:	88c1      	ldrh	r1, [r0, #6]
 8003556:	2303      	movs	r3, #3
 8003558:	4a5b      	ldr	r2, [pc, #364]	; (80036c8 <TEST_GetNextValidationInput+0x330>)
 800355a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800355e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8003562:	2028      	movs	r0, #40	; 0x28
 8003564:	f019 fb82 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(40, LINE(12), (uint8_t*)"button to see report", LEFT_MODE);
 8003568:	f019 fa88 	bl	801ca7c <UTIL_LCD_GetFont>
 800356c:	88c1      	ldrh	r1, [r0, #6]
 800356e:	2303      	movs	r3, #3
 8003570:	4a56      	ldr	r2, [pc, #344]	; (80036cc <TEST_GetNextValidationInput+0x334>)
 8003572:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003576:	2028      	movs	r0, #40	; 0x28
 8003578:	0089      	lsls	r1, r1, #2
 800357a:	f019 fb77 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800357e:	9b08      	ldr	r3, [sp, #32]
 8003580:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003582:	f7fe fb4f 	bl	8001c24 <DISPLAY_Refresh>
      while((TestContext_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 8003586:	e002      	b.n	800358e <TEST_GetNextValidationInput+0x1f6>
 8003588:	f007 fc12 	bl	800adb0 <BSP_PB_GetState>
 800358c:	bbc8      	cbnz	r0, 8003602 <TEST_GetNextValidationInput+0x26a>
 800358e:	f8db 0520 	ldr.w	r0, [fp, #1312]	; 0x520
 8003592:	2800      	cmp	r0, #0
 8003594:	d0f8      	beq.n	8003588 <TEST_GetNextValidationInput+0x1f0>
        HAL_Delay(1000);
 8003596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800359a:	f00a fa43 	bl	800da24 <HAL_Delay>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800359e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80035a2:	f019 fa73 	bl	801ca8c <UTIL_LCD_Clear>
      support += conf_matrix[target][pred];
 80035a6:	f8db 744c 	ldr.w	r7, [fp, #1100]	; 0x44c
 80035aa:	f8db c448 	ldr.w	ip, [fp, #1096]	; 0x448
        false_positives += conf_matrix[gtruth][target];
 80035ae:	f8db 9470 	ldr.w	r9, [fp, #1136]	; 0x470
 80035b2:	f8db 8484 	ldr.w	r8, [fp, #1156]	; 0x484
      support += conf_matrix[target][pred];
 80035b6:	eb0c 0407 	add.w	r4, ip, r7
        false_positives += conf_matrix[gtruth][target];
 80035ba:	f8db 3498 	ldr.w	r3, [fp, #1176]	; 0x498
      support += conf_matrix[target][pred];
 80035be:	f8db 5450 	ldr.w	r5, [fp, #1104]	; 0x450
        false_positives += conf_matrix[gtruth][target];
 80035c2:	eb08 0109 	add.w	r1, r8, r9
      support += conf_matrix[target][pred];
 80035c6:	f8db 0454 	ldr.w	r0, [fp, #1108]	; 0x454
        false_positives += conf_matrix[gtruth][target];
 80035ca:	4419      	add	r1, r3
      support += conf_matrix[target][pred];
 80035cc:	442c      	add	r4, r5
        false_positives += conf_matrix[gtruth][target];
 80035ce:	f8db 645c 	ldr.w	r6, [fp, #1116]	; 0x45c
      support += conf_matrix[target][pred];
 80035d2:	f8db 2458 	ldr.w	r2, [fp, #1112]	; 0x458
 80035d6:	4404      	add	r4, r0
        false_positives += conf_matrix[gtruth][target];
 80035d8:	4431      	add	r1, r6
 80035da:	930b      	str	r3, [sp, #44]	; 0x2c
        false_negatives += conf_matrix[target][pred];
 80035dc:	197b      	adds	r3, r7, r5
      support += conf_matrix[target][pred];
 80035de:	1914      	adds	r4, r2, r4
    if ((true_positives + false_positives) != 0)
 80035e0:	eb11 010c 	adds.w	r1, r1, ip
        false_negatives += conf_matrix[target][pred];
 80035e4:	4403      	add	r3, r0
      support += conf_matrix[target][pred];
 80035e6:	9408      	str	r4, [sp, #32]
        false_negatives += conf_matrix[target][pred];
 80035e8:	4413      	add	r3, r2
    if ((true_positives + false_positives) != 0)
 80035ea:	d10f      	bne.n	800360c <TEST_GetNextValidationInput+0x274>
    if ((true_positives + false_negatives) != 0)
 80035ec:	eb1c 0303 	adds.w	r3, ip, r3
 80035f0:	f040 83d2 	bne.w	8003d98 <TEST_GetNextValidationInput+0xa00>
    float recall = 0.0f;
 80035f4:	eddf 0a36 	vldr	s1, [pc, #216]	; 80036d0 <TEST_GetNextValidationInput+0x338>
    float precision = 0.0f;
 80035f8:	eeb0 9a60 	vmov.f32	s18, s1
    float f1_score = 0.0f;
 80035fc:	eeb0 8a60 	vmov.f32	s16, s1
 8003600:	e027      	b.n	8003652 <TEST_GetNextValidationInput+0x2ba>
      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003602:	f8db 3520 	ldr.w	r3, [fp, #1312]	; 0x520
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0c9      	beq.n	800359e <TEST_GetNextValidationInput+0x206>
 800360a:	e7c4      	b.n	8003596 <TEST_GetNextValidationInput+0x1fe>
      precision = true_positives / (float)(true_positives + false_positives);
 800360c:	ee07 1a90 	vmov	s15, r1
 8003610:	ee07 ca10 	vmov	s14, ip
    if ((true_positives + false_negatives) != 0)
 8003614:	eb1c 0303 	adds.w	r3, ip, r3
      precision = true_positives / (float)(true_positives + false_positives);
 8003618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003620:	ee87 8a27 	vdiv.f32	s16, s14, s15
    if ((true_positives + false_negatives) != 0)
 8003624:	f000 83b3 	beq.w	8003d8e <TEST_GetNextValidationInput+0x9f6>
      recall = true_positives / (float)(true_positives + false_negatives);
 8003628:	ee07 3a90 	vmov	s15, r3
 800362c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if ((recall + precision) != 0.0f)
 8003630:	eeb0 9a48 	vmov.f32	s18, s16
      recall = true_positives / (float)(true_positives + false_negatives);
 8003634:	eec7 0a27 	vdiv.f32	s1, s14, s15
    if ((recall + precision) != 0.0f)
 8003638:	ee38 8a20 	vadd.f32	s16, s16, s1
 800363c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003644:	d005      	beq.n	8003652 <TEST_GetNextValidationInput+0x2ba>
      f1_score = 2 * (recall * precision) / (recall + precision);
 8003646:	ee60 7a89 	vmul.f32	s15, s1, s18
 800364a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800364e:	ee87 8a88 	vdiv.f32	s16, s15, s16
      support += conf_matrix[target][pred];
 8003652:	f8db 3460 	ldr.w	r3, [fp, #1120]	; 0x460
 8003656:	f8db 1464 	ldr.w	r1, [fp, #1124]	; 0x464
 800365a:	eb06 0e03 	add.w	lr, r6, r3
        false_positives += conf_matrix[gtruth][target];
 800365e:	f8db 4474 	ldr.w	r4, [fp, #1140]	; 0x474
        false_negatives += conf_matrix[target][pred];
 8003662:	eb06 0a01 	add.w	sl, r6, r1
      support += conf_matrix[target][pred];
 8003666:	f8db 6468 	ldr.w	r6, [fp, #1128]	; 0x468
 800366a:	448e      	add	lr, r1
        false_positives += conf_matrix[gtruth][target];
 800366c:	4427      	add	r7, r4
 800366e:	f8db 1488 	ldr.w	r1, [fp, #1160]	; 0x488
      support += conf_matrix[target][pred];
 8003672:	44b6      	add	lr, r6
        false_negatives += conf_matrix[target][pred];
 8003674:	4456      	add	r6, sl
        false_positives += conf_matrix[gtruth][target];
 8003676:	440f      	add	r7, r1
 8003678:	910d      	str	r1, [sp, #52]	; 0x34
 800367a:	f8db 149c 	ldr.w	r1, [fp, #1180]	; 0x49c
      support += conf_matrix[target][pred];
 800367e:	f8db a46c 	ldr.w	sl, [fp, #1132]	; 0x46c
        false_positives += conf_matrix[gtruth][target];
 8003682:	440f      	add	r7, r1
 8003684:	910c      	str	r1, [sp, #48]	; 0x30
    report.supports[target] = support;
 8003686:	9908      	ldr	r1, [sp, #32]
        false_negatives += conf_matrix[target][pred];
 8003688:	4456      	add	r6, sl
    if ((true_positives + false_positives) != 0)
 800368a:	18ff      	adds	r7, r7, r3
    report.precisions[target] = precision;
 800368c:	ed8d 9a3c 	vstr	s18, [sp, #240]	; 0xf0
    report.supports[target] = support;
 8003690:	914b      	str	r1, [sp, #300]	; 0x12c
      support += conf_matrix[target][pred];
 8003692:	eb0a 010e 	add.w	r1, sl, lr
    report.recalls[target] = recall;
 8003696:	edcd 0a41 	vstr	s1, [sp, #260]	; 0x104
    report.f1_scores[target] = f1_score;
 800369a:	ed8d 8a46 	vstr	s16, [sp, #280]	; 0x118
      support += conf_matrix[target][pred];
 800369e:	9109      	str	r1, [sp, #36]	; 0x24
    if ((true_positives + false_positives) != 0)
 80036a0:	d118      	bne.n	80036d4 <TEST_GetNextValidationInput+0x33c>
    if ((true_positives + false_negatives) != 0)
 80036a2:	18f6      	adds	r6, r6, r3
 80036a4:	f040 836c 	bne.w	8003d80 <TEST_GetNextValidationInput+0x9e8>
    float recall = 0.0f;
 80036a8:	eddf 6a09 	vldr	s13, [pc, #36]	; 80036d0 <TEST_GetNextValidationInput+0x338>
    float precision = 0.0f;
 80036ac:	eeb0 6a66 	vmov.f32	s12, s13
    float f1_score = 0.0f;
 80036b0:	eef0 7a66 	vmov.f32	s15, s13
 80036b4:	e030      	b.n	8003718 <TEST_GetNextValidationInput+0x380>
 80036b6:	bf00      	nop
 80036b8:	240089e0 	.word	0x240089e0
 80036bc:	24000008 	.word	0x24000008
 80036c0:	080290d8 	.word	0x080290d8
 80036c4:	08029124 	.word	0x08029124
 80036c8:	08029138 	.word	0x08029138
 80036cc:	08029148 	.word	0x08029148
 80036d0:	00000000 	.word	0x00000000
      precision = true_positives / (float)(true_positives + false_positives);
 80036d4:	ee07 7a90 	vmov	s15, r7
    if ((true_positives + false_negatives) != 0)
 80036d8:	18f6      	adds	r6, r6, r3
      precision = true_positives / (float)(true_positives + false_positives);
 80036da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eef8 5a67 	vcvt.f32.u32	s11, s15
 80036e6:	eec5 7a87 	vdiv.f32	s15, s11, s14
    if ((true_positives + false_negatives) != 0)
 80036ea:	f000 8344 	beq.w	8003d76 <TEST_GetNextValidationInput+0x9de>
      recall = true_positives / (float)(true_positives + false_negatives);
 80036ee:	ee07 6a10 	vmov	s14, r6
 80036f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if ((recall + precision) != 0.0f)
 80036f6:	eeb0 6a67 	vmov.f32	s12, s15
      recall = true_positives / (float)(true_positives + false_negatives);
 80036fa:	eec5 6a87 	vdiv.f32	s13, s11, s14
    if ((recall + precision) != 0.0f)
 80036fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003702:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370a:	d005      	beq.n	8003718 <TEST_GetNextValidationInput+0x380>
      f1_score = 2 * (recall * precision) / (recall + precision);
 800370c:	ee26 7a86 	vmul.f32	s14, s13, s12
 8003710:	ee37 7a07 	vadd.f32	s14, s14, s14
 8003714:	eec7 7a27 	vdiv.f32	s15, s14, s15
        false_positives += conf_matrix[gtruth][target];
 8003718:	f8db 6464 	ldr.w	r6, [fp, #1124]	; 0x464
      support += conf_matrix[target][pred];
 800371c:	eb09 0e04 	add.w	lr, r9, r4
 8003720:	f8db 7478 	ldr.w	r7, [fp, #1144]	; 0x478
        false_positives += conf_matrix[gtruth][target];
 8003724:	19ac      	adds	r4, r5, r6
 8003726:	f8db 648c 	ldr.w	r6, [fp, #1164]	; 0x48c
      support += conf_matrix[target][pred];
 800372a:	f8db 547c 	ldr.w	r5, [fp, #1148]	; 0x47c
 800372e:	443b      	add	r3, r7
        false_positives += conf_matrix[gtruth][target];
 8003730:	4434      	add	r4, r6
      support += conf_matrix[target][pred];
 8003732:	eb0e 0607 	add.w	r6, lr, r7
        false_negatives += conf_matrix[target][pred];
 8003736:	44ae      	add	lr, r5
    report.supports[target] = support;
 8003738:	9909      	ldr	r1, [sp, #36]	; 0x24
      support += conf_matrix[target][pred];
 800373a:	4435      	add	r5, r6
        false_positives += conf_matrix[gtruth][target];
 800373c:	f8db 64a0 	ldr.w	r6, [fp, #1184]	; 0x4a0
      support += conf_matrix[target][pred];
 8003740:	f8db 9480 	ldr.w	r9, [fp, #1152]	; 0x480
        false_positives += conf_matrix[gtruth][target];
 8003744:	4434      	add	r4, r6
 8003746:	930a      	str	r3, [sp, #40]	; 0x28
    total_support += support;
 8003748:	9b08      	ldr	r3, [sp, #32]
      support += conf_matrix[target][pred];
 800374a:	444d      	add	r5, r9
    if ((true_positives + false_positives) != 0)
 800374c:	19e4      	adds	r4, r4, r7
        false_negatives += conf_matrix[target][pred];
 800374e:	44ce      	add	lr, r9
    total_support += support;
 8003750:	eb03 0a01 	add.w	sl, r3, r1
    report.precisions[target] = precision;
 8003754:	ed8d 6a3d 	vstr	s12, [sp, #244]	; 0xf4
    report.recalls[target] = recall;
 8003758:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
    report.f1_scores[target] = f1_score;
 800375c:	edcd 7a47 	vstr	s15, [sp, #284]	; 0x11c
    report.supports[target] = support;
 8003760:	914c      	str	r1, [sp, #304]	; 0x130
    if ((true_positives + false_positives) != 0)
 8003762:	d10a      	bne.n	800377a <TEST_GetNextValidationInput+0x3e2>
    if ((true_positives + false_negatives) != 0)
 8003764:	eb1e 0e07 	adds.w	lr, lr, r7
 8003768:	f040 82fe 	bne.w	8003d68 <TEST_GetNextValidationInput+0x9d0>
    float recall = 0.0f;
 800376c:	ed1f 1a28 	vldr	s2, [pc, #-160]	; 80036d0 <TEST_GetNextValidationInput+0x338>
    float precision = 0.0f;
 8003770:	eef0 8a41 	vmov.f32	s17, s2
    float f1_score = 0.0f;
 8003774:	eef0 1a41 	vmov.f32	s3, s2
 8003778:	e022      	b.n	80037c0 <TEST_GetNextValidationInput+0x428>
      precision = true_positives / (float)(true_positives + false_positives);
 800377a:	ee07 4a10 	vmov	s14, r4
 800377e:	ee05 7a90 	vmov	s11, r7
    if ((true_positives + false_negatives) != 0)
 8003782:	eb1e 0e07 	adds.w	lr, lr, r7
      precision = true_positives / (float)(true_positives + false_positives);
 8003786:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800378a:	eef8 5a65 	vcvt.f32.u32	s11, s11
 800378e:	eec5 1a87 	vdiv.f32	s3, s11, s14
    if ((true_positives + false_negatives) != 0)
 8003792:	f000 82e4 	beq.w	8003d5e <TEST_GetNextValidationInput+0x9c6>
      recall = true_positives / (float)(true_positives + false_negatives);
 8003796:	ee07 ea10 	vmov	s14, lr
 800379a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if ((recall + precision) != 0.0f)
 800379e:	eef0 8a61 	vmov.f32	s17, s3
      recall = true_positives / (float)(true_positives + false_negatives);
 80037a2:	ee85 1a87 	vdiv.f32	s2, s11, s14
    if ((recall + precision) != 0.0f)
 80037a6:	ee71 1a81 	vadd.f32	s3, s3, s2
 80037aa:	eef5 1a40 	vcmp.f32	s3, #0.0
 80037ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b2:	d005      	beq.n	80037c0 <TEST_GetNextValidationInput+0x428>
      f1_score = 2 * (recall * precision) / (recall + precision);
 80037b4:	ee21 7a28 	vmul.f32	s14, s2, s17
 80037b8:	ee37 7a07 	vadd.f32	s14, s14, s14
 80037bc:	eec7 1a21 	vdiv.f32	s3, s14, s3
        false_positives += conf_matrix[gtruth][target];
 80037c0:	f8db 4468 	ldr.w	r4, [fp, #1128]	; 0x468
    total_support += support;
 80037c4:	eb0a 0705 	add.w	r7, sl, r5
      support += conf_matrix[target][pred];
 80037c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        false_positives += conf_matrix[gtruth][target];
 80037ca:	4420      	add	r0, r4
 80037cc:	f8db 147c 	ldr.w	r1, [fp, #1148]	; 0x47c
      support += conf_matrix[target][pred];
 80037d0:	4498      	add	r8, r3
 80037d2:	f8db 448c 	ldr.w	r4, [fp, #1164]	; 0x48c
        false_positives += conf_matrix[gtruth][target];
 80037d6:	4401      	add	r1, r0
 80037d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      support += conf_matrix[target][pred];
 80037da:	f8db 0490 	ldr.w	r0, [fp, #1168]	; 0x490
 80037de:	4444      	add	r4, r8
        false_positives += conf_matrix[gtruth][target];
 80037e0:	f8db 84a4 	ldr.w	r8, [fp, #1188]	; 0x4a4
 80037e4:	4403      	add	r3, r0
      support += conf_matrix[target][pred];
 80037e6:	f8db 9494 	ldr.w	r9, [fp, #1172]	; 0x494
    report.precisions[target] = precision;
 80037ea:	edcd 8a3e 	vstr	s17, [sp, #248]	; 0xf8
    report.recalls[target] = recall;
 80037ee:	469e      	mov	lr, r3
        false_positives += conf_matrix[gtruth][target];
 80037f0:	eb08 0301 	add.w	r3, r8, r1
      support += conf_matrix[target][pred];
 80037f4:	1821      	adds	r1, r4, r0
    report.recalls[target] = recall;
 80037f6:	ed8d 1a43 	vstr	s2, [sp, #268]	; 0x10c
    if ((true_positives + false_positives) != 0)
 80037fa:	181b      	adds	r3, r3, r0
        false_negatives += conf_matrix[target][pred];
 80037fc:	444c      	add	r4, r9
      support += conf_matrix[target][pred];
 80037fe:	4449      	add	r1, r9
    report.f1_scores[target] = f1_score;
 8003800:	edcd 1a48 	vstr	s3, [sp, #288]	; 0x120
    report.supports[target] = support;
 8003804:	954d      	str	r5, [sp, #308]	; 0x134
    if ((true_positives + false_positives) != 0)
 8003806:	d109      	bne.n	800381c <TEST_GetNextValidationInput+0x484>
    if ((true_positives + false_negatives) != 0)
 8003808:	1824      	adds	r4, r4, r0
 800380a:	f040 82a1 	bne.w	8003d50 <TEST_GetNextValidationInput+0x9b8>
    float recall = 0.0f;
 800380e:	ed1f 3a50 	vldr	s6, [pc, #-320]	; 80036d0 <TEST_GetNextValidationInput+0x338>
    float precision = 0.0f;
 8003812:	eef0 2a43 	vmov.f32	s5, s6
    float f1_score = 0.0f;
 8003816:	eef0 3a43 	vmov.f32	s7, s6
 800381a:	e021      	b.n	8003860 <TEST_GetNextValidationInput+0x4c8>
      precision = true_positives / (float)(true_positives + false_positives);
 800381c:	ee07 3a10 	vmov	s14, r3
 8003820:	ee05 0a90 	vmov	s11, r0
    if ((true_positives + false_negatives) != 0)
 8003824:	1824      	adds	r4, r4, r0
      precision = true_positives / (float)(true_positives + false_positives);
 8003826:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800382a:	eef8 5a65 	vcvt.f32.u32	s11, s11
 800382e:	eec5 3a87 	vdiv.f32	s7, s11, s14
    if ((true_positives + false_negatives) != 0)
 8003832:	f000 8288 	beq.w	8003d46 <TEST_GetNextValidationInput+0x9ae>
      recall = true_positives / (float)(true_positives + false_negatives);
 8003836:	ee07 4a10 	vmov	s14, r4
 800383a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if ((recall + precision) != 0.0f)
 800383e:	eef0 2a63 	vmov.f32	s5, s7
      recall = true_positives / (float)(true_positives + false_negatives);
 8003842:	ee85 3a87 	vdiv.f32	s6, s11, s14
    if ((recall + precision) != 0.0f)
 8003846:	ee73 3a83 	vadd.f32	s7, s7, s6
 800384a:	eef5 3a40 	vcmp.f32	s7, #0.0
 800384e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003852:	d005      	beq.n	8003860 <TEST_GetNextValidationInput+0x4c8>
      f1_score = 2 * (recall * precision) / (recall + precision);
 8003854:	ee23 7a22 	vmul.f32	s14, s6, s5
 8003858:	ee37 7a07 	vadd.f32	s14, s14, s14
 800385c:	eec7 3a23 	vdiv.f32	s7, s14, s7
    total_support += support;
 8003860:	440f      	add	r7, r1
    report.precisions[target] = precision;
 8003862:	edcd 2a3f 	vstr	s5, [sp, #252]	; 0xfc
    report.recalls[target] = recall;
 8003866:	ed8d 3a44 	vstr	s6, [sp, #272]	; 0x110
    report.f1_scores[target] = f1_score;
 800386a:	edcd 3a49 	vstr	s7, [sp, #292]	; 0x124
    report.supports[target] = support;
 800386e:	914e      	str	r1, [sp, #312]	; 0x138
      support += conf_matrix[target][pred];
 8003870:	e9dd 300b 	ldrd	r3, r0, [sp, #44]	; 0x2c
 8003874:	4403      	add	r3, r0
 8003876:	f8db 04a8 	ldr.w	r0, [fp, #1192]	; 0x4a8
 800387a:	441e      	add	r6, r3
        false_positives += conf_matrix[gtruth][target];
 800387c:	f8db 346c 	ldr.w	r3, [fp, #1132]	; 0x46c
 8003880:	4486      	add	lr, r0
 8003882:	441a      	add	r2, r3
 8003884:	f8db 3480 	ldr.w	r3, [fp, #1152]	; 0x480
      support += conf_matrix[target][pred];
 8003888:	44b0      	add	r8, r6
        false_positives += conf_matrix[gtruth][target];
 800388a:	441a      	add	r2, r3
 800388c:	f8db 3494 	ldr.w	r3, [fp, #1172]	; 0x494
 8003890:	4413      	add	r3, r2
      support += conf_matrix[target][pred];
 8003892:	eb08 0200 	add.w	r2, r8, r0
    if ((true_positives + false_positives) != 0)
 8003896:	181b      	adds	r3, r3, r0
 8003898:	f000 8238 	beq.w	8003d0c <TEST_GetNextValidationInput+0x974>
      precision = true_positives / (float)(true_positives + false_positives);
 800389c:	ee07 0a10 	vmov	s14, r0
 80038a0:	eeb8 2a47 	vcvt.f32.u32	s4, s14
 80038a4:	ee07 3a10 	vmov	s14, r3
 80038a8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80038ac:	eec2 5a07 	vdiv.f32	s11, s4, s14
    if ((true_positives + false_negatives) != 0)
 80038b0:	2a00      	cmp	r2, #0
 80038b2:	f000 8241 	beq.w	8003d38 <TEST_GetNextValidationInput+0x9a0>
      recall = true_positives / (float)(true_positives + false_negatives);
 80038b6:	ee07 2a10 	vmov	s14, r2
 80038ba:	eeb8 5a47 	vcvt.f32.u32	s10, s14
    if ((recall + precision) != 0.0f)
 80038be:	eeb0 4a65 	vmov.f32	s8, s11
      recall = true_positives / (float)(true_positives + false_negatives);
 80038c2:	eec2 4a05 	vdiv.f32	s9, s4, s10
    if ((recall + precision) != 0.0f)
 80038c6:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80038ca:	eef5 5a40 	vcmp.f32	s11, #0.0
 80038ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d2:	d005      	beq.n	80038e0 <TEST_GetNextValidationInput+0x548>
      f1_score = 2 * (recall * precision) / (recall + precision);
 80038d4:	ee24 7a24 	vmul.f32	s14, s8, s9
 80038d8:	ee37 7a07 	vadd.f32	s14, s14, s14
 80038dc:	eec7 5a25 	vdiv.f32	s11, s14, s11
  if (total_support != 0)
 80038e0:	19d7      	adds	r7, r2, r7
    diagonal_sum += true_positives;
 80038e2:	44e6      	add	lr, ip
    report.precisions[target] = precision;
 80038e4:	ed8d 4a40 	vstr	s8, [sp, #256]	; 0x100
    report.recalls[target] = recall;
 80038e8:	edcd 4a45 	vstr	s9, [sp, #276]	; 0x114
    report.f1_scores[target] = f1_score;
 80038ec:	edcd 5a4a 	vstr	s11, [sp, #296]	; 0x128
    report.supports[target] = support;
 80038f0:	924f      	str	r2, [sp, #316]	; 0x13c
  if (total_support != 0)
 80038f2:	f000 81d5 	beq.w	8003ca0 <TEST_GetNextValidationInput+0x908>
    report.accuracy = diagonal_sum / (float)total_support;
 80038f6:	ee07 ea10 	vmov	s14, lr
 80038fa:	ee02 7a10 	vmov	s4, r7
 80038fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003902:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 8003906:	ee87 fa02 	vdiv.f32	s30, s14, s4
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 800390a:	eeb7 cacf 	vcvt.f64.f32	d12, s30
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 800390e:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
    report.macro_avg_precision += (float)report.precisions[target];
 8003912:	ee39 ba06 	vadd.f32	s22, s18, s12
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003916:	ed9d 0a08 	vldr	s0, [sp, #32]
 800391a:	ac20      	add	r4, sp, #128	; 0x80
 800391c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  return report;
 8003920:	2270      	movs	r2, #112	; 0x70
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003922:	eef8 9a40 	vcvt.f32.u32	s19, s0
 8003926:	ee00 5a10 	vmov	s0, r5
    report.macro_avg_precision += (float)report.precisions[target];
 800392a:	ee3b ba28 	vadd.f32	s22, s22, s17
  return report;
 800392e:	4620      	mov	r0, r4
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003930:	ee27 aa06 	vmul.f32	s20, s14, s12
  return report;
 8003934:	ed8d fa50 	vstr	s30, [sp, #320]	; 0x140
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 8003938:	ee27 da26 	vmul.f32	s26, s14, s13
  return report;
 800393c:	9751      	str	r7, [sp, #324]	; 0x144
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 800393e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8003942:	f8df 83bc 	ldr.w	r8, [pc, #956]	; 8003d00 <TEST_GetNextValidationInput+0x968>
 8003946:	eeb0 6a4a 	vmov.f32	s12, s20
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 800394a:	4625      	mov	r5, r4
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 800394c:	eea9 daa0 	vfma.f32	s26, s19, s1
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003950:	46c1      	mov	r9, r8
    report.macro_avg_recall += (float)report.recalls[target];
 8003952:	ee30 aaa6 	vadd.f32	s20, s1, s13
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003956:	2602      	movs	r6, #2
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003958:	eea9 6a89 	vfma.f32	s12, s19, s18
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 800395c:	f8df a370 	ldr.w	sl, [pc, #880]	; 8003cd0 <TEST_GetNextValidationInput+0x938>
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 8003960:	ee27 9a27 	vmul.f32	s18, s14, s15
 8003964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    report.macro_avg_recall += (float)report.recalls[target];
 8003968:	ee3a aa01 	vadd.f32	s20, s20, s2
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 800396c:	eea9 9a88 	vfma.f32	s18, s19, s16
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 8003970:	eea0 da01 	vfma.f32	s26, s0, s2
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003974:	eea0 6a28 	vfma.f32	s12, s0, s17
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 8003978:	ee38 8a27 	vadd.f32	s16, s16, s15
 800397c:	eec7 7a02 	vdiv.f32	s15, s14, s4
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003980:	ee07 1a10 	vmov	s14, r1
  return report;
 8003984:	a93c      	add	r1, sp, #240	; 0xf0
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 8003986:	eea0 9a21 	vfma.f32	s18, s0, s3
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 800398a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 800398e:	ee38 8a21 	vadd.f32	s16, s16, s3
    report.macro_avg_precision += (float)report.precisions[target];
 8003992:	ee3b ba22 	vadd.f32	s22, s22, s5
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003996:	eea7 6a22 	vfma.f32	s12, s14, s5
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 800399a:	eea7 da03 	vfma.f32	s26, s14, s6
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 800399e:	eea7 9a23 	vfma.f32	s18, s14, s7
  report.macro_avg_precision /= (float)AI_NET_OUTPUT_SIZE;
 80039a2:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8003cb8 <TEST_GetNextValidationInput+0x920>
    report.macro_avg_recall += (float)report.recalls[target];
 80039a6:	ee3a aa03 	vadd.f32	s20, s20, s6
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 80039aa:	ee38 8a23 	vadd.f32	s16, s16, s7
    report.macro_avg_precision += (float)report.precisions[target];
 80039ae:	ee34 ba0b 	vadd.f32	s22, s8, s22
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 80039b2:	eea4 6a05 	vfma.f32	s12, s8, s10
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 80039b6:	eea4 da85 	vfma.f32	s26, s9, s10
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 80039ba:	eea5 9a85 	vfma.f32	s18, s11, s10
    report.macro_avg_recall += (float)report.recalls[target];
 80039be:	ee34 aa8a 	vadd.f32	s20, s9, s20
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 80039c2:	ee35 8a88 	vadd.f32	s16, s11, s16
  report.macro_avg_precision /= (float)AI_NET_OUTPUT_SIZE;
 80039c6:	ee2b ba07 	vmul.f32	s22, s22, s14
  report.macro_avg_recall /= (float)AI_NET_OUTPUT_SIZE;
 80039ca:	ee2a aa07 	vmul.f32	s20, s20, s14
  report.macro_avg_f1_score /= (float)AI_NET_OUTPUT_SIZE;
 80039ce:	ee28 8a07 	vmul.f32	s16, s16, s14
  report.weighted_avg_precision /= (float)report.total_support;
 80039d2:	ee26 ea27 	vmul.f32	s28, s12, s15
  return report;
 80039d6:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
  report.weighted_avg_recall /= (float)report.total_support;
 80039da:	ee2d da27 	vmul.f32	s26, s26, s15
  return report;
 80039de:	ed8d aa53 	vstr	s20, [sp, #332]	; 0x14c
  report.weighted_avg_f1_score /= (float)report.total_support;
 80039e2:	ee29 9a27 	vmul.f32	s18, s18, s15
  return report;
 80039e6:	ed8d 8a54 	vstr	s16, [sp, #336]	; 0x150
 80039ea:	ed8d ea55 	vstr	s28, [sp, #340]	; 0x154
 80039ee:	ed8d da56 	vstr	s26, [sp, #344]	; 0x158
 80039f2:	ed8d 9a57 	vstr	s18, [sp, #348]	; 0x15c
 80039f6:	f021 fead 	bl	8025754 <memcpy>
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80039fa:	f8db 35fc 	ldr.w	r3, [fp, #1532]	; 0x5fc
 80039fe:	9308      	str	r3, [sp, #32]
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003a00:	f019 f83c 	bl	801ca7c <UTIL_LCD_GetFont>
 8003a04:	2303      	movs	r3, #3
 8003a06:	4aad      	ldr	r2, [pc, #692]	; (8003cbc <TEST_GetNextValidationInput+0x924>)
 8003a08:	2100      	movs	r1, #0
 8003a0a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8003a0e:	f019 f92d 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003a12:	ecb5 5a01 	vldmia	r5!, {s10}
 8003a16:	4651      	mov	r1, sl
 8003a18:	a83c      	add	r0, sp, #240	; 0xf0
 8003a1a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8003a1e:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8003a22:	ed95 7a04 	vldr	s14, [r5, #16]
 8003a26:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003a2a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003a2e:	ed8d 5b00 	vstr	d5, [sp]
 8003a32:	ed8d 6b04 	vstr	d6, [sp, #16]
 8003a36:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003a3a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003a3c:	9306      	str	r3, [sp, #24]
 8003a3e:	f859 2b04 	ldr.w	r2, [r9], #4
 8003a42:	f022 fbcf 	bl	80261e4 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(2 + target), (uint8_t *)line, LEFT_MODE);
 8003a46:	f019 f819 	bl	801ca7c <UTIL_LCD_GetFont>
 8003a4a:	88c1      	ldrh	r1, [r0, #6]
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	aa3c      	add	r2, sp, #240	; 0xf0
 8003a50:	fb06 f101 	mul.w	r1, r6, r1
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003a54:	3601      	adds	r6, #1
    UTIL_LCD_DisplayStringAt(40, LINE(2 + target), (uint8_t *)line, LEFT_MODE);
 8003a56:	2028      	movs	r0, #40	; 0x28
 8003a58:	f019 f908 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003a5c:	2e07      	cmp	r6, #7
 8003a5e:	d1d8      	bne.n	8003a12 <TEST_GetNextValidationInput+0x67a>
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003a60:	4a97      	ldr	r2, [pc, #604]	; (8003cc0 <TEST_GetNextValidationInput+0x928>)
 8003a62:	a83c      	add	r0, sp, #240	; 0xf0
 8003a64:	4997      	ldr	r1, [pc, #604]	; (8003cc4 <TEST_GetNextValidationInput+0x92c>)
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003a66:	eeb7 bacb 	vcvt.f64.f32	d11, s22
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003a6a:	9702      	str	r7, [sp, #8]
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003a6c:	eeb7 aaca 	vcvt.f64.f32	d10, s20
 8003a70:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8003a74:	4e94      	ldr	r6, [pc, #592]	; (8003cc8 <TEST_GetNextValidationInput+0x930>)
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003a76:	eeb7 eace 	vcvt.f64.f32	d14, s28
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003a7a:	f8df 9270 	ldr.w	r9, [pc, #624]	; 8003cec <TEST_GetNextValidationInput+0x954>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003a7e:	eeb7 dacd 	vcvt.f64.f32	d13, s26
  f_printf(&File, "                       precision recall f1-score support\n");
 8003a82:	f1a6 0514 	sub.w	r5, r6, #20
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003a86:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003a8a:	ed8d cb00 	vstr	d12, [sp]
 8003a8e:	f022 fba9 	bl	80261e4 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(3 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003a92:	f018 fff3 	bl	801ca7c <UTIL_LCD_GetFont>
 8003a96:	88c1      	ldrh	r1, [r0, #6]
 8003a98:	2303      	movs	r3, #3
 8003a9a:	aa3c      	add	r2, sp, #240	; 0xf0
 8003a9c:	00c9      	lsls	r1, r1, #3
 8003a9e:	2028      	movs	r0, #40	; 0x28
 8003aa0:	f019 f8e4 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003aa4:	4a89      	ldr	r2, [pc, #548]	; (8003ccc <TEST_GetNextValidationInput+0x934>)
 8003aa6:	498a      	ldr	r1, [pc, #552]	; (8003cd0 <TEST_GetNextValidationInput+0x938>)
 8003aa8:	a83c      	add	r0, sp, #240	; 0xf0
 8003aaa:	9706      	str	r7, [sp, #24]
 8003aac:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003ab0:	ed8d ab02 	vstr	d10, [sp, #8]
 8003ab4:	ed8d bb00 	vstr	d11, [sp]
 8003ab8:	f022 fb94 	bl	80261e4 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(4 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003abc:	f018 ffde 	bl	801ca7c <UTIL_LCD_GetFont>
 8003ac0:	88c1      	ldrh	r1, [r0, #6]
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	aa3c      	add	r2, sp, #240	; 0xf0
 8003ac6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003aca:	2028      	movs	r0, #40	; 0x28
 8003acc:	f019 f8ce 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003ad0:	4a80      	ldr	r2, [pc, #512]	; (8003cd4 <TEST_GetNextValidationInput+0x93c>)
 8003ad2:	497f      	ldr	r1, [pc, #508]	; (8003cd0 <TEST_GetNextValidationInput+0x938>)
 8003ad4:	a83c      	add	r0, sp, #240	; 0xf0
 8003ad6:	9706      	str	r7, [sp, #24]
 8003ad8:	ed8d 9b04 	vstr	d9, [sp, #16]
 8003adc:	ed8d db02 	vstr	d13, [sp, #8]
 8003ae0:	ed8d eb00 	vstr	d14, [sp]
 8003ae4:	f022 fb7e 	bl	80261e4 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(5 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003ae8:	f018 ffc8 	bl	801ca7c <UTIL_LCD_GetFont>
 8003aec:	88c1      	ldrh	r1, [r0, #6]
 8003aee:	aa3c      	add	r2, sp, #240	; 0xf0
 8003af0:	2303      	movs	r3, #3
 8003af2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003af6:	2028      	movs	r0, #40	; 0x28
 8003af8:	0049      	lsls	r1, r1, #1
 8003afa:	f019 f8b7 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003afe:	9b08      	ldr	r3, [sp, #32]
 8003b00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b02:	f7fe f88f 	bl	8001c24 <DISPLAY_Refresh>
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003b06:	220a      	movs	r2, #10
 8003b08:	4973      	ldr	r1, [pc, #460]	; (8003cd8 <TEST_GetNextValidationInput+0x940>)
 8003b0a:	a83c      	add	r0, sp, #240	; 0xf0
 8003b0c:	f016 fb14 	bl	801a138 <f_open>
  f_close(&File);
 8003b10:	a83c      	add	r0, sp, #240	; 0xf0
 8003b12:	f016 ff6b 	bl	801a9ec <f_close>
  f_open(&File, path, FA_OPEN_APPEND | FA_WRITE);
 8003b16:	4970      	ldr	r1, [pc, #448]	; (8003cd8 <TEST_GetNextValidationInput+0x940>)
 8003b18:	2232      	movs	r2, #50	; 0x32
 8003b1a:	a83c      	add	r0, sp, #240	; 0xf0
 8003b1c:	f016 fb0c 	bl	801a138 <f_open>
  f_printf(&File, "                       precision recall f1-score support\n");
 8003b20:	496e      	ldr	r1, [pc, #440]	; (8003cdc <TEST_GetNextValidationInput+0x944>)
 8003b22:	a83c      	add	r0, sp, #240	; 0xf0
 8003b24:	f017 fa36 	bl	801af94 <f_printf>
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003b28:	ecb4 5a01 	vldmia	r4!, {s10}
 8003b2c:	4649      	mov	r1, r9
 8003b2e:	f855 2b04 	ldr.w	r2, [r5], #4
 8003b32:	a810      	add	r0, sp, #64	; 0x40
 8003b34:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8003b38:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8003b3c:	ed94 7a04 	vldr	s14, [r4, #16]
 8003b40:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003b44:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003b48:	ed8d 5b00 	vstr	d5, [sp]
 8003b4c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8003b50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003b54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b56:	9306      	str	r3, [sp, #24]
 8003b58:	f022 fb44 	bl	80261e4 <siprintf>
    f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003b5c:	a810      	add	r0, sp, #64	; 0x40
 8003b5e:	f7fc fbc9 	bl	80002f4 <strlen>
 8003b62:	ab0f      	add	r3, sp, #60	; 0x3c
 8003b64:	4602      	mov	r2, r0
 8003b66:	a910      	add	r1, sp, #64	; 0x40
 8003b68:	a83c      	add	r0, sp, #240	; 0xf0
 8003b6a:	f016 fde9 	bl	801a740 <f_write>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003b6e:	42ae      	cmp	r6, r5
 8003b70:	d1da      	bne.n	8003b28 <TEST_GetNextValidationInput+0x790>
  f_printf(&File, "\n");
 8003b72:	495b      	ldr	r1, [pc, #364]	; (8003ce0 <TEST_GetNextValidationInput+0x948>)
 8003b74:	a83c      	add	r0, sp, #240	; 0xf0
 8003b76:	f017 fa0d 	bl	801af94 <f_printf>
  sprintf(line, "%20s %26.3f %4d\n", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003b7a:	4a51      	ldr	r2, [pc, #324]	; (8003cc0 <TEST_GetNextValidationInput+0x928>)
 8003b7c:	4959      	ldr	r1, [pc, #356]	; (8003ce4 <TEST_GetNextValidationInput+0x94c>)
 8003b7e:	a810      	add	r0, sp, #64	; 0x40
 8003b80:	9702      	str	r7, [sp, #8]
 8003b82:	f50b 658b 	add.w	r5, fp, #1112	; 0x458
    f_printf(&File, "%s,", NN_OUTPUT_CLASS_LIST[row]);
 8003b86:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8003d04 <TEST_GetNextValidationInput+0x96c>
      f_printf(&File, "%d,", value);
 8003b8a:	4e57      	ldr	r6, [pc, #348]	; (8003ce8 <TEST_GetNextValidationInput+0x950>)
    f_printf(&File, "\n");
 8003b8c:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8003ce0 <TEST_GetNextValidationInput+0x948>
  sprintf(line, "%20s %26.3f %4d\n", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003b90:	ed8d cb00 	vstr	d12, [sp]
 8003b94:	f022 fb26 	bl	80261e4 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003b98:	a810      	add	r0, sp, #64	; 0x40
 8003b9a:	f7fc fbab 	bl	80002f4 <strlen>
 8003b9e:	ab0f      	add	r3, sp, #60	; 0x3c
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	a910      	add	r1, sp, #64	; 0x40
 8003ba4:	a83c      	add	r0, sp, #240	; 0xf0
 8003ba6:	f016 fdcb 	bl	801a740 <f_write>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003baa:	4a48      	ldr	r2, [pc, #288]	; (8003ccc <TEST_GetNextValidationInput+0x934>)
 8003bac:	494f      	ldr	r1, [pc, #316]	; (8003cec <TEST_GetNextValidationInput+0x954>)
 8003bae:	a810      	add	r0, sp, #64	; 0x40
 8003bb0:	9706      	str	r7, [sp, #24]
 8003bb2:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003bb6:	ed8d ab02 	vstr	d10, [sp, #8]
 8003bba:	ed8d bb00 	vstr	d11, [sp]
 8003bbe:	f022 fb11 	bl	80261e4 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003bc2:	a810      	add	r0, sp, #64	; 0x40
 8003bc4:	f7fc fb96 	bl	80002f4 <strlen>
 8003bc8:	ab0f      	add	r3, sp, #60	; 0x3c
 8003bca:	4602      	mov	r2, r0
 8003bcc:	a910      	add	r1, sp, #64	; 0x40
 8003bce:	a83c      	add	r0, sp, #240	; 0xf0
 8003bd0:	f016 fdb6 	bl	801a740 <f_write>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "weighted avg", report->weighted_avg_precision,
 8003bd4:	4a3f      	ldr	r2, [pc, #252]	; (8003cd4 <TEST_GetNextValidationInput+0x93c>)
 8003bd6:	4945      	ldr	r1, [pc, #276]	; (8003cec <TEST_GetNextValidationInput+0x954>)
 8003bd8:	a810      	add	r0, sp, #64	; 0x40
 8003bda:	9706      	str	r7, [sp, #24]
  f_printf(&File, ",Predicted\n");
 8003bdc:	2701      	movs	r7, #1
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "weighted avg", report->weighted_avg_precision,
 8003bde:	ed8d 9b04 	vstr	d9, [sp, #16]
 8003be2:	ed8d db02 	vstr	d13, [sp, #8]
 8003be6:	ed8d eb00 	vstr	d14, [sp]
 8003bea:	f022 fafb 	bl	80261e4 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003bee:	a810      	add	r0, sp, #64	; 0x40
 8003bf0:	f7fc fb80 	bl	80002f4 <strlen>
 8003bf4:	ab0f      	add	r3, sp, #60	; 0x3c
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	a910      	add	r1, sp, #64	; 0x40
 8003bfa:	a83c      	add	r0, sp, #240	; 0xf0
 8003bfc:	f016 fda0 	bl	801a740 <f_write>
  f_close(&File);
 8003c00:	a83c      	add	r0, sp, #240	; 0xf0
 8003c02:	f016 fef3 	bl	801a9ec <f_close>
      TestContext_Ptr->ValidationContext.final_accuracy=report.accuracy;
 8003c06:	f20b 4344 	addw	r3, fp, #1092	; 0x444
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003c0a:	220a      	movs	r2, #10
 8003c0c:	4938      	ldr	r1, [pc, #224]	; (8003cf0 <TEST_GetNextValidationInput+0x958>)
      TestContext_Ptr->ValidationContext.final_accuracy=report.accuracy;
 8003c0e:	ed83 fa00 	vstr	s30, [r3]
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003c12:	a83c      	add	r0, sp, #240	; 0xf0
 8003c14:	f016 fa90 	bl	801a138 <f_open>
  f_close(&File);
 8003c18:	a83c      	add	r0, sp, #240	; 0xf0
 8003c1a:	f016 fee7 	bl	801a9ec <f_close>
  f_open(&File, path, FA_OPEN_APPEND | FA_WRITE);
 8003c1e:	2232      	movs	r2, #50	; 0x32
 8003c20:	4933      	ldr	r1, [pc, #204]	; (8003cf0 <TEST_GetNextValidationInput+0x958>)
 8003c22:	a83c      	add	r0, sp, #240	; 0xf0
 8003c24:	f016 fa88 	bl	801a138 <f_open>
  f_printf(&File, ",Confusion Matrix\n\n");
 8003c28:	4932      	ldr	r1, [pc, #200]	; (8003cf4 <TEST_GetNextValidationInput+0x95c>)
 8003c2a:	a83c      	add	r0, sp, #240	; 0xf0
 8003c2c:	f017 f9b2 	bl	801af94 <f_printf>
  f_printf(&File, ",Predicted\n");
 8003c30:	4931      	ldr	r1, [pc, #196]	; (8003cf8 <TEST_GetNextValidationInput+0x960>)
 8003c32:	a83c      	add	r0, sp, #240	; 0xf0
 8003c34:	f017 f9ae 	bl	801af94 <f_printf>
    f_printf(&File, "%s,", NN_OUTPUT_CLASS_LIST[row]);
 8003c38:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c3c:	4651      	mov	r1, sl
 8003c3e:	a83c      	add	r0, sp, #240	; 0xf0
 8003c40:	f1a5 0414 	sub.w	r4, r5, #20
 8003c44:	f017 f9a6 	bl	801af94 <f_printf>
      f_printf(&File, "%d,", value);
 8003c48:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8003c4c:	4631      	mov	r1, r6
 8003c4e:	a83c      	add	r0, sp, #240	; 0xf0
 8003c50:	f017 f9a0 	bl	801af94 <f_printf>
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 8003c54:	42ac      	cmp	r4, r5
 8003c56:	d1f7      	bne.n	8003c48 <TEST_GetNextValidationInput+0x8b0>
    if (row == NN_OUTPUT_CLASS_NUMBER / 2)
 8003c58:	2f03      	cmp	r7, #3
 8003c5a:	d018      	beq.n	8003c8e <TEST_GetNextValidationInput+0x8f6>
    f_printf(&File, "\n");
 8003c5c:	4649      	mov	r1, r9
 8003c5e:	a83c      	add	r0, sp, #240	; 0xf0
 8003c60:	f017 f998 	bl	801af94 <f_printf>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 8003c64:	2f05      	cmp	r7, #5
 8003c66:	d002      	beq.n	8003c6e <TEST_GetNextValidationInput+0x8d6>
 8003c68:	3701      	adds	r7, #1
 8003c6a:	3514      	adds	r5, #20
 8003c6c:	e7e4      	b.n	8003c38 <TEST_GetNextValidationInput+0x8a0>
  f_close(&File);
 8003c6e:	a83c      	add	r0, sp, #240	; 0xf0
 8003c70:	f016 febc 	bl	801a9ec <f_close>
      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003c74:	f8db 3520 	ldr.w	r3, [fp, #1312]	; 0x520
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d151      	bne.n	8003d20 <TEST_GetNextValidationInput+0x988>
      TestContext_Ptr->ValidationContext.validation_completed =1;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f8cb 3440 	str.w	r3, [fp, #1088]	; 0x440
}
 8003c82:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
 8003c86:	ecbd 8b10 	vpop	{d8-d15}
 8003c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      f_printf(&File, " Ground truth");
 8003c8e:	a83c      	add	r0, sp, #240	; 0xf0
 8003c90:	491a      	ldr	r1, [pc, #104]	; (8003cfc <TEST_GetNextValidationInput+0x964>)
 8003c92:	f017 f97f 	bl	801af94 <f_printf>
    f_printf(&File, "\n");
 8003c96:	4649      	mov	r1, r9
 8003c98:	a83c      	add	r0, sp, #240	; 0xf0
 8003c9a:	f017 f97b 	bl	801af94 <f_printf>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 8003c9e:	e7e3      	b.n	8003c68 <TEST_GetNextValidationInput+0x8d0>
 8003ca0:	ed9f 2a19 	vldr	s4, [pc, #100]	; 8003d08 <TEST_GetNextValidationInput+0x970>
 8003ca4:	ed9f cb02 	vldr	d12, [pc, #8]	; 8003cb0 <TEST_GetNextValidationInput+0x918>
  report.accuracy = 0.0f;
 8003ca8:	eeb0 fa42 	vmov.f32	s30, s4
 8003cac:	e62f      	b.n	800390e <TEST_GetNextValidationInput+0x576>
 8003cae:	bf00      	nop
	...
 8003cb8:	3e4ccccd 	.word	0x3e4ccccd
 8003cbc:	08029160 	.word	0x08029160
 8003cc0:	080291a0 	.word	0x080291a0
 8003cc4:	080291ac 	.word	0x080291ac
 8003cc8:	2400001c 	.word	0x2400001c
 8003ccc:	080291bc 	.word	0x080291bc
 8003cd0:	08029184 	.word	0x08029184
 8003cd4:	080291c8 	.word	0x080291c8
 8003cd8:	080291d8 	.word	0x080291d8
 8003cdc:	080291f4 	.word	0x080291f4
 8003ce0:	08029310 	.word	0x08029310
 8003ce4:	0802924c 	.word	0x0802924c
 8003ce8:	0802929c 	.word	0x0802929c
 8003cec:	08029230 	.word	0x08029230
 8003cf0:	08029260 	.word	0x08029260
 8003cf4:	08029278 	.word	0x08029278
 8003cf8:	0802928c 	.word	0x0802928c
 8003cfc:	080292a0 	.word	0x080292a0
 8003d00:	24000008 	.word	0x24000008
 8003d04:	08029298 	.word	0x08029298
 8003d08:	00000000 	.word	0x00000000
    if ((true_positives + false_negatives) != 0)
 8003d0c:	b96a      	cbnz	r2, 8003d2a <TEST_GetNextValidationInput+0x992>
    float recall = 0.0f;
 8003d0e:	ed5f 4a02 	vldr	s9, [pc, #-8]	; 8003d08 <TEST_GetNextValidationInput+0x970>
    float precision = 0.0f;
 8003d12:	eeb0 4a64 	vmov.f32	s8, s9
    float f1_score = 0.0f;
 8003d16:	eef0 5a64 	vmov.f32	s11, s9
 8003d1a:	eeb0 5a64 	vmov.f32	s10, s9
 8003d1e:	e5df      	b.n	80038e0 <TEST_GetNextValidationInput+0x548>
        HAL_Delay(1000);
 8003d20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d24:	f009 fe7e 	bl	800da24 <HAL_Delay>
 8003d28:	e7a8      	b.n	8003c7c <TEST_GetNextValidationInput+0x8e4>
      precision = true_positives / (float)(true_positives + false_positives);
 8003d2a:	ee07 0a10 	vmov	s14, r0
    float precision = 0.0f;
 8003d2e:	ed5f 5a0a 	vldr	s11, [pc, #-40]	; 8003d08 <TEST_GetNextValidationInput+0x970>
      precision = true_positives / (float)(true_positives + false_positives);
 8003d32:	eeb8 2a47 	vcvt.f32.u32	s4, s14
 8003d36:	e5be      	b.n	80038b6 <TEST_GetNextValidationInput+0x51e>
    float recall = 0.0f;
 8003d38:	ed5f 4a0d 	vldr	s9, [pc, #-52]	; 8003d08 <TEST_GetNextValidationInput+0x970>
      precision = true_positives / (float)(true_positives + false_positives);
 8003d3c:	eeb0 4a65 	vmov.f32	s8, s11
 8003d40:	eeb0 5a64 	vmov.f32	s10, s9
 8003d44:	e5c1      	b.n	80038ca <TEST_GetNextValidationInput+0x532>
 8003d46:	eef0 2a63 	vmov.f32	s5, s7
    float recall = 0.0f;
 8003d4a:	ed1f 3a11 	vldr	s6, [pc, #-68]	; 8003d08 <TEST_GetNextValidationInput+0x970>
 8003d4e:	e57c      	b.n	800384a <TEST_GetNextValidationInput+0x4b2>
      precision = true_positives / (float)(true_positives + false_positives);
 8003d50:	ee07 0a10 	vmov	s14, r0
    float precision = 0.0f;
 8003d54:	ed5f 3a14 	vldr	s7, [pc, #-80]	; 8003d08 <TEST_GetNextValidationInput+0x970>
      precision = true_positives / (float)(true_positives + false_positives);
 8003d58:	eef8 5a47 	vcvt.f32.u32	s11, s14
 8003d5c:	e56b      	b.n	8003836 <TEST_GetNextValidationInput+0x49e>
 8003d5e:	eef0 8a61 	vmov.f32	s17, s3
    float recall = 0.0f;
 8003d62:	ed1f 1a17 	vldr	s2, [pc, #-92]	; 8003d08 <TEST_GetNextValidationInput+0x970>
 8003d66:	e520      	b.n	80037aa <TEST_GetNextValidationInput+0x412>
      precision = true_positives / (float)(true_positives + false_positives);
 8003d68:	ee07 7a10 	vmov	s14, r7
    float precision = 0.0f;
 8003d6c:	ed5f 1a1a 	vldr	s3, [pc, #-104]	; 8003d08 <TEST_GetNextValidationInput+0x970>
      precision = true_positives / (float)(true_positives + false_positives);
 8003d70:	eef8 5a47 	vcvt.f32.u32	s11, s14
 8003d74:	e50f      	b.n	8003796 <TEST_GetNextValidationInput+0x3fe>
 8003d76:	eeb0 6a67 	vmov.f32	s12, s15
    float recall = 0.0f;
 8003d7a:	ed5f 6a1d 	vldr	s13, [pc, #-116]	; 8003d08 <TEST_GetNextValidationInput+0x970>
 8003d7e:	e4c0      	b.n	8003702 <TEST_GetNextValidationInput+0x36a>
      precision = true_positives / (float)(true_positives + false_positives);
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eef8 5a67 	vcvt.f32.u32	s11, s15
    float precision = 0.0f;
 8003d88:	ed5f 7a21 	vldr	s15, [pc, #-132]	; 8003d08 <TEST_GetNextValidationInput+0x970>
 8003d8c:	e4af      	b.n	80036ee <TEST_GetNextValidationInput+0x356>
      precision = true_positives / (float)(true_positives + false_positives);
 8003d8e:	eeb0 9a48 	vmov.f32	s18, s16
    float recall = 0.0f;
 8003d92:	ed5f 0a23 	vldr	s1, [pc, #-140]	; 8003d08 <TEST_GetNextValidationInput+0x970>
 8003d96:	e451      	b.n	800363c <TEST_GetNextValidationInput+0x2a4>
      precision = true_positives / (float)(true_positives + false_positives);
 8003d98:	ee07 ca90 	vmov	s15, ip
    float precision = 0.0f;
 8003d9c:	ed1f 8a26 	vldr	s16, [pc, #-152]	; 8003d08 <TEST_GetNextValidationInput+0x970>
      precision = true_positives / (float)(true_positives + false_positives);
 8003da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003da4:	e440      	b.n	8003628 <TEST_GetNextValidationInput+0x290>
 8003da6:	bf00      	nop

08003da8 <TEST_Run>:
  uint8_t sd_error;
  stm32fs_err_t ret;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;


  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003da8:	2903      	cmp	r1, #3
{
 8003daa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dae:	4604      	mov	r4, r0
 8003db0:	b0da      	sub	sp, #360	; 0x168
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003db2:	f8d0 55fc 	ldr.w	r5, [r0, #1532]	; 0x5fc
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003db6:	d04d      	beq.n	8003e54 <TEST_Run+0xac>
        }
      }
      break;
    }
  }
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003db8:	2904      	cmp	r1, #4
 8003dba:	d002      	beq.n	8003dc2 <TEST_Run+0x1a>

    default:
      break;
    }
  }
}
 8003dbc:	b05a      	add	sp, #360	; 0x168
 8003dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003dc2:	f8d0 35dc 	ldr.w	r3, [r0, #1500]	; 0x5dc
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d1f8      	bne.n	8003dbc <TEST_Run+0x14>
 8003dca:	f8d0 15c8 	ldr.w	r1, [r0, #1480]	; 0x5c8
 8003dce:	2900      	cmp	r1, #0
 8003dd0:	d0f4      	beq.n	8003dbc <TEST_Run+0x14>
    switch(TestContext_Ptr->CaptureContext.capture_state)
 8003dd2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	f000 818a 	beq.w	80040f0 <TEST_Run+0x348>
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d1ed      	bne.n	8003dbc <TEST_Run+0x14>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003de0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003de2:	7d13      	ldrb	r3, [r2, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0fc      	beq.n	8003de2 <TEST_Run+0x3a>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 8003de8:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	f000 82f4 	beq.w	80043da <TEST_Run+0x632>
      if(TestContext_Ptr->CaptureContext.capture_file_format == BMP)
 8003df2:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	f000 82e3 	beq.w	80043c2 <TEST_Run+0x61a>
      else if(TestContext_Ptr->CaptureContext.capture_file_format == RAW)
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	f040 80de 	bne.w	8003fbe <TEST_Run+0x216>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8003e02:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 8003e06:	a834      	add	r0, sp, #208	; 0xd0
 8003e08:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 8003e0c:	49ad      	ldr	r1, [pc, #692]	; (80040c4 <TEST_Run+0x31c>)
 8003e0e:	9200      	str	r2, [sp, #0]
 8003e10:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8003e14:	f022 f9e6 	bl	80261e4 <siprintf>
        ret = STM32Fs_WriteRaw(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);
 8003e18:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
 8003e1c:	a834      	add	r0, sp, #208	; 0xd0
 8003e1e:	f8d4 25d4 	ldr.w	r2, [r4, #1492]	; 0x5d4
 8003e22:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 8003e26:	fb03 f202 	mul.w	r2, r3, r2
 8003e2a:	f018 f85b 	bl	801bee4 <STM32Fs_WriteRaw>
      if (ret != STM32FS_ERROR_NONE)
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	d0c4      	beq.n	8003dbc <TEST_Run+0x14>
        UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. Writting image failed", CENTER_MODE);
 8003e32:	f018 fe23 	bl	801ca7c <UTIL_LCD_GetFont>
 8003e36:	88c1      	ldrh	r1, [r0, #6]
 8003e38:	2301      	movs	r3, #1
 8003e3a:	4aa3      	ldr	r2, [pc, #652]	; (80040c8 <TEST_Run+0x320>)
 8003e3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003e40:	2000      	movs	r0, #0
 8003e42:	0089      	lsls	r1, r1, #2
 8003e44:	f018 ff12 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003e48:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003e4a:	f7fd feeb 	bl	8001c24 <DISPLAY_Refresh>
        Error_Handler();
 8003e4e:	f001 f921 	bl	8005094 <Error_Handler>
}
 8003e52:	e7b3      	b.n	8003dbc <TEST_Run+0x14>
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003e54:	f8d0 35c8 	ldr.w	r3, [r0, #1480]	; 0x5c8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0af      	beq.n	8003dbc <TEST_Run+0x14>
    switch(TestContext_Ptr->DumpContext.dump_state)
 8003e5c:	f8d0 60b8 	ldr.w	r6, [r0, #184]	; 0xb8
 8003e60:	2e01      	cmp	r6, #1
 8003e62:	d02f      	beq.n	8003ec4 <TEST_Run+0x11c>
 8003e64:	2e02      	cmp	r6, #2
 8003e66:	d1a9      	bne.n	8003dbc <TEST_Run+0x14>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 8003e68:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003e6a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
 8003e6e:	2a00      	cmp	r2, #0
 8003e70:	f000 8095 	beq.w	8003f9e <TEST_Run+0x1f6>
 8003e74:	f893 3526 	ldrb.w	r3, [r3, #1318]	; 0x526
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	f040 8090 	bne.w	8003f9e <TEST_Run+0x1f6>
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003e7e:	2600      	movs	r6, #0
 8003e80:	e006      	b.n	8003e90 <TEST_Run+0xe8>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003e82:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003e84:	6813      	ldr	r3, [r2, #0]
 8003e86:	1c59      	adds	r1, r3, #1
 8003e88:	6011      	str	r1, [r2, #0]
 8003e8a:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003e8c:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003e8e:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003e90:	f8d4 75cc 	ldr.w	r7, [r4, #1484]	; 0x5cc
 8003e94:	4638      	mov	r0, r7
 8003e96:	f7fc fa2d 	bl	80002f4 <strlen>
 8003e9a:	42b0      	cmp	r0, r6
 8003e9c:	d8f1      	bhi.n	8003e82 <TEST_Run+0xda>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003e9e:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d08a      	beq.n	8003dbc <TEST_Run+0x14>
 8003ea6:	2300      	movs	r3, #0
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003ea8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8003eaa:	f8d4 05c8 	ldr.w	r0, [r4, #1480]	; 0x5c8
 8003eae:	680a      	ldr	r2, [r1, #0]
 8003eb0:	1c56      	adds	r6, r2, #1
 8003eb2:	600e      	str	r6, [r1, #0]
 8003eb4:	5cc1      	ldrb	r1, [r0, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003eb6:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003eb8:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003eba:	f8d4 25d8 	ldr.w	r2, [r4, #1496]	; 0x5d8
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d8f2      	bhi.n	8003ea8 <TEST_Run+0x100>
 8003ec2:	e77b      	b.n	8003dbc <TEST_Run+0x14>
      BSP_LED_Off(LED_GREEN);
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f006 feff 	bl	800acc8 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8003eca:	2002      	movs	r0, #2
 8003ecc:	f006 feea 	bl	800aca4 <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP BUSY ", RIGHT_MODE);
 8003ed0:	f018 fdd4 	bl	801ca7c <UTIL_LCD_GetFont>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	88c1      	ldrh	r1, [r0, #6]
 8003ed8:	2000      	movs	r0, #0
 8003eda:	4a7c      	ldr	r2, [pc, #496]	; (80040cc <TEST_Run+0x324>)
 8003edc:	f018 fec6 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8003ee0:	ed95 7a04 	vldr	s14, [r5, #16]
 8003ee4:	eddf 7a7a 	vldr	s15, [pc, #488]	; 80040d0 <TEST_Run+0x328>
 8003ee8:	a802      	add	r0, sp, #8
 8003eea:	68ea      	ldr	r2, [r5, #12]
 8003eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ef0:	4978      	ldr	r1, [pc, #480]	; (80040d4 <TEST_Run+0x32c>)
 8003ef2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003ef6:	ed8d 7b00 	vstr	d7, [sp]
 8003efa:	f022 f973 	bl	80261e4 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 8003efe:	f018 fdbd 	bl	801ca7c <UTIL_LCD_GetFont>
 8003f02:	88c1      	ldrh	r1, [r0, #6]
 8003f04:	4633      	mov	r3, r6
 8003f06:	aa02      	add	r2, sp, #8
 8003f08:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8003f12:	f018 feab 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8003f16:	68aa      	ldr	r2, [r5, #8]
 8003f18:	496f      	ldr	r1, [pc, #444]	; (80040d8 <TEST_Run+0x330>)
 8003f1a:	a802      	add	r0, sp, #8
 8003f1c:	f022 f962 	bl	80261e4 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 8003f20:	f018 fdac 	bl	801ca7c <UTIL_LCD_GetFont>
 8003f24:	88c1      	ldrh	r1, [r0, #6]
 8003f26:	aa02      	add	r2, sp, #8
 8003f28:	4633      	mov	r3, r6
 8003f2a:	0109      	lsls	r1, r1, #4
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	f018 fe9d 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003f32:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003f34:	f7fd fe76 	bl	8001c24 <DISPLAY_Refresh>
      HAL_Delay(200);
 8003f38:	20c8      	movs	r0, #200	; 0xc8
 8003f3a:	f009 fd73 	bl	800da24 <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003f3e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003f40:	7d13      	ldrb	r3, [r2, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0fc      	beq.n	8003f40 <TEST_Run+0x198>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 8003f46:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003f48:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
 8003f4c:	2a00      	cmp	r2, #0
 8003f4e:	d03b      	beq.n	8003fc8 <TEST_Run+0x220>
 8003f50:	f893 2526 	ldrb.w	r2, [r3, #1318]	; 0x526
 8003f54:	2a01      	cmp	r2, #1
 8003f56:	d137      	bne.n	8003fc8 <TEST_Run+0x220>
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003f58:	2600      	movs	r6, #0
 8003f5a:	e006      	b.n	8003f6a <TEST_Run+0x1c2>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003f5c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003f5e:	6813      	ldr	r3, [r2, #0]
 8003f60:	1c59      	adds	r1, r3, #1
 8003f62:	6011      	str	r1, [r2, #0]
 8003f64:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003f66:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003f68:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003f6a:	f8d4 75cc 	ldr.w	r7, [r4, #1484]	; 0x5cc
 8003f6e:	4638      	mov	r0, r7
 8003f70:	f7fc f9c0 	bl	80002f4 <strlen>
 8003f74:	42b0      	cmp	r0, r6
 8003f76:	d8f1      	bhi.n	8003f5c <TEST_Run+0x1b4>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003f78:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d050      	beq.n	8004022 <TEST_Run+0x27a>
 8003f80:	2300      	movs	r3, #0
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003f82:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8003f84:	f8d4 05c8 	ldr.w	r0, [r4, #1480]	; 0x5c8
 8003f88:	680a      	ldr	r2, [r1, #0]
 8003f8a:	1c56      	adds	r6, r2, #1
 8003f8c:	600e      	str	r6, [r1, #0]
 8003f8e:	5cc1      	ldrb	r1, [r0, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003f90:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003f92:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003f94:	f8d4 25d8 	ldr.w	r2, [r4, #1496]	; 0x5d8
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d8f2      	bhi.n	8003f82 <TEST_Run+0x1da>
 8003f9c:	e041      	b.n	8004022 <TEST_Run+0x27a>
        if(TestContext_Ptr->TestRunContext.DumpFormat == GRAY8)
 8003f9e:	f894 35e0 	ldrb.w	r3, [r4, #1504]	; 0x5e0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d05a      	beq.n	800405c <TEST_Run+0x2b4>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == BMP565)
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	f000 80ed 	beq.w	8004186 <TEST_Run+0x3de>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == BMP888)
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	f000 817e 	beq.w	80042ae <TEST_Run+0x506>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == RAW)
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	f000 819e 	beq.w	80042f4 <TEST_Run+0x54c>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == TXT)
 8003fb8:	2b05      	cmp	r3, #5
 8003fba:	f000 80f8 	beq.w	80041ae <TEST_Run+0x406>
}
 8003fbe:	b05a      	add	sp, #360	; 0x168
 8003fc0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
          Error_Handler(); /* DumpFormat no supported */
 8003fc4:	f001 b866 	b.w	8005094 <Error_Handler>
        if(App_Cxt_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 8003fc8:	791b      	ldrb	r3, [r3, #4]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d12d      	bne.n	800402a <TEST_Run+0x282>
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 8003fce:	f104 0108 	add.w	r1, r4, #8
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003fd2:	f104 0754 	add.w	r7, r4, #84	; 0x54
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 8003fd6:	f504 60bd 	add.w	r0, r4, #1512	; 0x5e8
 8003fda:	f00f ffbd 	bl	8013f58 <HAL_RNG_GenerateRandomNumber>
        sprintf(TestContext_Ptr->DumpContext.dump_session_name, "Session %X", (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003fde:	68a2      	ldr	r2, [r4, #8]
 8003fe0:	493e      	ldr	r1, [pc, #248]	; (80040dc <TEST_Run+0x334>)
 8003fe2:	f104 0010 	add.w	r0, r4, #16
 8003fe6:	f022 f8fd 	bl	80261e4 <siprintf>
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003fea:	68a3      	ldr	r3, [r4, #8]
 8003fec:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8003ff0:	493b      	ldr	r1, [pc, #236]	; (80040e0 <TEST_Run+0x338>)
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	f022 f8f6 	bl	80261e4 <siprintf>
        STM32Fs_CreateDir(TestContext_Ptr->DumpContext.dump_session_folder_name);
 8003ff8:	4638      	mov	r0, r7
 8003ffa:	f017 ff4b 	bl	801be94 <STM32Fs_CreateDir>
        if(TestContext_Ptr->TestRunContext.DumpFormat == GRAY8)
 8003ffe:	f894 35e0 	ldrb.w	r3, [r4, #1504]	; 0x5e0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d03c      	beq.n	8004080 <TEST_Run+0x2d8>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == BMP888)
 8004006:	2b02      	cmp	r3, #2
 8004008:	f000 80ac 	beq.w	8004164 <TEST_Run+0x3bc>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == BMP565)
 800400c:	2b01      	cmp	r3, #1
 800400e:	f000 813b 	beq.w	8004288 <TEST_Run+0x4e0>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == RAW)
 8004012:	2b03      	cmp	r3, #3
 8004014:	f000 8177 	beq.w	8004306 <TEST_Run+0x55e>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == TXT)
 8004018:	2b05      	cmp	r3, #5
 800401a:	f000 80ff 	beq.w	800421c <TEST_Run+0x474>
          Error_Handler();
 800401e:	f001 f839 	bl	8005094 <Error_Handler>
      TestContext_Ptr->DumpContext.dump_state = 2;
 8004022:	2302      	movs	r3, #2
 8004024:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      break;
 8004028:	e6c8      	b.n	8003dbc <TEST_Run+0x14>
          BSP_CAMERA_DeInit(0);
 800402a:	2000      	movs	r0, #0
 800402c:	f007 ffe8 	bl	800c000 <BSP_CAMERA_DeInit>
          if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8004030:	2000      	movs	r0, #0
 8004032:	f009 fbb1 	bl	800d798 <BSP_SD_Init>
 8004036:	2800      	cmp	r0, #0
 8004038:	d0c9      	beq.n	8003fce <TEST_Run+0x226>
            UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 800403a:	f018 fd1f 	bl	801ca7c <UTIL_LCD_GetFont>
 800403e:	88c1      	ldrh	r1, [r0, #6]
 8004040:	2301      	movs	r3, #1
 8004042:	4a28      	ldr	r2, [pc, #160]	; (80040e4 <TEST_Run+0x33c>)
 8004044:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004048:	2000      	movs	r0, #0
 800404a:	0089      	lsls	r1, r1, #2
 800404c:	f018 fe0e 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
            DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004050:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004052:	f7fd fde7 	bl	8001c24 <DISPLAY_Refresh>
            Error_Handler();
 8004056:	f001 f81d 	bl	8005094 <Error_Handler>
 800405a:	e7b8      	b.n	8003fce <TEST_Run+0x226>
          sprintf(file_name, "%s/%s.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 800405c:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 8004060:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8004064:	4920      	ldr	r1, [pc, #128]	; (80040e8 <TEST_Run+0x340>)
 8004066:	a834      	add	r0, sp, #208	; 0xd0
 8004068:	f022 f8bc 	bl	80261e4 <siprintf>
          ret = STM32Fs_WriteImageBMPGray(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size);
 800406c:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
 8004070:	f8d4 25d0 	ldr.w	r2, [r4, #1488]	; 0x5d0
 8004074:	a834      	add	r0, sp, #208	; 0xd0
 8004076:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 800407a:	f018 f96f 	bl	801c35c <STM32Fs_WriteImageBMPGray>
 800407e:	e6d6      	b.n	8003e2e <TEST_Run+0x86>
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8004080:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 8004084:	463a      	mov	r2, r7
 8004086:	4919      	ldr	r1, [pc, #100]	; (80040ec <TEST_Run+0x344>)
 8004088:	a834      	add	r0, sp, #208	; 0xd0
 800408a:	f022 f8ab 	bl	80261e4 <siprintf>
          ret = STM32Fs_WriteImageBMPGray(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size);
 800408e:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
 8004092:	f8d4 25d0 	ldr.w	r2, [r4, #1488]	; 0x5d0
 8004096:	a834      	add	r0, sp, #208	; 0xd0
 8004098:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 800409c:	f018 f95e 	bl	801c35c <STM32Fs_WriteImageBMPGray>
        if (ret != STM32FS_ERROR_NONE)
 80040a0:	2800      	cmp	r0, #0
 80040a2:	d0be      	beq.n	8004022 <TEST_Run+0x27a>
          UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. Writting image failed", CENTER_MODE);
 80040a4:	f018 fcea 	bl	801ca7c <UTIL_LCD_GetFont>
 80040a8:	88c1      	ldrh	r1, [r0, #6]
 80040aa:	2301      	movs	r3, #1
 80040ac:	4a06      	ldr	r2, [pc, #24]	; (80040c8 <TEST_Run+0x320>)
 80040ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80040b2:	2000      	movs	r0, #0
 80040b4:	0089      	lsls	r1, r1, #2
 80040b6:	f018 fdd9 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
          DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80040ba:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80040bc:	f7fd fdb2 	bl	8001c24 <DISPLAY_Refresh>
 80040c0:	e7ad      	b.n	800401e <TEST_Run+0x276>
 80040c2:	bf00      	nop
 80040c4:	0802936c 	.word	0x0802936c
 80040c8:	08029320 	.word	0x08029320
 80040cc:	080292b0 	.word	0x080292b0
 80040d0:	42c80000 	.word	0x42c80000
 80040d4:	08028cc4 	.word	0x08028cc4
 80040d8:	08028cd0 	.word	0x08028cd0
 80040dc:	08028df0 	.word	0x08028df0
 80040e0:	080292bc 	.word	0x080292bc
 80040e4:	08028dfc 	.word	0x08028dfc
 80040e8:	08029340 	.word	0x08029340
 80040ec:	080292cc 	.word	0x080292cc
      BSP_LED_Off(LED_GREEN);
 80040f0:	2000      	movs	r0, #0
 80040f2:	f006 fde9 	bl	800acc8 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 80040f6:	2002      	movs	r0, #2
 80040f8:	f006 fdd4 	bl	800aca4 <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE BUSY ", RIGHT_MODE);
 80040fc:	f018 fcbe 	bl	801ca7c <UTIL_LCD_GetFont>
 8004100:	4abb      	ldr	r2, [pc, #748]	; (80043f0 <TEST_Run+0x648>)
 8004102:	88c1      	ldrh	r1, [r0, #6]
 8004104:	2302      	movs	r3, #2
 8004106:	2000      	movs	r0, #0
 8004108:	f018 fdb0 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800410c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800410e:	f7fd fd89 	bl	8001c24 <DISPLAY_Refresh>
      HAL_Delay(200);
 8004112:	20c8      	movs	r0, #200	; 0xc8
 8004114:	f009 fc86 	bl	800da24 <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8004118:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800411a:	7d13      	ldrb	r3, [r2, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0fc      	beq.n	800411a <TEST_Run+0x372>
      BSP_CAMERA_DeInit(0);
 8004120:	2000      	movs	r0, #0
 8004122:	f007 ff6d 	bl	800c000 <BSP_CAMERA_DeInit>
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 8004126:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 800412a:	2000      	movs	r0, #0
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 800412c:	3301      	adds	r3, #1
 800412e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 8004132:	f009 fb31 	bl	800d798 <BSP_SD_Init>
      if (sd_error != BSP_ERROR_NONE)
 8004136:	b2c0      	uxtb	r0, r0
 8004138:	2800      	cmp	r0, #0
 800413a:	f040 80ca 	bne.w	80042d2 <TEST_Run+0x52a>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 800413e:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 8004142:	2b01      	cmp	r3, #1
 8004144:	f000 811a 	beq.w	800437c <TEST_Run+0x5d4>
      if(TestContext_Ptr->CaptureContext.capture_file_format == BMP)
 8004148:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 800414c:	2b04      	cmp	r3, #4
 800414e:	f000 8121 	beq.w	8004394 <TEST_Run+0x5ec>
      else if(TestContext_Ptr->CaptureContext.capture_file_format == RAW)
 8004152:	2b03      	cmp	r3, #3
 8004154:	f000 80ea 	beq.w	800432c <TEST_Run+0x584>
        Error_Handler();
 8004158:	f000 ff9c 	bl	8005094 <Error_Handler>
      TestContext_Ptr->CaptureContext.capture_state = 2;
 800415c:	2302      	movs	r3, #2
 800415e:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
      break;
 8004162:	e62b      	b.n	8003dbc <TEST_Run+0x14>
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8004164:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 8004168:	463a      	mov	r2, r7
 800416a:	49a2      	ldr	r1, [pc, #648]	; (80043f4 <TEST_Run+0x64c>)
 800416c:	a834      	add	r0, sp, #208	; 0xd0
 800416e:	f022 f839 	bl	80261e4 <siprintf>
          ret = STM32Fs_WriteImageBMP(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size);
 8004172:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
 8004176:	f8d4 25d0 	ldr.w	r2, [r4, #1488]	; 0x5d0
 800417a:	a834      	add	r0, sp, #208	; 0xd0
 800417c:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 8004180:	f017 fed4 	bl	801bf2c <STM32Fs_WriteImageBMP>
 8004184:	e78c      	b.n	80040a0 <TEST_Run+0x2f8>
          sprintf(file_name, "%s/%s.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8004186:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 800418a:	f104 0254 	add.w	r2, r4, #84	; 0x54
 800418e:	499a      	ldr	r1, [pc, #616]	; (80043f8 <TEST_Run+0x650>)
 8004190:	a834      	add	r0, sp, #208	; 0xd0
 8004192:	f022 f827 	bl	80261e4 <siprintf>
          ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 8004196:	2200      	movs	r2, #0
 8004198:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
 800419c:	a834      	add	r0, sp, #208	; 0xd0
 800419e:	9200      	str	r2, [sp, #0]
 80041a0:	f8d4 25d0 	ldr.w	r2, [r4, #1488]	; 0x5d0
 80041a4:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 80041a8:	f017 ff1c 	bl	801bfe4 <STM32Fs_WriteImageBMP16>
 80041ac:	e63f      	b.n	8003e2e <TEST_Run+0x86>
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80041ae:	ae34      	add	r6, sp, #208	; 0xd0
 80041b0:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 80041b4:	f104 0254 	add.w	r2, r4, #84	; 0x54
 80041b8:	4990      	ldr	r1, [pc, #576]	; (80043fc <TEST_Run+0x654>)
 80041ba:	4630      	mov	r0, r6
 80041bc:	f022 f812 	bl	80261e4 <siprintf>
          ret = STM32Fs_WriteTextToFile(file_name, "          Neural Network Output\n\n", STM32FS_CREATE_NEW_FILE);
 80041c0:	2200      	movs	r2, #0
 80041c2:	498f      	ldr	r1, [pc, #572]	; (8004400 <TEST_Run+0x658>)
 80041c4:	4630      	mov	r0, r6
 80041c6:	f018 fa21 	bl	801c60c <STM32Fs_WriteTextToFile>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 80041ca:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
 80041ce:	089b      	lsrs	r3, r3, #2
 80041d0:	f43f ae2d 	beq.w	8003e2e <TEST_Run+0x86>
 80041d4:	f8df a240 	ldr.w	sl, [pc, #576]	; 8004418 <TEST_Run+0x670>
 80041d8:	f04f 0800 	mov.w	r8, #0
 80041dc:	af14      	add	r7, sp, #80	; 0x50
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 80041de:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800441c <TEST_Run+0x674>
 80041e2:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 80041e6:	4649      	mov	r1, r9
 80041e8:	f85a 2b04 	ldr.w	r2, [sl], #4
 80041ec:	4638      	mov	r0, r7
 80041ee:	eb03 0388 	add.w	r3, r3, r8, lsl #2
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 80041f2:	f108 0801 	add.w	r8, r8, #1
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 80041f6:	ed93 7a00 	vldr	s14, [r3]
 80041fa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80041fe:	ed8d 7b00 	vstr	d7, [sp]
 8004202:	f021 ffef 	bl	80261e4 <siprintf>
            ret = STM32Fs_WriteTextToFile(file_name, str, STM32FS_APPEND_TO_FILE);
 8004206:	2201      	movs	r2, #1
 8004208:	4639      	mov	r1, r7
 800420a:	4630      	mov	r0, r6
 800420c:	f018 f9fe 	bl	801c60c <STM32Fs_WriteTextToFile>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 8004210:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
 8004214:	ebb8 0f93 	cmp.w	r8, r3, lsr #2
 8004218:	d3e3      	bcc.n	80041e2 <TEST_Run+0x43a>
 800421a:	e608      	b.n	8003e2e <TEST_Run+0x86>
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 800421c:	ae34      	add	r6, sp, #208	; 0xd0
 800421e:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 8004222:	463a      	mov	r2, r7
 8004224:	4975      	ldr	r1, [pc, #468]	; (80043fc <TEST_Run+0x654>)
 8004226:	4630      	mov	r0, r6
 8004228:	f021 ffdc 	bl	80261e4 <siprintf>
          ret = STM32Fs_WriteTextToFile(file_name, "          Neural Network Output\n\n", STM32FS_CREATE_NEW_FILE);
 800422c:	2200      	movs	r2, #0
 800422e:	4974      	ldr	r1, [pc, #464]	; (8004400 <TEST_Run+0x658>)
 8004230:	4630      	mov	r0, r6
 8004232:	f018 f9eb 	bl	801c60c <STM32Fs_WriteTextToFile>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 8004236:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
 800423a:	089b      	lsrs	r3, r3, #2
 800423c:	f43f af30 	beq.w	80040a0 <TEST_Run+0x2f8>
 8004240:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8004418 <TEST_Run+0x670>
 8004244:	f04f 0800 	mov.w	r8, #0
 8004248:	af14      	add	r7, sp, #80	; 0x50
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 800424a:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800441c <TEST_Run+0x674>
 800424e:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 8004252:	4649      	mov	r1, r9
 8004254:	f85a 2b04 	ldr.w	r2, [sl], #4
 8004258:	4638      	mov	r0, r7
 800425a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 800425e:	f108 0801 	add.w	r8, r8, #1
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8004262:	ed93 7a00 	vldr	s14, [r3]
 8004266:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800426a:	ed8d 7b00 	vstr	d7, [sp]
 800426e:	f021 ffb9 	bl	80261e4 <siprintf>
            ret = STM32Fs_WriteTextToFile(file_name, str, STM32FS_APPEND_TO_FILE);
 8004272:	2201      	movs	r2, #1
 8004274:	4639      	mov	r1, r7
 8004276:	4630      	mov	r0, r6
 8004278:	f018 f9c8 	bl	801c60c <STM32Fs_WriteTextToFile>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 800427c:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
 8004280:	ebb8 0f93 	cmp.w	r8, r3, lsr #2
 8004284:	d3e3      	bcc.n	800424e <TEST_Run+0x4a6>
 8004286:	e70b      	b.n	80040a0 <TEST_Run+0x2f8>
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8004288:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 800428c:	463a      	mov	r2, r7
 800428e:	4959      	ldr	r1, [pc, #356]	; (80043f4 <TEST_Run+0x64c>)
 8004290:	a834      	add	r0, sp, #208	; 0xd0
 8004292:	f021 ffa7 	bl	80261e4 <siprintf>
          ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 8004296:	2200      	movs	r2, #0
 8004298:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
 800429c:	a834      	add	r0, sp, #208	; 0xd0
 800429e:	9200      	str	r2, [sp, #0]
 80042a0:	f8d4 25d0 	ldr.w	r2, [r4, #1488]	; 0x5d0
 80042a4:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 80042a8:	f017 fe9c 	bl	801bfe4 <STM32Fs_WriteImageBMP16>
 80042ac:	e6f8      	b.n	80040a0 <TEST_Run+0x2f8>
          sprintf(file_name, "%s/%s.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80042ae:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 80042b2:	f104 0254 	add.w	r2, r4, #84	; 0x54
 80042b6:	4950      	ldr	r1, [pc, #320]	; (80043f8 <TEST_Run+0x650>)
 80042b8:	a834      	add	r0, sp, #208	; 0xd0
 80042ba:	f021 ff93 	bl	80261e4 <siprintf>
        ret = STM32Fs_WriteImageBMP(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size);
 80042be:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
 80042c2:	a834      	add	r0, sp, #208	; 0xd0
 80042c4:	f8d4 25d0 	ldr.w	r2, [r4, #1488]	; 0x5d0
 80042c8:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 80042cc:	f017 fe2e 	bl	801bf2c <STM32Fs_WriteImageBMP>
 80042d0:	e5ad      	b.n	8003e2e <TEST_Run+0x86>
        UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 80042d2:	f018 fbd3 	bl	801ca7c <UTIL_LCD_GetFont>
 80042d6:	88c1      	ldrh	r1, [r0, #6]
 80042d8:	2301      	movs	r3, #1
 80042da:	4a4a      	ldr	r2, [pc, #296]	; (8004404 <TEST_Run+0x65c>)
 80042dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80042e0:	2000      	movs	r0, #0
 80042e2:	0089      	lsls	r1, r1, #2
 80042e4:	f018 fcc2 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80042e8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80042ea:	f7fd fc9b 	bl	8001c24 <DISPLAY_Refresh>
        Error_Handler();
 80042ee:	f000 fed1 	bl	8005094 <Error_Handler>
 80042f2:	e724      	b.n	800413e <TEST_Run+0x396>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80042f4:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 80042f8:	f104 0254 	add.w	r2, r4, #84	; 0x54
 80042fc:	4942      	ldr	r1, [pc, #264]	; (8004408 <TEST_Run+0x660>)
 80042fe:	a834      	add	r0, sp, #208	; 0xd0
 8004300:	f021 ff70 	bl	80261e4 <siprintf>
          ret = STM32Fs_WriteRaw(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);
 8004304:	e588      	b.n	8003e18 <TEST_Run+0x70>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8004306:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 800430a:	463a      	mov	r2, r7
 800430c:	493e      	ldr	r1, [pc, #248]	; (8004408 <TEST_Run+0x660>)
 800430e:	a834      	add	r0, sp, #208	; 0xd0
 8004310:	f021 ff68 	bl	80261e4 <siprintf>
          ret = STM32Fs_WriteRaw(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);
 8004314:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
 8004318:	f8d4 25d4 	ldr.w	r2, [r4, #1492]	; 0x5d4
 800431c:	a834      	add	r0, sp, #208	; 0xd0
 800431e:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 8004322:	fb03 f202 	mul.w	r2, r3, r2
 8004326:	f017 fddd 	bl	801bee4 <STM32Fs_WriteRaw>
 800432a:	e6b9      	b.n	80040a0 <TEST_Run+0x2f8>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 800432c:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 8004330:	a834      	add	r0, sp, #208	; 0xd0
 8004332:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 8004336:	4935      	ldr	r1, [pc, #212]	; (800440c <TEST_Run+0x664>)
 8004338:	9200      	str	r2, [sp, #0]
 800433a:	f104 02de 	add.w	r2, r4, #222	; 0xde
 800433e:	f021 ff51 	bl	80261e4 <siprintf>
        ret = STM32Fs_WriteRaw(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);
 8004342:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
 8004346:	f8d4 25d4 	ldr.w	r2, [r4, #1492]	; 0x5d4
 800434a:	a834      	add	r0, sp, #208	; 0xd0
 800434c:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 8004350:	fb03 f202 	mul.w	r2, r3, r2
 8004354:	f017 fdc6 	bl	801bee4 <STM32Fs_WriteRaw>
      if (ret != STM32FS_ERROR_NONE)
 8004358:	2800      	cmp	r0, #0
 800435a:	f43f aeff 	beq.w	800415c <TEST_Run+0x3b4>
        UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. Writting image failed", CENTER_MODE);
 800435e:	f018 fb8d 	bl	801ca7c <UTIL_LCD_GetFont>
 8004362:	88c1      	ldrh	r1, [r0, #6]
 8004364:	2301      	movs	r3, #1
 8004366:	4a2a      	ldr	r2, [pc, #168]	; (8004410 <TEST_Run+0x668>)
 8004368:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800436c:	2000      	movs	r0, #0
 800436e:	0089      	lsls	r1, r1, #2
 8004370:	f018 fc7c 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004374:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004376:	f7fd fc55 	bl	8001c24 <DISPLAY_Refresh>
 800437a:	e6ed      	b.n	8004158 <TEST_Run+0x3b0>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 800437c:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 8004380:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
 8004384:	f8d4 25d4 	ldr.w	r2, [r4, #1492]	; 0x5d4
 8004388:	4608      	mov	r0, r1
 800438a:	fb03 f202 	mul.w	r2, r3, r2
 800438e:	f7fd fcb5 	bl	8001cfc <PREPROC_Pixel_RB_Swap>
 8004392:	e6d9      	b.n	8004148 <TEST_Run+0x3a0>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8004394:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 8004398:	a834      	add	r0, sp, #208	; 0xd0
 800439a:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 800439e:	491d      	ldr	r1, [pc, #116]	; (8004414 <TEST_Run+0x66c>)
 80043a0:	9200      	str	r2, [sp, #0]
 80043a2:	f104 02de 	add.w	r2, r4, #222	; 0xde
 80043a6:	f021 ff1d 	bl	80261e4 <siprintf>
        ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
 80043b0:	a834      	add	r0, sp, #208	; 0xd0
 80043b2:	9200      	str	r2, [sp, #0]
 80043b4:	f8d4 25d0 	ldr.w	r2, [r4, #1488]	; 0x5d0
 80043b8:	f8d4 15c8 	ldr.w	r1, [r4, #1480]	; 0x5c8
 80043bc:	f017 fe12 	bl	801bfe4 <STM32Fs_WriteImageBMP16>
 80043c0:	e7ca      	b.n	8004358 <TEST_Run+0x5b0>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 80043c2:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 80043c6:	a834      	add	r0, sp, #208	; 0xd0
 80043c8:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 80043cc:	4911      	ldr	r1, [pc, #68]	; (8004414 <TEST_Run+0x66c>)
 80043ce:	9200      	str	r2, [sp, #0]
 80043d0:	f104 02de 	add.w	r2, r4, #222	; 0xde
 80043d4:	f021 ff06 	bl	80261e4 <siprintf>
 80043d8:	e771      	b.n	80042be <TEST_Run+0x516>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 80043da:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
 80043de:	4608      	mov	r0, r1
 80043e0:	f8d4 25d4 	ldr.w	r2, [r4, #1492]	; 0x5d4
 80043e4:	fb03 f202 	mul.w	r2, r3, r2
 80043e8:	f7fd fc88 	bl	8001cfc <PREPROC_Pixel_RB_Swap>
 80043ec:	e501      	b.n	8003df2 <TEST_Run+0x4a>
 80043ee:	bf00      	nop
 80043f0:	0802934c 	.word	0x0802934c
 80043f4:	080292cc 	.word	0x080292cc
 80043f8:	08029340 	.word	0x08029340
 80043fc:	080292e4 	.word	0x080292e4
 8004400:	080292f0 	.word	0x080292f0
 8004404:	08028dfc 	.word	0x08028dfc
 8004408:	080292d8 	.word	0x080292d8
 800440c:	0802936c 	.word	0x0802936c
 8004410:	08029320 	.word	0x08029320
 8004414:	0802935c 	.word	0x0802935c
 8004418:	24000008 	.word	0x24000008
 800441c:	08029314 	.word	0x08029314

08004420 <TEST_PostProcess>:
 *
 * @param TestContext_Ptr pointer to test context
 */
void TEST_PostProcess(TestContext_TypeDef *TestContext_Ptr)
{
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8004420:	f8d0 35fc 	ldr.w	r3, [r0, #1532]	; 0x5fc
{
 8004424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004428:	ed2d 8b02 	vpush	{d8}

  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 800442c:	781f      	ldrb	r7, [r3, #0]
{
 800442e:	b099      	sub	sp, #100	; 0x64
  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 8004430:	2f04      	cmp	r7, #4
 8004432:	d009      	beq.n	8004448 <TEST_PostProcess+0x28>
  {
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == DUMP)
 8004434:	2f03      	cmp	r7, #3
 8004436:	d04d      	beq.n	80044d4 <TEST_PostProcess+0xb4>
  {
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == VALID)
 8004438:	2f02      	cmp	r7, #2
 800443a:	f000 80ae 	beq.w	800459a <TEST_PostProcess+0x17a>
  {
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
}
 800443e:	b019      	add	sp, #100	; 0x64
 8004440:	ecbd 8b02 	vpop	{d8}
 8004444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 8004448:	6b9c      	ldr	r4, [r3, #56]	; 0x38
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 800444a:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 800444e:	f8d4 65fc 	ldr.w	r6, [r4, #1532]	; 0x5fc
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 8004452:	b315      	cbz	r5, 800449a <TEST_PostProcess+0x7a>
  else if(TestContext_Ptr->CaptureContext.capture_state==2)
 8004454:	2d02      	cmp	r5, #2
 8004456:	d1f2      	bne.n	800443e <TEST_PostProcess+0x1e>
    TestContext_Ptr->CaptureContext.capture_state = 0;
 8004458:	2000      	movs	r0, #0
 800445a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    BSP_SD_DeInit(0);
 800445e:	f009 f95d 	bl	800d71c <BSP_SD_DeInit>
    CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8004462:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8004464:	f7fd f94c 	bl	8001700 <CAMERA_Init>
    while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 8004468:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800446a:	7d13      	ldrb	r3, [r2, #20]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0fc      	beq.n	800446a <TEST_PostProcess+0x4a>
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8004470:	2500      	movs	r5, #0
    BSP_CAMERA_Resume(0);
 8004472:	4628      	mov	r0, r5
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8004474:	7515      	strb	r5, [r2, #20]
    BSP_CAMERA_Resume(0);
 8004476:	f008 f8a5 	bl	800c5c4 <BSP_CAMERA_Resume>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 800447a:	f8d4 3520 	ldr.w	r3, [r4, #1312]	; 0x520
 800447e:	2b00      	cmp	r3, #0
 8004480:	f040 834b 	bne.w	8004b1a <TEST_PostProcess+0x6fa>
    BSP_LED_On(LED_GREEN);
 8004484:	2000      	movs	r0, #0
 8004486:	f006 fc0d 	bl	800aca4 <BSP_LED_On>
    BSP_LED_Off(LED_RED);
 800448a:	2002      	movs	r0, #2
}
 800448c:	b019      	add	sp, #100	; 0x64
 800448e:	ecbd 8b02 	vpop	{d8}
 8004492:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    BSP_LED_Off(LED_RED);
 8004496:	f006 bc17 	b.w	800acc8 <BSP_LED_Off>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->CaptureContext.capture_session_name, LEFT_MODE);
 800449a:	f018 faef 	bl	801ca7c <UTIL_LCD_GetFont>
 800449e:	2303      	movs	r3, #3
 80044a0:	88c1      	ldrh	r1, [r0, #6]
 80044a2:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
 80044a6:	4628      	mov	r0, r5
 80044a8:	f018 fbe0 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE READY", RIGHT_MODE);
 80044ac:	f018 fae6 	bl	801ca7c <UTIL_LCD_GetFont>
 80044b0:	2302      	movs	r3, #2
 80044b2:	88c1      	ldrh	r1, [r0, #6]
 80044b4:	4628      	mov	r0, r5
 80044b6:	4a9d      	ldr	r2, [pc, #628]	; (800472c <TEST_PostProcess+0x30c>)
 80044b8:	f018 fbd8 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80044bc:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80044be:	f7fd fbb1 	bl	8001c24 <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 80044c2:	4628      	mov	r0, r5
 80044c4:	f006 fc74 	bl	800adb0 <BSP_PB_GetState>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d0b8      	beq.n	800443e <TEST_PostProcess+0x1e>
      TestContext_Ptr->CaptureContext.capture_state = 1;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80044d2:	e7b4      	b.n	800443e <TEST_PostProcess+0x1e>
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 80044d4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
  if(TestContext_Ptr->DumpContext.dump_state==0)
 80044d6:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80044da:	f8d4 55fc 	ldr.w	r5, [r4, #1532]	; 0x5fc
  if(TestContext_Ptr->DumpContext.dump_state==0)
 80044de:	2e00      	cmp	r6, #0
 80044e0:	f000 80dd 	beq.w	800469e <TEST_PostProcess+0x27e>
  else if(TestContext_Ptr->DumpContext.dump_state == 2)
 80044e4:	2e02      	cmp	r6, #2
 80044e6:	d1aa      	bne.n	800443e <TEST_PostProcess+0x1e>
    if(TestContext_Ptr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 80044e8:	7923      	ldrb	r3, [r4, #4]
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	f000 82e7 	beq.w	8004abe <TEST_PostProcess+0x69e>
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 80044f0:	f8d4 3520 	ldr.w	r3, [r4, #1312]	; 0x520
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 82d0 	beq.w	8004a9a <TEST_PostProcess+0x67a>
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	f894 3526 	ldrb.w	r3, [r4, #1318]	; 0x526
 8004500:	f000 82c8 	beq.w	8004a94 <TEST_PostProcess+0x674>
    TestContext_Ptr->DumpContext.dump_state = 0;
 8004504:	2200      	movs	r2, #0
 8004506:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 800450a:	2b01      	cmp	r3, #1
 800450c:	f000 835f 	beq.w	8004bce <TEST_PostProcess+0x7ae>
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0)
 8004510:	f8d4 3528 	ldr.w	r3, [r4, #1320]	; 0x528
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004514:	2702      	movs	r7, #2
 8004516:	4e86      	ldr	r6, [pc, #536]	; (8004730 <TEST_PostProcess+0x310>)
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0)
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8332 	beq.w	8004b82 <TEST_PostProcess+0x762>
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0xFFFF)
 800451e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004522:	4293      	cmp	r3, r2
 8004524:	f000 83c4 	beq.w	8004cb0 <TEST_PostProcess+0x890>
          TestContext_Ptr->UartContext.uart_host_requested_dump_number --;
 8004528:	3b01      	subs	r3, #1
 800452a:	f8c4 3528 	str.w	r3, [r4, #1320]	; 0x528
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 800452e:	f018 faa5 	bl	801ca7c <UTIL_LCD_GetFont>
 8004532:	2303      	movs	r3, #3
 8004534:	88c1      	ldrh	r1, [r0, #6]
 8004536:	f104 0210 	add.w	r2, r4, #16
 800453a:	2000      	movs	r0, #0
 800453c:	f018 fb96 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 8004540:	f018 fa9c 	bl	801ca7c <UTIL_LCD_GetFont>
 8004544:	2302      	movs	r3, #2
 8004546:	88c1      	ldrh	r1, [r0, #6]
 8004548:	2000      	movs	r0, #0
 800454a:	4a7a      	ldr	r2, [pc, #488]	; (8004734 <TEST_PostProcess+0x314>)
 800454c:	f018 fb8e 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004550:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004552:	f7fd fb67 	bl	8001c24 <DISPLAY_Refresh>
        TestContext_Ptr->DumpContext.dump_state = 1;
 8004556:	2301      	movs	r3, #1
 8004558:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 800455c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 800455e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 8004560:	6819      	ldr	r1, [r3, #0]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004562:	6814      	ldr	r4, [r2, #0]
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 8004564:	6808      	ldr	r0, [r1, #0]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004566:	4b74      	ldr	r3, [pc, #464]	; (8004738 <TEST_PostProcess+0x318>)
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 8004568:	6030      	str	r0, [r6, #0]
 800456a:	6848      	ldr	r0, [r1, #4]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 800456c:	601c      	str	r4, [r3, #0]
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 800456e:	6070      	str	r0, [r6, #4]
 8004570:	6888      	ldr	r0, [r1, #8]
 8004572:	68cc      	ldr	r4, [r1, #12]
 8004574:	60b0      	str	r0, [r6, #8]
 8004576:	6908      	ldr	r0, [r1, #16]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004578:	6851      	ldr	r1, [r2, #4]
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 800457a:	6130      	str	r0, [r6, #16]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 800457c:	6059      	str	r1, [r3, #4]
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 800457e:	60f4      	str	r4, [r6, #12]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004580:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8004584:	6912      	ldr	r2, [r2, #16]
 8004586:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800458a:	611a      	str	r2, [r3, #16]
    BSP_LED_On(LED_GREEN);
 800458c:	2000      	movs	r0, #0
 800458e:	f006 fb89 	bl	800aca4 <BSP_LED_On>
    BSP_LED_Off(LED_RED);
 8004592:	2002      	movs	r0, #2
 8004594:	f006 fb98 	bl	800acc8 <BSP_LED_Off>
 8004598:	e751      	b.n	800443e <TEST_PostProcess+0x1e>
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 800459a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 800459c:	f8d4 6440 	ldr.w	r6, [r4, #1088]	; 0x440
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80045a0:	f8d4 95fc 	ldr.w	r9, [r4, #1532]	; 0x5fc
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 80045a4:	2e00      	cmp	r6, #0
 80045a6:	f000 80d3 	beq.w	8004750 <TEST_PostProcess+0x330>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 80045aa:	f8d4 3520 	ldr.w	r3, [r4, #1312]	; 0x520
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d068      	beq.n	8004684 <TEST_PostProcess+0x264>
      TestContext_Ptr->ValidationContext.overall_loss = 0.0;
 80045b2:	2200      	movs	r2, #0
 80045b4:	2300      	movs	r3, #0
      TestContext_Ptr->ValidationContext.validation_completed=0;
 80045b6:	2000      	movs	r0, #0
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 80045b8:	f504 6e8e 	add.w	lr, r4, #1136	; 0x470
 80045bc:	f504 6c90 	add.w	ip, r4, #1152	; 0x480
 80045c0:	f504 6192 	add.w	r1, r4, #1168	; 0x490
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 80045c4:	f04f 0801 	mov.w	r8, #1
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 80045c8:	f504 6b8a 	add.w	fp, r4, #1104	; 0x450
 80045cc:	f504 6a8c 	add.w	sl, r4, #1120	; 0x460
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 80045d0:	4e5a      	ldr	r6, [pc, #360]	; (800473c <TEST_PostProcess+0x31c>)
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 80045d2:	f884 8524 	strb.w	r8, [r4, #1316]	; 0x524
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80045d6:	f204 553c 	addw	r5, r4, #1340	; 0x53c
      TestContext_Ptr->ValidationContext.nbr_tested = 1;
 80045da:	f8c4 8120 	str.w	r8, [r4, #288]	; 0x120
      TestContext_Ptr->ValidationContext.validation_completed=0;
 80045de:	f8c4 0440 	str.w	r0, [r4, #1088]	; 0x440
      TestContext_Ptr->ValidationContext.overall_loss = 0.0;
 80045e2:	e9c4 2344 	strd	r2, r3, [r4, #272]	; 0x110
      TestContext_Ptr->ValidationContext.avg_loss = 0.0;
 80045e6:	e9c4 2346 	strd	r2, r3, [r4, #280]	; 0x118
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 80045ea:	2200      	movs	r2, #0
 80045ec:	2300      	movs	r3, #0
 80045ee:	e94b 2302 	strd	r2, r3, [fp, #-8]
 80045f2:	e9cb 2300 	strd	r2, r3, [fp]
 80045f6:	e94a 2302 	strd	r2, r3, [sl, #-8]
 80045fa:	e9ca 2300 	strd	r2, r3, [sl]
 80045fe:	e94e 2302 	strd	r2, r3, [lr, #-8]
 8004602:	e9ce 2300 	strd	r2, r3, [lr]
 8004606:	e94c 2302 	strd	r2, r3, [ip, #-8]
 800460a:	e9cc 2300 	strd	r2, r3, [ip]
 800460e:	e941 2302 	strd	r2, r3, [r1, #-8]
 8004612:	e9c1 2300 	strd	r2, r3, [r1]
 8004616:	f8c4 0498 	str.w	r0, [r4, #1176]	; 0x498
 800461a:	f8c4 049c 	str.w	r0, [r4, #1180]	; 0x49c
 800461e:	f8c4 04a0 	str.w	r0, [r4, #1184]	; 0x4a0
 8004622:	f8c4 04a4 	str.w	r0, [r4, #1188]	; 0x4a4
 8004626:	f8c4 04a8 	str.w	r0, [r4, #1192]	; 0x4a8
      App_Cxt_Ptr->run_loop = 0;
 800462a:	f8c9 0004 	str.w	r0, [r9, #4]
      BSP_SD_DeInit(0);
 800462e:	f009 f875 	bl	800d71c <BSP_SD_DeInit>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004632:	463a      	mov	r2, r7
 8004634:	2180      	movs	r1, #128	; 0x80
 8004636:	4630      	mov	r0, r6
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8004638:	7037      	strb	r7, [r6, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800463a:	f000 fcbb 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800463e:	4642      	mov	r2, r8
 8004640:	4631      	mov	r1, r6
 8004642:	4628      	mov	r0, r5
 8004644:	f011 f976 	bl	8015934 <HAL_UART_Transmit_DMA>
 8004648:	2800      	cmp	r0, #0
 800464a:	f040 8263 	bne.w	8004b14 <TEST_PostProcess+0x6f4>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800464e:	4628      	mov	r0, r5
 8004650:	f011 fba0 	bl	8015d94 <HAL_UART_GetState>
 8004654:	2820      	cmp	r0, #32
 8004656:	d1fa      	bne.n	800464e <TEST_PostProcess+0x22e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8004658:	220a      	movs	r2, #10
 800465a:	4939      	ldr	r1, [pc, #228]	; (8004740 <TEST_PostProcess+0x320>)
 800465c:	4628      	mov	r0, r5
 800465e:	f011 f9bb 	bl	80159d8 <HAL_UART_Receive_DMA>
 8004662:	2800      	cmp	r0, #0
 8004664:	f040 8253 	bne.w	8004b0e <TEST_PostProcess+0x6ee>
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004668:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
 800466c:	4b32      	ldr	r3, [pc, #200]	; (8004738 <TEST_PostProcess+0x318>)
 800466e:	6890      	ldr	r0, [r2, #8]
 8004670:	e9d2 4100 	ldrd	r4, r1, [r2]
 8004674:	e9c3 4100 	strd	r4, r1, [r3]
 8004678:	e9d2 1203 	ldrd	r1, r2, [r2, #12]
 800467c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004680:	611a      	str	r2, [r3, #16]
      for(uint32_t i=0; i<APP_FRAMEOPERATION_NUM;i++)
 8004682:	e6dc      	b.n	800443e <TEST_PostProcess+0x1e>
        HAL_Delay(100);
 8004684:	2064      	movs	r0, #100	; 0x64
 8004686:	f009 f9cd 	bl	800da24 <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 800468a:	2000      	movs	r0, #0
 800468c:	f006 fb2e 	bl	800acec <BSP_LED_Toggle>
        HAL_Delay(100);
 8004690:	2064      	movs	r0, #100	; 0x64
 8004692:	f009 f9c7 	bl	800da24 <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 8004696:	2000      	movs	r0, #0
 8004698:	f006 fb28 	bl	800acec <BSP_LED_Toggle>
      while (1)
 800469c:	e7f2      	b.n	8004684 <TEST_PostProcess+0x264>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 800469e:	f018 f9ed 	bl	801ca7c <UTIL_LCD_GetFont>
 80046a2:	463b      	mov	r3, r7
 80046a4:	88c1      	ldrh	r1, [r0, #6]
 80046a6:	f104 0210 	add.w	r2, r4, #16
 80046aa:	4630      	mov	r0, r6
 80046ac:	f018 fade 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 80046b0:	f018 f9e4 	bl	801ca7c <UTIL_LCD_GetFont>
 80046b4:	2302      	movs	r3, #2
 80046b6:	88c1      	ldrh	r1, [r0, #6]
 80046b8:	4630      	mov	r0, r6
 80046ba:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <TEST_PostProcess+0x314>)
 80046bc:	f018 fad6 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 80046c0:	ed95 7a04 	vldr	s14, [r5, #16]
 80046c4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004744 <TEST_PostProcess+0x324>
 80046c8:	a806      	add	r0, sp, #24
 80046ca:	68ea      	ldr	r2, [r5, #12]
 80046cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046d0:	491d      	ldr	r1, [pc, #116]	; (8004748 <TEST_PostProcess+0x328>)
 80046d2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80046d6:	ed8d 7b00 	vstr	d7, [sp]
 80046da:	f021 fd83 	bl	80261e4 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 80046de:	f018 f9cd 	bl	801ca7c <UTIL_LCD_GetFont>
 80046e2:	88c1      	ldrh	r1, [r0, #6]
 80046e4:	2301      	movs	r3, #1
 80046e6:	aa06      	add	r2, sp, #24
 80046e8:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 80046ec:	4630      	mov	r0, r6
 80046ee:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80046f2:	f018 fabb 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 80046f6:	68aa      	ldr	r2, [r5, #8]
 80046f8:	4914      	ldr	r1, [pc, #80]	; (800474c <TEST_PostProcess+0x32c>)
 80046fa:	a806      	add	r0, sp, #24
 80046fc:	f021 fd72 	bl	80261e4 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 8004700:	f018 f9bc 	bl	801ca7c <UTIL_LCD_GetFont>
 8004704:	88c1      	ldrh	r1, [r0, #6]
 8004706:	aa06      	add	r2, sp, #24
 8004708:	2301      	movs	r3, #1
 800470a:	0109      	lsls	r1, r1, #4
 800470c:	4630      	mov	r0, r6
 800470e:	f018 faad 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004712:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004714:	f7fd fa86 	bl	8001c24 <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8004718:	4630      	mov	r0, r6
 800471a:	f006 fb49 	bl	800adb0 <BSP_PB_GetState>
 800471e:	2800      	cmp	r0, #0
 8004720:	f43f ae8d 	beq.w	800443e <TEST_PostProcess+0x1e>
      TestContext_Ptr->DumpContext.dump_state = 1;
 8004724:	2301      	movs	r3, #1
 8004726:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 800472a:	e688      	b.n	800443e <TEST_PostProcess+0x1e>
 800472c:	0802937c 	.word	0x0802937c
 8004730:	d0cdae80 	.word	0xd0cdae80
 8004734:	0802938c 	.word	0x0802938c
 8004738:	d0e82800 	.word	0xd0e82800
 800473c:	24007700 	.word	0x24007700
 8004740:	240076e0 	.word	0x240076e0
 8004744:	42c80000 	.word	0x42c80000
 8004748:	08028cc4 	.word	0x08028cc4
 800474c:	08028cd0 	.word	0x08028cd0
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8004750:	4fc6      	ldr	r7, [pc, #792]	; (8004a6c <TEST_PostProcess+0x64c>)
 8004752:	f504 6180 	add.w	r1, r4, #1024	; 0x400
 8004756:	4638      	mov	r0, r7
 8004758:	f021 fd64 	bl	8026224 <stpcpy>
    strcat(tmp_msg, "/");
 800475c:	232f      	movs	r3, #47	; 0x2f
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 800475e:	3001      	adds	r0, #1
 8004760:	f204 21ba 	addw	r1, r4, #698	; 0x2ba
    strcat(tmp_msg, "/");
 8004764:	f800 3c01 	strb.w	r3, [r0, #-1]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8004768:	f021 fd65 	bl	8026236 <strcpy>
    size_t predicted_class = App_Cxt_Ptr->ranking[0];
 800476c:	f8d9 3014 	ldr.w	r3, [r9, #20]
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 8004770:	f8d4 53bc 	ldr.w	r5, [r4, #956]	; 0x3bc
    size_t predicted_class = App_Cxt_Ptr->ranking[0];
 8004774:	9302      	str	r3, [sp, #8]
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 8004776:	42ab      	cmp	r3, r5
 8004778:	f040 81ac 	bne.w	8004ad4 <TEST_PostProcess+0x6b4>
 800477c:	4bbc      	ldr	r3, [pc, #752]	; (8004a70 <TEST_PostProcess+0x650>)
 800477e:	9303      	str	r3, [sp, #12]
    float confidence = App_Cxt_Ptr->nn_top1_output_class_proba;
 8004780:	edd9 8a04 	vldr	s17, [r9, #16]
    TestContext_Ptr->ValidationContext.nbr_tested++;
 8004784:	f8d4 6120 	ldr.w	r6, [r4, #288]	; 0x120
    if (confidence > 0)
 8004788:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    TestContext_Ptr->ValidationContext.nbr_tested++;
 800478c:	3601      	adds	r6, #1
    if (confidence > 0)
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    TestContext_Ptr->ValidationContext.nbr_tested++;
 8004792:	f8c4 6120 	str.w	r6, [r4, #288]	; 0x120
    if (confidence > 0)
 8004796:	f340 81b7 	ble.w	8004b08 <TEST_PostProcess+0x6e8>
      categorical_crossentropy = -log((double)confidence);
 800479a:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 800479e:	f023 fe23 	bl	80283e8 <log>
 80047a2:	eeb1 0b40 	vneg.f64	d0, d0
    TestContext_Ptr->ValidationContext.overall_loss += categorical_crossentropy;
 80047a6:	ed94 6b44 	vldr	d6, [r4, #272]	; 0x110
 80047aa:	ee30 6b06 	vadd.f64	d6, d0, d6
 80047ae:	ed84 6b44 	vstr	d6, [r4, #272]	; 0x110
    if (TestContext_Ptr->ValidationContext.nbr_tested > 0)
 80047b2:	b13e      	cbz	r6, 80047c4 <TEST_PostProcess+0x3a4>
      TestContext_Ptr->ValidationContext.avg_loss = TestContext_Ptr->ValidationContext.overall_loss / (double)TestContext_Ptr->ValidationContext.nbr_tested;
 80047b4:	ee07 6a90 	vmov	s15, r6
 80047b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80047bc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80047c0:	ed84 5b46 	vstr	d5, [r4, #280]	; 0x118
    TestContext_Ptr->ValidationContext.valid_conf_matrix[TestContext_Ptr->ValidationContext.class_index][predicted_class]++;
 80047c4:	9a02      	ldr	r2, [sp, #8]
 80047c6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80047ca:	4413      	add	r3, r2
 80047cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80047d0:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 80047d4:	3201      	adds	r2, #1
 80047d6:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
      if (conf_matrix[row][col] > conf_max)
 80047da:	f8d4 2448 	ldr.w	r2, [r4, #1096]	; 0x448
 80047de:	f8d4 144c 	ldr.w	r1, [r4, #1100]	; 0x44c
 80047e2:	2a00      	cmp	r2, #0
 80047e4:	4613      	mov	r3, r2
 80047e6:	bf38      	it	cc
 80047e8:	2300      	movcc	r3, #0
 80047ea:	428a      	cmp	r2, r1
 80047ec:	d201      	bcs.n	80047f2 <TEST_PostProcess+0x3d2>
        conf_max = conf_matrix[row][col];
 80047ee:	460b      	mov	r3, r1
 80047f0:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80047f2:	f8d4 1450 	ldr.w	r1, [r4, #1104]	; 0x450
 80047f6:	428a      	cmp	r2, r1
 80047f8:	d201      	bcs.n	80047fe <TEST_PostProcess+0x3de>
        conf_max = conf_matrix[row][col];
 80047fa:	460b      	mov	r3, r1
 80047fc:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80047fe:	f8d4 1454 	ldr.w	r1, [r4, #1108]	; 0x454
 8004802:	428a      	cmp	r2, r1
 8004804:	d201      	bcs.n	800480a <TEST_PostProcess+0x3ea>
        conf_max = conf_matrix[row][col];
 8004806:	460b      	mov	r3, r1
 8004808:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 800480a:	f8d4 1458 	ldr.w	r1, [r4, #1112]	; 0x458
        conf_max = conf_matrix[row][col];
 800480e:	428a      	cmp	r2, r1
 8004810:	bf38      	it	cc
 8004812:	460b      	movcc	r3, r1
      if (conf_matrix[row][col] > conf_max)
 8004814:	f8d4 145c 	ldr.w	r1, [r4, #1116]	; 0x45c
 8004818:	4299      	cmp	r1, r3
 800481a:	461a      	mov	r2, r3
 800481c:	d901      	bls.n	8004822 <TEST_PostProcess+0x402>
        conf_max = conf_matrix[row][col];
 800481e:	460b      	mov	r3, r1
 8004820:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004822:	f8d4 1460 	ldr.w	r1, [r4, #1120]	; 0x460
 8004826:	428a      	cmp	r2, r1
 8004828:	d201      	bcs.n	800482e <TEST_PostProcess+0x40e>
        conf_max = conf_matrix[row][col];
 800482a:	460b      	mov	r3, r1
 800482c:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 800482e:	f8d4 1464 	ldr.w	r1, [r4, #1124]	; 0x464
 8004832:	428a      	cmp	r2, r1
 8004834:	d201      	bcs.n	800483a <TEST_PostProcess+0x41a>
        conf_max = conf_matrix[row][col];
 8004836:	460b      	mov	r3, r1
 8004838:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 800483a:	f8d4 1468 	ldr.w	r1, [r4, #1128]	; 0x468
 800483e:	428a      	cmp	r2, r1
 8004840:	d201      	bcs.n	8004846 <TEST_PostProcess+0x426>
        conf_max = conf_matrix[row][col];
 8004842:	460b      	mov	r3, r1
 8004844:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004846:	f8d4 146c 	ldr.w	r1, [r4, #1132]	; 0x46c
        conf_max = conf_matrix[row][col];
 800484a:	428a      	cmp	r2, r1
 800484c:	bf38      	it	cc
 800484e:	460b      	movcc	r3, r1
      if (conf_matrix[row][col] > conf_max)
 8004850:	f8d4 1470 	ldr.w	r1, [r4, #1136]	; 0x470
 8004854:	4299      	cmp	r1, r3
 8004856:	461a      	mov	r2, r3
 8004858:	d901      	bls.n	800485e <TEST_PostProcess+0x43e>
        conf_max = conf_matrix[row][col];
 800485a:	460b      	mov	r3, r1
 800485c:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 800485e:	f8d4 1474 	ldr.w	r1, [r4, #1140]	; 0x474
 8004862:	428a      	cmp	r2, r1
 8004864:	d201      	bcs.n	800486a <TEST_PostProcess+0x44a>
        conf_max = conf_matrix[row][col];
 8004866:	460b      	mov	r3, r1
 8004868:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 800486a:	f8d4 1478 	ldr.w	r1, [r4, #1144]	; 0x478
 800486e:	428a      	cmp	r2, r1
 8004870:	d201      	bcs.n	8004876 <TEST_PostProcess+0x456>
        conf_max = conf_matrix[row][col];
 8004872:	460b      	mov	r3, r1
 8004874:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004876:	f8d4 147c 	ldr.w	r1, [r4, #1148]	; 0x47c
 800487a:	428a      	cmp	r2, r1
 800487c:	d201      	bcs.n	8004882 <TEST_PostProcess+0x462>
        conf_max = conf_matrix[row][col];
 800487e:	460b      	mov	r3, r1
 8004880:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004882:	f8d4 1480 	ldr.w	r1, [r4, #1152]	; 0x480
        conf_max = conf_matrix[row][col];
 8004886:	428a      	cmp	r2, r1
 8004888:	bf38      	it	cc
 800488a:	460b      	movcc	r3, r1
      if (conf_matrix[row][col] > conf_max)
 800488c:	f8d4 1484 	ldr.w	r1, [r4, #1156]	; 0x484
 8004890:	4299      	cmp	r1, r3
 8004892:	461a      	mov	r2, r3
 8004894:	d901      	bls.n	800489a <TEST_PostProcess+0x47a>
        conf_max = conf_matrix[row][col];
 8004896:	460b      	mov	r3, r1
 8004898:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 800489a:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
 800489e:	428a      	cmp	r2, r1
 80048a0:	d201      	bcs.n	80048a6 <TEST_PostProcess+0x486>
        conf_max = conf_matrix[row][col];
 80048a2:	460b      	mov	r3, r1
 80048a4:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80048a6:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
 80048aa:	428a      	cmp	r2, r1
 80048ac:	d201      	bcs.n	80048b2 <TEST_PostProcess+0x492>
        conf_max = conf_matrix[row][col];
 80048ae:	460b      	mov	r3, r1
 80048b0:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80048b2:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
 80048b6:	428a      	cmp	r2, r1
 80048b8:	d201      	bcs.n	80048be <TEST_PostProcess+0x49e>
        conf_max = conf_matrix[row][col];
 80048ba:	460b      	mov	r3, r1
 80048bc:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80048be:	f8d4 1494 	ldr.w	r1, [r4, #1172]	; 0x494
        float value_norm = value / (float)(conf_max + 1);
 80048c2:	f04f 083c 	mov.w	r8, #60	; 0x3c
 80048c6:	f8d4 5498 	ldr.w	r5, [r4, #1176]	; 0x498
 80048ca:	af06      	add	r7, sp, #24
        conf_max = conf_matrix[row][col];
 80048cc:	428a      	cmp	r2, r1
 80048ce:	bf38      	it	cc
 80048d0:	460b      	movcc	r3, r1
  UTIL_LCD_SetFont(&Font12);
 80048d2:	4868      	ldr	r0, [pc, #416]	; (8004a74 <TEST_PostProcess+0x654>)
        sprintf(conf_value, "%d", (unsigned int)conf_matrix[row][col]);
 80048d4:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8004a90 <TEST_PostProcess+0x670>
 80048d8:	429d      	cmp	r5, r3
 80048da:	bf38      	it	cc
 80048dc:	461d      	movcc	r5, r3
 80048de:	f8d4 349c 	ldr.w	r3, [r4, #1180]	; 0x49c
 80048e2:	429d      	cmp	r5, r3
 80048e4:	bf38      	it	cc
 80048e6:	461d      	movcc	r5, r3
 80048e8:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 80048ec:	429d      	cmp	r5, r3
 80048ee:	bf38      	it	cc
 80048f0:	461d      	movcc	r5, r3
 80048f2:	f8d4 34a4 	ldr.w	r3, [r4, #1188]	; 0x4a4
 80048f6:	429d      	cmp	r5, r3
 80048f8:	bf38      	it	cc
 80048fa:	461d      	movcc	r5, r3
 80048fc:	f8d4 34a8 	ldr.w	r3, [r4, #1192]	; 0x4a8
 8004900:	429d      	cmp	r5, r3
 8004902:	bf38      	it	cc
 8004904:	461d      	movcc	r5, r3
  UTIL_LCD_SetFont(&Font12);
 8004906:	f018 f8b1 	bl	801ca6c <UTIL_LCD_SetFont>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 800490a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800490e:	f504 6381 	add.w	r3, r4, #1032	; 0x408
        float value_norm = value / (float)(conf_max + 1);
 8004912:	3501      	adds	r5, #1
 8004914:	ee07 5a90 	vmov	s15, r5
 8004918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800491c:	e9cd 4904 	strd	r4, r9, [sp, #16]
 8004920:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8004924:	461c      	mov	r4, r3
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 8004926:	eb04 0608 	add.w	r6, r4, r8
        conf_max = conf_matrix[row][col];
 800492a:	f240 1581 	movw	r5, #385	; 0x181
        sprintf(conf_value, ".");
 800492e:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
      uint32_t value = conf_matrix[row][col];
 8004932:	f856 3f04 	ldr.w	r3, [r6, #4]!
        float value_norm = value / (float)(conf_max + 1);
 8004936:	ee07 3a90 	vmov	s15, r3
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 800493a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
        float value_norm = value / (float)(conf_max + 1);
 800493e:	eef8 7a67 	vcvt.f32.u32	s15, s15
      if (value > 0)
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 808f 	beq.w	8004a66 <TEST_PostProcess+0x646>
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 8004948:	ee67 7a87 	vmul.f32	s15, s15, s14
        UTIL_LCD_SetBackColor(heat_map[heat_map_idx]);
 800494c:	4b4a      	ldr	r3, [pc, #296]	; (8004a78 <TEST_PostProcess+0x658>)
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 800494e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004952:	fefb 7a67 	vrintm.f32	s15, s15
 8004956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800495a:	ee17 9a90 	vmov	r9, s15
        UTIL_LCD_SetBackColor(heat_map[heat_map_idx]);
 800495e:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8004962:	f018 f87b 	bl	801ca5c <UTIL_LCD_SetBackColor>
        uint32_t text_color = heat_map_idx > 5 ? UTIL_LCD_COLOR_BLACK : UTIL_LCD_COLOR_WHITE;
 8004966:	f1b9 0f05 	cmp.w	r9, #5
        UTIL_LCD_SetTextColor(text_color);
 800496a:	bfcc      	ite	gt
 800496c:	f04f 407f 	movgt.w	r0, #4278190080	; 0xff000000
 8004970:	f04f 30ff 	movle.w	r0, #4294967295
 8004974:	f018 f86a 	bl	801ca4c <UTIL_LCD_SetTextColor>
        sprintf(conf_value, "%d", (unsigned int)conf_matrix[row][col]);
 8004978:	6832      	ldr	r2, [r6, #0]
 800497a:	4659      	mov	r1, fp
 800497c:	4638      	mov	r0, r7
 800497e:	f021 fc31 	bl	80261e4 <siprintf>
      UTIL_LCD_DisplayStringAt(x_off + col * 20, y_off + row * 20, (uint8_t *)conf_value, LEFT_MODE);
 8004982:	2303      	movs	r3, #3
 8004984:	463a      	mov	r2, r7
 8004986:	4641      	mov	r1, r8
 8004988:	4628      	mov	r0, r5
 800498a:	f018 f96f 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 800498e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004992:	f018 f863 	bl	801ca5c <UTIL_LCD_SetBackColor>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8004996:	f04f 30ff 	mov.w	r0, #4294967295
 800499a:	f018 f857 	bl	801ca4c <UTIL_LCD_SetTextColor>
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 800499e:	3514      	adds	r5, #20
 80049a0:	f240 13e5 	movw	r3, #485	; 0x1e5
 80049a4:	429d      	cmp	r5, r3
 80049a6:	d1c4      	bne.n	8004932 <TEST_PostProcess+0x512>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 80049a8:	f108 0814 	add.w	r8, r8, #20
 80049ac:	f1b8 0fa0 	cmp.w	r8, #160	; 0xa0
 80049b0:	d1b9      	bne.n	8004926 <TEST_PostProcess+0x506>
  UTIL_LCD_SetFont(&Font20);
 80049b2:	4832      	ldr	r0, [pc, #200]	; (8004a7c <TEST_PostProcess+0x65c>)
 80049b4:	e9dd 4904 	ldrd	r4, r9, [sp, #16]
 80049b8:	f018 f858 	bl	801ca6c <UTIL_LCD_SetFont>
    sprintf(tmp_msg, "%s %.0f%%", NN_OUTPUT_CLASS_LIST[predicted_class], confidence * 100);
 80049bc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004a80 <TEST_PostProcess+0x660>
 80049c0:	4930      	ldr	r1, [pc, #192]	; (8004a84 <TEST_PostProcess+0x664>)
 80049c2:	ee28 7a87 	vmul.f32	s14, s17, s14
 80049c6:	4829      	ldr	r0, [pc, #164]	; (8004a6c <TEST_PostProcess+0x64c>)
 80049c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049cc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80049d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049d4:	ed8d 7b00 	vstr	d7, [sp]
 80049d8:	f021 fc04 	bl	80261e4 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(21), (uint8_t *)tmp_msg, LEFT_MODE);
 80049dc:	f018 f84e 	bl	801ca7c <UTIL_LCD_GetFont>
 80049e0:	88c1      	ldrh	r1, [r0, #6]
 80049e2:	2303      	movs	r3, #3
 80049e4:	4a21      	ldr	r2, [pc, #132]	; (8004a6c <TEST_PostProcess+0x64c>)
 80049e6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80049ea:	2028      	movs	r0, #40	; 0x28
 80049ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80049f0:	f018 f93c 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    sprintf(tmp_msg, "Average loss (categorical cross-entropy) %.4f ", TestContext_Ptr->ValidationContext.avg_loss);
 80049f4:	4924      	ldr	r1, [pc, #144]	; (8004a88 <TEST_PostProcess+0x668>)
 80049f6:	481d      	ldr	r0, [pc, #116]	; (8004a6c <TEST_PostProcess+0x64c>)
 80049f8:	e9d4 2346 	ldrd	r2, r3, [r4, #280]	; 0x118
 80049fc:	f021 fbf2 	bl	80261e4 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(22), (uint8_t *)tmp_msg, LEFT_MODE);
 8004a00:	f018 f83c 	bl	801ca7c <UTIL_LCD_GetFont>
 8004a04:	2116      	movs	r1, #22
 8004a06:	88c2      	ldrh	r2, [r0, #6]
 8004a08:	2303      	movs	r3, #3
 8004a0a:	2028      	movs	r0, #40	; 0x28
 8004a0c:	fb02 f101 	mul.w	r1, r2, r1
 8004a10:	4a16      	ldr	r2, [pc, #88]	; (8004a6c <TEST_PostProcess+0x64c>)
 8004a12:	f018 f92b 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    sprintf(tmp_msg, "Class: %s, id %d", TestContext_Ptr->ValidationContext.fno.fname, TestContext_Ptr->ValidationContext.class_index);
 8004a16:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8004a1a:	f504 72b7 	add.w	r2, r4, #366	; 0x16e
 8004a1e:	491b      	ldr	r1, [pc, #108]	; (8004a8c <TEST_PostProcess+0x66c>)
 8004a20:	4812      	ldr	r0, [pc, #72]	; (8004a6c <TEST_PostProcess+0x64c>)
 8004a22:	f021 fbdf 	bl	80261e4 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 8004a26:	f018 f829 	bl	801ca7c <UTIL_LCD_GetFont>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	88c1      	ldrh	r1, [r0, #6]
 8004a2e:	2000      	movs	r0, #0
 8004a30:	4a0e      	ldr	r2, [pc, #56]	; (8004a6c <TEST_PostProcess+0x64c>)
 8004a32:	f018 f91b 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004a36:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 8004a3a:	f7fd f8f3 	bl	8001c24 <DISPLAY_Refresh>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004a3e:	f8d4 3520 	ldr.w	r3, [r4, #1312]	; 0x520
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f43f acfb 	beq.w	800443e <TEST_PostProcess+0x1e>
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 8004a48:	2300      	movs	r3, #0
        *(TestContext_Ptr->ValidationContext.validation_write_bufferPtr)++=*((uint8_t *)(App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer) + i);
 8004a4a:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8004a4e:	f8d4 251c 	ldr.w	r2, [r4, #1308]	; 0x51c
 8004a52:	6809      	ldr	r1, [r1, #0]
 8004a54:	1c50      	adds	r0, r2, #1
 8004a56:	f8c4 051c 	str.w	r0, [r4, #1308]	; 0x51c
 8004a5a:	5cc9      	ldrb	r1, [r1, r3]
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	2b14      	cmp	r3, #20
        *(TestContext_Ptr->ValidationContext.validation_write_bufferPtr)++=*((uint8_t *)(App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer) + i);
 8004a60:	7011      	strb	r1, [r2, #0]
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 8004a62:	d1f2      	bne.n	8004a4a <TEST_PostProcess+0x62a>
 8004a64:	e4eb      	b.n	800443e <TEST_PostProcess+0x1e>
        sprintf(conf_value, ".");
 8004a66:	f8a7 a000 	strh.w	sl, [r7]
 8004a6a:	e78a      	b.n	8004982 <TEST_PostProcess+0x562>
 8004a6c:	240089e0 	.word	0x240089e0
 8004a70:	24000008 	.word	0x24000008
 8004a74:	240074e4 	.word	0x240074e4
 8004a78:	08029490 	.word	0x08029490
 8004a7c:	240074ec 	.word	0x240074ec
 8004a80:	42c80000 	.word	0x42c80000
 8004a84:	08028cc4 	.word	0x08028cc4
 8004a88:	080293e8 	.word	0x080293e8
 8004a8c:	08029418 	.word	0x08029418
 8004a90:	080293e4 	.word	0x080293e4
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f47f ad35 	bne.w	8004504 <TEST_PostProcess+0xe4>
        BSP_SD_DeInit(0);
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	f008 fe3e 	bl	800d71c <BSP_SD_DeInit>
        CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8004aa0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8004aa2:	f7fc fe2d 	bl	8001700 <CAMERA_Init>
        if(TestContext_Ptr->DumpContext.Dump_FrameSource == CAMERA_COLORBAR)
 8004aa6:	7923      	ldrb	r3, [r4, #4]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	f000 8175 	beq.w	8004d98 <TEST_PostProcess+0x978>
        while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 8004aae:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8004ab0:	7d13      	ldrb	r3, [r2, #20]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0fc      	beq.n	8004ab0 <TEST_PostProcess+0x690>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	7510      	strb	r0, [r2, #20]
        BSP_CAMERA_Resume(0);
 8004aba:	f007 fd83 	bl	800c5c4 <BSP_CAMERA_Resume>
    TestContext_Ptr->DumpContext.dump_state = 0;
 8004abe:	2300      	movs	r3, #0
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004ac0:	f8d4 2520 	ldr.w	r2, [r4, #1312]	; 0x520
    TestContext_Ptr->DumpContext.dump_state = 0;
 8004ac4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004ac8:	2a00      	cmp	r2, #0
 8004aca:	f43f ad5f 	beq.w	800458c <TEST_PostProcess+0x16c>
 8004ace:	f894 3526 	ldrb.w	r3, [r4, #1318]	; 0x526
 8004ad2:	e51a      	b.n	800450a <TEST_PostProcess+0xea>
      stm32fs_err_t res = STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_APPEND_TO_FILE);
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	4639      	mov	r1, r7
 8004ad8:	48be      	ldr	r0, [pc, #760]	; (8004dd4 <TEST_PostProcess+0x9b4>)
 8004ada:	f017 fd97 	bl	801c60c <STM32Fs_WriteTextToFile>
      sprintf(tmp_msg, " was missclassified as %s\n", NN_OUTPUT_CLASS_LIST[predicted_class]);
 8004ade:	4bbe      	ldr	r3, [pc, #760]	; (8004dd8 <TEST_PostProcess+0x9b8>)
 8004ae0:	9a02      	ldr	r2, [sp, #8]
      stm32fs_err_t res = STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_APPEND_TO_FILE);
 8004ae2:	4605      	mov	r5, r0
      sprintf(tmp_msg, " was missclassified as %s\n", NN_OUTPUT_CLASS_LIST[predicted_class]);
 8004ae4:	49bd      	ldr	r1, [pc, #756]	; (8004ddc <TEST_PostProcess+0x9bc>)
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004aec:	9303      	str	r3, [sp, #12]
 8004aee:	f021 fb79 	bl	80261e4 <siprintf>
      res |= STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_APPEND_TO_FILE);
 8004af2:	4639      	mov	r1, r7
 8004af4:	2201      	movs	r2, #1
 8004af6:	48b7      	ldr	r0, [pc, #732]	; (8004dd4 <TEST_PostProcess+0x9b4>)
 8004af8:	f017 fd88 	bl	801c60c <STM32Fs_WriteTextToFile>
 8004afc:	4328      	orrs	r0, r5
      if (res != STM32FS_ERROR_NONE)
 8004afe:	b2c0      	uxtb	r0, r0
 8004b00:	bb70      	cbnz	r0, 8004b60 <TEST_PostProcess+0x740>
    TestContext_Ptr->ValidationContext.valid_conf_matrix[TestContext_Ptr->ValidationContext.class_index][predicted_class]++;
 8004b02:	f8d4 53bc 	ldr.w	r5, [r4, #956]	; 0x3bc
 8004b06:	e63b      	b.n	8004780 <TEST_PostProcess+0x360>
    double categorical_crossentropy = 10.0;
 8004b08:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8004b0c:	e64b      	b.n	80047a6 <TEST_PostProcess+0x386>
    Error_Handler();
 8004b0e:	f000 fac1 	bl	8005094 <Error_Handler>
 8004b12:	e5a9      	b.n	8004668 <TEST_PostProcess+0x248>
      Error_Handler();
 8004b14:	f000 fabe 	bl	8005094 <Error_Handler>
 8004b18:	e599      	b.n	800464e <TEST_PostProcess+0x22e>
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8004b1a:	4eb1      	ldr	r6, [pc, #708]	; (8004de0 <TEST_PostProcess+0x9c0>)
 8004b1c:	2202      	movs	r2, #2
      TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//terminates the UART command processing
 8004b1e:	f8c4 5520 	str.w	r5, [r4, #1312]	; 0x520
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004b22:	f204 543c 	addw	r4, r4, #1340	; 0x53c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004b26:	2180      	movs	r1, #128	; 0x80
 8004b28:	4630      	mov	r0, r6
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8004b2a:	7032      	strb	r2, [r6, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004b2c:	f000 fa42 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004b30:	2201      	movs	r2, #1
 8004b32:	4631      	mov	r1, r6
 8004b34:	4620      	mov	r0, r4
 8004b36:	f010 fefd 	bl	8015934 <HAL_UART_Transmit_DMA>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	f040 80a1 	bne.w	8004c82 <TEST_PostProcess+0x862>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004b40:	4620      	mov	r0, r4
 8004b42:	f011 f927 	bl	8015d94 <HAL_UART_GetState>
 8004b46:	2820      	cmp	r0, #32
 8004b48:	d1fa      	bne.n	8004b40 <TEST_PostProcess+0x720>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8004b4a:	220a      	movs	r2, #10
 8004b4c:	49a5      	ldr	r1, [pc, #660]	; (8004de4 <TEST_PostProcess+0x9c4>)
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f010 ff42 	bl	80159d8 <HAL_UART_Receive_DMA>
 8004b54:	2800      	cmp	r0, #0
 8004b56:	f43f ac95 	beq.w	8004484 <TEST_PostProcess+0x64>
    Error_Handler();
 8004b5a:	f000 fa9b 	bl	8005094 <Error_Handler>
 8004b5e:	e491      	b.n	8004484 <TEST_PostProcess+0x64>
        UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Unable to write to missclassified file", CENTER_MODE);
 8004b60:	f017 ff8c 	bl	801ca7c <UTIL_LCD_GetFont>
 8004b64:	4602      	mov	r2, r0
 8004b66:	2301      	movs	r3, #1
 8004b68:	4630      	mov	r0, r6
 8004b6a:	88d1      	ldrh	r1, [r2, #6]
 8004b6c:	4a9e      	ldr	r2, [pc, #632]	; (8004de8 <TEST_PostProcess+0x9c8>)
 8004b6e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004b72:	4099      	lsls	r1, r3
 8004b74:	f018 f87a 	bl	801cc6c <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004b78:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 8004b7c:	f7fd f852 	bl	8001c24 <DISPLAY_Refresh>
        while (1)
 8004b80:	e7fe      	b.n	8004b80 <TEST_PostProcess+0x760>
        *(aTxBuffer) = cmd_status;
 8004b82:	4897      	ldr	r0, [pc, #604]	; (8004de0 <TEST_PostProcess+0x9c0>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004b84:	2202      	movs	r2, #2
 8004b86:	2180      	movs	r1, #128	; 0x80
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004b88:	f204 543c 	addw	r4, r4, #1340	; 0x53c
        *(aTxBuffer) = cmd_status;
 8004b8c:	7007      	strb	r7, [r0, #0]
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8004b8e:	2701      	movs	r7, #1
 8004b90:	f804 7c18 	strb.w	r7, [r4, #-24]
        App_Cxt_Ptr->run_loop = 0;
 8004b94:	606b      	str	r3, [r5, #4]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004b96:	f000 fa0d 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004b9a:	4891      	ldr	r0, [pc, #580]	; (8004de0 <TEST_PostProcess+0x9c0>)
 8004b9c:	463a      	mov	r2, r7
 8004b9e:	4601      	mov	r1, r0
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f010 fec7 	bl	8015934 <HAL_UART_Transmit_DMA>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	f040 80f3 	bne.w	8004d92 <TEST_PostProcess+0x972>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004bac:	4620      	mov	r0, r4
 8004bae:	f011 f8f1 	bl	8015d94 <HAL_UART_GetState>
 8004bb2:	2820      	cmp	r0, #32
 8004bb4:	d1fa      	bne.n	8004bac <TEST_PostProcess+0x78c>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8004bb6:	220a      	movs	r2, #10
 8004bb8:	498a      	ldr	r1, [pc, #552]	; (8004de4 <TEST_PostProcess+0x9c4>)
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f010 ff0c 	bl	80159d8 <HAL_UART_Receive_DMA>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	f040 80e3 	bne.w	8004d8c <TEST_PostProcess+0x96c>
         BSP_SD_DeInit(0);/*Required in order to avoid subsequent call to Camera_Init() fct to fail*/
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	f008 fda8 	bl	800d71c <BSP_SD_DeInit>
 8004bcc:	e4c6      	b.n	800455c <TEST_PostProcess+0x13c>
          if(dump_output_buff[i]!=0)
 8004bce:	4e87      	ldr	r6, [pc, #540]	; (8004dec <TEST_PostProcess+0x9cc>)
 8004bd0:	edd6 5a00 	vldr	s11, [r6]
 8004bd4:	ed96 6a01 	vldr	s12, [r6, #4]
 8004bd8:	eef5 5a40 	vcmp.f32	s11, #0.0
 8004bdc:	edd6 6a02 	vldr	s13, [r6, #8]
 8004be0:	ed96 7a03 	vldr	s14, [r6, #12]
 8004be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            first_run =0;
 8004be8:	eeb5 6a40 	vcmp.f32	s12, #0.0
          if(dump_output_buff[i]!=0)
 8004bec:	bf14      	ite	ne
 8004bee:	2300      	movne	r3, #0
 8004bf0:	2301      	moveq	r3, #1
            first_run =0;
 8004bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          if(dump_output_buff[i]!=0)
 8004bf6:	eef5 6a40 	vcmp.f32	s13, #0.0
            first_run =0;
 8004bfa:	bf18      	it	ne
 8004bfc:	2300      	movne	r3, #0
          if(dump_output_buff[i]!=0)
 8004bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c02:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004c06:	d042      	beq.n	8004c8e <TEST_PostProcess+0x86e>
 8004c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0c:	d13c      	bne.n	8004c88 <TEST_PostProcess+0x868>
 8004c0e:	edd6 7a04 	vldr	s15, [r6, #16]
 8004c12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1a:	fe07 7a87 	vseleq.f32	s14, s15, s14
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))
 8004c1e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	edd2 3a00 	vldr	s7, [r2]
 8004c26:	ed92 4a01 	vldr	s8, [r2, #4]
 8004c2a:	eef4 3a65 	vcmp.f32	s7, s11
 8004c2e:	edd2 4a02 	vldr	s9, [r2, #8]
 8004c32:	ed92 5a03 	vldr	s10, [r2, #12]
 8004c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              issue_ocurence =1;
 8004c3a:	eeb4 4a46 	vcmp.f32	s8, s12
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))
 8004c3e:	bf14      	ite	ne
 8004c40:	2301      	movne	r3, #1
 8004c42:	2300      	moveq	r3, #0
              issue_ocurence =1;
 8004c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c48:	eef4 4a66 	vcmp.f32	s9, s13
 8004c4c:	bf18      	it	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))
 8004c54:	eeb4 5a47 	vcmp.f32	s10, s14
              issue_ocurence =1;
 8004c58:	bf18      	it	ne
 8004c5a:	2301      	movne	r3, #1
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))
 8004c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c60:	f000 80a2 	beq.w	8004da8 <TEST_PostProcess+0x988>
            TestContext_Ptr->UartContext.uart_host_requested_dump_number = 0;//so to subsequently terminates the UART command processing
 8004c64:	2300      	movs	r3, #0
 8004c66:	f8c4 3528 	str.w	r3, [r4, #1320]	; 0x528
        if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_ping_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE))
 8004c6a:	6822      	ldr	r2, [r4, #0]
 8004c6c:	4960      	ldr	r1, [pc, #384]	; (8004df0 <TEST_PostProcess+0x9d0>)
 8004c6e:	428a      	cmp	r2, r1
 8004c70:	f000 8096 	beq.w	8004da0 <TEST_PostProcess+0x980>
        else if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_pong_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE))
 8004c74:	495f      	ldr	r1, [pc, #380]	; (8004df4 <TEST_PostProcess+0x9d4>)
 8004c76:	428a      	cmp	r2, r1
 8004c78:	f47f ac4e 	bne.w	8004518 <TEST_PostProcess+0xf8>
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8004c7c:	4a5e      	ldr	r2, [pc, #376]	; (8004df8 <TEST_PostProcess+0x9d8>)
 8004c7e:	6022      	str	r2, [r4, #0]
 8004c80:	e44a      	b.n	8004518 <TEST_PostProcess+0xf8>
      Error_Handler();
 8004c82:	f000 fa07 	bl	8005094 <Error_Handler>
 8004c86:	e75b      	b.n	8004b40 <TEST_PostProcess+0x720>
          if(dump_output_buff[i]!=0)
 8004c88:	edd6 7a04 	vldr	s15, [r6, #16]
 8004c8c:	e7c7      	b.n	8004c1e <TEST_PostProcess+0x7fe>
 8004c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c92:	d1f9      	bne.n	8004c88 <TEST_PostProcess+0x868>
 8004c94:	edd6 7a04 	vldr	s15, [r6, #16]
 8004c98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca0:	d1bd      	bne.n	8004c1e <TEST_PostProcess+0x7fe>
        if(first_run == 0)
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8092 	beq.w	8004dcc <TEST_PostProcess+0x9ac>
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0)
 8004ca8:	f8d4 3528 	ldr.w	r3, [r4, #1320]	; 0x528
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004cac:	2702      	movs	r7, #2
 8004cae:	e7dc      	b.n	8004c6a <TEST_PostProcess+0x84a>
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004cb0:	ed95 7a04 	vldr	s14, [r5, #16]
 8004cb4:	af06      	add	r7, sp, #24
 8004cb6:	eddf 7a51 	vldr	s15, [pc, #324]	; 8004dfc <TEST_PostProcess+0x9dc>
          for(int i=0;i<strlen(msg);i++)
 8004cba:	f04f 0a00 	mov.w	sl, #0
 8004cbe:	f8df b120 	ldr.w	fp, [pc, #288]	; 8004de0 <TEST_PostProcess+0x9c0>
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cc8:	68ea      	ldr	r2, [r5, #12]
 8004cca:	494d      	ldr	r1, [pc, #308]	; (8004e00 <TEST_PostProcess+0x9e0>)
          for(int i=0;i<strlen(msg);i++)
 8004ccc:	46d9      	mov	r9, fp
 8004cce:	46b8      	mov	r8, r7
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004cd0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004cd4:	ed8d 7b00 	vstr	d7, [sp]
 8004cd8:	f021 fa84 	bl	80261e4 <siprintf>
          for(int i=0;i<strlen(msg);i++)
 8004cdc:	9702      	str	r7, [sp, #8]
 8004cde:	e003      	b.n	8004ce8 <TEST_PostProcess+0x8c8>
            *(aTxBuffer + i) = msg[i];
 8004ce0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004ce4:	f809 3b01 	strb.w	r3, [r9], #1
          for(int i=0;i<strlen(msg);i++)
 8004ce8:	4638      	mov	r0, r7
 8004cea:	f7fb fb03 	bl	80002f4 <strlen>
 8004cee:	4550      	cmp	r0, sl
 8004cf0:	f10a 0a01 	add.w	sl, sl, #1
 8004cf4:	d8f4      	bhi.n	8004ce0 <TEST_PostProcess+0x8c0>
          *(aTxBuffer + strlen(msg)) = 32;//Space
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	4939      	ldr	r1, [pc, #228]	; (8004de0 <TEST_PostProcess+0x9c0>)
 8004cfa:	9003      	str	r0, [sp, #12]
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004cfc:	f204 583c 	addw	r8, r4, #1340	; 0x53c
          *(aTxBuffer + strlen(msg)) = 32;//Space
 8004d00:	540a      	strb	r2, [r1, r0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004d02:	2202      	movs	r2, #2
 8004d04:	2180      	movs	r1, #128	; 0x80
 8004d06:	4836      	ldr	r0, [pc, #216]	; (8004de0 <TEST_PostProcess+0x9c0>)
 8004d08:	f000 f954 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+1);
 8004d0c:	9b03      	ldr	r3, [sp, #12]
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004d0e:	4934      	ldr	r1, [pc, #208]	; (8004de0 <TEST_PostProcess+0x9c0>)
 8004d10:	4640      	mov	r0, r8
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+1);
 8004d12:	3301      	adds	r3, #1
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	f010 fe0d 	bl	8015934 <HAL_UART_Transmit_DMA>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d153      	bne.n	8004dc6 <TEST_PostProcess+0x9a6>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004d1e:	4640      	mov	r0, r8
 8004d20:	f011 f838 	bl	8015d94 <HAL_UART_GetState>
 8004d24:	2820      	cmp	r0, #32
 8004d26:	d1fa      	bne.n	8004d1e <TEST_PostProcess+0x8fe>
          sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8004d28:	68aa      	ldr	r2, [r5, #8]
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	4935      	ldr	r1, [pc, #212]	; (8004e04 <TEST_PostProcess+0x9e4>)
 8004d2e:	f021 fa59 	bl	80261e4 <siprintf>
          for(int i=0;i<strlen(msg);i++)
 8004d32:	2300      	movs	r3, #0
 8004d34:	469a      	mov	sl, r3
 8004d36:	e005      	b.n	8004d44 <TEST_PostProcess+0x924>
            *(aTxBuffer + i) = msg[i];
 8004d38:	9a02      	ldr	r2, [sp, #8]
 8004d3a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8004d3e:	9202      	str	r2, [sp, #8]
 8004d40:	f80b 3b01 	strb.w	r3, [fp], #1
          for(int i=0;i<strlen(msg);i++)
 8004d44:	4638      	mov	r0, r7
 8004d46:	f7fb fad5 	bl	80002f4 <strlen>
 8004d4a:	4550      	cmp	r0, sl
 8004d4c:	4681      	mov	r9, r0
 8004d4e:	f10a 0a01 	add.w	sl, sl, #1
 8004d52:	d8f1      	bhi.n	8004d38 <TEST_PostProcess+0x918>
          *(aTxBuffer + strlen(msg)) = 13;//CR
 8004d54:	4a22      	ldr	r2, [pc, #136]	; (8004de0 <TEST_PostProcess+0x9c0>)
 8004d56:	230d      	movs	r3, #13
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004d58:	2180      	movs	r1, #128	; 0x80
          *(aTxBuffer + strlen(msg)) = 13;//CR
 8004d5a:	5413      	strb	r3, [r2, r0]
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 8004d5c:	eb02 0a00 	add.w	sl, r2, r0
 8004d60:	230a      	movs	r3, #10
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004d62:	2202      	movs	r2, #2
 8004d64:	481e      	ldr	r0, [pc, #120]	; (8004de0 <TEST_PostProcess+0x9c0>)
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 8004d66:	f88a 3001 	strb.w	r3, [sl, #1]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004d6a:	f000 f923 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+2);
 8004d6e:	f109 0202 	add.w	r2, r9, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004d72:	491b      	ldr	r1, [pc, #108]	; (8004de0 <TEST_PostProcess+0x9c0>)
 8004d74:	4640      	mov	r0, r8
 8004d76:	b292      	uxth	r2, r2
 8004d78:	f010 fddc 	bl	8015934 <HAL_UART_Transmit_DMA>
 8004d7c:	bb00      	cbnz	r0, 8004dc0 <TEST_PostProcess+0x9a0>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004d7e:	4640      	mov	r0, r8
 8004d80:	f011 f808 	bl	8015d94 <HAL_UART_GetState>
 8004d84:	2820      	cmp	r0, #32
 8004d86:	d1fa      	bne.n	8004d7e <TEST_PostProcess+0x95e>
 8004d88:	f7ff bbd1 	b.w	800452e <TEST_PostProcess+0x10e>
    Error_Handler();
 8004d8c:	f000 f982 	bl	8005094 <Error_Handler>
 8004d90:	e719      	b.n	8004bc6 <TEST_PostProcess+0x7a6>
      Error_Handler();
 8004d92:	f000 f97f 	bl	8005094 <Error_Handler>
 8004d96:	e709      	b.n	8004bac <TEST_PostProcess+0x78c>
          CAMERA_Set_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8004d98:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8004d9a:	f7fc fd93 	bl	80018c4 <CAMERA_Set_TestBar_Mode>
 8004d9e:	e686      	b.n	8004aae <TEST_PostProcess+0x68e>
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_pong_buff;
 8004da0:	4a19      	ldr	r2, [pc, #100]	; (8004e08 <TEST_PostProcess+0x9e8>)
 8004da2:	6022      	str	r2, [r4, #0]
 8004da4:	f7ff bbb8 	b.w	8004518 <TEST_PostProcess+0xf8>
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))
 8004da8:	ed92 7a04 	vldr	s14, [r2, #16]
 8004dac:	eeb4 7a67 	vcmp.f32	s14, s15
 8004db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db4:	f47f af56 	bne.w	8004c64 <TEST_PostProcess+0x844>
          if(issue_ocurence == 1)
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f43f af75 	beq.w	8004ca8 <TEST_PostProcess+0x888>
 8004dbe:	e751      	b.n	8004c64 <TEST_PostProcess+0x844>
      Error_Handler();
 8004dc0:	f000 f968 	bl	8005094 <Error_Handler>
 8004dc4:	e7db      	b.n	8004d7e <TEST_PostProcess+0x95e>
 8004dc6:	f000 f965 	bl	8005094 <Error_Handler>
 8004dca:	e7a8      	b.n	8004d1e <TEST_PostProcess+0x8fe>
          if(dump_output_buff[i]!=0)
 8004dcc:	eeb0 7a67 	vmov.f32	s14, s15
 8004dd0:	e725      	b.n	8004c1e <TEST_PostProcess+0x7fe>
 8004dd2:	bf00      	nop
 8004dd4:	08029080 	.word	0x08029080
 8004dd8:	24000008 	.word	0x24000008
 8004ddc:	08029398 	.word	0x08029398
 8004de0:	24007700 	.word	0x24007700
 8004de4:	240076e0 	.word	0x240076e0
 8004de8:	080293b4 	.word	0x080293b4
 8004dec:	d0cdae80 	.word	0xd0cdae80
 8004df0:	d0daff25 	.word	0xd0daff25
 8004df4:	d0e827e5 	.word	0xd0e827e5
 8004df8:	d0cdd680 	.word	0xd0cdd680
 8004dfc:	42c80000 	.word	0x42c80000
 8004e00:	08028cc4 	.word	0x08028cc4
 8004e04:	08028cd0 	.word	0x08028cd0
 8004e08:	d0daff40 	.word	0xd0daff40

08004e0c <HAL_UART_ErrorCallback>:
 *
 * @param huart pointer to UART handle
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
  while(1);
 8004e0c:	e7fe      	b.n	8004e0c <HAL_UART_ErrorCallback>
 8004e0e:	bf00      	nop

08004e10 <UTILS_Init>:
* @brief  UTILS Initialization
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval None
*/
void UTILS_Init(UtilsContext_TypeDef *Utils_Context_Ptr)
{
 8004e10:	b510      	push	{r4, lr}
 8004e12:	4603      	mov	r3, r0
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8004e14:	2400      	movs	r4, #0
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 8004e16:	2232      	movs	r2, #50	; 0x32
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8004e18:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
  Utils_Context_Init(Utils_Context_Ptr);
  
  /*LEDs Init*/
  BSP_LED_Init(LED_GREEN);
 8004e1c:	4620      	mov	r0, r4
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 8004e1e:	635a      	str	r2, [r3, #52]	; 0x34
  Utils_Context_Ptr->JoystickContext.camBrightness=0;/* Mid-level camera brightness. */
 8004e20:	e9c3 440b 	strd	r4, r4, [r3, #44]	; 0x2c
  Utils_Context_Ptr->ExecTimingContext.tcapturestart2= 0;
 8004e24:	e9c3 4406 	strd	r4, r4, [r3, #24]
  Utils_Context_Ptr->ExecTimingContext.tcapturestop=0; 
 8004e28:	e9c3 4408 	strd	r4, r4, [r3, #32]
  BSP_LED_Init(LED_GREEN);
 8004e2c:	f005 ff0c 	bl	800ac48 <BSP_LED_Init>
  BSP_LED_Init(LED_ORANGE);
 8004e30:	2001      	movs	r0, #1
 8004e32:	f005 ff09 	bl	800ac48 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8004e36:	2002      	movs	r0, #2
 8004e38:	f005 ff06 	bl	800ac48 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8004e3c:	2003      	movs	r0, #3
 8004e3e:	f005 ff03 	bl	800ac48 <BSP_LED_Init>
  
  /* Activate joystick. */
  BSP_JOY_Init(JOY1, JOY_MODE_GPIO,JOY_ALL);
 8004e42:	4621      	mov	r1, r4
 8004e44:	4620      	mov	r0, r4
 8004e46:	221f      	movs	r2, #31
 8004e48:	f005 ffc6 	bl	800add8 <BSP_JOY_Init>
  
  /* Configure the Wakeup push-button in GPIO Mode */
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	4620      	mov	r0, r4
}
 8004e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8004e54:	f005 bf5c 	b.w	800ad10 <BSP_PB_Init>

08004e58 <UTILS_GetTimeStamp>:
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval Time stamp
*/
uint32_t UTILS_GetTimeStamp(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  return HAL_GetTick();
 8004e58:	f008 bdde 	b.w	800da18 <HAL_GetTick>

08004e5c <UTILS_Dma2d_Memcpy>:
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 if no swap, else 1
*/
void UTILS_Dma2d_Memcpy(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                        uint32_t rowStride, uint32_t input_color_format, uint32_t output_color_format, int pfc,
                        int red_blue_swap)
{
 8004e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e60:	b085      	sub	sp, #20
 8004e62:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8004e66:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8004e6a:	f1bb 0f04 	cmp.w	fp, #4
 8004e6e:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 8004e72:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8004e76:	e9dd 6a13 	ldrd	r6, sl, [sp, #76]	; 0x4c
 8004e7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e7e:	d829      	bhi.n	8004ed4 <UTILS_Dma2d_Memcpy+0x78>
  uint32_t bytepp = GetBytesPerPixel(output_color_format);

  uint32_t destination = (uint32_t)pDst + (y * rowStride + x) * bytepp;
 8004e80:	fb04 2203 	mla	r2, r4, r3, r2
 8004e84:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <UTILS_Dma2d_Memcpy+0xac>)
 8004e86:	f853 502b 	ldr.w	r5, [r3, fp, lsl #2]
 8004e8a:	fb02 f505 	mul.w	r5, r2, r5
  uint32_t source = (uint32_t)pSrc;

  HAL_DMA2D_DeInit(&hlcd_dma2d);
 8004e8e:	481f      	ldr	r0, [pc, #124]	; (8004f0c <UTILS_Dma2d_Memcpy+0xb0>)
 8004e90:	f00a fc48 	bl	800f724 <HAL_DMA2D_DeInit>
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
  hlcd_dma2d.Init.ColorMode = output_color_format;

  /* Output offset in pixels == nb of pixels to be added at end of line to come to the  */
  /* first pixel of the next line : on the output side of the DMA2D computation         */
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8004e94:	eba4 0308 	sub.w	r3, r4, r8
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004e98:	2e00      	cmp	r6, #0
 8004e9a:	4c1c      	ldr	r4, [pc, #112]	; (8004f0c <UTILS_Dma2d_Memcpy+0xb0>)
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8004e9c:	e9c4 b302 	strd	fp, r3, [r4, #8]
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004ea0:	bf14      	ite	ne
 8004ea2:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8004ea6:	2300      	moveq	r3, #0
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004ea8:	4620      	mov	r0, r4
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
 8004eaa:	64a7      	str	r7, [r4, #72]	; 0x48
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004eac:	6063      	str	r3, [r4, #4]
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004eae:	f1ba 0300 	subs.w	r3, sl, #0
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004eb2:	f04f 0a01 	mov.w	sl, #1
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004eb6:	bf18      	it	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	65a3      	str	r3, [r4, #88]	; 0x58
  hlcd_dma2d.XferCpltCallback = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	6223      	str	r3, [r4, #32]
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8004ec0:	6463      	str	r3, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004ec2:	23ff      	movs	r3, #255	; 0xff
 8004ec4:	e9c4 a313 	strd	sl, r3, [r4, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004ec8:	f00a fbea 	bl	800f6a0 <HAL_DMA2D_Init>
 8004ecc:	b120      	cbz	r0, 8004ed8 <UTILS_Dma2d_Memcpy+0x7c>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
      }
    }
  }
}
 8004ece:	b005      	add	sp, #20
 8004ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
 8004ed4:	2500      	movs	r5, #0
 8004ed6:	e7da      	b.n	8004e8e <UTILS_Dma2d_Memcpy+0x32>
    if (HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004ed8:	4651      	mov	r1, sl
 8004eda:	4620      	mov	r0, r4
 8004edc:	f00a fe32 	bl	800fb44 <HAL_DMA2D_ConfigLayer>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d1f4      	bne.n	8004ece <UTILS_Dma2d_Memcpy+0x72>
      if (HAL_DMA2D_Start(&hlcd_dma2d, source, destination, xsize, ysize) == HAL_OK)
 8004ee4:	9a03      	ldr	r2, [sp, #12]
 8004ee6:	4643      	mov	r3, r8
 8004ee8:	9902      	ldr	r1, [sp, #8]
 8004eea:	4620      	mov	r0, r4
 8004eec:	442a      	add	r2, r5
 8004eee:	f8cd 9000 	str.w	r9, [sp]
 8004ef2:	f00a fc9d 	bl	800f830 <HAL_DMA2D_Start>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d1e9      	bne.n	8004ece <UTILS_Dma2d_Memcpy+0x72>
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8004efa:	211e      	movs	r1, #30
 8004efc:	4620      	mov	r0, r4
}
 8004efe:	b005      	add	sp, #20
 8004f00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8004f04:	f00a bcf0 	b.w	800f8e8 <HAL_DMA2D_PollForTransfer>
 8004f08:	080294b8 	.word	0x080294b8
 8004f0c:	24009f10 	.word	0x24009f10

08004f10 <UTILS_Joystick_Check>:
void UTILS_Joystick_Check(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  JoystickContext_TypeDef* Joystick_Ctx_Ptr=&Utils_Context_Ptr->JoystickContext;
  
  /* Get the joystick state. */
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004f10:	2100      	movs	r1, #0
{
 8004f12:	b538      	push	{r3, r4, r5, lr}
 8004f14:	4604      	mov	r4, r0
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004f16:	4608      	mov	r0, r1
 8004f18:	f005 fff2 	bl	800af00 <BSP_JOY_GetState>
 8004f1c:	b2c0      	uxtb	r0, r0

  switch (Joystick_Ctx_Ptr->joyState)
 8004f1e:	1e83      	subs	r3, r0, #2
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004f20:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  switch (Joystick_Ctx_Ptr->joyState)
 8004f24:	2b0e      	cmp	r3, #14
 8004f26:	d809      	bhi.n	8004f3c <UTILS_Joystick_Check+0x2c>
 8004f28:	e8df f003 	tbb	[pc, r3]
 8004f2c:	081c082f 	.word	0x081c082f
 8004f30:	08290808 	.word	0x08290808
 8004f34:	08080808 	.word	0x08080808
 8004f38:	0808      	.short	0x0808
 8004f3a:	23          	.byte	0x23
 8004f3b:	00          	.byte	0x00

    default:
      break;
  }

  if ((Joystick_Ctx_Ptr->joyState == JOY_UP) || (Joystick_Ctx_Ptr->joyState == JOY_DOWN) || (Joystick_Ctx_Ptr->joyState == JOY_LEFT) || (Joystick_Ctx_Ptr->joyState == JOY_RIGHT))
 8004f3c:	2810      	cmp	r0, #16
 8004f3e:	d817      	bhi.n	8004f70 <UTILS_Joystick_Check+0x60>
 8004f40:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <UTILS_Joystick_Check+0xa0>)
 8004f42:	40c3      	lsrs	r3, r0
 8004f44:	07db      	lsls	r3, r3, #31
 8004f46:	d529      	bpl.n	8004f9c <UTILS_Joystick_Check+0x8c>
  {
    /* Execute the change. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004f48:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f007 fb4a 	bl	800c5e4 <BSP_CAMERA_SetBrightness>
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
 8004f50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004f52:	2000      	movs	r0, #0
 8004f54:	f007 fb6a 	bl	800c62c <BSP_CAMERA_SetContrast>
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f5a:	2000      	movs	r0, #0
    /* Restore the default values. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
  }
}
 8004f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004f60:	f008 b9a2 	b.w	800d2a8 <BSP_LCD_SetBrightness>
      if (Joystick_Ctx_Ptr->camContrast > CAMERA_CONTRAST_MIN)
 8004f64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f66:	1cda      	adds	r2, r3, #3
 8004f68:	da15      	bge.n	8004f96 <UTILS_Joystick_Check+0x86>
        Joystick_Ctx_Ptr->joyState = JOY_NONE; /* Cancel LCD brightness change. */
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8004f70:	bd38      	pop	{r3, r4, r5, pc}
      if (Joystick_Ctx_Ptr->lcdBrightness < LCD_BRIGHTNESS_MAX)
 8004f72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f74:	2b63      	cmp	r3, #99	; 0x63
 8004f76:	dcf8      	bgt.n	8004f6a <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->lcdBrightness += LCD_BRIGHTNESS_STEP;
 8004f78:	330a      	adds	r3, #10
 8004f7a:	6363      	str	r3, [r4, #52]	; 0x34
 8004f7c:	e7e4      	b.n	8004f48 <UTILS_Joystick_Check+0x38>
      if (Joystick_Ctx_Ptr->camContrast < CAMERA_CONTRAST_MAX)
 8004f7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	dcf2      	bgt.n	8004f6a <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->camContrast++;
 8004f84:	3301      	adds	r3, #1
 8004f86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f88:	e7de      	b.n	8004f48 <UTILS_Joystick_Check+0x38>
      if (Joystick_Ctx_Ptr->lcdBrightness > LCD_BRIGHTNESS_MIN)
 8004f8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	ddec      	ble.n	8004f6a <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->lcdBrightness -= LCD_BRIGHTNESS_STEP;
 8004f90:	3b0a      	subs	r3, #10
 8004f92:	6363      	str	r3, [r4, #52]	; 0x34
 8004f94:	e7d8      	b.n	8004f48 <UTILS_Joystick_Check+0x38>
        Joystick_Ctx_Ptr->camContrast--;
 8004f96:	3b01      	subs	r3, #1
 8004f98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f9a:	e7d5      	b.n	8004f48 <UTILS_Joystick_Check+0x38>
  else if (Joystick_Ctx_Ptr->joyState == JOY_SEL)
 8004f9c:	2801      	cmp	r0, #1
 8004f9e:	d1e7      	bne.n	8004f70 <UTILS_Joystick_Check+0x60>
    Joystick_Ctx_Ptr->camContrast = 0;     /* Mid-level camera contrast. */
 8004fa0:	2500      	movs	r5, #0
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 8004fa2:	2332      	movs	r3, #50	; 0x32
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	4628      	mov	r0, r5
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 8004fa8:	6363      	str	r3, [r4, #52]	; 0x34
    Joystick_Ctx_Ptr->camBrightness = 0; /* Mid-level camera brightness. */
 8004faa:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004fae:	e7cd      	b.n	8004f4c <UTILS_Joystick_Check+0x3c>
 8004fb0:	00010114 	.word	0x00010114

08004fb4 <UTILS_DCache_Coherency_Maintenance>:
 * @retval None
 */
void UTILS_DCache_Coherency_Maintenance(uint32_t *mem_addr, int32_t mem_size, DCache_Coherency_TypeDef Maintenance_operation)
{
  /*Check alignement on 32-bytes for the memory adress and check that the memory size is multiple of 32-bytes*/
  if(((uint32_t)mem_addr%32 != 0) || (mem_size%32 != 0))
 8004fb4:	ea40 0301 	orr.w	r3, r0, r1
 8004fb8:	06db      	lsls	r3, r3, #27
 8004fba:	d104      	bne.n	8004fc6 <UTILS_DCache_Coherency_Maintenance+0x12>
    while(1);
  
  if(Maintenance_operation == INVALIDATE)
 8004fbc:	2a01      	cmp	r2, #1
 8004fbe:	d003      	beq.n	8004fc8 <UTILS_DCache_Coherency_Maintenance+0x14>
  {
    SCB_InvalidateDCache_by_Addr((void*)mem_addr, mem_size);
  }
  else if(Maintenance_operation == CLEAN)
 8004fc0:	2a02      	cmp	r2, #2
 8004fc2:	d016      	beq.n	8004ff2 <UTILS_DCache_Coherency_Maintenance+0x3e>
  {
    SCB_CleanDCache_by_Addr((void *)mem_addr, mem_size);
  }
}
 8004fc4:	4770      	bx	lr
    while(1);
 8004fc6:	e7fe      	b.n	8004fc6 <UTILS_DCache_Coherency_Maintenance+0x12>
  __ASM volatile ("dsb 0xF":::"memory");
 8004fc8:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 8004fcc:	2900      	cmp	r1, #0
 8004fce:	dd0b      	ble.n	8004fe8 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004fd0:	1e4b      	subs	r3, r1, #1
 8004fd2:	f100 0120 	add.w	r1, r0, #32
      SCB->DCIMVAC = op_addr;
 8004fd6:	4a0f      	ldr	r2, [pc, #60]	; (8005014 <UTILS_DCache_Coherency_Maintenance+0x60>)
 8004fd8:	f023 031f 	bic.w	r3, r3, #31
 8004fdc:	440b      	add	r3, r1
 8004fde:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004fe2:	3020      	adds	r0, #32
    while (op_size > 0) {
 8004fe4:	4283      	cmp	r3, r0
 8004fe6:	d1fa      	bne.n	8004fde <UTILS_DCache_Coherency_Maintenance+0x2a>
 8004fe8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004fec:	f3bf 8f6f 	isb	sy
}
 8004ff0:	4770      	bx	lr
  __ASM volatile ("dsb 0xF":::"memory");
 8004ff2:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 8004ff6:	2900      	cmp	r1, #0
 8004ff8:	ddf6      	ble.n	8004fe8 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004ffa:	1e4b      	subs	r3, r1, #1
 8004ffc:	f100 0120 	add.w	r1, r0, #32
      SCB->DCCMVAC = op_addr;
 8005000:	4a04      	ldr	r2, [pc, #16]	; (8005014 <UTILS_DCache_Coherency_Maintenance+0x60>)
 8005002:	f023 031f 	bic.w	r3, r3, #31
 8005006:	440b      	add	r3, r1
 8005008:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 800500c:	3020      	adds	r0, #32
    while (op_size > 0) {
 800500e:	4298      	cmp	r0, r3
 8005010:	d1fa      	bne.n	8005008 <UTILS_DCache_Coherency_Maintenance+0x54>
 8005012:	e7e9      	b.n	8004fe8 <UTILS_DCache_Coherency_Maintenance+0x34>
 8005014:	e000ed00 	.word	0xe000ed00

08005018 <UTILS_Bubblesort>:
void UTILS_Bubblesort(float *prob, int *classes, int size)
{
  float p;
  int c;

  for (int i = 0; i < size; i++)
 8005018:	2a00      	cmp	r2, #0
 800501a:	dd25      	ble.n	8005068 <UTILS_Bubblesort+0x50>
{
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	f1a0 0e04 	sub.w	lr, r0, #4
 8005022:	1e56      	subs	r6, r2, #1
  {
    for (int ii = 0; ii < size - i - 1; ii++)
 8005024:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 8005028:	b1ee      	cbz	r6, 8005066 <UTILS_Bubblesort+0x4e>
 800502a:	460b      	mov	r3, r1
 800502c:	f100 0c04 	add.w	ip, r0, #4
 8005030:	4602      	mov	r2, r0
    {
      if (prob[ii] < prob[ii + 1])
 8005032:	ecf2 7a01 	vldmia	r2!, {s15}
 8005036:	ecbc 7a01 	vldmia	ip!, {s14}
 800503a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800503e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005042:	d507      	bpl.n	8005054 <UTILS_Bubblesort+0x3c>
      {
        p = prob[ii];
        prob[ii] = prob[ii + 1];
        prob[ii + 1] = p;
        c = classes[ii];
        classes[ii] = classes[ii + 1];
 8005044:	e9d3 4500 	ldrd	r4, r5, [r3]
        prob[ii] = prob[ii + 1];
 8005048:	ed02 7a01 	vstr	s14, [r2, #-4]
        prob[ii + 1] = p;
 800504c:	ed4c 7a01 	vstr	s15, [ip, #-4]
        classes[ii] = classes[ii + 1];
 8005050:	e9c3 5400 	strd	r5, r4, [r3]
    for (int ii = 0; ii < size - i - 1; ii++)
 8005054:	4572      	cmp	r2, lr
 8005056:	f103 0304 	add.w	r3, r3, #4
 800505a:	d1ea      	bne.n	8005032 <UTILS_Bubblesort+0x1a>
  for (int i = 0; i < size; i++)
 800505c:	3e01      	subs	r6, #1
 800505e:	f1ae 0e04 	sub.w	lr, lr, #4
    for (int ii = 0; ii < size - i - 1; ii++)
 8005062:	2e00      	cmp	r6, #0
 8005064:	d1e1      	bne.n	800502a <UTILS_Bubblesort+0x12>
        classes[ii + 1] = c;
      }
    }
  }
}
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop

0800506c <UTILS_Compute_ExecutionTiming>:
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
  
#if MEMORY_SCHEME == FULL_INTERNAL_MEM_OPT  
  UtilsContext_Ptr->ExecTimingContext.Tfps =UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT 
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 800506c:	6901      	ldr	r1, [r0, #16]
 800506e:	6882      	ldr	r2, [r0, #8]
{
 8005070:	b430      	push	{r4, r5}
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8005072:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8005076:	440a      	add	r2, r1
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8005078:	1b1b      	subs	r3, r3, r4
  AppContext_TypeDef *App_Cxt_Ptr=UtilsContext_Ptr->AppCtxPtr;
 800507a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 800507c:	4293      	cmp	r3, r2
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 800507e:	6003      	str	r3, [r0, #0]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8005080:	d203      	bcs.n	800508a <UTILS_Compute_ExecutionTiming+0x1e>
    UtilsContext_Ptr->ExecTimingContext.Tfps = UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 8005082:	68c3      	ldr	r3, [r0, #12]
 8005084:	6845      	ldr	r5, [r0, #4]
 8005086:	442b      	add	r3, r5
 8005088:	4413      	add	r3, r2
 800508a:	6143      	str	r3, [r0, #20]
  else
    UtilsContext_Ptr->ExecTimingContext.Tfps =  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#endif

  App_Cxt_Ptr->nn_inference_time=UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 800508c:	60a1      	str	r1, [r4, #8]
}
 800508e:	bc30      	pop	{r4, r5}
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop

08005094 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8005094:	b508      	push	{r3, lr}
  BSP_LED_Off(LED_GREEN);
 8005096:	2000      	movs	r0, #0
 8005098:	f005 fe16 	bl	800acc8 <BSP_LED_Off>
  BSP_LED_Off(LED_ORANGE);
 800509c:	2001      	movs	r0, #1
 800509e:	f005 fe13 	bl	800acc8 <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 80050a2:	2002      	movs	r0, #2
 80050a4:	f005 fe10 	bl	800acc8 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 80050a8:	2003      	movs	r0, #3
 80050aa:	f005 fe0d 	bl	800acc8 <BSP_LED_Off>

  /* Turn LED RED on */
  //BSP_LED_On(LED_BLUE);
  while (1)
 80050ae:	e7fe      	b.n	80050ae <Error_Handler+0x1a>

080050b0 <main>:
{
 80050b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b4:	b09e      	sub	sp, #120	; 0x78
  HAL_MPU_Disable();
 80050b6:	f008 fd5d 	bl	800db74 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0xD0000000;
 80050ba:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80050be:	2101      	movs	r1, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80050c0:	4a97      	ldr	r2, [pc, #604]	; (8005320 <main+0x270>)
 80050c2:	4b98      	ldr	r3, [pc, #608]	; (8005324 <main+0x274>)
  MPU_InitStruct.BaseAddress = 0xD0000000;
 80050c4:	900b      	str	r0, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80050c6:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80050c8:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80050cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80050d0:	f008 fd6e 	bl	800dbb0 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80050d4:	2004      	movs	r0, #4
 80050d6:	f008 fd5b 	bl	800db90 <HAL_MPU_Enable>
 80050da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80050de:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80050e2:	4891      	ldr	r0, [pc, #580]	; (8005328 <main+0x278>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80050ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80050ee:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80050f2:	6943      	ldr	r3, [r0, #20]
 80050f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f8:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80050fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80050fe:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8005102:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005106:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800510a:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800510e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005112:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005116:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 800511a:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800511c:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005120:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005122:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8005126:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005128:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	d1f8      	bne.n	8005122 <main+0x72>
    } while(sets-- != 0U);
 8005130:	3c20      	subs	r4, #32
 8005132:	f114 0f20 	cmn.w	r4, #32
 8005136:	d1f1      	bne.n	800511c <main+0x6c>
 8005138:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800513c:	6943      	ldr	r3, [r0, #20]
 800513e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005142:	6143      	str	r3, [r0, #20]
 8005144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005148:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800514c:	f008 fc28 	bl	800d9a0 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8005150:	2004      	movs	r0, #4
 8005152:	f00c fac1 	bl	80116d8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005156:	4b75      	ldr	r3, [pc, #468]	; (800532c <main+0x27c>)
 8005158:	2100      	movs	r1, #0
 800515a:	4a75      	ldr	r2, [pc, #468]	; (8005330 <main+0x280>)
 800515c:	9100      	str	r1, [sp, #0]
 800515e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005160:	f021 0101 	bic.w	r1, r1, #1
 8005164:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	6993      	ldr	r3, [r2, #24]
 8005170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005174:	6193      	str	r3, [r2, #24]
 8005176:	6993      	ldr	r3, [r2, #24]
 8005178:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	9b00      	ldr	r3, [sp, #0]
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8005180:	6993      	ldr	r3, [r2, #24]
 8005182:	049b      	lsls	r3, r3, #18
 8005184:	d5fc      	bpl.n	8005180 <main+0xd0>
  RCC_OscInitStruct.PLL.PLLM = 5;
 8005186:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 8005188:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800518a:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800518c:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800518e:	2601      	movs	r6, #1
 8005190:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005194:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8005196:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8005198:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800519a:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLP = 2;
 800519c:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 160;
 800519e:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80051a2:	2104      	movs	r1, #4
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80051a4:	2208      	movs	r2, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80051a6:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80051aa:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80051ae:	e9cd 1418 	strd	r1, r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80051b2:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80051b6:	f00c fead 	bl	8011f14 <HAL_RCC_OscConfig>
  if (ret != HAL_OK)
 80051ba:	2800      	cmp	r0, #0
 80051bc:	f040 80ae 	bne.w	800531c <main+0x26c>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 80051c0:	2200      	movs	r2, #0
 80051c2:	2308      	movs	r3, #8
 80051c4:	263f      	movs	r6, #63	; 0x3f
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80051c6:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 80051c8:	2703      	movs	r7, #3
 80051ca:	2440      	movs	r4, #64	; 0x40
 80051cc:	2540      	movs	r5, #64	; 0x40
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80051ce:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 80051d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051d8:	2340      	movs	r3, #64	; 0x40
 80051da:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80051de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80051e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80051e6:	f00d fa1f 	bl	8012628 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK)
 80051ea:	4606      	mov	r6, r0
 80051ec:	2800      	cmp	r0, #0
 80051ee:	f040 8095 	bne.w	800531c <main+0x26c>
  __HAL_RCC_CSI_ENABLE();
 80051f2:	4d50      	ldr	r5, [pc, #320]	; (8005334 <main+0x284>)
  APP_Init(&App_Context);
 80051f4:	4c50      	ldr	r4, [pc, #320]	; (8005338 <main+0x288>)
  __HAL_RCC_CSI_ENABLE();
 80051f6:	682b      	ldr	r3, [r5, #0]
 80051f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fc:	602b      	str	r3, [r5, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051fe:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8005202:	f043 0302 	orr.w	r3, r3, #2
 8005206:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 800520a:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	9b01      	ldr	r3, [sp, #4]
  HAL_EnableCompensationCell();
 8005216:	f008 fc1d 	bl	800da54 <HAL_EnableCompensationCell>
  __HAL_RCC_CRC_CLK_ENABLE();
 800521a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  APP_Init(&App_Context);
 800521e:	4620      	mov	r0, r4
  __HAL_RCC_CRC_CLK_ENABLE();
 8005220:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005224:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005228:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800522c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005230:	9302      	str	r3, [sp, #8]
 8005232:	9b02      	ldr	r3, [sp, #8]
  APP_Init(&App_Context);
 8005234:	f7fb ff46 	bl	80010c4 <APP_Init>
  TEST_Init(App_Context.Test_ContextPtr);
 8005238:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800523a:	f7fd fe4d 	bl	8002ed8 <TEST_Init>
  UTILS_Init(App_Context.Utils_ContextPtr);
 800523e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005240:	f7ff fde6 	bl	8004e10 <UTILS_Init>
  DISPLAY_Init(App_Context.Display_ContextPtr);
 8005244:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005246:	f7fc fbc5 	bl	80019d4 <DISPLAY_Init>
  AI_Init(App_Context.Ai_ContextPtr);
 800524a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800524c:	f7fb fd44 	bl	8000cd8 <AI_Init>
   init.InterfaceMode=MT25TL01G_QPI_MODE;
 8005250:	493a      	ldr	r1, [pc, #232]	; (800533c <main+0x28c>)
 8005252:	f240 1203 	movw	r2, #259	; 0x103
   init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8005256:	2340      	movs	r3, #64	; 0x40
   if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8005258:	4630      	mov	r0, r6
   init.InterfaceMode=MT25TL01G_QPI_MODE;
 800525a:	800a      	strh	r2, [r1, #0]
   init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 800525c:	708b      	strb	r3, [r1, #2]
   if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800525e:	f008 f851 	bl	800d304 <BSP_QSPI_Init>
 8005262:	b100      	cbz	r0, 8005266 <main+0x1b6>
     while(1);
 8005264:	e7fe      	b.n	8005264 <main+0x1b4>
     if(BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8005266:	f008 fa3d 	bl	800d6e4 <BSP_QSPI_EnableMemoryMappedMode>
 800526a:	b100      	cbz	r0, 800526e <main+0x1be>
       while(1);
 800526c:	e7fe      	b.n	800526c <main+0x1bc>
  int is_menu = DISPLAY_WelcomeScreen(App_Context.Display_ContextPtr);
 800526e:	6b20      	ldr	r0, [r4, #48]	; 0x30
	__IO uint32_t uwVolume = 100;
 8005270:	2764      	movs	r7, #100	; 0x64
  int is_menu = DISPLAY_WelcomeScreen(App_Context.Display_ContextPtr);
 8005272:	f7fc fc01 	bl	8001a78 <DISPLAY_WelcomeScreen>
 8005276:	4605      	mov	r5, r0
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 8005278:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8005344 <main+0x294>
    UTIL_LCD_SetFont(&Font24);
 800527c:	4e30      	ldr	r6, [pc, #192]	; (8005340 <main+0x290>)
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 800527e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005280:	bb75      	cbnz	r5, 80052e0 <main+0x230>
 8005282:	f8d0 3520 	ldr.w	r3, [r0, #1312]	; 0x520
 8005286:	2b01      	cmp	r3, #1
 8005288:	d02a      	beq.n	80052e0 <main+0x230>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 800528a:	7823      	ldrb	r3, [r4, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d02c      	beq.n	80052ea <main+0x23a>
 8005290:	2b04      	cmp	r3, #4
 8005292:	d02a      	beq.n	80052ea <main+0x23a>
 8005294:	2b03      	cmp	r3, #3
 8005296:	d03c      	beq.n	8005312 <main+0x262>
  while(App_Context.run_loop)
 8005298:	6863      	ldr	r3, [r4, #4]
 800529a:	b1bb      	cbz	r3, 80052cc <main+0x21c>
    UTILS_Joystick_Check(App_Context.Utils_ContextPtr);
 800529c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800529e:	f7ff fe37 	bl	8004f10 <UTILS_Joystick_Check>
    TEST_CmdIf_Check(App_Context.Test_ContextPtr);          
 80052a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80052a4:	f7fd fecc 	bl	8003040 <TEST_CmdIf_Check>
    APP_GetNextReadyFrame(&App_Context);
 80052a8:	4620      	mov	r0, r4
 80052aa:	f7fb ff55 	bl	8001158 <APP_GetNextReadyFrame>
    APP_StartNewFrameAcquisition(&App_Context);
 80052ae:	4620      	mov	r0, r4
 80052b0:	f7fc f80e 	bl	80012d0 <APP_StartNewFrameAcquisition>
    APP_FramePreprocess(&App_Context);
 80052b4:	4620      	mov	r0, r4
 80052b6:	f7fc f829 	bl	800130c <APP_FramePreprocess>
    APP_NetworkInference(&App_Context);
 80052ba:	4620      	mov	r0, r4
 80052bc:	f7fc f828 	bl	8001310 <APP_NetworkInference>
    APP_Postprocess(&App_Context);
 80052c0:	4620      	mov	r0, r4
 80052c2:	f7fc f857 	bl	8001374 <APP_Postprocess>
  while(App_Context.run_loop)
 80052c6:	6863      	ldr	r3, [r4, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e7      	bne.n	800529c <main+0x1ec>
    AI_Deinit();
 80052cc:	f7fb fef8 	bl	80010c0 <AI_Deinit>
    App_Context.run_loop = 1;
 80052d0:	2301      	movs	r3, #1
    UTIL_LCD_SetFont(&Font24);
 80052d2:	4630      	mov	r0, r6
    App_Context.run_loop = 1;
 80052d4:	6063      	str	r3, [r4, #4]
    UTIL_LCD_SetFont(&Font24);
 80052d6:	f017 fbc9 	bl	801ca6c <UTIL_LCD_SetFont>
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 80052da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80052dc:	2d00      	cmp	r5, #0
 80052de:	d0d0      	beq.n	8005282 <main+0x1d2>
   TEST_MainMenu(App_Context.Test_ContextPtr);
 80052e0:	f7fd ff14 	bl	800310c <TEST_MainMenu>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 80052e4:	7823      	ldrb	r3, [r4, #0]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d1d2      	bne.n	8005290 <main+0x1e0>
    CAMERA_Init(App_Context.Camera_ContextPtr);
 80052ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80052ec:	f7fc fa08 	bl	8001700 <CAMERA_Init>
	 AudioPlayInit->Device = AUDIO_OUT_DEVICE_HEADPHONE;
 80052f0:	f8d8 1000 	ldr.w	r1, [r8]
 80052f4:	2302      	movs	r3, #2
	 AudioPlayInit->SampleRate = 11025 ;
 80052f6:	f642 3011 	movw	r0, #11025	; 0x2b11
	 AudioPlayInit->BitsPerSample = AUDIO_RESOLUTION_16B;
 80052fa:	2210      	movs	r2, #16
	__IO uint32_t uwVolume = 100;
 80052fc:	970a      	str	r7, [sp, #40]	; 0x28
	 AudioPlayInit->Device = AUDIO_OUT_DEVICE_HEADPHONE;
 80052fe:	600b      	str	r3, [r1, #0]
	 AudioPlayInit->ChannelsNbr = 2;
 8005300:	60cb      	str	r3, [r1, #12]
	 AudioPlayInit->BitsPerSample = AUDIO_RESOLUTION_16B;
 8005302:	e9c1 0201 	strd	r0, r2, [r1, #4]
	 AudioPlayInit->Volume = uwVolume;
 8005306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	 BSP_AUDIO_OUT_Init(0, AudioPlayInit);
 8005308:	2000      	movs	r0, #0
	 AudioPlayInit->Volume = uwVolume;
 800530a:	610b      	str	r3, [r1, #16]
	 BSP_AUDIO_OUT_Init(0, AudioPlayInit);
 800530c:	f006 f8ea 	bl	800b4e4 <BSP_AUDIO_OUT_Init>
}
 8005310:	e7c2      	b.n	8005298 <main+0x1e8>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8005312:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005314:	791b      	ldrb	r3, [r3, #4]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d1be      	bne.n	8005298 <main+0x1e8>
 800531a:	e7e6      	b.n	80052ea <main+0x23a>
    Error_Handler();
 800531c:	f7ff feba 	bl	8005094 <Error_Handler>
 8005320:	03010018 	.word	0x03010018
 8005324:	01010000 	.word	0x01010000
 8005328:	e000ed00 	.word	0xe000ed00
 800532c:	58000400 	.word	0x58000400
 8005330:	58024800 	.word	0x58024800
 8005334:	58024400 	.word	0x58024400
 8005338:	24008198 	.word	0x24008198
 800533c:	24008c20 	.word	0x24008c20
 8005340:	240074f4 	.word	0x240074f4
 8005344:	24008c1c 	.word	0x24008c1c

08005348 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	460d      	mov	r5, r1
 800534c:	b09e      	sub	sp, #120	; 0x78
 800534e:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005350:	f017 ff52 	bl	801d1f8 <ai_platform_context_acquire>

  if ( report && net_ctx )
 8005354:	2d00      	cmp	r5, #0
 8005356:	bf18      	it	ne
 8005358:	2800      	cmpne	r0, #0
 800535a:	bf14      	ite	ne
 800535c:	2401      	movne	r4, #1
 800535e:	2400      	moveq	r4, #0
 8005360:	d102      	bne.n	8005368 <ai_network_get_info+0x20>
    *report = r;
    return true;
  }

  return false;
}
 8005362:	4620      	mov	r0, r4
 8005364:	b01e      	add	sp, #120	; 0x78
 8005366:	bd70      	pop	{r4, r5, r6, pc}
    ai_network_report r = {
 8005368:	2264      	movs	r2, #100	; 0x64
 800536a:	2100      	movs	r1, #0
 800536c:	a805      	add	r0, sp, #20
 800536e:	f020 f9ff 	bl	8025770 <memset>
 8005372:	4915      	ldr	r1, [pc, #84]	; (80053c8 <ai_network_get_info+0x80>)
 8005374:	4b15      	ldr	r3, [pc, #84]	; (80053cc <ai_network_get_info+0x84>)
 8005376:	4a16      	ldr	r2, [pc, #88]	; (80053d0 <ai_network_get_info+0x88>)
 8005378:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800537c:	4b15      	ldr	r3, [pc, #84]	; (80053d4 <ai_network_get_info+0x8c>)
 800537e:	e9cd 2303 	strd	r2, r3, [sp, #12]
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005382:	f017 fdd9 	bl	801cf38 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8005386:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 8005388:	f017 fe24 	bl	801cfd4 <ai_platform_runtime_get_version>
    ai_network_report r = {
 800538c:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <ai_network_get_info+0x90>)
 800538e:	e9cd 0306 	strd	r0, r3, [sp, #24]
 8005392:	2306      	movs	r3, #6
 8005394:	f88d 3020 	strb.w	r3, [sp, #32]
      .api_version            = ai_platform_api_get_version(),
 8005398:	f017 fe6a 	bl	801d070 <ai_platform_api_get_version>
 800539c:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800539e:	f017 fec9 	bl	801d134 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 80053a2:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <ai_network_get_info+0x94>)
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80053a4:	4602      	mov	r2, r0
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80053a6:	a901      	add	r1, sp, #4
 80053a8:	4630      	mov	r0, r6
    ai_network_report r = {
 80053aa:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80053ae:	f017 ff75 	bl	801d29c <ai_platform_api_get_network_report>
 80053b2:	4604      	mov	r4, r0
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d0d4      	beq.n	8005362 <ai_network_get_info+0x1a>
    *report = r;
 80053b8:	2274      	movs	r2, #116	; 0x74
 80053ba:	a901      	add	r1, sp, #4
 80053bc:	4628      	mov	r0, r5
 80053be:	f020 f9c9 	bl	8025754 <memcpy>
}
 80053c2:	4620      	mov	r0, r4
 80053c4:	b01e      	add	sp, #120	; 0x78
 80053c6:	bd70      	pop	{r4, r5, r6, pc}
 80053c8:	080294cc 	.word	0x080294cc
 80053cc:	080294d4 	.word	0x080294d4
 80053d0:	080294f8 	.word	0x080294f8
 80053d4:	08029514 	.word	0x08029514
 80053d8:	0802925c 	.word	0x0802925c
 80053dc:	037df9fc 	.word	0x037df9fc

080053e0 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80053e0:	b510      	push	{r4, lr}
  return ai_platform_network_create(
 80053e2:	2204      	movs	r2, #4
{
 80053e4:	b082      	sub	sp, #8
  return ai_platform_network_create(
 80053e6:	2400      	movs	r4, #0
 80053e8:	2301      	movs	r3, #1
 80053ea:	e9cd 2400 	strd	r2, r4, [sp]
 80053ee:	4a02      	ldr	r2, [pc, #8]	; (80053f8 <ai_network_create+0x18>)
 80053f0:	f018 f9ec 	bl	801d7cc <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80053f4:	b002      	add	sp, #8
 80053f6:	bd10      	pop	{r4, pc}
 80053f8:	24007250 	.word	0x24007250

080053fc <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 80053fc:	f018 baac 	b.w	801d958 <ai_platform_network_destroy>

08005400 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	b0b7      	sub	sp, #220	; 0xdc
 8005406:	4604      	mov	r4, r0
 8005408:	460d      	mov	r5, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800540a:	f018 fb33 	bl	801da74 <ai_platform_network_init>
  if ( !net_ctx ) return false;
 800540e:	2800      	cmp	r0, #0
 8005410:	f001 823c 	beq.w	800688c <ai_network_init+0x148c>
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005414:	f8df 83bc 	ldr.w	r8, [pc, #956]	; 80057d4 <ai_network_init+0x3d4>

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, &params->params);
  ok &= network_configure_activations(net_ctx, &params->activations);

  ok &= ai_platform_network_post_init(network);
 8005418:	4620      	mov	r0, r4
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800541a:	4ed1      	ldr	r6, [pc, #836]	; (8005760 <ai_network_init+0x360>)
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800541c:	f8d8 7000 	ldr.w	r7, [r8]
 8005420:	692b      	ldr	r3, [r5, #16]
 8005422:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 8005426:	9500      	str	r5, [sp, #0]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005428:	4dce      	ldr	r5, [pc, #824]	; (8005764 <ai_network_init+0x364>)
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800542a:	f8c8 7000 	str.w	r7, [r8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800542e:	6837      	ldr	r7, [r6, #0]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005430:	4ccd      	ldr	r4, [pc, #820]	; (8005768 <ai_network_init+0x368>)
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005432:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005436:	49cd      	ldr	r1, [pc, #820]	; (800576c <ai_network_init+0x36c>)
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005438:	4acd      	ldr	r2, [pc, #820]	; (8005770 <ai_network_init+0x370>)
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800543a:	6037      	str	r7, [r6, #0]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800543c:	682f      	ldr	r7, [r5, #0]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800543e:	f8df c398 	ldr.w	ip, [pc, #920]	; 80057d8 <ai_network_init+0x3d8>
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005442:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005446:	f8df e394 	ldr.w	lr, [pc, #916]	; 80057dc <ai_network_init+0x3dc>
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 800544a:	f8df 9394 	ldr.w	r9, [pc, #916]	; 80057e0 <ai_network_init+0x3e0>
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800544e:	602f      	str	r7, [r5, #0]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005450:	6827      	ldr	r7, [r4, #0]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8005452:	f8df b390 	ldr.w	fp, [pc, #912]	; 80057e4 <ai_network_init+0x3e4>
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005456:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 800545a:	f8df a38c 	ldr.w	sl, [pc, #908]	; 80057e8 <ai_network_init+0x3e8>
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800545e:	6027      	str	r7, [r4, #0]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005460:	680f      	ldr	r7, [r1, #0]
    conv2d_2_weights_array.data_start = AI_PTR(weights + 0);
 8005462:	e9c8 3302 	strd	r3, r3, [r8, #8]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005466:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_2_bias_array.data = AI_PTR(weights + 432);
 800546a:	f503 78d8 	add.w	r8, r3, #432	; 0x1b0
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800546e:	600f      	str	r7, [r1, #0]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005470:	6817      	ldr	r7, [r2, #0]
    conv2d_2_bias_array.data_start = AI_PTR(weights + 432);
 8005472:	e9c6 8802 	strd	r8, r8, [r6, #8]
    conv2d_3_weights_array.data = AI_PTR(weights + 496);
 8005476:	f503 76f8 	add.w	r6, r3, #496	; 0x1f0
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800547a:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 800547e:	f8df 836c 	ldr.w	r8, [pc, #876]	; 80057ec <ai_network_init+0x3ec>
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005482:	6017      	str	r7, [r2, #0]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005484:	f8dc 7000 	ldr.w	r7, [ip]
    conv2d_3_weights_array.data_start = AI_PTR(weights + 496);
 8005488:	e9c5 6602 	strd	r6, r6, [r5, #8]
    conv2d_3_bias_array.data = AI_PTR(weights + 640);
 800548c:	f503 7520 	add.w	r5, r3, #640	; 0x280
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005490:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8005494:	4eb7      	ldr	r6, [pc, #732]	; (8005774 <ai_network_init+0x374>)
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005496:	f8cc 7000 	str.w	r7, [ip]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800549a:	f8de 7000 	ldr.w	r7, [lr]
    conv2d_3_bias_array.data_start = AI_PTR(weights + 640);
 800549e:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_4_weights_array.data = AI_PTR(weights + 704);
 80054a2:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 80054a6:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 80054aa:	4db3      	ldr	r5, [pc, #716]	; (8005778 <ai_network_init+0x378>)
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 80054ac:	f8ce 7000 	str.w	r7, [lr]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80054b0:	4fb2      	ldr	r7, [pc, #712]	; (800577c <ai_network_init+0x37c>)
    conv2d_4_weights_array.data_start = AI_PTR(weights + 704);
 80054b2:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conv2d_4_bias_array.data = AI_PTR(weights + 832);
 80054b6:	f503 7150 	add.w	r1, r3, #832	; 0x340
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 80054ba:	4cb1      	ldr	r4, [pc, #708]	; (8005780 <ai_network_init+0x380>)
    conv2d_4_bias_array.data_start = AI_PTR(weights + 832);
 80054bc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_weights_array.data = AI_PTR(weights + 864);
 80054c0:	f503 7258 	add.w	r2, r3, #864	; 0x360
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 80054c4:	49af      	ldr	r1, [pc, #700]	; (8005784 <ai_network_init+0x384>)
    conv2d_5_weights_array.data_start = AI_PTR(weights + 864);
 80054c6:	e9cc 2202 	strd	r2, r2, [ip, #8]
    conv2d_5_bias_array.data = AI_PTR(weights + 1248);
 80054ca:	f503 629c 	add.w	r2, r3, #1248	; 0x4e0
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80054ce:	f8df c320 	ldr.w	ip, [pc, #800]	; 80057f0 <ai_network_init+0x3f0>
    conv2d_5_bias_array.data_start = AI_PTR(weights + 1248);
 80054d2:	e9ce 2202 	strd	r2, r2, [lr, #8]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80054d6:	f8d9 2000 	ldr.w	r2, [r9]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 80054da:	f8df e318 	ldr.w	lr, [pc, #792]	; 80057f4 <ai_network_init+0x3f4>
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80054de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054e2:	f8c9 2000 	str.w	r2, [r9]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054ec:	603a      	str	r2, [r7, #0]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80054ee:	f8db 2000 	ldr.w	r2, [fp]
 80054f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054f6:	f8cb 2000 	str.w	r2, [fp]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 80054fa:	6832      	ldr	r2, [r6, #0]
 80054fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005500:	6032      	str	r2, [r6, #0]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8005502:	680a      	ldr	r2, [r1, #0]
 8005504:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005508:	600a      	str	r2, [r1, #0]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 800550a:	6822      	ldr	r2, [r4, #0]
 800550c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005510:	6022      	str	r2, [r4, #0]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8005512:	682a      	ldr	r2, [r5, #0]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8005514:	4c9c      	ldr	r4, [pc, #624]	; (8005788 <ai_network_init+0x388>)
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8005516:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800551a:	602a      	str	r2, [r5, #0]
    conv2d_7_weights_array.data = AI_PTR(weights + 1440);
 800551c:	f503 65b4 	add.w	r5, r3, #1440	; 0x5a0
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005520:	4a9a      	ldr	r2, [pc, #616]	; (800578c <ai_network_init+0x38c>)
    conv2d_7_weights_array.data_start = AI_PTR(weights + 1440);
 8005522:	e9c9 5502 	strd	r5, r5, [r9, #8]
    conv2d_7_bias_array.data = AI_PTR(weights + 1872);
 8005526:	f503 65ea 	add.w	r5, r3, #1872	; 0x750
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 800552a:	4611      	mov	r1, r2
 800552c:	6812      	ldr	r2, [r2, #0]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 800552e:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80057f8 <ai_network_init+0x3f8>
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005532:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    conv2d_7_bias_array.data_start = AI_PTR(weights + 1872);
 8005536:	e9c7 5502 	strd	r5, r5, [r7, #8]
    conv2d_8_weights_array.data = AI_PTR(weights + 2064);
 800553a:	f503 6501 	add.w	r5, r3, #2064	; 0x810
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 800553e:	600a      	str	r2, [r1, #0]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8005540:	4f93      	ldr	r7, [pc, #588]	; (8005790 <ai_network_init+0x390>)
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 8005542:	4994      	ldr	r1, [pc, #592]	; (8005794 <ai_network_init+0x394>)
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8005544:	4a94      	ldr	r2, [pc, #592]	; (8005798 <ai_network_init+0x398>)
    conv2d_8_weights_array.data_start = AI_PTR(weights + 2064);
 8005546:	e9cb 5502 	strd	r5, r5, [fp, #8]
    conv2d_8_bias_array.data = AI_PTR(weights + 2448);
 800554a:	f503 6519 	add.w	r5, r3, #2448	; 0x990
    conv2d_11_weights_array.data = AI_PTR(weights + 3680);
 800554e:	f503 6b66 	add.w	fp, r3, #3680	; 0xe60
    conv2d_8_bias_array.data_start = AI_PTR(weights + 2448);
 8005552:	e9c6 5502 	strd	r5, r5, [r6, #8]
    conv2d_9_weights_array.data = AI_PTR(weights + 2480);
 8005556:	f503 651b 	add.w	r5, r3, #2480	; 0x9b0
 800555a:	4e8a      	ldr	r6, [pc, #552]	; (8005784 <ai_network_init+0x384>)
    conv2d_9_weights_array.data_start = AI_PTR(weights + 2480);
 800555c:	e9c6 5502 	strd	r5, r5, [r6, #8]
    conv2d_9_bias_array.data = AI_PTR(weights + 2864);
 8005560:	f503 6533 	add.w	r5, r3, #2864	; 0xb30
 8005564:	4e86      	ldr	r6, [pc, #536]	; (8005780 <ai_network_init+0x380>)
    conv2d_9_bias_array.data_start = AI_PTR(weights + 2864);
 8005566:	e9c6 5502 	strd	r5, r5, [r6, #8]
    conv2d_10_weights_array.data = AI_PTR(weights + 3056);
 800556a:	f503 653f 	add.w	r5, r3, #3056	; 0xbf0
 800556e:	4e82      	ldr	r6, [pc, #520]	; (8005778 <ai_network_init+0x378>)
    conv2d_10_weights_array.data_start = AI_PTR(weights + 3056);
 8005570:	e9c6 5502 	strd	r5, r5, [r6, #8]
    conv2d_10_bias_array.data = AI_PTR(weights + 3488);
 8005574:	f503 655a 	add.w	r5, r3, #3488	; 0xda0
 8005578:	4e84      	ldr	r6, [pc, #528]	; (800578c <ai_network_init+0x38c>)
    conv2d_10_bias_array.data_start = AI_PTR(weights + 3488);
 800557a:	e9c6 5502 	strd	r5, r5, [r6, #8]
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 800557e:	f8d8 5000 	ldr.w	r5, [r8]
    conv2d_15_bias_array.data = AI_PTR(weights + 5104);
 8005582:	f241 36f0 	movw	r6, #5104	; 0x13f0
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8005586:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_15_bias_array.data = AI_PTR(weights + 5104);
 800558a:	441e      	add	r6, r3
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 800558c:	f8c8 5000 	str.w	r5, [r8]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8005590:	f8de 5000 	ldr.w	r5, [lr]
    conv2d_15_bias_array.data_start = AI_PTR(weights + 5104);
 8005594:	e9c4 6602 	strd	r6, r6, [r4, #8]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8005598:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 800559c:	4e7f      	ldr	r6, [pc, #508]	; (800579c <ai_network_init+0x39c>)
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 800559e:	f8ce 5000 	str.w	r5, [lr]
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 80055a2:	6835      	ldr	r5, [r6, #0]
 80055a4:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 80055a8:	6035      	str	r5, [r6, #0]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 80055aa:	683d      	ldr	r5, [r7, #0]
 80055ac:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 80055b0:	603d      	str	r5, [r7, #0]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 80055b2:	f8da 5000 	ldr.w	r5, [sl]
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 80055b6:	4f7a      	ldr	r7, [pc, #488]	; (80057a0 <ai_network_init+0x3a0>)
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 80055b8:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 80055bc:	f8ca 5000 	str.w	r5, [sl]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 80055c0:	6825      	ldr	r5, [r4, #0]
 80055c2:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 80055c6:	6025      	str	r5, [r4, #0]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80055c8:	680c      	ldr	r4, [r1, #0]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 80055ca:	4d76      	ldr	r5, [pc, #472]	; (80057a4 <ai_network_init+0x3a4>)
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80055cc:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 80055d0:	600c      	str	r4, [r1, #0]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80055d2:	6814      	ldr	r4, [r2, #0]
 80055d4:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_11_weights_array.data_start = AI_PTR(weights + 3680);
 80055d8:	e9c8 bb02 	strd	fp, fp, [r8, #8]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80055dc:	6014      	str	r4, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(weights + 4064);
 80055de:	f503 687e 	add.w	r8, r3, #4064	; 0xfe0
    conv2d_16_weights_array.data = AI_PTR(weights + 5296);
 80055e2:	f241 44b0 	movw	r4, #5296	; 0x14b0
    conv2d_52_output_array.data = AI_PTR(activations + 51264);
 80055e6:	f64c 0b40 	movw	fp, #51264	; 0xc840
    conv2d_16_weights_array.data = AI_PTR(weights + 5296);
 80055ea:	441c      	add	r4, r3
    conv2d_11_bias_array.data_start = AI_PTR(weights + 4064);
 80055ec:	e9ce 8802 	strd	r8, r8, [lr, #8]
    conv2d_13_weights_array.data = AI_PTR(weights + 4096);
 80055f0:	f503 5e80 	add.w	lr, r3, #4096	; 0x1000
    conv2d_16_weights_array.data_start = AI_PTR(weights + 5296);
 80055f4:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conv2d_13_weights_array.data_start = AI_PTR(weights + 4096);
 80055f8:	e9c6 ee02 	strd	lr, lr, [r6, #8]
    conv2d_16_bias_array.data = AI_PTR(weights + 6064);
 80055fc:	f241 71b0 	movw	r1, #6064	; 0x17b0
    conv2d_13_bias_array.data = AI_PTR(weights + 4480);
 8005600:	f503 5e8c 	add.w	lr, r3, #4480	; 0x1180
 8005604:	4e62      	ldr	r6, [pc, #392]	; (8005790 <ai_network_init+0x390>)
    conv2d_16_bias_array.data = AI_PTR(weights + 6064);
 8005606:	4419      	add	r1, r3
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8005608:	4c67      	ldr	r4, [pc, #412]	; (80057a8 <ai_network_init+0x3a8>)
    conv2d_13_bias_array.data_start = AI_PTR(weights + 4480);
 800560a:	e9c6 ee02 	strd	lr, lr, [r6, #8]
    conv2d_15_weights_array.data = AI_PTR(weights + 4672);
 800560e:	f503 5e92 	add.w	lr, r3, #4672	; 0x1240
    conv2d_16_bias_array.data_start = AI_PTR(weights + 6064);
 8005612:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_15_weights_array.data_start = AI_PTR(weights + 4672);
 8005616:	e9ca ee02 	strd	lr, lr, [sl, #8]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 800561a:	f8d9 6000 	ldr.w	r6, [r9]
    conv2d_17_weights_array.data = AI_PTR(weights + 6128);
 800561e:	f241 7ef0 	movw	lr, #6128	; 0x17f0
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 8005622:	4962      	ldr	r1, [pc, #392]	; (80057ac <ai_network_init+0x3ac>)
    conv2d_54_output_array.data = AI_PTR(activations + 16516);
 8005624:	f244 0a84 	movw	sl, #16516	; 0x4084
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8005628:	f046 4880 	orr.w	r8, r6, #1073741824	; 0x40000000
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800562c:	4e60      	ldr	r6, [pc, #384]	; (80057b0 <ai_network_init+0x3b0>)
    conv2d_17_weights_array.data = AI_PTR(weights + 6128);
 800562e:	449e      	add	lr, r3
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8005630:	4a60      	ldr	r2, [pc, #384]	; (80057b4 <ai_network_init+0x3b4>)
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8005632:	6836      	ldr	r6, [r6, #0]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8005634:	f8c9 8000 	str.w	r8, [r9]
    conv2d_57_output_array.data = AI_PTR(activations + 57048);
 8005638:	f64d 68d8 	movw	r8, #57048	; 0xded8
    conv2d_17_weights_array.data_start = AI_PTR(weights + 6128);
 800563c:	e9c9 ee02 	strd	lr, lr, [r9, #8]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8005640:	f046 4e80 	orr.w	lr, r6, #1073741824	; 0x40000000
 8005644:	4e5a      	ldr	r6, [pc, #360]	; (80057b0 <ai_network_init+0x3b0>)
    conv2d_56_output_array.data = AI_PTR(activations + 24120);
 8005646:	f645 6938 	movw	r9, #24120	; 0x5e38
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800564a:	f8c6 e000 	str.w	lr, [r6]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 800564e:	682e      	ldr	r6, [r5, #0]
 8005650:	f046 4e80 	orr.w	lr, r6, #1073741824	; 0x40000000
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8005654:	6826      	ldr	r6, [r4, #0]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 8005656:	f8c5 e000 	str.w	lr, [r5]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 800565a:	f046 4e80 	orr.w	lr, r6, #1073741824	; 0x40000000
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 800565e:	680e      	ldr	r6, [r1, #0]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8005660:	f8c4 e000 	str.w	lr, [r4]
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 8005664:	f046 4e80 	orr.w	lr, r6, #1073741824	; 0x40000000
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8005668:	683e      	ldr	r6, [r7, #0]
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 800566a:	f8c1 e000 	str.w	lr, [r1]
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 800566e:	f046 4e80 	orr.w	lr, r6, #1073741824	; 0x40000000
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8005672:	f8dc 6000 	ldr.w	r6, [ip]
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8005676:	f8c7 e000 	str.w	lr, [r7]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 800567a:	f046 4e80 	orr.w	lr, r6, #1073741824	; 0x40000000
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 800567e:	6816      	ldr	r6, [r2, #0]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8005680:	f8cc e000 	str.w	lr, [ip]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8005684:	f046 4e80 	orr.w	lr, r6, #1073741824	; 0x40000000
    conv2d_17_bias_array.data = AI_PTR(weights + 7664);
 8005688:	4e49      	ldr	r6, [pc, #292]	; (80057b0 <ai_network_init+0x3b0>)
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 800568a:	f8c2 e000 	str.w	lr, [r2]
    conv2d_17_bias_array.data = AI_PTR(weights + 7664);
 800568e:	f641 5ef0 	movw	lr, #7664	; 0x1df0
 8005692:	449e      	add	lr, r3
    conv2d_17_bias_array.data_start = AI_PTR(weights + 7664);
 8005694:	e9c6 ee02 	strd	lr, lr, [r6, #8]
    conv2d_18_weights_array.data = AI_PTR(weights + 8048);
 8005698:	f641 7670 	movw	r6, #8048	; 0x1f70
    conv2d_58_output_array.data = AI_PTR(activations + 5976);
 800569c:	f241 7e58 	movw	lr, #5976	; 0x1758
    conv2d_18_weights_array.data = AI_PTR(weights + 8048);
 80056a0:	441e      	add	r6, r3
    conv2d_18_weights_array.data_start = AI_PTR(weights + 8048);
 80056a2:	e9c5 6602 	strd	r6, r6, [r5, #8]
    conv2d_18_bias_array.data = AI_PTR(weights + 8912);
 80056a6:	f242 25d0 	movw	r5, #8912	; 0x22d0
 80056aa:	441d      	add	r5, r3
    conv2d_18_bias_array.data_start = AI_PTR(weights + 8912);
 80056ac:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_19_weights_array.data = AI_PTR(weights + 9296);
 80056b0:	f242 4450 	movw	r4, #9296	; 0x2450
 80056b4:	441c      	add	r4, r3
    conv2d_19_weights_array.data_start = AI_PTR(weights + 9296);
 80056b6:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conv2d_19_bias_array.data = AI_PTR(weights + 10832);
 80056ba:	f642 2150 	movw	r1, #10832	; 0x2a50
 80056be:	4419      	add	r1, r3
    conv2d_19_bias_array.data_start = AI_PTR(weights + 10832);
 80056c0:	e9c7 1102 	strd	r1, r1, [r7, #8]
    conv2d_21_weights_array.data = AI_PTR(weights + 10896);
 80056c4:	f642 2190 	movw	r1, #10896	; 0x2a90
 80056c8:	4419      	add	r1, r3
    conv2d_21_weights_array.data_start = AI_PTR(weights + 10896);
 80056ca:	e9cc 1102 	strd	r1, r1, [ip, #8]
    conv2d_21_bias_array.data = AI_PTR(weights + 12432);
 80056ce:	f243 0190 	movw	r1, #12432	; 0x3090
 80056d2:	4419      	add	r1, r3
    conv2d_21_bias_array.data_start = AI_PTR(weights + 12432);
 80056d4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 80056d8:	4a37      	ldr	r2, [pc, #220]	; (80057b8 <ai_network_init+0x3b8>)
 80056da:	6811      	ldr	r1, [r2, #0]
 80056dc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80056e0:	6011      	str	r1, [r2, #0]
    conv2d_22_weights_array.data = AI_PTR(weights + 12816);
 80056e2:	f243 2110 	movw	r1, #12816	; 0x3210
 80056e6:	4419      	add	r1, r3
    conv2d_22_weights_array.data_start = AI_PTR(weights + 12816);
 80056e8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 80056ec:	4a33      	ldr	r2, [pc, #204]	; (80057bc <ai_network_init+0x3bc>)
 80056ee:	6811      	ldr	r1, [r2, #0]
 80056f0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80056f4:	6011      	str	r1, [r2, #0]
    conv2d_22_bias_array.data = AI_PTR(weights + 13680);
 80056f6:	f243 5170 	movw	r1, #13680	; 0x3570
 80056fa:	4419      	add	r1, r3
    conv2d_22_bias_array.data_start = AI_PTR(weights + 13680);
 80056fc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 8005700:	4a2f      	ldr	r2, [pc, #188]	; (80057c0 <ai_network_init+0x3c0>)
 8005702:	6811      	ldr	r1, [r2, #0]
 8005704:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005708:	6011      	str	r1, [r2, #0]
    conv2d_23_weights_array.data = AI_PTR(weights + 14064);
 800570a:	f243 61f0 	movw	r1, #14064	; 0x36f0
 800570e:	4419      	add	r1, r3
    conv2d_23_weights_array.data_start = AI_PTR(weights + 14064);
 8005710:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 8005714:	4a2b      	ldr	r2, [pc, #172]	; (80057c4 <ai_network_init+0x3c4>)
 8005716:	6811      	ldr	r1, [r2, #0]
 8005718:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800571c:	6011      	str	r1, [r2, #0]
    conv2d_23_bias_array.data = AI_PTR(weights + 15600);
 800571e:	f643 41f0 	movw	r1, #15600	; 0x3cf0
 8005722:	4419      	add	r1, r3
    conv2d_23_bias_array.data_start = AI_PTR(weights + 15600);
 8005724:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 8005728:	4a27      	ldr	r2, [pc, #156]	; (80057c8 <ai_network_init+0x3c8>)
 800572a:	6811      	ldr	r1, [r2, #0]
 800572c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005730:	6011      	str	r1, [r2, #0]
    conv2d_25_weights_array.data = AI_PTR(weights + 15664);
 8005732:	f643 5130 	movw	r1, #15664	; 0x3d30
 8005736:	4419      	add	r1, r3
    conv2d_25_weights_array.data_start = AI_PTR(weights + 15664);
 8005738:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 800573c:	4a23      	ldr	r2, [pc, #140]	; (80057cc <ai_network_init+0x3cc>)
 800573e:	6811      	ldr	r1, [r2, #0]
 8005740:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005744:	6011      	str	r1, [r2, #0]
    conv2d_25_bias_array.data = AI_PTR(weights + 17200);
 8005746:	f244 3130 	movw	r1, #17200	; 0x4330
 800574a:	4419      	add	r1, r3
    conv2d_25_bias_array.data_start = AI_PTR(weights + 17200);
 800574c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 8005750:	4a1f      	ldr	r2, [pc, #124]	; (80057d0 <ai_network_init+0x3d0>)
 8005752:	6811      	ldr	r1, [r2, #0]
 8005754:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005758:	6011      	str	r1, [r2, #0]
    conv2d_27_weights_array.data = AI_PTR(weights + 17584);
 800575a:	f244 41b0 	movw	r1, #17584	; 0x44b0
 800575e:	e04d      	b.n	80057fc <ai_network_init+0x3fc>
 8005760:	24004630 	.word	0x24004630
 8005764:	24005098 	.word	0x24005098
 8005768:	24004fa8 	.word	0x24004fa8
 800576c:	24005a10 	.word	0x24005a10
 8005770:	2400594c 	.word	0x2400594c
 8005774:	24006b68 	.word	0x24006b68
 8005778:	24003758 	.word	0x24003758
 800577c:	24006a4c 	.word	0x24006a4c
 8005780:	24006c58 	.word	0x24006c58
 8005784:	24006d48 	.word	0x24006d48
 8005788:	24003990 	.word	0x24003990
 800578c:	24003668 	.word	0x24003668
 8005790:	24003874 	.word	0x24003874
 8005794:	24003b70 	.word	0x24003b70
 8005798:	24003aac 	.word	0x24003aac
 800579c:	24003964 	.word	0x24003964
 80057a0:	24003dd4 	.word	0x24003dd4
 80057a4:	24003da8 	.word	0x24003da8
 80057a8:	24003cb8 	.word	0x24003cb8
 80057ac:	24003e98 	.word	0x24003e98
 80057b0:	24003b9c 	.word	0x24003b9c
 80057b4:	24003ec4 	.word	0x24003ec4
 80057b8:	240040d0 	.word	0x240040d0
 80057bc:	24003fe0 	.word	0x24003fe0
 80057c0:	240041c0 	.word	0x240041c0
 80057c4:	240040fc 	.word	0x240040fc
 80057c8:	240042dc 	.word	0x240042dc
 80057cc:	240041ec 	.word	0x240041ec
 80057d0:	240043f8 	.word	0x240043f8
 80057d4:	24004720 	.word	0x24004720
 80057d8:	2400626c 	.word	0x2400626c
 80057dc:	2400617c 	.word	0x2400617c
 80057e0:	24006b3c 	.word	0x24006b3c
 80057e4:	24006c2c 	.word	0x24006c2c
 80057e8:	24003a80 	.word	0x24003a80
 80057ec:	24003848 	.word	0x24003848
 80057f0:	24003fb4 	.word	0x24003fb4
 80057f4:	24003784 	.word	0x24003784
 80057f8:	24003c8c 	.word	0x24003c8c
 80057fc:	4419      	add	r1, r3
    conv2d_27_weights_array.data_start = AI_PTR(weights + 17584);
 80057fe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8005802:	4abd      	ldr	r2, [pc, #756]	; (8005af8 <ai_network_init+0x6f8>)
 8005804:	6811      	ldr	r1, [r2, #0]
 8005806:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800580a:	6011      	str	r1, [r2, #0]
    conv2d_27_bias_array.data = AI_PTR(weights + 18448);
 800580c:	f644 0110 	movw	r1, #18448	; 0x4810
 8005810:	4419      	add	r1, r3
    conv2d_27_bias_array.data_start = AI_PTR(weights + 18448);
 8005812:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8005816:	4ab9      	ldr	r2, [pc, #740]	; (8005afc <ai_network_init+0x6fc>)
 8005818:	6811      	ldr	r1, [r2, #0]
 800581a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800581e:	6011      	str	r1, [r2, #0]
    conv2d_28_weights_array.data = AI_PTR(weights + 18832);
 8005820:	f644 1190 	movw	r1, #18832	; 0x4990
 8005824:	4419      	add	r1, r3
    conv2d_28_weights_array.data_start = AI_PTR(weights + 18832);
 8005826:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 800582a:	4ab5      	ldr	r2, [pc, #724]	; (8005b00 <ai_network_init+0x700>)
 800582c:	6811      	ldr	r1, [r2, #0]
 800582e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005832:	6011      	str	r1, [r2, #0]
    conv2d_28_bias_array.data = AI_PTR(weights + 21136);
 8005834:	f245 2190 	movw	r1, #21136	; 0x5290
 8005838:	4419      	add	r1, r3
    conv2d_28_bias_array.data_start = AI_PTR(weights + 21136);
 800583a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 800583e:	4ab1      	ldr	r2, [pc, #708]	; (8005b04 <ai_network_init+0x704>)
 8005840:	6811      	ldr	r1, [r2, #0]
 8005842:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005846:	6011      	str	r1, [r2, #0]
    conv2d_29_weights_array.data = AI_PTR(weights + 21232);
 8005848:	f245 21f0 	movw	r1, #21232	; 0x52f0
 800584c:	4419      	add	r1, r3
    conv2d_29_weights_array.data_start = AI_PTR(weights + 21232);
 800584e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8005852:	4aad      	ldr	r2, [pc, #692]	; (8005b08 <ai_network_init+0x708>)
 8005854:	6811      	ldr	r1, [r2, #0]
 8005856:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800585a:	6011      	str	r1, [r2, #0]
    conv2d_29_bias_array.data = AI_PTR(weights + 24688);
 800585c:	f246 0170 	movw	r1, #24688	; 0x6070
 8005860:	4419      	add	r1, r3
    conv2d_29_bias_array.data_start = AI_PTR(weights + 24688);
 8005862:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8005866:	4aa9      	ldr	r2, [pc, #676]	; (8005b0c <ai_network_init+0x70c>)
 8005868:	6811      	ldr	r1, [r2, #0]
 800586a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800586e:	6011      	str	r1, [r2, #0]
    conv2d_30_weights_array.data = AI_PTR(weights + 25264);
 8005870:	f246 21b0 	movw	r1, #25264	; 0x62b0
 8005874:	4419      	add	r1, r3
    conv2d_30_weights_array.data_start = AI_PTR(weights + 25264);
 8005876:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 800587a:	4aa5      	ldr	r2, [pc, #660]	; (8005b10 <ai_network_init+0x710>)
 800587c:	6811      	ldr	r1, [r2, #0]
 800587e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005882:	6011      	str	r1, [r2, #0]
    conv2d_30_bias_array.data = AI_PTR(weights + 26560);
 8005884:	f246 71c0 	movw	r1, #26560	; 0x67c0
 8005888:	4419      	add	r1, r3
    conv2d_30_bias_array.data_start = AI_PTR(weights + 26560);
 800588a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_31_weights_array.format |= AI_FMT_FLAG_CONST;
 800588e:	4aa1      	ldr	r2, [pc, #644]	; (8005b14 <ai_network_init+0x714>)
 8005890:	6811      	ldr	r1, [r2, #0]
 8005892:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005896:	6011      	str	r1, [r2, #0]
    conv2d_31_weights_array.data = AI_PTR(weights + 27136);
 8005898:	f503 41d4 	add.w	r1, r3, #27136	; 0x6a00
    conv2d_31_weights_array.data_start = AI_PTR(weights + 27136);
 800589c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_31_bias_array.format |= AI_FMT_FLAG_CONST;
 80058a0:	4a9d      	ldr	r2, [pc, #628]	; (8005b18 <ai_network_init+0x718>)
 80058a2:	6811      	ldr	r1, [r2, #0]
 80058a4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80058a8:	6011      	str	r1, [r2, #0]
    conv2d_31_bias_array.data = AI_PTR(weights + 30592);
 80058aa:	f503 41ef 	add.w	r1, r3, #30592	; 0x7780
    conv2d_31_bias_array.data_start = AI_PTR(weights + 30592);
 80058ae:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 80058b2:	4a9a      	ldr	r2, [pc, #616]	; (8005b1c <ai_network_init+0x71c>)
 80058b4:	6811      	ldr	r1, [r2, #0]
 80058b6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80058ba:	6011      	str	r1, [r2, #0]
    conv2d_33_weights_array.data = AI_PTR(weights + 30688);
 80058bc:	f247 71e0 	movw	r1, #30688	; 0x77e0
 80058c0:	4419      	add	r1, r3
    conv2d_33_weights_array.data_start = AI_PTR(weights + 30688);
 80058c2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 80058c6:	4a96      	ldr	r2, [pc, #600]	; (8005b20 <ai_network_init+0x720>)
 80058c8:	6811      	ldr	r1, [r2, #0]
 80058ca:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80058ce:	6011      	str	r1, [r2, #0]
    conv2d_33_bias_array.data = AI_PTR(weights + 34144);
 80058d0:	f248 5160 	movw	r1, #34144	; 0x8560
 80058d4:	4419      	add	r1, r3
    conv2d_33_bias_array.data_start = AI_PTR(weights + 34144);
 80058d6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 80058da:	4a92      	ldr	r2, [pc, #584]	; (8005b24 <ai_network_init+0x724>)
 80058dc:	6811      	ldr	r1, [r2, #0]
 80058de:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80058e2:	6011      	str	r1, [r2, #0]
    conv2d_34_weights_array.data = AI_PTR(weights + 34720);
 80058e4:	f248 71a0 	movw	r1, #34720	; 0x87a0
 80058e8:	4419      	add	r1, r3
    conv2d_34_weights_array.data_start = AI_PTR(weights + 34720);
 80058ea:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 80058ee:	4a8e      	ldr	r2, [pc, #568]	; (8005b28 <ai_network_init+0x728>)
 80058f0:	6811      	ldr	r1, [r2, #0]
 80058f2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80058f6:	6011      	str	r1, [r2, #0]
    conv2d_34_bias_array.data = AI_PTR(weights + 36016);
 80058f8:	f648 41b0 	movw	r1, #36016	; 0x8cb0
 80058fc:	4419      	add	r1, r3
    conv2d_34_bias_array.data_start = AI_PTR(weights + 36016);
 80058fe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 8005902:	4a8a      	ldr	r2, [pc, #552]	; (8005b2c <ai_network_init+0x72c>)
 8005904:	6811      	ldr	r1, [r2, #0]
 8005906:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800590a:	6011      	str	r1, [r2, #0]
    conv2d_35_weights_array.data = AI_PTR(weights + 36592);
 800590c:	f648 61f0 	movw	r1, #36592	; 0x8ef0
 8005910:	4419      	add	r1, r3
    conv2d_35_weights_array.data_start = AI_PTR(weights + 36592);
 8005912:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 8005916:	4a86      	ldr	r2, [pc, #536]	; (8005b30 <ai_network_init+0x730>)
 8005918:	6811      	ldr	r1, [r2, #0]
 800591a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800591e:	6011      	str	r1, [r2, #0]
    conv2d_35_bias_array.data = AI_PTR(weights + 40048);
 8005920:	f649 4170 	movw	r1, #40048	; 0x9c70
 8005924:	4419      	add	r1, r3
    conv2d_35_bias_array.data_start = AI_PTR(weights + 40048);
 8005926:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 800592a:	4a82      	ldr	r2, [pc, #520]	; (8005b34 <ai_network_init+0x734>)
 800592c:	6811      	ldr	r1, [r2, #0]
 800592e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005932:	6011      	str	r1, [r2, #0]
    conv2d_37_weights_array.data = AI_PTR(weights + 40144);
 8005934:	f649 41d0 	movw	r1, #40144	; 0x9cd0
 8005938:	4419      	add	r1, r3
    conv2d_37_weights_array.data_start = AI_PTR(weights + 40144);
 800593a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 800593e:	4a7e      	ldr	r2, [pc, #504]	; (8005b38 <ai_network_init+0x738>)
 8005940:	6811      	ldr	r1, [r2, #0]
 8005942:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005946:	6011      	str	r1, [r2, #0]
    conv2d_37_bias_array.data = AI_PTR(weights + 43600);
 8005948:	f64a 2150 	movw	r1, #43600	; 0xaa50
 800594c:	4419      	add	r1, r3
    conv2d_37_bias_array.data_start = AI_PTR(weights + 43600);
 800594e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8005952:	4a7a      	ldr	r2, [pc, #488]	; (8005b3c <ai_network_init+0x73c>)
 8005954:	6811      	ldr	r1, [r2, #0]
 8005956:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800595a:	6011      	str	r1, [r2, #0]
    conv2d_38_weights_array.data = AI_PTR(weights + 44176);
 800595c:	f64a 4190 	movw	r1, #44176	; 0xac90
 8005960:	4419      	add	r1, r3
    conv2d_38_weights_array.data_start = AI_PTR(weights + 44176);
 8005962:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 8005966:	4a76      	ldr	r2, [pc, #472]	; (8005b40 <ai_network_init+0x740>)
 8005968:	6811      	ldr	r1, [r2, #0]
 800596a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800596e:	6011      	str	r1, [r2, #0]
    conv2d_38_bias_array.data = AI_PTR(weights + 45472);
 8005970:	f24b 11a0 	movw	r1, #45472	; 0xb1a0
 8005974:	4419      	add	r1, r3
    conv2d_38_bias_array.data_start = AI_PTR(weights + 45472);
 8005976:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_39_weights_array.format |= AI_FMT_FLAG_CONST;
 800597a:	4a72      	ldr	r2, [pc, #456]	; (8005b44 <ai_network_init+0x744>)
 800597c:	6811      	ldr	r1, [r2, #0]
 800597e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005982:	6011      	str	r1, [r2, #0]
    conv2d_39_weights_array.data = AI_PTR(weights + 46048);
 8005984:	f24b 31e0 	movw	r1, #46048	; 0xb3e0
 8005988:	4419      	add	r1, r3
    conv2d_39_weights_array.data_start = AI_PTR(weights + 46048);
 800598a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_39_bias_array.format |= AI_FMT_FLAG_CONST;
 800598e:	4a6e      	ldr	r2, [pc, #440]	; (8005b48 <ai_network_init+0x748>)
 8005990:	6811      	ldr	r1, [r2, #0]
 8005992:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005996:	6011      	str	r1, [r2, #0]
    conv2d_39_bias_array.data = AI_PTR(weights + 49504);
 8005998:	f24c 1160 	movw	r1, #49504	; 0xc160
 800599c:	4419      	add	r1, r3
    conv2d_39_bias_array.data_start = AI_PTR(weights + 49504);
 800599e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 80059a2:	4a6a      	ldr	r2, [pc, #424]	; (8005b4c <ai_network_init+0x74c>)
 80059a4:	6811      	ldr	r1, [r2, #0]
 80059a6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80059aa:	6011      	str	r1, [r2, #0]
    conv2d_41_weights_array.data = AI_PTR(weights + 49600);
 80059ac:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
 80059b0:	4419      	add	r1, r3
    conv2d_41_weights_array.data_start = AI_PTR(weights + 49600);
 80059b2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80059b6:	4a66      	ldr	r2, [pc, #408]	; (8005b50 <ai_network_init+0x750>)
 80059b8:	6811      	ldr	r1, [r2, #0]
 80059ba:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80059be:	6011      	str	r1, [r2, #0]
    conv2d_41_bias_array.data = AI_PTR(weights + 53056);
 80059c0:	f64c 7140 	movw	r1, #53056	; 0xcf40
 80059c4:	4419      	add	r1, r3
    conv2d_41_bias_array.data_start = AI_PTR(weights + 53056);
 80059c6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 80059ca:	4a62      	ldr	r2, [pc, #392]	; (8005b54 <ai_network_init+0x754>)
 80059cc:	6811      	ldr	r1, [r2, #0]
 80059ce:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80059d2:	6011      	str	r1, [r2, #0]
    conv2d_42_weights_array.data = AI_PTR(weights + 53632);
 80059d4:	f24d 1180 	movw	r1, #53632	; 0xd180
 80059d8:	4419      	add	r1, r3
    conv2d_42_weights_array.data_start = AI_PTR(weights + 53632);
 80059da:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 80059de:	4a5e      	ldr	r2, [pc, #376]	; (8005b58 <ai_network_init+0x758>)
 80059e0:	6811      	ldr	r1, [r2, #0]
 80059e2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80059e6:	6011      	str	r1, [r2, #0]
    conv2d_42_bias_array.data = AI_PTR(weights + 54928);
 80059e8:	f24d 6190 	movw	r1, #54928	; 0xd690
 80059ec:	4419      	add	r1, r3
    conv2d_42_bias_array.data_start = AI_PTR(weights + 54928);
 80059ee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 80059f2:	4a5a      	ldr	r2, [pc, #360]	; (8005b5c <ai_network_init+0x75c>)
 80059f4:	6811      	ldr	r1, [r2, #0]
 80059f6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80059fa:	6011      	str	r1, [r2, #0]
    conv2d_43_weights_array.data = AI_PTR(weights + 55504);
 80059fc:	f64d 01d0 	movw	r1, #55504	; 0xd8d0
 8005a00:	4419      	add	r1, r3
    conv2d_43_weights_array.data_start = AI_PTR(weights + 55504);
 8005a02:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a06:	4a56      	ldr	r2, [pc, #344]	; (8005b60 <ai_network_init+0x760>)
 8005a08:	6811      	ldr	r1, [r2, #0]
 8005a0a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a0e:	6011      	str	r1, [r2, #0]
    conv2d_43_bias_array.data = AI_PTR(weights + 60112);
 8005a10:	f64e 21d0 	movw	r1, #60112	; 0xead0
 8005a14:	4419      	add	r1, r3
    conv2d_43_bias_array.data_start = AI_PTR(weights + 60112);
 8005a16:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a1a:	4a52      	ldr	r2, [pc, #328]	; (8005b64 <ai_network_init+0x764>)
 8005a1c:	6811      	ldr	r1, [r2, #0]
 8005a1e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a22:	6011      	str	r1, [r2, #0]
    conv2d_44_weights_array.data = AI_PTR(weights + 60240);
 8005a24:	f64e 3150 	movw	r1, #60240	; 0xeb50
 8005a28:	4419      	add	r1, r3
    conv2d_44_weights_array.data_start = AI_PTR(weights + 60240);
 8005a2a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a2e:	4a4e      	ldr	r2, [pc, #312]	; (8005b68 <ai_network_init+0x768>)
 8005a30:	6811      	ldr	r1, [r2, #0]
 8005a32:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a36:	6011      	str	r1, [r2, #0]
    conv2d_44_bias_array.data = AI_PTR(weights + 66384);
 8005a38:	494c      	ldr	r1, [pc, #304]	; (8005b6c <ai_network_init+0x76c>)
 8005a3a:	4419      	add	r1, r3
    conv2d_44_bias_array.data_start = AI_PTR(weights + 66384);
 8005a3c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a40:	4a4b      	ldr	r2, [pc, #300]	; (8005b70 <ai_network_init+0x770>)
 8005a42:	6811      	ldr	r1, [r2, #0]
 8005a44:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a48:	6011      	str	r1, [r2, #0]
    conv2d_45_weights_array.data = AI_PTR(weights + 67152);
 8005a4a:	494a      	ldr	r1, [pc, #296]	; (8005b74 <ai_network_init+0x774>)
 8005a4c:	4419      	add	r1, r3
    conv2d_45_weights_array.data_start = AI_PTR(weights + 67152);
 8005a4e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a52:	4a49      	ldr	r2, [pc, #292]	; (8005b78 <ai_network_init+0x778>)
 8005a54:	6811      	ldr	r1, [r2, #0]
 8005a56:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a5a:	6011      	str	r1, [r2, #0]
    conv2d_45_bias_array.data = AI_PTR(weights + 68880);
 8005a5c:	4947      	ldr	r1, [pc, #284]	; (8005b7c <ai_network_init+0x77c>)
 8005a5e:	4419      	add	r1, r3
    conv2d_45_bias_array.data_start = AI_PTR(weights + 68880);
 8005a60:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_46_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a64:	4a46      	ldr	r2, [pc, #280]	; (8005b80 <ai_network_init+0x780>)
 8005a66:	6811      	ldr	r1, [r2, #0]
 8005a68:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a6c:	6011      	str	r1, [r2, #0]
    conv2d_46_weights_array.data = AI_PTR(weights + 69648);
 8005a6e:	4945      	ldr	r1, [pc, #276]	; (8005b84 <ai_network_init+0x784>)
 8005a70:	4419      	add	r1, r3
    conv2d_46_weights_array.data_start = AI_PTR(weights + 69648);
 8005a72:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_46_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a76:	4a44      	ldr	r2, [pc, #272]	; (8005b88 <ai_network_init+0x788>)
 8005a78:	6811      	ldr	r1, [r2, #0]
 8005a7a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a7e:	6011      	str	r1, [r2, #0]
    conv2d_46_bias_array.data = AI_PTR(weights + 75792);
 8005a80:	4942      	ldr	r1, [pc, #264]	; (8005b8c <ai_network_init+0x78c>)
 8005a82:	4419      	add	r1, r3
    conv2d_46_bias_array.data_start = AI_PTR(weights + 75792);
 8005a84:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a88:	4a41      	ldr	r2, [pc, #260]	; (8005b90 <ai_network_init+0x790>)
 8005a8a:	6811      	ldr	r1, [r2, #0]
 8005a8c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a90:	6011      	str	r1, [r2, #0]
    conv2d_48_weights_array.data = AI_PTR(weights + 75920);
 8005a92:	4940      	ldr	r1, [pc, #256]	; (8005b94 <ai_network_init+0x794>)
 8005a94:	4419      	add	r1, r3
    conv2d_48_weights_array.data_start = AI_PTR(weights + 75920);
 8005a96:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a9a:	4a3f      	ldr	r2, [pc, #252]	; (8005b98 <ai_network_init+0x798>)
 8005a9c:	6811      	ldr	r1, [r2, #0]
 8005a9e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005aa2:	6011      	str	r1, [r2, #0]
    conv2d_48_bias_array.data = AI_PTR(weights + 82064);
 8005aa4:	493d      	ldr	r1, [pc, #244]	; (8005b9c <ai_network_init+0x79c>)
 8005aa6:	4419      	add	r1, r3
    conv2d_48_bias_array.data_start = AI_PTR(weights + 82064);
 8005aa8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 8005aac:	4a3c      	ldr	r2, [pc, #240]	; (8005ba0 <ai_network_init+0x7a0>)
 8005aae:	6811      	ldr	r1, [r2, #0]
 8005ab0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ab4:	6011      	str	r1, [r2, #0]
    conv2d_49_weights_array.data = AI_PTR(weights + 82832);
 8005ab6:	493b      	ldr	r1, [pc, #236]	; (8005ba4 <ai_network_init+0x7a4>)
 8005ab8:	4419      	add	r1, r3
    conv2d_49_weights_array.data_start = AI_PTR(weights + 82832);
 8005aba:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 8005abe:	4a3a      	ldr	r2, [pc, #232]	; (8005ba8 <ai_network_init+0x7a8>)
 8005ac0:	6811      	ldr	r1, [r2, #0]
 8005ac2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ac6:	6011      	str	r1, [r2, #0]
    conv2d_49_bias_array.data = AI_PTR(weights + 84560);
 8005ac8:	4938      	ldr	r1, [pc, #224]	; (8005bac <ai_network_init+0x7ac>)
 8005aca:	4419      	add	r1, r3
    conv2d_49_bias_array.data_start = AI_PTR(weights + 84560);
 8005acc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_50_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ad0:	4a37      	ldr	r2, [pc, #220]	; (8005bb0 <ai_network_init+0x7b0>)
 8005ad2:	6811      	ldr	r1, [r2, #0]
 8005ad4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ad8:	6011      	str	r1, [r2, #0]
    conv2d_50_weights_array.data = AI_PTR(weights + 85328);
 8005ada:	4936      	ldr	r1, [pc, #216]	; (8005bb4 <ai_network_init+0x7b4>)
 8005adc:	4419      	add	r1, r3
    conv2d_50_weights_array.data_start = AI_PTR(weights + 85328);
 8005ade:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_50_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ae2:	4a35      	ldr	r2, [pc, #212]	; (8005bb8 <ai_network_init+0x7b8>)
 8005ae4:	6811      	ldr	r1, [r2, #0]
 8005ae6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005aea:	6011      	str	r1, [r2, #0]
    conv2d_50_bias_array.data = AI_PTR(weights + 91472);
 8005aec:	4933      	ldr	r1, [pc, #204]	; (8005bbc <ai_network_init+0x7bc>)
 8005aee:	4419      	add	r1, r3
    conv2d_50_bias_array.data_start = AI_PTR(weights + 91472);
 8005af0:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8005af4:	e064      	b.n	8005bc0 <ai_network_init+0x7c0>
 8005af6:	bf00      	nop
 8005af8:	24004308 	.word	0x24004308
 8005afc:	240044e8 	.word	0x240044e8
 8005b00:	24004424 	.word	0x24004424
 8005b04:	24004604 	.word	0x24004604
 8005b08:	24004514 	.word	0x24004514
 8005b0c:	2400483c 	.word	0x2400483c
 8005b10:	2400474c 	.word	0x2400474c
 8005b14:	2400492c 	.word	0x2400492c
 8005b18:	24004868 	.word	0x24004868
 8005b1c:	24004a48 	.word	0x24004a48
 8005b20:	24004958 	.word	0x24004958
 8005b24:	24004b64 	.word	0x24004b64
 8005b28:	24004a74 	.word	0x24004a74
 8005b2c:	24004c54 	.word	0x24004c54
 8005b30:	24004b90 	.word	0x24004b90
 8005b34:	24004d70 	.word	0x24004d70
 8005b38:	24004c80 	.word	0x24004c80
 8005b3c:	24004e8c 	.word	0x24004e8c
 8005b40:	24004d9c 	.word	0x24004d9c
 8005b44:	24004f7c 	.word	0x24004f7c
 8005b48:	24004eb8 	.word	0x24004eb8
 8005b4c:	240051b4 	.word	0x240051b4
 8005b50:	240050c4 	.word	0x240050c4
 8005b54:	240052d0 	.word	0x240052d0
 8005b58:	240051e0 	.word	0x240051e0
 8005b5c:	240053c0 	.word	0x240053c0
 8005b60:	240052fc 	.word	0x240052fc
 8005b64:	240054dc 	.word	0x240054dc
 8005b68:	240053ec 	.word	0x240053ec
 8005b6c:	00010350 	.word	0x00010350
 8005b70:	240055f8 	.word	0x240055f8
 8005b74:	00010650 	.word	0x00010650
 8005b78:	24005508 	.word	0x24005508
 8005b7c:	00010d10 	.word	0x00010d10
 8005b80:	240056e8 	.word	0x240056e8
 8005b84:	00011010 	.word	0x00011010
 8005b88:	24005624 	.word	0x24005624
 8005b8c:	00012810 	.word	0x00012810
 8005b90:	24005804 	.word	0x24005804
 8005b94:	00012890 	.word	0x00012890
 8005b98:	24005714 	.word	0x24005714
 8005b9c:	00014090 	.word	0x00014090
 8005ba0:	24005920 	.word	0x24005920
 8005ba4:	00014390 	.word	0x00014390
 8005ba8:	24005830 	.word	0x24005830
 8005bac:	00014a50 	.word	0x00014a50
 8005bb0:	24005b00 	.word	0x24005b00
 8005bb4:	00014d50 	.word	0x00014d50
 8005bb8:	24005a3c 	.word	0x24005a3c
 8005bbc:	00016550 	.word	0x00016550
    conv2d_52_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bc0:	4abc      	ldr	r2, [pc, #752]	; (8005eb4 <ai_network_init+0xab4>)
 8005bc2:	6811      	ldr	r1, [r2, #0]
 8005bc4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005bc8:	6011      	str	r1, [r2, #0]
    conv2d_52_weights_array.data = AI_PTR(weights + 91600);
 8005bca:	49bb      	ldr	r1, [pc, #748]	; (8005eb8 <ai_network_init+0xab8>)
 8005bcc:	4419      	add	r1, r3
    conv2d_52_weights_array.data_start = AI_PTR(weights + 91600);
 8005bce:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_52_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bd2:	4aba      	ldr	r2, [pc, #744]	; (8005ebc <ai_network_init+0xabc>)
 8005bd4:	6811      	ldr	r1, [r2, #0]
 8005bd6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005bda:	6011      	str	r1, [r2, #0]
    conv2d_52_bias_array.data = AI_PTR(weights + 97744);
 8005bdc:	49b8      	ldr	r1, [pc, #736]	; (8005ec0 <ai_network_init+0xac0>)
 8005bde:	4419      	add	r1, r3
    conv2d_52_bias_array.data_start = AI_PTR(weights + 97744);
 8005be0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 8005be4:	4ab7      	ldr	r2, [pc, #732]	; (8005ec4 <ai_network_init+0xac4>)
 8005be6:	6811      	ldr	r1, [r2, #0]
 8005be8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005bec:	6011      	str	r1, [r2, #0]
    conv2d_54_weights_array.data = AI_PTR(weights + 98512);
 8005bee:	49b6      	ldr	r1, [pc, #728]	; (8005ec8 <ai_network_init+0xac8>)
 8005bf0:	4419      	add	r1, r3
    conv2d_54_weights_array.data_start = AI_PTR(weights + 98512);
 8005bf2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bf6:	4ab5      	ldr	r2, [pc, #724]	; (8005ecc <ai_network_init+0xacc>)
 8005bf8:	6811      	ldr	r1, [r2, #0]
 8005bfa:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005bfe:	6011      	str	r1, [r2, #0]
    conv2d_54_bias_array.data = AI_PTR(weights + 100240);
 8005c00:	49b3      	ldr	r1, [pc, #716]	; (8005ed0 <ai_network_init+0xad0>)
 8005c02:	4419      	add	r1, r3
    conv2d_54_bias_array.data_start = AI_PTR(weights + 100240);
 8005c04:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c08:	4ab2      	ldr	r2, [pc, #712]	; (8005ed4 <ai_network_init+0xad4>)
 8005c0a:	6811      	ldr	r1, [r2, #0]
 8005c0c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c10:	6011      	str	r1, [r2, #0]
    conv2d_55_weights_array.data = AI_PTR(weights + 101008);
 8005c12:	49b1      	ldr	r1, [pc, #708]	; (8005ed8 <ai_network_init+0xad8>)
 8005c14:	4419      	add	r1, r3
    conv2d_55_weights_array.data_start = AI_PTR(weights + 101008);
 8005c16:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c1a:	4ab0      	ldr	r2, [pc, #704]	; (8005edc <ai_network_init+0xadc>)
 8005c1c:	6811      	ldr	r1, [r2, #0]
 8005c1e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c22:	6011      	str	r1, [r2, #0]
    conv2d_55_bias_array.data = AI_PTR(weights + 111760);
 8005c24:	49ae      	ldr	r1, [pc, #696]	; (8005ee0 <ai_network_init+0xae0>)
 8005c26:	4419      	add	r1, r3
    conv2d_55_bias_array.data_start = AI_PTR(weights + 111760);
 8005c28:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c2c:	4aad      	ldr	r2, [pc, #692]	; (8005ee4 <ai_network_init+0xae4>)
 8005c2e:	6811      	ldr	r1, [r2, #0]
 8005c30:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c34:	6011      	str	r1, [r2, #0]
    conv2d_56_weights_array.data = AI_PTR(weights + 111984);
 8005c36:	49ac      	ldr	r1, [pc, #688]	; (8005ee8 <ai_network_init+0xae8>)
 8005c38:	4419      	add	r1, r3
    conv2d_56_weights_array.data_start = AI_PTR(weights + 111984);
 8005c3a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c3e:	4aab      	ldr	r2, [pc, #684]	; (8005eec <ai_network_init+0xaec>)
 8005c40:	6811      	ldr	r1, [r2, #0]
 8005c42:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c46:	6011      	str	r1, [r2, #0]
    conv2d_56_bias_array.data = AI_PTR(weights + 130800);
 8005c48:	49a9      	ldr	r1, [pc, #676]	; (8005ef0 <ai_network_init+0xaf0>)
 8005c4a:	4419      	add	r1, r3
    conv2d_56_bias_array.data_start = AI_PTR(weights + 130800);
 8005c4c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c50:	4aa8      	ldr	r2, [pc, #672]	; (8005ef4 <ai_network_init+0xaf4>)
 8005c52:	6811      	ldr	r1, [r2, #0]
 8005c54:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c58:	6011      	str	r1, [r2, #0]
    conv2d_57_weights_array.data = AI_PTR(weights + 132144);
 8005c5a:	49a7      	ldr	r1, [pc, #668]	; (8005ef8 <ai_network_init+0xaf8>)
 8005c5c:	4419      	add	r1, r3
    conv2d_57_weights_array.data_start = AI_PTR(weights + 132144);
 8005c5e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c62:	4aa6      	ldr	r2, [pc, #664]	; (8005efc <ai_network_init+0xafc>)
 8005c64:	6811      	ldr	r1, [r2, #0]
 8005c66:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c6a:	6011      	str	r1, [r2, #0]
    conv2d_57_bias_array.data = AI_PTR(weights + 135168);
 8005c6c:	f503 3104 	add.w	r1, r3, #135168	; 0x21000
    conv2d_57_bias_array.data_start = AI_PTR(weights + 135168);
 8005c70:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_58_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c74:	4aa2      	ldr	r2, [pc, #648]	; (8005f00 <ai_network_init+0xb00>)
 8005c76:	6811      	ldr	r1, [r2, #0]
 8005c78:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c7c:	6011      	str	r1, [r2, #0]
    conv2d_58_weights_array.data = AI_PTR(weights + 136512);
 8005c7e:	49a1      	ldr	r1, [pc, #644]	; (8005f04 <ai_network_init+0xb04>)
 8005c80:	4419      	add	r1, r3
    conv2d_58_weights_array.data_start = AI_PTR(weights + 136512);
 8005c82:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_58_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c86:	4aa0      	ldr	r2, [pc, #640]	; (8005f08 <ai_network_init+0xb08>)
 8005c88:	6811      	ldr	r1, [r2, #0]
 8005c8a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c8e:	6011      	str	r1, [r2, #0]
    conv2d_58_bias_array.data = AI_PTR(weights + 155328);
 8005c90:	499e      	ldr	r1, [pc, #632]	; (8005f0c <ai_network_init+0xb0c>)
 8005c92:	4419      	add	r1, r3
    conv2d_58_bias_array.data_start = AI_PTR(weights + 155328);
 8005c94:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c98:	4a9d      	ldr	r2, [pc, #628]	; (8005f10 <ai_network_init+0xb10>)
 8005c9a:	6811      	ldr	r1, [r2, #0]
 8005c9c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ca0:	6011      	str	r1, [r2, #0]
    conv2d_60_weights_array.data = AI_PTR(weights + 155552);
 8005ca2:	499c      	ldr	r1, [pc, #624]	; (8005f14 <ai_network_init+0xb14>)
 8005ca4:	4419      	add	r1, r3
    conv2d_60_weights_array.data_start = AI_PTR(weights + 155552);
 8005ca6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 8005caa:	4a9b      	ldr	r2, [pc, #620]	; (8005f18 <ai_network_init+0xb18>)
 8005cac:	6811      	ldr	r1, [r2, #0]
 8005cae:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005cb2:	6011      	str	r1, [r2, #0]
    conv2d_60_bias_array.data = AI_PTR(weights + 174368);
 8005cb4:	4999      	ldr	r1, [pc, #612]	; (8005f1c <ai_network_init+0xb1c>)
 8005cb6:	4419      	add	r1, r3
    conv2d_60_bias_array.data_start = AI_PTR(weights + 174368);
 8005cb8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cbc:	4a98      	ldr	r2, [pc, #608]	; (8005f20 <ai_network_init+0xb20>)
 8005cbe:	6811      	ldr	r1, [r2, #0]
 8005cc0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005cc4:	6011      	str	r1, [r2, #0]
    conv2d_61_weights_array.data = AI_PTR(weights + 175712);
 8005cc6:	4997      	ldr	r1, [pc, #604]	; (8005f24 <ai_network_init+0xb24>)
 8005cc8:	4419      	add	r1, r3
    conv2d_61_weights_array.data_start = AI_PTR(weights + 175712);
 8005cca:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cce:	4a96      	ldr	r2, [pc, #600]	; (8005f28 <ai_network_init+0xb28>)
 8005cd0:	6811      	ldr	r1, [r2, #0]
 8005cd2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005cd6:	6011      	str	r1, [r2, #0]
    conv2d_61_bias_array.data = AI_PTR(weights + 178736);
 8005cd8:	4994      	ldr	r1, [pc, #592]	; (8005f2c <ai_network_init+0xb2c>)
 8005cda:	4419      	add	r1, r3
    conv2d_61_bias_array.data_start = AI_PTR(weights + 178736);
 8005cdc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_62_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ce0:	4a93      	ldr	r2, [pc, #588]	; (8005f30 <ai_network_init+0xb30>)
 8005ce2:	6811      	ldr	r1, [r2, #0]
 8005ce4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ce8:	6011      	str	r1, [r2, #0]
    conv2d_62_weights_array.data = AI_PTR(weights + 180080);
 8005cea:	4992      	ldr	r1, [pc, #584]	; (8005f34 <ai_network_init+0xb34>)
 8005cec:	4419      	add	r1, r3
    conv2d_62_weights_array.data_start = AI_PTR(weights + 180080);
 8005cee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_62_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cf2:	4a91      	ldr	r2, [pc, #580]	; (8005f38 <ai_network_init+0xb38>)
 8005cf4:	6811      	ldr	r1, [r2, #0]
 8005cf6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005cfa:	6011      	str	r1, [r2, #0]
    conv2d_62_bias_array.data = AI_PTR(weights + 198896);
 8005cfc:	498f      	ldr	r1, [pc, #572]	; (8005f3c <ai_network_init+0xb3c>)
 8005cfe:	4419      	add	r1, r3
    conv2d_62_bias_array.data_start = AI_PTR(weights + 198896);
 8005d00:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d04:	4a8e      	ldr	r2, [pc, #568]	; (8005f40 <ai_network_init+0xb40>)
 8005d06:	6811      	ldr	r1, [r2, #0]
 8005d08:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d0c:	6011      	str	r1, [r2, #0]
    conv2d_64_weights_array.data = AI_PTR(weights + 199120);
 8005d0e:	498d      	ldr	r1, [pc, #564]	; (8005f44 <ai_network_init+0xb44>)
 8005d10:	4419      	add	r1, r3
    conv2d_64_weights_array.data_start = AI_PTR(weights + 199120);
 8005d12:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d16:	4a8c      	ldr	r2, [pc, #560]	; (8005f48 <ai_network_init+0xb48>)
 8005d18:	6811      	ldr	r1, [r2, #0]
 8005d1a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d1e:	6011      	str	r1, [r2, #0]
    conv2d_64_bias_array.data = AI_PTR(weights + 217936);
 8005d20:	498a      	ldr	r1, [pc, #552]	; (8005f4c <ai_network_init+0xb4c>)
 8005d22:	4419      	add	r1, r3
    conv2d_64_bias_array.data_start = AI_PTR(weights + 217936);
 8005d24:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d28:	4a89      	ldr	r2, [pc, #548]	; (8005f50 <ai_network_init+0xb50>)
 8005d2a:	6811      	ldr	r1, [r2, #0]
 8005d2c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d30:	6011      	str	r1, [r2, #0]
    conv2d_65_weights_array.data = AI_PTR(weights + 219280);
 8005d32:	4988      	ldr	r1, [pc, #544]	; (8005f54 <ai_network_init+0xb54>)
 8005d34:	4419      	add	r1, r3
    conv2d_65_weights_array.data_start = AI_PTR(weights + 219280);
 8005d36:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d3a:	4a87      	ldr	r2, [pc, #540]	; (8005f58 <ai_network_init+0xb58>)
 8005d3c:	6811      	ldr	r1, [r2, #0]
 8005d3e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d42:	6011      	str	r1, [r2, #0]
    conv2d_65_bias_array.data = AI_PTR(weights + 222304);
 8005d44:	4985      	ldr	r1, [pc, #532]	; (8005f5c <ai_network_init+0xb5c>)
 8005d46:	4419      	add	r1, r3
    conv2d_65_bias_array.data_start = AI_PTR(weights + 222304);
 8005d48:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d4c:	4a84      	ldr	r2, [pc, #528]	; (8005f60 <ai_network_init+0xb60>)
 8005d4e:	6811      	ldr	r1, [r2, #0]
 8005d50:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d54:	6011      	str	r1, [r2, #0]
    conv2d_66_weights_array.data = AI_PTR(weights + 223648);
 8005d56:	4983      	ldr	r1, [pc, #524]	; (8005f64 <ai_network_init+0xb64>)
 8005d58:	4419      	add	r1, r3
    conv2d_66_weights_array.data_start = AI_PTR(weights + 223648);
 8005d5a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d5e:	4a82      	ldr	r2, [pc, #520]	; (8005f68 <ai_network_init+0xb68>)
 8005d60:	6811      	ldr	r1, [r2, #0]
 8005d62:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d66:	6011      	str	r1, [r2, #0]
    conv2d_66_bias_array.data = AI_PTR(weights + 261280);
 8005d68:	4980      	ldr	r1, [pc, #512]	; (8005f6c <ai_network_init+0xb6c>)
 8005d6a:	4419      	add	r1, r3
    conv2d_66_bias_array.data_start = AI_PTR(weights + 261280);
 8005d6c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_67_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d70:	4a7f      	ldr	r2, [pc, #508]	; (8005f70 <ai_network_init+0xb70>)
 8005d72:	6811      	ldr	r1, [r2, #0]
 8005d74:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d78:	6011      	str	r1, [r2, #0]
    conv2d_67_weights_array.data = AI_PTR(weights + 261728);
 8005d7a:	497e      	ldr	r1, [pc, #504]	; (8005f74 <ai_network_init+0xb74>)
 8005d7c:	4419      	add	r1, r3
    conv2d_67_weights_array.data_start = AI_PTR(weights + 261728);
 8005d7e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_67_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d82:	4a7d      	ldr	r2, [pc, #500]	; (8005f78 <ai_network_init+0xb78>)
 8005d84:	6811      	ldr	r1, [r2, #0]
 8005d86:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d8a:	6011      	str	r1, [r2, #0]
    conv2d_67_bias_array.data = AI_PTR(weights + 405088);
 8005d8c:	497b      	ldr	r1, [pc, #492]	; (8005f7c <ai_network_init+0xb7c>)
 8005d8e:	4419      	add	r1, r3
    conv2d_67_bias_array.data_start = AI_PTR(weights + 405088);
 8005d90:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_69_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d94:	497a      	ldr	r1, [pc, #488]	; (8005f80 <ai_network_init+0xb80>)
 8005d96:	680c      	ldr	r4, [r1, #0]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005d98:	9a00      	ldr	r2, [sp, #0]
    dense_69_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d9a:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005d9e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    dense_69_weights_array.format |= AI_FMT_FLAG_CONST;
 8005da0:	600c      	str	r4, [r1, #0]
    dense_69_weights_array.data = AI_PTR(weights + 410208);
 8005da2:	4c78      	ldr	r4, [pc, #480]	; (8005f84 <ai_network_init+0xb84>)
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005da4:	3203      	adds	r2, #3
    dense_69_weights_array.data = AI_PTR(weights + 410208);
 8005da6:	441c      	add	r4, r3
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005da8:	f022 0203 	bic.w	r2, r2, #3
    dense_69_weights_array.data_start = AI_PTR(weights + 410208);
 8005dac:	e9c1 4402 	strd	r4, r4, [r1, #8]
    dense_69_bias_array.format |= AI_FMT_FLAG_CONST;
 8005db0:	4975      	ldr	r1, [pc, #468]	; (8005f88 <ai_network_init+0xb88>)
    conv2d_16_output_array.data = AI_PTR(activations + 352);
 8005db2:	f502 7cb0 	add.w	ip, r2, #352	; 0x160
    conv2d_44_scratch0_array.data = AI_PTR(activations + 7168);
 8005db6:	f502 55e0 	add.w	r5, r2, #7168	; 0x1c00
    conv2d_56_scratch0_array.data = AI_PTR(activations + 4072);
 8005dba:	f602 76e8 	addw	r6, r2, #4072	; 0xfe8
    dense_69_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dbe:	680c      	ldr	r4, [r1, #0]
    conv2d_5_output_array.data = AI_PTR(activations + 2736);
 8005dc0:	f502 672b 	add.w	r7, r2, #2736	; 0xab0
    conv2d_16_output_array.data = AI_PTR(activations + 352);
 8005dc4:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    conv2d_19_output_array.data = AI_PTR(activations + 13440);
 8005dc8:	f502 5c52 	add.w	ip, r2, #13440	; 0x3480
    dense_69_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dcc:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_44_scratch0_array.data = AI_PTR(activations + 7168);
 8005dd0:	9534      	str	r5, [sp, #208]	; 0xd0
    conv2d_19_output_array.data = AI_PTR(activations + 13440);
 8005dd2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    eltwise_20_output_array.data = AI_PTR(activations + 25984);
 8005dd6:	f502 4ccb 	add.w	ip, r2, #25984	; 0x6580
    dense_69_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dda:	600c      	str	r4, [r1, #0]
    conv2d_52_output_array.data = AI_PTR(activations + 51264);
 8005ddc:	4493      	add	fp, r2
    dense_69_bias_array.data = AI_PTR(weights + 538208);
 8005dde:	4c6b      	ldr	r4, [pc, #428]	; (8005f8c <ai_network_init+0xb8c>)
    conv2d_54_output_array.data = AI_PTR(activations + 16516);
 8005de0:	4492      	add	sl, r2
    eltwise_20_output_array.data = AI_PTR(activations + 25984);
 8005de2:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    conv2d_23_output_array.data = AI_PTR(activations + 544);
 8005de6:	f502 7c08 	add.w	ip, r2, #544	; 0x220
    dense_69_bias_array.data = AI_PTR(weights + 538208);
 8005dea:	441c      	add	r4, r3
    conv2d_56_scratch0_array.data = AI_PTR(activations + 4072);
 8005dec:	9635      	str	r6, [sp, #212]	; 0xd4
    conv2d_23_output_array.data = AI_PTR(activations + 544);
 8005dee:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
    conv2d_28_output_array.data = AI_PTR(activations + 624);
 8005df2:	f502 7c1c 	add.w	ip, r2, #624	; 0x270
    conv2d_33_scratch1_array.data = AI_PTR(activations + 15552);
 8005df6:	f502 5673 	add.w	r6, r2, #15552	; 0x3cc0
    conv2d_5_output_array.data = AI_PTR(activations + 2736);
 8005dfa:	9701      	str	r7, [sp, #4]
    conv2d_28_output_array.data = AI_PTR(activations + 624);
 8005dfc:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
    conv2d_31_output_array.data = AI_PTR(activations + 6144);
 8005e00:	f502 5cc0 	add.w	ip, r2, #6144	; 0x1800
    conv2d_11_output_array.data = AI_PTR(activations + 272);
 8005e04:	f502 7788 	add.w	r7, r2, #272	; 0x110
    conv2d_33_scratch1_array.data = AI_PTR(activations + 15552);
 8005e08:	9633      	str	r6, [sp, #204]	; 0xcc
    conv2d_31_output_array.data = AI_PTR(activations + 6144);
 8005e0a:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
    conv2d_33_output_array.data = AI_PTR(activations + 43776);
 8005e0e:	f502 4c2b 	add.w	ip, r2, #43776	; 0xab00
    conv2d_11_output_array.data = AI_PTR(activations + 272);
 8005e12:	9708      	str	r7, [sp, #32]
    conv2d_56_output_array.data = AI_PTR(activations + 24120);
 8005e14:	4491      	add	r9, r2
    conv2d_33_output_array.data = AI_PTR(activations + 43776);
 8005e16:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    conv2d_43_output_array.data = AI_PTR(activations + 896);
 8005e1a:	f502 7c60 	add.w	ip, r2, #896	; 0x380
    conv2d_57_output_array.data = AI_PTR(activations + 57048);
 8005e1e:	4490      	add	r8, r2
    conv2d_58_output_array.data = AI_PTR(activations + 5976);
 8005e20:	4496      	add	lr, r2
    conv2d_43_output_array.data = AI_PTR(activations + 896);
 8005e22:	f8cd c090 	str.w	ip, [sp, #144]	; 0x90
    conv2d_44_output_array.data = AI_PTR(activations + 46848);
 8005e26:	f502 4c37 	add.w	ip, r2, #46848	; 0xb700
    dense_69_bias_array.data_start = AI_PTR(weights + 538208);
 8005e2a:	e9c1 4402 	strd	r4, r4, [r1, #8]
    dense_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e2e:	4c58      	ldr	r4, [pc, #352]	; (8005f90 <ai_network_init+0xb90>)
    conv2d_44_output_array.data = AI_PTR(activations + 46848);
 8005e30:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
    conv2d_46_output_array.data = AI_PTR(activations + 8256);
 8005e34:	f502 5c01 	add.w	ip, r2, #8256	; 0x2040
    dense_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e38:	6821      	ldr	r1, [r4, #0]
    conv2d_46_output_array.data = AI_PTR(activations + 8256);
 8005e3a:	f8cd c09c 	str.w	ip, [sp, #156]	; 0x9c
    eltwise_47_output_array.data = AI_PTR(activations + 14528);
 8005e3e:	f502 5c63 	add.w	ip, r2, #14528	; 0x38c0
    dense_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e42:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    eltwise_47_output_array.data = AI_PTR(activations + 14528);
 8005e46:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
    conv2d_50_output_array.data = AI_PTR(activations + 1088);
 8005e4a:	f502 6c88 	add.w	ip, r2, #1088	; 0x440
    dense_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e4e:	6021      	str	r1, [r4, #0]
    dense_70_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e50:	4950      	ldr	r1, [pc, #320]	; (8005f94 <ai_network_init+0xb94>)
    conv2d_50_output_array.data = AI_PTR(activations + 1088);
 8005e52:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
    eltwise_51_output_array.data = AI_PTR(activations + 7360);
 8005e56:	f502 5ce6 	add.w	ip, r2, #7360	; 0x1cc0
    dense_70_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e5a:	680d      	ldr	r5, [r1, #0]
 8005e5c:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 8005e60:	600d      	str	r5, [r1, #0]
    conv2d_35_output_array.data = AI_PTR(activations + 816);
 8005e62:	f502 754c 	add.w	r5, r2, #816	; 0x330
 8005e66:	951e      	str	r5, [sp, #120]	; 0x78
    dense_70_weights_array.data = AI_PTR(weights + 538608);
 8005e68:	4d4b      	ldr	r5, [pc, #300]	; (8005f98 <ai_network_init+0xb98>)
    eltwise_51_output_array.data = AI_PTR(activations + 7360);
 8005e6a:	f8cd c0b0 	str.w	ip, [sp, #176]	; 0xb0
    conv2d_55_output_array.data = AI_PTR(activations + 1328);
 8005e6e:	f502 6ca6 	add.w	ip, r2, #1328	; 0x530
    dense_70_weights_array.data = AI_PTR(weights + 538608);
 8005e72:	441d      	add	r5, r3
    conv2d_55_output_array.data = AI_PTR(activations + 1328);
 8005e74:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
    conv2d_62_output_array.data = AI_PTR(activations + 1904);
 8005e78:	f502 6cee 	add.w	ip, r2, #1904	; 0x770
    dense_70_weights_array.data_start = AI_PTR(weights + 538608);
 8005e7c:	e9c4 5502 	strd	r5, r5, [r4, #8]
    dense_70_bias_array.data = AI_PTR(weights + 539108);
 8005e80:	4c46      	ldr	r4, [pc, #280]	; (8005f9c <ai_network_init+0xb9c>)
    conv2d_62_output_array.data = AI_PTR(activations + 1904);
 8005e82:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
    conv2d_66_output_array.data = AI_PTR(activations + 2464);
 8005e86:	f502 6c1a 	add.w	ip, r2, #2464	; 0x9a0
    dense_70_bias_array.data = AI_PTR(weights + 539108);
 8005e8a:	441c      	add	r4, r3
    conv2d_8_output_array.data = AI_PTR(activations + 150800);
 8005e8c:	4d44      	ldr	r5, [pc, #272]	; (8005fa0 <ai_network_init+0xba0>)
    conv2d_66_output_array.data = AI_PTR(activations + 2464);
 8005e8e:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
    dense_69_output_array.data = AI_PTR(activations + 1280);
 8005e92:	f502 6ca0 	add.w	ip, r2, #1280	; 0x500
    conv2d_8_output_array.data = AI_PTR(activations + 150800);
 8005e96:	1955      	adds	r5, r2, r5
    conv2d_10_output_array.data = AI_PTR(activations + 175888);
 8005e98:	4b42      	ldr	r3, [pc, #264]	; (8005fa4 <ai_network_init+0xba4>)
    dense_69_output_array.data = AI_PTR(activations + 1280);
 8005e9a:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
    dense_70_fmt_output_array.data = AI_PTR(activations + 8);
 8005e9e:	f102 0c08 	add.w	ip, r2, #8
    conv2d_8_output_array.data = AI_PTR(activations + 150800);
 8005ea2:	462e      	mov	r6, r5
    conv2d_9_output_array.data = AI_PTR(activations + 326416);
 8005ea4:	4d40      	ldr	r5, [pc, #256]	; (8005fa8 <ai_network_init+0xba8>)
    dense_70_fmt_output_array.data = AI_PTR(activations + 8);
 8005ea6:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
    eltwise_12_output_array.data = AI_PTR(activations + 25360);
 8005eaa:	f246 3c10 	movw	ip, #25360	; 0x6310
    conv2d_9_output_array.data = AI_PTR(activations + 326416);
 8005eae:	1955      	adds	r5, r2, r5
    conv2d_10_output_array.data = AI_PTR(activations + 175888);
 8005eb0:	4413      	add	r3, r2
 8005eb2:	e07b      	b.n	8005fac <ai_network_init+0xbac>
 8005eb4:	24005c1c 	.word	0x24005c1c
 8005eb8:	000165d0 	.word	0x000165d0
 8005ebc:	24005b2c 	.word	0x24005b2c
 8005ec0:	00017dd0 	.word	0x00017dd0
 8005ec4:	24005d38 	.word	0x24005d38
 8005ec8:	000180d0 	.word	0x000180d0
 8005ecc:	24005c48 	.word	0x24005c48
 8005ed0:	00018790 	.word	0x00018790
 8005ed4:	24005e28 	.word	0x24005e28
 8005ed8:	00018a90 	.word	0x00018a90
 8005edc:	24005d64 	.word	0x24005d64
 8005ee0:	0001b490 	.word	0x0001b490
 8005ee4:	24005f44 	.word	0x24005f44
 8005ee8:	0001b570 	.word	0x0001b570
 8005eec:	24005e54 	.word	0x24005e54
 8005ef0:	0001fef0 	.word	0x0001fef0
 8005ef4:	24006060 	.word	0x24006060
 8005ef8:	00020430 	.word	0x00020430
 8005efc:	24005f70 	.word	0x24005f70
 8005f00:	24006150 	.word	0x24006150
 8005f04:	00021540 	.word	0x00021540
 8005f08:	2400608c 	.word	0x2400608c
 8005f0c:	00025ec0 	.word	0x00025ec0
 8005f10:	24006388 	.word	0x24006388
 8005f14:	00025fa0 	.word	0x00025fa0
 8005f18:	24006298 	.word	0x24006298
 8005f1c:	0002a920 	.word	0x0002a920
 8005f20:	240064a4 	.word	0x240064a4
 8005f24:	0002ae60 	.word	0x0002ae60
 8005f28:	240063b4 	.word	0x240063b4
 8005f2c:	0002ba30 	.word	0x0002ba30
 8005f30:	24006594 	.word	0x24006594
 8005f34:	0002bf70 	.word	0x0002bf70
 8005f38:	240064d0 	.word	0x240064d0
 8005f3c:	000308f0 	.word	0x000308f0
 8005f40:	240066b0 	.word	0x240066b0
 8005f44:	000309d0 	.word	0x000309d0
 8005f48:	240065c0 	.word	0x240065c0
 8005f4c:	00035350 	.word	0x00035350
 8005f50:	240067cc 	.word	0x240067cc
 8005f54:	00035890 	.word	0x00035890
 8005f58:	240066dc 	.word	0x240066dc
 8005f5c:	00036460 	.word	0x00036460
 8005f60:	240068bc 	.word	0x240068bc
 8005f64:	000369a0 	.word	0x000369a0
 8005f68:	240067f8 	.word	0x240067f8
 8005f6c:	0003fca0 	.word	0x0003fca0
 8005f70:	24006a20 	.word	0x24006a20
 8005f74:	0003fe60 	.word	0x0003fe60
 8005f78:	240068e8 	.word	0x240068e8
 8005f7c:	00062e60 	.word	0x00062e60
 8005f80:	24006e34 	.word	0x24006e34
 8005f84:	00064260 	.word	0x00064260
 8005f88:	24006dc0 	.word	0x24006dc0
 8005f8c:	00083660 	.word	0x00083660
 8005f90:	24006f20 	.word	0x24006f20
 8005f94:	24006e60 	.word	0x24006e60
 8005f98:	000837f0 	.word	0x000837f0
 8005f9c:	000839e4 	.word	0x000839e4
 8005fa0:	00024d10 	.word	0x00024d10
 8005fa4:	0002af10 	.word	0x0002af10
 8005fa8:	0004fb10 	.word	0x0004fb10
    dense_70_bias_array.data_start = AI_PTR(weights + 539108);
 8005fac:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conversion_0_output_array.data = AI_PTR(activations + 364672);
 8005fb0:	4cb2      	ldr	r4, [pc, #712]	; (800627c <ai_network_init+0xe7c>)
    conv2d_3_output_array.data = AI_PTR(activations + 309072);
 8005fb2:	49b3      	ldr	r1, [pc, #716]	; (8006280 <ai_network_init+0xe80>)
    conversion_0_output_array.data = AI_PTR(activations + 364672);
 8005fb4:	1914      	adds	r4, r2, r4
    conv2d_9_output_array.data = AI_PTR(activations + 326416);
 8005fb6:	9507      	str	r5, [sp, #28]
    conv2d_13_output_array.data = AI_PTR(activations + 200976);
 8005fb8:	4db2      	ldr	r5, [pc, #712]	; (8006284 <ai_network_init+0xe84>)
    conversion_0_output_array.data = AI_PTR(activations + 364672);
 8005fba:	9404      	str	r4, [sp, #16]
    conv2d_2_output_array.data = AI_PTR(activations + 312688);
 8005fbc:	4cb2      	ldr	r4, [pc, #712]	; (8006288 <ai_network_init+0xe88>)
    conv2d_10_output_array.data = AI_PTR(activations + 175888);
 8005fbe:	9302      	str	r3, [sp, #8]
    conv2d_2_output_array.data = AI_PTR(activations + 312688);
 8005fc0:	1917      	adds	r7, r2, r4
    conv2d_7_output_array.data = AI_PTR(activations + 0);
 8005fc2:	4bb2      	ldr	r3, [pc, #712]	; (800628c <ai_network_init+0xe8c>)
    conv2d_2_output_array.data = AI_PTR(activations + 312688);
 8005fc4:	463c      	mov	r4, r7
    conv2d_3_output_array.data = AI_PTR(activations + 309072);
 8005fc6:	1857      	adds	r7, r2, r1
    conv2d_4_output_array.data = AI_PTR(activations + 509920);
 8005fc8:	49b1      	ldr	r1, [pc, #708]	; (8006290 <ai_network_init+0xe90>)
    conv2d_3_output_array.data = AI_PTR(activations + 309072);
 8005fca:	9700      	str	r7, [sp, #0]
    eltwise_12_output_array.data = AI_PTR(activations + 25360);
 8005fcc:	4667      	mov	r7, ip
    conv2d_15_output_array.data = AI_PTR(activations + 39412);
 8005fce:	f649 1cf4 	movw	ip, #39412	; 0x99f4
    conv2d_4_output_array.data = AI_PTR(activations + 509920);
 8005fd2:	4411      	add	r1, r2
    eltwise_12_output_array.data = AI_PTR(activations + 25360);
 8005fd4:	19d7      	adds	r7, r2, r7
 8005fd6:	9709      	str	r7, [sp, #36]	; 0x24
    conv2d_13_output_array.data = AI_PTR(activations + 200976);
 8005fd8:	1957      	adds	r7, r2, r5
    conv2d_15_output_array.data = AI_PTR(activations + 39412);
 8005fda:	4665      	mov	r5, ip
    eltwise_24_output_array.data = AI_PTR(activations + 13088);
 8005fdc:	f243 3c20 	movw	ip, #13088	; 0x3320
    conv2d_13_output_array.data = AI_PTR(activations + 200976);
 8005fe0:	970a      	str	r7, [sp, #40]	; 0x28
    conv2d_15_output_array.data = AI_PTR(activations + 39412);
 8005fe2:	1957      	adds	r7, r2, r5
    conv2d_17_output_array.data = AI_PTR(activations + 89184);
 8005fe4:	4dab      	ldr	r5, [pc, #684]	; (8006294 <ai_network_init+0xe94>)
    conv2d_15_output_array.data = AI_PTR(activations + 39412);
 8005fe6:	970b      	str	r7, [sp, #44]	; 0x2c
    conv2d_17_output_array.data = AI_PTR(activations + 89184);
 8005fe8:	1957      	adds	r7, r2, r5
    conv2d_18_output_array.data = AI_PTR(activations + 239712);
 8005fea:	f505 3513 	add.w	r5, r5, #150528	; 0x24c00
    conv2d_17_output_array.data = AI_PTR(activations + 89184);
 8005fee:	970d      	str	r7, [sp, #52]	; 0x34
    conv2d_18_output_array.data = AI_PTR(activations + 239712);
 8005ff0:	1957      	adds	r7, r2, r5
    conv2d_21_output_array.data = AI_PTR(activations + 113792);
 8005ff2:	4da9      	ldr	r5, [pc, #676]	; (8006298 <ai_network_init+0xe98>)
    conv2d_18_output_array.data = AI_PTR(activations + 239712);
 8005ff4:	970e      	str	r7, [sp, #56]	; 0x38
    conv2d_21_output_array.data = AI_PTR(activations + 113792);
 8005ff6:	1957      	adds	r7, r2, r5
    conv2d_22_output_array.data = AI_PTR(activations + 189056);
 8005ff8:	f505 3593 	add.w	r5, r5, #75264	; 0x12600
    conv2d_21_output_array.data = AI_PTR(activations + 113792);
 8005ffc:	9711      	str	r7, [sp, #68]	; 0x44
    conv2d_22_output_array.data = AI_PTR(activations + 189056);
 8005ffe:	1957      	adds	r7, r2, r5
    eltwise_24_output_array.data = AI_PTR(activations + 13088);
 8006000:	4665      	mov	r5, ip
    conv2d_27_output_array.data = AI_PTR(activations + 22372);
 8006002:	f245 7c64 	movw	ip, #22372	; 0x5764
    conv2d_22_output_array.data = AI_PTR(activations + 189056);
 8006006:	9712      	str	r7, [sp, #72]	; 0x48
    eltwise_24_output_array.data = AI_PTR(activations + 13088);
 8006008:	1957      	adds	r7, r2, r5
    conv2d_25_output_array.data = AI_PTR(activations + 100896);
 800600a:	4da4      	ldr	r5, [pc, #656]	; (800629c <ai_network_init+0xe9c>)
    eltwise_24_output_array.data = AI_PTR(activations + 13088);
 800600c:	9714      	str	r7, [sp, #80]	; 0x50
    conv2d_25_output_array.data = AI_PTR(activations + 100896);
 800600e:	1957      	adds	r7, r2, r5
    conv2d_27_output_array.data = AI_PTR(activations + 22372);
 8006010:	4665      	mov	r5, ip
    conv2d_29_output_array.data = AI_PTR(activations + 35088);
 8006012:	f648 1c10 	movw	ip, #35088	; 0x8910
    conv2d_25_output_array.data = AI_PTR(activations + 100896);
 8006016:	9715      	str	r7, [sp, #84]	; 0x54
    conv2d_27_output_array.data = AI_PTR(activations + 22372);
 8006018:	1957      	adds	r7, r2, r5
    conv2d_29_output_array.data = AI_PTR(activations + 35088);
 800601a:	4665      	mov	r5, ip
    eltwise_32_output_array.data = AI_PTR(activations + 10848);
 800601c:	f642 2c60 	movw	ip, #10848	; 0x2a60
    conv2d_27_output_array.data = AI_PTR(activations + 22372);
 8006020:	9716      	str	r7, [sp, #88]	; 0x58
    conv2d_29_output_array.data = AI_PTR(activations + 35088);
 8006022:	1957      	adds	r7, r2, r5
    conv2d_30_output_array.data = AI_PTR(activations + 91536);
 8006024:	4d9e      	ldr	r5, [pc, #632]	; (80062a0 <ai_network_init+0xea0>)
    conv2d_29_output_array.data = AI_PTR(activations + 35088);
 8006026:	9718      	str	r7, [sp, #96]	; 0x60
    conv2d_30_output_array.data = AI_PTR(activations + 91536);
 8006028:	1957      	adds	r7, r2, r5
    eltwise_32_output_array.data = AI_PTR(activations + 10848);
 800602a:	4665      	mov	r5, ip
    eltwise_36_output_array.data = AI_PTR(activations + 5520);
 800602c:	f241 5c90 	movw	ip, #5520	; 0x1590
    conv2d_30_output_array.data = AI_PTR(activations + 91536);
 8006030:	9719      	str	r7, [sp, #100]	; 0x64
    eltwise_32_output_array.data = AI_PTR(activations + 10848);
 8006032:	1957      	adds	r7, r2, r5
    conv2d_34_output_array.data = AI_PTR(activations + 72000);
 8006034:	4d9b      	ldr	r5, [pc, #620]	; (80062a4 <ai_network_init+0xea4>)
    eltwise_32_output_array.data = AI_PTR(activations + 10848);
 8006036:	971b      	str	r7, [sp, #108]	; 0x6c
    conv2d_34_output_array.data = AI_PTR(activations + 72000);
 8006038:	1957      	adds	r7, r2, r5
    eltwise_36_output_array.data = AI_PTR(activations + 5520);
 800603a:	4665      	mov	r5, ip
    conv2d_37_output_array.data = AI_PTR(activations + 38448);
 800603c:	f249 6c30 	movw	ip, #38448	; 0x9630
    conv2d_34_output_array.data = AI_PTR(activations + 72000);
 8006040:	971d      	str	r7, [sp, #116]	; 0x74
    eltwise_36_output_array.data = AI_PTR(activations + 5520);
 8006042:	1957      	adds	r7, r2, r5
    conv2d_37_output_array.data = AI_PTR(activations + 38448);
 8006044:	4665      	mov	r5, ip
    eltwise_40_output_array.data = AI_PTR(activations + 10224);
 8006046:	f242 7cf0 	movw	ip, #10224	; 0x27f0
    conv2d_37_output_array.data = AI_PTR(activations + 38448);
 800604a:	1955      	adds	r5, r2, r5
    eltwise_36_output_array.data = AI_PTR(activations + 5520);
 800604c:	971f      	str	r7, [sp, #124]	; 0x7c
    conv2d_37_output_array.data = AI_PTR(activations + 38448);
 800604e:	9520      	str	r5, [sp, #128]	; 0x80
    conv2d_38_output_array.data = AI_PTR(activations + 66672);
 8006050:	4d95      	ldr	r5, [pc, #596]	; (80062a8 <ai_network_init+0xea8>)
 8006052:	1955      	adds	r5, r2, r5
 8006054:	9521      	str	r5, [sp, #132]	; 0x84
    eltwise_40_output_array.data = AI_PTR(activations + 10224);
 8006056:	4665      	mov	r5, ip
    conv2d_41_output_array.data = AI_PTR(activations + 43152);
 8006058:	f64a 0c90 	movw	ip, #43152	; 0xa890
    eltwise_40_output_array.data = AI_PTR(activations + 10224);
 800605c:	1957      	adds	r7, r2, r5
    conv2d_41_output_array.data = AI_PTR(activations + 43152);
 800605e:	4665      	mov	r5, ip
    conv2d_48_output_array.data = AI_PTR(activations + 58432);
 8006060:	f24e 4c40 	movw	ip, #58432	; 0xe440
    eltwise_40_output_array.data = AI_PTR(activations + 10224);
 8006064:	9703      	str	r7, [sp, #12]
    conv2d_60_output_array.data = AI_PTR(activations + 27928);
 8006066:	f646 5718 	movw	r7, #27928	; 0x6d18
    conv2d_41_output_array.data = AI_PTR(activations + 43152);
 800606a:	1955      	adds	r5, r2, r5
    conv2d_60_output_array.data = AI_PTR(activations + 27928);
 800606c:	4417      	add	r7, r2
    conv2d_41_output_array.data = AI_PTR(activations + 43152);
 800606e:	9522      	str	r5, [sp, #136]	; 0x88
    conv2d_42_output_array.data = AI_PTR(activations + 71376);
 8006070:	4d8e      	ldr	r5, [pc, #568]	; (80062ac <ai_network_init+0xeac>)
 8006072:	1955      	adds	r5, r2, r5
 8006074:	9523      	str	r5, [sp, #140]	; 0x8c
    conv2d_45_output_array.data = AI_PTR(activations + 122112);
 8006076:	4d8e      	ldr	r5, [pc, #568]	; (80062b0 <ai_network_init+0xeb0>)
    conv2d_2_output_array.data_start = AI_PTR(activations + 312688);
 8006078:	9405      	str	r4, [sp, #20]
    conv2d_45_output_array.data = AI_PTR(activations + 122112);
 800607a:	1955      	adds	r5, r2, r5
    conv2d_8_output_array.data = AI_PTR(activations + 150800);
 800607c:	9606      	str	r6, [sp, #24]
    conv2d_7_output_array.data_start = AI_PTR(activations + 0);
 800607e:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_4_output_array.data = AI_PTR(activations + 509920);
 8006082:	4b8c      	ldr	r3, [pc, #560]	; (80062b4 <ai_network_init+0xeb4>)
    conv2d_45_output_array.data = AI_PTR(activations + 122112);
 8006084:	9526      	str	r5, [sp, #152]	; 0x98
    conv2d_48_output_array.data = AI_PTR(activations + 58432);
 8006086:	4665      	mov	r5, ip
    eltwise_59_output_array.data = AI_PTR(activations + 8720);
 8006088:	f242 2c10 	movw	ip, #8720	; 0x2210
    conv2d_48_output_array.data = AI_PTR(activations + 58432);
 800608c:	1955      	adds	r5, r2, r5
    eltwise_59_output_array.data = AI_PTR(activations + 8720);
 800608e:	4494      	add	ip, r2
    conv2d_48_output_array.data = AI_PTR(activations + 58432);
 8006090:	9529      	str	r5, [sp, #164]	; 0xa4
    conv2d_49_output_array.data = AI_PTR(activations + 96064);
 8006092:	4d89      	ldr	r5, [pc, #548]	; (80062b8 <ai_network_init+0xeb8>)
    conv2d_4_output_array.data_start = AI_PTR(activations + 509920);
 8006094:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_5_output_array.data = AI_PTR(activations + 2736);
 8006098:	9901      	ldr	r1, [sp, #4]
    conv2d_49_output_array.data = AI_PTR(activations + 96064);
 800609a:	1955      	adds	r5, r2, r5
    conv2d_5_output_array.data = AI_PTR(activations + 2736);
 800609c:	4b87      	ldr	r3, [pc, #540]	; (80062bc <ai_network_init+0xebc>)
    conv2d_49_output_array.data = AI_PTR(activations + 96064);
 800609e:	952a      	str	r5, [sp, #168]	; 0xa8
    conv2d_8_output_array.data = AI_PTR(activations + 150800);
 80060a0:	4d87      	ldr	r5, [pc, #540]	; (80062c0 <ai_network_init+0xec0>)
    conv2d_5_output_array.data_start = AI_PTR(activations + 2736);
 80060a2:	e9c3 1102 	strd	r1, r1, [r3, #8]
    eltwise_63_output_array.data = AI_PTR(activations + 4648);
 80060a6:	f241 2128 	movw	r1, #4648	; 0x1228
    conv2d_2_output_array.data = AI_PTR(activations + 312688);
 80060aa:	4b86      	ldr	r3, [pc, #536]	; (80062c4 <ai_network_init+0xec4>)
    conv2d_8_output_array.data = AI_PTR(activations + 150800);
 80060ac:	60ae      	str	r6, [r5, #8]
    conv2d_61_output_array.data = AI_PTR(activations + 60856);
 80060ae:	f64e 56b8 	movw	r6, #60856	; 0xedb8
    eltwise_63_output_array.data = AI_PTR(activations + 4648);
 80060b2:	4411      	add	r1, r2
    conv2d_2_output_array.data = AI_PTR(activations + 312688);
 80060b4:	609c      	str	r4, [r3, #8]
    conv2d_2_output_array.data_start = AI_PTR(activations + 312688);
 80060b6:	60dc      	str	r4, [r3, #12]
    conv2d_65_output_array.data = AI_PTR(activations + 56784);
 80060b8:	f64d 54d0 	movw	r4, #56784	; 0xddd0
    eltwise_63_output_array.data = AI_PTR(activations + 4648);
 80060bc:	912f      	str	r1, [sp, #188]	; 0xbc
    conv2d_61_output_array.data = AI_PTR(activations + 60856);
 80060be:	4416      	add	r6, r2
    conv2d_3_output_array.data = AI_PTR(activations + 309072);
 80060c0:	9900      	ldr	r1, [sp, #0]
    conv2d_65_output_array.data = AI_PTR(activations + 56784);
 80060c2:	4414      	add	r4, r2
    conv2d_3_output_array.data = AI_PTR(activations + 309072);
 80060c4:	4b80      	ldr	r3, [pc, #512]	; (80062c8 <ai_network_init+0xec8>)
    conv2d_3_output_array.data_start = AI_PTR(activations + 309072);
 80060c6:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conversion_0_output_array.data = AI_PTR(activations + 364672);
 80060ca:	9904      	ldr	r1, [sp, #16]
 80060cc:	4b7f      	ldr	r3, [pc, #508]	; (80062cc <ai_network_init+0xecc>)
    conv2d_65_output_array.data = AI_PTR(activations + 56784);
 80060ce:	9404      	str	r4, [sp, #16]
    serving_default_sequential_33_input0_output_array.data = AI_PTR(NULL);
 80060d0:	2400      	movs	r4, #0
    conversion_0_output_array.data_start = AI_PTR(activations + 364672);
 80060d2:	e9c3 1102 	strd	r1, r1, [r3, #8]
    serving_default_sequential_33_input0_output_array.data = AI_PTR(NULL);
 80060d6:	4b7e      	ldr	r3, [pc, #504]	; (80062d0 <ai_network_init+0xed0>)
    conv2d_64_output_array.data = AI_PTR(activations + 23856);
 80060d8:	f645 5130 	movw	r1, #23856	; 0x5d30
    serving_default_sequential_33_input0_output_array.data_start = AI_PTR(NULL);
 80060dc:	e9c3 4402 	strd	r4, r4, [r3, #8]
    conv2d_8_output_array.data_start = AI_PTR(activations + 150800);
 80060e0:	9b06      	ldr	r3, [sp, #24]
    conv2d_64_output_array.data = AI_PTR(activations + 23856);
 80060e2:	4411      	add	r1, r2
    eltwise_36_output_array.data = AI_PTR(activations + 5520);
 80060e4:	4c7b      	ldr	r4, [pc, #492]	; (80062d4 <ai_network_init+0xed4>)
    conv2d_8_output_array.data_start = AI_PTR(activations + 150800);
 80060e6:	60eb      	str	r3, [r5, #12]
    conv2d_9_output_array.data = AI_PTR(activations + 326416);
 80060e8:	9b07      	ldr	r3, [sp, #28]
 80060ea:	4d7b      	ldr	r5, [pc, #492]	; (80062d8 <ai_network_init+0xed8>)
    conv2d_9_output_array.data_start = AI_PTR(activations + 326416);
 80060ec:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_10_output_array.data = AI_PTR(activations + 175888);
 80060f0:	9b02      	ldr	r3, [sp, #8]
 80060f2:	4d7a      	ldr	r5, [pc, #488]	; (80062dc <ai_network_init+0xedc>)
    conv2d_10_output_array.data_start = AI_PTR(activations + 175888);
 80060f4:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_11_output_array.data = AI_PTR(activations + 272);
 80060f8:	9b08      	ldr	r3, [sp, #32]
 80060fa:	4d79      	ldr	r5, [pc, #484]	; (80062e0 <ai_network_init+0xee0>)
    conv2d_11_output_array.data_start = AI_PTR(activations + 272);
 80060fc:	e9c5 3302 	strd	r3, r3, [r5, #8]
    eltwise_12_output_array.data = AI_PTR(activations + 25360);
 8006100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006102:	4d78      	ldr	r5, [pc, #480]	; (80062e4 <ai_network_init+0xee4>)
    eltwise_12_output_array.data_start = AI_PTR(activations + 25360);
 8006104:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_13_output_array.data = AI_PTR(activations + 200976);
 8006108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800610a:	4d77      	ldr	r5, [pc, #476]	; (80062e8 <ai_network_init+0xee8>)
    conv2d_13_output_array.data_start = AI_PTR(activations + 200976);
 800610c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_15_output_array.data = AI_PTR(activations + 39412);
 8006110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006112:	4d76      	ldr	r5, [pc, #472]	; (80062ec <ai_network_init+0xeec>)
    conv2d_15_output_array.data_start = AI_PTR(activations + 39412);
 8006114:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_16_output_array.data = AI_PTR(activations + 352);
 8006118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800611a:	4d75      	ldr	r5, [pc, #468]	; (80062f0 <ai_network_init+0xef0>)
    conv2d_16_output_array.data_start = AI_PTR(activations + 352);
 800611c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_17_output_array.data = AI_PTR(activations + 89184);
 8006120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006122:	4d74      	ldr	r5, [pc, #464]	; (80062f4 <ai_network_init+0xef4>)
    conv2d_17_output_array.data_start = AI_PTR(activations + 89184);
 8006124:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_18_output_array.data = AI_PTR(activations + 239712);
 8006128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800612a:	4d73      	ldr	r5, [pc, #460]	; (80062f8 <ai_network_init+0xef8>)
    conv2d_18_output_array.data_start = AI_PTR(activations + 239712);
 800612c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_19_output_array.data = AI_PTR(activations + 13440);
 8006130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006132:	4d72      	ldr	r5, [pc, #456]	; (80062fc <ai_network_init+0xefc>)
    conv2d_19_output_array.data_start = AI_PTR(activations + 13440);
 8006134:	e9c5 3302 	strd	r3, r3, [r5, #8]
    eltwise_20_output_array.data = AI_PTR(activations + 25984);
 8006138:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800613a:	4d71      	ldr	r5, [pc, #452]	; (8006300 <ai_network_init+0xf00>)
    eltwise_20_output_array.data_start = AI_PTR(activations + 25984);
 800613c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_21_output_array.data = AI_PTR(activations + 113792);
 8006140:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006142:	4d70      	ldr	r5, [pc, #448]	; (8006304 <ai_network_init+0xf04>)
    conv2d_21_output_array.data_start = AI_PTR(activations + 113792);
 8006144:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_22_output_array.data = AI_PTR(activations + 189056);
 8006148:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800614a:	4d6f      	ldr	r5, [pc, #444]	; (8006308 <ai_network_init+0xf08>)
    conv2d_22_output_array.data_start = AI_PTR(activations + 189056);
 800614c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_23_output_array.data = AI_PTR(activations + 544);
 8006150:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006152:	4d6e      	ldr	r5, [pc, #440]	; (800630c <ai_network_init+0xf0c>)
    conv2d_23_output_array.data_start = AI_PTR(activations + 544);
 8006154:	e9c5 3302 	strd	r3, r3, [r5, #8]
    eltwise_24_output_array.data = AI_PTR(activations + 13088);
 8006158:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800615a:	4d6d      	ldr	r5, [pc, #436]	; (8006310 <ai_network_init+0xf10>)
    eltwise_24_output_array.data_start = AI_PTR(activations + 13088);
 800615c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_25_output_array.data = AI_PTR(activations + 100896);
 8006160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006162:	4d6c      	ldr	r5, [pc, #432]	; (8006314 <ai_network_init+0xf14>)
    conv2d_25_output_array.data_start = AI_PTR(activations + 100896);
 8006164:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_27_output_array.data = AI_PTR(activations + 22372);
 8006168:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800616a:	4d6b      	ldr	r5, [pc, #428]	; (8006318 <ai_network_init+0xf18>)
    conv2d_27_output_array.data_start = AI_PTR(activations + 22372);
 800616c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_28_output_array.data = AI_PTR(activations + 624);
 8006170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006172:	4d6a      	ldr	r5, [pc, #424]	; (800631c <ai_network_init+0xf1c>)
    conv2d_28_output_array.data_start = AI_PTR(activations + 624);
 8006174:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_29_output_array.data = AI_PTR(activations + 35088);
 8006178:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800617a:	4d69      	ldr	r5, [pc, #420]	; (8006320 <ai_network_init+0xf20>)
    conv2d_29_output_array.data_start = AI_PTR(activations + 35088);
 800617c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_30_output_array.data = AI_PTR(activations + 91536);
 8006180:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006182:	4d68      	ldr	r5, [pc, #416]	; (8006324 <ai_network_init+0xf24>)
    conv2d_30_output_array.data_start = AI_PTR(activations + 91536);
 8006184:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_31_output_array.data = AI_PTR(activations + 6144);
 8006188:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800618a:	4d67      	ldr	r5, [pc, #412]	; (8006328 <ai_network_init+0xf28>)
    conv2d_31_output_array.data_start = AI_PTR(activations + 6144);
 800618c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    eltwise_32_output_array.data = AI_PTR(activations + 10848);
 8006190:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006192:	4d66      	ldr	r5, [pc, #408]	; (800632c <ai_network_init+0xf2c>)
    eltwise_32_output_array.data_start = AI_PTR(activations + 10848);
 8006194:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_33_output_array.data = AI_PTR(activations + 43776);
 8006198:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800619a:	4d65      	ldr	r5, [pc, #404]	; (8006330 <ai_network_init+0xf30>)
    conv2d_33_output_array.data_start = AI_PTR(activations + 43776);
 800619c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_34_output_array.data = AI_PTR(activations + 72000);
 80061a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80061a2:	4d64      	ldr	r5, [pc, #400]	; (8006334 <ai_network_init+0xf34>)
    conv2d_34_output_array.data_start = AI_PTR(activations + 72000);
 80061a4:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_35_output_array.data = AI_PTR(activations + 816);
 80061a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80061aa:	4d63      	ldr	r5, [pc, #396]	; (8006338 <ai_network_init+0xf38>)
    conv2d_35_output_array.data_start = AI_PTR(activations + 816);
 80061ac:	e9c5 3302 	strd	r3, r3, [r5, #8]
    eltwise_36_output_array.data = AI_PTR(activations + 5520);
 80061b0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    eltwise_36_output_array.data_start = AI_PTR(activations + 5520);
 80061b2:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_37_output_array.data = AI_PTR(activations + 38448);
 80061b6:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80061b8:	4c60      	ldr	r4, [pc, #384]	; (800633c <ai_network_init+0xf3c>)
    conv2d_37_output_array.data_start = AI_PTR(activations + 38448);
 80061ba:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_38_output_array.data = AI_PTR(activations + 66672);
 80061be:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80061c0:	4c5f      	ldr	r4, [pc, #380]	; (8006340 <ai_network_init+0xf40>)
    conv2d_38_output_array.data_start = AI_PTR(activations + 66672);
 80061c2:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_39_output_array.data = AI_PTR(activations + 816);
 80061c6:	4c5f      	ldr	r4, [pc, #380]	; (8006344 <ai_network_init+0xf44>)
    conv2d_41_output_array.data = AI_PTR(activations + 43152);
 80061c8:	9d22      	ldr	r5, [sp, #136]	; 0x88
    conv2d_39_output_array.data_start = AI_PTR(activations + 816);
 80061ca:	e9c4 3302 	strd	r3, r3, [r4, #8]
    eltwise_40_output_array.data = AI_PTR(activations + 10224);
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	4c5d      	ldr	r4, [pc, #372]	; (8006348 <ai_network_init+0xf48>)
    eltwise_40_output_array.data_start = AI_PTR(activations + 10224);
 80061d2:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_41_output_array.data = AI_PTR(activations + 43152);
 80061d6:	4c5d      	ldr	r4, [pc, #372]	; (800634c <ai_network_init+0xf4c>)
    conv2d_43_output_array.data = AI_PTR(activations + 896);
 80061d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    conv2d_41_output_array.data_start = AI_PTR(activations + 43152);
 80061da:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_42_output_array.data = AI_PTR(activations + 71376);
 80061de:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80061e0:	4c5b      	ldr	r4, [pc, #364]	; (8006350 <ai_network_init+0xf50>)
    conv2d_42_output_array.data_start = AI_PTR(activations + 71376);
 80061e2:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_43_output_array.data = AI_PTR(activations + 896);
 80061e6:	4c5b      	ldr	r4, [pc, #364]	; (8006354 <ai_network_init+0xf54>)
    conv2d_45_output_array.data = AI_PTR(activations + 122112);
 80061e8:	9d26      	ldr	r5, [sp, #152]	; 0x98
    conv2d_43_output_array.data_start = AI_PTR(activations + 896);
 80061ea:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_44_output_array.data = AI_PTR(activations + 46848);
 80061ee:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80061f0:	4c59      	ldr	r4, [pc, #356]	; (8006358 <ai_network_init+0xf58>)
    conv2d_44_output_array.data_start = AI_PTR(activations + 46848);
 80061f2:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_45_output_array.data = AI_PTR(activations + 122112);
 80061f6:	4c59      	ldr	r4, [pc, #356]	; (800635c <ai_network_init+0xf5c>)
    conv2d_45_output_array.data_start = AI_PTR(activations + 122112);
 80061f8:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_46_output_array.data = AI_PTR(activations + 8256);
 80061fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80061fe:	4c58      	ldr	r4, [pc, #352]	; (8006360 <ai_network_init+0xf60>)
    conv2d_48_output_array.data = AI_PTR(activations + 58432);
 8006200:	9d29      	ldr	r5, [sp, #164]	; 0xa4
    conv2d_46_output_array.data_start = AI_PTR(activations + 8256);
 8006202:	e9c4 3302 	strd	r3, r3, [r4, #8]
    eltwise_47_output_array.data = AI_PTR(activations + 14528);
 8006206:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006208:	4c56      	ldr	r4, [pc, #344]	; (8006364 <ai_network_init+0xf64>)
    eltwise_47_output_array.data_start = AI_PTR(activations + 14528);
 800620a:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_48_output_array.data = AI_PTR(activations + 58432);
 800620e:	4c56      	ldr	r4, [pc, #344]	; (8006368 <ai_network_init+0xf68>)
    conv2d_50_output_array.data = AI_PTR(activations + 1088);
 8006210:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    conv2d_48_output_array.data_start = AI_PTR(activations + 58432);
 8006212:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_49_output_array.data = AI_PTR(activations + 96064);
 8006216:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8006218:	4c54      	ldr	r4, [pc, #336]	; (800636c <ai_network_init+0xf6c>)
    conv2d_49_output_array.data_start = AI_PTR(activations + 96064);
 800621a:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_50_output_array.data = AI_PTR(activations + 1088);
 800621e:	4d54      	ldr	r5, [pc, #336]	; (8006370 <ai_network_init+0xf70>)
    conv2d_21_scratch1_array.data = AI_PTR(activations + 38528);
 8006220:	f249 6480 	movw	r4, #38528	; 0x9680
    conv2d_50_output_array.data_start = AI_PTR(activations + 1088);
 8006224:	e9c5 3302 	strd	r3, r3, [r5, #8]
    eltwise_51_output_array.data = AI_PTR(activations + 7360);
 8006228:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    conv2d_21_scratch1_array.data = AI_PTR(activations + 38528);
 800622a:	4414      	add	r4, r2
    eltwise_51_output_array.data = AI_PTR(activations + 7360);
 800622c:	4d51      	ldr	r5, [pc, #324]	; (8006374 <ai_network_init+0xf74>)
    eltwise_51_output_array.data_start = AI_PTR(activations + 7360);
 800622e:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_52_output_array.data = AI_PTR(activations + 51264);
 8006232:	4d51      	ldr	r5, [pc, #324]	; (8006378 <ai_network_init+0xf78>)
    conv2d_55_output_array.data = AI_PTR(activations + 1328);
 8006234:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    conv2d_52_output_array.data_start = AI_PTR(activations + 51264);
 8006236:	e9c5 bb02 	strd	fp, fp, [r5, #8]
    conv2d_54_output_array.data = AI_PTR(activations + 16516);
 800623a:	4d50      	ldr	r5, [pc, #320]	; (800637c <ai_network_init+0xf7c>)
    conv2d_48_scratch1_array.data = AI_PTR(activations + 20800);
 800623c:	f245 1b40 	movw	fp, #20800	; 0x5140
    conv2d_54_output_array.data_start = AI_PTR(activations + 16516);
 8006240:	e9c5 aa02 	strd	sl, sl, [r5, #8]
    conv2d_55_output_array.data = AI_PTR(activations + 1328);
 8006244:	4d4e      	ldr	r5, [pc, #312]	; (8006380 <ai_network_init+0xf80>)
    conv2d_48_scratch1_array.data = AI_PTR(activations + 20800);
 8006246:	4493      	add	fp, r2
    conv2d_60_scratch1_array.data = AI_PTR(activations + 11464);
 8006248:	f642 4ac8 	movw	sl, #11464	; 0x2cc8
    conv2d_55_output_array.data_start = AI_PTR(activations + 1328);
 800624c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_56_output_array.data = AI_PTR(activations + 24120);
 8006250:	4d4c      	ldr	r5, [pc, #304]	; (8006384 <ai_network_init+0xf84>)
    conv2d_60_scratch1_array.data = AI_PTR(activations + 11464);
 8006252:	4492      	add	sl, r2
    conv2d_56_output_array.data_start = AI_PTR(activations + 24120);
 8006254:	e9c5 9902 	strd	r9, r9, [r5, #8]
    conv2d_57_output_array.data = AI_PTR(activations + 57048);
 8006258:	4d4b      	ldr	r5, [pc, #300]	; (8006388 <ai_network_init+0xf88>)
    conv2d_13_scratch1_array.data = AI_PTR(activations + 50448);
 800625a:	f24c 5910 	movw	r9, #50448	; 0xc510
    conv2d_57_output_array.data_start = AI_PTR(activations + 57048);
 800625e:	e9c5 8802 	strd	r8, r8, [r5, #8]
    conv2d_58_output_array.data = AI_PTR(activations + 5976);
 8006262:	4d4a      	ldr	r5, [pc, #296]	; (800638c <ai_network_init+0xf8c>)
    conv2d_2_scratch0_array.data = AI_PTR(activations + 515200);
 8006264:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8006394 <ai_network_init+0xf94>
    conv2d_58_output_array.data_start = AI_PTR(activations + 5976);
 8006268:	e9c5 ee02 	strd	lr, lr, [r5, #8]
    eltwise_59_output_array.data = AI_PTR(activations + 8720);
 800626c:	4d48      	ldr	r5, [pc, #288]	; (8006390 <ai_network_init+0xf90>)
    conv2d_2_scratch0_array.data = AI_PTR(activations + 515200);
 800626e:	4490      	add	r8, r2
    conv2d_3_scratch0_array.data = AI_PTR(activations + 515800);
 8006270:	f8df e124 	ldr.w	lr, [pc, #292]	; 8006398 <ai_network_init+0xf98>
    eltwise_59_output_array.data_start = AI_PTR(activations + 8720);
 8006274:	e9c5 cc02 	strd	ip, ip, [r5, #8]
 8006278:	e090      	b.n	800639c <ai_network_init+0xf9c>
 800627a:	bf00      	nop
 800627c:	00059080 	.word	0x00059080
 8006280:	0004b750 	.word	0x0004b750
 8006284:	00031110 	.word	0x00031110
 8006288:	0004c570 	.word	0x0004c570
 800628c:	24006ab8 	.word	0x24006ab8
 8006290:	0007c7e0 	.word	0x0007c7e0
 8006294:	00015c60 	.word	0x00015c60
 8006298:	0001bc80 	.word	0x0001bc80
 800629c:	00018a20 	.word	0x00018a20
 80062a0:	00016590 	.word	0x00016590
 80062a4:	00011940 	.word	0x00011940
 80062a8:	00010470 	.word	0x00010470
 80062ac:	000116d0 	.word	0x000116d0
 80062b0:	0001dd00 	.word	0x0001dd00
 80062b4:	240059b8 	.word	0x240059b8
 80062b8:	00017740 	.word	0x00017740
 80062bc:	240061e8 	.word	0x240061e8
 80062c0:	24006bd4 	.word	0x24006bd4
 80062c4:	2400469c 	.word	0x2400469c
 80062c8:	24005014 	.word	0x24005014
 80062cc:	24006d94 	.word	0x24006d94
 80062d0:	24007368 	.word	0x24007368
 80062d4:	240070b0 	.word	0x240070b0
 80062d8:	24006cc4 	.word	0x24006cc4
 80062dc:	240036d4 	.word	0x240036d4
 80062e0:	240037f0 	.word	0x240037f0
 80062e4:	24006f70 	.word	0x24006f70
 80062e8:	240038e0 	.word	0x240038e0
 80062ec:	240039fc 	.word	0x240039fc
 80062f0:	24003b18 	.word	0x24003b18
 80062f4:	24003c08 	.word	0x24003c08
 80062f8:	24003d24 	.word	0x24003d24
 80062fc:	24003e40 	.word	0x24003e40
 8006300:	24006fc0 	.word	0x24006fc0
 8006304:	24003f30 	.word	0x24003f30
 8006308:	2400404c 	.word	0x2400404c
 800630c:	24004168 	.word	0x24004168
 8006310:	24007010 	.word	0x24007010
 8006314:	24004258 	.word	0x24004258
 8006318:	24004374 	.word	0x24004374
 800631c:	24004490 	.word	0x24004490
 8006320:	24004580 	.word	0x24004580
 8006324:	240047b8 	.word	0x240047b8
 8006328:	240048d4 	.word	0x240048d4
 800632c:	24007060 	.word	0x24007060
 8006330:	240049c4 	.word	0x240049c4
 8006334:	24004ae0 	.word	0x24004ae0
 8006338:	24004bfc 	.word	0x24004bfc
 800633c:	24004cec 	.word	0x24004cec
 8006340:	24004e08 	.word	0x24004e08
 8006344:	24004f24 	.word	0x24004f24
 8006348:	24007100 	.word	0x24007100
 800634c:	24005130 	.word	0x24005130
 8006350:	2400524c 	.word	0x2400524c
 8006354:	24005368 	.word	0x24005368
 8006358:	24005458 	.word	0x24005458
 800635c:	24005574 	.word	0x24005574
 8006360:	24005690 	.word	0x24005690
 8006364:	24007150 	.word	0x24007150
 8006368:	24005780 	.word	0x24005780
 800636c:	2400589c 	.word	0x2400589c
 8006370:	24005aa8 	.word	0x24005aa8
 8006374:	240071a0 	.word	0x240071a0
 8006378:	24005b98 	.word	0x24005b98
 800637c:	24005cb4 	.word	0x24005cb4
 8006380:	24005dd0 	.word	0x24005dd0
 8006384:	24005ec0 	.word	0x24005ec0
 8006388:	24005fdc 	.word	0x24005fdc
 800638c:	240060f8 	.word	0x240060f8
 8006390:	240071f0 	.word	0x240071f0
 8006394:	0007dc80 	.word	0x0007dc80
 8006398:	0007ded8 	.word	0x0007ded8
    conv2d_60_output_array.data = AI_PTR(activations + 27928);
 800639c:	4dc2      	ldr	r5, [pc, #776]	; (80066a8 <ai_network_init+0x12a8>)
    conv2d_3_scratch0_array.data = AI_PTR(activations + 515800);
 800639e:	4496      	add	lr, r2
    conv2d_62_output_array.data = AI_PTR(activations + 1904);
 80063a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    conv2d_4_scratch0_array.data = AI_PTR(activations + 509776);
 80063a2:	f8df c440 	ldr.w	ip, [pc, #1088]	; 80067e4 <ai_network_init+0x13e4>
    conv2d_60_output_array.data_start = AI_PTR(activations + 27928);
 80063a6:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_61_output_array.data = AI_PTR(activations + 60856);
 80063aa:	4fc0      	ldr	r7, [pc, #768]	; (80066ac <ai_network_init+0x12ac>)
    conv2d_4_scratch0_array.data = AI_PTR(activations + 509776);
 80063ac:	4494      	add	ip, r2
    eltwise_63_output_array.data = AI_PTR(activations + 4648);
 80063ae:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
    conv2d_61_output_array.data_start = AI_PTR(activations + 60856);
 80063b0:	e9c7 6602 	strd	r6, r6, [r7, #8]
    conv2d_62_output_array.data = AI_PTR(activations + 1904);
 80063b4:	4fbe      	ldr	r7, [pc, #760]	; (80066b0 <ai_network_init+0x12b0>)
    conv2d_62_output_array.data_start = AI_PTR(activations + 1904);
 80063b6:	e9c7 3302 	strd	r3, r3, [r7, #8]
    eltwise_63_output_array.data = AI_PTR(activations + 4648);
 80063ba:	4fbe      	ldr	r7, [pc, #760]	; (80066b4 <ai_network_init+0x12b4>)
    conv2d_66_output_array.data = AI_PTR(activations + 2464);
 80063bc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    eltwise_63_output_array.data_start = AI_PTR(activations + 4648);
 80063be:	e9c7 5502 	strd	r5, r5, [r7, #8]
    conv2d_64_output_array.data = AI_PTR(activations + 23856);
 80063c2:	4fbd      	ldr	r7, [pc, #756]	; (80066b8 <ai_network_init+0x12b8>)
    conv2d_64_output_array.data_start = AI_PTR(activations + 23856);
 80063c4:	e9c7 1102 	strd	r1, r1, [r7, #8]
    conv2d_65_output_array.data = AI_PTR(activations + 56784);
 80063c8:	9904      	ldr	r1, [sp, #16]
 80063ca:	4fbc      	ldr	r7, [pc, #752]	; (80066bc <ai_network_init+0x12bc>)
    conv2d_65_output_array.data_start = AI_PTR(activations + 56784);
 80063cc:	e9c7 1102 	strd	r1, r1, [r7, #8]
    conv2d_66_output_array.data = AI_PTR(activations + 2464);
 80063d0:	4fbb      	ldr	r7, [pc, #748]	; (80066c0 <ai_network_init+0x12c0>)
    conv2d_7_scratch0_array.data = AI_PTR(activations + 609004);
 80063d2:	49bc      	ldr	r1, [pc, #752]	; (80066c4 <ai_network_init+0x12c4>)
    conv2d_66_output_array.data_start = AI_PTR(activations + 2464);
 80063d4:	e9c7 3302 	strd	r3, r3, [r7, #8]
    conv2d_67_output_array.data = AI_PTR(activations + 0);
 80063d8:	4fbb      	ldr	r7, [pc, #748]	; (80066c8 <ai_network_init+0x12c8>)
    conv2d_7_scratch0_array.data = AI_PTR(activations + 609004);
 80063da:	4411      	add	r1, r2
    dense_69_output_array.data = AI_PTR(activations + 1280);
 80063dc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    conv2d_7_scratch0_array.data = AI_PTR(activations + 609004);
 80063de:	9104      	str	r1, [sp, #16]
    conv2d_17_scratch0_array.data = AI_PTR(activations + 12896);
 80063e0:	f243 2160 	movw	r1, #12896	; 0x3260
    conv2d_67_output_array.data_start = AI_PTR(activations + 0);
 80063e4:	e9c7 2202 	strd	r2, r2, [r7, #8]
    dense_69_output_array.data = AI_PTR(activations + 1280);
 80063e8:	4fb8      	ldr	r7, [pc, #736]	; (80066cc <ai_network_init+0x12cc>)
    conv2d_17_scratch0_array.data = AI_PTR(activations + 12896);
 80063ea:	4411      	add	r1, r2
    dense_69_output_array.data_start = AI_PTR(activations + 1280);
 80063ec:	e9c7 3302 	strd	r3, r3, [r7, #8]
    dense_70_output_array.data = AI_PTR(activations + 0);
 80063f0:	4bb7      	ldr	r3, [pc, #732]	; (80066d0 <ai_network_init+0x12d0>)
    conv2d_5_scratch0_array.data = AI_PTR(activations + 610272);
 80063f2:	4fb8      	ldr	r7, [pc, #736]	; (80066d4 <ai_network_init+0x12d4>)
    dense_70_output_array.data_start = AI_PTR(activations + 0);
 80063f4:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_67_scratch2_array.data = AI_PTR(activations + 83920);
 80063f8:	4bb7      	ldr	r3, [pc, #732]	; (80066d8 <ai_network_init+0x12d8>)
    conv2d_5_scratch0_array.data = AI_PTR(activations + 610272);
 80063fa:	4417      	add	r7, r2
    conv2d_67_scratch2_array.data = AI_PTR(activations + 83920);
 80063fc:	18d3      	adds	r3, r2, r3
 80063fe:	9314      	str	r3, [sp, #80]	; 0x50
    conv2d_13_scratch1_array.data = AI_PTR(activations + 50448);
 8006400:	464b      	mov	r3, r9
    conv2d_17_scratch1_array.data = AI_PTR(activations + 13920);
 8006402:	f243 6960 	movw	r9, #13920	; 0x3660
    conv2d_13_scratch1_array.data = AI_PTR(activations + 50448);
 8006406:	18d5      	adds	r5, r2, r3
    conv2d_17_scratch1_array.data = AI_PTR(activations + 13920);
 8006408:	464b      	mov	r3, r9
    conv2d_25_scratch1_array.data = AI_PTR(activations + 25632);
 800640a:	f246 4920 	movw	r9, #25632	; 0x6420
    conv2d_17_scratch1_array.data = AI_PTR(activations + 13920);
 800640e:	18d3      	adds	r3, r2, r3
 8006410:	9306      	str	r3, [sp, #24]
    conv2d_18_scratch1_array.data = AI_PTR(activations + 164448);
 8006412:	4bb2      	ldr	r3, [pc, #712]	; (80066dc <ai_network_init+0x12dc>)
 8006414:	18d3      	adds	r3, r2, r3
 8006416:	9307      	str	r3, [sp, #28]
    conv2d_25_scratch1_array.data = AI_PTR(activations + 25632);
 8006418:	464b      	mov	r3, r9
    conv2d_29_scratch1_array.data = AI_PTR(activations + 6864);
 800641a:	f641 29d0 	movw	r9, #6864	; 0x1ad0
    conv2d_25_scratch1_array.data = AI_PTR(activations + 25632);
 800641e:	18d3      	adds	r3, r2, r3
    conv2d_29_scratch1_array.data = AI_PTR(activations + 6864);
 8006420:	464e      	mov	r6, r9
    conv2d_30_scratch1_array.data = AI_PTR(activations + 63312);
 8006422:	f24f 7950 	movw	r9, #63312	; 0xf750
    conv2d_25_scratch1_array.data = AI_PTR(activations + 25632);
 8006426:	9308      	str	r3, [sp, #32]
    conv2d_29_scratch0_array.data = AI_PTR(activations + 5328);
 8006428:	f241 43d0 	movw	r3, #5328	; 0x14d0
    conv2d_29_scratch1_array.data = AI_PTR(activations + 6864);
 800642c:	1996      	adds	r6, r2, r6
    conv2d_29_scratch0_array.data = AI_PTR(activations + 5328);
 800642e:	4413      	add	r3, r2
    conv2d_29_scratch1_array.data = AI_PTR(activations + 6864);
 8006430:	9609      	str	r6, [sp, #36]	; 0x24
    conv2d_30_scratch1_array.data = AI_PTR(activations + 63312);
 8006432:	464e      	mov	r6, r9
    conv2d_41_scratch1_array.data = AI_PTR(activations + 14928);
 8006434:	f643 2950 	movw	r9, #14928	; 0x3a50
    conv2d_30_scratch1_array.data = AI_PTR(activations + 63312);
 8006438:	1996      	adds	r6, r2, r6
 800643a:	960a      	str	r6, [sp, #40]	; 0x28
    conv2d_41_scratch1_array.data = AI_PTR(activations + 14928);
 800643c:	464e      	mov	r6, r9
    conv2d_42_scratch1_array.data = AI_PTR(activations + 5332);
 800643e:	f241 49d4 	movw	r9, #5332	; 0x14d4
    conv2d_41_scratch1_array.data = AI_PTR(activations + 14928);
 8006442:	1996      	adds	r6, r2, r6
 8006444:	960b      	str	r6, [sp, #44]	; 0x2c
    conv2d_42_scratch1_array.data = AI_PTR(activations + 5332);
 8006446:	464e      	mov	r6, r9
    conv2d_54_scratch1_array.data = AI_PTR(activations + 7108);
 8006448:	f641 39c4 	movw	r9, #7108	; 0x1bc4
    conv2d_42_scratch1_array.data = AI_PTR(activations + 5332);
 800644c:	1996      	adds	r6, r2, r6
 800644e:	960c      	str	r6, [sp, #48]	; 0x30
    conv2d_54_scratch1_array.data = AI_PTR(activations + 7108);
 8006450:	464e      	mov	r6, r9
    conv2d_56_scratch1_array.data = AI_PTR(activations + 7656);
 8006452:	f641 59e8 	movw	r9, #7656	; 0x1de8
    conv2d_54_scratch1_array.data = AI_PTR(activations + 7108);
 8006456:	1996      	adds	r6, r2, r6
 8006458:	960d      	str	r6, [sp, #52]	; 0x34
    conv2d_56_scratch1_array.data = AI_PTR(activations + 7656);
 800645a:	464e      	mov	r6, r9
    conv2d_57_scratch1_array.data = AI_PTR(activations + 40584);
 800645c:	f649 6988 	movw	r9, #40584	; 0x9e88
    conv2d_56_scratch1_array.data = AI_PTR(activations + 7656);
 8006460:	1996      	adds	r6, r2, r6
 8006462:	960e      	str	r6, [sp, #56]	; 0x38
    conv2d_57_scratch1_array.data = AI_PTR(activations + 40584);
 8006464:	464e      	mov	r6, r9
    conv2d_61_scratch1_array.data = AI_PTR(activations + 44392);
 8006466:	f64a 5968 	movw	r9, #44392	; 0xad68
    conv2d_57_scratch1_array.data = AI_PTR(activations + 40584);
 800646a:	1996      	adds	r6, r2, r6
 800646c:	960f      	str	r6, [sp, #60]	; 0x3c
    conv2d_61_scratch1_array.data = AI_PTR(activations + 44392);
 800646e:	464e      	mov	r6, r9
    conv2d_65_scratch1_array.data = AI_PTR(activations + 40320);
 8006470:	f649 5980 	movw	r9, #40320	; 0x9d80
    conv2d_61_scratch1_array.data = AI_PTR(activations + 44392);
 8006474:	1996      	adds	r6, r2, r6
 8006476:	9610      	str	r6, [sp, #64]	; 0x40
    conv2d_65_scratch1_array.data = AI_PTR(activations + 40320);
 8006478:	464e      	mov	r6, r9
    conv2d_67_scratch0_array.data = AI_PTR(activations + 7952);
 800647a:	f641 7910 	movw	r9, #7952	; 0x1f10
    conv2d_65_scratch1_array.data = AI_PTR(activations + 40320);
 800647e:	1996      	adds	r6, r2, r6
 8006480:	9611      	str	r6, [sp, #68]	; 0x44
    conv2d_67_scratch0_array.data = AI_PTR(activations + 7952);
 8006482:	464e      	mov	r6, r9
    conv2d_67_scratch1_array.data = AI_PTR(activations + 21200);
 8006484:	f245 29d0 	movw	r9, #21200	; 0x52d0
    conv2d_67_scratch0_array.data = AI_PTR(activations + 7952);
 8006488:	1996      	adds	r6, r2, r6
 800648a:	9612      	str	r6, [sp, #72]	; 0x48
    conv2d_67_scratch1_array.data = AI_PTR(activations + 21200);
 800648c:	464e      	mov	r6, r9
    dense_70_fmt_output_array.data = AI_PTR(activations + 8);
 800648e:	f8df 9358 	ldr.w	r9, [pc, #856]	; 80067e8 <ai_network_init+0x13e8>
    conv2d_67_scratch1_array.data = AI_PTR(activations + 21200);
 8006492:	1996      	adds	r6, r2, r6
 8006494:	9613      	str	r6, [sp, #76]	; 0x4c
    dense_70_fmt_output_array.data = AI_PTR(activations + 8);
 8006496:	9e32      	ldr	r6, [sp, #200]	; 0xc8
    dense_70_fmt_output_array.data_start = AI_PTR(activations + 8);
 8006498:	e9c9 6602 	strd	r6, r6, [r9, #8]
    nl_71_output_array.data = AI_PTR(activations + 28);
 800649c:	f102 091c 	add.w	r9, r2, #28
 80064a0:	464e      	mov	r6, r9
 80064a2:	f8df 9348 	ldr.w	r9, [pc, #840]	; 80067ec <ai_network_init+0x13ec>
    nl_71_output_array.data_start = AI_PTR(activations + 28);
 80064a6:	e9c9 6602 	strd	r6, r6, [r9, #8]
    nl_71_fmt_output_array.data = AI_PTR(NULL);
 80064aa:	f8df 9344 	ldr.w	r9, [pc, #836]	; 80067f0 <ai_network_init+0x13f0>
 80064ae:	2600      	movs	r6, #0
    nl_71_fmt_output_array.data_start = AI_PTR(NULL);
 80064b0:	e9c9 6602 	strd	r6, r6, [r9, #8]
    conv2d_2_scratch0_array.data = AI_PTR(activations + 515200);
 80064b4:	f8df 933c 	ldr.w	r9, [pc, #828]	; 80067f4 <ai_network_init+0x13f4>
    conv2d_2_scratch1_array.data = AI_PTR(activations + 312688);
 80064b8:	9e05      	ldr	r6, [sp, #20]
    conv2d_2_scratch0_array.data_start = AI_PTR(activations + 515200);
 80064ba:	e9c9 8802 	strd	r8, r8, [r9, #8]
    conv2d_2_scratch1_array.data = AI_PTR(activations + 312688);
 80064be:	f8df 8338 	ldr.w	r8, [pc, #824]	; 80067f8 <ai_network_init+0x13f8>
    conv2d_2_scratch1_array.data_start = AI_PTR(activations + 312688);
 80064c2:	e9c8 6602 	strd	r6, r6, [r8, #8]
    conv2d_3_scratch0_array.data = AI_PTR(activations + 515800);
 80064c6:	f8df 8334 	ldr.w	r8, [pc, #820]	; 80067fc <ai_network_init+0x13fc>
    conv2d_3_scratch1_array.data = AI_PTR(activations + 309072);
 80064ca:	9e00      	ldr	r6, [sp, #0]
    conv2d_3_scratch0_array.data_start = AI_PTR(activations + 515800);
 80064cc:	e9c8 ee02 	strd	lr, lr, [r8, #8]
    conv2d_3_scratch1_array.data = AI_PTR(activations + 309072);
 80064d0:	f8df e32c 	ldr.w	lr, [pc, #812]	; 8006800 <ai_network_init+0x1400>
    conv2d_3_scratch1_array.data_start = AI_PTR(activations + 309072);
 80064d4:	e9ce 6602 	strd	r6, r6, [lr, #8]
    conv2d_4_scratch0_array.data = AI_PTR(activations + 509776);
 80064d8:	f8df e328 	ldr.w	lr, [pc, #808]	; 8006804 <ai_network_init+0x1404>
    conv2d_5_scratch1_array.data = AI_PTR(activations + 2736);
 80064dc:	9e01      	ldr	r6, [sp, #4]
    conv2d_4_scratch0_array.data_start = AI_PTR(activations + 509776);
 80064de:	e9ce cc02 	strd	ip, ip, [lr, #8]
    conv2d_5_scratch0_array.data = AI_PTR(activations + 610272);
 80064e2:	f8df c324 	ldr.w	ip, [pc, #804]	; 8006808 <ai_network_init+0x1408>
    conv2d_5_scratch0_array.data_start = AI_PTR(activations + 610272);
 80064e6:	e9cc 7702 	strd	r7, r7, [ip, #8]
    conv2d_5_scratch1_array.data = AI_PTR(activations + 2736);
 80064ea:	4f7d      	ldr	r7, [pc, #500]	; (80066e0 <ai_network_init+0x12e0>)
    conv2d_5_scratch1_array.data_start = AI_PTR(activations + 2736);
 80064ec:	e9c7 6602 	strd	r6, r6, [r7, #8]
    conv2d_7_scratch0_array.data = AI_PTR(activations + 609004);
 80064f0:	9e04      	ldr	r6, [sp, #16]
 80064f2:	4f7c      	ldr	r7, [pc, #496]	; (80066e4 <ai_network_init+0x12e4>)
    conv2d_7_scratch0_array.data_start = AI_PTR(activations + 609004);
 80064f4:	e9c7 6602 	strd	r6, r6, [r7, #8]
    conv2d_7_scratch1_array.data = AI_PTR(activations + 0);
 80064f8:	4e7b      	ldr	r6, [pc, #492]	; (80066e8 <ai_network_init+0x12e8>)
    conv2d_8_scratch0_array.data = AI_PTR(activations + 150528);
 80064fa:	f502 3713 	add.w	r7, r2, #150528	; 0x24c00
    conv2d_7_scratch1_array.data_start = AI_PTR(activations + 0);
 80064fe:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_8_scratch0_array.data = AI_PTR(activations + 150528);
 8006502:	4e7a      	ldr	r6, [pc, #488]	; (80066ec <ai_network_init+0x12ec>)
    conv2d_8_scratch0_array.data_start = AI_PTR(activations + 150528);
 8006504:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_9_scratch0_array.data = AI_PTR(activations + 0);
 8006508:	4e79      	ldr	r6, [pc, #484]	; (80066f0 <ai_network_init+0x12f0>)
    conv2d_9_scratch1_array.data = AI_PTR(activations + 175888);
 800650a:	9f02      	ldr	r7, [sp, #8]
    conv2d_9_scratch0_array.data_start = AI_PTR(activations + 0);
 800650c:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_9_scratch1_array.data = AI_PTR(activations + 175888);
 8006510:	4e78      	ldr	r6, [pc, #480]	; (80066f4 <ai_network_init+0x12f4>)
    conv2d_9_scratch1_array.data_start = AI_PTR(activations + 175888);
 8006512:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_10_scratch0_array.data = AI_PTR(activations + 0);
 8006516:	4e78      	ldr	r6, [pc, #480]	; (80066f8 <ai_network_init+0x12f8>)
    conv2d_10_scratch0_array.data_start = AI_PTR(activations + 0);
 8006518:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_10_scratch1_array.data = AI_PTR(activations + 175888);
 800651c:	4e77      	ldr	r6, [pc, #476]	; (80066fc <ai_network_init+0x12fc>)
    conv2d_10_scratch1_array.data_start = AI_PTR(activations + 175888);
 800651e:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_11_scratch0_array.data = AI_PTR(activations + 0);
 8006522:	4e77      	ldr	r6, [pc, #476]	; (8006700 <ai_network_init+0x1300>)
    conv2d_11_scratch0_array.data_start = AI_PTR(activations + 0);
 8006524:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_13_scratch0_array.data = AI_PTR(activations + 0);
 8006528:	4e76      	ldr	r6, [pc, #472]	; (8006704 <ai_network_init+0x1304>)
    conv2d_13_scratch0_array.data_start = AI_PTR(activations + 0);
 800652a:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_13_scratch1_array.data = AI_PTR(activations + 50448);
 800652e:	4e76      	ldr	r6, [pc, #472]	; (8006708 <ai_network_init+0x1308>)
    conv2d_13_scratch1_array.data_start = AI_PTR(activations + 50448);
 8006530:	e9c6 5502 	strd	r5, r5, [r6, #8]
    conv2d_15_scratch0_array.data = AI_PTR(activations + 0);
 8006534:	4d75      	ldr	r5, [pc, #468]	; (800670c <ai_network_init+0x130c>)
    conv2d_15_scratch1_array.data = AI_PTR(activations + 1780);
 8006536:	f202 66f4 	addw	r6, r2, #1780	; 0x6f4
    conv2d_15_scratch0_array.data_start = AI_PTR(activations + 0);
 800653a:	e9c5 2202 	strd	r2, r2, [r5, #8]
    conv2d_15_scratch1_array.data = AI_PTR(activations + 1780);
 800653e:	4d74      	ldr	r5, [pc, #464]	; (8006710 <ai_network_init+0x1310>)
    conv2d_15_scratch1_array.data_start = AI_PTR(activations + 1780);
 8006540:	e9c5 6602 	strd	r6, r6, [r5, #8]
    conv2d_16_scratch0_array.data = AI_PTR(activations + 0);
 8006544:	4d73      	ldr	r5, [pc, #460]	; (8006714 <ai_network_init+0x1314>)
    conv2d_17_scratch1_array.data = AI_PTR(activations + 13920);
 8006546:	9e06      	ldr	r6, [sp, #24]
    conv2d_16_scratch0_array.data_start = AI_PTR(activations + 0);
 8006548:	e9c5 2202 	strd	r2, r2, [r5, #8]
    conv2d_17_scratch0_array.data = AI_PTR(activations + 12896);
 800654c:	4d72      	ldr	r5, [pc, #456]	; (8006718 <ai_network_init+0x1318>)
    conv2d_17_scratch0_array.data_start = AI_PTR(activations + 12896);
 800654e:	e9c5 1102 	strd	r1, r1, [r5, #8]
    conv2d_17_scratch1_array.data = AI_PTR(activations + 13920);
 8006552:	4d72      	ldr	r5, [pc, #456]	; (800671c <ai_network_init+0x131c>)
    conv2d_17_scratch1_array.data_start = AI_PTR(activations + 13920);
 8006554:	e9c5 6602 	strd	r6, r6, [r5, #8]
    conv2d_18_scratch0_array.data = AI_PTR(activations + 12896);
 8006558:	4d71      	ldr	r5, [pc, #452]	; (8006720 <ai_network_init+0x1320>)
    conv2d_18_scratch1_array.data = AI_PTR(activations + 164448);
 800655a:	9e07      	ldr	r6, [sp, #28]
    conv2d_18_scratch0_array.data_start = AI_PTR(activations + 12896);
 800655c:	e9c5 1102 	strd	r1, r1, [r5, #8]
    conv2d_18_scratch1_array.data = AI_PTR(activations + 164448);
 8006560:	4d70      	ldr	r5, [pc, #448]	; (8006724 <ai_network_init+0x1324>)
    conv2d_18_scratch1_array.data_start = AI_PTR(activations + 164448);
 8006562:	e9c5 6602 	strd	r6, r6, [r5, #8]
    conv2d_19_scratch0_array.data = AI_PTR(activations + 12896);
 8006566:	4d70      	ldr	r5, [pc, #448]	; (8006728 <ai_network_init+0x1328>)
    conv2d_25_scratch1_array.data = AI_PTR(activations + 25632);
 8006568:	9e08      	ldr	r6, [sp, #32]
    conv2d_19_scratch0_array.data_start = AI_PTR(activations + 12896);
 800656a:	e9c5 1102 	strd	r1, r1, [r5, #8]
    conv2d_21_scratch0_array.data = AI_PTR(activations + 0);
 800656e:	496f      	ldr	r1, [pc, #444]	; (800672c <ai_network_init+0x132c>)
    conv2d_21_scratch0_array.data_start = AI_PTR(activations + 0);
 8006570:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_21_scratch1_array.data = AI_PTR(activations + 38528);
 8006574:	496e      	ldr	r1, [pc, #440]	; (8006730 <ai_network_init+0x1330>)
    conv2d_21_scratch1_array.data_start = AI_PTR(activations + 38528);
 8006576:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conv2d_22_scratch0_array.data = AI_PTR(activations + 0);
 800657a:	496e      	ldr	r1, [pc, #440]	; (8006734 <ai_network_init+0x1334>)
    conv2d_22_scratch0_array.data_start = AI_PTR(activations + 0);
 800657c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_22_scratch1_array.data = AI_PTR(activations + 38528);
 8006580:	496d      	ldr	r1, [pc, #436]	; (8006738 <ai_network_init+0x1338>)
    conv2d_22_scratch1_array.data_start = AI_PTR(activations + 38528);
 8006582:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conv2d_23_scratch0_array.data = AI_PTR(activations + 0);
 8006586:	496d      	ldr	r1, [pc, #436]	; (800673c <ai_network_init+0x133c>)
    conv2d_27_scratch1_array.data = AI_PTR(activations + 3556);
 8006588:	f602 54e4 	addw	r4, r2, #3556	; 0xde4
    conv2d_23_scratch0_array.data_start = AI_PTR(activations + 0);
 800658c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_25_scratch0_array.data = AI_PTR(activations + 0);
 8006590:	496b      	ldr	r1, [pc, #428]	; (8006740 <ai_network_init+0x1340>)
    conv2d_25_scratch0_array.data_start = AI_PTR(activations + 0);
 8006592:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_25_scratch1_array.data = AI_PTR(activations + 25632);
 8006596:	496b      	ldr	r1, [pc, #428]	; (8006744 <ai_network_init+0x1344>)
    conv2d_25_scratch1_array.data_start = AI_PTR(activations + 25632);
 8006598:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_27_scratch0_array.data = AI_PTR(activations + 0);
 800659c:	496a      	ldr	r1, [pc, #424]	; (8006748 <ai_network_init+0x1348>)
    conv2d_29_scratch1_array.data = AI_PTR(activations + 6864);
 800659e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    conv2d_27_scratch0_array.data_start = AI_PTR(activations + 0);
 80065a0:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_27_scratch1_array.data = AI_PTR(activations + 3556);
 80065a4:	4969      	ldr	r1, [pc, #420]	; (800674c <ai_network_init+0x134c>)
    conv2d_27_scratch1_array.data_start = AI_PTR(activations + 3556);
 80065a6:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conv2d_28_scratch0_array.data = AI_PTR(activations + 0);
 80065aa:	4969      	ldr	r1, [pc, #420]	; (8006750 <ai_network_init+0x1350>)
    conv2d_28_scratch0_array.data_start = AI_PTR(activations + 0);
 80065ac:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_29_scratch0_array.data = AI_PTR(activations + 5328);
 80065b0:	4968      	ldr	r1, [pc, #416]	; (8006754 <ai_network_init+0x1354>)
    conv2d_29_scratch0_array.data_start = AI_PTR(activations + 5328);
 80065b2:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_29_scratch1_array.data = AI_PTR(activations + 6864);
 80065b6:	4968      	ldr	r1, [pc, #416]	; (8006758 <ai_network_init+0x1358>)
    conv2d_29_scratch1_array.data_start = AI_PTR(activations + 6864);
 80065b8:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_30_scratch0_array.data = AI_PTR(activations + 5328);
 80065bc:	4967      	ldr	r1, [pc, #412]	; (800675c <ai_network_init+0x135c>)
    conv2d_30_scratch1_array.data = AI_PTR(activations + 63312);
 80065be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    conv2d_33_scratch1_array.data = AI_PTR(activations + 15552);
 80065c0:	9d33      	ldr	r5, [sp, #204]	; 0xcc
    conv2d_37_scratch1_array.data = AI_PTR(activations + 10224);
 80065c2:	9f03      	ldr	r7, [sp, #12]
    conv2d_30_scratch0_array.data_start = AI_PTR(activations + 5328);
 80065c4:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_30_scratch1_array.data = AI_PTR(activations + 63312);
 80065c8:	4965      	ldr	r1, [pc, #404]	; (8006760 <ai_network_init+0x1360>)
    conv2d_30_scratch1_array.data_start = AI_PTR(activations + 63312);
 80065ca:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_31_scratch0_array.data = AI_PTR(activations + 5328);
 80065ce:	4965      	ldr	r1, [pc, #404]	; (8006764 <ai_network_init+0x1364>)
    conv2d_31_scratch0_array.data_start = AI_PTR(activations + 5328);
 80065d0:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_33_scratch0_array.data = AI_PTR(activations + 0);
 80065d4:	4b64      	ldr	r3, [pc, #400]	; (8006768 <ai_network_init+0x1368>)
    conv2d_44_scratch1_array.data = AI_PTR(activations + 9216);
 80065d6:	f502 5110 	add.w	r1, r2, #9216	; 0x2400
    conv2d_33_scratch0_array.data_start = AI_PTR(activations + 0);
 80065da:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_33_scratch1_array.data = AI_PTR(activations + 15552);
 80065de:	4b63      	ldr	r3, [pc, #396]	; (800676c <ai_network_init+0x136c>)
    conv2d_33_scratch1_array.data_start = AI_PTR(activations + 15552);
 80065e0:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_34_scratch0_array.data = AI_PTR(activations + 0);
 80065e4:	4b62      	ldr	r3, [pc, #392]	; (8006770 <ai_network_init+0x1370>)
    conv2d_34_scratch0_array.data_start = AI_PTR(activations + 0);
 80065e6:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_34_scratch1_array.data = AI_PTR(activations + 15552);
 80065ea:	4b62      	ldr	r3, [pc, #392]	; (8006774 <ai_network_init+0x1374>)
    conv2d_34_scratch1_array.data_start = AI_PTR(activations + 15552);
 80065ec:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_35_scratch0_array.data = AI_PTR(activations + 0);
 80065f0:	4b61      	ldr	r3, [pc, #388]	; (8006778 <ai_network_init+0x1378>)
    conv2d_35_scratch0_array.data_start = AI_PTR(activations + 0);
 80065f2:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_37_scratch0_array.data = AI_PTR(activations + 0);
 80065f6:	4b61      	ldr	r3, [pc, #388]	; (800677c <ai_network_init+0x137c>)
    conv2d_37_scratch0_array.data_start = AI_PTR(activations + 0);
 80065f8:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_37_scratch1_array.data = AI_PTR(activations + 10224);
 80065fc:	4b60      	ldr	r3, [pc, #384]	; (8006780 <ai_network_init+0x1380>)
    conv2d_37_scratch1_array.data_start = AI_PTR(activations + 10224);
 80065fe:	e9c3 7702 	strd	r7, r7, [r3, #8]
    conv2d_38_scratch0_array.data = AI_PTR(activations + 0);
 8006602:	4b60      	ldr	r3, [pc, #384]	; (8006784 <ai_network_init+0x1384>)
    conv2d_38_scratch0_array.data_start = AI_PTR(activations + 0);
 8006604:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_38_scratch1_array.data = AI_PTR(activations + 10224);
 8006608:	4b5f      	ldr	r3, [pc, #380]	; (8006788 <ai_network_init+0x1388>)
    conv2d_38_scratch1_array.data_start = AI_PTR(activations + 10224);
 800660a:	e9c3 7702 	strd	r7, r7, [r3, #8]
    conv2d_39_scratch0_array.data = AI_PTR(activations + 0);
 800660e:	4b5f      	ldr	r3, [pc, #380]	; (800678c <ai_network_init+0x138c>)
    conv2d_41_scratch1_array.data = AI_PTR(activations + 14928);
 8006610:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    conv2d_39_scratch0_array.data_start = AI_PTR(activations + 0);
 8006612:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_41_scratch0_array.data = AI_PTR(activations + 0);
 8006616:	4b5e      	ldr	r3, [pc, #376]	; (8006790 <ai_network_init+0x1390>)
    conv2d_41_scratch0_array.data_start = AI_PTR(activations + 0);
 8006618:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_41_scratch1_array.data = AI_PTR(activations + 14928);
 800661c:	4b5d      	ldr	r3, [pc, #372]	; (8006794 <ai_network_init+0x1394>)
    conv2d_41_scratch1_array.data_start = AI_PTR(activations + 14928);
 800661e:	e9c3 7702 	strd	r7, r7, [r3, #8]
    conv2d_42_scratch0_array.data = AI_PTR(activations + 0);
 8006622:	4b5d      	ldr	r3, [pc, #372]	; (8006798 <ai_network_init+0x1398>)
    conv2d_42_scratch1_array.data = AI_PTR(activations + 5332);
 8006624:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    conv2d_44_scratch0_array.data = AI_PTR(activations + 7168);
 8006626:	9c34      	ldr	r4, [sp, #208]	; 0xd0
    conv2d_42_scratch0_array.data_start = AI_PTR(activations + 0);
 8006628:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_42_scratch1_array.data = AI_PTR(activations + 5332);
 800662c:	4b5b      	ldr	r3, [pc, #364]	; (800679c <ai_network_init+0x139c>)
    conv2d_42_scratch1_array.data_start = AI_PTR(activations + 5332);
 800662e:	e9c3 7702 	strd	r7, r7, [r3, #8]
    conv2d_43_scratch0_array.data = AI_PTR(activations + 0);
 8006632:	4b5b      	ldr	r3, [pc, #364]	; (80067a0 <ai_network_init+0x13a0>)
    conv2d_43_scratch0_array.data_start = AI_PTR(activations + 0);
 8006634:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_44_scratch0_array.data = AI_PTR(activations + 7168);
 8006638:	4b5a      	ldr	r3, [pc, #360]	; (80067a4 <ai_network_init+0x13a4>)
    conv2d_44_scratch0_array.data_start = AI_PTR(activations + 7168);
 800663a:	e9c3 4402 	strd	r4, r4, [r3, #8]
    conv2d_44_scratch1_array.data = AI_PTR(activations + 9216);
 800663e:	4b5a      	ldr	r3, [pc, #360]	; (80067a8 <ai_network_init+0x13a8>)
    conv2d_44_scratch1_array.data_start = AI_PTR(activations + 9216);
 8006640:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_45_scratch0_array.data = AI_PTR(activations + 7168);
 8006644:	4b59      	ldr	r3, [pc, #356]	; (80067ac <ai_network_init+0x13ac>)
    conv2d_45_scratch1_array.data = AI_PTR(activations + 84480);
 8006646:	f502 31a5 	add.w	r1, r2, #84480	; 0x14a00
    conv2d_45_scratch0_array.data_start = AI_PTR(activations + 7168);
 800664a:	e9c3 4402 	strd	r4, r4, [r3, #8]
    conv2d_45_scratch1_array.data = AI_PTR(activations + 84480);
 800664e:	4b58      	ldr	r3, [pc, #352]	; (80067b0 <ai_network_init+0x13b0>)
    conv2d_45_scratch1_array.data_start = AI_PTR(activations + 84480);
 8006650:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_46_scratch0_array.data = AI_PTR(activations + 7168);
 8006654:	4b57      	ldr	r3, [pc, #348]	; (80067b4 <ai_network_init+0x13b4>)
    conv2d_52_scratch1_array.data = AI_PTR(activations + 13632);
 8006656:	f502 5155 	add.w	r1, r2, #13632	; 0x3540
    conv2d_46_scratch0_array.data_start = AI_PTR(activations + 7168);
 800665a:	e9c3 4402 	strd	r4, r4, [r3, #8]
    conv2d_48_scratch0_array.data = AI_PTR(activations + 0);
 800665e:	4b56      	ldr	r3, [pc, #344]	; (80067b8 <ai_network_init+0x13b8>)
    conv2d_48_scratch0_array.data_start = AI_PTR(activations + 0);
 8006660:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_48_scratch1_array.data = AI_PTR(activations + 20800);
 8006664:	4b55      	ldr	r3, [pc, #340]	; (80067bc <ai_network_init+0x13bc>)
    conv2d_48_scratch1_array.data_start = AI_PTR(activations + 20800);
 8006666:	e9c3 bb02 	strd	fp, fp, [r3, #8]
    conv2d_49_scratch0_array.data = AI_PTR(activations + 0);
 800666a:	4b55      	ldr	r3, [pc, #340]	; (80067c0 <ai_network_init+0x13c0>)
    conv2d_49_scratch0_array.data_start = AI_PTR(activations + 0);
 800666c:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_49_scratch1_array.data = AI_PTR(activations + 20800);
 8006670:	4b54      	ldr	r3, [pc, #336]	; (80067c4 <ai_network_init+0x13c4>)
    conv2d_49_scratch1_array.data_start = AI_PTR(activations + 20800);
 8006672:	e9c3 bb02 	strd	fp, fp, [r3, #8]
    conv2d_50_scratch0_array.data = AI_PTR(activations + 0);
 8006676:	4b54      	ldr	r3, [pc, #336]	; (80067c8 <ai_network_init+0x13c8>)
    conv2d_50_scratch0_array.data_start = AI_PTR(activations + 0);
 8006678:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_52_scratch0_array.data = AI_PTR(activations + 0);
 800667c:	4b53      	ldr	r3, [pc, #332]	; (80067cc <ai_network_init+0x13cc>)
    conv2d_52_scratch0_array.data_start = AI_PTR(activations + 0);
 800667e:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_52_scratch1_array.data = AI_PTR(activations + 13632);
 8006682:	4b53      	ldr	r3, [pc, #332]	; (80067d0 <ai_network_init+0x13d0>)
    conv2d_52_scratch1_array.data_start = AI_PTR(activations + 13632);
 8006684:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_54_scratch0_array.data = AI_PTR(activations + 0);
 8006688:	4b52      	ldr	r3, [pc, #328]	; (80067d4 <ai_network_init+0x13d4>)
    conv2d_54_scratch1_array.data = AI_PTR(activations + 7108);
 800668a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    conv2d_56_scratch0_array.data = AI_PTR(activations + 4072);
 800668c:	9935      	ldr	r1, [sp, #212]	; 0xd4
    conv2d_56_scratch1_array.data = AI_PTR(activations + 7656);
 800668e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    conv2d_54_scratch0_array.data_start = AI_PTR(activations + 0);
 8006690:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_54_scratch1_array.data = AI_PTR(activations + 7108);
 8006694:	4b50      	ldr	r3, [pc, #320]	; (80067d8 <ai_network_init+0x13d8>)
    conv2d_54_scratch1_array.data_start = AI_PTR(activations + 7108);
 8006696:	e9c3 4402 	strd	r4, r4, [r3, #8]
    conv2d_55_scratch0_array.data = AI_PTR(activations + 0);
 800669a:	4b50      	ldr	r3, [pc, #320]	; (80067dc <ai_network_init+0x13dc>)
    conv2d_55_scratch0_array.data_start = AI_PTR(activations + 0);
 800669c:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_56_scratch0_array.data = AI_PTR(activations + 4072);
 80066a0:	4b4f      	ldr	r3, [pc, #316]	; (80067e0 <ai_network_init+0x13e0>)
    conv2d_56_scratch0_array.data_start = AI_PTR(activations + 4072);
 80066a2:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80066a6:	e0b1      	b.n	800680c <ai_network_init+0x140c>
 80066a8:	24006304 	.word	0x24006304
 80066ac:	24006420 	.word	0x24006420
 80066b0:	2400653c 	.word	0x2400653c
 80066b4:	24007240 	.word	0x24007240
 80066b8:	2400662c 	.word	0x2400662c
 80066bc:	24006748 	.word	0x24006748
 80066c0:	24006864 	.word	0x24006864
 80066c4:	00094aec 	.word	0x00094aec
 80066c8:	24006970 	.word	0x24006970
 80066cc:	24006e08 	.word	0x24006e08
 80066d0:	24006ef4 	.word	0x24006ef4
 80066d4:	00094fe0 	.word	0x00094fe0
 80066d8:	000147d0 	.word	0x000147d0
 80066dc:	00028260 	.word	0x00028260
 80066e0:	24006240 	.word	0x24006240
 80066e4:	24006ae4 	.word	0x24006ae4
 80066e8:	24006b10 	.word	0x24006b10
 80066ec:	24006c00 	.word	0x24006c00
 80066f0:	24006cf0 	.word	0x24006cf0
 80066f4:	24006d1c 	.word	0x24006d1c
 80066f8:	24003700 	.word	0x24003700
 80066fc:	2400372c 	.word	0x2400372c
 8006700:	2400381c 	.word	0x2400381c
 8006704:	2400390c 	.word	0x2400390c
 8006708:	24003938 	.word	0x24003938
 800670c:	24003a28 	.word	0x24003a28
 8006710:	24003a54 	.word	0x24003a54
 8006714:	24003b44 	.word	0x24003b44
 8006718:	24003c34 	.word	0x24003c34
 800671c:	24003c60 	.word	0x24003c60
 8006720:	24003d50 	.word	0x24003d50
 8006724:	24003d7c 	.word	0x24003d7c
 8006728:	24003e6c 	.word	0x24003e6c
 800672c:	24003f5c 	.word	0x24003f5c
 8006730:	24003f88 	.word	0x24003f88
 8006734:	24004078 	.word	0x24004078
 8006738:	240040a4 	.word	0x240040a4
 800673c:	24004194 	.word	0x24004194
 8006740:	24004284 	.word	0x24004284
 8006744:	240042b0 	.word	0x240042b0
 8006748:	240043a0 	.word	0x240043a0
 800674c:	240043cc 	.word	0x240043cc
 8006750:	240044bc 	.word	0x240044bc
 8006754:	240045ac 	.word	0x240045ac
 8006758:	240045d8 	.word	0x240045d8
 800675c:	240047e4 	.word	0x240047e4
 8006760:	24004810 	.word	0x24004810
 8006764:	24004900 	.word	0x24004900
 8006768:	240049f0 	.word	0x240049f0
 800676c:	24004a1c 	.word	0x24004a1c
 8006770:	24004b0c 	.word	0x24004b0c
 8006774:	24004b38 	.word	0x24004b38
 8006778:	24004c28 	.word	0x24004c28
 800677c:	24004d18 	.word	0x24004d18
 8006780:	24004d44 	.word	0x24004d44
 8006784:	24004e34 	.word	0x24004e34
 8006788:	24004e60 	.word	0x24004e60
 800678c:	24004f50 	.word	0x24004f50
 8006790:	2400515c 	.word	0x2400515c
 8006794:	24005188 	.word	0x24005188
 8006798:	24005278 	.word	0x24005278
 800679c:	240052a4 	.word	0x240052a4
 80067a0:	24005394 	.word	0x24005394
 80067a4:	24005484 	.word	0x24005484
 80067a8:	240054b0 	.word	0x240054b0
 80067ac:	240055a0 	.word	0x240055a0
 80067b0:	240055cc 	.word	0x240055cc
 80067b4:	240056bc 	.word	0x240056bc
 80067b8:	240057ac 	.word	0x240057ac
 80067bc:	240057d8 	.word	0x240057d8
 80067c0:	240058c8 	.word	0x240058c8
 80067c4:	240058f4 	.word	0x240058f4
 80067c8:	24005ad4 	.word	0x24005ad4
 80067cc:	24005bc4 	.word	0x24005bc4
 80067d0:	24005bf0 	.word	0x24005bf0
 80067d4:	24005ce0 	.word	0x24005ce0
 80067d8:	24005d0c 	.word	0x24005d0c
 80067dc:	24005dfc 	.word	0x24005dfc
 80067e0:	24005eec 	.word	0x24005eec
 80067e4:	0007c750 	.word	0x0007c750
 80067e8:	24006eac 	.word	0x24006eac
 80067ec:	2400733c 	.word	0x2400733c
 80067f0:	240072f0 	.word	0x240072f0
 80067f4:	240046c8 	.word	0x240046c8
 80067f8:	240046f4 	.word	0x240046f4
 80067fc:	24005040 	.word	0x24005040
 8006800:	2400506c 	.word	0x2400506c
 8006804:	240059e4 	.word	0x240059e4
 8006808:	24006214 	.word	0x24006214
    conv2d_56_scratch1_array.data = AI_PTR(activations + 7656);
 800680c:	4b21      	ldr	r3, [pc, #132]	; (8006894 <ai_network_init+0x1494>)
    conv2d_56_scratch1_array.data_start = AI_PTR(activations + 7656);
 800680e:	e9c3 6602 	strd	r6, r6, [r3, #8]
    conv2d_57_scratch0_array.data = AI_PTR(activations + 4072);
 8006812:	4b21      	ldr	r3, [pc, #132]	; (8006898 <ai_network_init+0x1498>)
    conv2d_57_scratch1_array.data = AI_PTR(activations + 40584);
 8006814:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    conv2d_57_scratch0_array.data_start = AI_PTR(activations + 4072);
 8006816:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_57_scratch1_array.data = AI_PTR(activations + 40584);
 800681a:	4b20      	ldr	r3, [pc, #128]	; (800689c <ai_network_init+0x149c>)
    conv2d_57_scratch1_array.data_start = AI_PTR(activations + 40584);
 800681c:	e9c3 6602 	strd	r6, r6, [r3, #8]
    conv2d_58_scratch0_array.data = AI_PTR(activations + 4072);
 8006820:	4b1f      	ldr	r3, [pc, #124]	; (80068a0 <ai_network_init+0x14a0>)
    conv2d_61_scratch1_array.data = AI_PTR(activations + 44392);
 8006822:	9e10      	ldr	r6, [sp, #64]	; 0x40
    conv2d_58_scratch0_array.data_start = AI_PTR(activations + 4072);
 8006824:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_60_scratch0_array.data = AI_PTR(activations + 0);
 8006828:	4b1e      	ldr	r3, [pc, #120]	; (80068a4 <ai_network_init+0x14a4>)
    conv2d_64_scratch1_array.data = AI_PTR(activations + 7392);
 800682a:	f502 51e7 	add.w	r1, r2, #7392	; 0x1ce0
    conv2d_60_scratch0_array.data_start = AI_PTR(activations + 0);
 800682e:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_60_scratch1_array.data = AI_PTR(activations + 11464);
 8006832:	4b1d      	ldr	r3, [pc, #116]	; (80068a8 <ai_network_init+0x14a8>)
    conv2d_60_scratch1_array.data_start = AI_PTR(activations + 11464);
 8006834:	e9c3 aa02 	strd	sl, sl, [r3, #8]
    conv2d_61_scratch0_array.data = AI_PTR(activations + 11464);
 8006838:	4b1c      	ldr	r3, [pc, #112]	; (80068ac <ai_network_init+0x14ac>)
    conv2d_61_scratch0_array.data_start = AI_PTR(activations + 11464);
 800683a:	e9c3 aa02 	strd	sl, sl, [r3, #8]
    conv2d_61_scratch1_array.data = AI_PTR(activations + 44392);
 800683e:	4b1c      	ldr	r3, [pc, #112]	; (80068b0 <ai_network_init+0x14b0>)
    conv2d_61_scratch1_array.data_start = AI_PTR(activations + 44392);
 8006840:	e9c3 6602 	strd	r6, r6, [r3, #8]
    conv2d_62_scratch0_array.data = AI_PTR(activations + 0);
 8006844:	4b1b      	ldr	r3, [pc, #108]	; (80068b4 <ai_network_init+0x14b4>)
    conv2d_62_scratch0_array.data_start = AI_PTR(activations + 0);
 8006846:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_64_scratch0_array.data = AI_PTR(activations + 0);
 800684a:	4b1b      	ldr	r3, [pc, #108]	; (80068b8 <ai_network_init+0x14b8>)
    conv2d_64_scratch0_array.data_start = AI_PTR(activations + 0);
 800684c:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_64_scratch1_array.data = AI_PTR(activations + 7392);
 8006850:	4b1a      	ldr	r3, [pc, #104]	; (80068bc <ai_network_init+0x14bc>)
    conv2d_65_scratch1_array.data = AI_PTR(activations + 40320);
 8006852:	9e11      	ldr	r6, [sp, #68]	; 0x44
    conv2d_64_scratch1_array.data_start = AI_PTR(activations + 7392);
 8006854:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv2d_65_scratch0_array.data = AI_PTR(activations + 0);
 8006858:	4b19      	ldr	r3, [pc, #100]	; (80068c0 <ai_network_init+0x14c0>)
    conv2d_65_scratch0_array.data_start = AI_PTR(activations + 0);
 800685a:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_65_scratch1_array.data = AI_PTR(activations + 40320);
 800685e:	4b19      	ldr	r3, [pc, #100]	; (80068c4 <ai_network_init+0x14c4>)
    conv2d_65_scratch1_array.data_start = AI_PTR(activations + 40320);
 8006860:	e9c3 6602 	strd	r6, r6, [r3, #8]
    conv2d_66_scratch0_array.data = AI_PTR(activations + 0);
 8006864:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <ai_network_init+0x14c8>)
    conv2d_67_scratch0_array.data = AI_PTR(activations + 7952);
 8006866:	9e12      	ldr	r6, [sp, #72]	; 0x48
    conv2d_66_scratch0_array.data_start = AI_PTR(activations + 0);
 8006868:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_67_scratch0_array.data = AI_PTR(activations + 7952);
 800686c:	4b17      	ldr	r3, [pc, #92]	; (80068cc <ai_network_init+0x14cc>)
    conv2d_67_scratch1_array.data = AI_PTR(activations + 21200);
 800686e:	4a18      	ldr	r2, [pc, #96]	; (80068d0 <ai_network_init+0x14d0>)
    conv2d_67_scratch0_array.data_start = AI_PTR(activations + 7952);
 8006870:	e9c3 6602 	strd	r6, r6, [r3, #8]
    conv2d_67_scratch1_array.data = AI_PTR(activations + 21200);
 8006874:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    conv2d_67_scratch2_array.data = AI_PTR(activations + 83920);
 8006876:	4b17      	ldr	r3, [pc, #92]	; (80068d4 <ai_network_init+0x14d4>)
    conv2d_67_scratch1_array.data_start = AI_PTR(activations + 21200);
 8006878:	e9c2 6602 	strd	r6, r6, [r2, #8]
    conv2d_67_scratch2_array.data = AI_PTR(activations + 83920);
 800687c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    conv2d_67_scratch2_array.data_start = AI_PTR(activations + 83920);
 800687e:	e9c3 2202 	strd	r2, r2, [r3, #8]

  return ok;
}
 8006882:	b037      	add	sp, #220	; 0xdc
 8006884:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ok &= ai_platform_network_post_init(network);
 8006888:	f017 b9ce 	b.w	801dc28 <ai_platform_network_post_init>
}
 800688c:	b037      	add	sp, #220	; 0xdc
 800688e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006892:	bf00      	nop
 8006894:	24005f18 	.word	0x24005f18
 8006898:	24006008 	.word	0x24006008
 800689c:	24006034 	.word	0x24006034
 80068a0:	24006124 	.word	0x24006124
 80068a4:	24006330 	.word	0x24006330
 80068a8:	2400635c 	.word	0x2400635c
 80068ac:	2400644c 	.word	0x2400644c
 80068b0:	24006478 	.word	0x24006478
 80068b4:	24006568 	.word	0x24006568
 80068b8:	24006658 	.word	0x24006658
 80068bc:	24006684 	.word	0x24006684
 80068c0:	24006774 	.word	0x24006774
 80068c4:	240067a0 	.word	0x240067a0
 80068c8:	24006890 	.word	0x24006890
 80068cc:	2400699c 	.word	0x2400699c
 80068d0:	240069c8 	.word	0x240069c8
 80068d4:	240069f4 	.word	0x240069f4

080068d8 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80068d8:	f017 ba54 	b.w	801dd84 <ai_platform_network_process>

080068dc <ai_network_data_weights_get>:
    0xdc, 0xea, 0x0a, 0x18, 0xe8, 0xcd, 0x30, 0xf6, 0x3b, 0xd9,
    0xff, 0xcc, 0x30, 0xdd, 0xd0, 0x1b, 0x0f, 0xef, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  };
  return AI_HANDLE_PTR(s_network_weights);
}
 80068dc:	4800      	ldr	r0, [pc, #0]	; (80068e0 <ai_network_data_weights_get+0x4>)
 80068de:	4770      	bx	lr
 80068e0:	0803bae0 	.word	0x0803bae0

080068e4 <SD_initialize>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  Stat = STA_NOINIT;
 80068e4:	2301      	movs	r3, #1
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 80068e6:	2000      	movs	r0, #0
{
 80068e8:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80068ea:	4c07      	ldr	r4, [pc, #28]	; (8006908 <SD_initialize+0x24>)
 80068ec:	7023      	strb	r3, [r4, #0]
  Stat = STA_NOINIT;
 80068ee:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 80068f0:	f007 f812 	bl	800d918 <BSP_SD_GetCardState>
 80068f4:	b918      	cbnz	r0, 80068fe <SD_initialize+0x1a>
    Stat &= ~STA_NOINIT;
 80068f6:	7823      	ldrb	r3, [r4, #0]
 80068f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80068fc:	7023      	strb	r3, [r4, #0]
  return Stat;
 80068fe:	7823      	ldrb	r3, [r4, #0]
 8006900:	b2db      	uxtb	r3, r3
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 8006902:	7023      	strb	r3, [r4, #0]
#endif
  return Stat;
 8006904:	7820      	ldrb	r0, [r4, #0]
}
 8006906:	bd10      	pop	{r4, pc}
 8006908:	24007378 	.word	0x24007378

0800690c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800690c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800690e:	2301      	movs	r3, #1
 8006910:	4c05      	ldr	r4, [pc, #20]	; (8006928 <SD_status+0x1c>)
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8006912:	2000      	movs	r0, #0
  Stat = STA_NOINIT;
 8006914:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8006916:	f006 ffff 	bl	800d918 <BSP_SD_GetCardState>
 800691a:	b918      	cbnz	r0, 8006924 <SD_status+0x18>
    Stat &= ~STA_NOINIT;
 800691c:	7823      	ldrb	r3, [r4, #0]
 800691e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006922:	7023      	strb	r3, [r4, #0]
  return Stat;
 8006924:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8006926:	bd10      	pop	{r4, pc}
 8006928:	24007378 	.word	0x24007378

0800692c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800692c:	b508      	push	{r3, lr}
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks(0, (uint32_t*)buff,
 800692e:	2000      	movs	r0, #0
 8006930:	f006 ffc6 	bl	800d8c0 <BSP_SD_ReadBlocks>
 8006934:	b108      	cbz	r0, 800693a <SD_read+0xe>
  DRESULT res = RES_ERROR;
 8006936:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 8006938:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 800693a:	2000      	movs	r0, #0
 800693c:	f006 ffec 	bl	800d918 <BSP_SD_GetCardState>
 8006940:	2800      	cmp	r0, #0
 8006942:	d0f9      	beq.n	8006938 <SD_read+0xc>
 8006944:	2000      	movs	r0, #0
 8006946:	f006 ffe7 	bl	800d918 <BSP_SD_GetCardState>
 800694a:	2800      	cmp	r0, #0
 800694c:	d1f5      	bne.n	800693a <SD_read+0xe>
 800694e:	e7f3      	b.n	8006938 <SD_read+0xc>

08006950 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006950:	4b19      	ldr	r3, [pc, #100]	; (80069b8 <SD_ioctl+0x68>)
{
 8006952:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006954:	7818      	ldrb	r0, [r3, #0]
{
 8006956:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006958:	f010 0401 	ands.w	r4, r0, #1
 800695c:	d106      	bne.n	800696c <SD_ioctl+0x1c>
 800695e:	4615      	mov	r5, r2

  switch (cmd)
 8006960:	2903      	cmp	r1, #3
 8006962:	d827      	bhi.n	80069b4 <SD_ioctl+0x64>
 8006964:	e8df f001 	tbb	[pc, r1]
 8006968:	1c130a06 	.word	0x1c130a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800696c:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800696e:	4620      	mov	r0, r4
 8006970:	b00b      	add	sp, #44	; 0x2c
 8006972:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 8006974:	460c      	mov	r4, r1
}
 8006976:	4620      	mov	r0, r4
 8006978:	b00b      	add	sp, #44	; 0x2c
 800697a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 800697c:	a901      	add	r1, sp, #4
 800697e:	2000      	movs	r0, #0
 8006980:	f006 ffd6 	bl	800d930 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006984:	9b07      	ldr	r3, [sp, #28]
}
 8006986:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006988:	602b      	str	r3, [r5, #0]
}
 800698a:	b00b      	add	sp, #44	; 0x2c
 800698c:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 800698e:	a901      	add	r1, sp, #4
 8006990:	2000      	movs	r0, #0
 8006992:	f006 ffcd 	bl	800d930 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006996:	9b08      	ldr	r3, [sp, #32]
}
 8006998:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800699a:	802b      	strh	r3, [r5, #0]
}
 800699c:	b00b      	add	sp, #44	; 0x2c
 800699e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 80069a0:	a901      	add	r1, sp, #4
 80069a2:	2000      	movs	r0, #0
 80069a4:	f006 ffc4 	bl	800d930 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80069a8:	9b08      	ldr	r3, [sp, #32]
}
 80069aa:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80069ac:	0a5b      	lsrs	r3, r3, #9
 80069ae:	602b      	str	r3, [r5, #0]
}
 80069b0:	b00b      	add	sp, #44	; 0x2c
 80069b2:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 80069b4:	2404      	movs	r4, #4
 80069b6:	e7da      	b.n	800696e <SD_ioctl+0x1e>
 80069b8:	24007378 	.word	0x24007378

080069bc <SD_write>:
{
 80069bc:	b508      	push	{r3, lr}
  if(BSP_SD_WriteBlocks(0, (uint32_t*)buff,
 80069be:	2000      	movs	r0, #0
 80069c0:	f006 ff94 	bl	800d8ec <BSP_SD_WriteBlocks>
 80069c4:	b108      	cbz	r0, 80069ca <SD_write+0xe>
  DRESULT res = RES_ERROR;
 80069c6:	2001      	movs	r0, #1
}
 80069c8:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 80069ca:	2000      	movs	r0, #0
 80069cc:	f006 ffa4 	bl	800d918 <BSP_SD_GetCardState>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d0f9      	beq.n	80069c8 <SD_write+0xc>
 80069d4:	2000      	movs	r0, #0
 80069d6:	f006 ff9f 	bl	800d918 <BSP_SD_GetCardState>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d1f5      	bne.n	80069ca <SD_write+0xe>
 80069de:	e7f3      	b.n	80069c8 <SD_write+0xc>

080069e0 <HAL_MspInit>:
/**
 * @brief  Initializes the Global MSP.
 * @param  None
 * @retval None
 */
void HAL_MspInit(void) {}
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop

080069e4 <HAL_RNG_MspInit>:
 *           - Peripheral's clock enable
 * @param hrng: RNG handle pointer
 * @retval None
 */
void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 80069e4:	b500      	push	{lr}
 80069e6:	b0b3      	sub	sp, #204	; 0xcc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  /*Select PLL output as RNG clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80069e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 80069ec:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80069f0:	a802      	add	r0, sp, #8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80069f2:	9202      	str	r2, [sp, #8]
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 80069f4:	9322      	str	r3, [sp, #136]	; 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80069f6:	f00c f903 	bl	8012c00 <HAL_RCCEx_PeriphCLKConfig>

  /* RNG Peripheral clock enable */
  __HAL_RCC_RNG_CLK_ENABLE();
 80069fa:	4b08      	ldr	r3, [pc, #32]	; (8006a1c <HAL_RNG_MspInit+0x38>)
 80069fc:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8006a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a04:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006a08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a10:	9301      	str	r3, [sp, #4]
 8006a12:	9b01      	ldr	r3, [sp, #4]
}
 8006a14:	b033      	add	sp, #204	; 0xcc
 8006a16:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a1a:	bf00      	nop
 8006a1c:	58024400 	.word	0x58024400

08006a20 <HAL_RNG_MspDeInit>:
 * @retval None
 */
void HAL_RNG_MspDeInit(RNG_HandleTypeDef *hrng)
{
  /* Enable RNG reset state */
  __HAL_RCC_RNG_FORCE_RESET();
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <HAL_RNG_MspDeInit+0x1c>)
 8006a22:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Release RNG from reset state */
  __HAL_RCC_RNG_RELEASE_RESET();
 8006a2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006a3a:	4770      	bx	lr
 8006a3c:	58024400 	.word	0x58024400

08006a40 <HAL_UART_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8006a44:	4d52      	ldr	r5, [pc, #328]	; (8006b90 <HAL_UART_MspInit+0x150>)
  USARTx_RX_GPIO_CLK_ENABLE();

  /* Select SysClk as source of USART1 clocks */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 8006a46:	f04f 0801 	mov.w	r8, #1
{
 8006a4a:	b0bb      	sub	sp, #236	; 0xec
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006a4c:	2400      	movs	r4, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 8006a4e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
{
 8006a52:	4607      	mov	r7, r0
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8006a54:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8006a56:	f44f 6980 	mov.w	r9, #1024	; 0x400
  USARTx_TX_GPIO_CLK_ENABLE();
 8006a5a:	ea43 0308 	orr.w	r3, r3, r8

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);

  /*##-3- Configure the DMA ##################################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 8006a5e:	4e4d      	ldr	r6, [pc, #308]	; (8006b94 <HAL_UART_MspInit+0x154>)
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_tx.Init.Mode                = DMA_NORMAL;
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 8006a60:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006a64:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
  USARTx_TX_GPIO_CLK_ENABLE();
 8006a68:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8006a6c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8006a70:	ea03 0308 	and.w	r3, r3, r8
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	9b00      	ldr	r3, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 8006a78:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8006a7c:	ea43 0308 	orr.w	r3, r3, r8
 8006a80:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8006a84:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 8006a88:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  USARTx_RX_GPIO_CLK_ENABLE();
 8006a8c:	ea03 0308 	and.w	r3, r3, r8
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006a90:	9429      	str	r4, [sp, #164]	; 0xa4
  USARTx_RX_GPIO_CLK_ENABLE();
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	9b01      	ldr	r3, [sp, #4]
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8006a96:	f00c f8b3 	bl	8012c00 <HAL_RCCEx_PeriphCLKConfig>
  USARTx_CLK_ENABLE();
 8006a9a:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8006a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006aa2:	483d      	ldr	r0, [pc, #244]	; (8006b98 <HAL_UART_MspInit+0x158>)
  USARTx_CLK_ENABLE();
 8006aa4:	f043 0310 	orr.w	r3, r3, #16
 8006aa8:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 8006aac:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 8006ab0:	f003 0310 	and.w	r3, r3, #16
 8006ab4:	9302      	str	r3, [sp, #8]
 8006ab6:	9b02      	ldr	r3, [sp, #8]
  DMAx_CLK_ENABLE();
 8006ab8:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 8006abc:	ea43 0308 	orr.w	r3, r3, r8
 8006ac0:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 8006ac4:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8006ac8:	2507      	movs	r5, #7
  DMAx_CLK_ENABLE();
 8006aca:	ea03 0308 	and.w	r3, r3, r8
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8006ace:	9508      	str	r5, [sp, #32]
  DMAx_CLK_ENABLE();
 8006ad0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8006ad2:	2302      	movs	r3, #2
  DMAx_CLK_ENABLE();
 8006ad4:	9903      	ldr	r1, [sp, #12]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006ad6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8006ad8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006adc:	2201      	movs	r2, #1
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006ae4:	f009 fc64 	bl	80103b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8006ae8:	a904      	add	r1, sp, #16
 8006aea:	482b      	ldr	r0, [pc, #172]	; (8006b98 <HAL_UART_MspInit+0x158>)
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8006aec:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8006aee:	f8cd 9010 	str.w	r9, [sp, #16]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8006af2:	f009 fc5d 	bl	80103b0 <HAL_GPIO_Init>
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 8006af6:	2303      	movs	r3, #3
  hdma_tx.Init.Request             = USARTx_TX_DMA_CHANNEL;
 8006af8:	222a      	movs	r2, #42	; 0x2a

  HAL_DMA_Init(&hdma_tx);
 8006afa:	4630      	mov	r0, r6

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);

  /* Configure the DMA handler for reception process */
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 8006afc:	4d27      	ldr	r5, [pc, #156]	; (8006b9c <HAL_UART_MspInit+0x15c>)
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8006afe:	6274      	str	r4, [r6, #36]	; 0x24
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006b00:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 8006b04:	e9c6 3b0a 	strd	r3, fp, [r6, #40]	; 0x28
  hdma_tx.Init.Request             = USARTx_TX_DMA_CHANNEL;
 8006b08:	4b25      	ldr	r3, [pc, #148]	; (8006ba0 <HAL_UART_MspInit+0x160>)
 8006b0a:	e9c6 3200 	strd	r3, r2, [r6]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8006b0e:	2240      	movs	r2, #64	; 0x40
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8006b10:	e9c6 4903 	strd	r4, r9, [r6, #12]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8006b14:	60b2      	str	r2, [r6, #8]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8006b16:	e9c6 4405 	strd	r4, r4, [r6, #20]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8006b1a:	e9c6 4407 	strd	r4, r4, [r6, #28]
  HAL_DMA_Init(&hdma_tx);
 8006b1e:	f007 fb0b 	bl	800e138 <HAL_DMA_Init>
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_rx.Init.Mode                = DMA_NORMAL;
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006b22:	2303      	movs	r3, #3
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;

  HAL_DMA_Init(&hdma_rx);
 8006b24:	4628      	mov	r0, r5
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8006b26:	677e      	str	r6, [r7, #116]	; 0x74
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8006b28:	f8c5 9010 	str.w	r9, [r5, #16]
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006b2c:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8006b30:	63b7      	str	r7, [r6, #56]	; 0x38
  hdma_rx.Init.Mode                = DMA_NORMAL;
 8006b32:	61ec      	str	r4, [r5, #28]
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 8006b34:	e9c5 3b0a 	strd	r3, fp, [r5, #40]	; 0x28
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 8006b38:	4b1a      	ldr	r3, [pc, #104]	; (8006ba4 <HAL_UART_MspInit+0x164>)
 8006b3a:	602b      	str	r3, [r5, #0]
  hdma_rx.Init.Request             = USARTx_RX_DMA_CHANNEL;
 8006b3c:	2329      	movs	r3, #41	; 0x29
 8006b3e:	606b      	str	r3, [r5, #4]
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006b44:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006b48:	e9c5 3408 	strd	r3, r4, [r5, #32]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8006b4c:	e9c5 4405 	strd	r4, r4, [r5, #20]
  HAL_DMA_Init(&hdma_rx);
 8006b50:	f007 faf2 	bl	800e138 <HAL_DMA_Init>
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8006b54:	4642      	mov	r2, r8
 8006b56:	4621      	mov	r1, r4
 8006b58:	202f      	movs	r0, #47	; 0x2f
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8006b5a:	67bd      	str	r5, [r7, #120]	; 0x78
 8006b5c:	63af      	str	r7, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8006b5e:	f006 ff93 	bl	800da88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8006b62:	202f      	movs	r0, #47	; 0x2f
 8006b64:	f006 ffce 	bl	800db04 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
  HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 8006b68:	4622      	mov	r2, r4
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	2010      	movs	r0, #16
 8006b6e:	f006 ff8b 	bl	800da88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 8006b72:	2010      	movs	r0, #16
 8006b74:	f006 ffc6 	bl	800db04 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for USART, to catch the TX complete */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8006b78:	4642      	mov	r2, r8
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	2025      	movs	r0, #37	; 0x25
 8006b7e:	f006 ff83 	bl	800da88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8006b82:	2025      	movs	r0, #37	; 0x25
 8006b84:	f006 ffbe 	bl	800db04 <HAL_NVIC_EnableIRQ>
}
 8006b88:	b03b      	add	sp, #236	; 0xec
 8006b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8e:	bf00      	nop
 8006b90:	58024400 	.word	0x58024400
 8006b94:	24008fa4 	.word	0x24008fa4
 8006b98:	58020000 	.word	0x58020000
 8006b9c:	24008f2c 	.word	0x24008f2c
 8006ba0:	400200b8 	.word	0x400200b8
 8006ba4:	40020088 	.word	0x40020088

08006ba8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop

08006bac <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006bac:	e7fe      	b.n	8006bac <HardFault_Handler>
 8006bae:	bf00      	nop

08006bb0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006bb0:	e7fe      	b.n	8006bb0 <MemManage_Handler>
 8006bb2:	bf00      	nop

08006bb4 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8006bb4:	e7fe      	b.n	8006bb4 <BusFault_Handler>
 8006bb6:	bf00      	nop

08006bb8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006bb8:	e7fe      	b.n	8006bb8 <UsageFault_Handler>
 8006bba:	bf00      	nop

08006bbc <SVC_Handler>:
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop

08006bc0 <DebugMon_Handler>:
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop

08006bc4 <PendSV_Handler>:
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop

08006bc8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8006bc8:	f006 bf1a 	b.w	800da00 <HAL_IncTick>

08006bcc <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler(0);
 8006bcc:	2000      	movs	r0, #0
 8006bce:	f005 bdb5 	b.w	800c73c <BSP_CAMERA_DMA_IRQHandler>
 8006bd2:	bf00      	nop

08006bd4 <DCMI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
   BSP_CAMERA_IRQHandler(0);
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	f005 bdab 	b.w	800c730 <BSP_CAMERA_IRQHandler>
 8006bda:	bf00      	nop

08006bdc <DMA2_Stream1_IRQHandler>:
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  BSP_AUDIO_OUT_IRQHandler(0);
 8006bdc:	2000      	movs	r0, #0
 8006bde:	f004 bdbd 	b.w	800b75c <BSP_AUDIO_OUT_IRQHandler>
 8006be2:	bf00      	nop

08006be4 <MDMA_IRQHandler>:
  * @param  None
  * @retval None
  */
void MDMA_IRQHandler(void)
{
  HAL_MDMA_IRQHandler(&hmdma);
 8006be4:	4801      	ldr	r0, [pc, #4]	; (8006bec <MDMA_IRQHandler+0x8>)
 8006be6:	f00a bcb9 	b.w	801155c <HAL_MDMA_IRQHandler>
 8006bea:	bf00      	nop
 8006bec:	2400820c 	.word	0x2400820c

08006bf0 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 8006bf0:	4801      	ldr	r0, [pc, #4]	; (8006bf8 <DSI_IRQHandler+0x8>)
 8006bf2:	f009 b8d9 	b.w	800fda8 <HAL_DSI_IRQHandler>
 8006bf6:	bf00      	nop
 8006bf8:	24009f78 	.word	0x24009f78

08006bfc <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hlcd_dma2d);
 8006bfc:	4801      	ldr	r0, [pc, #4]	; (8006c04 <DMA2D_IRQHandler+0x8>)
 8006bfe:	f008 bf0d 	b.w	800fa1c <HAL_DMA2D_IRQHandler>
 8006c02:	bf00      	nop
 8006c04:	24009f10 	.word	0x24009f10

08006c08 <DMA1_Stream5_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmarx);
 8006c08:	4b02      	ldr	r3, [pc, #8]	; (8006c14 <DMA1_Stream5_IRQHandler+0xc>)
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	f8d3 05b4 	ldr.w	r0, [r3, #1460]	; 0x5b4
 8006c10:	f008 b9f2 	b.w	800eff8 <HAL_DMA_IRQHandler>
 8006c14:	24008198 	.word	0x24008198

08006c18 <DMA1_Stream7_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data reception
  */
void USARTx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmatx);
 8006c18:	4b02      	ldr	r3, [pc, #8]	; (8006c24 <DMA1_Stream7_IRQHandler+0xc>)
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	f8d3 05b0 	ldr.w	r0, [r3, #1456]	; 0x5b0
 8006c20:	f008 b9ea 	b.w	800eff8 <HAL_DMA_IRQHandler>
 8006c24:	24008198 	.word	0x24008198

08006c28 <USART1_IRQHandler>:
  * @note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(&App_Context.Test_ContextPtr->UartContext.UartHandle);
 8006c28:	4b02      	ldr	r3, [pc, #8]	; (8006c34 <USART1_IRQHandler+0xc>)
 8006c2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006c2c:	f200 503c 	addw	r0, r0, #1340	; 0x53c
 8006c30:	f00e bfaa 	b.w	8015b88 <HAL_UART_IRQHandler>
 8006c34:	24008198 	.word	0x24008198

08006c38 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8006c38:	4801      	ldr	r0, [pc, #4]	; (8006c40 <LTDC_IRQHandler+0x8>)
 8006c3a:	f00a ba47 	b.w	80110cc <HAL_LTDC_IRQHandler>
 8006c3e:	bf00      	nop
 8006c40:	24009f94 	.word	0x24009f94

08006c44 <SystemInit>:
 */
void SystemInit(void)
{
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8006c44:	498d      	ldr	r1, [pc, #564]	; (8006e7c <SystemInit+0x238>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006c46:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8006c48:	4b8d      	ldr	r3, [pc, #564]	; (8006e80 <SystemInit+0x23c>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006c4a:	488e      	ldr	r0, [pc, #568]	; (8006e84 <SystemInit+0x240>)
{
 8006c4c:	b4f0      	push	{r4, r5, r6, r7}
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8006c4e:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
{
 8006c52:	b082      	sub	sp, #8

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006c54:	4d8c      	ldr	r5, [pc, #560]	; (8006e88 <SystemInit+0x244>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8006c56:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8006c5a:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8006c5e:	690c      	ldr	r4, [r1, #16]
 8006c60:	f044 0404 	orr.w	r4, r4, #4
 8006c64:	610c      	str	r4, [r1, #16]
  EXTI_D2->EMR3 |= 0x4000UL;
 8006c66:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  RCC->CR |= RCC_CR_HSION;
 8006c6a:	6819      	ldr	r1, [r3, #0]
 8006c6c:	f041 0101 	orr.w	r1, r1, #1
 8006c70:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006c72:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8006c74:	6819      	ldr	r1, [r3, #0]
 8006c76:	4008      	ands	r0, r1
 8006c78:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 8006c7a:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006c7c:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006c7e:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8006c80:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 8006c82:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8006c84:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8006c86:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8006c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8006c8c:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8006c8e:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8006c90:	6819      	ldr	r1, [r3, #0]
 8006c92:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006c96:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8006c98:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8006c9a:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006c9e:	4b7b      	ldr	r3, [pc, #492]	; (8006e8c <SystemInit+0x248>)
  EXTI_D2->EMR3 |= 0x4000UL;
 8006ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ca4:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006ca8:	682a      	ldr	r2, [r5, #0]
 8006caa:	4013      	ands	r3, r2
 8006cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cb0:	d203      	bcs.n	8006cba <SystemInit+0x76>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8006cb2:	4b77      	ldr	r3, [pc, #476]	; (8006e90 <SystemInit+0x24c>)
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 * @param  None
 * @retval None
 */
void SystemInit_ExtMemCtl(void)
{
  __IO uint32_t tmp = 0;
 8006cba:	2300      	movs	r3, #0
  register uint32_t tmpreg = 0, timeout = 0xFFFF;
  register __IO uint32_t index;

  /* Enable GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface
      clock */
  RCC->AHB4ENR |= 0x000001F8;
 8006cbc:	4d70      	ldr	r5, [pc, #448]	; (8006e80 <SystemInit+0x23c>)

  /* Delay after an RCC peripheral clock enabling */
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);

  /* Connect PDx pins to FMC Alternate function */
  GPIOD->AFR[0] = 0x000000CC;
 8006cbe:	4975      	ldr	r1, [pc, #468]	; (8006e94 <SystemInit+0x250>)
  /* Configure PDx pins in Pull-up */
  GPIOD->PUPDR = 0x50150005;

  /* Connect PEx pins to FMC Alternate function */
  GPIOE->AFR[0] = 0xC00000CC;
  GPIOE->AFR[1] = 0xCCCCCCCC;
 8006cc0:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
  __IO uint32_t tmp = 0;
 8006cc4:	9300      	str	r3, [sp, #0]
  RCC->AHB4ENR |= 0x000001F8;
 8006cc6:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
  GPIOE->AFR[0] = 0xC00000CC;
 8006cca:	4a73      	ldr	r2, [pc, #460]	; (8006e98 <SystemInit+0x254>)
  RCC->AHB4ENR |= 0x000001F8;
 8006ccc:	f440 70fc 	orr.w	r0, r0, #504	; 0x1f8
  GPIOE->OTYPER = 0x00000000;
  /* Configure PEx pins in Pull-up */
  GPIOE->PUPDR = 0x55554005;

  /* Connect PFx pins to FMC Alternate function */
  GPIOF->AFR[0] = 0x00CCCCCC;
 8006cd0:	4c72      	ldr	r4, [pc, #456]	; (8006e9c <SystemInit+0x258>)
 8006cd2:	4f73      	ldr	r7, [pc, #460]	; (8006ea0 <SystemInit+0x25c>)
  RCC->AHB4ENR |= 0x000001F8;
 8006cd4:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 8006cd8:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
  GPIOF->AFR[1] = 0xCCCCC000;
 8006cdc:	f8df c224 	ldr.w	ip, [pc, #548]	; 8006f04 <SystemInit+0x2c0>
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 8006ce0:	f000 0010 	and.w	r0, r0, #16
 8006ce4:	9000      	str	r0, [sp, #0]
  GPIOD->AFR[0] = 0x000000CC;
 8006ce6:	20cc      	movs	r0, #204	; 0xcc
 8006ce8:	6208      	str	r0, [r1, #32]
  GPIOD->AFR[1] = 0xCC000CCC;
 8006cea:	486e      	ldr	r0, [pc, #440]	; (8006ea4 <SystemInit+0x260>)
 8006cec:	6248      	str	r0, [r1, #36]	; 0x24
  GPIOD->MODER = 0xAFEAFFFA;
 8006cee:	486e      	ldr	r0, [pc, #440]	; (8006ea8 <SystemInit+0x264>)
 8006cf0:	6008      	str	r0, [r1, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 8006cf2:	486e      	ldr	r0, [pc, #440]	; (8006eac <SystemInit+0x268>)
 8006cf4:	6088      	str	r0, [r1, #8]
  GPIOD->PUPDR = 0x50150005;
 8006cf6:	486e      	ldr	r0, [pc, #440]	; (8006eb0 <SystemInit+0x26c>)
  GPIOD->OTYPER = 0x00000000;
 8006cf8:	604b      	str	r3, [r1, #4]
  GPIOD->PUPDR = 0x50150005;
 8006cfa:	60c8      	str	r0, [r1, #12]
  GPIOE->AFR[0] = 0xC00000CC;
 8006cfc:	496d      	ldr	r1, [pc, #436]	; (8006eb4 <SystemInit+0x270>)
  GPIOF->OTYPER = 0x00000000;
  /* Configure PFx pins in Pull-up */
  GPIOF->PUPDR = 0x55400555;

  /* Connect PGx pins to FMC Alternate function */
  GPIOG->AFR[0] = 0x00CCCCCC;
 8006cfe:	486e      	ldr	r0, [pc, #440]	; (8006eb8 <SystemInit+0x274>)
  GPIOE->AFR[0] = 0xC00000CC;
 8006d00:	6211      	str	r1, [r2, #32]
  GPIOE->MODER = 0xAAAABFFA;
 8006d02:	496e      	ldr	r1, [pc, #440]	; (8006ebc <SystemInit+0x278>)
  GPIOE->AFR[1] = 0xCCCCCCCC;
 8006d04:	6256      	str	r6, [r2, #36]	; 0x24
  GPIOE->MODER = 0xAAAABFFA;
 8006d06:	6011      	str	r1, [r2, #0]
  GPIOE->OSPEEDR = 0xFFFFC00F;
 8006d08:	496d      	ldr	r1, [pc, #436]	; (8006ec0 <SystemInit+0x27c>)
 8006d0a:	6091      	str	r1, [r2, #8]
  GPIOE->PUPDR = 0x55554005;
 8006d0c:	496d      	ldr	r1, [pc, #436]	; (8006ec4 <SystemInit+0x280>)
  GPIOE->OTYPER = 0x00000000;
 8006d0e:	6053      	str	r3, [r2, #4]
  GPIOE->PUPDR = 0x55554005;
 8006d10:	60d1      	str	r1, [r2, #12]
  GPIOH->OTYPER = 0x00000000;
  /* Configure PHx pins in Pull-up */
  GPIOH->PUPDR = 0x55555400;

  /* Connect PIx pins to FMC Alternate function */
  GPIOI->AFR[0] = 0xCCCCCCCC;
 8006d12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  GPIOF->AFR[0] = 0x00CCCCCC;
 8006d16:	6227      	str	r7, [r4, #32]
  GPIOF->AFR[1] = 0xCCCCC000;
 8006d18:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  GPIOF->MODER = 0xAABFFAAA;
 8006d1c:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8006f08 <SystemInit+0x2c4>
  GPIOH->AFR[0] = 0xCCC00000;
 8006d20:	4969      	ldr	r1, [pc, #420]	; (8006ec8 <SystemInit+0x284>)
  GPIOF->MODER = 0xAABFFAAA;
 8006d22:	f8c4 c000 	str.w	ip, [r4]
  GPIOF->OSPEEDR = 0xFFC00FFF;
 8006d26:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8006f0c <SystemInit+0x2c8>
 8006d2a:	f8c4 c008 	str.w	ip, [r4, #8]
  GPIOF->PUPDR = 0x55400555;
 8006d2e:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 8006f10 <SystemInit+0x2cc>
  GPIOF->OTYPER = 0x00000000;
 8006d32:	6063      	str	r3, [r4, #4]
  GPIOF->PUPDR = 0x55400555;
 8006d34:	f8c4 c00c 	str.w	ip, [r4, #12]
  GPIOG->AFR[1] = 0xC000000C;
 8006d38:	4c64      	ldr	r4, [pc, #400]	; (8006ecc <SystemInit+0x288>)
  GPIOG->AFR[0] = 0x00CCCCCC;
 8006d3a:	6207      	str	r7, [r0, #32]
  GPIOG->AFR[1] = 0xC000000C;
 8006d3c:	6244      	str	r4, [r0, #36]	; 0x24
  GPIOG->MODER = 0xBFFEFAAA;
 8006d3e:	f5a4 3482 	sub.w	r4, r4, #66560	; 0x10400
 8006d42:	f5a4 74b1 	sub.w	r4, r4, #354	; 0x162
 8006d46:	6004      	str	r4, [r0, #0]
  GPIOG->OSPEEDR = 0xC0030FFF;
 8006d48:	f504 2482 	add.w	r4, r4, #266240	; 0x41000
 8006d4c:	f204 5455 	addw	r4, r4, #1365	; 0x555
 8006d50:	6084      	str	r4, [r0, #8]
  GPIOG->PUPDR = 0x40010555;
 8006d52:	4c5f      	ldr	r4, [pc, #380]	; (8006ed0 <SystemInit+0x28c>)
  GPIOG->OTYPER = 0x00000000;
 8006d54:	6043      	str	r3, [r0, #4]
  GPIOG->PUPDR = 0x40010555;
 8006d56:	60c4      	str	r4, [r0, #12]
    SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2
    ReadBurst          = FMC_SDRAM_RBURST_ENABLE
    ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0*/

  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 8006d58:	f240 1465 	movw	r4, #357	; 0x165
  GPIOH->AFR[0] = 0xCCC00000;
 8006d5c:	485d      	ldr	r0, [pc, #372]	; (8006ed4 <SystemInit+0x290>)
 8006d5e:	6208      	str	r0, [r1, #32]
  GPIOH->MODER = 0xAAAAABFF;
 8006d60:	485d      	ldr	r0, [pc, #372]	; (8006ed8 <SystemInit+0x294>)
  GPIOH->AFR[1] = 0xCCCCCCCC;
 8006d62:	624e      	str	r6, [r1, #36]	; 0x24
  GPIOH->MODER = 0xAAAAABFF;
 8006d64:	6008      	str	r0, [r1, #0]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 8006d66:	485d      	ldr	r0, [pc, #372]	; (8006edc <SystemInit+0x298>)
 8006d68:	6088      	str	r0, [r1, #8]
  GPIOH->PUPDR = 0x55555400;
 8006d6a:	485d      	ldr	r0, [pc, #372]	; (8006ee0 <SystemInit+0x29c>)
  GPIOH->OTYPER = 0x00000000;
 8006d6c:	604b      	str	r3, [r1, #4]
  GPIOH->PUPDR = 0x55555400;
 8006d6e:	60c8      	str	r0, [r1, #12]
  GPIOI->AFR[1] = 0x00000CC0;
 8006d70:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
  GPIOI->MODER = 0xFFEBAAAA;
 8006d74:	485b      	ldr	r0, [pc, #364]	; (8006ee4 <SystemInit+0x2a0>)
  GPIOI->AFR[0] = 0xCCCCCCCC;
 8006d76:	6216      	str	r6, [r2, #32]
  GPIOI->AFR[1] = 0x00000CC0;
 8006d78:	6251      	str	r1, [r2, #36]	; 0x24
  GPIOI->MODER = 0xFFEBAAAA;
 8006d7a:	6010      	str	r0, [r2, #0]
  GPIOI->OSPEEDR = 0x003CFFFF;
 8006d7c:	495a      	ldr	r1, [pc, #360]	; (8006ee8 <SystemInit+0x2a4>)
  GPIOI->PUPDR = 0x00145555;
 8006d7e:	485b      	ldr	r0, [pc, #364]	; (8006eec <SystemInit+0x2a8>)
  GPIOI->OSPEEDR = 0x003CFFFF;
 8006d80:	6091      	str	r1, [r2, #8]
  GPIOI->OTYPER = 0x00000000;
 8006d82:	6053      	str	r3, [r2, #4]
  GPIOI->PUPDR = 0x00145555;
 8006d84:	60d0      	str	r0, [r2, #12]
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8006d86:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8006d8a:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8006d8e:	4958      	ldr	r1, [pc, #352]	; (8006ef0 <SystemInit+0x2ac>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8006d90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8006d94:	4857      	ldr	r0, [pc, #348]	; (8006ef4 <SystemInit+0x2b0>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8006d96:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;

  /* SDRAM initialization sequence */
  /* Clock enable command */
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8006d9a:	2309      	movs	r3, #9
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8006d9c:	640a      	str	r2, [r1, #64]	; 0x40
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8006d9e:	4a56      	ldr	r2, [pc, #344]	; (8006ef8 <SystemInit+0x2b4>)
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 8006da0:	644c      	str	r4, [r1, #68]	; 0x44
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8006da2:	6488      	str	r0, [r1, #72]	; 0x48
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8006da4:	64ca      	str	r2, [r1, #76]	; 0x4c
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8006da6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006da8:	6d8b      	ldr	r3, [r1, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8006daa:	f013 0320 	ands.w	r3, r3, #32
 8006dae:	d008      	beq.n	8006dc2 <SystemInit+0x17e>
 8006db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006db4:	e001      	b.n	8006dba <SystemInit+0x176>
 8006db6:	3a01      	subs	r2, #1
 8006db8:	d054      	beq.n	8006e64 <SystemInit+0x220>
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006dba:	6d8b      	ldr	r3, [r1, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8006dbc:	f013 0320 	ands.w	r3, r3, #32
 8006dc0:	d1f9      	bne.n	8006db6 <SystemInit+0x172>
  }

  /* Delay */
  for (index = 0; index < 1000; index++)
 8006dc2:	9301      	str	r3, [sp, #4]
 8006dc4:	9b01      	ldr	r3, [sp, #4]
 8006dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dca:	d253      	bcs.n	8006e74 <SystemInit+0x230>
  while ((tmpreg != 0) && (timeout-- > 0))
 8006dcc:	2300      	movs	r3, #0
  for (index = 0; index < 1000; index++)
 8006dce:	9a01      	ldr	r2, [sp, #4]
 8006dd0:	3201      	adds	r2, #1
 8006dd2:	9201      	str	r2, [sp, #4]
 8006dd4:	9a01      	ldr	r2, [sp, #4]
 8006dd6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8006dda:	d3f8      	bcc.n	8006dce <SystemInit+0x18a>
    ;

  /* PALL command */
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8006ddc:	4a44      	ldr	r2, [pc, #272]	; (8006ef0 <SystemInit+0x2ac>)
 8006dde:	210a      	movs	r1, #10
 8006de0:	6511      	str	r1, [r2, #80]	; 0x50
  timeout = 0xFFFF;
  while ((tmpreg != 0) && (timeout-- > 0))
 8006de2:	b143      	cbz	r3, 8006df6 <SystemInit+0x1b2>
  while ((tmpreg != 0) && (timeout-- > 0))
 8006de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006de8:	4841      	ldr	r0, [pc, #260]	; (8006ef0 <SystemInit+0x2ac>)
 8006dea:	e001      	b.n	8006df0 <SystemInit+0x1ac>
  while ((tmpreg != 0) && (timeout-- > 0))
 8006dec:	3b01      	subs	r3, #1
 8006dee:	d01f      	beq.n	8006e30 <SystemInit+0x1ec>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006df0:	6d82      	ldr	r2, [r0, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8006df2:	0694      	lsls	r4, r2, #26
 8006df4:	d4fa      	bmi.n	8006dec <SystemInit+0x1a8>
  }

  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8006df6:	4b3e      	ldr	r3, [pc, #248]	; (8006ef0 <SystemInit+0x2ac>)
 8006df8:	22eb      	movs	r2, #235	; 0xeb
 8006dfa:	651a      	str	r2, [r3, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }

  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8006dfc:	4b3c      	ldr	r3, [pc, #240]	; (8006ef0 <SystemInit+0x2ac>)
 8006dfe:	4a3f      	ldr	r2, [pc, #252]	; (8006efc <SystemInit+0x2b8>)
 8006e00:	651a      	str	r2, [r3, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }
  /* Set refresh count */
  tmpreg = FMC_Bank5_6_R->SDRTR;
 8006e02:	4b3b      	ldr	r3, [pc, #236]	; (8006ef0 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8006e04:	f640 4206 	movw	r2, #3078	; 0xc06
  /* Disable write protection */
  tmpreg = FMC_Bank5_6_R->SDCR[1];
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);

  /*FMC controller Enable*/
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 8006e08:	493d      	ldr	r1, [pc, #244]	; (8006f00 <SystemInit+0x2bc>)
  tmpreg = FMC_Bank5_6_R->SDRTR;
 8006e0a:	6d5c      	ldr	r4, [r3, #84]	; 0x54
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006e0c:	481b      	ldr	r0, [pc, #108]	; (8006e7c <SystemInit+0x238>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8006e0e:	4322      	orrs	r2, r4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006e10:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8006e14:	655a      	str	r2, [r3, #84]	; 0x54
  tmpreg = FMC_Bank5_6_R->SDCR[1];
 8006e16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);
 8006e18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e1c:	645a      	str	r2, [r3, #68]	; 0x44
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 8006e1e:	680b      	ldr	r3, [r1, #0]
 8006e20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e24:	600b      	str	r3, [r1, #0]

  (void)(tmp);
 8006e26:	9b00      	ldr	r3, [sp, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006e28:	6084      	str	r4, [r0, #8]
}
 8006e2a:	b002      	add	sp, #8
 8006e2c:	bcf0      	pop	{r4, r5, r6, r7}
 8006e2e:	4770      	bx	lr
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8006e30:	22eb      	movs	r2, #235	; 0xeb
 8006e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006e36:	492e      	ldr	r1, [pc, #184]	; (8006ef0 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8006e38:	6502      	str	r2, [r0, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e3a:	e001      	b.n	8006e40 <SystemInit+0x1fc>
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	d005      	beq.n	8006e4c <SystemInit+0x208>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006e40:	6d8a      	ldr	r2, [r1, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e42:	0690      	lsls	r0, r2, #26
 8006e44:	d4fa      	bmi.n	8006e3c <SystemInit+0x1f8>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8006e46:	4b2d      	ldr	r3, [pc, #180]	; (8006efc <SystemInit+0x2b8>)
 8006e48:	650b      	str	r3, [r1, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e4a:	e7da      	b.n	8006e02 <SystemInit+0x1be>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8006e4c:	4a2b      	ldr	r2, [pc, #172]	; (8006efc <SystemInit+0x2b8>)
 8006e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006e52:	4827      	ldr	r0, [pc, #156]	; (8006ef0 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8006e54:	650a      	str	r2, [r1, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e56:	e001      	b.n	8006e5c <SystemInit+0x218>
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	d0d2      	beq.n	8006e02 <SystemInit+0x1be>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006e5c:	6d82      	ldr	r2, [r0, #88]	; 0x58
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e5e:	0692      	lsls	r2, r2, #26
 8006e60:	d5cf      	bpl.n	8006e02 <SystemInit+0x1be>
 8006e62:	e7f9      	b.n	8006e58 <SystemInit+0x214>
  for (index = 0; index < 1000; index++)
 8006e64:	9201      	str	r2, [sp, #4]
 8006e66:	9a01      	ldr	r2, [sp, #4]
 8006e68:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8006e6c:	d3af      	bcc.n	8006dce <SystemInit+0x18a>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8006e6e:	230a      	movs	r3, #10
 8006e70:	650b      	str	r3, [r1, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e72:	e7b7      	b.n	8006de4 <SystemInit+0x1a0>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8006e74:	230a      	movs	r3, #10
 8006e76:	650b      	str	r3, [r1, #80]	; 0x50
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e78:	e7bd      	b.n	8006df6 <SystemInit+0x1b2>
 8006e7a:	bf00      	nop
 8006e7c:	e000ed00 	.word	0xe000ed00
 8006e80:	58024400 	.word	0x58024400
 8006e84:	eaf6ed7f 	.word	0xeaf6ed7f
 8006e88:	5c001000 	.word	0x5c001000
 8006e8c:	ffff0000 	.word	0xffff0000
 8006e90:	51008000 	.word	0x51008000
 8006e94:	58020c00 	.word	0x58020c00
 8006e98:	58021000 	.word	0x58021000
 8006e9c:	58021400 	.word	0x58021400
 8006ea0:	00cccccc 	.word	0x00cccccc
 8006ea4:	cc000ccc 	.word	0xcc000ccc
 8006ea8:	afeafffa 	.word	0xafeafffa
 8006eac:	f03f000f 	.word	0xf03f000f
 8006eb0:	50150005 	.word	0x50150005
 8006eb4:	c00000cc 	.word	0xc00000cc
 8006eb8:	58021800 	.word	0x58021800
 8006ebc:	aaaabffa 	.word	0xaaaabffa
 8006ec0:	ffffc00f 	.word	0xffffc00f
 8006ec4:	55554005 	.word	0x55554005
 8006ec8:	58021c00 	.word	0x58021c00
 8006ecc:	c000000c 	.word	0xc000000c
 8006ed0:	40010555 	.word	0x40010555
 8006ed4:	ccc00000 	.word	0xccc00000
 8006ed8:	aaaaabff 	.word	0xaaaaabff
 8006edc:	fffffc00 	.word	0xfffffc00
 8006ee0:	55555400 	.word	0x55555400
 8006ee4:	ffebaaaa 	.word	0xffebaaaa
 8006ee8:	003cffff 	.word	0x003cffff
 8006eec:	00145555 	.word	0x00145555
 8006ef0:	52004100 	.word	0x52004100
 8006ef4:	00105000 	.word	0x00105000
 8006ef8:	01010351 	.word	0x01010351
 8006efc:	0004400c 	.word	0x0004400c
 8006f00:	52004000 	.word	0x52004000
 8006f04:	ccccc000 	.word	0xccccc000
 8006f08:	aabffaaa 	.word	0xaabffaaa
 8006f0c:	ffc00fff 	.word	0xffc00fff
 8006f10:	55400555 	.word	0x55400555

08006f14 <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 8006f14:	b430      	push	{r4, r5}
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8006f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8006f1a:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 8006f1e:	f44f 7480 	mov.w	r4, #256	; 0x100
{
 8006f22:	4603      	mov	r3, r0
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8006f24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8006f28:	e9c0 5200 	strd	r5, r2, [r0]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8006f2c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8006f30:	e9c0 1402 	strd	r1, r4, [r0, #8]
  return MT25TL01G_OK;
}
 8006f34:	2000      	movs	r0, #0
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8006f36:	611a      	str	r2, [r3, #16]
}
 8006f38:	bc30      	pop	{r4, r5}
 8006f3a:	4770      	bx	lr
 8006f3c:	0000      	movs	r0, r0
	...

08006f40 <MT25TL01G_AutoPollingMemReady>:
  s_command.DummyCycles       = 2;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
 8006f40:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8006f98 <MT25TL01G_AutoPollingMemReady+0x58>
{
 8006f44:	b510      	push	{r4, lr}
 8006f46:	b094      	sub	sp, #80	; 0x50
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8006f48:	2305      	movs	r3, #5
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006f4a:	2200      	movs	r2, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006f4c:	f44f 7440 	mov.w	r4, #768	; 0x300
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8006f50:	9306      	str	r3, [sp, #24]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006f52:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
  s_command.DummyCycles       = 2;
 8006f56:	2302      	movs	r3, #2
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006f58:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8006f5a:	ed8d 7b00 	vstr	d7, [sp]
 8006f5e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006fa0 <MT25TL01G_AutoPollingMemReady+0x60>
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006f62:	e9cd 210e 	strd	r2, r1, [sp, #56]	; 0x38
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006f66:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
  s_config.Match           = 0;
 8006f6a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006f6e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8006fa8 <MT25TL01G_AutoPollingMemReady+0x68>
  s_command.DummyCycles       = 2;
 8006f72:	930b      	str	r3, [sp, #44]	; 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f74:	a906      	add	r1, sp, #24
 8006f76:	f241 3388 	movw	r3, #5000	; 0x1388
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006f7a:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f7e:	466a      	mov	r2, sp
  s_config.Match           = 0;
 8006f80:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f84:	f00a fe6a 	bl	8011c5c <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8006f88:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;

}
 8006f8a:	bf14      	ite	ne
 8006f8c:	f06f 0004 	mvnne.w	r0, #4
 8006f90:	2000      	moveq	r0, #0
 8006f92:	b014      	add	sp, #80	; 0x50
 8006f94:	bd10      	pop	{r4, pc}
 8006f96:	bf00      	nop
 8006f98:	00000000 	.word	0x00000000
 8006f9c:	00000101 	.word	0x00000101
 8006fa0:	00000010 	.word	0x00000010
 8006fa4:	00000002 	.word	0x00000002
 8006fa8:	00000000 	.word	0x00000000
 8006fac:	00400000 	.word	0x00400000

08006fb0 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8006fb0:	b530      	push	{r4, r5, lr}

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006fb2:	2300      	movs	r3, #0
{
 8006fb4:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006fb6:	2903      	cmp	r1, #3
{
 8006fb8:	460c      	mov	r4, r1
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006fba:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fbc:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 8006fc0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fc2:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006fc4:	9313      	str	r3, [sp, #76]	; 0x4c
{
 8006fc6:	4605      	mov	r5, r0
  s_command.DataMode          = QSPI_DATA_NONE;
 8006fc8:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006fcc:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006fd0:	bf0c      	ite	eq
 8006fd2:	f44f 7340 	moveq.w	r3, #768	; 0x300
 8006fd6:	f44f 7380 	movne.w	r3, #256	; 0x100
 8006fda:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8006fdc:	2306      	movs	r3, #6
 8006fde:	9306      	str	r3, [sp, #24]
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fe0:	f00a fcd0 	bl	8011984 <HAL_QSPI_Command>
 8006fe4:	bb30      	cbnz	r0, 8007034 <MT25TL01G_WriteEnable+0x84>
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8006fe6:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8006fe8:	f04f 0305 	mov.w	r3, #5


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fec:	4628      	mov	r0, r5
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8006fee:	f04f 0410 	mov.w	r4, #16
 8006ff2:	f04f 0502 	mov.w	r5, #2
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8006ff6:	9306      	str	r3, [sp, #24]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8006ff8:	bf0c      	ite	eq
 8006ffa:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 8006ffe:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007002:	a906      	add	r1, sp, #24
 8007004:	466a      	mov	r2, sp
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8007006:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007008:	f241 3388 	movw	r3, #5000	; 0x1388
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800700c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8007040 <MT25TL01G_WriteEnable+0x90>
 8007010:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007014:	2400      	movs	r4, #0
 8007016:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
 800701a:	ed8d 7b00 	vstr	d7, [sp]
 800701e:	e9cd 4504 	strd	r4, r5, [sp, #16]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007022:	f00a fe1b 	bl	8011c5c <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8007026:	2800      	cmp	r0, #0
 8007028:	bf0c      	ite	eq
 800702a:	2000      	moveq	r0, #0
 800702c:	f06f 0004 	mvnne.w	r0, #4
  }

  return MT25TL01G_OK;
}
 8007030:	b015      	add	sp, #84	; 0x54
 8007032:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8007034:	f06f 0001 	mvn.w	r0, #1
 8007038:	e7fa      	b.n	8007030 <MT25TL01G_WriteEnable+0x80>
 800703a:	bf00      	nop
 800703c:	f3af 8000 	nop.w
 8007040:	00000202 	.word	0x00000202
 8007044:	00000202 	.word	0x00000202

08007048 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007048:	2903      	cmp	r1, #3
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800704a:	f04f 0300 	mov.w	r3, #0
{
 800704e:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007050:	bf08      	it	eq
 8007052:	f44f 7240 	moveq.w	r2, #768	; 0x300
{
 8007056:	b0a3      	sub	sp, #140	; 0x8c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007058:	bf18      	it	ne
 800705a:	f44f 7280 	movne.w	r2, #256	; 0x100
{
 800705e:	4605      	mov	r5, r0
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8007060:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007062:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8007064:	22b7      	movs	r2, #183	; 0xb7
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007066:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataMode          = QSPI_DATA_NONE;
 8007068:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 800706a:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800706c:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800706e:	9206      	str	r2, [sp, #24]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007070:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8007074:	f7ff ff9c 	bl	8006fb0 <MT25TL01G_WriteEnable>
 8007078:	bb80      	cbnz	r0, 80070dc <MT25TL01G_Enter4BytesAddressMode+0x94>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800707a:	4604      	mov	r4, r0
 800707c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007080:	a906      	add	r1, sp, #24
 8007082:	4628      	mov	r0, r5
 8007084:	f00a fc7e 	bl	8011984 <HAL_QSPI_Command>
 8007088:	bb40      	cbnz	r0, 80070dc <MT25TL01G_Enter4BytesAddressMode+0x94>
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800708a:	2305      	movs	r3, #5
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800708c:	f44f 7140 	mov.w	r1, #768	; 0x300
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8007090:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007094:	4628      	mov	r0, r5
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8007096:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DummyCycles       = 2;
 8007098:	2302      	movs	r3, #2
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800709a:	911a      	str	r1, [sp, #104]	; 0x68
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800709c:	a914      	add	r1, sp, #80	; 0x50
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800709e:	921d      	str	r2, [sp, #116]	; 0x74
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070a0:	466a      	mov	r2, sp
  s_command.DummyCycles       = 2;
 80070a2:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070a4:	f241 3388 	movw	r3, #5000	; 0x1388
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80070a8:	9421      	str	r4, [sp, #132]	; 0x84
  s_config.Match           = 0;
 80070aa:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80070e8 <MT25TL01G_Enter4BytesAddressMode+0xa0>
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80070ae:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80070b2:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
  s_config.Match           = 0;
 80070b6:	ed8d 7b00 	vstr	d7, [sp]
 80070ba:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80070f0 <MT25TL01G_Enter4BytesAddressMode+0xa8>
 80070be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070c2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80070f8 <MT25TL01G_Enter4BytesAddressMode+0xb0>
 80070c6:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070ca:	f00a fdc7 	bl	8011c5c <HAL_QSPI_AutoPolling>
    return MT25TL01G_ERROR_COMMAND;
 80070ce:	2800      	cmp	r0, #0
 80070d0:	bf18      	it	ne
 80070d2:	f06f 0401 	mvnne.w	r4, #1
}
 80070d6:	4620      	mov	r0, r4
 80070d8:	b023      	add	sp, #140	; 0x8c
 80070da:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 80070dc:	f06f 0401 	mvn.w	r4, #1
 80070e0:	e7f9      	b.n	80070d6 <MT25TL01G_Enter4BytesAddressMode+0x8e>
 80070e2:	bf00      	nop
 80070e4:	f3af 8000 	nop.w
 80070e8:	00000000 	.word	0x00000000
 80070ec:	00000101 	.word	0x00000101
 80070f0:	00000010 	.word	0x00000010
 80070f4:	00000002 	.word	0x00000002
 80070f8:	00000000 	.word	0x00000000
 80070fc:	00400000 	.word	0x00400000

08007100 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8007100:	b510      	push	{r4, lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8007102:	2135      	movs	r1, #53	; 0x35
{
 8007104:	b08e      	sub	sp, #56	; 0x38
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8007106:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007108:	f44f 7480 	mov.w	r4, #256	; 0x100
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800710c:	9100      	str	r1, [sp, #0]
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800710e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007112:	4669      	mov	r1, sp
  s_command.DummyCycles       = 0;
 8007114:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007116:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8007118:	e9cd 4306 	strd	r4, r3, [sp, #24]
  s_command.DataMode          = QSPI_DATA_NONE;
 800711c:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007120:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007124:	f00a fc2e 	bl	8011984 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8007128:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800712a:	bf14      	ite	ne
 800712c:	f06f 0001 	mvnne.w	r0, #1
 8007130:	2000      	moveq	r0, #0
 8007132:	b00e      	add	sp, #56	; 0x38
 8007134:	bd10      	pop	{r4, pc}
 8007136:	bf00      	nop

08007138 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8007138:	b510      	push	{r4, lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800713a:	21f5      	movs	r1, #245	; 0xf5
{
 800713c:	b08e      	sub	sp, #56	; 0x38
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800713e:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007140:	f44f 7480 	mov.w	r4, #256	; 0x100
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8007144:	9100      	str	r1, [sp, #0]
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007146:	f241 3288 	movw	r2, #5000	; 0x1388
 800714a:	4669      	mov	r1, sp
  s_command.DummyCycles       = 0;
 800714c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800714e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8007150:	e9cd 4306 	strd	r4, r3, [sp, #24]
  s_command.DataMode          = QSPI_DATA_NONE;
 8007154:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007158:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800715c:	f00a fc12 	bl	8011984 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8007160:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8007162:	bf14      	ite	ne
 8007164:	f06f 0001 	mvnne.w	r0, #1
 8007168:	2000      	moveq	r0, #0
 800716a:	b00e      	add	sp, #56	; 0x38
 800716c:	bd10      	pop	{r4, pc}
 800716e:	bf00      	nop

08007170 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8007170:	b510      	push	{r4, lr}
 8007172:	b090      	sub	sp, #64	; 0x40
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8007174:	2903      	cmp	r1, #3
 8007176:	d80c      	bhi.n	8007192 <MT25TL01G_EnableMemoryMappedModeDTR+0x22>
 8007178:	e8df f001 	tbb	[pc, r1]
 800717c:	0228323c 	.word	0x0228323c
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;

    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8007180:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007208 <MT25TL01G_EnableMemoryMappedModeDTR+0x98>
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8007184:	22ed      	movs	r2, #237	; 0xed
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8007186:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800718a:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800718c:	930b      	str	r3, [sp, #44]	; 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800718e:	ed8d 7b08 	vstr	d7, [sp, #32]

    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8007192:	f44f 5140 	mov.w	r1, #12288	; 0x3000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8007196:	2208      	movs	r2, #8
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007198:	2300      	movs	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800719a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800719e:	9105      	str	r1, [sp, #20]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80071a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80071a4:	9207      	str	r2, [sp, #28]

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80071a6:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80071a8:	910e      	str	r1, [sp, #56]	; 0x38
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80071aa:	a902      	add	r1, sp, #8
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80071ac:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 80071ae:	940d      	str	r4, [sp, #52]	; 0x34
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80071b0:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80071b2:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8007210 <MT25TL01G_EnableMemoryMappedModeDTR+0xa0>
 80071b6:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80071ba:	f00a fdc7 	bl	8011d4c <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 80071be:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80071c0:	bf14      	ite	ne
 80071c2:	f06f 0005 	mvnne.w	r0, #5
 80071c6:	2000      	moveq	r0, #0
 80071c8:	b010      	add	sp, #64	; 0x40
 80071ca:	bd10      	pop	{r4, pc}
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80071cc:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8007218 <MT25TL01G_EnableMemoryMappedModeDTR+0xa8>
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 80071d0:	22ee      	movs	r2, #238	; 0xee
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80071d2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 80071d6:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80071d8:	930b      	str	r3, [sp, #44]	; 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80071da:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 80071de:	e7d8      	b.n	8007192 <MT25TL01G_EnableMemoryMappedModeDTR+0x22>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80071e0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8007220 <MT25TL01G_EnableMemoryMappedModeDTR+0xb0>
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 80071e4:	223d      	movs	r2, #61	; 0x3d
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80071e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 80071ea:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80071ec:	930b      	str	r3, [sp, #44]	; 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80071ee:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 80071f2:	e7ce      	b.n	8007192 <MT25TL01G_EnableMemoryMappedModeDTR+0x22>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80071f4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8007220 <MT25TL01G_EnableMemoryMappedModeDTR+0xb0>
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 80071f8:	220e      	movs	r2, #14
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80071fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 80071fe:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8007200:	930b      	str	r3, [sp, #44]	; 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007202:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 8007206:	e7c4      	b.n	8007192 <MT25TL01G_EnableMemoryMappedModeDTR+0x22>
 8007208:	00000300 	.word	0x00000300
 800720c:	00000c00 	.word	0x00000c00
	...
 8007218:	00000100 	.word	0x00000100
 800721c:	00000c00 	.word	0x00000c00
 8007220:	00000100 	.word	0x00000100
 8007224:	00000400 	.word	0x00000400

08007228 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8007228:	b500      	push	{lr}
 800722a:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800722c:	2903      	cmp	r1, #3
 800722e:	d80c      	bhi.n	800724a <MT25TL01G_EnableMemoryMappedModeSTR+0x22>
 8007230:	e8df f001 	tbb	[pc, r1]
 8007234:	02252f39 	.word	0x02252f39
    s_command.DataMode          = QSPI_DATA_4_LINES;

    break;

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8007238:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80072c0 <MT25TL01G_EnableMemoryMappedModeSTR+0x98>
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800723c:	22eb      	movs	r2, #235	; 0xeb
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800723e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8007242:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8007244:	930b      	str	r3, [sp, #44]	; 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8007246:	ed8d 7b08 	vstr	d7, [sp, #32]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800724a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80072c8 <MT25TL01G_EnableMemoryMappedModeSTR+0xa0>
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800724e:	2108      	movs	r1, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8007250:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007254:	2300      	movs	r3, #0
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8007256:	9107      	str	r1, [sp, #28]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8007258:	4469      	add	r1, sp
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800725a:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800725c:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800725e:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007260:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007262:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8007266:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800726a:	f00a fd6f 	bl	8011d4c <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800726e:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8007270:	bf14      	ite	ne
 8007272:	f06f 0005 	mvnne.w	r0, #5
 8007276:	2000      	moveq	r0, #0
 8007278:	b011      	add	sp, #68	; 0x44
 800727a:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800727e:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80072d0 <MT25TL01G_EnableMemoryMappedModeSTR+0xa8>
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8007282:	22ec      	movs	r2, #236	; 0xec
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8007284:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8007288:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800728a:	930b      	str	r3, [sp, #44]	; 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800728c:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 8007290:	e7db      	b.n	800724a <MT25TL01G_EnableMemoryMappedModeSTR+0x22>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007292:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80072d8 <MT25TL01G_EnableMemoryMappedModeSTR+0xb0>
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8007296:	22bc      	movs	r2, #188	; 0xbc
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8007298:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800729c:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800729e:	930b      	str	r3, [sp, #44]	; 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80072a0:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 80072a4:	e7d1      	b.n	800724a <MT25TL01G_EnableMemoryMappedModeSTR+0x22>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80072a6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80072e0 <MT25TL01G_EnableMemoryMappedModeSTR+0xb8>
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80072aa:	220c      	movs	r2, #12
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80072ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80072b0:	9202      	str	r2, [sp, #8]
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80072b2:	930b      	str	r3, [sp, #44]	; 0x2c
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80072b4:	ed8d 7b08 	vstr	d7, [sp, #32]
    break;
 80072b8:	e7c7      	b.n	800724a <MT25TL01G_EnableMemoryMappedModeSTR+0x22>
 80072ba:	bf00      	nop
 80072bc:	f3af 8000 	nop.w
 80072c0:	00000300 	.word	0x00000300
 80072c4:	00000c00 	.word	0x00000c00
	...
 80072d0:	00000100 	.word	0x00000100
 80072d4:	00000c00 	.word	0x00000c00
 80072d8:	00000100 	.word	0x00000100
 80072dc:	00000800 	.word	0x00000800
 80072e0:	00000100 	.word	0x00000100
 80072e4:	00000400 	.word	0x00000400

080072e8 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80072e8:	b510      	push	{r4, lr}
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80072ea:	2903      	cmp	r1, #3
{
 80072ec:	b08e      	sub	sp, #56	; 0x38
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80072ee:	f04f 0466 	mov.w	r4, #102	; 0x66
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80072f2:	f04f 0300 	mov.w	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80072f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072fa:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80072fc:	9400      	str	r4, [sp, #0]
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80072fe:	bf0c      	ite	eq
 8007300:	f44f 7440 	moveq.w	r4, #768	; 0x300
 8007304:	f44f 7480 	movne.w	r4, #256	; 0x100
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8007308:	9307      	str	r3, [sp, #28]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800730a:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 800730c:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007310:	e9cd 3405 	strd	r3, r4, [sp, #20]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007314:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007318:	f00a fb34 	bl	8011984 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 800731c:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800731e:	bf14      	ite	ne
 8007320:	f06f 0001 	mvnne.w	r0, #1
 8007324:	2000      	moveq	r0, #0
 8007326:	b00e      	add	sp, #56	; 0x38
 8007328:	bd10      	pop	{r4, pc}
 800732a:	bf00      	nop

0800732c <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800732c:	b510      	push	{r4, lr}
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800732e:	2903      	cmp	r1, #3
{
 8007330:	b08e      	sub	sp, #56	; 0x38
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8007332:	f04f 0499 	mov.w	r4, #153	; 0x99
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8007336:	f04f 0300 	mov.w	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800733a:	f241 3288 	movw	r2, #5000	; 0x1388
 800733e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8007340:	9400      	str	r4, [sp, #0]
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007342:	bf0c      	ite	eq
 8007344:	f44f 7440 	moveq.w	r4, #768	; 0x300
 8007348:	f44f 7480 	movne.w	r4, #256	; 0x100
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800734c:	9307      	str	r3, [sp, #28]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800734e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8007350:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007354:	e9cd 3405 	strd	r3, r4, [sp, #20]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007358:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800735c:	f00a fb12 	bl	8011984 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8007360:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8007362:	bf14      	ite	ne
 8007364:	f06f 0001 	mvnne.w	r0, #1
 8007368:	2000      	moveq	r0, #0
 800736a:	b00e      	add	sp, #56	; 0x38
 800736c:	bd10      	pop	{r4, pc}
 800736e:	bf00      	nop

08007370 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8007370:	f04f 30ff 	mov.w	r0, #4294967295
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop

08007378 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 8007378:	4b02      	ldr	r3, [pc, #8]	; (8007384 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 800737a:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	600b      	str	r3, [r1, #0]
}
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	2400901c 	.word	0x2400901c

08007388 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8007388:	4b02      	ldr	r3, [pc, #8]	; (8007394 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 800738a:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	600b      	str	r3, [r1, #0]
}
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	2400901c 	.word	0x2400901c

08007398 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8007398:	4b06      	ldr	r3, [pc, #24]	; (80073b4 <OTM8009A_GetXSize+0x1c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	b123      	cbz	r3, 80073a8 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 800739e:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 80073a2:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 80073a4:	600b      	str	r3, [r1, #0]
}
 80073a6:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 80073a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 80073ac:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 80073ae:	600b      	str	r3, [r1, #0]
}
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	2400901c 	.word	0x2400901c

080073b8 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 80073b8:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <OTM8009A_GetYSize+0x1c>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	b123      	cbz	r3, 80073c8 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 80073be:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 80073c2:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 80073c4:	600b      	str	r3, [r1, #0]
}
 80073c6:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 80073c8:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 80073cc:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 80073ce:	600b      	str	r3, [r1, #0]
}
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	2400901c 	.word	0x2400901c

080073d8 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80073d8:	f04f 30ff 	mov.w	r0, #4294967295
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop

080073e0 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop

080073e8 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80073e8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop

080073f0 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80073f0:	f04f 30ff 	mov.w	r0, #4294967295
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop

080073f8 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop

08007400 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop

08007408 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8007408:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800740a:	6884      	ldr	r4, [r0, #8]
 800740c:	8800      	ldrh	r0, [r0, #0]
 800740e:	46a4      	mov	ip, r4
}
 8007410:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007414:	4760      	bx	ip
 8007416:	bf00      	nop

08007418 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007418:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800741a:	6844      	ldr	r4, [r0, #4]
 800741c:	8800      	ldrh	r0, [r0, #0]
 800741e:	46a4      	mov	ip, r4
}
 8007420:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007424:	4760      	bx	ip
 8007426:	bf00      	nop

08007428 <OTM8009A_Init>:
{
 8007428:	e92d 47b0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800742c:	2300      	movs	r3, #0
 800742e:	f100 0710 	add.w	r7, r0, #16
{
 8007432:	b083      	sub	sp, #12
 8007434:	4680      	mov	r8, r0
 8007436:	4689      	mov	r9, r1
 8007438:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800743a:	4619      	mov	r1, r3
 800743c:	4adb      	ldr	r2, [pc, #876]	; (80077ac <OTM8009A_Init+0x384>)
 800743e:	4638      	mov	r0, r7
 8007440:	f000 fc78 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8007444:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007446:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8007448:	4ad9      	ldr	r2, [pc, #868]	; (80077b0 <OTM8009A_Init+0x388>)
 800744a:	21ff      	movs	r1, #255	; 0xff
 800744c:	4638      	mov	r0, r7
 800744e:	f000 fc71 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007452:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8007454:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007456:	4ad7      	ldr	r2, [pc, #860]	; (80077b4 <OTM8009A_Init+0x38c>)
 8007458:	4619      	mov	r1, r3
 800745a:	4638      	mov	r0, r7
 800745c:	f000 fc6a 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8007460:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007462:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8007464:	4ad4      	ldr	r2, [pc, #848]	; (80077b8 <OTM8009A_Init+0x390>)
 8007466:	21ff      	movs	r1, #255	; 0xff
 8007468:	4638      	mov	r0, r7
 800746a:	f000 fc63 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800746e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8007470:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007472:	4ad0      	ldr	r2, [pc, #832]	; (80077b4 <OTM8009A_Init+0x38c>)
 8007474:	4619      	mov	r1, r3
 8007476:	4638      	mov	r0, r7
 8007478:	f000 fc5c 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800747c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800747e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8007480:	4ace      	ldr	r2, [pc, #824]	; (80077bc <OTM8009A_Init+0x394>)
 8007482:	21c4      	movs	r1, #196	; 0xc4
 8007484:	4638      	mov	r0, r7
 8007486:	f000 fc55 	bl	8007d34 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800748a:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800748e:	1825      	adds	r5, r4, r0
  tickstart = pObj->IO.GetTick();
 8007490:	4798      	blx	r3
 8007492:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8007494:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007498:	4798      	blx	r3
 800749a:	1b00      	subs	r0, r0, r4
 800749c:	2809      	cmp	r0, #9
 800749e:	d9f9      	bls.n	8007494 <OTM8009A_Init+0x6c>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80074a0:	2300      	movs	r3, #0
 80074a2:	4ac7      	ldr	r2, [pc, #796]	; (80077c0 <OTM8009A_Init+0x398>)
 80074a4:	4638      	mov	r0, r7
 80074a6:	4619      	mov	r1, r3
 80074a8:	f000 fc44 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80074ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80074ae:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80074b0:	4ac4      	ldr	r2, [pc, #784]	; (80077c4 <OTM8009A_Init+0x39c>)
 80074b2:	21c4      	movs	r1, #196	; 0xc4
 80074b4:	4638      	mov	r0, r7
 80074b6:	f000 fc3d 	bl	8007d34 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 80074ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80074be:	182c      	adds	r4, r5, r0
  tickstart = pObj->IO.GetTick();
 80074c0:	4798      	blx	r3
 80074c2:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80074c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074c8:	4798      	blx	r3
 80074ca:	1b40      	subs	r0, r0, r5
 80074cc:	2809      	cmp	r0, #9
 80074ce:	d9f9      	bls.n	80074c4 <OTM8009A_Init+0x9c>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80074d0:	2300      	movs	r3, #0
 80074d2:	4abd      	ldr	r2, [pc, #756]	; (80077c8 <OTM8009A_Init+0x3a0>)
 80074d4:	4638      	mov	r0, r7
 80074d6:	4619      	mov	r1, r3
 80074d8:	f000 fc2c 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80074dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80074de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80074e0:	4aba      	ldr	r2, [pc, #744]	; (80077cc <OTM8009A_Init+0x3a4>)
 80074e2:	21c5      	movs	r1, #197	; 0xc5
 80074e4:	4638      	mov	r0, r7
 80074e6:	f000 fc25 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80074ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80074ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80074ee:	4ab8      	ldr	r2, [pc, #736]	; (80077d0 <OTM8009A_Init+0x3a8>)
 80074f0:	4619      	mov	r1, r3
 80074f2:	4638      	mov	r0, r7
 80074f4:	f000 fc1e 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80074f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80074fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80074fc:	4ab5      	ldr	r2, [pc, #724]	; (80077d4 <OTM8009A_Init+0x3ac>)
 80074fe:	21c5      	movs	r1, #197	; 0xc5
 8007500:	4638      	mov	r0, r7
 8007502:	f000 fc17 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8007506:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007508:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800750a:	4ab3      	ldr	r2, [pc, #716]	; (80077d8 <OTM8009A_Init+0x3b0>)
 800750c:	4619      	mov	r1, r3
 800750e:	4638      	mov	r0, r7
 8007510:	f000 fc10 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8007514:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8007516:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8007518:	4ab0      	ldr	r2, [pc, #704]	; (80077dc <OTM8009A_Init+0x3b4>)
 800751a:	21c0      	movs	r1, #192	; 0xc0
 800751c:	4638      	mov	r0, r7
 800751e:	f000 fc09 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007522:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8007524:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007526:	4aa1      	ldr	r2, [pc, #644]	; (80077ac <OTM8009A_Init+0x384>)
 8007528:	4619      	mov	r1, r3
 800752a:	4638      	mov	r0, r7
 800752c:	f000 fc02 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8007530:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007532:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8007534:	4aaa      	ldr	r2, [pc, #680]	; (80077e0 <OTM8009A_Init+0x3b8>)
 8007536:	21d9      	movs	r1, #217	; 0xd9
 8007538:	4638      	mov	r0, r7
 800753a:	f000 fbfb 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800753e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8007540:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007542:	4aa8      	ldr	r2, [pc, #672]	; (80077e4 <OTM8009A_Init+0x3bc>)
 8007544:	4619      	mov	r1, r3
 8007546:	4638      	mov	r0, r7
 8007548:	f000 fbf4 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800754c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800754e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8007550:	4aa5      	ldr	r2, [pc, #660]	; (80077e8 <OTM8009A_Init+0x3c0>)
 8007552:	21c1      	movs	r1, #193	; 0xc1
 8007554:	4638      	mov	r0, r7
 8007556:	f000 fbed 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800755a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800755c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800755e:	4aa3      	ldr	r2, [pc, #652]	; (80077ec <OTM8009A_Init+0x3c4>)
 8007560:	4619      	mov	r1, r3
 8007562:	4638      	mov	r0, r7
 8007564:	f000 fbe6 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8007568:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800756a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800756c:	4aa0      	ldr	r2, [pc, #640]	; (80077f0 <OTM8009A_Init+0x3c8>)
 800756e:	21c1      	movs	r1, #193	; 0xc1
 8007570:	4638      	mov	r0, r7
 8007572:	f000 fbdf 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8007576:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8007578:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800757a:	4a9e      	ldr	r2, [pc, #632]	; (80077f4 <OTM8009A_Init+0x3cc>)
 800757c:	4619      	mov	r1, r3
 800757e:	4638      	mov	r0, r7
 8007580:	f000 fbd8 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8007584:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8007586:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8007588:	4a9b      	ldr	r2, [pc, #620]	; (80077f8 <OTM8009A_Init+0x3d0>)
 800758a:	21c5      	movs	r1, #197	; 0xc5
 800758c:	4638      	mov	r0, r7
 800758e:	f000 fbd1 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8007592:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8007594:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8007596:	4a99      	ldr	r2, [pc, #612]	; (80077fc <OTM8009A_Init+0x3d4>)
 8007598:	4619      	mov	r1, r3
 800759a:	4638      	mov	r0, r7
 800759c:	f000 fbca 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80075a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80075a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80075a4:	4a8b      	ldr	r2, [pc, #556]	; (80077d4 <OTM8009A_Init+0x3ac>)
 80075a6:	21c5      	movs	r1, #197	; 0xc5
 80075a8:	4638      	mov	r0, r7
 80075aa:	f000 fbc3 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80075ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80075b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80075b2:	4a7e      	ldr	r2, [pc, #504]	; (80077ac <OTM8009A_Init+0x384>)
 80075b4:	4619      	mov	r1, r3
 80075b6:	4638      	mov	r0, r7
 80075b8:	f000 fbbc 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80075bc:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80075be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80075c0:	4a8f      	ldr	r2, [pc, #572]	; (8007800 <OTM8009A_Init+0x3d8>)
 80075c2:	21d8      	movs	r1, #216	; 0xd8
 80075c4:	4638      	mov	r0, r7
 80075c6:	f000 fbb5 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80075ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80075cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80075ce:	4a8d      	ldr	r2, [pc, #564]	; (8007804 <OTM8009A_Init+0x3dc>)
 80075d0:	4619      	mov	r1, r3
 80075d2:	4638      	mov	r0, r7
 80075d4:	f000 fbae 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80075d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80075da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80075dc:	4a8a      	ldr	r2, [pc, #552]	; (8007808 <OTM8009A_Init+0x3e0>)
 80075de:	21c5      	movs	r1, #197	; 0xc5
 80075e0:	4638      	mov	r0, r7
 80075e2:	f000 fba7 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80075e6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80075e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80075ea:	4a88      	ldr	r2, [pc, #544]	; (800780c <OTM8009A_Init+0x3e4>)
 80075ec:	4619      	mov	r1, r3
 80075ee:	4638      	mov	r0, r7
 80075f0:	f000 fba0 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80075f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80075f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80075f8:	4a85      	ldr	r2, [pc, #532]	; (8007810 <OTM8009A_Init+0x3e8>)
 80075fa:	21c0      	movs	r1, #192	; 0xc0
 80075fc:	4638      	mov	r0, r7
 80075fe:	f000 fb99 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8007602:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8007604:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8007606:	4a83      	ldr	r2, [pc, #524]	; (8007814 <OTM8009A_Init+0x3ec>)
 8007608:	4619      	mov	r1, r3
 800760a:	4638      	mov	r0, r7
 800760c:	f000 fb92 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8007610:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8007612:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8007614:	4a80      	ldr	r2, [pc, #512]	; (8007818 <OTM8009A_Init+0x3f0>)
 8007616:	21c5      	movs	r1, #197	; 0xc5
 8007618:	4638      	mov	r0, r7
 800761a:	f000 fb8b 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800761e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8007620:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007622:	4a70      	ldr	r2, [pc, #448]	; (80077e4 <OTM8009A_Init+0x3bc>)
 8007624:	4619      	mov	r1, r3
 8007626:	4638      	mov	r0, r7
 8007628:	f000 fb84 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800762c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800762e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8007630:	4a7a      	ldr	r2, [pc, #488]	; (800781c <OTM8009A_Init+0x3f4>)
 8007632:	21c4      	movs	r1, #196	; 0xc4
 8007634:	4638      	mov	r0, r7
 8007636:	f000 fb7d 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800763a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800763c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800763e:	4a6b      	ldr	r2, [pc, #428]	; (80077ec <OTM8009A_Init+0x3c4>)
 8007640:	4619      	mov	r1, r3
 8007642:	4638      	mov	r0, r7
 8007644:	f000 fb76 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8007648:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800764a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800764c:	4a74      	ldr	r2, [pc, #464]	; (8007820 <OTM8009A_Init+0x3f8>)
 800764e:	21c1      	movs	r1, #193	; 0xc1
 8007650:	4638      	mov	r0, r7
 8007652:	f000 fb6f 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8007656:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8007658:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800765a:	4a72      	ldr	r2, [pc, #456]	; (8007824 <OTM8009A_Init+0x3fc>)
 800765c:	4619      	mov	r1, r3
 800765e:	4638      	mov	r0, r7
 8007660:	f000 fb68 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8007664:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8007666:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8007668:	4a6f      	ldr	r2, [pc, #444]	; (8007828 <OTM8009A_Init+0x400>)
 800766a:	21b3      	movs	r1, #179	; 0xb3
 800766c:	4638      	mov	r0, r7
 800766e:	f000 fb61 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007672:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8007674:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007676:	4a4f      	ldr	r2, [pc, #316]	; (80077b4 <OTM8009A_Init+0x38c>)
 8007678:	4619      	mov	r1, r3
 800767a:	4638      	mov	r0, r7
 800767c:	f000 fb5a 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8007680:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007682:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8007684:	4a69      	ldr	r2, [pc, #420]	; (800782c <OTM8009A_Init+0x404>)
 8007686:	21ce      	movs	r1, #206	; 0xce
 8007688:	4638      	mov	r0, r7
 800768a:	f000 fb53 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800768e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8007690:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007692:	4a67      	ldr	r2, [pc, #412]	; (8007830 <OTM8009A_Init+0x408>)
 8007694:	4619      	mov	r1, r3
 8007696:	4638      	mov	r0, r7
 8007698:	f000 fb4c 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800769c:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800769e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80076a0:	4a64      	ldr	r2, [pc, #400]	; (8007834 <OTM8009A_Init+0x40c>)
 80076a2:	21ce      	movs	r1, #206	; 0xce
 80076a4:	4638      	mov	r0, r7
 80076a6:	f000 fb45 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80076aa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80076ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80076ae:	4a62      	ldr	r2, [pc, #392]	; (8007838 <OTM8009A_Init+0x410>)
 80076b0:	4619      	mov	r1, r3
 80076b2:	4638      	mov	r0, r7
 80076b4:	f000 fb3e 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80076b8:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80076ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80076bc:	4a5f      	ldr	r2, [pc, #380]	; (800783c <OTM8009A_Init+0x414>)
 80076be:	21ce      	movs	r1, #206	; 0xce
 80076c0:	4638      	mov	r0, r7
 80076c2:	f000 fb37 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80076c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80076c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80076ca:	4a5d      	ldr	r2, [pc, #372]	; (8007840 <OTM8009A_Init+0x418>)
 80076cc:	4619      	mov	r1, r3
 80076ce:	4638      	mov	r0, r7
 80076d0:	f000 fb30 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80076d4:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80076d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80076d8:	4a5a      	ldr	r2, [pc, #360]	; (8007844 <OTM8009A_Init+0x41c>)
 80076da:	21cf      	movs	r1, #207	; 0xcf
 80076dc:	4638      	mov	r0, r7
 80076de:	f000 fb29 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80076e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80076e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80076e6:	4a58      	ldr	r2, [pc, #352]	; (8007848 <OTM8009A_Init+0x420>)
 80076e8:	4619      	mov	r1, r3
 80076ea:	4638      	mov	r0, r7
 80076ec:	f000 fb22 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80076f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80076f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80076f4:	4a55      	ldr	r2, [pc, #340]	; (800784c <OTM8009A_Init+0x424>)
 80076f6:	21cf      	movs	r1, #207	; 0xcf
 80076f8:	4638      	mov	r0, r7
 80076fa:	f000 fb1b 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80076fe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8007700:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007702:	4a2c      	ldr	r2, [pc, #176]	; (80077b4 <OTM8009A_Init+0x38c>)
 8007704:	4619      	mov	r1, r3
 8007706:	4638      	mov	r0, r7
 8007708:	f000 fb14 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800770c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800770e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8007710:	4a4f      	ldr	r2, [pc, #316]	; (8007850 <OTM8009A_Init+0x428>)
 8007712:	21cb      	movs	r1, #203	; 0xcb
 8007714:	4638      	mov	r0, r7
 8007716:	f000 fb0d 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800771a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800771c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800771e:	4a4d      	ldr	r2, [pc, #308]	; (8007854 <OTM8009A_Init+0x42c>)
 8007720:	4619      	mov	r1, r3
 8007722:	4638      	mov	r0, r7
 8007724:	f000 fb06 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8007728:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800772a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800772c:	4a4a      	ldr	r2, [pc, #296]	; (8007858 <OTM8009A_Init+0x430>)
 800772e:	21cb      	movs	r1, #203	; 0xcb
 8007730:	4638      	mov	r0, r7
 8007732:	f000 faff 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007736:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8007738:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800773a:	4a3d      	ldr	r2, [pc, #244]	; (8007830 <OTM8009A_Init+0x408>)
 800773c:	4619      	mov	r1, r3
 800773e:	4638      	mov	r0, r7
 8007740:	f000 faf8 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007744:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007746:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007748:	4a44      	ldr	r2, [pc, #272]	; (800785c <OTM8009A_Init+0x434>)
 800774a:	21cb      	movs	r1, #203	; 0xcb
 800774c:	4638      	mov	r0, r7
 800774e:	f000 faf1 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007752:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007754:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007756:	4a38      	ldr	r2, [pc, #224]	; (8007838 <OTM8009A_Init+0x410>)
 8007758:	4619      	mov	r1, r3
 800775a:	4638      	mov	r0, r7
 800775c:	f000 faea 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007760:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007762:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007764:	4a3e      	ldr	r2, [pc, #248]	; (8007860 <OTM8009A_Init+0x438>)
 8007766:	21cb      	movs	r1, #203	; 0xcb
 8007768:	4638      	mov	r0, r7
 800776a:	f000 fae3 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800776e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007770:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007772:	4a33      	ldr	r2, [pc, #204]	; (8007840 <OTM8009A_Init+0x418>)
 8007774:	4619      	mov	r1, r3
 8007776:	4638      	mov	r0, r7
 8007778:	f000 fadc 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800777c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800777e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8007780:	4a38      	ldr	r2, [pc, #224]	; (8007864 <OTM8009A_Init+0x43c>)
 8007782:	21cb      	movs	r1, #203	; 0xcb
 8007784:	4638      	mov	r0, r7
 8007786:	f000 fad5 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800778a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800778c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800778e:	4a2e      	ldr	r2, [pc, #184]	; (8007848 <OTM8009A_Init+0x420>)
 8007790:	4619      	mov	r1, r3
 8007792:	4638      	mov	r0, r7
 8007794:	f000 face 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8007798:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800779a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800779c:	4a32      	ldr	r2, [pc, #200]	; (8007868 <OTM8009A_Init+0x440>)
 800779e:	21cb      	movs	r1, #203	; 0xcb
 80077a0:	4638      	mov	r0, r7
 80077a2:	f000 fac7 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80077a6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80077a8:	4404      	add	r4, r0
 80077aa:	e05f      	b.n	800786c <OTM8009A_Init+0x444>
 80077ac:	080bf635 	.word	0x080bf635
 80077b0:	080bf504 	.word	0x080bf504
 80077b4:	080bf636 	.word	0x080bf636
 80077b8:	080bf590 	.word	0x080bf590
 80077bc:	080bf637 	.word	0x080bf637
 80077c0:	080bf638 	.word	0x080bf638
 80077c4:	080bf639 	.word	0x080bf639
 80077c8:	080bf63a 	.word	0x080bf63a
 80077cc:	080bf63b 	.word	0x080bf63b
 80077d0:	080bf63c 	.word	0x080bf63c
 80077d4:	080bf63d 	.word	0x080bf63d
 80077d8:	080bf63e 	.word	0x080bf63e
 80077dc:	080bf63f 	.word	0x080bf63f
 80077e0:	080bf640 	.word	0x080bf640
 80077e4:	080bf641 	.word	0x080bf641
 80077e8:	080bf642 	.word	0x080bf642
 80077ec:	080bf643 	.word	0x080bf643
 80077f0:	080bf644 	.word	0x080bf644
 80077f4:	080bf645 	.word	0x080bf645
 80077f8:	080bf646 	.word	0x080bf646
 80077fc:	080bf647 	.word	0x080bf647
 8007800:	080bf604 	.word	0x080bf604
 8007804:	080bf648 	.word	0x080bf648
 8007808:	080bf649 	.word	0x080bf649
 800780c:	080bf64a 	.word	0x080bf64a
 8007810:	080bf64b 	.word	0x080bf64b
 8007814:	080bf64c 	.word	0x080bf64c
 8007818:	080bf64d 	.word	0x080bf64d
 800781c:	080bf64e 	.word	0x080bf64e
 8007820:	080bf64f 	.word	0x080bf64f
 8007824:	080bf650 	.word	0x080bf650
 8007828:	080bf608 	.word	0x080bf608
 800782c:	080bf60c 	.word	0x080bf60c
 8007830:	080bf651 	.word	0x080bf651
 8007834:	080bf614 	.word	0x080bf614
 8007838:	080bf652 	.word	0x080bf652
 800783c:	080bf624 	.word	0x080bf624
 8007840:	080bf653 	.word	0x080bf653
 8007844:	080bf508 	.word	0x080bf508
 8007848:	080bf654 	.word	0x080bf654
 800784c:	080bf661 	.word	0x080bf661
 8007850:	080bf514 	.word	0x080bf514
 8007854:	080bf655 	.word	0x080bf655
 8007858:	080bf520 	.word	0x080bf520
 800785c:	080bf530 	.word	0x080bf530
 8007860:	080bf540 	.word	0x080bf540
 8007864:	080bf54c 	.word	0x080bf54c
 8007868:	080bf55c 	.word	0x080bf55c
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800786c:	4aa7      	ldr	r2, [pc, #668]	; (8007b0c <OTM8009A_Init+0x6e4>)
 800786e:	4619      	mov	r1, r3
 8007870:	4638      	mov	r0, r7
 8007872:	f000 fa5f 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8007876:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8007878:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800787a:	4aa5      	ldr	r2, [pc, #660]	; (8007b10 <OTM8009A_Init+0x6e8>)
 800787c:	21cb      	movs	r1, #203	; 0xcb
 800787e:	4638      	mov	r0, r7
 8007880:	f000 fa58 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007884:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8007886:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007888:	4aa2      	ldr	r2, [pc, #648]	; (8007b14 <OTM8009A_Init+0x6ec>)
 800788a:	4619      	mov	r1, r3
 800788c:	4638      	mov	r0, r7
 800788e:	f000 fa51 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007892:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007894:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007896:	4aa0      	ldr	r2, [pc, #640]	; (8007b18 <OTM8009A_Init+0x6f0>)
 8007898:	21cb      	movs	r1, #203	; 0xcb
 800789a:	4638      	mov	r0, r7
 800789c:	f000 fa4a 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80078a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80078a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80078a4:	4a9d      	ldr	r2, [pc, #628]	; (8007b1c <OTM8009A_Init+0x6f4>)
 80078a6:	4619      	mov	r1, r3
 80078a8:	4638      	mov	r0, r7
 80078aa:	f000 fa43 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80078ae:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80078b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80078b2:	4a9b      	ldr	r2, [pc, #620]	; (8007b20 <OTM8009A_Init+0x6f8>)
 80078b4:	21cc      	movs	r1, #204	; 0xcc
 80078b6:	4638      	mov	r0, r7
 80078b8:	f000 fa3c 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80078bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80078be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80078c0:	4a98      	ldr	r2, [pc, #608]	; (8007b24 <OTM8009A_Init+0x6fc>)
 80078c2:	4619      	mov	r1, r3
 80078c4:	4638      	mov	r0, r7
 80078c6:	f000 fa35 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80078ca:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80078cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80078ce:	4a96      	ldr	r2, [pc, #600]	; (8007b28 <OTM8009A_Init+0x700>)
 80078d0:	21cc      	movs	r1, #204	; 0xcc
 80078d2:	4638      	mov	r0, r7
 80078d4:	f000 fa2e 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80078d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80078da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80078dc:	4a93      	ldr	r2, [pc, #588]	; (8007b2c <OTM8009A_Init+0x704>)
 80078de:	4619      	mov	r1, r3
 80078e0:	4638      	mov	r0, r7
 80078e2:	f000 fa27 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80078e6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80078e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80078ea:	4a91      	ldr	r2, [pc, #580]	; (8007b30 <OTM8009A_Init+0x708>)
 80078ec:	21cc      	movs	r1, #204	; 0xcc
 80078ee:	4638      	mov	r0, r7
 80078f0:	f000 fa20 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80078f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80078f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80078f8:	4a8e      	ldr	r2, [pc, #568]	; (8007b34 <OTM8009A_Init+0x70c>)
 80078fa:	4619      	mov	r1, r3
 80078fc:	4638      	mov	r0, r7
 80078fe:	f000 fa19 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007902:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007904:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007906:	4a8c      	ldr	r2, [pc, #560]	; (8007b38 <OTM8009A_Init+0x710>)
 8007908:	21cc      	movs	r1, #204	; 0xcc
 800790a:	4638      	mov	r0, r7
 800790c:	f000 fa12 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007910:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007912:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007914:	4a89      	ldr	r2, [pc, #548]	; (8007b3c <OTM8009A_Init+0x714>)
 8007916:	4619      	mov	r1, r3
 8007918:	4638      	mov	r0, r7
 800791a:	f000 fa0b 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800791e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007920:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007922:	4a87      	ldr	r2, [pc, #540]	; (8007b40 <OTM8009A_Init+0x718>)
 8007924:	21cc      	movs	r1, #204	; 0xcc
 8007926:	4638      	mov	r0, r7
 8007928:	f000 fa04 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800792c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800792e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007930:	4a84      	ldr	r2, [pc, #528]	; (8007b44 <OTM8009A_Init+0x71c>)
 8007932:	4619      	mov	r1, r3
 8007934:	4638      	mov	r0, r7
 8007936:	f000 f9fd 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800793a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800793c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800793e:	4a82      	ldr	r2, [pc, #520]	; (8007b48 <OTM8009A_Init+0x720>)
 8007940:	21cc      	movs	r1, #204	; 0xcc
 8007942:	4638      	mov	r0, r7
 8007944:	f000 f9f6 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007948:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800794a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800794c:	4a7f      	ldr	r2, [pc, #508]	; (8007b4c <OTM8009A_Init+0x724>)
 800794e:	4619      	mov	r1, r3
 8007950:	4638      	mov	r0, r7
 8007952:	f000 f9ef 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007956:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007958:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800795a:	4a7d      	ldr	r2, [pc, #500]	; (8007b50 <OTM8009A_Init+0x728>)
 800795c:	21c5      	movs	r1, #197	; 0xc5
 800795e:	4638      	mov	r0, r7
 8007960:	f000 f9e8 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007964:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007966:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007968:	4a7a      	ldr	r2, [pc, #488]	; (8007b54 <OTM8009A_Init+0x72c>)
 800796a:	4619      	mov	r1, r3
 800796c:	4638      	mov	r0, r7
 800796e:	f000 f9e1 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007972:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007974:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007976:	4a78      	ldr	r2, [pc, #480]	; (8007b58 <OTM8009A_Init+0x730>)
 8007978:	21f5      	movs	r1, #245	; 0xf5
 800797a:	4638      	mov	r0, r7
 800797c:	f000 f9da 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8007980:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007982:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8007984:	4a75      	ldr	r2, [pc, #468]	; (8007b5c <OTM8009A_Init+0x734>)
 8007986:	4619      	mov	r1, r3
 8007988:	4638      	mov	r0, r7
 800798a:	f000 f9d3 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800798e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8007990:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8007992:	4a73      	ldr	r2, [pc, #460]	; (8007b60 <OTM8009A_Init+0x738>)
 8007994:	21c6      	movs	r1, #198	; 0xc6
 8007996:	4638      	mov	r0, r7
 8007998:	f000 f9cc 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800799c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800799e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079a0:	4a70      	ldr	r2, [pc, #448]	; (8007b64 <OTM8009A_Init+0x73c>)
 80079a2:	4619      	mov	r1, r3
 80079a4:	4638      	mov	r0, r7
 80079a6:	f000 f9c5 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80079aa:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80079ae:	4a6e      	ldr	r2, [pc, #440]	; (8007b68 <OTM8009A_Init+0x740>)
 80079b0:	21ff      	movs	r1, #255	; 0xff
 80079b2:	4638      	mov	r0, r7
 80079b4:	f000 f9be 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80079ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079bc:	4a69      	ldr	r2, [pc, #420]	; (8007b64 <OTM8009A_Init+0x73c>)
 80079be:	4619      	mov	r1, r3
 80079c0:	4638      	mov	r0, r7
 80079c2:	f000 f9b7 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079ca:	4a66      	ldr	r2, [pc, #408]	; (8007b64 <OTM8009A_Init+0x73c>)
 80079cc:	4619      	mov	r1, r3
 80079ce:	4638      	mov	r0, r7
 80079d0:	f000 f9b0 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80079d4:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80079d8:	4a64      	ldr	r2, [pc, #400]	; (8007b6c <OTM8009A_Init+0x744>)
 80079da:	21e1      	movs	r1, #225	; 0xe1
 80079dc:	4638      	mov	r0, r7
 80079de:	f000 f9a9 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80079e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079e6:	4a5f      	ldr	r2, [pc, #380]	; (8007b64 <OTM8009A_Init+0x73c>)
 80079e8:	4619      	mov	r1, r3
 80079ea:	4638      	mov	r0, r7
 80079ec:	f000 f9a2 	bl	8007d34 <otm8009a_write_reg>
 80079f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80079f2:	2310      	movs	r3, #16
 80079f4:	4a5e      	ldr	r2, [pc, #376]	; (8007b70 <OTM8009A_Init+0x748>)
 80079f6:	21e2      	movs	r1, #226	; 0xe2
 80079f8:	4638      	mov	r0, r7
 80079fa:	f000 f99b 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80079fe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8007a00:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8007a02:	4a5c      	ldr	r2, [pc, #368]	; (8007b74 <OTM8009A_Init+0x74c>)
 8007a04:	2111      	movs	r1, #17
 8007a06:	4638      	mov	r0, r7
 8007a08:	f000 f994 	bl	8007d34 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8007a0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8007a10:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8007a12:	4798      	blx	r3
 8007a14:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8007a16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a1a:	4798      	blx	r3
 8007a1c:	1b40      	subs	r0, r0, r5
 8007a1e:	2877      	cmp	r0, #119	; 0x77
 8007a20:	d9f9      	bls.n	8007a16 <OTM8009A_Init+0x5ee>
  switch(ColorCoding)
 8007a22:	f1b9 0f00 	cmp.w	r9, #0
 8007a26:	d06d      	beq.n	8007b04 <OTM8009A_Init+0x6dc>
 8007a28:	f1b9 0f02 	cmp.w	r9, #2
 8007a2c:	d14a      	bne.n	8007ac4 <OTM8009A_Init+0x69c>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8007a2e:	2300      	movs	r3, #0
 8007a30:	4a51      	ldr	r2, [pc, #324]	; (8007b78 <OTM8009A_Init+0x750>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8007a32:	213a      	movs	r1, #58	; 0x3a
 8007a34:	4638      	mov	r0, r7
 8007a36:	f000 f97d 	bl	8007d34 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8007a3a:	4d50      	ldr	r5, [pc, #320]	; (8007b7c <OTM8009A_Init+0x754>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007a3c:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8007a40:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8007a42:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007a46:	d041      	beq.n	8007acc <OTM8009A_Init+0x6a4>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4a4c      	ldr	r2, [pc, #304]	; (8007b80 <OTM8009A_Init+0x758>)
 8007a50:	2151      	movs	r1, #81	; 0x51
 8007a52:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8007a54:	4699      	mov	r9, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8007a56:	f000 f96d 	bl	8007d34 <otm8009a_write_reg>
 8007a5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8007a5c:	4a49      	ldr	r2, [pc, #292]	; (8007b84 <OTM8009A_Init+0x75c>)
 8007a5e:	464b      	mov	r3, r9
 8007a60:	2153      	movs	r1, #83	; 0x53
 8007a62:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8007a64:	f8c5 9008 	str.w	r9, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8007a68:	f000 f964 	bl	8007d34 <otm8009a_write_reg>
 8007a6c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8007a6e:	464b      	mov	r3, r9
 8007a70:	4a45      	ldr	r2, [pc, #276]	; (8007b88 <OTM8009A_Init+0x760>)
 8007a72:	2155      	movs	r1, #85	; 0x55
 8007a74:	4638      	mov	r0, r7
 8007a76:	f000 f95d 	bl	8007d34 <otm8009a_write_reg>
 8007a7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	4a43      	ldr	r2, [pc, #268]	; (8007b8c <OTM8009A_Init+0x764>)
 8007a80:	215e      	movs	r1, #94	; 0x5e
 8007a82:	4638      	mov	r0, r7
 8007a84:	f000 f956 	bl	8007d34 <otm8009a_write_reg>
 8007a88:	1825      	adds	r5, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8007a8a:	464b      	mov	r3, r9
 8007a8c:	4a40      	ldr	r2, [pc, #256]	; (8007b90 <OTM8009A_Init+0x768>)
 8007a8e:	2129      	movs	r1, #41	; 0x29
 8007a90:	4638      	mov	r0, r7
 8007a92:	f000 f94f 	bl	8007d34 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007a96:	464b      	mov	r3, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8007a98:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	4a31      	ldr	r2, [pc, #196]	; (8007b64 <OTM8009A_Init+0x73c>)
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	f000 f948 	bl	8007d34 <otm8009a_write_reg>
 8007aa4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8007aa6:	464b      	mov	r3, r9
 8007aa8:	4a3a      	ldr	r2, [pc, #232]	; (8007b94 <OTM8009A_Init+0x76c>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007aaa:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8007aac:	4638      	mov	r0, r7
 8007aae:	212c      	movs	r1, #44	; 0x2c
 8007ab0:	f000 f940 	bl	8007d34 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8007ab4:	42c4      	cmn	r4, r0
}
 8007ab6:	bf14      	ite	ne
 8007ab8:	f04f 30ff 	movne.w	r0, #4294967295
 8007abc:	4648      	moveq	r0, r9
 8007abe:	b003      	add	sp, #12
 8007ac0:	e8bd 87b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007ac4:	f1ba 0f01 	cmp.w	sl, #1
 8007ac8:	4d2c      	ldr	r5, [pc, #176]	; (8007b7c <OTM8009A_Init+0x754>)
 8007aca:	d1bd      	bne.n	8007a48 <OTM8009A_Init+0x620>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007acc:	2360      	movs	r3, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8007ace:	f10d 0207 	add.w	r2, sp, #7
 8007ad2:	2136      	movs	r1, #54	; 0x36
 8007ad4:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007ad6:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8007ada:	2300      	movs	r3, #0
 8007adc:	f000 f92a 	bl	8007d34 <otm8009a_write_reg>
 8007ae0:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007ae2:	2304      	movs	r3, #4
 8007ae4:	4a2c      	ldr	r2, [pc, #176]	; (8007b98 <OTM8009A_Init+0x770>)
 8007ae6:	212a      	movs	r1, #42	; 0x2a
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f000 f923 	bl	8007d34 <otm8009a_write_reg>
 8007aee:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007af0:	2304      	movs	r3, #4
 8007af2:	4a2a      	ldr	r2, [pc, #168]	; (8007b9c <OTM8009A_Init+0x774>)
 8007af4:	212b      	movs	r1, #43	; 0x2b
 8007af6:	4638      	mov	r0, r7
 8007af8:	f000 f91c 	bl	8007d34 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8007afc:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007b00:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8007b02:	e7a3      	b.n	8007a4c <OTM8009A_Init+0x624>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8007b04:	464b      	mov	r3, r9
 8007b06:	4a26      	ldr	r2, [pc, #152]	; (8007ba0 <OTM8009A_Init+0x778>)
 8007b08:	e793      	b.n	8007a32 <OTM8009A_Init+0x60a>
 8007b0a:	bf00      	nop
 8007b0c:	080bf656 	.word	0x080bf656
 8007b10:	080bf56c 	.word	0x080bf56c
 8007b14:	080bf657 	.word	0x080bf657
 8007b18:	080bf578 	.word	0x080bf578
 8007b1c:	080bf636 	.word	0x080bf636
 8007b20:	080bf584 	.word	0x080bf584
 8007b24:	080bf655 	.word	0x080bf655
 8007b28:	080bf594 	.word	0x080bf594
 8007b2c:	080bf651 	.word	0x080bf651
 8007b30:	080bf5a4 	.word	0x080bf5a4
 8007b34:	080bf652 	.word	0x080bf652
 8007b38:	080bf5b4 	.word	0x080bf5b4
 8007b3c:	080bf653 	.word	0x080bf653
 8007b40:	080bf5c0 	.word	0x080bf5c0
 8007b44:	080bf654 	.word	0x080bf654
 8007b48:	080bf5d0 	.word	0x080bf5d0
 8007b4c:	080bf641 	.word	0x080bf641
 8007b50:	080bf662 	.word	0x080bf662
 8007b54:	080bf663 	.word	0x080bf663
 8007b58:	080bf664 	.word	0x080bf664
 8007b5c:	080bf665 	.word	0x080bf665
 8007b60:	080bf666 	.word	0x080bf666
 8007b64:	080bf635 	.word	0x080bf635
 8007b68:	080bf5e0 	.word	0x080bf5e0
 8007b6c:	080bf5e4 	.word	0x080bf5e4
 8007b70:	080bf5f4 	.word	0x080bf5f4
 8007b74:	080bf658 	.word	0x080bf658
 8007b78:	080bf659 	.word	0x080bf659
 8007b7c:	2400901c 	.word	0x2400901c
 8007b80:	080bf65b 	.word	0x080bf65b
 8007b84:	080bf65c 	.word	0x080bf65c
 8007b88:	080bf65d 	.word	0x080bf65d
 8007b8c:	080bf65e 	.word	0x080bf65e
 8007b90:	080bf65f 	.word	0x080bf65f
 8007b94:	080bf660 	.word	0x080bf660
 8007b98:	080bf4fc 	.word	0x080bf4fc
 8007b9c:	080bf500 	.word	0x080bf500
 8007ba0:	080bf65a 	.word	0x080bf65a

08007ba4 <OTM8009A_SetBrightness>:
{
 8007ba4:	b530      	push	{r4, r5, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8007ba6:	ebc1 2c01 	rsb	ip, r1, r1, lsl #8
 8007baa:	4d0c      	ldr	r5, [pc, #48]	; (8007bdc <OTM8009A_SetBrightness+0x38>)
{
 8007bac:	460c      	mov	r4, r1
 8007bae:	b083      	sub	sp, #12
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8007bb0:	fba5 1c0c 	umull	r1, ip, r5, ip
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f10d 0207 	add.w	r2, sp, #7
 8007bba:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8007bbc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8007bc0:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8007bc2:	f88d c007 	strb.w	ip, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8007bc6:	f000 f8b5 	bl	8007d34 <otm8009a_write_reg>
 8007bca:	b918      	cbnz	r0, 8007bd4 <OTM8009A_SetBrightness+0x30>
    OTM8009ACtx.Brightness = Brightness;
 8007bcc:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <OTM8009A_SetBrightness+0x3c>)
 8007bce:	609c      	str	r4, [r3, #8]
}
 8007bd0:	b003      	add	sp, #12
 8007bd2:	bd30      	pop	{r4, r5, pc}
    ret = OTM8009A_ERROR;
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8007bd8:	e7fa      	b.n	8007bd0 <OTM8009A_SetBrightness+0x2c>
 8007bda:	bf00      	nop
 8007bdc:	51eb851f 	.word	0x51eb851f
 8007be0:	2400901c 	.word	0x2400901c

08007be4 <OTM8009A_DisplayOn>:
{
 8007be4:	b500      	push	{lr}
 8007be6:	b083      	sub	sp, #12
  uint8_t display = 0;
 8007be8:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8007bea:	2129      	movs	r1, #41	; 0x29
 8007bec:	3010      	adds	r0, #16
 8007bee:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8007bf2:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8007bf6:	f000 f89d 	bl	8007d34 <otm8009a_write_reg>
 8007bfa:	3800      	subs	r0, #0
 8007bfc:	bf18      	it	ne
 8007bfe:	2001      	movne	r0, #1
}
 8007c00:	4240      	negs	r0, r0
 8007c02:	b003      	add	sp, #12
 8007c04:	f85d fb04 	ldr.w	pc, [sp], #4

08007c08 <OTM8009A_DisplayOff>:
{
 8007c08:	b500      	push	{lr}
 8007c0a:	b083      	sub	sp, #12
  uint8_t display = 0;
 8007c0c:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8007c0e:	2128      	movs	r1, #40	; 0x28
 8007c10:	3010      	adds	r0, #16
 8007c12:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8007c16:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8007c1a:	f000 f88b 	bl	8007d34 <otm8009a_write_reg>
 8007c1e:	3800      	subs	r0, #0
 8007c20:	bf18      	it	ne
 8007c22:	2001      	movne	r0, #1
}
 8007c24:	4240      	negs	r0, r0
 8007c26:	b003      	add	sp, #12
 8007c28:	f85d fb04 	ldr.w	pc, [sp], #4

08007c2c <OTM8009A_SetOrientation>:
{
 8007c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007c2e:	2360      	movs	r3, #96	; 0x60
{
 8007c30:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8007c32:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8007c34:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007c36:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8007c3a:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8007c3e:	d83e      	bhi.n	8007cbe <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007c40:	d020      	beq.n	8007c84 <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8007c42:	f100 0510 	add.w	r5, r0, #16
 8007c46:	4633      	mov	r3, r6
 8007c48:	f10d 0207 	add.w	r2, sp, #7
 8007c4c:	2136      	movs	r1, #54	; 0x36
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f000 f870 	bl	8007d34 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007c54:	2304      	movs	r3, #4
 8007c56:	4a1b      	ldr	r2, [pc, #108]	; (8007cc4 <OTM8009A_SetOrientation+0x98>)
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8007c58:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007c5a:	212a      	movs	r1, #42	; 0x2a
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f000 f869 	bl	8007d34 <otm8009a_write_reg>
 8007c62:	4602      	mov	r2, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007c64:	2304      	movs	r3, #4
 8007c66:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007c68:	4414      	add	r4, r2
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007c6a:	212b      	movs	r1, #43	; 0x2b
 8007c6c:	4a16      	ldr	r2, [pc, #88]	; (8007cc8 <OTM8009A_SetOrientation+0x9c>)
 8007c6e:	f000 f861 	bl	8007d34 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8007c72:	4b16      	ldr	r3, [pc, #88]	; (8007ccc <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007c74:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8007c76:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 8007c78:	3800      	subs	r0, #0
 8007c7a:	bf18      	it	ne
 8007c7c:	2001      	movne	r0, #1
 8007c7e:	4240      	negs	r0, r0
}
 8007c80:	b003      	add	sp, #12
 8007c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8007c84:	f100 0510 	add.w	r5, r0, #16
 8007c88:	460f      	mov	r7, r1
 8007c8a:	4633      	mov	r3, r6
 8007c8c:	f10d 0206 	add.w	r2, sp, #6
 8007c90:	2136      	movs	r1, #54	; 0x36
 8007c92:	4628      	mov	r0, r5
 8007c94:	f000 f84e 	bl	8007d34 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007c98:	2304      	movs	r3, #4
 8007c9a:	4a0a      	ldr	r2, [pc, #40]	; (8007cc4 <OTM8009A_SetOrientation+0x98>)
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8007c9c:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007c9e:	212a      	movs	r1, #42	; 0x2a
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f000 f847 	bl	8007d34 <otm8009a_write_reg>
 8007ca6:	4602      	mov	r2, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007ca8:	2304      	movs	r3, #4
 8007caa:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007cac:	4414      	add	r4, r2
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007cae:	212b      	movs	r1, #43	; 0x2b
 8007cb0:	4a05      	ldr	r2, [pc, #20]	; (8007cc8 <OTM8009A_SetOrientation+0x9c>)
 8007cb2:	f000 f83f 	bl	8007d34 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8007cb6:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007cb8:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8007cba:	601f      	str	r7, [r3, #0]
 8007cbc:	e7dc      	b.n	8007c78 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 8007cbe:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007cc2:	e7dd      	b.n	8007c80 <OTM8009A_SetOrientation+0x54>
 8007cc4:	080bf4fc 	.word	0x080bf4fc
 8007cc8:	080bf500 	.word	0x080bf500
 8007ccc:	2400901c 	.word	0x2400901c

08007cd0 <OTM8009A_ReadID>:
{ 
 8007cd0:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8007cd2:	3010      	adds	r0, #16
 8007cd4:	21da      	movs	r1, #218	; 0xda
{ 
 8007cd6:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f000 f823 	bl	8007d24 <otm8009a_read_reg>
 8007cde:	3800      	subs	r0, #0
 8007ce0:	bf18      	it	ne
 8007ce2:	2001      	movne	r0, #1
}  
 8007ce4:	4240      	negs	r0, r0
 8007ce6:	bd08      	pop	{r3, pc}

08007ce8 <OTM8009A_DrawVLine>:
 8007ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop

08007cf0 <OTM8009A_GetPixel>:
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop

08007cf8 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	b160      	cbz	r0, 8007d16 <OTM8009A_RegisterBusIO+0x1e>
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007cfc:	e9d1 0201 	ldrd	r0, r2, [r1, #4]
    pObj->IO.GetTick   = pIO->GetTick;
 8007d00:	68c9      	ldr	r1, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8007d02:	619b      	str	r3, [r3, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8007d04:	60d9      	str	r1, [r3, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8007d06:	4905      	ldr	r1, [pc, #20]	; (8007d1c <OTM8009A_RegisterBusIO+0x24>)
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007d08:	e9c3 0201 	strd	r0, r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8007d0c:	4a04      	ldr	r2, [pc, #16]	; (8007d20 <OTM8009A_RegisterBusIO+0x28>)
  int32_t ret = OTM8009A_OK;
 8007d0e:	2000      	movs	r0, #0
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8007d10:	e9c3 2104 	strd	r2, r1, [r3, #16]
    pObj->Ctx.handle   = pObj;
 8007d14:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8007d16:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007d1a:	4770      	bx	lr
 8007d1c:	08007409 	.word	0x08007409
 8007d20:	08007419 	.word	0x08007419

08007d24 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8007d24:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8007d26:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8007d2a:	46a4      	mov	ip, r4
}
 8007d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8007d30:	4760      	bx	ip
 8007d32:	bf00      	nop

08007d34 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8007d34:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8007d36:	6804      	ldr	r4, [r0, #0]
 8007d38:	6880      	ldr	r0, [r0, #8]
 8007d3a:	46a4      	mov	ip, r4
}
 8007d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8007d40:	4760      	bx	ip
 8007d42:	bf00      	nop

08007d44 <OV5640_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
  if (pObj->IsInitialized == 1U)
 8007d44:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d102      	bne.n	8007d52 <OV5640_DeInit+0xe>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV5640_OK;
}
 8007d52:	2000      	movs	r0, #0
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop

08007d58 <OV5640_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
}
 8007d58:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop

08007d60 <OV5640_GetCapabilities>:
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
  int32_t ret;

  if (pObj == NULL)
 8007d60:	b160      	cbz	r0, 8007d7c <OV5640_GetCapabilities+0x1c>
  {
    ret = OV5640_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8007d62:	2301      	movs	r3, #1
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 1;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 1;

    ret = OV5640_OK;
 8007d64:	2000      	movs	r0, #0
    Capabilities->Config_Brightness    = 1;
 8007d66:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_LightMode     = 1;
 8007d68:	604b      	str	r3, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8007d6a:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 8007d6c:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8007d6e:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 1;
 8007d70:	610b      	str	r3, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 8007d72:	608b      	str	r3, [r1, #8]
    Capabilities->Config_Zoom          = 1;
 8007d74:	620b      	str	r3, [r1, #32]
    Capabilities->Config_HueDegree     = 1;
 8007d76:	e9c1 3305 	strd	r3, r3, [r1, #20]
    ret = OV5640_OK;
 8007d7a:	4770      	bx	lr
    ret = OV5640_ERROR;
 8007d7c:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop

08007d84 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007d84:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007d86:	6904      	ldr	r4, [r0, #16]
 8007d88:	8900      	ldrh	r0, [r0, #8]
 8007d8a:	46a4      	mov	ip, r4
}
 8007d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007d90:	4760      	bx	ip
 8007d92:	bf00      	nop

08007d94 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007d94:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007d96:	68c4      	ldr	r4, [r0, #12]
 8007d98:	8900      	ldrh	r0, [r0, #8]
 8007d9a:	46a4      	mov	ip, r4
}
 8007d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007da0:	4760      	bx	ip
 8007da2:	bf00      	nop

08007da4 <OV5640_SetResolution>:
  if (Resolution > OV5640_R800x480)
 8007da4:	2904      	cmp	r1, #4
 8007da6:	d865      	bhi.n	8007e74 <OV5640_SetResolution+0xd0>
    switch (Resolution)
 8007da8:	3901      	subs	r1, #1
{
 8007daa:	b5f0      	push	{r4, r5, r6, r7, lr}
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8007dac:	f100 0418 	add.w	r4, r0, #24
{
 8007db0:	b083      	sub	sp, #12
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8007db2:	2600      	movs	r6, #0
    switch (Resolution)
 8007db4:	2903      	cmp	r1, #3
 8007db6:	d860      	bhi.n	8007e7a <OV5640_SetResolution+0xd6>
 8007db8:	e8df f001 	tbb	[pc, r1]
 8007dbc:	02182d42 	.word	0x02182d42
          if (ret != OV5640_ERROR)
 8007dc0:	f10d 0507 	add.w	r5, sp, #7
 8007dc4:	4f37      	ldr	r7, [pc, #220]	; (8007ea4 <OV5640_SetResolution+0x100>)
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8007dc6:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8007dca:	2301      	movs	r3, #1
 8007dcc:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007dd0:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8007dd2:	8852      	ldrh	r2, [r2, #2]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8007dd4:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8007dd6:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8007dda:	462a      	mov	r2, r5
 8007ddc:	f001 f854 	bl	8008e88 <ov5640_write_reg>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d044      	beq.n	8007e6e <OV5640_SetResolution+0xca>
    ret = OV5640_ERROR;
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007de8:	b003      	add	sp, #12
 8007dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (ret != OV5640_ERROR)
 8007dec:	f10d 0507 	add.w	r5, sp, #7
 8007df0:	4f2d      	ldr	r7, [pc, #180]	; (8007ea8 <OV5640_SetResolution+0x104>)
            tmp = (uint8_t)OV5640_VGA[index][1];
 8007df2:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8007df6:	2301      	movs	r3, #1
 8007df8:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007dfc:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_VGA[index][1];
 8007dfe:	8852      	ldrh	r2, [r2, #2]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8007e00:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_VGA[index][1];
 8007e02:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8007e06:	462a      	mov	r2, r5
 8007e08:	f001 f83e 	bl	8008e88 <ov5640_write_reg>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d1e9      	bne.n	8007de4 <OV5640_SetResolution+0x40>
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8007e10:	2e04      	cmp	r6, #4
 8007e12:	d1ee      	bne.n	8007df2 <OV5640_SetResolution+0x4e>
 8007e14:	e028      	b.n	8007e68 <OV5640_SetResolution+0xc4>
          if (ret != OV5640_ERROR)
 8007e16:	f10d 0507 	add.w	r5, sp, #7
 8007e1a:	4f24      	ldr	r7, [pc, #144]	; (8007eac <OV5640_SetResolution+0x108>)
            tmp = (uint8_t)OV5640_480x272[index][1];
 8007e1c:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8007e20:	2301      	movs	r3, #1
 8007e22:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007e26:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_480x272[index][1];
 8007e28:	8852      	ldrh	r2, [r2, #2]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8007e2a:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_480x272[index][1];
 8007e2c:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8007e30:	462a      	mov	r2, r5
 8007e32:	f001 f829 	bl	8008e88 <ov5640_write_reg>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d1d4      	bne.n	8007de4 <OV5640_SetResolution+0x40>
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8007e3a:	2e04      	cmp	r6, #4
 8007e3c:	d1ee      	bne.n	8007e1c <OV5640_SetResolution+0x78>
 8007e3e:	e013      	b.n	8007e68 <OV5640_SetResolution+0xc4>
          if (ret != OV5640_ERROR)
 8007e40:	f10d 0507 	add.w	r5, sp, #7
 8007e44:	4f1a      	ldr	r7, [pc, #104]	; (8007eb0 <OV5640_SetResolution+0x10c>)
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8007e46:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007e50:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8007e52:	8852      	ldrh	r2, [r2, #2]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8007e54:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8007e56:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8007e5a:	462a      	mov	r2, r5
 8007e5c:	f001 f814 	bl	8008e88 <ov5640_write_reg>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d1bf      	bne.n	8007de4 <OV5640_SetResolution+0x40>
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8007e64:	2e04      	cmp	r6, #4
 8007e66:	d1ee      	bne.n	8007e46 <OV5640_SetResolution+0xa2>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8007e68:	2000      	movs	r0, #0
}
 8007e6a:	b003      	add	sp, #12
 8007e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8007e6e:	2e04      	cmp	r6, #4
 8007e70:	d1a9      	bne.n	8007dc6 <OV5640_SetResolution+0x22>
 8007e72:	e7f9      	b.n	8007e68 <OV5640_SetResolution+0xc4>
    ret = OV5640_ERROR;
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007e78:	4770      	bx	lr
          if (ret != OV5640_ERROR)
 8007e7a:	4f0e      	ldr	r7, [pc, #56]	; (8007eb4 <OV5640_SetResolution+0x110>)
 8007e7c:	f10d 0507 	add.w	r5, sp, #7
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8007e80:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8007e84:	2301      	movs	r3, #1
 8007e86:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007e8a:	4620      	mov	r0, r4
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8007e8c:	8852      	ldrh	r2, [r2, #2]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8007e8e:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8007e90:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8007e94:	462a      	mov	r2, r5
 8007e96:	f000 fff7 	bl	8008e88 <ov5640_write_reg>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d1a2      	bne.n	8007de4 <OV5640_SetResolution+0x40>
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8007e9e:	2e04      	cmp	r6, #4
 8007ea0:	d1ee      	bne.n	8007e80 <OV5640_SetResolution+0xdc>
 8007ea2:	e7e1      	b.n	8007e68 <OV5640_SetResolution+0xc4>
 8007ea4:	080bfb48 	.word	0x080bfb48
 8007ea8:	080bfb38 	.word	0x080bfb38
 8007eac:	080bf684 	.word	0x080bf684
 8007eb0:	080bfb28 	.word	0x080bfb28
 8007eb4:	080bfb18 	.word	0x080bfb18

08007eb8 <OV5640_SetLightMode>:
{
 8007eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = 0x00;
 8007eba:	2200      	movs	r2, #0
{
 8007ebc:	b083      	sub	sp, #12
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8007ebe:	f100 0518 	add.w	r5, r0, #24
 8007ec2:	2301      	movs	r3, #1
  tmp = 0x00;
 8007ec4:	f88d 2007 	strb.w	r2, [sp, #7]
{
 8007ec8:	460e      	mov	r6, r1
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8007eca:	f10d 0207 	add.w	r2, sp, #7
 8007ece:	f243 4106 	movw	r1, #13318	; 0x3406
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f000 ffd8 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007ed8:	4604      	mov	r4, r0
 8007eda:	b110      	cbz	r0, 8007ee2 <OV5640_SetLightMode+0x2a>
}
 8007edc:	4620      	mov	r0, r4
 8007ede:	b003      	add	sp, #12
 8007ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 0x46;
 8007ee2:	2246      	movs	r2, #70	; 0x46
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f245 1190 	movw	r1, #20880	; 0x5190
 8007eea:	4628      	mov	r0, r5
    tmp = 0x46;
 8007eec:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8007ef0:	f10d 0207 	add.w	r2, sp, #7
 8007ef4:	f000 ffc8 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007ef8:	4604      	mov	r4, r0
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d1ee      	bne.n	8007edc <OV5640_SetLightMode+0x24>
    tmp = 0xF8;
 8007efe:	22f8      	movs	r2, #248	; 0xf8
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8007f00:	2301      	movs	r3, #1
 8007f02:	f245 1191 	movw	r1, #20881	; 0x5191
 8007f06:	4628      	mov	r0, r5
    tmp = 0xF8;
 8007f08:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8007f0c:	f10d 0207 	add.w	r2, sp, #7
 8007f10:	f000 ffba 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007f14:	4604      	mov	r4, r0
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d1e0      	bne.n	8007edc <OV5640_SetLightMode+0x24>
    tmp = 0x04;
 8007f1a:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f245 1192 	movw	r1, #20882	; 0x5192
 8007f22:	4628      	mov	r0, r5
    tmp = 0x04;
 8007f24:	f88d 2007 	strb.w	r2, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8007f28:	f10d 0207 	add.w	r2, sp, #7
 8007f2c:	f000 ffac 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007f30:	4604      	mov	r4, r0
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d1d2      	bne.n	8007edc <OV5640_SetLightMode+0x24>
    switch (LightMode)
 8007f36:	1e71      	subs	r1, r6, #1
 8007f38:	2600      	movs	r6, #0
 8007f3a:	2907      	cmp	r1, #7
 8007f3c:	d805      	bhi.n	8007f4a <OV5640_SetLightMode+0x92>
 8007f3e:	e8df f001 	tbb	[pc, r1]
 8007f42:	2c54      	.short	0x2c54
 8007f44:	04044004 	.word	0x04044004
 8007f48:	1804      	.short	0x1804
 8007f4a:	4f54      	ldr	r7, [pc, #336]	; (800809c <OV5640_SetLightMode+0x1e4>)
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8007f4c:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8007f50:	2301      	movs	r3, #1
 8007f52:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007f56:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8007f58:	8852      	ldrh	r2, [r2, #2]
 8007f5a:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8007f5e:	f10d 0207 	add.w	r2, sp, #7
 8007f62:	f000 ff91 	bl	8008e88 <ov5640_write_reg>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d163      	bne.n	8008032 <OV5640_SetLightMode+0x17a>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8007f6a:	3601      	adds	r6, #1
 8007f6c:	2e07      	cmp	r6, #7
 8007f6e:	d1ed      	bne.n	8007f4c <OV5640_SetLightMode+0x94>
 8007f70:	e7b4      	b.n	8007edc <OV5640_SetLightMode+0x24>
 8007f72:	4f4b      	ldr	r7, [pc, #300]	; (80080a0 <OV5640_SetLightMode+0x1e8>)
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8007f74:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8007f78:	2301      	movs	r3, #1
 8007f7a:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007f7e:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8007f80:	8852      	ldrh	r2, [r2, #2]
 8007f82:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8007f86:	f10d 0207 	add.w	r2, sp, #7
 8007f8a:	f000 ff7d 	bl	8008e88 <ov5640_write_reg>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d169      	bne.n	8008066 <OV5640_SetLightMode+0x1ae>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8007f92:	3601      	adds	r6, #1
 8007f94:	2e07      	cmp	r6, #7
 8007f96:	d1ed      	bne.n	8007f74 <OV5640_SetLightMode+0xbc>
 8007f98:	e7a0      	b.n	8007edc <OV5640_SetLightMode+0x24>
 8007f9a:	4f42      	ldr	r7, [pc, #264]	; (80080a4 <OV5640_SetLightMode+0x1ec>)
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8007f9c:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007fa6:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8007fa8:	8852      	ldrh	r2, [r2, #2]
 8007faa:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8007fae:	f10d 0207 	add.w	r2, sp, #7
 8007fb2:	f000 ff69 	bl	8008e88 <ov5640_write_reg>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d148      	bne.n	800804c <OV5640_SetLightMode+0x194>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8007fba:	3601      	adds	r6, #1
 8007fbc:	2e07      	cmp	r6, #7
 8007fbe:	d1ed      	bne.n	8007f9c <OV5640_SetLightMode+0xe4>
 8007fc0:	e78c      	b.n	8007edc <OV5640_SetLightMode+0x24>
 8007fc2:	4f39      	ldr	r7, [pc, #228]	; (80080a8 <OV5640_SetLightMode+0x1f0>)
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8007fc4:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8007fc8:	2301      	movs	r3, #1
 8007fca:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007fce:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8007fd0:	8852      	ldrh	r2, [r2, #2]
 8007fd2:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8007fd6:	f10d 0207 	add.w	r2, sp, #7
 8007fda:	f000 ff55 	bl	8008e88 <ov5640_write_reg>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d14e      	bne.n	8008080 <OV5640_SetLightMode+0x1c8>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8007fe2:	3601      	adds	r6, #1
 8007fe4:	2e07      	cmp	r6, #7
 8007fe6:	d1ed      	bne.n	8007fc4 <OV5640_SetLightMode+0x10c>
 8007fe8:	e778      	b.n	8007edc <OV5640_SetLightMode+0x24>
 8007fea:	4f30      	ldr	r7, [pc, #192]	; (80080ac <OV5640_SetLightMode+0x1f4>)
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8007fec:	eb07 0286 	add.w	r2, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007ff6:	4628      	mov	r0, r5
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8007ff8:	8852      	ldrh	r2, [r2, #2]
 8007ffa:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8007ffe:	f10d 0207 	add.w	r2, sp, #7
 8008002:	f000 ff41 	bl	8008e88 <ov5640_write_reg>
 8008006:	b180      	cbz	r0, 800802a <OV5640_SetLightMode+0x172>
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8008008:	2e06      	cmp	r6, #6
 800800a:	d009      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 800800c:	2e05      	cmp	r6, #5
 800800e:	f106 0302 	add.w	r3, r6, #2
 8008012:	d005      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 8008014:	2b06      	cmp	r3, #6
 8008016:	f103 0302 	add.w	r3, r3, #2
 800801a:	d001      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 800801c:	2b07      	cmp	r3, #7
 800801e:	d1f9      	bne.n	8008014 <OV5640_SetLightMode+0x15c>
    switch (LightMode)
 8008020:	f04f 34ff 	mov.w	r4, #4294967295
}
 8008024:	4620      	mov	r0, r4
 8008026:	b003      	add	sp, #12
 8008028:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 800802a:	3601      	adds	r6, #1
 800802c:	2e07      	cmp	r6, #7
 800802e:	d1dd      	bne.n	8007fec <OV5640_SetLightMode+0x134>
 8008030:	e754      	b.n	8007edc <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8008032:	2e06      	cmp	r6, #6
 8008034:	d0f4      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 8008036:	2e05      	cmp	r6, #5
 8008038:	f106 0302 	add.w	r3, r6, #2
 800803c:	d0f0      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 800803e:	2b06      	cmp	r3, #6
 8008040:	f103 0302 	add.w	r3, r3, #2
 8008044:	d0ec      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 8008046:	2b07      	cmp	r3, #7
 8008048:	d1f9      	bne.n	800803e <OV5640_SetLightMode+0x186>
 800804a:	e7e9      	b.n	8008020 <OV5640_SetLightMode+0x168>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800804c:	2e06      	cmp	r6, #6
 800804e:	d0e7      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 8008050:	2e05      	cmp	r6, #5
 8008052:	f106 0302 	add.w	r3, r6, #2
 8008056:	d0e3      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 8008058:	2b06      	cmp	r3, #6
 800805a:	f103 0302 	add.w	r3, r3, #2
 800805e:	d0df      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 8008060:	2b07      	cmp	r3, #7
 8008062:	d1f9      	bne.n	8008058 <OV5640_SetLightMode+0x1a0>
 8008064:	e7dc      	b.n	8008020 <OV5640_SetLightMode+0x168>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8008066:	2e06      	cmp	r6, #6
 8008068:	d0da      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 800806a:	2e05      	cmp	r6, #5
 800806c:	f106 0302 	add.w	r3, r6, #2
 8008070:	d0d6      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 8008072:	2b06      	cmp	r3, #6
 8008074:	f103 0302 	add.w	r3, r3, #2
 8008078:	d0d2      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 800807a:	2b07      	cmp	r3, #7
 800807c:	d1f9      	bne.n	8008072 <OV5640_SetLightMode+0x1ba>
 800807e:	e7cf      	b.n	8008020 <OV5640_SetLightMode+0x168>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8008080:	2e06      	cmp	r6, #6
 8008082:	d0cd      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 8008084:	2e05      	cmp	r6, #5
 8008086:	f106 0302 	add.w	r3, r6, #2
 800808a:	d0c9      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 800808c:	2b06      	cmp	r3, #6
 800808e:	f103 0302 	add.w	r3, r3, #2
 8008092:	d0c5      	beq.n	8008020 <OV5640_SetLightMode+0x168>
 8008094:	2b07      	cmp	r3, #7
 8008096:	d1f9      	bne.n	800808c <OV5640_SetLightMode+0x1d4>
 8008098:	e7c2      	b.n	8008020 <OV5640_SetLightMode+0x168>
 800809a:	bf00      	nop
 800809c:	080bfa8c 	.word	0x080bfa8c
 80080a0:	080bfaa8 	.word	0x080bfaa8
 80080a4:	080bfae0 	.word	0x080bfae0
 80080a8:	080bfac4 	.word	0x080bfac4
 80080ac:	080bfafc 	.word	0x080bfafc

080080b0 <OV5640_SetColorEffect>:
  switch (Effect)
 80080b0:	3901      	subs	r1, #1
{
 80080b2:	b530      	push	{r4, r5, lr}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80080b4:	f100 0418 	add.w	r4, r0, #24
{
 80080b8:	b083      	sub	sp, #12
  switch (Effect)
 80080ba:	291f      	cmp	r1, #31
 80080bc:	d821      	bhi.n	8008102 <OV5640_SetColorEffect+0x52>
 80080be:	e8df f011 	tbh	[pc, r1, lsl #1]
 80080c2:	0033      	.short	0x0033
 80080c4:	00200062 	.word	0x00200062
 80080c8:	00200091 	.word	0x00200091
 80080cc:	00200020 	.word	0x00200020
 80080d0:	002000ad 	.word	0x002000ad
 80080d4:	00200020 	.word	0x00200020
 80080d8:	00200020 	.word	0x00200020
 80080dc:	00200020 	.word	0x00200020
 80080e0:	002000e7 	.word	0x002000e7
 80080e4:	00200020 	.word	0x00200020
 80080e8:	00200020 	.word	0x00200020
 80080ec:	00200020 	.word	0x00200020
 80080f0:	00200020 	.word	0x00200020
 80080f4:	00200020 	.word	0x00200020
 80080f8:	00200020 	.word	0x00200020
 80080fc:	00200020 	.word	0x00200020
 8008100:	0119      	.short	0x0119
      tmp = 0x7F;
 8008102:	217f      	movs	r1, #127	; 0x7f
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008104:	2301      	movs	r3, #1
 8008106:	f10d 0207 	add.w	r2, sp, #7
 800810a:	4620      	mov	r0, r4
      tmp = 0x7F;
 800810c:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008110:	f245 0101 	movw	r1, #20481	; 0x5001
 8008114:	f000 feb8 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008118:	4684      	mov	ip, r0
 800811a:	2800      	cmp	r0, #0
 800811c:	f000 80fa 	beq.w	8008314 <OV5640_SetColorEffect+0x264>
        ret = OV5640_ERROR;
 8008120:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008124:	b003      	add	sp, #12
 8008126:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 8008128:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800812a:	2301      	movs	r3, #1
 800812c:	f10d 0207 	add.w	r2, sp, #7
 8008130:	4620      	mov	r0, r4
      tmp = 0xFF;
 8008132:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008136:	f245 0101 	movw	r1, #20481	; 0x5001
 800813a:	f000 fea5 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800813e:	2800      	cmp	r0, #0
 8008140:	d1ee      	bne.n	8008120 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8008142:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008144:	2301      	movs	r3, #1
 8008146:	f10d 0207 	add.w	r2, sp, #7
 800814a:	4620      	mov	r0, r4
        tmp = 0x18;
 800814c:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008150:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8008154:	f000 fe98 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008158:	2800      	cmp	r0, #0
 800815a:	d1e1      	bne.n	8008120 <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 800815c:	21a0      	movs	r1, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800815e:	2301      	movs	r3, #1
 8008160:	f10d 0207 	add.w	r2, sp, #7
 8008164:	4620      	mov	r0, r4
        tmp = 0xA0;
 8008166:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800816a:	f245 5183 	movw	r1, #21891	; 0x5583
 800816e:	f000 fe8b 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008172:	2800      	cmp	r0, #0
 8008174:	d1d4      	bne.n	8008120 <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 8008176:	f04f 0c40 	mov.w	ip, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800817a:	2301      	movs	r3, #1
 800817c:	f10d 0207 	add.w	r2, sp, #7
 8008180:	f245 5184 	movw	r1, #21892	; 0x5584
 8008184:	e0cb      	b.n	800831e <OV5640_SetColorEffect+0x26e>
      tmp = 0xFF;
 8008186:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008188:	2301      	movs	r3, #1
 800818a:	f10d 0207 	add.w	r2, sp, #7
 800818e:	4620      	mov	r0, r4
      tmp = 0xFF;
 8008190:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008194:	f245 0101 	movw	r1, #20481	; 0x5001
 8008198:	f000 fe76 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800819c:	2800      	cmp	r0, #0
 800819e:	d1bf      	bne.n	8008120 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 80081a0:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80081a2:	2301      	movs	r3, #1
 80081a4:	f10d 0207 	add.w	r2, sp, #7
 80081a8:	4620      	mov	r0, r4
        tmp = 0x18;
 80081aa:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80081ae:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80081b2:	f000 fe69 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d1b2      	bne.n	8008120 <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 80081ba:	2180      	movs	r1, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80081bc:	2301      	movs	r3, #1
 80081be:	f10d 0207 	add.w	r2, sp, #7
 80081c2:	4620      	mov	r0, r4
        tmp = 0x80;
 80081c4:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80081c8:	f245 5183 	movw	r1, #21891	; 0x5583
 80081cc:	f000 fe5c 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d1a5      	bne.n	8008120 <OV5640_SetColorEffect+0x70>
        tmp = 0xC0;
 80081d4:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80081d8:	2301      	movs	r3, #1
 80081da:	f10d 0207 	add.w	r2, sp, #7
 80081de:	f245 5184 	movw	r1, #21892	; 0x5584
 80081e2:	e09c      	b.n	800831e <OV5640_SetColorEffect+0x26e>
      tmp = 0xFF;
 80081e4:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80081e6:	2301      	movs	r3, #1
 80081e8:	f10d 0207 	add.w	r2, sp, #7
 80081ec:	4620      	mov	r0, r4
      tmp = 0xFF;
 80081ee:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80081f2:	f245 0101 	movw	r1, #20481	; 0x5001
 80081f6:	f000 fe47 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d190      	bne.n	8008120 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 80081fe:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008200:	2301      	movs	r3, #1
 8008202:	f10d 0207 	add.w	r2, sp, #7
 8008206:	4620      	mov	r0, r4
        tmp = 0x18;
 8008208:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800820c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8008210:	f000 fe3a 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008214:	2800      	cmp	r0, #0
 8008216:	d183      	bne.n	8008120 <OV5640_SetColorEffect+0x70>
        tmp = 0x60;
 8008218:	2560      	movs	r5, #96	; 0x60
 800821a:	e01c      	b.n	8008256 <OV5640_SetColorEffect+0x1a6>
      tmp = 0xFF;
 800821c:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800821e:	2301      	movs	r3, #1
 8008220:	f10d 0207 	add.w	r2, sp, #7
 8008224:	4620      	mov	r0, r4
      tmp = 0xFF;
 8008226:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800822a:	f245 0101 	movw	r1, #20481	; 0x5001
 800822e:	f000 fe2b 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008232:	2800      	cmp	r0, #0
 8008234:	f47f af74 	bne.w	8008120 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8008238:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800823a:	2301      	movs	r3, #1
 800823c:	f10d 0207 	add.w	r2, sp, #7
 8008240:	4620      	mov	r0, r4
        tmp = 0x18;
 8008242:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008246:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800824a:	f000 fe1d 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800824e:	2800      	cmp	r0, #0
 8008250:	f47f af66 	bne.w	8008120 <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 8008254:	2580      	movs	r5, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8008256:	2301      	movs	r3, #1
 8008258:	f10d 0207 	add.w	r2, sp, #7
 800825c:	f245 5183 	movw	r1, #21891	; 0x5583
 8008260:	4620      	mov	r0, r4
        tmp = 0x80;
 8008262:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8008266:	f000 fe0f 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800826a:	2800      	cmp	r0, #0
 800826c:	f47f af58 	bne.w	8008120 <OV5640_SetColorEffect+0x70>
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008270:	2301      	movs	r3, #1
 8008272:	f10d 0207 	add.w	r2, sp, #7
 8008276:	f245 5184 	movw	r1, #21892	; 0x5584
 800827a:	4620      	mov	r0, r4
        tmp = 0x80;
 800827c:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008280:	f000 fe02 	bl	8008e88 <ov5640_write_reg>
      if (ret != OV5640_OK)
 8008284:	3800      	subs	r0, #0
 8008286:	bf18      	it	ne
 8008288:	2001      	movne	r0, #1
 800828a:	4240      	negs	r0, r0
}
 800828c:	b003      	add	sp, #12
 800828e:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 8008290:	21ff      	movs	r1, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008292:	2301      	movs	r3, #1
 8008294:	f10d 0207 	add.w	r2, sp, #7
 8008298:	4620      	mov	r0, r4
      tmp = 0xFF;
 800829a:	f88d 1007 	strb.w	r1, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800829e:	f245 0101 	movw	r1, #20481	; 0x5001
 80082a2:	f000 fdf1 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80082a6:	2800      	cmp	r0, #0
 80082a8:	f47f af3a 	bne.w	8008120 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 80082ac:	2118      	movs	r1, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80082ae:	2301      	movs	r3, #1
 80082b0:	f10d 0207 	add.w	r2, sp, #7
 80082b4:	4620      	mov	r0, r4
        tmp = 0x18;
 80082b6:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80082ba:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80082be:	f000 fde3 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80082c2:	2800      	cmp	r0, #0
 80082c4:	f47f af2c 	bne.w	8008120 <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 80082c8:	2140      	movs	r1, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80082ca:	2301      	movs	r3, #1
 80082cc:	f10d 0207 	add.w	r2, sp, #7
 80082d0:	4620      	mov	r0, r4
        tmp = 0x40;
 80082d2:	f88d 1007 	strb.w	r1, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80082d6:	f245 5183 	movw	r1, #21891	; 0x5583
 80082da:	f000 fdd5 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80082de:	2800      	cmp	r0, #0
 80082e0:	f47f af1e 	bne.w	8008120 <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 80082e4:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80082e8:	2301      	movs	r3, #1
 80082ea:	f10d 0207 	add.w	r2, sp, #7
 80082ee:	f245 5184 	movw	r1, #21892	; 0x5584
 80082f2:	e014      	b.n	800831e <OV5640_SetColorEffect+0x26e>
      tmp = 0xFF;
 80082f4:	20ff      	movs	r0, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80082f6:	2301      	movs	r3, #1
 80082f8:	f10d 0207 	add.w	r2, sp, #7
 80082fc:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8008300:	f88d 0007 	strb.w	r0, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008304:	4620      	mov	r0, r4
 8008306:	f000 fdbf 	bl	8008e88 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800830a:	2800      	cmp	r0, #0
 800830c:	f47f af08 	bne.w	8008120 <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 8008310:	f04f 0c40 	mov.w	ip, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008314:	2301      	movs	r3, #1
 8008316:	f10d 0207 	add.w	r2, sp, #7
 800831a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800831e:	4620      	mov	r0, r4
        tmp = 0x00;
 8008320:	f88d c007 	strb.w	ip, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008324:	f000 fdb0 	bl	8008e88 <ov5640_write_reg>
      if (ret != OV5640_OK)
 8008328:	3800      	subs	r0, #0
 800832a:	bf18      	it	ne
 800832c:	2001      	movne	r0, #1
 800832e:	4240      	negs	r0, r0
}
 8008330:	b003      	add	sp, #12
 8008332:	bd30      	pop	{r4, r5, pc}

08008334 <OV5640_SetBrightness>:
{
 8008334:	b530      	push	{r4, r5, lr}
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8008336:	4a2c      	ldr	r2, [pc, #176]	; (80083e8 <OV5640_SetBrightness+0xb4>)
{
 8008338:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800833a:	f100 0418 	add.w	r4, r0, #24
{
 800833e:	460d      	mov	r5, r1
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8008340:	ab01      	add	r3, sp, #4
 8008342:	ca07      	ldmia	r2, {r0, r1, r2}
 8008344:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 8008346:	21ff      	movs	r1, #255	; 0xff
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8008348:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800834a:	4620      	mov	r0, r4
 800834c:	2301      	movs	r3, #1
  tmp = 0xFF;
 800834e:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008352:	f10d 0203 	add.w	r2, sp, #3
 8008356:	f245 0101 	movw	r1, #20481	; 0x5001
 800835a:	f000 fd95 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800835e:	b108      	cbz	r0, 8008364 <OV5640_SetBrightness+0x30>
}
 8008360:	b005      	add	sp, #20
 8008362:	bd30      	pop	{r4, r5, pc}
    tmp = brightness_level[Level + 4];
 8008364:	f105 0210 	add.w	r2, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8008368:	2301      	movs	r3, #1
 800836a:	f245 5187 	movw	r1, #21895	; 0x5587
 800836e:	4620      	mov	r0, r4
    tmp = brightness_level[Level + 4];
 8008370:	446a      	add	r2, sp
 8008372:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8008376:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 800837a:	f10d 0203 	add.w	r2, sp, #3
 800837e:	f000 fd83 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008382:	2800      	cmp	r0, #0
 8008384:	d1ec      	bne.n	8008360 <OV5640_SetBrightness+0x2c>
    tmp = 0x04;
 8008386:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008388:	2301      	movs	r3, #1
 800838a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800838e:	4620      	mov	r0, r4
    tmp = 0x04;
 8008390:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008394:	f10d 0203 	add.w	r2, sp, #3
 8008398:	f000 fd76 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800839c:	2800      	cmp	r0, #0
 800839e:	d1df      	bne.n	8008360 <OV5640_SetBrightness+0x2c>
    if (Level < 0)
 80083a0:	2d00      	cmp	r5, #0
 80083a2:	db10      	blt.n	80083c6 <OV5640_SetBrightness+0x92>
      tmp = 0x09;
 80083a4:	2509      	movs	r5, #9
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80083a6:	2301      	movs	r3, #1
 80083a8:	f10d 0203 	add.w	r2, sp, #3
 80083ac:	f245 5188 	movw	r1, #21896	; 0x5588
 80083b0:	4620      	mov	r0, r4
      tmp = 0x09;
 80083b2:	f88d 5003 	strb.w	r5, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80083b6:	f000 fd67 	bl	8008e88 <ov5640_write_reg>
 80083ba:	3800      	subs	r0, #0
 80083bc:	bf18      	it	ne
 80083be:	2001      	movne	r0, #1
 80083c0:	4240      	negs	r0, r0
}
 80083c2:	b005      	add	sp, #20
 80083c4:	bd30      	pop	{r4, r5, pc}
      tmp = 0x01;
 80083c6:	2301      	movs	r3, #1
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80083c8:	f10d 0203 	add.w	r2, sp, #3
 80083cc:	f245 5188 	movw	r1, #21896	; 0x5588
 80083d0:	4620      	mov	r0, r4
      tmp = 0x01;
 80083d2:	f88d 3003 	strb.w	r3, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80083d6:	f000 fd57 	bl	8008e88 <ov5640_write_reg>
 80083da:	3800      	subs	r0, #0
 80083dc:	bf18      	it	ne
 80083de:	2001      	movne	r0, #1
 80083e0:	4240      	negs	r0, r0
}
 80083e2:	b005      	add	sp, #20
 80083e4:	bd30      	pop	{r4, r5, pc}
 80083e6:	bf00      	nop
 80083e8:	08028c00 	.word	0x08028c00

080083ec <OV5640_SetSaturation>:
{
 80083ec:	b530      	push	{r4, r5, lr}
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80083ee:	4a29      	ldr	r2, [pc, #164]	; (8008494 <OV5640_SetSaturation+0xa8>)
{
 80083f0:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80083f2:	f100 0418 	add.w	r4, r0, #24
{
 80083f6:	460d      	mov	r5, r1
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80083f8:	ab01      	add	r3, sp, #4
 80083fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80083fc:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 80083fe:	21ff      	movs	r1, #255	; 0xff
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8008400:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008402:	4620      	mov	r0, r4
 8008404:	2301      	movs	r3, #1
  tmp = 0xFF;
 8008406:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800840a:	f10d 0203 	add.w	r2, sp, #3
 800840e:	f245 0101 	movw	r1, #20481	; 0x5001
 8008412:	f000 fd39 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008416:	b118      	cbz	r0, 8008420 <OV5640_SetSaturation+0x34>
    ret = OV5640_ERROR;
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
}
 800841c:	b005      	add	sp, #20
 800841e:	bd30      	pop	{r4, r5, pc}
    tmp = saturation_level[Level + 4];
 8008420:	f105 0310 	add.w	r3, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8008424:	f10d 0203 	add.w	r2, sp, #3
 8008428:	4620      	mov	r0, r4
    tmp = saturation_level[Level + 4];
 800842a:	eb0d 0103 	add.w	r1, sp, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800842e:	2301      	movs	r3, #1
    tmp = saturation_level[Level + 4];
 8008430:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8008434:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8008438:	f245 5183 	movw	r1, #21891	; 0x5583
 800843c:	f000 fd24 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008440:	2800      	cmp	r0, #0
 8008442:	d1e9      	bne.n	8008418 <OV5640_SetSaturation+0x2c>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008444:	2301      	movs	r3, #1
 8008446:	f10d 0203 	add.w	r2, sp, #3
 800844a:	f245 5184 	movw	r1, #21892	; 0x5584
 800844e:	4620      	mov	r0, r4
 8008450:	f000 fd1a 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008454:	2800      	cmp	r0, #0
 8008456:	d1df      	bne.n	8008418 <OV5640_SetSaturation+0x2c>
    tmp = 0x02;
 8008458:	2102      	movs	r1, #2
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800845a:	2301      	movs	r3, #1
 800845c:	f10d 0203 	add.w	r2, sp, #3
 8008460:	4620      	mov	r0, r4
    tmp = 0x02;
 8008462:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008466:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800846a:	f000 fd0d 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800846e:	2800      	cmp	r0, #0
 8008470:	d1d2      	bne.n	8008418 <OV5640_SetSaturation+0x2c>
    tmp = 0x41;
 8008472:	2541      	movs	r5, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8008474:	2301      	movs	r3, #1
 8008476:	f10d 0203 	add.w	r2, sp, #3
 800847a:	f245 5188 	movw	r1, #21896	; 0x5588
 800847e:	4620      	mov	r0, r4
    tmp = 0x41;
 8008480:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8008484:	f000 fd00 	bl	8008e88 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8008488:	3800      	subs	r0, #0
 800848a:	bf18      	it	ne
 800848c:	2001      	movne	r0, #1
 800848e:	4240      	negs	r0, r0
}
 8008490:	b005      	add	sp, #20
 8008492:	bd30      	pop	{r4, r5, pc}
 8008494:	08028c0c 	.word	0x08028c0c

08008498 <OV5640_SetContrast>:
{
 8008498:	b530      	push	{r4, r5, lr}
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 800849a:	4a29      	ldr	r2, [pc, #164]	; (8008540 <OV5640_SetContrast+0xa8>)
{
 800849c:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800849e:	f100 0418 	add.w	r4, r0, #24
{
 80084a2:	460d      	mov	r5, r1
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80084a4:	ab01      	add	r3, sp, #4
 80084a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80084a8:	c303      	stmia	r3!, {r0, r1}
  tmp = 0xFF;
 80084aa:	21ff      	movs	r1, #255	; 0xff
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80084ac:	701a      	strb	r2, [r3, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80084ae:	4620      	mov	r0, r4
 80084b0:	2301      	movs	r3, #1
  tmp = 0xFF;
 80084b2:	f88d 1003 	strb.w	r1, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80084b6:	f10d 0203 	add.w	r2, sp, #3
 80084ba:	f245 0101 	movw	r1, #20481	; 0x5001
 80084be:	f000 fce3 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80084c2:	b118      	cbz	r0, 80084cc <OV5640_SetContrast+0x34>
    ret = OV5640_ERROR;
 80084c4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80084c8:	b005      	add	sp, #20
 80084ca:	bd30      	pop	{r4, r5, pc}
    tmp = 0x04;
 80084cc:	2204      	movs	r2, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80084ce:	2301      	movs	r3, #1
 80084d0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80084d4:	4620      	mov	r0, r4
    tmp = 0x04;
 80084d6:	f88d 2003 	strb.w	r2, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80084da:	f10d 0203 	add.w	r2, sp, #3
 80084de:	f000 fcd3 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d1ee      	bne.n	80084c4 <OV5640_SetContrast+0x2c>
    tmp = contrast_level[Level + 4];
 80084e6:	f105 0310 	add.w	r3, r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 80084ea:	f10d 0203 	add.w	r2, sp, #3
 80084ee:	4620      	mov	r0, r4
    tmp = contrast_level[Level + 4];
 80084f0:	eb0d 0103 	add.w	r1, sp, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 80084f4:	2301      	movs	r3, #1
    tmp = contrast_level[Level + 4];
 80084f6:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 80084fa:	f88d 1003 	strb.w	r1, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 80084fe:	f245 5186 	movw	r1, #21894	; 0x5586
 8008502:	f000 fcc1 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008506:	2800      	cmp	r0, #0
 8008508:	d1dc      	bne.n	80084c4 <OV5640_SetContrast+0x2c>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 800850a:	2301      	movs	r3, #1
 800850c:	f10d 0203 	add.w	r2, sp, #3
 8008510:	f245 5185 	movw	r1, #21893	; 0x5585
 8008514:	4620      	mov	r0, r4
 8008516:	f000 fcb7 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800851a:	2800      	cmp	r0, #0
 800851c:	d1d2      	bne.n	80084c4 <OV5640_SetContrast+0x2c>
    tmp = 0x41;
 800851e:	2541      	movs	r5, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8008520:	2301      	movs	r3, #1
 8008522:	f10d 0203 	add.w	r2, sp, #3
 8008526:	f245 5188 	movw	r1, #21896	; 0x5588
 800852a:	4620      	mov	r0, r4
    tmp = 0x41;
 800852c:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8008530:	f000 fcaa 	bl	8008e88 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8008534:	3800      	subs	r0, #0
 8008536:	bf18      	it	ne
 8008538:	2001      	movne	r0, #1
 800853a:	4240      	negs	r0, r0
}
 800853c:	b005      	add	sp, #20
 800853e:	bd30      	pop	{r4, r5, pc}
 8008540:	080bf668 	.word	0x080bf668

08008544 <OV5640_SetHueDegree>:
{
 8008544:	b570      	push	{r4, r5, r6, lr}
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8008546:	4b33      	ldr	r3, [pc, #204]	; (8008614 <OV5640_SetHueDegree+0xd0>)
{
 8008548:	b08a      	sub	sp, #40	; 0x28
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800854a:	f100 0418 	add.w	r4, r0, #24
{
 800854e:	460d      	mov	r5, r1
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8008550:	f103 0c0c 	add.w	ip, r3, #12
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8008554:	f10d 0e04 	add.w	lr, sp, #4
 8008558:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 800855c:	ab04      	add	r3, sp, #16
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 800855e:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8008562:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8008566:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 800856a:	4b2b      	ldr	r3, [pc, #172]	; (8008618 <OV5640_SetHueDegree+0xd4>)
 800856c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008570:	ab0a      	add	r3, sp, #40	; 0x28
 8008572:	e903 0007 	stmdb	r3, {r0, r1, r2}
  tmp = 0xFF;
 8008576:	22ff      	movs	r2, #255	; 0xff
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008578:	2301      	movs	r3, #1
 800857a:	f245 0101 	movw	r1, #20481	; 0x5001
 800857e:	4620      	mov	r0, r4
  tmp = 0xFF;
 8008580:	f88d 2003 	strb.w	r2, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008584:	f10d 0203 	add.w	r2, sp, #3
 8008588:	f000 fc7e 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800858c:	b118      	cbz	r0, 8008596 <OV5640_SetHueDegree+0x52>
    ret = OV5640_ERROR;
 800858e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008592:	b00a      	add	sp, #40	; 0x28
 8008594:	bd70      	pop	{r4, r5, r6, pc}
    tmp = 0x01;
 8008596:	2601      	movs	r6, #1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008598:	f10d 0203 	add.w	r2, sp, #3
 800859c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80085a0:	4620      	mov	r0, r4
 80085a2:	4633      	mov	r3, r6
    tmp = 0x01;
 80085a4:	f88d 6003 	strb.w	r6, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80085a8:	f000 fc6e 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d1ee      	bne.n	800858e <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl1[Degree + 6];
 80085b0:	f105 032e 	add.w	r3, r5, #46	; 0x2e
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 80085b4:	f10d 0203 	add.w	r2, sp, #3
 80085b8:	f245 5181 	movw	r1, #21889	; 0x5581
 80085bc:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl1[Degree + 6];
 80085be:	eb0d 0503 	add.w	r5, sp, r3
 80085c2:	f815 3c24 	ldrb.w	r3, [r5, #-36]
 80085c6:	f88d 3003 	strb.w	r3, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 80085ca:	4633      	mov	r3, r6
 80085cc:	f000 fc5c 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d1dc      	bne.n	800858e <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl2[Degree + 6];
 80085d4:	f815 3c18 	ldrb.w	r3, [r5, #-24]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 80085d8:	f10d 0203 	add.w	r2, sp, #3
 80085dc:	f245 5182 	movw	r1, #21890	; 0x5582
 80085e0:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl2[Degree + 6];
 80085e2:	f88d 3003 	strb.w	r3, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 80085e6:	4633      	mov	r3, r6
 80085e8:	f000 fc4e 	bl	8008e88 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d1ce      	bne.n	800858e <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl8[Degree + 6];
 80085f0:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80085f4:	4633      	mov	r3, r6
 80085f6:	f10d 0203 	add.w	r2, sp, #3
 80085fa:	f245 5188 	movw	r1, #21896	; 0x5588
 80085fe:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl8[Degree + 6];
 8008600:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8008604:	f000 fc40 	bl	8008e88 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8008608:	3800      	subs	r0, #0
 800860a:	bf18      	it	ne
 800860c:	2001      	movne	r0, #1
 800860e:	4240      	negs	r0, r0
}
 8008610:	b00a      	add	sp, #40	; 0x28
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	08028c18 	.word	0x08028c18
 8008618:	080bf674 	.word	0x080bf674

0800861c <OV5640_SetPixelFormat>:
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800861c:	2902      	cmp	r1, #2
{
 800861e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008622:	4604      	mov	r4, r0
 8008624:	b082      	sub	sp, #8
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8008626:	d902      	bls.n	800862e <OV5640_SetPixelFormat+0x12>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8008628:	1fcb      	subs	r3, r1, #7
 800862a:	2b01      	cmp	r3, #1
 800862c:	d82a      	bhi.n	8008684 <OV5640_SetPixelFormat+0x68>
    switch (PixelFormat)
 800862e:	3901      	subs	r1, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8008630:	f104 0718 	add.w	r7, r4, #24
 8008634:	f10d 0507 	add.w	r5, sp, #7
    switch (PixelFormat)
 8008638:	2907      	cmp	r1, #7
 800863a:	d829      	bhi.n	8008690 <OV5640_SetPixelFormat+0x74>
 800863c:	e8df f001 	tbb	[pc, r1]
 8008640:	28287904 	.word	0x28287904
 8008644:	a0522828 	.word	0xa0522828
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8008648:	2223      	movs	r2, #35	; 0x23
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 800864a:	2301      	movs	r3, #1
 800864c:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8008650:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8008652:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8008656:	462a      	mov	r2, r5
 8008658:	f000 fc16 	bl	8008e88 <ov5640_write_reg>
 800865c:	b990      	cbnz	r0, 8008684 <OV5640_SetPixelFormat+0x68>
  tickstart = pObj->IO.GetTick();
 800865e:	6963      	ldr	r3, [r4, #20]
 8008660:	4798      	blx	r3
 8008662:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008664:	6963      	ldr	r3, [r4, #20]
 8008666:	4798      	blx	r3
 8008668:	4286      	cmp	r6, r0
 800866a:	d0fb      	beq.n	8008664 <OV5640_SetPixelFormat+0x48>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800866c:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 800866e:	462a      	mov	r2, r5
 8008670:	4638      	mov	r0, r7
 8008672:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8008676:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 800867a:	f000 fc05 	bl	8008e88 <ov5640_write_reg>
 800867e:	2800      	cmp	r0, #0
 8008680:	f000 80fa 	beq.w	8008878 <OV5640_SetPixelFormat+0x25c>
    ret = OV5640_ERROR;
 8008684:	f04f 36ff 	mov.w	r6, #4294967295
}
 8008688:	4630      	mov	r0, r6
 800868a:	b002      	add	sp, #8
 800868c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8008690:	226f      	movs	r2, #111	; 0x6f
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8008692:	2301      	movs	r3, #1
 8008694:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8008698:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800869a:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 800869e:	462a      	mov	r2, r5
 80086a0:	f000 fbf2 	bl	8008e88 <ov5640_write_reg>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d1ed      	bne.n	8008684 <OV5640_SetPixelFormat+0x68>
  tickstart = pObj->IO.GetTick();
 80086a8:	6963      	ldr	r3, [r4, #20]
 80086aa:	4798      	blx	r3
 80086ac:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80086ae:	6963      	ldr	r3, [r4, #20]
 80086b0:	4798      	blx	r3
 80086b2:	42b0      	cmp	r0, r6
 80086b4:	d0fb      	beq.n	80086ae <OV5640_SetPixelFormat+0x92>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80086b6:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80086b8:	462a      	mov	r2, r5
 80086ba:	4638      	mov	r0, r7
 80086bc:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80086c0:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80086c4:	f000 fbe0 	bl	8008e88 <ov5640_write_reg>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d1db      	bne.n	8008684 <OV5640_SetPixelFormat+0x68>
  tickstart = pObj->IO.GetTick();
 80086cc:	6963      	ldr	r3, [r4, #20]
 80086ce:	4798      	blx	r3
 80086d0:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80086d2:	6963      	ldr	r3, [r4, #20]
 80086d4:	4798      	blx	r3
 80086d6:	4285      	cmp	r5, r0
 80086d8:	d0fb      	beq.n	80086d2 <OV5640_SetPixelFormat+0xb6>
{
 80086da:	2600      	movs	r6, #0
}
 80086dc:	4630      	mov	r0, r6
 80086de:	b002      	add	sp, #8
 80086e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80086e4:	2210      	movs	r2, #16
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80086e6:	2301      	movs	r3, #1
 80086e8:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 80086ec:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80086ee:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80086f2:	462a      	mov	r2, r5
 80086f4:	f000 fbc8 	bl	8008e88 <ov5640_write_reg>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	d1c3      	bne.n	8008684 <OV5640_SetPixelFormat+0x68>
  tickstart = pObj->IO.GetTick();
 80086fc:	6963      	ldr	r3, [r4, #20]
 80086fe:	4798      	blx	r3
 8008700:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008702:	6963      	ldr	r3, [r4, #20]
 8008704:	4798      	blx	r3
 8008706:	42b0      	cmp	r0, r6
 8008708:	d0fb      	beq.n	8008702 <OV5640_SetPixelFormat+0xe6>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800870a:	2100      	movs	r1, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 800870c:	2301      	movs	r3, #1
 800870e:	462a      	mov	r2, r5
 8008710:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8008712:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8008716:	f245 011f 	movw	r1, #20511	; 0x501f
 800871a:	f000 fbb5 	bl	8008e88 <ov5640_write_reg>
 800871e:	2800      	cmp	r0, #0
 8008720:	d1b0      	bne.n	8008684 <OV5640_SetPixelFormat+0x68>
  tickstart = pObj->IO.GetTick();
 8008722:	6963      	ldr	r3, [r4, #20]
 8008724:	4798      	blx	r3
 8008726:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008728:	6963      	ldr	r3, [r4, #20]
 800872a:	4798      	blx	r3
 800872c:	4285      	cmp	r5, r0
 800872e:	d0fb      	beq.n	8008728 <OV5640_SetPixelFormat+0x10c>
 8008730:	e7d3      	b.n	80086da <OV5640_SetPixelFormat+0xbe>
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8008732:	2230      	movs	r2, #48	; 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8008734:	2301      	movs	r3, #1
 8008736:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 800873a:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800873c:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8008740:	462a      	mov	r2, r5
 8008742:	f000 fba1 	bl	8008e88 <ov5640_write_reg>
 8008746:	2800      	cmp	r0, #0
 8008748:	d19c      	bne.n	8008684 <OV5640_SetPixelFormat+0x68>
  tickstart = pObj->IO.GetTick();
 800874a:	6963      	ldr	r3, [r4, #20]
 800874c:	4798      	blx	r3
 800874e:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008750:	6963      	ldr	r3, [r4, #20]
 8008752:	4798      	blx	r3
 8008754:	42b0      	cmp	r0, r6
 8008756:	d0fb      	beq.n	8008750 <OV5640_SetPixelFormat+0x134>
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8008758:	2100      	movs	r1, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 800875a:	2301      	movs	r3, #1
 800875c:	462a      	mov	r2, r5
 800875e:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8008760:	f88d 1007 	strb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8008764:	f245 011f 	movw	r1, #20511	; 0x501f
 8008768:	f000 fb8e 	bl	8008e88 <ov5640_write_reg>
 800876c:	2800      	cmp	r0, #0
 800876e:	d189      	bne.n	8008684 <OV5640_SetPixelFormat+0x68>
  tickstart = pObj->IO.GetTick();
 8008770:	6963      	ldr	r3, [r4, #20]
 8008772:	4798      	blx	r3
 8008774:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008776:	6963      	ldr	r3, [r4, #20]
 8008778:	4798      	blx	r3
 800877a:	4285      	cmp	r5, r0
 800877c:	d0fb      	beq.n	8008776 <OV5640_SetPixelFormat+0x15a>
 800877e:	e7ac      	b.n	80086da <OV5640_SetPixelFormat+0xbe>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8008780:	2230      	movs	r2, #48	; 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8008782:	2301      	movs	r3, #1
 8008784:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8008788:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800878a:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 800878e:	462a      	mov	r2, r5
 8008790:	f000 fb7a 	bl	8008e88 <ov5640_write_reg>
 8008794:	2800      	cmp	r0, #0
 8008796:	d053      	beq.n	8008840 <OV5640_SetPixelFormat+0x224>
              ret = OV5640_ERROR;
 8008798:	f04f 36ff 	mov.w	r6, #4294967295
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800879c:	2301      	movs	r3, #1
 800879e:	462a      	mov	r2, r5
 80087a0:	f643 0121 	movw	r1, #14369	; 0x3821
 80087a4:	4638      	mov	r0, r7
 80087a6:	f000 fb67 	bl	8008e78 <ov5640_read_reg>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	f47f af6a 	bne.w	8008684 <OV5640_SetPixelFormat+0x68>
        tmp |= (1 << 5);
 80087b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80087b4:	2301      	movs	r3, #1
 80087b6:	f643 0121 	movw	r1, #14369	; 0x3821
 80087ba:	4638      	mov	r0, r7
        tmp |= (1 << 5);
 80087bc:	f042 0220 	orr.w	r2, r2, #32
 80087c0:	f88d 2007 	strb.w	r2, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80087c4:	462a      	mov	r2, r5
 80087c6:	f000 fb5f 	bl	8008e88 <ov5640_write_reg>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	f47f af5a 	bne.w	8008684 <OV5640_SetPixelFormat+0x68>
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80087d0:	2301      	movs	r3, #1
 80087d2:	462a      	mov	r2, r5
 80087d4:	f243 0102 	movw	r1, #12290	; 0x3002
 80087d8:	4638      	mov	r0, r7
 80087da:	f000 fb4d 	bl	8008e78 <ov5640_read_reg>
 80087de:	2800      	cmp	r0, #0
 80087e0:	f47f af50 	bne.w	8008684 <OV5640_SetPixelFormat+0x68>
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80087e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80087e8:	2301      	movs	r3, #1
 80087ea:	f243 0102 	movw	r1, #12290	; 0x3002
 80087ee:	4638      	mov	r0, r7
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80087f0:	f022 021c 	bic.w	r2, r2, #28
 80087f4:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80087f8:	462a      	mov	r2, r5
 80087fa:	f000 fb45 	bl	8008e88 <ov5640_write_reg>
 80087fe:	2800      	cmp	r0, #0
 8008800:	f47f af40 	bne.w	8008684 <OV5640_SetPixelFormat+0x68>
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8008804:	2301      	movs	r3, #1
 8008806:	462a      	mov	r2, r5
 8008808:	f243 0106 	movw	r1, #12294	; 0x3006
 800880c:	4638      	mov	r0, r7
 800880e:	f000 fb33 	bl	8008e78 <ov5640_read_reg>
 8008812:	2800      	cmp	r0, #0
 8008814:	f47f af36 	bne.w	8008684 <OV5640_SetPixelFormat+0x68>
                tmp |= ((1 << 5) | (1 << 3));
 8008818:	f89d 1007 	ldrb.w	r1, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800881c:	2301      	movs	r3, #1
 800881e:	462a      	mov	r2, r5
 8008820:	4638      	mov	r0, r7
                tmp |= ((1 << 5) | (1 << 3));
 8008822:	f041 0128 	orr.w	r1, r1, #40	; 0x28
 8008826:	f88d 1007 	strb.w	r1, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800882a:	f243 0106 	movw	r1, #12294	; 0x3006
 800882e:	f000 fb2b 	bl	8008e88 <ov5640_write_reg>
 8008832:	2800      	cmp	r0, #0
 8008834:	f47f af26 	bne.w	8008684 <OV5640_SetPixelFormat+0x68>
}
 8008838:	4630      	mov	r0, r6
 800883a:	b002      	add	sp, #8
 800883c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tickstart = pObj->IO.GetTick();
 8008840:	6963      	ldr	r3, [r4, #20]
 8008842:	4798      	blx	r3
 8008844:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008846:	6963      	ldr	r3, [r4, #20]
 8008848:	4798      	blx	r3
 800884a:	42b0      	cmp	r0, r6
 800884c:	d0fb      	beq.n	8008846 <OV5640_SetPixelFormat+0x22a>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800884e:	2200      	movs	r2, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8008850:	2301      	movs	r3, #1
 8008852:	f245 011f 	movw	r1, #20511	; 0x501f
 8008856:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8008858:	f88d 2007 	strb.w	r2, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 800885c:	462a      	mov	r2, r5
 800885e:	f000 fb13 	bl	8008e88 <ov5640_write_reg>
 8008862:	4606      	mov	r6, r0
 8008864:	2800      	cmp	r0, #0
 8008866:	d197      	bne.n	8008798 <OV5640_SetPixelFormat+0x17c>
  tickstart = pObj->IO.GetTick();
 8008868:	6963      	ldr	r3, [r4, #20]
 800886a:	4798      	blx	r3
 800886c:	4680      	mov	r8, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800886e:	6963      	ldr	r3, [r4, #20]
 8008870:	4798      	blx	r3
 8008872:	4580      	cmp	r8, r0
 8008874:	d0fb      	beq.n	800886e <OV5640_SetPixelFormat+0x252>
 8008876:	e791      	b.n	800879c <OV5640_SetPixelFormat+0x180>
  tickstart = pObj->IO.GetTick();
 8008878:	6963      	ldr	r3, [r4, #20]
 800887a:	4798      	blx	r3
 800887c:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800887e:	6963      	ldr	r3, [r4, #20]
 8008880:	4798      	blx	r3
 8008882:	4285      	cmp	r5, r0
 8008884:	d0fb      	beq.n	800887e <OV5640_SetPixelFormat+0x262>
 8008886:	e728      	b.n	80086da <OV5640_SetPixelFormat+0xbe>

08008888 <OV5640_GetResolution>:
{
 8008888:	b570      	push	{r4, r5, r6, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 800888a:	f100 0418 	add.w	r4, r0, #24
{
 800888e:	b082      	sub	sp, #8
 8008890:	460e      	mov	r6, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8008892:	2301      	movs	r3, #1
 8008894:	f10d 0207 	add.w	r2, sp, #7
 8008898:	f643 0108 	movw	r1, #14344	; 0x3808
 800889c:	4620      	mov	r0, r4
 800889e:	f000 faeb 	bl	8008e78 <ov5640_read_reg>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d150      	bne.n	8008948 <OV5640_GetResolution+0xc0>
    x_size = (uint16_t)tmp << 8U;
 80088a6:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80088aa:	2301      	movs	r3, #1
 80088ac:	f10d 0207 	add.w	r2, sp, #7
 80088b0:	f643 0109 	movw	r1, #14345	; 0x3809
 80088b4:	4620      	mov	r0, r4
    x_size = (uint16_t)tmp << 8U;
 80088b6:	022d      	lsls	r5, r5, #8
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80088b8:	f000 fade 	bl	8008e78 <ov5640_read_reg>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d143      	bne.n	8008948 <OV5640_GetResolution+0xc0>
      x_size |= tmp;
 80088c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 80088c4:	f10d 0207 	add.w	r2, sp, #7
 80088c8:	f643 010a 	movw	r1, #14346	; 0x380a
 80088cc:	4620      	mov	r0, r4
      x_size |= tmp;
 80088ce:	431d      	orrs	r5, r3
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 80088d0:	2301      	movs	r3, #1
 80088d2:	f000 fad1 	bl	8008e78 <ov5640_read_reg>
 80088d6:	bbb8      	cbnz	r0, 8008948 <OV5640_GetResolution+0xc0>
        y_size = (uint16_t)tmp << 8U;
 80088d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 80088dc:	4620      	mov	r0, r4
 80088de:	f10d 0207 	add.w	r2, sp, #7
 80088e2:	f643 010b 	movw	r1, #14347	; 0x380b
        y_size = (uint16_t)tmp << 8U;
 80088e6:	021c      	lsls	r4, r3, #8
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 80088e8:	2301      	movs	r3, #1
 80088ea:	f000 fac5 	bl	8008e78 <ov5640_read_reg>
 80088ee:	bb58      	cbnz	r0, 8008948 <OV5640_GetResolution+0xc0>
          y_size |= tmp;
 80088f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
          if ((x_size == 800U) && (y_size == 480U))
 80088f4:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
          y_size |= tmp;
 80088f8:	ea43 0304 	orr.w	r3, r3, r4
          if ((x_size == 800U) && (y_size == 480U))
 80088fc:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8008900:	fab2 f282 	clz	r2, r2
 8008904:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8008908:	d104      	bne.n	8008914 <OV5640_GetResolution+0x8c>
 800890a:	b11a      	cbz	r2, 8008914 <OV5640_GetResolution+0x8c>
            *Resolution = OV5640_R800x480;
 800890c:	2304      	movs	r3, #4
 800890e:	6033      	str	r3, [r6, #0]
}
 8008910:	b002      	add	sp, #8
 8008912:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 640U) && (y_size == 480U))
 8008914:	f5b5 7f20 	cmp.w	r5, #640	; 0x280
 8008918:	d104      	bne.n	8008924 <OV5640_GetResolution+0x9c>
 800891a:	b11a      	cbz	r2, 8008924 <OV5640_GetResolution+0x9c>
            *Resolution = OV5640_R640x480;
 800891c:	2303      	movs	r3, #3
 800891e:	6033      	str	r3, [r6, #0]
}
 8008920:	b002      	add	sp, #8
 8008922:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 480U) && (y_size == 272U))
 8008924:	f5b5 7ff0 	cmp.w	r5, #480	; 0x1e0
 8008928:	d106      	bne.n	8008938 <OV5640_GetResolution+0xb0>
 800892a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800892e:	d103      	bne.n	8008938 <OV5640_GetResolution+0xb0>
            *Resolution = OV5640_R480x272;
 8008930:	2302      	movs	r3, #2
 8008932:	6033      	str	r3, [r6, #0]
}
 8008934:	b002      	add	sp, #8
 8008936:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 320U) && (y_size == 240U))
 8008938:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 800893c:	d108      	bne.n	8008950 <OV5640_GetResolution+0xc8>
 800893e:	2bf0      	cmp	r3, #240	; 0xf0
 8008940:	d106      	bne.n	8008950 <OV5640_GetResolution+0xc8>
            *Resolution = OV5640_R320x240;
 8008942:	2301      	movs	r3, #1
 8008944:	6033      	str	r3, [r6, #0]
            ret = OV5640_OK;
 8008946:	e7e3      	b.n	8008910 <OV5640_GetResolution+0x88>
    ret = OV5640_ERROR;
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
}
 800894c:	b002      	add	sp, #8
 800894e:	bd70      	pop	{r4, r5, r6, pc}
          else if ((x_size == 160U) && (y_size == 120U))
 8008950:	2da0      	cmp	r5, #160	; 0xa0
 8008952:	d1f9      	bne.n	8008948 <OV5640_GetResolution+0xc0>
 8008954:	2b78      	cmp	r3, #120	; 0x78
 8008956:	d1f7      	bne.n	8008948 <OV5640_GetResolution+0xc0>
            *Resolution = OV5640_R160x120;
 8008958:	2300      	movs	r3, #0
 800895a:	6033      	str	r3, [r6, #0]
  return ret;
 800895c:	e7d8      	b.n	8008910 <OV5640_GetResolution+0x88>
 800895e:	bf00      	nop

08008960 <OV5640_ReadID>:
{
 8008960:	b5f0      	push	{r4, r5, r6, r7, lr}
  pObj->IO.Init();
 8008962:	4606      	mov	r6, r0
{
 8008964:	b083      	sub	sp, #12
 8008966:	460f      	mov	r7, r1
 8008968:	4604      	mov	r4, r0
  pObj->IO.Init();
 800896a:	f856 3b18 	ldr.w	r3, [r6], #24
 800896e:	4798      	blx	r3
  tmp = 0x80;
 8008970:	2380      	movs	r3, #128	; 0x80
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8008972:	f10d 0207 	add.w	r2, sp, #7
 8008976:	f243 0108 	movw	r1, #12296	; 0x3008
  tmp = 0x80;
 800897a:	f88d 3007 	strb.w	r3, [sp, #7]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 800897e:	4630      	mov	r0, r6
 8008980:	2301      	movs	r3, #1
 8008982:	f000 fa81 	bl	8008e88 <ov5640_write_reg>
 8008986:	bb28      	cbnz	r0, 80089d4 <OV5640_ReadID+0x74>
  tickstart = pObj->IO.GetTick();
 8008988:	6963      	ldr	r3, [r4, #20]
 800898a:	4798      	blx	r3
 800898c:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800898e:	6963      	ldr	r3, [r4, #20]
 8008990:	4798      	blx	r3
 8008992:	1b43      	subs	r3, r0, r5
 8008994:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008998:	d3f9      	bcc.n	800898e <OV5640_ReadID+0x2e>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 800899a:	2301      	movs	r3, #1
 800899c:	f10d 0207 	add.w	r2, sp, #7
 80089a0:	f243 010a 	movw	r1, #12298	; 0x300a
 80089a4:	4630      	mov	r0, r6
 80089a6:	f000 fa67 	bl	8008e78 <ov5640_read_reg>
 80089aa:	b998      	cbnz	r0, 80089d4 <OV5640_ReadID+0x74>
      *Id = (uint32_t)tmp << 8U;
 80089ac:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80089b0:	2301      	movs	r3, #1
 80089b2:	f10d 0207 	add.w	r2, sp, #7
 80089b6:	4630      	mov	r0, r6
      *Id = (uint32_t)tmp << 8U;
 80089b8:	0209      	lsls	r1, r1, #8
 80089ba:	6039      	str	r1, [r7, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80089bc:	f243 010b 	movw	r1, #12299	; 0x300b
 80089c0:	f000 fa5a 	bl	8008e78 <ov5640_read_reg>
 80089c4:	b930      	cbnz	r0, 80089d4 <OV5640_ReadID+0x74>
        *Id |= tmp;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	603b      	str	r3, [r7, #0]
}
 80089d0:	b003      	add	sp, #12
 80089d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = OV5640_ERROR;
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295
 80089d8:	e7fa      	b.n	80089d0 <OV5640_ReadID+0x70>
 80089da:	bf00      	nop

080089dc <OV5640_MirrorFlipConfig>:
{
 80089dc:	b530      	push	{r4, r5, lr}
  uint8_t tmp3820 = 0;
 80089de:	2200      	movs	r2, #0
{
 80089e0:	b083      	sub	sp, #12
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80089e2:	f100 0418 	add.w	r4, r0, #24
{
 80089e6:	460d      	mov	r5, r1
  uint8_t tmp3820 = 0;
 80089e8:	f88d 2006 	strb.w	r2, [sp, #6]
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80089ec:	2301      	movs	r3, #1
 80089ee:	f10d 0206 	add.w	r2, sp, #6
 80089f2:	f643 0120 	movw	r1, #14368	; 0x3820
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 fa3e 	bl	8008e78 <ov5640_read_reg>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d160      	bne.n	8008ac2 <OV5640_MirrorFlipConfig+0xe6>
    tmp3820 &= 0xF9U;
 8008a00:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008a04:	f10d 0207 	add.w	r2, sp, #7
 8008a08:	f643 0121 	movw	r1, #14369	; 0x3821
 8008a0c:	4620      	mov	r0, r4
    tmp3820 &= 0xF9U;
 8008a0e:	f023 0306 	bic.w	r3, r3, #6
 8008a12:	f88d 3006 	strb.w	r3, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008a16:	2301      	movs	r3, #1
 8008a18:	f000 fa2e 	bl	8008e78 <ov5640_read_reg>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d150      	bne.n	8008ac2 <OV5640_MirrorFlipConfig+0xe6>
      tmp3821 &= 0xF9U;
 8008a20:	f89d 3007 	ldrb.w	r3, [sp, #7]
      switch (Config)
 8008a24:	2d02      	cmp	r5, #2
      tmp3821 &= 0xF9U;
 8008a26:	f023 0306 	bic.w	r3, r3, #6
 8008a2a:	f88d 3007 	strb.w	r3, [sp, #7]
      switch (Config)
 8008a2e:	d01b      	beq.n	8008a68 <OV5640_MirrorFlipConfig+0x8c>
 8008a30:	2d03      	cmp	r5, #3
 8008a32:	d049      	beq.n	8008ac8 <OV5640_MirrorFlipConfig+0xec>
 8008a34:	2d01      	cmp	r5, #1
 8008a36:	d034      	beq.n	8008aa2 <OV5640_MirrorFlipConfig+0xc6>
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008a38:	2301      	movs	r3, #1
 8008a3a:	f10d 0206 	add.w	r2, sp, #6
 8008a3e:	f643 0120 	movw	r1, #14368	; 0x3820
 8008a42:	4620      	mov	r0, r4
 8008a44:	f000 fa20 	bl	8008e88 <ov5640_write_reg>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d13a      	bne.n	8008ac2 <OV5640_MirrorFlipConfig+0xe6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	f10d 0207 	add.w	r2, sp, #7
 8008a52:	f643 0121 	movw	r1, #14369	; 0x3821
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 fa16 	bl	8008e88 <ov5640_write_reg>
 8008a5c:	3800      	subs	r0, #0
 8008a5e:	bf18      	it	ne
 8008a60:	2001      	movne	r0, #1
 8008a62:	4240      	negs	r0, r0
}
 8008a64:	b003      	add	sp, #12
 8008a66:	bd30      	pop	{r4, r5, pc}
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008a68:	2301      	movs	r3, #1
 8008a6a:	f10d 0206 	add.w	r2, sp, #6
 8008a6e:	f643 0120 	movw	r1, #14368	; 0x3820
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 fa08 	bl	8008e88 <ov5640_write_reg>
 8008a78:	bb18      	cbnz	r0, 8008ac2 <OV5640_MirrorFlipConfig+0xe6>
            tmp3821 |= 0x06U;
 8008a7a:	f89d 5007 	ldrb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f10d 0207 	add.w	r2, sp, #7
 8008a84:	f643 0121 	movw	r1, #14369	; 0x3821
            tmp3821 |= 0x06U;
 8008a88:	f045 0506 	orr.w	r5, r5, #6
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008a8c:	4620      	mov	r0, r4
            tmp3821 |= 0x06U;
 8008a8e:	f88d 5007 	strb.w	r5, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008a92:	f000 f9f9 	bl	8008e88 <ov5640_write_reg>
 8008a96:	3800      	subs	r0, #0
 8008a98:	bf18      	it	ne
 8008a9a:	2001      	movne	r0, #1
 8008a9c:	4240      	negs	r0, r0
}
 8008a9e:	b003      	add	sp, #12
 8008aa0:	bd30      	pop	{r4, r5, pc}
          tmp3820 |= 0x06U;
 8008aa2:	f89d 3006 	ldrb.w	r3, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008aa6:	f10d 0206 	add.w	r2, sp, #6
 8008aaa:	f643 0120 	movw	r1, #14368	; 0x3820
 8008aae:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 8008ab0:	f043 0306 	orr.w	r3, r3, #6
 8008ab4:	f88d 3006 	strb.w	r3, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008ab8:	462b      	mov	r3, r5
 8008aba:	f000 f9e5 	bl	8008e88 <ov5640_write_reg>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d0c4      	beq.n	8008a4c <OV5640_MirrorFlipConfig+0x70>
    ret = OV5640_ERROR;
 8008ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac6:	e7cd      	b.n	8008a64 <OV5640_MirrorFlipConfig+0x88>
          tmp3820 |= 0x06U;
 8008ac8:	f89d 1006 	ldrb.w	r1, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008acc:	2301      	movs	r3, #1
 8008ace:	f10d 0206 	add.w	r2, sp, #6
 8008ad2:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 8008ad4:	f041 0106 	orr.w	r1, r1, #6
 8008ad8:	f88d 1006 	strb.w	r1, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008adc:	f643 0120 	movw	r1, #14368	; 0x3820
 8008ae0:	f000 f9d2 	bl	8008e88 <ov5640_write_reg>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d0c8      	beq.n	8008a7a <OV5640_MirrorFlipConfig+0x9e>
 8008ae8:	e7eb      	b.n	8008ac2 <OV5640_MirrorFlipConfig+0xe6>
 8008aea:	bf00      	nop

08008aec <OV5640_NightModeConfig>:
{
 8008aec:	b570      	push	{r4, r5, r6, lr}
  uint8_t tmp = 0;
 8008aee:	2300      	movs	r3, #0
{
 8008af0:	b082      	sub	sp, #8
  if (Cmd == NIGHT_MODE_ENABLE)
 8008af2:	2901      	cmp	r1, #1
  uint8_t tmp = 0;
 8008af4:	f88d 3007 	strb.w	r3, [sp, #7]
  if (Cmd == NIGHT_MODE_ENABLE)
 8008af8:	d01e      	beq.n	8008b38 <OV5640_NightModeConfig+0x4c>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008afa:	f100 0418 	add.w	r4, r0, #24
 8008afe:	2301      	movs	r3, #1
 8008b00:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8008b04:	f10d 0207 	add.w	r2, sp, #7
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 f9b5 	bl	8008e78 <ov5640_read_reg>
 8008b0e:	b9f8      	cbnz	r0, 8008b50 <OV5640_NightModeConfig+0x64>
      tmp &= 0xFBU;
 8008b10:	f89d 5007 	ldrb.w	r5, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008b14:	2301      	movs	r3, #1
 8008b16:	f10d 0207 	add.w	r2, sp, #7
 8008b1a:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
      tmp &= 0xFBU;
 8008b1e:	f025 0504 	bic.w	r5, r5, #4
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008b22:	4620      	mov	r0, r4
      tmp &= 0xFBU;
 8008b24:	f88d 5007 	strb.w	r5, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008b28:	f000 f9ae 	bl	8008e88 <ov5640_write_reg>
 8008b2c:	3800      	subs	r0, #0
 8008b2e:	bf18      	it	ne
 8008b30:	2001      	movne	r0, #1
 8008b32:	4240      	negs	r0, r0
}
 8008b34:	b002      	add	sp, #8
 8008b36:	bd70      	pop	{r4, r5, r6, pc}
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8008b38:	f100 0418 	add.w	r4, r0, #24
 8008b3c:	460d      	mov	r5, r1
 8008b3e:	460b      	mov	r3, r1
 8008b40:	f10d 0207 	add.w	r2, sp, #7
 8008b44:	f243 0138 	movw	r1, #12344	; 0x3038
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 f99d 	bl	8008e88 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b4e:	b118      	cbz	r0, 8008b58 <OV5640_NightModeConfig+0x6c>
      ret = OV5640_ERROR;
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008b54:	b002      	add	sp, #8
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8008b58:	462b      	mov	r3, r5
 8008b5a:	f10d 0207 	add.w	r2, sp, #7
 8008b5e:	f243 0139 	movw	r1, #12345	; 0x3039
 8008b62:	4620      	mov	r0, r4
 8008b64:	f000 f990 	bl	8008e88 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d1f1      	bne.n	8008b50 <OV5640_NightModeConfig+0x64>
      tmp = 0x7C;
 8008b6c:	227c      	movs	r2, #124	; 0x7c
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8008b6e:	462b      	mov	r3, r5
 8008b70:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8008b74:	4620      	mov	r0, r4
      tmp = 0x7C;
 8008b76:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8008b7a:	f10d 0207 	add.w	r2, sp, #7
 8008b7e:	f000 f983 	bl	8008e88 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d1e4      	bne.n	8008b50 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8008b86:	462b      	mov	r3, r5
 8008b88:	f10d 0207 	add.w	r2, sp, #7
 8008b8c:	f643 2108 	movw	r1, #14856	; 0x3a08
 8008b90:	4620      	mov	r0, r4
      tmp = 0x01;
 8008b92:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8008b96:	f000 f977 	bl	8008e88 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d1d8      	bne.n	8008b50 <OV5640_NightModeConfig+0x64>
      tmp = 0x27;
 8008b9e:	2227      	movs	r2, #39	; 0x27
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	f643 2109 	movw	r1, #14857	; 0x3a09
 8008ba6:	4620      	mov	r0, r4
      tmp = 0x27;
 8008ba8:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8008bac:	f10d 0207 	add.w	r2, sp, #7
 8008bb0:	f000 f96a 	bl	8008e88 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d1cb      	bne.n	8008b50 <OV5640_NightModeConfig+0x64>
      tmp = 0x00;
 8008bb8:	f88d 0007 	strb.w	r0, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8008bbc:	462b      	mov	r3, r5
 8008bbe:	f10d 0207 	add.w	r2, sp, #7
 8008bc2:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 f95e 	bl	8008e88 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d1bf      	bne.n	8008b50 <OV5640_NightModeConfig+0x64>
      tmp = 0xF6;
 8008bd0:	22f6      	movs	r2, #246	; 0xf6
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8008bd2:	462b      	mov	r3, r5
 8008bd4:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8008bd8:	4620      	mov	r0, r4
      tmp = 0xF6;
 8008bda:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8008bde:	f10d 0207 	add.w	r2, sp, #7
 8008be2:	f000 f951 	bl	8008e88 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d1b2      	bne.n	8008b50 <OV5640_NightModeConfig+0x64>
      tmp = 0x04;
 8008bea:	2204      	movs	r2, #4
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8008bec:	462b      	mov	r3, r5
 8008bee:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8008bf2:	4620      	mov	r0, r4
      tmp = 0x04;
 8008bf4:	f88d 2007 	strb.w	r2, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8008bf8:	f10d 0207 	add.w	r2, sp, #7
 8008bfc:	f000 f944 	bl	8008e88 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d1a5      	bne.n	8008b50 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8008c04:	462b      	mov	r3, r5
 8008c06:	f10d 0207 	add.w	r2, sp, #7
 8008c0a:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f000 f93a 	bl	8008e88 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d19b      	bne.n	8008b50 <OV5640_NightModeConfig+0x64>
      tmp = 0x0B;
 8008c18:	260b      	movs	r6, #11
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	f10d 0207 	add.w	r2, sp, #7
 8008c20:	f643 2102 	movw	r1, #14850	; 0x3a02
 8008c24:	4620      	mov	r0, r4
      tmp = 0x0B;
 8008c26:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8008c2a:	f000 f92d 	bl	8008e88 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d18e      	bne.n	8008b50 <OV5640_NightModeConfig+0x64>
      tmp = 0x88;
 8008c32:	2588      	movs	r5, #136	; 0x88
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8008c34:	2301      	movs	r3, #1
 8008c36:	f10d 0207 	add.w	r2, sp, #7
 8008c3a:	f643 2103 	movw	r1, #14851	; 0x3a03
 8008c3e:	4620      	mov	r0, r4
      tmp = 0x88;
 8008c40:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8008c44:	f000 f920 	bl	8008e88 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d181      	bne.n	8008b50 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	f10d 0207 	add.w	r2, sp, #7
 8008c52:	f643 2114 	movw	r1, #14868	; 0x3a14
 8008c56:	4620      	mov	r0, r4
      tmp = 0x0B;
 8008c58:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8008c5c:	f000 f914 	bl	8008e88 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008c60:	2800      	cmp	r0, #0
 8008c62:	f47f af75 	bne.w	8008b50 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8008c66:	2301      	movs	r3, #1
 8008c68:	f10d 0207 	add.w	r2, sp, #7
 8008c6c:	f643 2115 	movw	r1, #14869	; 0x3a15
 8008c70:	e757      	b.n	8008b22 <OV5640_NightModeConfig+0x36>
 8008c72:	bf00      	nop

08008c74 <OV5640_ZoomConfig>:
{
 8008c74:	b530      	push	{r4, r5, lr}
 8008c76:	b083      	sub	sp, #12
 8008c78:	460d      	mov	r5, r1
 8008c7a:	4604      	mov	r4, r0
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8008c7c:	a901      	add	r1, sp, #4
 8008c7e:	f7ff fe03 	bl	8008888 <OV5640_GetResolution>
 8008c82:	bb88      	cbnz	r0, 8008ce8 <OV5640_ZoomConfig+0x74>
    if (zoom == OV5640_ZOOM_x1)
 8008c84:	2d44      	cmp	r5, #68	; 0x44
 8008c86:	d026      	beq.n	8008cd6 <OV5640_ZoomConfig+0x62>
      switch (res)
 8008c88:	9b01      	ldr	r3, [sp, #4]
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d91f      	bls.n	8008cce <OV5640_ZoomConfig+0x5a>
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d100      	bne.n	8008c94 <OV5640_ZoomConfig+0x20>
          zoom = zoom >> 2U;
 8008c92:	08ad      	lsrs	r5, r5, #2
      tmp = 0x00;
 8008c94:	2200      	movs	r2, #0
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008c96:	3418      	adds	r4, #24
 8008c98:	2301      	movs	r3, #1
 8008c9a:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
      tmp = 0x00;
 8008c9e:	f88d 2003 	strb.w	r2, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f10d 0203 	add.w	r2, sp, #3
 8008ca8:	f000 f8ee 	bl	8008e88 <ov5640_write_reg>
 8008cac:	b9e0      	cbnz	r0, 8008ce8 <OV5640_ZoomConfig+0x74>
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8008cae:	2301      	movs	r3, #1
 8008cb0:	f10d 0203 	add.w	r2, sp, #3
 8008cb4:	f245 6101 	movw	r1, #22017	; 0x5601
 8008cb8:	4620      	mov	r0, r4
        tmp = (uint8_t)zoom;
 8008cba:	f88d 5003 	strb.w	r5, [sp, #3]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8008cbe:	f000 f8e3 	bl	8008e88 <ov5640_write_reg>
 8008cc2:	3800      	subs	r0, #0
 8008cc4:	bf18      	it	ne
 8008cc6:	2001      	movne	r0, #1
 8008cc8:	4240      	negs	r0, r0
}
 8008cca:	b003      	add	sp, #12
 8008ccc:	bd30      	pop	{r4, r5, pc}
      switch (res)
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d0e0      	beq.n	8008c94 <OV5640_ZoomConfig+0x20>
          zoom = zoom >> 1U;
 8008cd2:	086d      	lsrs	r5, r5, #1
          break;
 8008cd4:	e7de      	b.n	8008c94 <OV5640_ZoomConfig+0x20>
      tmp = 0x10;
 8008cd6:	2510      	movs	r5, #16
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f10d 0203 	add.w	r2, sp, #3
 8008cde:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8008ce2:	f104 0018 	add.w	r0, r4, #24
 8008ce6:	e7e8      	b.n	8008cba <OV5640_ZoomConfig+0x46>
    ret = OV5640_ERROR;
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cec:	e7ed      	b.n	8008cca <OV5640_ZoomConfig+0x56>
 8008cee:	bf00      	nop

08008cf0 <OV5640_Init>:
  if (pObj->IsInitialized == 0U)
 8008cf0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008cf4:	bb8b      	cbnz	r3, 8008d5a <OV5640_Init+0x6a>
    if ((Resolution > OV5640_R800x480) ||
 8008cf6:	2904      	cmp	r1, #4
{
 8008cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cfc:	4689      	mov	r9, r1
 8008cfe:	b083      	sub	sp, #12
    if ((Resolution > OV5640_R800x480) ||
 8008d00:	d826      	bhi.n	8008d50 <OV5640_Init+0x60>
 8008d02:	2a02      	cmp	r2, #2
 8008d04:	4607      	mov	r7, r0
 8008d06:	4690      	mov	r8, r2
 8008d08:	d902      	bls.n	8008d10 <OV5640_Init+0x20>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8008d0a:	1fd3      	subs	r3, r2, #7
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d81f      	bhi.n	8008d50 <OV5640_Init+0x60>
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8008d10:	f107 0618 	add.w	r6, r7, #24
 8008d14:	2400      	movs	r4, #0
 8008d16:	4d23      	ldr	r5, [pc, #140]	; (8008da4 <OV5640_Init+0xb4>)
          tmp = (uint8_t)OV5640_Common[index][1];
 8008d18:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8008d1c:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
 8008d20:	2301      	movs	r3, #1
 8008d22:	f10d 0206 	add.w	r2, sp, #6
          tmp = (uint8_t)OV5640_Common[index][1];
 8008d26:	f8bc c002 	ldrh.w	ip, [ip, #2]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8008d2a:	4630      	mov	r0, r6
          tmp = (uint8_t)OV5640_Common[index][1];
 8008d2c:	f88d c006 	strb.w	ip, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8008d30:	f000 f8aa 	bl	8008e88 <ov5640_write_reg>
 8008d34:	b198      	cbz	r0, 8008d5e <OV5640_Init+0x6e>
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8008d36:	2cfd      	cmp	r4, #253	; 0xfd
 8008d38:	d00a      	beq.n	8008d50 <OV5640_Init+0x60>
 8008d3a:	2cfc      	cmp	r4, #252	; 0xfc
 8008d3c:	f104 0302 	add.w	r3, r4, #2
 8008d40:	d102      	bne.n	8008d48 <OV5640_Init+0x58>
 8008d42:	e005      	b.n	8008d50 <OV5640_Init+0x60>
 8008d44:	2bfe      	cmp	r3, #254	; 0xfe
 8008d46:	d003      	beq.n	8008d50 <OV5640_Init+0x60>
 8008d48:	2bfd      	cmp	r3, #253	; 0xfd
 8008d4a:	f103 0302 	add.w	r3, r3, #2
 8008d4e:	d1f9      	bne.n	8008d44 <OV5640_Init+0x54>
          ret = OV5640_ERROR;
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008d54:	b003      	add	sp, #12
 8008d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  int32_t ret = OV5640_OK;
 8008d5a:	2000      	movs	r0, #0
}
 8008d5c:	4770      	bx	lr
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8008d5e:	3401      	adds	r4, #1
 8008d60:	2cfe      	cmp	r4, #254	; 0xfe
 8008d62:	d1d9      	bne.n	8008d18 <OV5640_Init+0x28>
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8008d64:	4649      	mov	r1, r9
 8008d66:	4638      	mov	r0, r7
 8008d68:	f7ff f81c 	bl	8007da4 <OV5640_SetResolution>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d1ef      	bne.n	8008d50 <OV5640_Init+0x60>
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8008d70:	4641      	mov	r1, r8
 8008d72:	4638      	mov	r0, r7
 8008d74:	f7ff fc52 	bl	800861c <OV5640_SetPixelFormat>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d1e9      	bne.n	8008d50 <OV5640_Init+0x60>
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8008d7c:	2122      	movs	r1, #34	; 0x22
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8008d7e:	2301      	movs	r3, #1
 8008d80:	f10d 0207 	add.w	r2, sp, #7
 8008d84:	4630      	mov	r0, r6
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8008d86:	f88d 1007 	strb.w	r1, [sp, #7]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8008d8a:	f244 7140 	movw	r1, #18240	; 0x4740
 8008d8e:	f000 f87b 	bl	8008e88 <ov5640_write_reg>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d1dc      	bne.n	8008d50 <OV5640_Init+0x60>
          pObj->IsInitialized = 1U;
 8008d96:	2301      	movs	r3, #1
 8008d98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
}
 8008d9c:	b003      	add	sp, #12
 8008d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008da2:	bf00      	nop
 8008da4:	080bf694 	.word	0x080bf694

08008da8 <OV5640_RegisterBusIO>:
  if (pObj == NULL)
 8008da8:	b1d0      	cbz	r0, 8008de0 <OV5640_RegisterBusIO+0x38>
    pObj->IO.Address   = pIO->Address;
 8008daa:	890a      	ldrh	r2, [r1, #8]
{
 8008dac:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 8008dae:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 8008db2:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8008db4:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008db8:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
    pObj->IO.GetTick   = pIO->GetTick;
 8008dbc:	6949      	ldr	r1, [r1, #20]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008dbe:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8008dc0:	6141      	str	r1, [r0, #20]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8008dc2:	4a09      	ldr	r2, [pc, #36]	; (8008de8 <OV5640_RegisterBusIO+0x40>)
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8008dc4:	4909      	ldr	r1, [pc, #36]	; (8008dec <OV5640_RegisterBusIO+0x44>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008dc6:	60c4      	str	r4, [r0, #12]
    pObj->Ctx.handle   = pObj;
 8008dc8:	6200      	str	r0, [r0, #32]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8008dca:	e9c0 2106 	strd	r2, r1, [r0, #24]
    if (pObj->IO.Init != NULL)
 8008dce:	b113      	cbz	r3, 8008dd6 <OV5640_RegisterBusIO+0x2e>
}
 8008dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 8008dd4:	4718      	bx	r3
}
 8008dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dde:	4770      	bx	lr
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	08007d95 	.word	0x08007d95
 8008dec:	08007d85 	.word	0x08007d85

08008df0 <OV5640_ColorbarModeConfig>:
  uint8_t tmp = 0x40;
 8008df0:	2340      	movs	r3, #64	; 0x40
{
 8008df2:	b530      	push	{r4, r5, lr}
 8008df4:	b083      	sub	sp, #12
  uint8_t tmp = 0x40;
 8008df6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((Cmd == COLORBAR_MODE_ENABLE) || (Cmd == COLORBAR_MODE_GRADUALV))
 8008dfa:	1e4b      	subs	r3, r1, #1
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d922      	bls.n	8008e46 <OV5640_ColorbarModeConfig+0x56>
    tmp = 0x10;
 8008e00:	2110      	movs	r1, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008e02:	f100 0418 	add.w	r4, r0, #24
 8008e06:	2301      	movs	r3, #1
 8008e08:	f10d 0207 	add.w	r2, sp, #7
    tmp = 0x10;
 8008e0c:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008e10:	4620      	mov	r0, r4
 8008e12:	f245 5184 	movw	r1, #21892	; 0x5584
 8008e16:	f000 f837 	bl	8008e88 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	b118      	cbz	r0, 8008e26 <OV5640_ColorbarModeConfig+0x36>
      ret = OV5640_ERROR;
 8008e1e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008e22:	b003      	add	sp, #12
 8008e24:	bd30      	pop	{r4, r5, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8008e26:	2301      	movs	r3, #1
 8008e28:	f10d 0207 	add.w	r2, sp, #7
 8008e2c:	f245 013d 	movw	r1, #20541	; 0x503d
 8008e30:	4620      	mov	r0, r4
      tmp = 0x00;
 8008e32:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8008e36:	f000 f827 	bl	8008e88 <ov5640_write_reg>
    if (ret != OV5640_OK)
 8008e3a:	3800      	subs	r0, #0
 8008e3c:	bf18      	it	ne
 8008e3e:	2001      	movne	r0, #1
 8008e40:	4240      	negs	r0, r0
}
 8008e42:	b003      	add	sp, #12
 8008e44:	bd30      	pop	{r4, r5, pc}
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008e46:	f100 0418 	add.w	r4, r0, #24
 8008e4a:	460d      	mov	r5, r1
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	f10d 0207 	add.w	r2, sp, #7
 8008e52:	f245 5184 	movw	r1, #21892	; 0x5584
 8008e56:	4620      	mov	r0, r4
 8008e58:	f000 f816 	bl	8008e88 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d1de      	bne.n	8008e1e <OV5640_ColorbarModeConfig+0x2e>
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 8008e60:	2d02      	cmp	r5, #2
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8008e62:	f04f 0301 	mov.w	r3, #1
 8008e66:	f10d 0207 	add.w	r2, sp, #7
 8008e6a:	f245 013d 	movw	r1, #20541	; 0x503d
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 8008e6e:	bf0c      	ite	eq
 8008e70:	258c      	moveq	r5, #140	; 0x8c
 8008e72:	2580      	movne	r5, #128	; 0x80
 8008e74:	e7dc      	b.n	8008e30 <OV5640_ColorbarModeConfig+0x40>
 8008e76:	bf00      	nop

08008e78 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8008e78:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008e7a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8008e7e:	46a4      	mov	ip, r4
}
 8008e80:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008e84:	4760      	bx	ip
 8008e86:	bf00      	nop

08008e88 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8008e88:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8008e8a:	6804      	ldr	r4, [r0, #0]
 8008e8c:	6880      	ldr	r0, [r0, #8]
 8008e8e:	46a4      	mov	ip, r4
}
 8008e90:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8008e94:	4760      	bx	ip
 8008e96:	bf00      	nop

08008e98 <OV9655_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV9655_DeInit(OV9655_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8008e98:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d102      	bne.n	8008ea6 <OV9655_DeInit+0xe>
  {
    pObj->IsInitialized = 0U;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV9655_OK;
}
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop

08008eac <OV9655_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV9655_ERROR;
}
 8008eac:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop

08008eb4 <OV9655_GetCapabilities>:
  */
int32_t OV9655_GetCapabilities(OV9655_Object_t *pObj, OV9655_Capabilities_t *Capabilities)
{
  int32_t ret;

  if(pObj == NULL)
 8008eb4:	b168      	cbz	r0, 8008ed2 <OV9655_GetCapabilities+0x1e>
  {
    ret = OV9655_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8008eb6:	2301      	movs	r3, #1
    Capabilities->Config_Contrast      = 1;
    Capabilities->Config_HueDegree     = 0;
 8008eb8:	2200      	movs	r2, #0
    Capabilities->Config_Brightness    = 1;
 8008eba:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 0;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 0;

    ret = OV9655_OK;
 8008ebc:	4610      	mov	r0, r2
    Capabilities->Config_LightMode     = 0;
 8008ebe:	604a      	str	r2, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8008ec0:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 8008ec2:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8008ec4:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 0;
 8008ec6:	610a      	str	r2, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 8008ec8:	608b      	str	r3, [r1, #8]
    Capabilities->Config_Zoom          = 0;
 8008eca:	620a      	str	r2, [r1, #32]
    Capabilities->Config_HueDegree     = 0;
 8008ecc:	e9c1 3205 	strd	r3, r2, [r1, #20]
    ret = OV9655_OK;
 8008ed0:	4770      	bx	lr
    ret = OV9655_ERROR;
 8008ed2:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8008ed6:	4770      	bx	lr

08008ed8 <OV9655_SetLightMode>:
{
  (void)(pObj);
  (void)(LightMode);

  return OV9655_ERROR;
}
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop

08008ee0 <OV9655_SetSaturation>:
{
  (void)(pObj);
  (void)(Level);

  return OV9655_ERROR;
}
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop

08008ee8 <OV9655_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8008ee8:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008eea:	6904      	ldr	r4, [r0, #16]
 8008eec:	8900      	ldrh	r0, [r0, #8]
 8008eee:	46a4      	mov	ip, r4
}
 8008ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008ef4:	4760      	bx	ip
 8008ef6:	bf00      	nop

08008ef8 <OV9655_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8008ef8:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008efa:	68c4      	ldr	r4, [r0, #12]
 8008efc:	8900      	ldrh	r0, [r0, #8]
 8008efe:	46a4      	mov	ip, r4
}
 8008f00:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008f04:	4760      	bx	ip
 8008f06:	bf00      	nop

08008f08 <OV9655_SetResolution>:
  if (Resolution > OV9655_R640x480)
 8008f08:	2903      	cmp	r1, #3
{
 8008f0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0e:	b083      	sub	sp, #12
  if (Resolution > OV9655_R640x480)
 8008f10:	d831      	bhi.n	8008f76 <OV9655_SetResolution+0x6e>
    switch (Resolution)
 8008f12:	2901      	cmp	r1, #1
 8008f14:	4604      	mov	r4, r0
 8008f16:	d034      	beq.n	8008f82 <OV9655_SetResolution+0x7a>
 8008f18:	3902      	subs	r1, #2
 8008f1a:	2600      	movs	r6, #0
 8008f1c:	2901      	cmp	r1, #1
 8008f1e:	d864      	bhi.n	8008fea <OV9655_SetResolution+0xe2>
 8008f20:	f10d 0a07 	add.w	sl, sp, #7
 8008f24:	f100 0918 	add.w	r9, r0, #24
 8008f28:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 80090d4 <OV9655_SetResolution+0x1cc>
          tmp = OV9655_VGA[index][1];
 8008f2c:	eb0b 0046 	add.w	r0, fp, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008f30:	2301      	movs	r3, #1
 8008f32:	4652      	mov	r2, sl
 8008f34:	f81b 1016 	ldrb.w	r1, [fp, r6, lsl #1]
          tmp = OV9655_VGA[index][1];
 8008f38:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008f3a:	4648      	mov	r0, r9
          tmp = OV9655_VGA[index][1];
 8008f3c:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008f40:	f000 fc60 	bl	8009804 <ov9655_write_reg>
 8008f44:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 8008f46:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008f48:	4680      	mov	r8, r0
 8008f4a:	bf18      	it	ne
 8008f4c:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 8008f4e:	4798      	blx	r3
 8008f50:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008f52:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008f54:	6963      	ldr	r3, [r4, #20]
 8008f56:	4798      	blx	r3
 8008f58:	1b40      	subs	r0, r0, r5
 8008f5a:	2801      	cmp	r0, #1
 8008f5c:	d9fa      	bls.n	8008f54 <OV9655_SetResolution+0x4c>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 8008f5e:	3601      	adds	r6, #1
 8008f60:	2e93      	cmp	r6, #147	; 0x93
 8008f62:	d00a      	beq.n	8008f7a <OV9655_SetResolution+0x72>
        if(ret != OV9655_ERROR)
 8008f64:	f1b8 0f00 	cmp.w	r8, #0
 8008f68:	d0e0      	beq.n	8008f2c <OV9655_SetResolution+0x24>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 8008f6a:	2e92      	cmp	r6, #146	; 0x92
 8008f6c:	f106 0602 	add.w	r6, r6, #2
 8008f70:	d001      	beq.n	8008f76 <OV9655_SetResolution+0x6e>
 8008f72:	2e93      	cmp	r6, #147	; 0x93
 8008f74:	d1f9      	bne.n	8008f6a <OV9655_SetResolution+0x62>
    ret = OV9655_ERROR;
 8008f76:	f04f 37ff 	mov.w	r7, #4294967295
}
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	b003      	add	sp, #12
 8008f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (Resolution)
 8008f82:	2600      	movs	r6, #0
 8008f84:	f8df 8150 	ldr.w	r8, [pc, #336]	; 80090d8 <OV9655_SetResolution+0x1d0>
 8008f88:	f10d 0a07 	add.w	sl, sp, #7
 8008f8c:	f100 0918 	add.w	r9, r0, #24
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008f90:	eb08 0046 	add.w	r0, r8, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008f94:	2301      	movs	r3, #1
 8008f96:	4652      	mov	r2, sl
 8008f98:	f818 1016 	ldrb.w	r1, [r8, r6, lsl #1]
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008f9c:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008f9e:	4648      	mov	r0, r9
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008fa0:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008fa4:	f000 fc2e 	bl	8009804 <ov9655_write_reg>
 8008fa8:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 8008faa:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008fac:	4683      	mov	fp, r0
 8008fae:	bf18      	it	ne
 8008fb0:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 8008fb2:	4798      	blx	r3
 8008fb4:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008fb6:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008fb8:	6963      	ldr	r3, [r4, #20]
 8008fba:	4798      	blx	r3
 8008fbc:	1b40      	subs	r0, r0, r5
 8008fbe:	2801      	cmp	r0, #1
 8008fc0:	d9fa      	bls.n	8008fb8 <OV9655_SetResolution+0xb0>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8008fc2:	3601      	adds	r6, #1
 8008fc4:	2e91      	cmp	r6, #145	; 0x91
 8008fc6:	d043      	beq.n	8009050 <OV9655_SetResolution+0x148>
        if(ret != OV9655_ERROR)
 8008fc8:	f1bb 0f00 	cmp.w	fp, #0
 8008fcc:	d0e0      	beq.n	8008f90 <OV9655_SetResolution+0x88>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8008fce:	2e90      	cmp	r6, #144	; 0x90
 8008fd0:	f106 0602 	add.w	r6, r6, #2
 8008fd4:	d001      	beq.n	8008fda <OV9655_SetResolution+0xd2>
 8008fd6:	2e91      	cmp	r6, #145	; 0x91
 8008fd8:	d1f9      	bne.n	8008fce <OV9655_SetResolution+0xc6>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8008fda:	2500      	movs	r5, #0
 8008fdc:	2d04      	cmp	r5, #4
 8008fde:	f105 0502 	add.w	r5, r5, #2
 8008fe2:	d0c8      	beq.n	8008f76 <OV9655_SetResolution+0x6e>
 8008fe4:	2d05      	cmp	r5, #5
 8008fe6:	d1f9      	bne.n	8008fdc <OV9655_SetResolution+0xd4>
 8008fe8:	e7c5      	b.n	8008f76 <OV9655_SetResolution+0x6e>
 8008fea:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80090d8 <OV9655_SetResolution+0x1d0>
 8008fee:	f10d 0a07 	add.w	sl, sp, #7
 8008ff2:	f100 0918 	add.w	r9, r0, #24
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008ff6:	eb08 0046 	add.w	r0, r8, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	4652      	mov	r2, sl
 8008ffe:	f818 1016 	ldrb.w	r1, [r8, r6, lsl #1]
          tmp = OV9655_QVGA_QQVGA[index][1];
 8009002:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8009004:	4648      	mov	r0, r9
          tmp = OV9655_QVGA_QQVGA[index][1];
 8009006:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800900a:	f000 fbfb 	bl	8009804 <ov9655_write_reg>
 800900e:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 8009010:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8009012:	4683      	mov	fp, r0
 8009014:	bf18      	it	ne
 8009016:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 8009018:	4798      	blx	r3
 800901a:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800901c:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800901e:	6963      	ldr	r3, [r4, #20]
 8009020:	4798      	blx	r3
 8009022:	1b40      	subs	r0, r0, r5
 8009024:	2801      	cmp	r0, #1
 8009026:	d9fa      	bls.n	800901e <OV9655_SetResolution+0x116>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8009028:	3601      	adds	r6, #1
 800902a:	2e91      	cmp	r6, #145	; 0x91
 800902c:	d031      	beq.n	8009092 <OV9655_SetResolution+0x18a>
        if(ret != OV9655_ERROR)
 800902e:	f1bb 0f00 	cmp.w	fp, #0
 8009032:	d0e0      	beq.n	8008ff6 <OV9655_SetResolution+0xee>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8009034:	2e90      	cmp	r6, #144	; 0x90
 8009036:	f106 0602 	add.w	r6, r6, #2
 800903a:	d001      	beq.n	8009040 <OV9655_SetResolution+0x138>
 800903c:	2e91      	cmp	r6, #145	; 0x91
 800903e:	d1f9      	bne.n	8009034 <OV9655_SetResolution+0x12c>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8009040:	2500      	movs	r5, #0
 8009042:	2d04      	cmp	r5, #4
 8009044:	f105 0502 	add.w	r5, r5, #2
 8009048:	d095      	beq.n	8008f76 <OV9655_SetResolution+0x6e>
 800904a:	2d05      	cmp	r5, #5
 800904c:	d1f9      	bne.n	8009042 <OV9655_SetResolution+0x13a>
 800904e:	e792      	b.n	8008f76 <OV9655_SetResolution+0x6e>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8009050:	2500      	movs	r5, #0
          tmp = OV9655_QVGA[index][1];
 8009052:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80090dc <OV9655_SetResolution+0x1d4>
        if(ret != OV9655_ERROR)
 8009056:	2f00      	cmp	r7, #0
 8009058:	d1c0      	bne.n	8008fdc <OV9655_SetResolution+0xd4>
          tmp = OV9655_QVGA[index][1];
 800905a:	eb08 0345 	add.w	r3, r8, r5, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 800905e:	4652      	mov	r2, sl
 8009060:	f818 1015 	ldrb.w	r1, [r8, r5, lsl #1]
 8009064:	4648      	mov	r0, r9
          tmp = OV9655_QVGA[index][1];
 8009066:	785b      	ldrb	r3, [r3, #1]
 8009068:	f88d 3007 	strb.w	r3, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 800906c:	2301      	movs	r3, #1
 800906e:	f000 fbc9 	bl	8009804 <ov9655_write_reg>
 8009072:	3800      	subs	r0, #0
  tickstart = pObj->IO.GetTick();
 8009074:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8009076:	bf18      	it	ne
 8009078:	2001      	movne	r0, #1
 800907a:	4247      	negs	r7, r0
  tickstart = pObj->IO.GetTick();
 800907c:	4798      	blx	r3
 800907e:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8009080:	6963      	ldr	r3, [r4, #20]
 8009082:	4798      	blx	r3
 8009084:	1b80      	subs	r0, r0, r6
 8009086:	2801      	cmp	r0, #1
 8009088:	d9fa      	bls.n	8009080 <OV9655_SetResolution+0x178>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 800908a:	3501      	adds	r5, #1
 800908c:	2d05      	cmp	r5, #5
 800908e:	d1e2      	bne.n	8009056 <OV9655_SetResolution+0x14e>
 8009090:	e773      	b.n	8008f7a <OV9655_SetResolution+0x72>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8009092:	2500      	movs	r5, #0
          tmp = OV9655_QQVGA[index][1];
 8009094:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80090e0 <OV9655_SetResolution+0x1d8>
        if(ret != OV9655_ERROR)
 8009098:	2f00      	cmp	r7, #0
 800909a:	d1d2      	bne.n	8009042 <OV9655_SetResolution+0x13a>
          tmp = OV9655_QQVGA[index][1];
 800909c:	eb08 0345 	add.w	r3, r8, r5, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80090a0:	4652      	mov	r2, sl
 80090a2:	f818 1015 	ldrb.w	r1, [r8, r5, lsl #1]
 80090a6:	4648      	mov	r0, r9
          tmp = OV9655_QQVGA[index][1];
 80090a8:	785b      	ldrb	r3, [r3, #1]
 80090aa:	f88d 3007 	strb.w	r3, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80090ae:	2301      	movs	r3, #1
 80090b0:	f000 fba8 	bl	8009804 <ov9655_write_reg>
 80090b4:	3800      	subs	r0, #0
  tickstart = pObj->IO.GetTick();
 80090b6:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80090b8:	bf18      	it	ne
 80090ba:	2001      	movne	r0, #1
 80090bc:	4247      	negs	r7, r0
  tickstart = pObj->IO.GetTick();
 80090be:	4798      	blx	r3
 80090c0:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80090c2:	6963      	ldr	r3, [r4, #20]
 80090c4:	4798      	blx	r3
 80090c6:	1b80      	subs	r0, r0, r6
 80090c8:	2801      	cmp	r0, #1
 80090ca:	d9fa      	bls.n	80090c2 <OV9655_SetResolution+0x1ba>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 80090cc:	3501      	adds	r5, #1
 80090ce:	2d05      	cmp	r5, #5
 80090d0:	d1e2      	bne.n	8009098 <OV9655_SetResolution+0x190>
 80090d2:	e752      	b.n	8008f7a <OV9655_SetResolution+0x72>
 80090d4:	080bfca0 	.word	0x080bfca0
 80090d8:	080bfb7c 	.word	0x080bfb7c
 80090dc:	080bfb70 	.word	0x080bfb70
 80090e0:	080bfb64 	.word	0x080bfb64

080090e4 <OV9655_SetColorEffect>:
{
 80090e4:	e92d 41b0 	stmdb	sp!, {r4, r5, r7, r8, lr}
  switch(Effect)
 80090e8:	3901      	subs	r1, #1
{
 80090ea:	b085      	sub	sp, #20
 80090ec:	9001      	str	r0, [sp, #4]
  switch(Effect)
 80090ee:	291f      	cmp	r1, #31
 80090f0:	d821      	bhi.n	8009136 <OV9655_SetColorEffect+0x52>
 80090f2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80090f6:	006e      	.short	0x006e
 80090f8:	002000b3 	.word	0x002000b3
 80090fc:	002000f8 	.word	0x002000f8
 8009100:	00200020 	.word	0x00200020
 8009104:	0020013f 	.word	0x0020013f
 8009108:	00200020 	.word	0x00200020
 800910c:	00200020 	.word	0x00200020
 8009110:	00200020 	.word	0x00200020
 8009114:	00200159 	.word	0x00200159
 8009118:	00200020 	.word	0x00200020
 800911c:	00200020 	.word	0x00200020
 8009120:	00200020 	.word	0x00200020
 8009124:	00200020 	.word	0x00200020
 8009128:	00200020 	.word	0x00200020
 800912c:	00200020 	.word	0x00200020
 8009130:	00200020 	.word	0x00200020
 8009134:	0192      	.short	0x0192
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009136:	f100 0718 	add.w	r7, r0, #24
    tmp = 0xCC;
 800913a:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800913c:	2301      	movs	r3, #1
 800913e:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0xCC;
 8009142:	f88d 100f 	strb.w	r1, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009146:	4638      	mov	r0, r7
 8009148:	213a      	movs	r1, #58	; 0x3a
    tmp = 0x80;
 800914a:	f04f 0880 	mov.w	r8, #128	; 0x80
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800914e:	f000 fb59 	bl	8009804 <ov9655_write_reg>
 8009152:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009154:	2301      	movs	r3, #1
 8009156:	f10d 020f 	add.w	r2, sp, #15
 800915a:	214f      	movs	r1, #79	; 0x4f
 800915c:	4638      	mov	r0, r7
    tmp = 0x80;
 800915e:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009162:	f000 fb4f 	bl	8009804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8009166:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009168:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800916a:	f10d 020f 	add.w	r2, sp, #15
 800916e:	2150      	movs	r1, #80	; 0x50
 8009170:	4638      	mov	r0, r7
 8009172:	f000 fb47 	bl	8009804 <ov9655_write_reg>
    tmp = 0x00;
 8009176:	2300      	movs	r3, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8009178:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800917a:	f10d 020f 	add.w	r2, sp, #15
 800917e:	2151      	movs	r1, #81	; 0x51
    tmp = 0x00;
 8009180:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8009184:	4638      	mov	r0, r7
 8009186:	2301      	movs	r3, #1
 8009188:	f000 fb3c 	bl	8009804 <ov9655_write_reg>
 800918c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800918e:	2301      	movs	r3, #1
 8009190:	f10d 020f 	add.w	r2, sp, #15
 8009194:	2152      	movs	r1, #82	; 0x52
 8009196:	4638      	mov	r0, r7
 8009198:	f000 fb34 	bl	8009804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800919c:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800919e:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80091a0:	f10d 020f 	add.w	r2, sp, #15
 80091a4:	2153      	movs	r1, #83	; 0x53
 80091a6:	4638      	mov	r0, r7
    tmp = 0x80;
 80091a8:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80091ac:	f000 fb2a 	bl	8009804 <ov9655_write_reg>
 80091b0:	4601      	mov	r1, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80091b2:	2301      	movs	r3, #1
 80091b4:	f10d 020f 	add.w	r2, sp, #15
 80091b8:	4638      	mov	r0, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80091ba:	440c      	add	r4, r1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80091bc:	2154      	movs	r1, #84	; 0x54
 80091be:	f000 fb21 	bl	8009804 <ov9655_write_reg>
 80091c2:	4420      	add	r0, r4
  if(ret != OV9655_OK)
 80091c4:	3800      	subs	r0, #0
 80091c6:	bf18      	it	ne
 80091c8:	2001      	movne	r0, #1
}
 80091ca:	4240      	negs	r0, r0
 80091cc:	b005      	add	sp, #20
 80091ce:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80091d2:	f100 0718 	add.w	r7, r0, #24
    tmp = 0xCC;
 80091d6:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80091d8:	2301      	movs	r3, #1
 80091da:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0xCC;
 80091de:	f88d 100f 	strb.w	r1, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80091e2:	4638      	mov	r0, r7
 80091e4:	213a      	movs	r1, #58	; 0x3a
 80091e6:	f000 fb0d 	bl	8009804 <ov9655_write_reg>
    tmp = 0x00;
 80091ea:	2200      	movs	r2, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80091ec:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80091ee:	2301      	movs	r3, #1
 80091f0:	214f      	movs	r1, #79	; 0x4f
    tmp = 0x00;
 80091f2:	f88d 200f 	strb.w	r2, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80091f6:	4638      	mov	r0, r7
 80091f8:	f10d 020f 	add.w	r2, sp, #15
 80091fc:	f000 fb02 	bl	8009804 <ov9655_write_reg>
 8009200:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8009202:	2301      	movs	r3, #1
 8009204:	f10d 020f 	add.w	r2, sp, #15
 8009208:	2150      	movs	r1, #80	; 0x50
 800920a:	4638      	mov	r0, r7
 800920c:	f000 fafa 	bl	8009804 <ov9655_write_reg>
 8009210:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8009212:	2301      	movs	r3, #1
 8009214:	f10d 020f 	add.w	r2, sp, #15
 8009218:	2151      	movs	r1, #81	; 0x51
 800921a:	4638      	mov	r0, r7
 800921c:	f000 faf2 	bl	8009804 <ov9655_write_reg>
 8009220:	1825      	adds	r5, r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8009222:	2301      	movs	r3, #1
 8009224:	f10d 020f 	add.w	r2, sp, #15
 8009228:	2152      	movs	r1, #82	; 0x52
 800922a:	4638      	mov	r0, r7
 800922c:	f000 faea 	bl	8009804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8009230:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8009232:	4405      	add	r5, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8009234:	f10d 020f 	add.w	r2, sp, #15
 8009238:	2153      	movs	r1, #83	; 0x53
 800923a:	4638      	mov	r0, r7
 800923c:	f000 fae2 	bl	8009804 <ov9655_write_reg>
 8009240:	4604      	mov	r4, r0
    tmp = 0x60;
 8009242:	2360      	movs	r3, #96	; 0x60
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8009244:	f10d 020f 	add.w	r2, sp, #15
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8009248:	442c      	add	r4, r5
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 800924a:	4638      	mov	r0, r7
    tmp = 0x60;
 800924c:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8009250:	2154      	movs	r1, #84	; 0x54
 8009252:	2301      	movs	r3, #1
 8009254:	f000 fad6 	bl	8009804 <ov9655_write_reg>
 8009258:	4420      	add	r0, r4
    break;
 800925a:	e7b3      	b.n	80091c4 <OV9655_SetColorEffect+0xe0>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800925c:	f100 0718 	add.w	r7, r0, #24
    tmp = 0xCC;
 8009260:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009262:	2301      	movs	r3, #1
 8009264:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0xCC;
 8009268:	f88d 100f 	strb.w	r1, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800926c:	4638      	mov	r0, r7
 800926e:	213a      	movs	r1, #58	; 0x3a
 8009270:	f000 fac8 	bl	8009804 <ov9655_write_reg>
    tmp = 0x60;
 8009274:	2260      	movs	r2, #96	; 0x60
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009276:	2301      	movs	r3, #1
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009278:	4604      	mov	r4, r0
    tmp = 0x60;
 800927a:	f88d 200f 	strb.w	r2, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800927e:	214f      	movs	r1, #79	; 0x4f
 8009280:	f10d 020f 	add.w	r2, sp, #15
 8009284:	4638      	mov	r0, r7
 8009286:	f000 fabd 	bl	8009804 <ov9655_write_reg>
    tmp = 0x00;
 800928a:	2300      	movs	r3, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800928c:	4404      	add	r4, r0
    tmp = 0x00;
 800928e:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8009292:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8009294:	f10d 020f 	add.w	r2, sp, #15
 8009298:	2150      	movs	r1, #80	; 0x50
 800929a:	4638      	mov	r0, r7
 800929c:	f000 fab2 	bl	8009804 <ov9655_write_reg>
 80092a0:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80092a2:	2301      	movs	r3, #1
 80092a4:	f10d 020f 	add.w	r2, sp, #15
 80092a8:	2151      	movs	r1, #81	; 0x51
 80092aa:	4638      	mov	r0, r7
 80092ac:	f000 faaa 	bl	8009804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80092b0:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80092b2:	1825      	adds	r5, r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80092b4:	f10d 020f 	add.w	r2, sp, #15
 80092b8:	2152      	movs	r1, #82	; 0x52
 80092ba:	4638      	mov	r0, r7
 80092bc:	f000 faa2 	bl	8009804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80092c0:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80092c2:	4405      	add	r5, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80092c4:	f10d 020f 	add.w	r2, sp, #15
 80092c8:	2153      	movs	r1, #83	; 0x53
 80092ca:	4638      	mov	r0, r7
 80092cc:	f000 fa9a 	bl	8009804 <ov9655_write_reg>
 80092d0:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80092d2:	2301      	movs	r3, #1
 80092d4:	f10d 020f 	add.w	r2, sp, #15
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80092d8:	442c      	add	r4, r5
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80092da:	4638      	mov	r0, r7
 80092dc:	2154      	movs	r1, #84	; 0x54
 80092de:	f000 fa91 	bl	8009804 <ov9655_write_reg>
 80092e2:	4420      	add	r0, r4
    break;
 80092e4:	e76e      	b.n	80091c4 <OV9655_SetColorEffect+0xe0>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80092e6:	f100 0818 	add.w	r8, r0, #24
    tmp = 0xCC;
 80092ea:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80092ec:	2301      	movs	r3, #1
 80092ee:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0xCC;
 80092f2:	f88d 100f 	strb.w	r1, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80092f6:	4640      	mov	r0, r8
 80092f8:	213a      	movs	r1, #58	; 0x3a
    tmp = 0x00;
 80092fa:	2700      	movs	r7, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80092fc:	f000 fa82 	bl	8009804 <ov9655_write_reg>
 8009300:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009302:	2301      	movs	r3, #1
 8009304:	f10d 020f 	add.w	r2, sp, #15
 8009308:	214f      	movs	r1, #79	; 0x4f
 800930a:	4640      	mov	r0, r8
    tmp = 0x00;
 800930c:	f88d 700f 	strb.w	r7, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009310:	f000 fa78 	bl	8009804 <ov9655_write_reg>
 8009314:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8009316:	2301      	movs	r3, #1
 8009318:	f10d 020f 	add.w	r2, sp, #15
 800931c:	2150      	movs	r1, #80	; 0x50
 800931e:	4640      	mov	r0, r8
 8009320:	f000 fa70 	bl	8009804 <ov9655_write_reg>
 8009324:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8009326:	2301      	movs	r3, #1
 8009328:	f10d 020f 	add.w	r2, sp, #15
 800932c:	2151      	movs	r1, #81	; 0x51
 800932e:	4640      	mov	r0, r8
 8009330:	f000 fa68 	bl	8009804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8009334:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8009336:	1825      	adds	r5, r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8009338:	f10d 020f 	add.w	r2, sp, #15
 800933c:	2152      	movs	r1, #82	; 0x52
 800933e:	4640      	mov	r0, r8
 8009340:	f000 fa60 	bl	8009804 <ov9655_write_reg>
    tmp = 0x80;
 8009344:	2380      	movs	r3, #128	; 0x80
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8009346:	4405      	add	r5, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8009348:	f10d 020f 	add.w	r2, sp, #15
 800934c:	2153      	movs	r1, #83	; 0x53
    tmp = 0x80;
 800934e:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8009352:	4640      	mov	r0, r8
 8009354:	2301      	movs	r3, #1
 8009356:	f000 fa55 	bl	8009804 <ov9655_write_reg>
 800935a:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 800935c:	f10d 020f 	add.w	r2, sp, #15
 8009360:	4640      	mov	r0, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8009362:	442c      	add	r4, r5
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8009364:	2301      	movs	r3, #1
 8009366:	2154      	movs	r1, #84	; 0x54
    tmp = 0x00;
 8009368:	f88d 700f 	strb.w	r7, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 800936c:	f000 fa4a 	bl	8009804 <ov9655_write_reg>
 8009370:	4420      	add	r0, r4
    break;
 8009372:	e727      	b.n	80091c4 <OV9655_SetColorEffect+0xe0>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009374:	f100 0718 	add.w	r7, r0, #24
    tmp = 0xCC;
 8009378:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800937a:	2301      	movs	r3, #1
 800937c:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0xCC;
 8009380:	f88d 100f 	strb.w	r1, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009384:	4638      	mov	r0, r7
 8009386:	213a      	movs	r1, #58	; 0x3a
 8009388:	f000 fa3c 	bl	8009804 <ov9655_write_reg>
    tmp = 0x00;
 800938c:	2200      	movs	r2, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800938e:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009390:	2301      	movs	r3, #1
    tmp = 0x00;
 8009392:	f88d 200f 	strb.w	r2, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009396:	214f      	movs	r1, #79	; 0x4f
 8009398:	f10d 020f 	add.w	r2, sp, #15
 800939c:	4638      	mov	r0, r7
 800939e:	f000 fa31 	bl	8009804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80093a2:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80093a4:	4404      	add	r4, r0
 80093a6:	e775      	b.n	8009294 <OV9655_SetColorEffect+0x1b0>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80093a8:	f100 0718 	add.w	r7, r0, #24
    tmp = 0xCC;
 80093ac:	21cc      	movs	r1, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80093ae:	2301      	movs	r3, #1
 80093b0:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0xCC;
 80093b4:	f88d 100f 	strb.w	r1, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80093b8:	4638      	mov	r0, r7
 80093ba:	213a      	movs	r1, #58	; 0x3a
    tmp = 0x00;
 80093bc:	f04f 0800 	mov.w	r8, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80093c0:	f000 fa20 	bl	8009804 <ov9655_write_reg>
 80093c4:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80093c6:	2301      	movs	r3, #1
 80093c8:	f10d 020f 	add.w	r2, sp, #15
 80093cc:	214f      	movs	r1, #79	; 0x4f
 80093ce:	4638      	mov	r0, r7
    tmp = 0x00;
 80093d0:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80093d4:	f000 fa16 	bl	8009804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80093d8:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80093da:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80093dc:	f10d 020f 	add.w	r2, sp, #15
 80093e0:	2150      	movs	r1, #80	; 0x50
 80093e2:	4638      	mov	r0, r7
 80093e4:	f000 fa0e 	bl	8009804 <ov9655_write_reg>
    tmp = 0x20;
 80093e8:	2320      	movs	r3, #32
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80093ea:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80093ec:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0x20;
 80093f0:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80093f4:	2151      	movs	r1, #81	; 0x51
 80093f6:	2301      	movs	r3, #1
 80093f8:	4638      	mov	r0, r7
 80093fa:	f000 fa03 	bl	8009804 <ov9655_write_reg>
    tmp = 0xF0;
 80093fe:	23f0      	movs	r3, #240	; 0xf0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8009400:	1825      	adds	r5, r4, r0
    tmp = 0xF0;
 8009402:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8009406:	2301      	movs	r3, #1
 8009408:	f10d 020f 	add.w	r2, sp, #15
 800940c:	2152      	movs	r1, #82	; 0x52
 800940e:	4638      	mov	r0, r7
 8009410:	f000 f9f8 	bl	8009804 <ov9655_write_reg>
    tmp = 0x80;
 8009414:	f88d 800f 	strb.w	r8, [sp, #15]
 8009418:	e752      	b.n	80092c0 <OV9655_SetColorEffect+0x1dc>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800941a:	f100 0718 	add.w	r7, r0, #24
    tmp = 0xEC;
 800941e:	21ec      	movs	r1, #236	; 0xec
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009420:	2301      	movs	r3, #1
 8009422:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0xEC;
 8009426:	f88d 100f 	strb.w	r1, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800942a:	4638      	mov	r0, r7
 800942c:	213a      	movs	r1, #58	; 0x3a
    tmp = 0x80;
 800942e:	f04f 0880 	mov.w	r8, #128	; 0x80
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009432:	f000 f9e7 	bl	8009804 <ov9655_write_reg>
 8009436:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009438:	2301      	movs	r3, #1
 800943a:	f10d 020f 	add.w	r2, sp, #15
 800943e:	214f      	movs	r1, #79	; 0x4f
 8009440:	4638      	mov	r0, r7
    tmp = 0x80;
 8009442:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009446:	f000 f9dd 	bl	8009804 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800944a:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800944c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800944e:	f10d 020f 	add.w	r2, sp, #15
 8009452:	2150      	movs	r1, #80	; 0x50
 8009454:	4638      	mov	r0, r7
 8009456:	f000 f9d5 	bl	8009804 <ov9655_write_reg>
    tmp = 0x00;
 800945a:	2300      	movs	r3, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800945c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800945e:	f10d 020f 	add.w	r2, sp, #15
    tmp = 0x00;
 8009462:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8009466:	2151      	movs	r1, #81	; 0x51
 8009468:	2301      	movs	r3, #1
 800946a:	4638      	mov	r0, r7
 800946c:	f000 f9ca 	bl	8009804 <ov9655_write_reg>
 8009470:	1825      	adds	r5, r4, r0
 8009472:	e7c8      	b.n	8009406 <OV9655_SetColorEffect+0x322>

08009474 <OV9655_SetBrightness>:
{
 8009474:	b500      	push	{lr}
  tmp = brightness_level[Level + 4];
 8009476:	3110      	adds	r1, #16
{
 8009478:	b085      	sub	sp, #20
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 800947a:	4a0d      	ldr	r2, [pc, #52]	; (80094b0 <OV9655_SetBrightness+0x3c>)
{
 800947c:	4686      	mov	lr, r0
  tmp = brightness_level[Level + 4];
 800947e:	eb0d 0c01 	add.w	ip, sp, r1
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 8009482:	ab01      	add	r3, sp, #4
 8009484:	ca07      	ldmia	r2, {r0, r1, r2}
 8009486:	c303      	stmia	r3!, {r0, r1}
 8009488:	701a      	strb	r2, [r3, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 800948a:	2155      	movs	r1, #85	; 0x55
  tmp = brightness_level[Level + 4];
 800948c:	f81c cc08 	ldrb.w	ip, [ip, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8009490:	2301      	movs	r3, #1
 8009492:	f10d 0203 	add.w	r2, sp, #3
 8009496:	f10e 0018 	add.w	r0, lr, #24
  tmp = brightness_level[Level + 4];
 800949a:	f88d c003 	strb.w	ip, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 800949e:	f000 f9b1 	bl	8009804 <ov9655_write_reg>
 80094a2:	3800      	subs	r0, #0
 80094a4:	bf18      	it	ne
 80094a6:	2001      	movne	r0, #1
}
 80094a8:	4240      	negs	r0, r0
 80094aa:	b005      	add	sp, #20
 80094ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80094b0:	08028c30 	.word	0x08028c30

080094b4 <OV9655_SetContrast>:
{
 80094b4:	b500      	push	{lr}
  tmp = contrast_level[Level + 4];
 80094b6:	3110      	adds	r1, #16
{
 80094b8:	b085      	sub	sp, #20
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 80094ba:	4a0d      	ldr	r2, [pc, #52]	; (80094f0 <OV9655_SetContrast+0x3c>)
{
 80094bc:	4686      	mov	lr, r0
  tmp = contrast_level[Level + 4];
 80094be:	eb0d 0c01 	add.w	ip, sp, r1
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 80094c2:	ab01      	add	r3, sp, #4
 80094c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80094c6:	c303      	stmia	r3!, {r0, r1}
 80094c8:	701a      	strb	r2, [r3, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 80094ca:	2156      	movs	r1, #86	; 0x56
  tmp = contrast_level[Level + 4];
 80094cc:	f81c cc08 	ldrb.w	ip, [ip, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 80094d0:	2301      	movs	r3, #1
 80094d2:	f10d 0203 	add.w	r2, sp, #3
 80094d6:	f10e 0018 	add.w	r0, lr, #24
  tmp = contrast_level[Level + 4];
 80094da:	f88d c003 	strb.w	ip, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 80094de:	f000 f991 	bl	8009804 <ov9655_write_reg>
 80094e2:	3800      	subs	r0, #0
 80094e4:	bf18      	it	ne
 80094e6:	2001      	movne	r0, #1
}
 80094e8:	4240      	negs	r0, r0
 80094ea:	b005      	add	sp, #20
 80094ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80094f0:	080bfb58 	.word	0x080bfb58

080094f4 <OV9655_SetPixelFormat>:
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 80094f4:	f031 0302 	bics.w	r3, r1, #2
{
 80094f8:	b530      	push	{r4, r5, lr}
 80094fa:	b083      	sub	sp, #12
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 80094fc:	d177      	bne.n	80095ee <OV9655_SetPixelFormat+0xfa>
  else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80094fe:	f100 0418 	add.w	r4, r0, #24
 8009502:	460d      	mov	r5, r1
 8009504:	2301      	movs	r3, #1
 8009506:	f10d 0207 	add.w	r2, sp, #7
 800950a:	2112      	movs	r1, #18
 800950c:	4620      	mov	r0, r4
 800950e:	f000 f971 	bl	80097f4 <ov9655_read_reg>
 8009512:	2800      	cmp	r0, #0
 8009514:	d16b      	bne.n	80095ee <OV9655_SetPixelFormat+0xfa>
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 8009516:	f89d 3007 	ldrb.w	r3, [sp, #7]
    switch (PixelFormat)
 800951a:	2d02      	cmp	r5, #2
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 800951c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    switch (PixelFormat)
 8009520:	d029      	beq.n	8009576 <OV9655_SetPixelFormat+0x82>
      tmp |= 0x03U;
 8009522:	f043 0103 	orr.w	r1, r3, #3
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8009526:	f10d 0207 	add.w	r2, sp, #7
 800952a:	2301      	movs	r3, #1
 800952c:	4620      	mov	r0, r4
      tmp |= 0x03U;
 800952e:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8009532:	2112      	movs	r1, #18
 8009534:	f000 f966 	bl	8009804 <ov9655_write_reg>
 8009538:	2800      	cmp	r0, #0
 800953a:	d158      	bne.n	80095ee <OV9655_SetPixelFormat+0xfa>
      else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 800953c:	2301      	movs	r3, #1
 800953e:	f10d 0207 	add.w	r2, sp, #7
 8009542:	2140      	movs	r1, #64	; 0x40
 8009544:	4620      	mov	r0, r4
 8009546:	f000 f955 	bl	80097f4 <ov9655_read_reg>
 800954a:	2800      	cmp	r0, #0
 800954c:	d14f      	bne.n	80095ee <OV9655_SetPixelFormat+0xfa>
        tmp |= 0x10U;
 800954e:	f89d 5007 	ldrb.w	r5, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8009552:	2301      	movs	r3, #1
 8009554:	f10d 0207 	add.w	r2, sp, #7
 8009558:	2140      	movs	r1, #64	; 0x40
        tmp |= 0x10U;
 800955a:	f045 0510 	orr.w	r5, r5, #16
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 800955e:	4620      	mov	r0, r4
        tmp |= 0x10U;
 8009560:	f88d 5007 	strb.w	r5, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8009564:	f000 f94e 	bl	8009804 <ov9655_write_reg>
 8009568:	3800      	subs	r0, #0
 800956a:	bf18      	it	ne
 800956c:	2001      	movne	r0, #1
 800956e:	4245      	negs	r5, r0
}
 8009570:	4628      	mov	r0, r5
 8009572:	b003      	add	sp, #12
 8009574:	bd30      	pop	{r4, r5, pc}
      tmp |= 0x02U;
 8009576:	f043 0102 	orr.w	r1, r3, #2
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 800957a:	f10d 0207 	add.w	r2, sp, #7
 800957e:	2301      	movs	r3, #1
 8009580:	4620      	mov	r0, r4
      tmp |= 0x02U;
 8009582:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8009586:	2112      	movs	r1, #18
 8009588:	f000 f93c 	bl	8009804 <ov9655_write_reg>
 800958c:	bb78      	cbnz	r0, 80095ee <OV9655_SetPixelFormat+0xfa>
        if(ov9655_read_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 800958e:	2301      	movs	r3, #1
 8009590:	f10d 0207 	add.w	r2, sp, #7
 8009594:	213a      	movs	r1, #58	; 0x3a
 8009596:	4620      	mov	r0, r4
 8009598:	f000 f92c 	bl	80097f4 <ov9655_read_reg>
 800959c:	bb38      	cbnz	r0, 80095ee <OV9655_SetPixelFormat+0xfa>
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 800959e:	f89d 1007 	ldrb.w	r1, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 80095a2:	2301      	movs	r3, #1
 80095a4:	f10d 0207 	add.w	r2, sp, #7
 80095a8:	4620      	mov	r0, r4
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 80095aa:	f021 012c 	bic.w	r1, r1, #44	; 0x2c
 80095ae:	f88d 1007 	strb.w	r1, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 80095b2:	213a      	movs	r1, #58	; 0x3a
 80095b4:	f000 f926 	bl	8009804 <ov9655_write_reg>
 80095b8:	b9c8      	cbnz	r0, 80095ee <OV9655_SetPixelFormat+0xfa>
            if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80095ba:	2301      	movs	r3, #1
 80095bc:	f10d 0207 	add.w	r2, sp, #7
 80095c0:	2140      	movs	r1, #64	; 0x40
 80095c2:	4620      	mov	r0, r4
 80095c4:	f000 f916 	bl	80097f4 <ov9655_read_reg>
 80095c8:	4605      	mov	r5, r0
 80095ca:	b9a8      	cbnz	r0, 80095f8 <OV9655_SetPixelFormat+0x104>
                tmp &= ~(3 << 4); /* Clear bits 5:4: RGB 555/565 option */
 80095cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80095d0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80095d4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80095d8:	f88d 3007 	strb.w	r3, [sp, #7]
            if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 80095dc:	2301      	movs	r3, #1
 80095de:	f10d 0207 	add.w	r2, sp, #7
 80095e2:	2140      	movs	r1, #64	; 0x40
 80095e4:	4620      	mov	r0, r4
 80095e6:	f000 f90d 	bl	8009804 <ov9655_write_reg>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d0c0      	beq.n	8009570 <OV9655_SetPixelFormat+0x7c>
              ret = OV9655_ERROR;
 80095ee:	f04f 35ff 	mov.w	r5, #4294967295
}
 80095f2:	4628      	mov	r0, r5
 80095f4:	b003      	add	sp, #12
 80095f6:	bd30      	pop	{r4, r5, pc}
              ret = OV9655_ERROR;
 80095f8:	f04f 35ff 	mov.w	r5, #4294967295
 80095fc:	e7ee      	b.n	80095dc <OV9655_SetPixelFormat+0xe8>
 80095fe:	bf00      	nop

08009600 <OV9655_GetResolution>:
{
 8009600:	b510      	push	{r4, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	460c      	mov	r4, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_HORIZONTAL_FRAME_CTRL, &tmp, 1) != OV9655_OK)
 8009606:	2301      	movs	r3, #1
 8009608:	2132      	movs	r1, #50	; 0x32
 800960a:	f10d 0207 	add.w	r2, sp, #7
 800960e:	3018      	adds	r0, #24
 8009610:	f000 f8f0 	bl	80097f4 <ov9655_read_reg>
 8009614:	b938      	cbnz	r0, 8009626 <OV9655_GetResolution+0x26>
    switch (tmp)
 8009616:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800961a:	2ba4      	cmp	r3, #164	; 0xa4
 800961c:	d007      	beq.n	800962e <OV9655_GetResolution+0x2e>
 800961e:	2bff      	cmp	r3, #255	; 0xff
 8009620:	d00c      	beq.n	800963c <OV9655_GetResolution+0x3c>
 8009622:	2b12      	cmp	r3, #18
 8009624:	d006      	beq.n	8009634 <OV9655_GetResolution+0x34>
    ret = OV9655_ERROR;
 8009626:	f04f 30ff 	mov.w	r0, #4294967295
}
 800962a:	b002      	add	sp, #8
 800962c:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R160x120;
 800962e:	6020      	str	r0, [r4, #0]
}
 8009630:	b002      	add	sp, #8
 8009632:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R320x240;
 8009634:	2301      	movs	r3, #1
 8009636:	6023      	str	r3, [r4, #0]
}
 8009638:	b002      	add	sp, #8
 800963a:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R640x480;
 800963c:	2303      	movs	r3, #3
 800963e:	6023      	str	r3, [r4, #0]
}
 8009640:	b002      	add	sp, #8
 8009642:	bd10      	pop	{r4, pc}

08009644 <OV9655_ReadID>:
{
 8009644:	b530      	push	{r4, r5, lr}
  pObj->IO.Init();
 8009646:	4604      	mov	r4, r0
{
 8009648:	b083      	sub	sp, #12
 800964a:	460d      	mov	r5, r1
  pObj->IO.Init();
 800964c:	f854 3b18 	ldr.w	r3, [r4], #24
 8009650:	4798      	blx	r3
    if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_HIGH, &tmp, 1)!= OV9655_OK)
 8009652:	2301      	movs	r3, #1
 8009654:	f10d 0207 	add.w	r2, sp, #7
 8009658:	210a      	movs	r1, #10
 800965a:	4620      	mov	r0, r4
 800965c:	f000 f8ca 	bl	80097f4 <ov9655_read_reg>
 8009660:	b990      	cbnz	r0, 8009688 <OV9655_ReadID+0x44>
      *Id = (uint32_t)tmp << 8U;
 8009662:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8009666:	2301      	movs	r3, #1
 8009668:	f10d 0207 	add.w	r2, sp, #7
 800966c:	4620      	mov	r0, r4
      *Id = (uint32_t)tmp << 8U;
 800966e:	0209      	lsls	r1, r1, #8
 8009670:	6029      	str	r1, [r5, #0]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8009672:	210b      	movs	r1, #11
 8009674:	f000 f8be 	bl	80097f4 <ov9655_read_reg>
 8009678:	b930      	cbnz	r0, 8009688 <OV9655_ReadID+0x44>
        *Id |= tmp;
 800967a:	682b      	ldr	r3, [r5, #0]
 800967c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009680:	4313      	orrs	r3, r2
 8009682:	602b      	str	r3, [r5, #0]
}
 8009684:	b003      	add	sp, #12
 8009686:	bd30      	pop	{r4, r5, pc}
      ret = OV9655_ERROR;
 8009688:	f04f 30ff 	mov.w	r0, #4294967295
 800968c:	e7fa      	b.n	8009684 <OV9655_ReadID+0x40>
 800968e:	bf00      	nop

08009690 <OV9655_MirrorFlipConfig>:
  if(Config > OV9655_MIRROR_FLIP)
 8009690:	2903      	cmp	r1, #3
 8009692:	d824      	bhi.n	80096de <OV9655_MirrorFlipConfig+0x4e>
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8009694:	2301      	movs	r3, #1
{
 8009696:	b530      	push	{r4, r5, lr}
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8009698:	f100 0418 	add.w	r4, r0, #24
{
 800969c:	b083      	sub	sp, #12
 800969e:	460d      	mov	r5, r1
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 80096a0:	211e      	movs	r1, #30
 80096a2:	f10d 0207 	add.w	r2, sp, #7
 80096a6:	4620      	mov	r0, r4
 80096a8:	f000 f8a4 	bl	80097f4 <ov9655_read_reg>
 80096ac:	b9a0      	cbnz	r0, 80096d8 <OV9655_MirrorFlipConfig+0x48>
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 80096ae:	f89d c007 	ldrb.w	ip, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 80096b2:	4620      	mov	r0, r4
 80096b4:	2301      	movs	r3, #1
 80096b6:	f10d 0207 	add.w	r2, sp, #7
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 80096ba:	f02c 0430 	bic.w	r4, ip, #48	; 0x30
      tmp |= (Config << 4U); /* Configure Bit[5:4] Mirror/VFlip */
 80096be:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
 80096c2:	f88d 1007 	strb.w	r1, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 80096c6:	211e      	movs	r1, #30
 80096c8:	f000 f89c 	bl	8009804 <ov9655_write_reg>
 80096cc:	3800      	subs	r0, #0
 80096ce:	bf18      	it	ne
 80096d0:	2001      	movne	r0, #1
 80096d2:	4240      	negs	r0, r0
}
 80096d4:	b003      	add	sp, #12
 80096d6:	bd30      	pop	{r4, r5, pc}
    ret = OV9655_ERROR;
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295
 80096dc:	e7fa      	b.n	80096d4 <OV9655_MirrorFlipConfig+0x44>
 80096de:	f04f 30ff 	mov.w	r0, #4294967295
}
 80096e2:	4770      	bx	lr

080096e4 <OV9655_NightModeConfig>:
{
 80096e4:	b530      	push	{r4, r5, lr}
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 80096e6:	f100 0418 	add.w	r4, r0, #24
{
 80096ea:	b083      	sub	sp, #12
 80096ec:	460d      	mov	r5, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 80096ee:	2301      	movs	r3, #1
 80096f0:	f10d 0207 	add.w	r2, sp, #7
 80096f4:	213b      	movs	r1, #59	; 0x3b
 80096f6:	4620      	mov	r0, r4
 80096f8:	f000 f87c 	bl	80097f4 <ov9655_read_reg>
 80096fc:	b9b8      	cbnz	r0, 800972e <OV9655_NightModeConfig+0x4a>
    if(Cmd == NIGHT_MODE_ENABLE)
 80096fe:	2d01      	cmp	r5, #1
      tmp |= 0x80U;
 8009700:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8009704:	f04f 0301 	mov.w	r3, #1
 8009708:	f10d 0207 	add.w	r2, sp, #7
      tmp |= 0x80U;
 800970c:	bf0c      	ite	eq
 800970e:	f045 0580 	orreq.w	r5, r5, #128	; 0x80
      tmp &= 0x7FU;
 8009712:	f005 057f 	andne.w	r5, r5, #127	; 0x7f
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8009716:	213b      	movs	r1, #59	; 0x3b
 8009718:	4620      	mov	r0, r4
 800971a:	f88d 5007 	strb.w	r5, [sp, #7]
 800971e:	f000 f871 	bl	8009804 <ov9655_write_reg>
 8009722:	3800      	subs	r0, #0
 8009724:	bf18      	it	ne
 8009726:	2001      	movne	r0, #1
 8009728:	4240      	negs	r0, r0
}
 800972a:	b003      	add	sp, #12
 800972c:	bd30      	pop	{r4, r5, pc}
    ret = OV9655_ERROR;
 800972e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8009732:	e7fa      	b.n	800972a <OV9655_NightModeConfig+0x46>

08009734 <OV9655_Init>:
  if(pObj->IsInitialized == 0U)
 8009734:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8009738:	bb5b      	cbnz	r3, 8009792 <OV9655_Init+0x5e>
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 800973a:	2903      	cmp	r1, #3
{
 800973c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800973e:	460e      	mov	r6, r1
 8009740:	b083      	sub	sp, #12
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 8009742:	d828      	bhi.n	8009796 <OV9655_Init+0x62>
 8009744:	f032 0302 	bics.w	r3, r2, #2
 8009748:	4617      	mov	r7, r2
 800974a:	d124      	bne.n	8009796 <OV9655_Init+0x62>
      tmp = 0x80U;
 800974c:	2280      	movs	r2, #128	; 0x80
 800974e:	4604      	mov	r4, r0
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8009750:	2301      	movs	r3, #1
 8009752:	2112      	movs	r1, #18
      tmp = 0x80U;
 8009754:	f88d 2007 	strb.w	r2, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8009758:	3018      	adds	r0, #24
 800975a:	f10d 0207 	add.w	r2, sp, #7
 800975e:	f000 f851 	bl	8009804 <ov9655_write_reg>
 8009762:	b9c0      	cbnz	r0, 8009796 <OV9655_Init+0x62>
  tickstart = pObj->IO.GetTick();
 8009764:	6963      	ldr	r3, [r4, #20]
 8009766:	4798      	blx	r3
 8009768:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800976a:	6963      	ldr	r3, [r4, #20]
 800976c:	4798      	blx	r3
 800976e:	1b43      	subs	r3, r0, r5
 8009770:	2bc7      	cmp	r3, #199	; 0xc7
 8009772:	d9fa      	bls.n	800976a <OV9655_Init+0x36>
        if(OV9655_SetResolution(pObj, Resolution)!= OV9655_OK)
 8009774:	4631      	mov	r1, r6
 8009776:	4620      	mov	r0, r4
 8009778:	f7ff fbc6 	bl	8008f08 <OV9655_SetResolution>
 800977c:	b958      	cbnz	r0, 8009796 <OV9655_Init+0x62>
        else if(OV9655_SetPixelFormat(pObj, PixelFormat)!= OV9655_OK)
 800977e:	4639      	mov	r1, r7
 8009780:	4620      	mov	r0, r4
 8009782:	f7ff feb7 	bl	80094f4 <OV9655_SetPixelFormat>
 8009786:	b930      	cbnz	r0, 8009796 <OV9655_Init+0x62>
          pObj->IsInitialized = 1U;
 8009788:	2301      	movs	r3, #1
 800978a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800978e:	b003      	add	sp, #12
 8009790:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int32_t ret = OV9655_OK;
 8009792:	2000      	movs	r0, #0
}
 8009794:	4770      	bx	lr
      ret = OV9655_ERROR;
 8009796:	f04f 30ff 	mov.w	r0, #4294967295
 800979a:	e7f8      	b.n	800978e <OV9655_Init+0x5a>

0800979c <OV9655_SetHueDegree>:
 800979c:	f04f 30ff 	mov.w	r0, #4294967295
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop

080097a4 <OV9655_ZoomConfig>:
 80097a4:	f04f 30ff 	mov.w	r0, #4294967295
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop

080097ac <OV9655_RegisterBusIO>:
  if (pObj == NULL)
 80097ac:	b1d0      	cbz	r0, 80097e4 <OV9655_RegisterBusIO+0x38>
    pObj->IO.Address   = pIO->Address;
 80097ae:	890a      	ldrh	r2, [r1, #8]
{
 80097b0:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 80097b2:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 80097b6:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 80097b8:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80097bc:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
    pObj->IO.GetTick   = pIO->GetTick;
 80097c0:	6949      	ldr	r1, [r1, #20]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80097c2:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80097c4:	6141      	str	r1, [r0, #20]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 80097c6:	4a09      	ldr	r2, [pc, #36]	; (80097ec <OV9655_RegisterBusIO+0x40>)
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 80097c8:	4909      	ldr	r1, [pc, #36]	; (80097f0 <OV9655_RegisterBusIO+0x44>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80097ca:	60c4      	str	r4, [r0, #12]
    pObj->Ctx.handle   = pObj;
 80097cc:	6200      	str	r0, [r0, #32]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 80097ce:	e9c0 2106 	strd	r2, r1, [r0, #24]
    if(pObj->IO.Init != NULL)
 80097d2:	b113      	cbz	r3, 80097da <OV9655_RegisterBusIO+0x2e>
}
 80097d4:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 80097d8:	4718      	bx	r3
}
 80097da:	f04f 30ff 	mov.w	r0, #4294967295
 80097de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	f04f 30ff 	mov.w	r0, #4294967295
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	08008ef9 	.word	0x08008ef9
 80097f0:	08008ee9 	.word	0x08008ee9

080097f4 <ov9655_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t ov9655_read_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80097f4:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80097f6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80097fa:	46a4      	mov	ip, r4
}
 80097fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8009800:	4760      	bx	ip
 8009802:	bf00      	nop

08009804 <ov9655_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ov9655_write_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8009804:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8009806:	6804      	ldr	r4, [r0, #0]
 8009808:	6880      	ldr	r0, [r0, #8]
 800980a:	46a4      	mov	ip, r4
}
 800980c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8009810:	4760      	bx	ip
 8009812:	bf00      	nop

08009814 <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8009814:	b410      	push	{r4}
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009816:	6904      	ldr	r4, [r0, #16]
 8009818:	8900      	ldrh	r0, [r0, #8]
 800981a:	46a4      	mov	ip, r4
}
 800981c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009820:	4760      	bx	ip
 8009822:	bf00      	nop

08009824 <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8009824:	b410      	push	{r4}
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009826:	68c4      	ldr	r4, [r0, #12]
 8009828:	8900      	ldrh	r0, [r0, #8]
 800982a:	46a4      	mov	ip, r4
}
 800982c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009830:	4760      	bx	ip
 8009832:	bf00      	nop

08009834 <WM8994_SetMute>:
  if(Cmd == WM8994_MUTE_ON)
 8009834:	2901      	cmp	r1, #1
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009836:	f04f 0302 	mov.w	r3, #2
{
 800983a:	b530      	push	{r4, r5, lr}
    tmp = 0x0200;
 800983c:	bf08      	it	eq
 800983e:	f44f 7100 	moveq.w	r1, #512	; 0x200
{
 8009842:	b083      	sub	sp, #12
    tmp = 0x0010;
 8009844:	bf18      	it	ne
 8009846:	2110      	movne	r1, #16
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009848:	f100 0518 	add.w	r5, r0, #24
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800984c:	f10d 0206 	add.w	r2, sp, #6
    tmp = 0x0010;
 8009850:	f8ad 1006 	strh.w	r1, [sp, #6]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009854:	4628      	mov	r0, r5
 8009856:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800985a:	f001 f8df 	bl	800aa1c <wm8994_write_reg>
 800985e:	4604      	mov	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009860:	2302      	movs	r3, #2
 8009862:	f10d 0206 	add.w	r2, sp, #6
 8009866:	f240 4122 	movw	r1, #1058	; 0x422
 800986a:	4628      	mov	r0, r5
 800986c:	f001 f8d6 	bl	800aa1c <wm8994_write_reg>
 8009870:	4420      	add	r0, r4
  if(ret != WM8994_OK)
 8009872:	3800      	subs	r0, #0
 8009874:	bf18      	it	ne
 8009876:	2001      	movne	r0, #1
}
 8009878:	4240      	negs	r0, r0
 800987a:	b003      	add	sp, #12
 800987c:	bd30      	pop	{r4, r5, pc}
 800987e:	bf00      	nop

08009880 <WM8994_SetOutputMode>:
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 8009880:	2902      	cmp	r1, #2
{
 8009882:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009886:	4605      	mov	r5, r0
 8009888:	b082      	sub	sp, #8
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 800988a:	f000 810c 	beq.w	8009aa6 <WM8994_SetOutputMode+0x226>
 800988e:	f1a1 0404 	sub.w	r4, r1, #4
 8009892:	fab4 f484 	clz	r4, r4
 8009896:	0964      	lsrs	r4, r4, #5
 8009898:	2c00      	cmp	r4, #0
 800989a:	f040 8104 	bne.w	8009aa6 <WM8994_SetOutputMode+0x226>
    switch (Output) 
 800989e:	2901      	cmp	r1, #1
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80098a0:	f100 0718 	add.w	r7, r0, #24
 80098a4:	f10d 0606 	add.w	r6, sp, #6
    switch (Output) 
 80098a8:	f000 80cc 	beq.w	8009a44 <WM8994_SetOutputMode+0x1c4>
      tmp = 0x0F0F;
 80098ac:	f640 720f 	movw	r2, #3855	; 0xf0f
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80098b0:	2302      	movs	r3, #2
 80098b2:	2105      	movs	r1, #5
 80098b4:	4638      	mov	r0, r7
      tmp = 0x0F0F;
 80098b6:	f8ad 2006 	strh.w	r2, [sp, #6]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80098ba:	4632      	mov	r2, r6
 80098bc:	f001 f8ae 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x0001;
 80098c0:	2301      	movs	r3, #1
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80098c2:	4604      	mov	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80098c4:	4632      	mov	r2, r6
 80098c6:	f240 6101 	movw	r1, #1537	; 0x601
      tmp = 0x0001;
 80098ca:	f8ad 3006 	strh.w	r3, [sp, #6]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80098ce:	4638      	mov	r0, r7
 80098d0:	2302      	movs	r3, #2
 80098d2:	f001 f8a3 	bl	800aa1c <wm8994_write_reg>
 80098d6:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80098d8:	2302      	movs	r3, #2
 80098da:	4632      	mov	r2, r6
 80098dc:	f240 6102 	movw	r1, #1538	; 0x602
 80098e0:	4638      	mov	r0, r7
 80098e2:	f001 f89b 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x0002;
 80098e6:	2302      	movs	r3, #2
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80098e8:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 80098ea:	4632      	mov	r2, r6
 80098ec:	f240 6104 	movw	r1, #1540	; 0x604
 80098f0:	4638      	mov	r0, r7
      tmp = 0x0002;
 80098f2:	f8ad 3006 	strh.w	r3, [sp, #6]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 80098f6:	f001 f891 	bl	800aa1c <wm8994_write_reg>
 80098fa:	4404      	add	r4, r0
    tmp = 0x0300;
 80098fc:	f44f 7a40 	mov.w	sl, #768	; 0x300
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8009900:	2302      	movs	r3, #2
 8009902:	4632      	mov	r2, r6
 8009904:	2103      	movs	r1, #3
 8009906:	4638      	mov	r0, r7
    tmp = 0x0300;
 8009908:	f8ad a006 	strh.w	sl, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800990c:	f001 f886 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0000;
 8009910:	2300      	movs	r3, #0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8009912:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8009914:	4632      	mov	r2, r6
 8009916:	2122      	movs	r1, #34	; 0x22
    tmp = 0x0000;
 8009918:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 800991c:	4638      	mov	r0, r7
 800991e:	2302      	movs	r3, #2
 8009920:	f001 f87c 	bl	800aa1c <wm8994_write_reg>
 8009924:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8009926:	2302      	movs	r3, #2
 8009928:	4632      	mov	r2, r6
 800992a:	2123      	movs	r1, #35	; 0x23
 800992c:	4638      	mov	r0, r7
 800992e:	f001 f875 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8009932:	2302      	movs	r3, #2
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8009934:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8009936:	4632      	mov	r2, r6
 8009938:	2136      	movs	r1, #54	; 0x36
 800993a:	4638      	mov	r0, r7
    tmp = 0x0300;
 800993c:	f8ad a006 	strh.w	sl, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8009940:	f001 f86c 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x3003;
 8009944:	f243 0303 	movw	r3, #12291	; 0x3003
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8009948:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800994a:	4632      	mov	r2, r6
 800994c:	2101      	movs	r1, #1
    tmp = 0x3003;
 800994e:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8009952:	4638      	mov	r0, r7
 8009954:	2302      	movs	r3, #2
 8009956:	f001 f861 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0005;
 800995a:	2305      	movs	r3, #5
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800995c:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 800995e:	4632      	mov	r2, r6
 8009960:	2151      	movs	r1, #81	; 0x51
    tmp = 0x0005;
 8009962:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8009966:	4638      	mov	r0, r7
 8009968:	2302      	movs	r3, #2
 800996a:	f001 f857 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x3303;
 800996e:	f243 3303 	movw	r3, #13059	; 0x3303
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8009972:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8009974:	4632      	mov	r2, r6
 8009976:	2101      	movs	r1, #1
    tmp = 0x3303;
 8009978:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800997c:	4638      	mov	r0, r7
 800997e:	2302      	movs	r3, #2
 8009980:	f001 f84c 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0022;
 8009984:	2322      	movs	r3, #34	; 0x22
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8009986:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8009988:	4632      	mov	r2, r6
 800998a:	2160      	movs	r1, #96	; 0x60
    tmp = 0x0022;
 800998c:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8009990:	4638      	mov	r0, r7
 8009992:	2302      	movs	r3, #2
 8009994:	f001 f842 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x9F25;
 8009998:	f649 7325 	movw	r3, #40741	; 0x9f25
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 800999c:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 800999e:	4632      	mov	r2, r6
 80099a0:	214c      	movs	r1, #76	; 0x4c
    tmp = 0x9F25;
 80099a2:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 80099a6:	4638      	mov	r0, r7
 80099a8:	2302      	movs	r3, #2
 80099aa:	f001 f837 	bl	800aa1c <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 80099ae:	696b      	ldr	r3, [r5, #20]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 80099b0:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80099b2:	4798      	blx	r3
 80099b4:	4680      	mov	r8, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80099b6:	696b      	ldr	r3, [r5, #20]
 80099b8:	4798      	blx	r3
 80099ba:	eba0 0308 	sub.w	r3, r0, r8
 80099be:	2b0e      	cmp	r3, #14
 80099c0:	d9f9      	bls.n	80099b6 <WM8994_SetOutputMode+0x136>
    tmp = 0x0001;
 80099c2:	2301      	movs	r3, #1
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80099c4:	4632      	mov	r2, r6
 80099c6:	212d      	movs	r1, #45	; 0x2d
 80099c8:	4638      	mov	r0, r7
    tmp = 0x0001;
 80099ca:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80099ce:	2302      	movs	r3, #2
 80099d0:	f001 f824 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 80099d4:	2302      	movs	r3, #2
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80099d6:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 80099d8:	4632      	mov	r2, r6
 80099da:	212e      	movs	r1, #46	; 0x2e
 80099dc:	4638      	mov	r0, r7
 80099de:	f001 f81d 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0330;
 80099e2:	f44f 734c 	mov.w	r3, #816	; 0x330
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 80099e6:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 80099e8:	4632      	mov	r2, r6
 80099ea:	2103      	movs	r1, #3
    tmp = 0x0330;
 80099ec:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 80099f0:	4638      	mov	r0, r7
 80099f2:	2302      	movs	r3, #2
 80099f4:	f001 f812 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0033;
 80099f8:	2333      	movs	r3, #51	; 0x33
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 80099fa:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 80099fc:	4632      	mov	r2, r6
 80099fe:	2154      	movs	r1, #84	; 0x54
    tmp = 0x0033;
 8009a00:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8009a04:	4638      	mov	r0, r7
 8009a06:	2302      	movs	r3, #2
 8009a08:	f001 f808 	bl	800aa1c <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 8009a0c:	696b      	ldr	r3, [r5, #20]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8009a0e:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8009a10:	4798      	blx	r3
 8009a12:	4680      	mov	r8, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8009a14:	696b      	ldr	r3, [r5, #20]
 8009a16:	4798      	blx	r3
 8009a18:	eba0 0308 	sub.w	r3, r0, r8
 8009a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a20:	d9f8      	bls.n	8009a14 <WM8994_SetOutputMode+0x194>
    tmp = 0x00EE;
 8009a22:	21ee      	movs	r1, #238	; 0xee
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 8009a24:	2302      	movs	r3, #2
 8009a26:	4632      	mov	r2, r6
 8009a28:	4638      	mov	r0, r7
    tmp = 0x00EE;
 8009a2a:	f8ad 1006 	strh.w	r1, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 8009a2e:	2160      	movs	r1, #96	; 0x60
 8009a30:	f000 fff4 	bl	800aa1c <wm8994_write_reg>
 8009a34:	4420      	add	r0, r4
  if(ret != WM8994_OK)
 8009a36:	3800      	subs	r0, #0
 8009a38:	bf18      	it	ne
 8009a3a:	2001      	movne	r0, #1
}
 8009a3c:	4240      	negs	r0, r0
 8009a3e:	b002      	add	sp, #8
 8009a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      tmp = 0x0C0C;
 8009a44:	f640 430c 	movw	r3, #3084	; 0xc0c
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009a48:	4632      	mov	r2, r6
 8009a4a:	2105      	movs	r1, #5
 8009a4c:	4638      	mov	r0, r7
      tmp = 0x0C0C;
 8009a4e:	f8ad 3006 	strh.w	r3, [sp, #6]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009a52:	2302      	movs	r3, #2
 8009a54:	f000 ffe2 	bl	800aa1c <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8009a58:	2302      	movs	r3, #2
 8009a5a:	4632      	mov	r2, r6
 8009a5c:	f240 6101 	movw	r1, #1537	; 0x601
      tmp = 0x0000;
 8009a60:	f8ad 4006 	strh.w	r4, [sp, #6]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009a64:	4604      	mov	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8009a66:	4638      	mov	r0, r7
 8009a68:	f000 ffd8 	bl	800aa1c <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8009a6c:	2302      	movs	r3, #2
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8009a6e:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8009a70:	4632      	mov	r2, r6
      tmp = 0x0002;
 8009a72:	469a      	mov	sl, r3
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8009a74:	f240 6102 	movw	r1, #1538	; 0x602
 8009a78:	4638      	mov	r0, r7
 8009a7a:	f000 ffcf 	bl	800aa1c <wm8994_write_reg>
 8009a7e:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8009a80:	4653      	mov	r3, sl
 8009a82:	4632      	mov	r2, r6
 8009a84:	f240 6104 	movw	r1, #1540	; 0x604
 8009a88:	4638      	mov	r0, r7
      tmp = 0x0002;
 8009a8a:	f8ad a006 	strh.w	sl, [sp, #6]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8009a8e:	f000 ffc5 	bl	800aa1c <wm8994_write_reg>
 8009a92:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8009a94:	4653      	mov	r3, sl
 8009a96:	4632      	mov	r2, r6
 8009a98:	f240 6105 	movw	r1, #1541	; 0x605
 8009a9c:	4638      	mov	r0, r7
 8009a9e:	f000 ffbd 	bl	800aa1c <wm8994_write_reg>
 8009aa2:	4404      	add	r4, r0
      break;
 8009aa4:	e72a      	b.n	80098fc <WM8994_SetOutputMode+0x7c>
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8009aa6:	f105 0918 	add.w	r9, r5, #24
 8009aaa:	f10d 0606 	add.w	r6, sp, #6
    tmp = 0x0000;
 8009aae:	f04f 0a00 	mov.w	sl, #0
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	4632      	mov	r2, r6
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	4648      	mov	r0, r9
    tmp = 0x0000;
 8009aba:	f8ad a006 	strh.w	sl, [sp, #6]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8009abe:	f000 ffad 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0303;
 8009ac2:	f240 3303 	movw	r3, #771	; 0x303
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8009ac6:	4604      	mov	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009ac8:	4632      	mov	r2, r6
 8009aca:	2105      	movs	r1, #5
    tmp = 0x0303;
 8009acc:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009ad0:	4648      	mov	r0, r9
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	f000 ffa2 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0001;
 8009ad8:	2301      	movs	r3, #1
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009ada:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8009adc:	4632      	mov	r2, r6
 8009ade:	f240 6101 	movw	r1, #1537	; 0x601
    tmp = 0x0001;
 8009ae2:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8009ae6:	4648      	mov	r0, r9
 8009ae8:	2302      	movs	r3, #2
 8009aea:	f000 ff97 	bl	800aa1c <wm8994_write_reg>
 8009aee:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8009af0:	2302      	movs	r3, #2
 8009af2:	4632      	mov	r2, r6
 8009af4:	f240 6102 	movw	r1, #1538	; 0x602
 8009af8:	4648      	mov	r0, r9
 8009afa:	f000 ff8f 	bl	800aa1c <wm8994_write_reg>
 8009afe:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8009b00:	2302      	movs	r3, #2
 8009b02:	4632      	mov	r2, r6
 8009b04:	f240 6104 	movw	r1, #1540	; 0x604
 8009b08:	4648      	mov	r0, r9
    tmp = 0x0000;
 8009b0a:	f8ad a006 	strh.w	sl, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8009b0e:	f000 ff85 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8009b12:	2302      	movs	r3, #2
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8009b14:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8009b16:	4632      	mov	r2, r6
 8009b18:	f240 6105 	movw	r1, #1541	; 0x605
 8009b1c:	4648      	mov	r0, r9
 8009b1e:	f000 ff7d 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0100;
 8009b22:	f44f 7380 	mov.w	r3, #256	; 0x100
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8009b26:	1827      	adds	r7, r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8009b28:	4632      	mov	r2, r6
 8009b2a:	212d      	movs	r1, #45	; 0x2d
    tmp = 0x0100;
 8009b2c:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8009b30:	4648      	mov	r0, r9
 8009b32:	2302      	movs	r3, #2
 8009b34:	f000 ff72 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8009b38:	2302      	movs	r3, #2
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8009b3a:	4407      	add	r7, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8009b3c:	4632      	mov	r2, r6
 8009b3e:	212e      	movs	r1, #46	; 0x2e
 8009b40:	4648      	mov	r0, r9
 8009b42:	f000 ff6b 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x8100;
 8009b46:	f44f 4301 	mov.w	r3, #33024	; 0x8100
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8009b4a:	eb07 0800 	add.w	r8, r7, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8009b4e:	4632      	mov	r2, r6
 8009b50:	f44f 7188 	mov.w	r1, #272	; 0x110
    tmp = 0x8100;
 8009b54:	f8ad 3006 	strh.w	r3, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8009b58:	4648      	mov	r0, r9
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	f000 ff5e 	bl	800aa1c <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 8009b60:	696b      	ldr	r3, [r5, #20]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8009b62:	4480      	add	r8, r0
  tickstart = pObj->IO.GetTick();
 8009b64:	4798      	blx	r3
 8009b66:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8009b68:	696b      	ldr	r3, [r5, #20]
 8009b6a:	4798      	blx	r3
 8009b6c:	1b00      	subs	r0, r0, r4
 8009b6e:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8009b72:	d3f9      	bcc.n	8009b68 <WM8994_SetOutputMode+0x2e8>
    tmp = 0x0000;
 8009b74:	2100      	movs	r1, #0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 8009b76:	2302      	movs	r3, #2
 8009b78:	4632      	mov	r2, r6
 8009b7a:	4648      	mov	r0, r9
    tmp = 0x0000;
 8009b7c:	f8ad 1006 	strh.w	r1, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 8009b80:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8009b84:	f000 ff4a 	bl	800aa1c <wm8994_write_reg>
 8009b88:	4440      	add	r0, r8
 8009b8a:	e754      	b.n	8009a36 <WM8994_SetOutputMode+0x1b6>

08009b8c <WM8994_SetFrequency>:
  switch (AudioFreq)
 8009b8c:	f245 6322 	movw	r3, #22050	; 0x5622
 8009b90:	4299      	cmp	r1, r3
{
 8009b92:	b500      	push	{lr}
 8009b94:	b083      	sub	sp, #12
  switch (AudioFreq)
 8009b96:	d02c      	beq.n	8009bf2 <WM8994_SetFrequency+0x66>
 8009b98:	d81b      	bhi.n	8009bd2 <WM8994_SetFrequency+0x46>
 8009b9a:	f642 3311 	movw	r3, #11025	; 0x2b11
 8009b9e:	4299      	cmp	r1, r3
 8009ba0:	d02a      	beq.n	8009bf8 <WM8994_SetFrequency+0x6c>
 8009ba2:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8009ba6:	d10e      	bne.n	8009bc6 <WM8994_SetFrequency+0x3a>
    tmp = 0x0033;
 8009ba8:	f04f 0c33 	mov.w	ip, #51	; 0x33
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8009bac:	2302      	movs	r3, #2
 8009bae:	f10d 0206 	add.w	r2, sp, #6
 8009bb2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8009bb6:	3018      	adds	r0, #24
    tmp = 0x0083;
 8009bb8:	f8ad c006 	strh.w	ip, [sp, #6]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8009bbc:	f000 ff2e 	bl	800aa1c <wm8994_write_reg>
}
 8009bc0:	b003      	add	sp, #12
 8009bc2:	f85d fb04 	ldr.w	pc, [sp], #4
  switch (AudioFreq)
 8009bc6:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8009bca:	d118      	bne.n	8009bfe <WM8994_SetFrequency+0x72>
    tmp = 0x0003;
 8009bcc:	f04f 0c03 	mov.w	ip, #3
 8009bd0:	e7ec      	b.n	8009bac <WM8994_SetFrequency+0x20>
  switch (AudioFreq)
 8009bd2:	f64a 4344 	movw	r3, #44100	; 0xac44
 8009bd6:	4299      	cmp	r1, r3
 8009bd8:	d014      	beq.n	8009c04 <WM8994_SetFrequency+0x78>
 8009bda:	4b0c      	ldr	r3, [pc, #48]	; (8009c0c <WM8994_SetFrequency+0x80>)
 8009bdc:	4299      	cmp	r1, r3
 8009bde:	d102      	bne.n	8009be6 <WM8994_SetFrequency+0x5a>
    tmp = 0x00A3;
 8009be0:	f04f 0ca3 	mov.w	ip, #163	; 0xa3
 8009be4:	e7e2      	b.n	8009bac <WM8994_SetFrequency+0x20>
  switch (AudioFreq)
 8009be6:	f5b1 4ffa 	cmp.w	r1, #32000	; 0x7d00
 8009bea:	d108      	bne.n	8009bfe <WM8994_SetFrequency+0x72>
    tmp = 0x0063;
 8009bec:	f04f 0c63 	mov.w	ip, #99	; 0x63
 8009bf0:	e7dc      	b.n	8009bac <WM8994_SetFrequency+0x20>
    tmp = 0x0043;
 8009bf2:	f04f 0c43 	mov.w	ip, #67	; 0x43
 8009bf6:	e7d9      	b.n	8009bac <WM8994_SetFrequency+0x20>
    tmp = 0x0013;
 8009bf8:	f04f 0c13 	mov.w	ip, #19
 8009bfc:	e7d6      	b.n	8009bac <WM8994_SetFrequency+0x20>
    tmp = 0x0083;
 8009bfe:	f04f 0c83 	mov.w	ip, #131	; 0x83
 8009c02:	e7d3      	b.n	8009bac <WM8994_SetFrequency+0x20>
    tmp = 0x0073;
 8009c04:	f04f 0c73 	mov.w	ip, #115	; 0x73
 8009c08:	e7d0      	b.n	8009bac <WM8994_SetFrequency+0x20>
 8009c0a:	bf00      	nop
 8009c0c:	00017700 	.word	0x00017700

08009c10 <WM8994_ReadID>:
{
 8009c10:	b530      	push	{r4, r5, lr}
  pObj->IO.Init();
 8009c12:	4604      	mov	r4, r0
{
 8009c14:	b083      	sub	sp, #12
 8009c16:	460d      	mov	r5, r1
  pObj->IO.Init();
 8009c18:	f854 3b18 	ldr.w	r3, [r4], #24
 8009c1c:	4798      	blx	r3
  ret = wm8994_sw_reset_r(&pObj->Ctx, &wm8994_id);
 8009c1e:	f10d 0106 	add.w	r1, sp, #6
 8009c22:	4620      	mov	r0, r4
 8009c24:	f000 ff1a 	bl	800aa5c <wm8994_sw_reset_r>
  *Id = wm8994_id;
 8009c28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009c2c:	602b      	str	r3, [r5, #0]
}
 8009c2e:	b003      	add	sp, #12
 8009c30:	bd30      	pop	{r4, r5, pc}
 8009c32:	bf00      	nop

08009c34 <WM8994_SetResolution>:
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8009c34:	b289      	uxth	r1, r1
 8009c36:	3018      	adds	r0, #24
{
 8009c38:	b508      	push	{r3, lr}
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8009c3a:	f000 ff87 	bl	800ab4c <wm8994_aif1_control1_wl>
 8009c3e:	3800      	subs	r0, #0
 8009c40:	bf18      	it	ne
 8009c42:	2001      	movne	r0, #1
}
 8009c44:	4240      	negs	r0, r0
 8009c46:	bd08      	pop	{r3, pc}

08009c48 <WM8994_GetResolution>:
{
 8009c48:	b510      	push	{r4, lr}
 8009c4a:	b082      	sub	sp, #8
  uint16_t resolution = 0;
 8009c4c:	2300      	movs	r3, #0
{
 8009c4e:	460c      	mov	r4, r1
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 8009c50:	3018      	adds	r0, #24
 8009c52:	f10d 0106 	add.w	r1, sp, #6
  uint16_t resolution = 0;
 8009c56:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 8009c5a:	f000 ffa1 	bl	800aba0 <wm8994_aif1_control1_wl_r>
 8009c5e:	b970      	cbnz	r0, 8009c7e <WM8994_GetResolution+0x36>
    switch(resolution)
 8009c60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d007      	beq.n	8009c78 <WM8994_GetResolution+0x30>
 8009c68:	2b03      	cmp	r3, #3
 8009c6a:	d005      	beq.n	8009c78 <WM8994_GetResolution+0x30>
      *Resolution = WM8994_RESOLUTION_16b;
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	bf18      	it	ne
 8009c70:	4603      	movne	r3, r0
 8009c72:	6023      	str	r3, [r4, #0]
}
 8009c74:	b002      	add	sp, #8
 8009c76:	bd10      	pop	{r4, pc}
      *Resolution = WM8994_RESOLUTION_32b;
 8009c78:	6023      	str	r3, [r4, #0]
}
 8009c7a:	b002      	add	sp, #8
 8009c7c:	bd10      	pop	{r4, pc}
    ret = WM8994_ERROR;
 8009c7e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8009c82:	e7f7      	b.n	8009c74 <WM8994_GetResolution+0x2c>

08009c84 <WM8994_SetProtocol>:
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8009c84:	b289      	uxth	r1, r1
 8009c86:	3018      	adds	r0, #24
{
 8009c88:	b508      	push	{r3, lr}
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8009c8a:	f000 ff1f 	bl	800aacc <wm8994_aif1_control1_fmt>
 8009c8e:	3800      	subs	r0, #0
 8009c90:	bf18      	it	ne
 8009c92:	2001      	movne	r0, #1
}
 8009c94:	4240      	negs	r0, r0
 8009c96:	bd08      	pop	{r3, pc}

08009c98 <WM8994_GetProtocol>:
{
 8009c98:	b510      	push	{r4, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	460c      	mov	r4, r1
  if(wm8994_aif1_control1_fmt_r(&pObj->Ctx, &protocol) != WM8994_OK)
 8009c9e:	3018      	adds	r0, #24
 8009ca0:	f10d 0106 	add.w	r1, sp, #6
 8009ca4:	f000 ff3c 	bl	800ab20 <wm8994_aif1_control1_fmt_r>
 8009ca8:	b920      	cbnz	r0, 8009cb4 <WM8994_GetProtocol+0x1c>
    *Protocol = protocol;
 8009caa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009cae:	6023      	str	r3, [r4, #0]
}
 8009cb0:	b002      	add	sp, #8
 8009cb2:	bd10      	pop	{r4, pc}
    ret = WM8994_ERROR;
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8009cb8:	e7fa      	b.n	8009cb0 <WM8994_GetProtocol+0x18>
 8009cba:	bf00      	nop

08009cbc <WM8994_GetFrequency>:
{
 8009cbc:	b510      	push	{r4, lr}
 8009cbe:	b082      	sub	sp, #8
  uint16_t freq = 0;
 8009cc0:	2300      	movs	r3, #0
{
 8009cc2:	460c      	mov	r4, r1
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 8009cc4:	3018      	adds	r0, #24
 8009cc6:	f10d 0106 	add.w	r1, sp, #6
  uint16_t freq = 0;
 8009cca:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 8009cce:	f000 fee7 	bl	800aaa0 <wm8994_aif1_sr_r>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d132      	bne.n	8009d3c <WM8994_GetFrequency+0x80>
    switch(freq)
 8009cd6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009cda:	2b0a      	cmp	r3, #10
 8009cdc:	d80a      	bhi.n	8009cf4 <WM8994_GetFrequency+0x38>
 8009cde:	e8df f003 	tbb	[pc, r3]
 8009ce2:	140f      	.short	0x140f
 8009ce4:	091e1909 	.word	0x091e1909
 8009ce8:	09062823 	.word	0x09062823
 8009cec:	0b          	.byte	0x0b
 8009ced:	00          	.byte	0x00
      *AudioFreq = WM8994_FREQUENCY_48K;
 8009cee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009cf2:	6023      	str	r3, [r4, #0]
}
 8009cf4:	b002      	add	sp, #8
 8009cf6:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_96K;
 8009cf8:	4b12      	ldr	r3, [pc, #72]	; (8009d44 <WM8994_GetFrequency+0x88>)
 8009cfa:	6023      	str	r3, [r4, #0]
}
 8009cfc:	b002      	add	sp, #8
 8009cfe:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_8K;
 8009d00:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8009d04:	6023      	str	r3, [r4, #0]
}
 8009d06:	b002      	add	sp, #8
 8009d08:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_11K;
 8009d0a:	f642 3311 	movw	r3, #11025	; 0x2b11
 8009d0e:	6023      	str	r3, [r4, #0]
}
 8009d10:	b002      	add	sp, #8
 8009d12:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_16K;
 8009d14:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8009d18:	6023      	str	r3, [r4, #0]
}
 8009d1a:	b002      	add	sp, #8
 8009d1c:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_22K;
 8009d1e:	f245 6322 	movw	r3, #22050	; 0x5622
 8009d22:	6023      	str	r3, [r4, #0]
}
 8009d24:	b002      	add	sp, #8
 8009d26:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_32K;
 8009d28:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009d2c:	6023      	str	r3, [r4, #0]
}
 8009d2e:	b002      	add	sp, #8
 8009d30:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_44K;
 8009d32:	f64a 4344 	movw	r3, #44100	; 0xac44
 8009d36:	6023      	str	r3, [r4, #0]
}
 8009d38:	b002      	add	sp, #8
 8009d3a:	bd10      	pop	{r4, pc}
    ret = WM8994_ERROR;
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8009d40:	e7d8      	b.n	8009cf4 <WM8994_GetFrequency+0x38>
 8009d42:	bf00      	nop
 8009d44:	00017700 	.word	0x00017700

08009d48 <WM8994_Reset>:
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8009d48:	2100      	movs	r1, #0
 8009d4a:	3018      	adds	r0, #24
{
 8009d4c:	b508      	push	{r3, lr}
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8009d4e:	f000 fe75 	bl	800aa3c <wm8994_sw_reset_w>
 8009d52:	3800      	subs	r0, #0
 8009d54:	bf18      	it	ne
 8009d56:	2001      	movne	r0, #1
}
 8009d58:	4240      	negs	r0, r0
 8009d5a:	bd08      	pop	{r3, pc}

08009d5c <WM8994_GetVolume>:
{
 8009d5c:	b510      	push	{r4, lr}
  if (InputOutput == VOLUME_OUTPUT)
 8009d5e:	2901      	cmp	r1, #1
{
 8009d60:	b082      	sub	sp, #8
 8009d62:	4614      	mov	r4, r2
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8009d64:	f100 0018 	add.w	r0, r0, #24
 8009d68:	f10d 0106 	add.w	r1, sp, #6
  if (InputOutput == VOLUME_OUTPUT)
 8009d6c:	d00e      	beq.n	8009d8c <WM8994_GetVolume+0x30>
    if(wm8994_aif1_adc1_left_vol_adc1l_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8009d6e:	f000 ff57 	bl	800ac20 <wm8994_aif1_adc1_left_vol_adc1l_r>
 8009d72:	b9d8      	cbnz	r0, 8009dac <WM8994_GetVolume+0x50>
      *Volume = VOLUME_IN_INVERT(invertedvol);
 8009d74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009d78:	2164      	movs	r1, #100	; 0x64
 8009d7a:	4a0e      	ldr	r2, [pc, #56]	; (8009db4 <WM8994_GetVolume+0x58>)
 8009d7c:	fb01 f303 	mul.w	r3, r1, r3
 8009d80:	fba2 2303 	umull	r2, r3, r2, r3
 8009d84:	09db      	lsrs	r3, r3, #7
 8009d86:	7023      	strb	r3, [r4, #0]
}
 8009d88:	b002      	add	sp, #8
 8009d8a:	bd10      	pop	{r4, pc}
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8009d8c:	f000 fe74 	bl	800aa78 <wm8994_lo_hpout1l_vol_r>
 8009d90:	b960      	cbnz	r0, 8009dac <WM8994_GetVolume+0x50>
      *Volume = VOLUME_OUT_INVERT(invertedvol);
 8009d92:	2164      	movs	r1, #100	; 0x64
 8009d94:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009d98:	4b07      	ldr	r3, [pc, #28]	; (8009db8 <WM8994_GetVolume+0x5c>)
 8009d9a:	fb01 f202 	mul.w	r2, r1, r2
 8009d9e:	fb83 1302 	smull	r1, r3, r3, r2
 8009da2:	4413      	add	r3, r2
 8009da4:	115b      	asrs	r3, r3, #5
 8009da6:	7023      	strb	r3, [r4, #0]
}
 8009da8:	b002      	add	sp, #8
 8009daa:	bd10      	pop	{r4, pc}
      ret = WM8994_ERROR;
 8009dac:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8009db0:	e7ea      	b.n	8009d88 <WM8994_GetVolume+0x2c>
 8009db2:	bf00      	nop
 8009db4:	891ac73b 	.word	0x891ac73b
 8009db8:	82082083 	.word	0x82082083

08009dbc <WM8994_Play>:
{ 
 8009dbc:	b510      	push	{r4, lr}
    tmp = 0x0010;
 8009dbe:	2110      	movs	r1, #16
{ 
 8009dc0:	b082      	sub	sp, #8
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009dc2:	f100 0418 	add.w	r4, r0, #24
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	f10d 0206 	add.w	r2, sp, #6
    tmp = 0x0010;
 8009dcc:	f8ad 1006 	strh.w	r1, [sp, #6]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8009dd6:	f000 fe21 	bl	800aa1c <wm8994_write_reg>
 8009dda:	4684      	mov	ip, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009ddc:	4620      	mov	r0, r4
 8009dde:	2302      	movs	r3, #2
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009de0:	4664      	mov	r4, ip
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009de2:	f10d 0206 	add.w	r2, sp, #6
 8009de6:	f240 4122 	movw	r1, #1058	; 0x422
 8009dea:	f000 fe17 	bl	800aa1c <wm8994_write_reg>
  if(ret != WM8994_OK)
 8009dee:	42c4      	cmn	r4, r0
}
 8009df0:	bf14      	ite	ne
 8009df2:	f04f 30ff 	movne.w	r0, #4294967295
 8009df6:	2000      	moveq	r0, #0
 8009df8:	b002      	add	sp, #8
 8009dfa:	bd10      	pop	{r4, pc}

08009dfc <WM8994_Resume>:
 8009dfc:	b510      	push	{r4, lr}
 8009dfe:	2110      	movs	r1, #16
 8009e00:	b082      	sub	sp, #8
 8009e02:	f100 0418 	add.w	r4, r0, #24
 8009e06:	2302      	movs	r3, #2
 8009e08:	f10d 0206 	add.w	r2, sp, #6
 8009e0c:	f8ad 1006 	strh.w	r1, [sp, #6]
 8009e10:	4620      	mov	r0, r4
 8009e12:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8009e16:	f000 fe01 	bl	800aa1c <wm8994_write_reg>
 8009e1a:	4684      	mov	ip, r0
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	2302      	movs	r3, #2
 8009e20:	4664      	mov	r4, ip
 8009e22:	f10d 0206 	add.w	r2, sp, #6
 8009e26:	f240 4122 	movw	r1, #1058	; 0x422
 8009e2a:	f000 fdf7 	bl	800aa1c <wm8994_write_reg>
 8009e2e:	42c4      	cmn	r4, r0
 8009e30:	bf14      	ite	ne
 8009e32:	f04f 30ff 	movne.w	r0, #4294967295
 8009e36:	2000      	moveq	r0, #0
 8009e38:	b002      	add	sp, #8
 8009e3a:	bd10      	pop	{r4, pc}

08009e3c <WM8994_Pause>:
{
 8009e3c:	b530      	push	{r4, r5, lr}
  uint16_t tmp = 0x0001;
 8009e3e:	2101      	movs	r1, #1
{
 8009e40:	b083      	sub	sp, #12
    tmp = 0x0200;
 8009e42:	f44f 7200 	mov.w	r2, #512	; 0x200
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009e46:	f100 0418 	add.w	r4, r0, #24
 8009e4a:	2302      	movs	r3, #2
  uint16_t tmp = 0x0001;
 8009e4c:	f8ad 1004 	strh.w	r1, [sp, #4]
    tmp = 0x0200;
 8009e50:	f8ad 2006 	strh.w	r2, [sp, #6]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009e54:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8009e58:	f10d 0206 	add.w	r2, sp, #6
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f000 fddd 	bl	800aa1c <wm8994_write_reg>
 8009e62:	4605      	mov	r5, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009e64:	2302      	movs	r3, #2
 8009e66:	f10d 0206 	add.w	r2, sp, #6
 8009e6a:	f240 4122 	movw	r1, #1058	; 0x422
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 fdd4 	bl	800aa1c <wm8994_write_reg>
  if(ret != WM8994_OK)
 8009e74:	42c5      	cmn	r5, r0
 8009e76:	d10b      	bne.n	8009e90 <WM8994_Pause+0x54>
  else if(wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2) != WM8994_OK)
 8009e78:	2302      	movs	r3, #2
 8009e7a:	aa01      	add	r2, sp, #4
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	4619      	mov	r1, r3
 8009e80:	f000 fdcc 	bl	800aa1c <wm8994_write_reg>
 8009e84:	3800      	subs	r0, #0
 8009e86:	bf18      	it	ne
 8009e88:	2001      	movne	r0, #1
 8009e8a:	4240      	negs	r0, r0
}
 8009e8c:	b003      	add	sp, #12
 8009e8e:	bd30      	pop	{r4, r5, pc}
    ret  = WM8994_ERROR;
 8009e90:	f04f 30ff 	mov.w	r0, #4294967295
 8009e94:	e7fa      	b.n	8009e8c <WM8994_Pause+0x50>
 8009e96:	bf00      	nop

08009e98 <WM8994_Stop>:
{
 8009e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    tmp = 0x0200;
 8009e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
{
 8009e9e:	b083      	sub	sp, #12
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009ea0:	f100 0518 	add.w	r5, r0, #24
 8009ea4:	2302      	movs	r3, #2
    tmp = 0x0200;
 8009ea6:	f8ad 2006 	strh.w	r2, [sp, #6]
{
 8009eaa:	460e      	mov	r6, r1
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009eac:	f10d 0206 	add.w	r2, sp, #6
 8009eb0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	f000 fdb1 	bl	800aa1c <wm8994_write_reg>
 8009eba:	4604      	mov	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	f10d 0206 	add.w	r2, sp, #6
 8009ec2:	f240 4122 	movw	r1, #1058	; 0x422
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	f000 fda8 	bl	800aa1c <wm8994_write_reg>
  if(ret != WM8994_OK)
 8009ecc:	1824      	adds	r4, r4, r0
 8009ece:	d104      	bne.n	8009eda <WM8994_Stop+0x42>
  if (CodecPdwnMode == WM8994_PDWN_SW)
 8009ed0:	2e01      	cmp	r6, #1
 8009ed2:	d106      	bne.n	8009ee2 <WM8994_Stop+0x4a>
}
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	b003      	add	sp, #12
 8009ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (CodecPdwnMode == WM8994_PDWN_SW)
 8009eda:	2e01      	cmp	r6, #1
    ret = WM8994_ERROR;
 8009edc:	f04f 34ff 	mov.w	r4, #4294967295
  if (CodecPdwnMode == WM8994_PDWN_SW)
 8009ee0:	d0f8      	beq.n	8009ed4 <WM8994_Stop+0x3c>
    tmp = 0x0200;
 8009ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8009eec:	4628      	mov	r0, r5
    tmp = 0x0200;
 8009eee:	f8ad 2006 	strh.w	r2, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009ef2:	f10d 0206 	add.w	r2, sp, #6
 8009ef6:	f000 fd91 	bl	800aa1c <wm8994_write_reg>
 8009efa:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009efc:	f10d 0206 	add.w	r2, sp, #6
 8009f00:	2302      	movs	r3, #2
 8009f02:	f240 4122 	movw	r1, #1058	; 0x422
 8009f06:	4628      	mov	r0, r5
 8009f08:	f000 fd88 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0000;
 8009f0c:	2700      	movs	r7, #0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009f0e:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8009f10:	f10d 0206 	add.w	r2, sp, #6
 8009f14:	2302      	movs	r3, #2
 8009f16:	212d      	movs	r1, #45	; 0x2d
 8009f18:	4628      	mov	r0, r5
    tmp = 0x0000;
 8009f1a:	f8ad 7006 	strh.w	r7, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8009f1e:	f000 fd7d 	bl	800aa1c <wm8994_write_reg>
 8009f22:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8009f24:	f10d 0206 	add.w	r2, sp, #6
 8009f28:	2302      	movs	r3, #2
 8009f2a:	212e      	movs	r1, #46	; 0x2e
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f000 fd75 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009f32:	f10d 0206 	add.w	r2, sp, #6
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8009f36:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009f38:	2302      	movs	r3, #2
 8009f3a:	2105      	movs	r1, #5
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	f000 fd6d 	bl	800aa1c <wm8994_write_reg>
 8009f42:	4603      	mov	r3, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 8009f44:	f10d 0206 	add.w	r2, sp, #6
 8009f48:	4639      	mov	r1, r7
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009f4a:	441c      	add	r4, r3
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	2302      	movs	r3, #2
 8009f50:	f000 fd64 	bl	800aa1c <wm8994_write_reg>
  if(ret != WM8994_OK)
 8009f54:	42c4      	cmn	r4, r0
 8009f56:	bf14      	ite	ne
 8009f58:	f04f 34ff 	movne.w	r4, #4294967295
 8009f5c:	463c      	moveq	r4, r7
}
 8009f5e:	4620      	mov	r0, r4
 8009f60:	b003      	add	sp, #12
 8009f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f64 <WM8994_DeInit>:
{
 8009f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009f66:	f100 0418 	add.w	r4, r0, #24
{
 8009f6a:	b083      	sub	sp, #12
    tmp = 0x0200;
 8009f6c:	f44f 7500 	mov.w	r5, #512	; 0x200
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009f70:	2302      	movs	r3, #2
 8009f72:	f10d 0206 	add.w	r2, sp, #6
 8009f76:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8009f7a:	4620      	mov	r0, r4
    tmp = 0x0200;
 8009f7c:	f8ad 5006 	strh.w	r5, [sp, #6]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009f80:	f000 fd4c 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009f84:	f10d 0206 	add.w	r2, sp, #6
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009f88:	4606      	mov	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	f240 4122 	movw	r1, #1058	; 0x422
 8009f90:	4620      	mov	r0, r4
 8009f92:	f000 fd43 	bl	800aa1c <wm8994_write_reg>
 8009f96:	4607      	mov	r7, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009f98:	f10d 0206 	add.w	r2, sp, #6
 8009f9c:	2302      	movs	r3, #2
  if(ret != WM8994_OK)
 8009f9e:	427f      	negs	r7, r7
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009fa0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8009fa4:	4620      	mov	r0, r4
    tmp = 0x0200;
 8009fa6:	f8ad 5006 	strh.w	r5, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009faa:	f000 fd37 	bl	800aa1c <wm8994_write_reg>
 8009fae:	42b7      	cmp	r7, r6
 8009fb0:	bf0c      	ite	eq
 8009fb2:	4605      	moveq	r5, r0
 8009fb4:	1e45      	subne	r5, r0, #1
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009fb6:	f10d 0206 	add.w	r2, sp, #6
 8009fba:	2302      	movs	r3, #2
 8009fbc:	f240 4122 	movw	r1, #1058	; 0x422
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f000 fd2b 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0000;
 8009fc6:	2700      	movs	r7, #0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009fc8:	4405      	add	r5, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8009fca:	f10d 0206 	add.w	r2, sp, #6
 8009fce:	2302      	movs	r3, #2
 8009fd0:	212d      	movs	r1, #45	; 0x2d
 8009fd2:	4620      	mov	r0, r4
    tmp = 0x0000;
 8009fd4:	f8ad 7006 	strh.w	r7, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8009fd8:	f000 fd20 	bl	800aa1c <wm8994_write_reg>
 8009fdc:	4405      	add	r5, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8009fde:	f10d 0206 	add.w	r2, sp, #6
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	212e      	movs	r1, #46	; 0x2e
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f000 fd18 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009fec:	f10d 0206 	add.w	r2, sp, #6
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8009ff0:	4405      	add	r5, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	2105      	movs	r1, #5
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f000 fd10 	bl	800aa1c <wm8994_write_reg>
 8009ffc:	4603      	mov	r3, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 8009ffe:	f10d 0206 	add.w	r2, sp, #6
 800a002:	4639      	mov	r1, r7
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a004:	441d      	add	r5, r3
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 800a006:	4620      	mov	r0, r4
 800a008:	2302      	movs	r3, #2
 800a00a:	f000 fd07 	bl	800aa1c <wm8994_write_reg>
  if(ret != WM8994_OK)
 800a00e:	42c5      	cmn	r5, r0
}
 800a010:	bf14      	ite	ne
 800a012:	f04f 30ff 	movne.w	r0, #4294967295
 800a016:	4638      	moveq	r0, r7
 800a018:	b003      	add	sp, #12
 800a01a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a01c <WM8994_SetVolume>:
  if (InputOutput == VOLUME_OUTPUT)
 800a01c:	2901      	cmp	r1, #1
{
 800a01e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a020:	4614      	mov	r4, r2
 800a022:	b083      	sub	sp, #12
  if (InputOutput == VOLUME_OUTPUT)
 800a024:	d145      	bne.n	800a0b2 <WM8994_SetVolume+0x96>
    if(Volume > 0x3EU)
 800a026:	2a3e      	cmp	r2, #62	; 0x3e
 800a028:	f200 8091 	bhi.w	800a14e <WM8994_SetVolume+0x132>
    else if (Volume == 0U)
 800a02c:	2a00      	cmp	r2, #0
 800a02e:	d071      	beq.n	800a114 <WM8994_SetVolume+0xf8>
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a030:	f100 0618 	add.w	r6, r0, #24
    tmp = 0x0010;
 800a034:	2210      	movs	r2, #16
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a036:	2302      	movs	r3, #2
 800a038:	f44f 6184 	mov.w	r1, #1056	; 0x420
    tmp = 0x0010;
 800a03c:	f8ad 2006 	strh.w	r2, [sp, #6]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a040:	4630      	mov	r0, r6
 800a042:	f10d 0206 	add.w	r2, sp, #6
      tmp = Volume | 0x140U;
 800a046:	f444 74a0 	orr.w	r4, r4, #320	; 0x140
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a04a:	f000 fce7 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a04e:	2302      	movs	r3, #2
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a050:	4605      	mov	r5, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a052:	f10d 0206 	add.w	r2, sp, #6
 800a056:	f240 4122 	movw	r1, #1058	; 0x422
 800a05a:	4630      	mov	r0, r6
 800a05c:	f000 fcde 	bl	800aa1c <wm8994_write_reg>
 800a060:	4607      	mov	r7, r0
      tmp = Volume | 0x140U;
 800a062:	f8ad 4006 	strh.w	r4, [sp, #6]
  if(ret != WM8994_OK)
 800a066:	427f      	negs	r7, r7
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 800a068:	2302      	movs	r3, #2
 800a06a:	f10d 0206 	add.w	r2, sp, #6
 800a06e:	211c      	movs	r1, #28
 800a070:	4630      	mov	r0, r6
 800a072:	f000 fcd3 	bl	800aa1c <wm8994_write_reg>
 800a076:	42af      	cmp	r7, r5
 800a078:	bf0c      	ite	eq
 800a07a:	4604      	moveq	r4, r0
 800a07c:	1e44      	subne	r4, r0, #1
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 800a07e:	2302      	movs	r3, #2
 800a080:	f10d 0206 	add.w	r2, sp, #6
 800a084:	211d      	movs	r1, #29
 800a086:	4630      	mov	r0, r6
 800a088:	f000 fcc8 	bl	800aa1c <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800a08c:	2302      	movs	r3, #2
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 800a08e:	1905      	adds	r5, r0, r4
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800a090:	f10d 0206 	add.w	r2, sp, #6
 800a094:	2126      	movs	r1, #38	; 0x26
 800a096:	4630      	mov	r0, r6
 800a098:	f000 fcc0 	bl	800aa1c <wm8994_write_reg>
 800a09c:	4604      	mov	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 800a09e:	2302      	movs	r3, #2
 800a0a0:	f10d 0206 	add.w	r2, sp, #6
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800a0a4:	442c      	add	r4, r5
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	2127      	movs	r1, #39	; 0x27
 800a0aa:	f000 fcb7 	bl	800aa1c <wm8994_write_reg>
 800a0ae:	4420      	add	r0, r4
 800a0b0:	e02a      	b.n	800a108 <WM8994_SetVolume+0xec>
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 800a0b2:	f100 0518 	add.w	r5, r0, #24
    tmp = Volume | 0x100U;
 800a0b6:	f442 7480 	orr.w	r4, r2, #256	; 0x100
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	f10d 0206 	add.w	r2, sp, #6
 800a0c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a0c4:	4628      	mov	r0, r5
    tmp = Volume | 0x100U;
 800a0c6:	f8ad 4006 	strh.w	r4, [sp, #6]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 800a0ca:	f000 fca7 	bl	800aa1c <wm8994_write_reg>
 800a0ce:	4604      	mov	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	f10d 0206 	add.w	r2, sp, #6
 800a0d6:	f240 4101 	movw	r1, #1025	; 0x401
 800a0da:	4628      	mov	r0, r5
 800a0dc:	f000 fc9e 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 800a0e0:	2302      	movs	r3, #2
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 800a0e2:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 800a0e4:	f10d 0206 	add.w	r2, sp, #6
 800a0e8:	f240 4104 	movw	r1, #1028	; 0x404
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	f000 fc95 	bl	800aa1c <wm8994_write_reg>
 800a0f2:	4601      	mov	r1, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	f10d 0206 	add.w	r2, sp, #6
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 800a0fa:	440c      	add	r4, r1
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f240 4105 	movw	r1, #1029	; 0x405
 800a102:	f000 fc8b 	bl	800aa1c <wm8994_write_reg>
 800a106:	4420      	add	r0, r4
  if(ret != WM8994_OK)
 800a108:	3800      	subs	r0, #0
 800a10a:	bf18      	it	ne
 800a10c:	2001      	movne	r0, #1
 800a10e:	4240      	negs	r0, r0
}
 800a110:	b003      	add	sp, #12
 800a112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a114:	f100 0518 	add.w	r5, r0, #24
    tmp = 0x0200;
 800a118:	f44f 7100 	mov.w	r1, #512	; 0x200
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a11c:	f10d 0206 	add.w	r2, sp, #6
 800a120:	2302      	movs	r3, #2
    tmp = 0x0200;
 800a122:	f8ad 1006 	strh.w	r1, [sp, #6]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a126:	4628      	mov	r0, r5
 800a128:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800a12c:	f000 fc76 	bl	800aa1c <wm8994_write_reg>
 800a130:	4604      	mov	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a132:	2302      	movs	r3, #2
 800a134:	f10d 0206 	add.w	r2, sp, #6
 800a138:	f240 4122 	movw	r1, #1058	; 0x422
 800a13c:	4628      	mov	r0, r5
 800a13e:	f000 fc6d 	bl	800aa1c <wm8994_write_reg>
    ret = WM8994_ERROR;
 800a142:	1820      	adds	r0, r4, r0
 800a144:	bf18      	it	ne
 800a146:	f04f 30ff 	movne.w	r0, #4294967295
}
 800a14a:	b003      	add	sp, #12
 800a14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a14e:	f100 0618 	add.w	r6, r0, #24
    tmp = 0x0010;
 800a152:	2110      	movs	r1, #16
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a154:	2302      	movs	r3, #2
 800a156:	f10d 0206 	add.w	r2, sp, #6
    tmp = 0x0010;
 800a15a:	f8ad 1006 	strh.w	r1, [sp, #6]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a15e:	4630      	mov	r0, r6
 800a160:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800a164:	f000 fc5a 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a168:	2302      	movs	r3, #2
 800a16a:	f10d 0206 	add.w	r2, sp, #6
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a16e:	4605      	mov	r5, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a170:	f240 4122 	movw	r1, #1058	; 0x422
 800a174:	4630      	mov	r0, r6
 800a176:	f000 fc51 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x3FU | 0x140U;
 800a17a:	f240 137f 	movw	r3, #383	; 0x17f
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a17e:	4607      	mov	r7, r0
      tmp = 0x3FU | 0x140U;
 800a180:	f8ad 3006 	strh.w	r3, [sp, #6]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 800a184:	e76f      	b.n	800a066 <WM8994_SetVolume+0x4a>
 800a186:	bf00      	nop

0800a188 <WM8994_Init>:
{
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a18c:	f100 0418 	add.w	r4, r0, #24
{
 800a190:	b085      	sub	sp, #20
  tmp = 0x0003;
 800a192:	f04f 0a03 	mov.w	sl, #3
{
 800a196:	460f      	mov	r7, r1
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a198:	2302      	movs	r3, #2
 800a19a:	aa03      	add	r2, sp, #12
 800a19c:	f44f 7181 	mov.w	r1, #258	; 0x102
{
 800a1a0:	4605      	mov	r5, r0
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a1a2:	4620      	mov	r0, r4
  tmp = 0x0003;
 800a1a4:	f8ad a00c 	strh.w	sl, [sp, #12]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a1a8:	f000 fc38 	bl	800aa1c <wm8994_write_reg>
  tmp = 0x0000;
 800a1ac:	2300      	movs	r3, #0
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a1ae:	4681      	mov	r9, r0
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 800a1b0:	aa03      	add	r2, sp, #12
 800a1b2:	f640 0117 	movw	r1, #2071	; 0x817
  tmp = 0x0000;
 800a1b6:	f8ad 300c 	strh.w	r3, [sp, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	2302      	movs	r3, #2
 800a1be:	f000 fc2d 	bl	800aa1c <wm8994_write_reg>
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a1c2:	2302      	movs	r3, #2
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 800a1c4:	4481      	add	r9, r0
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a1c6:	aa03      	add	r2, sp, #12
 800a1c8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 fc25 	bl	800aa1c <wm8994_write_reg>
  tmp = 0x006C;
 800a1d2:	236c      	movs	r3, #108	; 0x6c
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a1d4:	4481      	add	r9, r0
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 800a1d6:	aa03      	add	r2, sp, #12
  tmp = 0x006C;
 800a1d8:	f8ad 300c 	strh.w	r3, [sp, #12]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 800a1dc:	2139      	movs	r1, #57	; 0x39
 800a1de:	2302      	movs	r3, #2
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 fc1b 	bl	800aa1c <wm8994_write_reg>
  if (pInit->InputDevice != WM8994_IN_NONE)
 800a1e6:	683b      	ldr	r3, [r7, #0]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 800a1e8:	4481      	add	r9, r0
  if (pInit->InputDevice != WM8994_IN_NONE)
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f000 8227 	beq.w	800a63e <WM8994_Init+0x4b6>
    tmp = 0x0013;
 800a1f0:	2313      	movs	r3, #19
 800a1f2:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	aa03      	add	r2, sp, #12
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f000 fc0d 	bl	800aa1c <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 800a202:	696b      	ldr	r3, [r5, #20]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a204:	eb09 0600 	add.w	r6, r9, r0
  tickstart = pObj->IO.GetTick();
 800a208:	4798      	blx	r3
 800a20a:	4680      	mov	r8, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800a20c:	696b      	ldr	r3, [r5, #20]
 800a20e:	4798      	blx	r3
 800a210:	eba0 0308 	sub.w	r3, r0, r8
 800a214:	2b31      	cmp	r3, #49	; 0x31
 800a216:	d9f9      	bls.n	800a20c <WM8994_Init+0x84>
  switch (pInit->OutputDevice)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	f200 8224 	bhi.w	800a668 <WM8994_Init+0x4e0>
 800a220:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a224:	00040036 	.word	0x00040036
 800a228:	02100222 	.word	0x02100222
    tmp = 0x0C0C;
 800a22c:	f640 430c 	movw	r3, #3084	; 0xc0c
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a230:	aa03      	add	r2, sp, #12
 800a232:	2105      	movs	r1, #5
 800a234:	4620      	mov	r0, r4
    tmp = 0x0C0C;
 800a236:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a23a:	2302      	movs	r3, #2
 800a23c:	f000 fbee 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0000;
 800a240:	2300      	movs	r3, #0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a242:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800a244:	aa03      	add	r2, sp, #12
 800a246:	f240 6101 	movw	r1, #1537	; 0x601
      tmp = 0x0002;
 800a24a:	f04f 0a02 	mov.w	sl, #2
      tmp = 0x0001;
 800a24e:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800a252:	4620      	mov	r0, r4
 800a254:	2302      	movs	r3, #2
 800a256:	f000 fbe1 	bl	800aa1c <wm8994_write_reg>
 800a25a:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800a25c:	4653      	mov	r3, sl
 800a25e:	aa03      	add	r2, sp, #12
 800a260:	f240 6102 	movw	r1, #1538	; 0x602
 800a264:	4620      	mov	r0, r4
 800a266:	f000 fbd9 	bl	800aa1c <wm8994_write_reg>
 800a26a:	4406      	add	r6, r0
      tmp = 0x0002;
 800a26c:	f8ad a00c 	strh.w	sl, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800a270:	2302      	movs	r3, #2
 800a272:	aa03      	add	r2, sp, #12
 800a274:	f240 6104 	movw	r1, #1540	; 0x604
 800a278:	4620      	mov	r0, r4
 800a27a:	f000 fbcf 	bl	800aa1c <wm8994_write_reg>
 800a27e:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800a280:	2302      	movs	r3, #2
 800a282:	aa03      	add	r2, sp, #12
 800a284:	f240 6105 	movw	r1, #1541	; 0x605
 800a288:	4620      	mov	r0, r4
 800a28a:	f000 fbc7 	bl	800aa1c <wm8994_write_reg>
 800a28e:	4406      	add	r6, r0
  switch (pInit->InputDevice)
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	3b01      	subs	r3, #1
 800a294:	2b04      	cmp	r3, #4
 800a296:	d845      	bhi.n	800a324 <WM8994_Init+0x19c>
 800a298:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a29c:	02a40005 	.word	0x02a40005
 800a2a0:	00440251 	.word	0x00440251
 800a2a4:	0208      	.short	0x0208
    tmp = 0x030C;
 800a2a6:	f44f 7343 	mov.w	r3, #780	; 0x30c
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a2aa:	aa03      	add	r2, sp, #12
 800a2ac:	2104      	movs	r1, #4
 800a2ae:	4620      	mov	r0, r4
    tmp = 0x030C;
 800a2b0:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	f000 fbb1 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x00DB;
 800a2ba:	23db      	movs	r3, #219	; 0xdb
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a2bc:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a2be:	aa03      	add	r2, sp, #12
 800a2c0:	f44f 6188 	mov.w	r1, #1088	; 0x440
    tmp = 0x00DB;
 800a2c4:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	f000 fba6 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a2d0:	2302      	movs	r3, #2
    tmp = 0x6350;
 800a2d2:	f246 3250 	movw	r2, #25424	; 0x6350
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a2d6:	4406      	add	r6, r0
    tmp = 0x0002;
 800a2d8:	469a      	mov	sl, r3
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a2da:	4619      	mov	r1, r3
    tmp = 0x6350;
 800a2dc:	f8ad 200c 	strh.w	r2, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	aa03      	add	r2, sp, #12
 800a2e4:	f000 fb9a 	bl	800aa1c <wm8994_write_reg>
 800a2e8:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a2ea:	4653      	mov	r3, sl
 800a2ec:	aa03      	add	r2, sp, #12
 800a2ee:	f240 6106 	movw	r1, #1542	; 0x606
 800a2f2:	4620      	mov	r0, r4
    tmp = 0x0002;
 800a2f4:	f8ad a00c 	strh.w	sl, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a2f8:	f000 fb90 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 800a2fc:	4653      	mov	r3, sl
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a2fe:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 800a300:	aa03      	add	r2, sp, #12
 800a302:	f240 6107 	movw	r1, #1543	; 0x607
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 800a306:	4620      	mov	r0, r4
 800a308:	f000 fb88 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 800a30c:	4653      	mov	r3, sl
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 800a30e:	4406      	add	r6, r0
    tmp = 0x000D;
 800a310:	220d      	movs	r2, #13
 800a312:	f8ad 200c 	strh.w	r2, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 800a316:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800a31a:	aa03      	add	r2, sp, #12
 800a31c:	4620      	mov	r0, r4
 800a31e:	f000 fb7d 	bl	800aa1c <wm8994_write_reg>
 800a322:	4406      	add	r6, r0
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 800a324:	68b9      	ldr	r1, [r7, #8]
 800a326:	4628      	mov	r0, r5
 800a328:	f7ff fc30 	bl	8009b8c <WM8994_SetFrequency>
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a32c:	683b      	ldr	r3, [r7, #0]
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 800a32e:	4406      	add	r6, r0
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a330:	2b05      	cmp	r3, #5
 800a332:	f000 828e 	beq.w	800a852 <WM8994_Init+0x6ca>
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 800a336:	89b9      	ldrh	r1, [r7, #12]
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 fc07 	bl	800ab4c <wm8994_aif1_control1_wl>
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 800a33e:	2102      	movs	r1, #2
 800a340:	2800      	cmp	r0, #0
 800a342:	bf18      	it	ne
 800a344:	3e01      	subne	r6, #1
 800a346:	4620      	mov	r0, r4
 800a348:	f000 fbc0 	bl	800aacc <wm8994_aif1_control1_fmt>
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 800a34c:	2101      	movs	r1, #1
 800a34e:	2800      	cmp	r0, #0
 800a350:	bf18      	it	ne
 800a352:	3e01      	subne	r6, #1
 800a354:	4620      	mov	r0, r4
 800a356:	f000 fc39 	bl	800abcc <wm8994_aif1_control1_adcr_src>
  tmp = 0x0000;
 800a35a:	2300      	movs	r3, #0
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 800a35c:	4406      	add	r6, r0
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 800a35e:	aa03      	add	r2, sp, #12
 800a360:	f240 3102 	movw	r1, #770	; 0x302
  tmp = 0x0000;
 800a364:	f8ad 300c 	strh.w	r3, [sp, #12]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 800a368:	4620      	mov	r0, r4
 800a36a:	2302      	movs	r3, #2
 800a36c:	f000 fb56 	bl	800aa1c <wm8994_write_reg>
  tmp = 0x000A;
 800a370:	230a      	movs	r3, #10
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 800a372:	4406      	add	r6, r0
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 800a374:	aa03      	add	r2, sp, #12
 800a376:	f44f 7102 	mov.w	r1, #520	; 0x208
  tmp = 0x000A;
 800a37a:	f8ad 300c 	strh.w	r3, [sp, #12]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 800a37e:	4620      	mov	r0, r4
 800a380:	2302      	movs	r3, #2
 800a382:	f000 fb4b 	bl	800aa1c <wm8994_write_reg>
  tmp = 0x0001;
 800a386:	2301      	movs	r3, #1
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 800a388:	4406      	add	r6, r0
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 800a38a:	aa03      	add	r2, sp, #12
  tmp = 0x0001;
 800a38c:	f8ad 300c 	strh.w	r3, [sp, #12]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 800a390:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a394:	2302      	movs	r3, #2
 800a396:	4620      	mov	r0, r4
 800a398:	f000 fb40 	bl	800aa1c <wm8994_write_reg>
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 800a39c:	687b      	ldr	r3, [r7, #4]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 800a39e:	4406      	add	r6, r0
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 80f1 	beq.w	800a588 <WM8994_Init+0x400>
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d105      	bne.n	800a3b6 <WM8994_Init+0x22e>
 800a3aa:	f8d7 a000 	ldr.w	sl, [r7]
 800a3ae:	f1ba 0f00 	cmp.w	sl, #0
 800a3b2:	f000 8279 	beq.w	800a8a8 <WM8994_Init+0x720>
      tmp = 0x0300;
 800a3b6:	f44f 7a40 	mov.w	sl, #768	; 0x300
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	aa03      	add	r2, sp, #12
 800a3be:	2103      	movs	r1, #3
 800a3c0:	4620      	mov	r0, r4
      tmp = 0x0300;
 800a3c2:	f8ad a00c 	strh.w	sl, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800a3c6:	f000 fb29 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x0000;
 800a3ca:	2300      	movs	r3, #0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800a3cc:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 800a3ce:	aa03      	add	r2, sp, #12
 800a3d0:	2122      	movs	r1, #34	; 0x22
      tmp = 0x0000;
 800a3d2:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	2302      	movs	r3, #2
 800a3da:	f000 fb1f 	bl	800aa1c <wm8994_write_reg>
 800a3de:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	aa03      	add	r2, sp, #12
 800a3e4:	2123      	movs	r1, #35	; 0x23
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f000 fb18 	bl	800aa1c <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 800a3ec:	2302      	movs	r3, #2
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 800a3ee:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 800a3f0:	aa03      	add	r2, sp, #12
 800a3f2:	2136      	movs	r1, #54	; 0x36
 800a3f4:	4620      	mov	r0, r4
      tmp = 0x0300;
 800a3f6:	f8ad a00c 	strh.w	sl, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 800a3fa:	f000 fb0f 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x3003;
 800a3fe:	f243 0303 	movw	r3, #12291	; 0x3003
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 800a402:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a404:	aa03      	add	r2, sp, #12
 800a406:	2101      	movs	r1, #1
      tmp = 0x3003;
 800a408:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a40c:	4620      	mov	r0, r4
 800a40e:	2302      	movs	r3, #2
 800a410:	f000 fb04 	bl	800aa1c <wm8994_write_reg>
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a414:	683b      	ldr	r3, [r7, #0]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a416:	4406      	add	r6, r0
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 800a418:	aa03      	add	r2, sp, #12
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a41a:	2b05      	cmp	r3, #5
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 800a41c:	f04f 0151 	mov.w	r1, #81	; 0x51
 800a420:	4620      	mov	r0, r4
        tmp = 0x0205;
 800a422:	bf0c      	ite	eq
 800a424:	f240 2305 	movweq	r3, #517	; 0x205
        tmp = 0x0005;
 800a428:	2305      	movne	r3, #5
 800a42a:	f8ad 300c 	strh.w	r3, [sp, #12]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 800a42e:	2302      	movs	r3, #2
 800a430:	f000 faf4 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x3303;
 800a434:	f243 3303 	movw	r3, #13059	; 0x3303
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 800a438:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a43a:	aa03      	add	r2, sp, #12
 800a43c:	2101      	movs	r1, #1
      tmp = 0x3303;
 800a43e:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a442:	4620      	mov	r0, r4
 800a444:	2302      	movs	r3, #2
 800a446:	f000 fae9 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x0022;
 800a44a:	2322      	movs	r3, #34	; 0x22
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a44c:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 800a44e:	aa03      	add	r2, sp, #12
 800a450:	2160      	movs	r1, #96	; 0x60
      tmp = 0x0022;
 800a452:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 800a456:	4620      	mov	r0, r4
 800a458:	2302      	movs	r3, #2
 800a45a:	f000 fadf 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x9F25;
 800a45e:	f649 7325 	movw	r3, #40741	; 0x9f25
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 800a462:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 800a464:	aa03      	add	r2, sp, #12
 800a466:	214c      	movs	r1, #76	; 0x4c
      tmp = 0x9F25;
 800a468:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 800a46c:	4620      	mov	r0, r4
 800a46e:	2302      	movs	r3, #2
 800a470:	f000 fad4 	bl	800aa1c <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 800a474:	696b      	ldr	r3, [r5, #20]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 800a476:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 800a478:	4798      	blx	r3
 800a47a:	4680      	mov	r8, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800a47c:	696b      	ldr	r3, [r5, #20]
 800a47e:	4798      	blx	r3
 800a480:	eba0 0008 	sub.w	r0, r0, r8
 800a484:	280e      	cmp	r0, #14
 800a486:	d9f9      	bls.n	800a47c <WM8994_Init+0x2f4>
      tmp = 0x0001;
 800a488:	2301      	movs	r3, #1
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800a48a:	aa03      	add	r2, sp, #12
 800a48c:	212d      	movs	r1, #45	; 0x2d
 800a48e:	4620      	mov	r0, r4
      tmp = 0x0001;
 800a490:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800a494:	2302      	movs	r3, #2
 800a496:	f000 fac1 	bl	800aa1c <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800a49a:	2302      	movs	r3, #2
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800a49c:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800a49e:	aa03      	add	r2, sp, #12
 800a4a0:	212e      	movs	r1, #46	; 0x2e
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f000 faba 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x0330;
 800a4a8:	f44f 734c 	mov.w	r3, #816	; 0x330
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800a4ac:	eb06 0800 	add.w	r8, r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800a4b0:	aa03      	add	r2, sp, #12
 800a4b2:	2103      	movs	r1, #3
      tmp = 0x0330;
 800a4b4:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	2302      	movs	r3, #2
 800a4bc:	f000 faae 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x0033;
 800a4c0:	2333      	movs	r3, #51	; 0x33
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800a4c2:	4480      	add	r8, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 800a4c4:	aa03      	add	r2, sp, #12
 800a4c6:	2154      	movs	r1, #84	; 0x54
      tmp = 0x0033;
 800a4c8:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	f000 faa4 	bl	800aa1c <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 800a4d4:	696b      	ldr	r3, [r5, #20]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 800a4d6:	eb08 0a00 	add.w	sl, r8, r0
  tickstart = pObj->IO.GetTick();
 800a4da:	4798      	blx	r3
 800a4dc:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800a4de:	696b      	ldr	r3, [r5, #20]
 800a4e0:	4798      	blx	r3
 800a4e2:	1b80      	subs	r0, r0, r6
 800a4e4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800a4e8:	d9f9      	bls.n	800a4de <WM8994_Init+0x356>
      tmp = 0x00EE;
 800a4ea:	23ee      	movs	r3, #238	; 0xee
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 800a4ec:	aa03      	add	r2, sp, #12
 800a4ee:	2160      	movs	r1, #96	; 0x60
 800a4f0:	4620      	mov	r0, r4
      tmp = 0x00EE;
 800a4f2:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	f000 fa90 	bl	800aa1c <wm8994_write_reg>
 800a4fc:	eb0a 0600 	add.w	r6, sl, r0
    tmp = 0x00C0;
 800a500:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 800a504:	2302      	movs	r3, #2
 800a506:	aa03      	add	r2, sp, #12
 800a508:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800a50c:	4620      	mov	r0, r4
    tmp = 0x00C0;
 800a50e:	f8ad a00c 	strh.w	sl, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 800a512:	f000 fa83 	bl	800aa1c <wm8994_write_reg>
 800a516:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 800a518:	2302      	movs	r3, #2
 800a51a:	aa03      	add	r2, sp, #12
 800a51c:	f240 6111 	movw	r1, #1553	; 0x611
 800a520:	4620      	mov	r0, r4
 800a522:	f000 fa7b 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0010;
 800a526:	f04f 0b10 	mov.w	fp, #16
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 800a52a:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a52c:	2302      	movs	r3, #2
 800a52e:	aa03      	add	r2, sp, #12
 800a530:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800a534:	4620      	mov	r0, r4
    tmp = 0x0010;
 800a536:	f8ad b00c 	strh.w	fp, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a53a:	f000 fa6f 	bl	800aa1c <wm8994_write_reg>
 800a53e:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 800a540:	2302      	movs	r3, #2
 800a542:	aa03      	add	r2, sp, #12
 800a544:	f240 6112 	movw	r1, #1554	; 0x612
 800a548:	4620      	mov	r0, r4
    tmp = 0x00C0;
 800a54a:	f8ad a00c 	strh.w	sl, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 800a54e:	f000 fa65 	bl	800aa1c <wm8994_write_reg>
 800a552:	eb06 0800 	add.w	r8, r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 800a556:	2302      	movs	r3, #2
 800a558:	aa03      	add	r2, sp, #12
 800a55a:	f240 6113 	movw	r1, #1555	; 0x613
 800a55e:	4620      	mov	r0, r4
 800a560:	f000 fa5c 	bl	800aa1c <wm8994_write_reg>
 800a564:	4480      	add	r8, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a566:	2302      	movs	r3, #2
 800a568:	aa03      	add	r2, sp, #12
 800a56a:	f240 4122 	movw	r1, #1058	; 0x422
 800a56e:	4620      	mov	r0, r4
    tmp = 0x0010;
 800a570:	f8ad b00c 	strh.w	fp, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a574:	f000 fa52 	bl	800aa1c <wm8994_write_reg>
 800a578:	4480      	add	r8, r0
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 800a57a:	7c3a      	ldrb	r2, [r7, #16]
 800a57c:	4628      	mov	r0, r5
 800a57e:	2101      	movs	r1, #1
 800a580:	f7ff fd4c 	bl	800a01c <WM8994_SetVolume>
 800a584:	eb08 0600 	add.w	r6, r8, r0
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d050      	beq.n	800a630 <WM8994_Init+0x4a8>
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 800a58e:	1e5a      	subs	r2, r3, #1
 800a590:	2a01      	cmp	r2, #1
 800a592:	f240 8167 	bls.w	800a864 <WM8994_Init+0x6dc>
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a596:	2b05      	cmp	r3, #5
 800a598:	f000 81d7 	beq.w	800a94a <WM8994_Init+0x7c2>
      tmp = 0x000B;
 800a59c:	230b      	movs	r3, #11
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 800a59e:	aa03      	add	r2, sp, #12
 800a5a0:	2118      	movs	r1, #24
 800a5a2:	4620      	mov	r0, r4
      tmp = 0x000B;
 800a5a4:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	f000 fa37 	bl	800aa1c <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 800a5ae:	2302      	movs	r3, #2
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 800a5b0:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 800a5b2:	aa03      	add	r2, sp, #12
 800a5b4:	211a      	movs	r1, #26
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f000 fa30 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x1800;
 800a5bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 800a5c0:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800a5c2:	aa03      	add	r2, sp, #12
      tmp = 0x1800;
 800a5c4:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800a5c8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f000 fa24 	bl	800aa1c <wm8994_write_reg>
 800a5d4:	4406      	add	r6, r0
    tmp = Volume | 0x100U;
 800a5d6:	7c3a      	ldrb	r2, [r7, #16]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 800a5d8:	2302      	movs	r3, #2
 800a5da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5de:	4620      	mov	r0, r4
    tmp = Volume | 0x100U;
 800a5e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a5e4:	f8ad 200e 	strh.w	r2, [sp, #14]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 800a5e8:	f10d 020e 	add.w	r2, sp, #14
 800a5ec:	f000 fa16 	bl	800aa1c <wm8994_write_reg>
 800a5f0:	4605      	mov	r5, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 800a5f2:	2302      	movs	r3, #2
 800a5f4:	f10d 020e 	add.w	r2, sp, #14
 800a5f8:	f240 4101 	movw	r1, #1025	; 0x401
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f000 fa0d 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 800a602:	2302      	movs	r3, #2
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 800a604:	4405      	add	r5, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 800a606:	f10d 020e 	add.w	r2, sp, #14
 800a60a:	f240 4104 	movw	r1, #1028	; 0x404
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 fa04 	bl	800aa1c <wm8994_write_reg>
 800a614:	4603      	mov	r3, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 800a616:	f10d 020e 	add.w	r2, sp, #14
 800a61a:	4620      	mov	r0, r4
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 800a61c:	441d      	add	r5, r3
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 800a61e:	f240 4105 	movw	r1, #1029	; 0x405
 800a622:	2302      	movs	r3, #2
 800a624:	f000 f9fa 	bl	800aa1c <wm8994_write_reg>
  if(ret != WM8994_OK)
 800a628:	4240      	negs	r0, r0
 800a62a:	42a8      	cmp	r0, r5
 800a62c:	bf18      	it	ne
 800a62e:	3e01      	subne	r6, #1
  if(ret != WM8994_OK)
 800a630:	1e30      	subs	r0, r6, #0
 800a632:	bf18      	it	ne
 800a634:	2001      	movne	r0, #1
}
 800a636:	4240      	negs	r0, r0
 800a638:	b005      	add	sp, #20
 800a63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 0x0003;
 800a63e:	f8ad a00c 	strh.w	sl, [sp, #12]
 800a642:	e5d8      	b.n	800a1f6 <WM8994_Init+0x6e>
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a644:	6839      	ldr	r1, [r7, #0]
      tmp = 0x0F0F;
 800a646:	f640 730f 	movw	r3, #3855	; 0xf0f
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a64a:	aa03      	add	r2, sp, #12
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a64c:	2905      	cmp	r1, #5
      tmp = 0x0F0F;
 800a64e:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a652:	f04f 0302 	mov.w	r3, #2
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a656:	f000 8160 	beq.w	800a91a <WM8994_Init+0x792>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a65a:	2105      	movs	r1, #5
 800a65c:	4620      	mov	r0, r4
 800a65e:	f000 f9dd 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x0001;
 800a662:	2301      	movs	r3, #1
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a664:	4406      	add	r6, r0
      tmp = 0x0001;
 800a666:	e5ed      	b.n	800a244 <WM8994_Init+0xbc>
    tmp = 0x0303;
 800a668:	f240 3303 	movw	r3, #771	; 0x303
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a66c:	aa03      	add	r2, sp, #12
 800a66e:	2105      	movs	r1, #5
 800a670:	4620      	mov	r0, r4
    tmp = 0x0303;
 800a672:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a676:	2302      	movs	r3, #2
 800a678:	f000 f9d0 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0001;
 800a67c:	2301      	movs	r3, #1
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a67e:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800a680:	aa03      	add	r2, sp, #12
 800a682:	f240 6101 	movw	r1, #1537	; 0x601
    tmp = 0x0001;
 800a686:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800a68a:	4620      	mov	r0, r4
 800a68c:	2302      	movs	r3, #2
 800a68e:	f000 f9c5 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800a692:	2302      	movs	r3, #2
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800a694:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800a696:	aa03      	add	r2, sp, #12
 800a698:	f240 6102 	movw	r1, #1538	; 0x602
 800a69c:	4620      	mov	r0, r4
 800a69e:	f000 f9bd 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0000;
 800a6a2:	2300      	movs	r3, #0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800a6a4:	4406      	add	r6, r0
    tmp = 0x0000;
 800a6a6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a6aa:	e5e1      	b.n	800a270 <WM8994_Init+0xe8>
    tmp = 0x0F3C;
 800a6ac:	f640 733c 	movw	r3, #3900	; 0xf3c
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a6b0:	aa03      	add	r2, sp, #12
 800a6b2:	2104      	movs	r1, #4
 800a6b4:	4620      	mov	r0, r4
    tmp = 0x0F3C;
 800a6b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a6ba:	2302      	movs	r3, #2
 800a6bc:	f000 f9ae 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x00DB;
 800a6c0:	23db      	movs	r3, #219	; 0xdb
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a6c2:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 800a6c4:	aa03      	add	r2, sp, #12
 800a6c6:	f44f 618a 	mov.w	r1, #1104	; 0x450
    tmp = 0x00DB;
 800a6ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	f000 f9a3 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a6d6:	2302      	movs	r3, #2
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 800a6d8:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a6da:	aa03      	add	r2, sp, #12
 800a6dc:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f000 f99b 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a6e6:	2302      	movs	r3, #2
    tmp = 0x63A0;
 800a6e8:	f246 32a0 	movw	r2, #25504	; 0x63a0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a6ec:	4406      	add	r6, r0
    tmp = 0x0002;
 800a6ee:	469a      	mov	sl, r3
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a6f0:	4619      	mov	r1, r3
    tmp = 0x63A0;
 800a6f2:	f8ad 200c 	strh.w	r2, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	aa03      	add	r2, sp, #12
 800a6fa:	f000 f98f 	bl	800aa1c <wm8994_write_reg>
 800a6fe:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a700:	4653      	mov	r3, sl
 800a702:	aa03      	add	r2, sp, #12
 800a704:	f240 6106 	movw	r1, #1542	; 0x606
 800a708:	4620      	mov	r0, r4
    tmp = 0x0002;
 800a70a:	f8ad a00c 	strh.w	sl, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a70e:	f000 f985 	bl	800aa1c <wm8994_write_reg>
 800a712:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 800a714:	4653      	mov	r3, sl
 800a716:	aa03      	add	r2, sp, #12
 800a718:	f240 6107 	movw	r1, #1543	; 0x607
 800a71c:	4620      	mov	r0, r4
 800a71e:	f000 f97d 	bl	800aa1c <wm8994_write_reg>
 800a722:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 800a724:	4653      	mov	r3, sl
 800a726:	aa03      	add	r2, sp, #12
 800a728:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800a72c:	4620      	mov	r0, r4
 800a72e:	f000 f975 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 800a732:	4653      	mov	r3, sl
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 800a734:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 800a736:	aa03      	add	r2, sp, #12
 800a738:	f240 6109 	movw	r1, #1545	; 0x609
 800a73c:	e5e3      	b.n	800a306 <WM8994_Init+0x17e>
    tmp = 0x0011;
 800a73e:	2311      	movs	r3, #17
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 800a740:	aa03      	add	r2, sp, #12
 800a742:	2128      	movs	r1, #40	; 0x28
 800a744:	4620      	mov	r0, r4
    tmp = 0x0011;
 800a746:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 800a74a:	2302      	movs	r3, #2
 800a74c:	f000 f966 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0035;
 800a750:	2335      	movs	r3, #53	; 0x35
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 800a752:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 800a754:	aa03      	add	r2, sp, #12
 800a756:	2129      	movs	r1, #41	; 0x29
    tmp = 0x0035;
 800a758:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 800a75c:	4620      	mov	r0, r4
 800a75e:	2302      	movs	r3, #2
 800a760:	f000 f95c 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 800a764:	2302      	movs	r3, #2
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 800a766:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 800a768:	aa03      	add	r2, sp, #12
 800a76a:	212a      	movs	r1, #42	; 0x2a
 800a76c:	4620      	mov	r0, r4
 800a76e:	f000 f955 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x0303;
 800a772:	f240 3303 	movw	r3, #771	; 0x303
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 800a776:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a778:	aa03      	add	r2, sp, #12
 800a77a:	2104      	movs	r1, #4
    tmp = 0x0303;
 800a77c:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a780:	4620      	mov	r0, r4
 800a782:	2302      	movs	r3, #2
 800a784:	f000 f94a 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x00DB;
 800a788:	23db      	movs	r3, #219	; 0xdb
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a78a:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a78c:	aa03      	add	r2, sp, #12
 800a78e:	f44f 6188 	mov.w	r1, #1088	; 0x440
    tmp = 0x00DB;
 800a792:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a796:	4620      	mov	r0, r4
 800a798:	2302      	movs	r3, #2
 800a79a:	f000 f93f 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a79e:	2302      	movs	r3, #2
    tmp = 0x6350;
 800a7a0:	f246 3250 	movw	r2, #25424	; 0x6350
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a7a4:	4406      	add	r6, r0
    tmp = 0x0002;
 800a7a6:	469a      	mov	sl, r3
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a7a8:	4619      	mov	r1, r3
    tmp = 0x6350;
 800a7aa:	f8ad 200c 	strh.w	r2, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	aa03      	add	r2, sp, #12
 800a7b2:	f000 f933 	bl	800aa1c <wm8994_write_reg>
 800a7b6:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a7b8:	4653      	mov	r3, sl
 800a7ba:	aa03      	add	r2, sp, #12
 800a7bc:	f240 6106 	movw	r1, #1542	; 0x606
 800a7c0:	4620      	mov	r0, r4
    tmp = 0x0002;
 800a7c2:	f8ad a00c 	strh.w	sl, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a7c6:	f000 f929 	bl	800aa1c <wm8994_write_reg>
 800a7ca:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 800a7cc:	4653      	mov	r3, sl
 800a7ce:	aa03      	add	r2, sp, #12
 800a7d0:	f240 6107 	movw	r1, #1543	; 0x607
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f000 f921 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 800a7da:	4653      	mov	r3, sl
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 800a7dc:	4406      	add	r6, r0
    tmp = 0x800D;
 800a7de:	f248 020d 	movw	r2, #32781	; 0x800d
 800a7e2:	e596      	b.n	800a312 <WM8994_Init+0x18a>
    tmp = 0x0C30;
 800a7e4:	f44f 6343 	mov.w	r3, #3120	; 0xc30
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a7e8:	aa03      	add	r2, sp, #12
 800a7ea:	2104      	movs	r1, #4
 800a7ec:	4620      	mov	r0, r4
    tmp = 0x0C30;
 800a7ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	f000 f912 	bl	800aa1c <wm8994_write_reg>
    tmp = 0x00DB;
 800a7f8:	23db      	movs	r3, #219	; 0xdb
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a7fa:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 800a7fc:	aa03      	add	r2, sp, #12
 800a7fe:	f44f 618a 	mov.w	r1, #1104	; 0x450
    tmp = 0x00DB;
 800a802:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 800a806:	4620      	mov	r0, r4
 800a808:	2302      	movs	r3, #2
 800a80a:	f000 f907 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a80e:	2302      	movs	r3, #2
    tmp = 0x6000;
 800a810:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 800a814:	4406      	add	r6, r0
    tmp = 0x0002;
 800a816:	469a      	mov	sl, r3
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a818:	4619      	mov	r1, r3
    tmp = 0x6000;
 800a81a:	f8ad 200c 	strh.w	r2, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a81e:	4620      	mov	r0, r4
 800a820:	aa03      	add	r2, sp, #12
 800a822:	f000 f8fb 	bl	800aa1c <wm8994_write_reg>
 800a826:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 800a828:	4653      	mov	r3, sl
 800a82a:	aa03      	add	r2, sp, #12
 800a82c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800a830:	4620      	mov	r0, r4
    tmp = 0x0002;
 800a832:	f8ad a00c 	strh.w	sl, [sp, #12]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 800a836:	f000 f8f1 	bl	800aa1c <wm8994_write_reg>
 800a83a:	4406      	add	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 800a83c:	4653      	mov	r3, sl
 800a83e:	aa03      	add	r2, sp, #12
 800a840:	f240 6109 	movw	r1, #1545	; 0x609
 800a844:	4620      	mov	r0, r4
 800a846:	f000 f8e9 	bl	800aa1c <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 800a84a:	4653      	mov	r3, sl
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 800a84c:	4406      	add	r6, r0
    tmp = 0x000E;
 800a84e:	220e      	movs	r2, #14
 800a850:	e55f      	b.n	800a312 <WM8994_Init+0x18a>
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 800a852:	2100      	movs	r1, #0
 800a854:	4620      	mov	r0, r4
 800a856:	f000 f979 	bl	800ab4c <wm8994_aif1_control1_wl>
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 800a85a:	2103      	movs	r1, #3
 800a85c:	2800      	cmp	r0, #0
 800a85e:	bf18      	it	ne
 800a860:	3e01      	subne	r6, #1
 800a862:	e570      	b.n	800a346 <WM8994_Init+0x1be>
      tmp = 0x0013;
 800a864:	2313      	movs	r3, #19
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a866:	aa03      	add	r2, sp, #12
 800a868:	2101      	movs	r1, #1
 800a86a:	4620      	mov	r0, r4
      tmp = 0x0013;
 800a86c:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a870:	2302      	movs	r3, #2
      tmp = 0x0002;
 800a872:	4698      	mov	r8, r3
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a874:	f000 f8d2 	bl	800aa1c <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800a878:	aa03      	add	r2, sp, #12
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a87a:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800a87c:	4643      	mov	r3, r8
 800a87e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800a882:	4620      	mov	r0, r4
      tmp = 0x0002;
 800a884:	f8ad 800c 	strh.w	r8, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800a888:	f000 f8c8 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x3800;
 800a88c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800a890:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 800a892:	4643      	mov	r3, r8
      tmp = 0x3800;
 800a894:	f8ad 100c 	strh.w	r1, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 800a898:	aa03      	add	r2, sp, #12
 800a89a:	f240 4111 	movw	r1, #1041	; 0x411
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f000 f8bc 	bl	800aa1c <wm8994_write_reg>
 800a8a4:	4406      	add	r6, r0
 800a8a6:	e696      	b.n	800a5d6 <WM8994_Init+0x44e>
      tmp = 0x0100;
 800a8a8:	f44f 7280 	mov.w	r2, #256	; 0x100
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800a8ac:	212d      	movs	r1, #45	; 0x2d
 800a8ae:	4620      	mov	r0, r4
      if(ColdStartup == 1U)
 800a8b0:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800a9d0 <WM8994_Init+0x848>
      tmp = 0x0100;
 800a8b4:	f8ad 200c 	strh.w	r2, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800a8b8:	aa03      	add	r2, sp, #12
 800a8ba:	9301      	str	r3, [sp, #4]
 800a8bc:	f000 f8ae 	bl	800aa1c <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800a8c0:	9b01      	ldr	r3, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800a8c2:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800a8c4:	aa03      	add	r2, sp, #12
 800a8c6:	212e      	movs	r1, #46	; 0x2e
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f000 f8a7 	bl	800aa1c <wm8994_write_reg>
      if(ColdStartup == 1U)
 800a8ce:	f898 2000 	ldrb.w	r2, [r8]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800a8d2:	4406      	add	r6, r0
      if(ColdStartup == 1U)
 800a8d4:	9b01      	ldr	r3, [sp, #4]
 800a8d6:	2a01      	cmp	r2, #1
 800a8d8:	d061      	beq.n	800a99e <WM8994_Init+0x816>
        tmp = 0x8108;
 800a8da:	f248 1208 	movw	r2, #33032	; 0x8108
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800a8de:	f44f 7188 	mov.w	r1, #272	; 0x110
 800a8e2:	4620      	mov	r0, r4
        tmp = 0x8108;
 800a8e4:	f8ad 200c 	strh.w	r2, [sp, #12]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800a8e8:	aa03      	add	r2, sp, #12
 800a8ea:	f000 f897 	bl	800aa1c <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 800a8ee:	696b      	ldr	r3, [r5, #20]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800a8f0:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 800a8f2:	4798      	blx	r3
 800a8f4:	4680      	mov	r8, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800a8f6:	696b      	ldr	r3, [r5, #20]
 800a8f8:	4798      	blx	r3
 800a8fa:	eba0 0008 	sub.w	r0, r0, r8
 800a8fe:	2831      	cmp	r0, #49	; 0x31
 800a900:	d9f9      	bls.n	800a8f6 <WM8994_Init+0x76e>
      tmp = 0x0000;
 800a902:	2300      	movs	r3, #0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a904:	aa03      	add	r2, sp, #12
 800a906:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800a90a:	4620      	mov	r0, r4
      tmp = 0x0000;
 800a90c:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a910:	2302      	movs	r3, #2
 800a912:	f000 f883 	bl	800aa1c <wm8994_write_reg>
 800a916:	4406      	add	r6, r0
 800a918:	e5f2      	b.n	800a500 <WM8994_Init+0x378>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a91a:	4620      	mov	r0, r4
 800a91c:	f000 f87e 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x0003;
 800a920:	2303      	movs	r3, #3
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a922:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800a924:	aa03      	add	r2, sp, #12
 800a926:	f240 6101 	movw	r1, #1537	; 0x601
      tmp = 0x0003;
 800a92a:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800a92e:	4620      	mov	r0, r4
 800a930:	2302      	movs	r3, #2
 800a932:	f000 f873 	bl	800aa1c <wm8994_write_reg>
 800a936:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800a938:	2302      	movs	r3, #2
 800a93a:	aa03      	add	r2, sp, #12
 800a93c:	f240 6102 	movw	r1, #1538	; 0x602
 800a940:	4620      	mov	r0, r4
 800a942:	f000 f86b 	bl	800aa1c <wm8994_write_reg>
 800a946:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800a948:	e492      	b.n	800a270 <WM8994_Init+0xe8>
      tmp = 0x0013;
 800a94a:	2313      	movs	r3, #19
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a94c:	aa03      	add	r2, sp, #12
 800a94e:	2101      	movs	r1, #1
 800a950:	4620      	mov	r0, r4
      tmp = 0x0013;
 800a952:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a956:	2302      	movs	r3, #2
      tmp = 0x0002;
 800a958:	4699      	mov	r9, r3
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a95a:	f000 f85f 	bl	800aa1c <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800a95e:	aa03      	add	r2, sp, #12
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a960:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800a962:	464b      	mov	r3, r9
 800a964:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800a968:	4620      	mov	r0, r4
      tmp = 0x0002;
 800a96a:	f8ad 900c 	strh.w	r9, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800a96e:	f000 f855 	bl	800aa1c <wm8994_write_reg>
      tmp = 0x1800;
 800a972:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800a976:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800a978:	aa03      	add	r2, sp, #12
 800a97a:	f44f 6182 	mov.w	r1, #1040	; 0x410
      tmp = 0x1800;
 800a97e:	f8ad 300c 	strh.w	r3, [sp, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800a982:	4620      	mov	r0, r4
 800a984:	464b      	mov	r3, r9
 800a986:	f000 f849 	bl	800aa1c <wm8994_write_reg>
 800a98a:	4406      	add	r6, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 800a98c:	464b      	mov	r3, r9
 800a98e:	aa03      	add	r2, sp, #12
 800a990:	f240 4111 	movw	r1, #1041	; 0x411
 800a994:	4620      	mov	r0, r4
 800a996:	f000 f841 	bl	800aa1c <wm8994_write_reg>
 800a99a:	4406      	add	r6, r0
 800a99c:	e61b      	b.n	800a5d6 <WM8994_Init+0x44e>
        tmp = 0x8100;
 800a99e:	f44f 4201 	mov.w	r2, #33024	; 0x8100
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800a9a2:	f44f 7188 	mov.w	r1, #272	; 0x110
 800a9a6:	4620      	mov	r0, r4
        tmp = 0x8100;
 800a9a8:	f8ad 200c 	strh.w	r2, [sp, #12]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800a9ac:	aa03      	add	r2, sp, #12
 800a9ae:	f000 f835 	bl	800aa1c <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 800a9b2:	696b      	ldr	r3, [r5, #20]
        ColdStartup=0;
 800a9b4:	f888 a000 	strb.w	sl, [r8]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800a9b8:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 800a9ba:	4798      	blx	r3
 800a9bc:	4680      	mov	r8, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800a9be:	696b      	ldr	r3, [r5, #20]
 800a9c0:	4798      	blx	r3
 800a9c2:	eba0 0008 	sub.w	r0, r0, r8
 800a9c6:	f5b0 7fa2 	cmp.w	r0, #324	; 0x144
 800a9ca:	d9f8      	bls.n	800a9be <WM8994_Init+0x836>
 800a9cc:	e799      	b.n	800a902 <WM8994_Init+0x77a>
 800a9ce:	bf00      	nop
 800a9d0:	24007458 	.word	0x24007458

0800a9d4 <WM8994_RegisterBusIO>:
  if (pObj == NULL)
 800a9d4:	b1d0      	cbz	r0, 800aa0c <WM8994_RegisterBusIO+0x38>
    pObj->IO.Address   = pIO->Address;
 800a9d6:	890a      	ldrh	r2, [r1, #8]
{
 800a9d8:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
 800a9da:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 800a9de:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 800a9e0:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a9e4:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
    pObj->IO.GetTick   = pIO->GetTick;
 800a9e8:	6949      	ldr	r1, [r1, #20]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a9ea:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800a9ec:	6141      	str	r1, [r0, #20]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 800a9ee:	4a09      	ldr	r2, [pc, #36]	; (800aa14 <WM8994_RegisterBusIO+0x40>)
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 800a9f0:	4909      	ldr	r1, [pc, #36]	; (800aa18 <WM8994_RegisterBusIO+0x44>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a9f2:	60c4      	str	r4, [r0, #12]
    pObj->Ctx.handle   = pObj;
 800a9f4:	6200      	str	r0, [r0, #32]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 800a9f6:	e9c0 2106 	strd	r2, r1, [r0, #24]
    if(pObj->IO.Init != NULL)
 800a9fa:	b113      	cbz	r3, 800aa02 <WM8994_RegisterBusIO+0x2e>
}
 800a9fc:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
 800aa00:	4718      	bx	r3
}
 800aa02:	f04f 30ff 	mov.w	r0, #4294967295
 800aa06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	08009825 	.word	0x08009825
 800aa18:	08009815 	.word	0x08009815

0800aa1c <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	4614      	mov	r4, r2
 800aa20:	b082      	sub	sp, #8
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aa22:	f8b4 c000 	ldrh.w	ip, [r4]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aa26:	f10d 0206 	add.w	r2, sp, #6
 800aa2a:	6804      	ldr	r4, [r0, #0]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aa2c:	fa9c fc9c 	rev16.w	ip, ip
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aa30:	6880      	ldr	r0, [r0, #8]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aa32:	f8ad c006 	strh.w	ip, [sp, #6]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aa36:	47a0      	blx	r4
}
 800aa38:	b002      	add	sp, #8
 800aa3a:	bd10      	pop	{r4, pc}

0800aa3c <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 800aa3c:	b510      	push	{r4, lr}
 800aa3e:	b082      	sub	sp, #8
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aa40:	fa91 fc91 	rev16.w	ip, r1
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aa44:	6804      	ldr	r4, [r0, #0]
 800aa46:	2302      	movs	r3, #2
 800aa48:	f10d 0206 	add.w	r2, sp, #6
 800aa4c:	2100      	movs	r1, #0
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aa4e:	f8ad c006 	strh.w	ip, [sp, #6]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aa52:	6880      	ldr	r0, [r0, #8]
 800aa54:	47a0      	blx	r4
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
}
 800aa56:	b002      	add	sp, #8
 800aa58:	bd10      	pop	{r4, pc}
 800aa5a:	bf00      	nop

0800aa5c <wm8994_sw_reset_r>:
* Input          : Pointer to uint8_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800aa5c:	b538      	push	{r3, r4, r5, lr}
 800aa5e:	460c      	mov	r4, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800aa60:	2302      	movs	r3, #2
 800aa62:	2100      	movs	r1, #0
 800aa64:	4622      	mov	r2, r4
 800aa66:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800aa6a:	47a8      	blx	r5
  if(ret >= 0)
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	db02      	blt.n	800aa76 <wm8994_sw_reset_r+0x1a>
    *data = tmp;
 800aa70:	8823      	ldrh	r3, [r4, #0]
 800aa72:	ba5b      	rev16	r3, r3
 800aa74:	8023      	strh	r3, [r4, #0]
  return wm8994_read_reg(ctx, WM8994_SW_RESET, value, 2);
}
 800aa76:	bd38      	pop	{r3, r4, r5, pc}

0800aa78 <wm8994_lo_hpout1l_vol_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_lo_hpout1l_vol_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	460c      	mov	r4, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	211c      	movs	r1, #28
 800aa80:	4622      	mov	r2, r4
 800aa82:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800aa86:	47a8      	blx	r5
  if(ret >= 0)
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	db06      	blt.n	800aa9a <wm8994_lo_hpout1l_vol_r+0x22>
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aa8c:	8823      	ldrh	r3, [r4, #0]
 800aa8e:	ba5b      	rev16	r3, r3
 800aa90:	b29a      	uxth	r2, r3
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_LEFT_OUTPUT_VOL, value, 2);

  if(ret == 0)
 800aa92:	d103      	bne.n	800aa9c <wm8994_lo_hpout1l_vol_r+0x24>
  {  
  *value &= WM8994_LO_HPOUT1L_VOL_MASK;
 800aa94:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800aa98:	8022      	strh	r2, [r4, #0]
  *value = *value >> WM8994_LO_HPOUT1L_VOL_POSITION;
  }
  
  return ret;
}
 800aa9a:	bd38      	pop	{r3, r4, r5, pc}
    *data = tmp;
 800aa9c:	8023      	strh	r3, [r4, #0]
}
 800aa9e:	bd38      	pop	{r3, r4, r5, pc}

0800aaa0 <wm8994_aif1_sr_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_sr_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	460c      	mov	r4, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	f44f 7104 	mov.w	r1, #528	; 0x210
 800aaaa:	4622      	mov	r2, r4
 800aaac:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800aab0:	47a8      	blx	r5
  if(ret >= 0)
 800aab2:	2800      	cmp	r0, #0
 800aab4:	db06      	blt.n	800aac4 <wm8994_aif1_sr_r+0x24>
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aab6:	8823      	ldrh	r3, [r4, #0]
 800aab8:	ba5b      	rev16	r3, r3
 800aaba:	b29a      	uxth	r2, r3
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_RATE, value, 2);

  if(ret == 0)
 800aabc:	d103      	bne.n	800aac6 <wm8994_aif1_sr_r+0x26>
  {  
  *value &= WM8994_AIF1_SR_MASK;
  *value = *value >> WM8994_AIF1_SR_POSITION;
 800aabe:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800aac2:	8022      	strh	r2, [r4, #0]
  }
  
  return ret;
}
 800aac4:	bd38      	pop	{r3, r4, r5, pc}
    *data = tmp;
 800aac6:	8023      	strh	r3, [r4, #0]
}
 800aac8:	bd38      	pop	{r3, r4, r5, pc}
 800aaca:	bf00      	nop

0800aacc <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 800aacc:	b570      	push	{r4, r5, r6, lr}
  int32_t ret;
  uint16_t tmp = 0;
 800aace:	2500      	movs	r5, #0
{
 800aad0:	b082      	sub	sp, #8
 800aad2:	4604      	mov	r4, r0
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800aad4:	2302      	movs	r3, #2
  uint16_t tmp = 0;
 800aad6:	f8ad 5004 	strh.w	r5, [sp, #4]
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800aada:	aa01      	add	r2, sp, #4
{
 800aadc:	460d      	mov	r5, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800aade:	6880      	ldr	r0, [r0, #8]
 800aae0:	f44f 7140 	mov.w	r1, #768	; 0x300
 800aae4:	6866      	ldr	r6, [r4, #4]
 800aae6:	47b0      	blx	r6
  if(ret >= 0)
 800aae8:	2800      	cmp	r0, #0
 800aaea:	db16      	blt.n	800ab1a <wm8994_aif1_control1_fmt+0x4e>
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aaec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800aaf0:	ba5b      	rev16	r3, r3
 800aaf2:	b29b      	uxth	r3, r3
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);

  if(ret == 0)
 800aaf4:	d111      	bne.n	800ab1a <wm8994_aif1_control1_fmt+0x4e>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 800aaf6:	f023 0218 	bic.w	r2, r3, #24
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aafa:	6826      	ldr	r6, [r4, #0]
 800aafc:	2302      	movs	r3, #2
 800aafe:	68a0      	ldr	r0, [r4, #8]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 800ab00:	ea42 01c5 	orr.w	r1, r2, r5, lsl #3
 800ab04:	b289      	uxth	r1, r1
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800ab06:	ba4a      	rev16	r2, r1
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 800ab08:	f8ad 1004 	strh.w	r1, [sp, #4]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800ab0c:	f44f 7140 	mov.w	r1, #768	; 0x300
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800ab10:	f8ad 2006 	strh.w	r2, [sp, #6]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800ab14:	f10d 0206 	add.w	r2, sp, #6
 800ab18:	47b0      	blx	r6
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
  }
  
  return ret;
}
 800ab1a:	b002      	add	sp, #8
 800ab1c:	bd70      	pop	{r4, r5, r6, pc}
 800ab1e:	bf00      	nop

0800ab20 <wm8994_aif1_control1_fmt_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	460c      	mov	r4, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800ab24:	2302      	movs	r3, #2
 800ab26:	f44f 7140 	mov.w	r1, #768	; 0x300
 800ab2a:	4622      	mov	r2, r4
 800ab2c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800ab30:	47a8      	blx	r5
  if(ret >= 0)
 800ab32:	2800      	cmp	r0, #0
 800ab34:	db06      	blt.n	800ab44 <wm8994_aif1_control1_fmt_r+0x24>
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800ab36:	8823      	ldrh	r3, [r4, #0]
 800ab38:	ba5b      	rev16	r3, r3
 800ab3a:	b29a      	uxth	r2, r3
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);

  if(ret == 0)
 800ab3c:	d103      	bne.n	800ab46 <wm8994_aif1_control1_fmt_r+0x26>
  {  
  *value &= WM8994_AIF1_CONTROL1_FMT_MASK;
  *value = *value >> WM8994_AIF1_CONTROL1_FMT_POSITION;
 800ab3e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800ab42:	8022      	strh	r2, [r4, #0]
  }
  
  return ret;
}
 800ab44:	bd38      	pop	{r3, r4, r5, pc}
    *data = tmp;
 800ab46:	8023      	strh	r3, [r4, #0]
}
 800ab48:	bd38      	pop	{r3, r4, r5, pc}
 800ab4a:	bf00      	nop

0800ab4c <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 800ab4c:	b570      	push	{r4, r5, r6, lr}
  int32_t ret;
  uint16_t tmp = 0;
 800ab4e:	2500      	movs	r5, #0
{
 800ab50:	b082      	sub	sp, #8
 800ab52:	4604      	mov	r4, r0
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800ab54:	2302      	movs	r3, #2
  uint16_t tmp = 0;
 800ab56:	f8ad 5004 	strh.w	r5, [sp, #4]
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800ab5a:	aa01      	add	r2, sp, #4
{
 800ab5c:	460d      	mov	r5, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800ab5e:	6880      	ldr	r0, [r0, #8]
 800ab60:	f44f 7140 	mov.w	r1, #768	; 0x300
 800ab64:	6866      	ldr	r6, [r4, #4]
 800ab66:	47b0      	blx	r6
  if(ret >= 0)
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	db16      	blt.n	800ab9a <wm8994_aif1_control1_wl+0x4e>
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800ab6c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ab70:	ba5b      	rev16	r3, r3
 800ab72:	b29b      	uxth	r3, r3
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);

  if(ret == 0)
 800ab74:	d111      	bne.n	800ab9a <wm8994_aif1_control1_wl+0x4e>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 800ab76:	f023 0260 	bic.w	r2, r3, #96	; 0x60
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800ab7a:	6826      	ldr	r6, [r4, #0]
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	68a0      	ldr	r0, [r4, #8]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 800ab80:	ea42 1145 	orr.w	r1, r2, r5, lsl #5
 800ab84:	b289      	uxth	r1, r1
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800ab86:	ba4a      	rev16	r2, r1
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 800ab88:	f8ad 1004 	strh.w	r1, [sp, #4]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800ab8c:	f44f 7140 	mov.w	r1, #768	; 0x300
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800ab90:	f8ad 2006 	strh.w	r2, [sp, #6]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800ab94:	f10d 0206 	add.w	r2, sp, #6
 800ab98:	47b0      	blx	r6
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
  }
  
  return ret;
}
 800ab9a:	b002      	add	sp, #8
 800ab9c:	bd70      	pop	{r4, r5, r6, pc}
 800ab9e:	bf00      	nop

0800aba0 <wm8994_aif1_control1_wl_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	460c      	mov	r4, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800aba4:	2302      	movs	r3, #2
 800aba6:	f44f 7140 	mov.w	r1, #768	; 0x300
 800abaa:	4622      	mov	r2, r4
 800abac:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800abb0:	47a8      	blx	r5
  if(ret >= 0)
 800abb2:	2800      	cmp	r0, #0
 800abb4:	db06      	blt.n	800abc4 <wm8994_aif1_control1_wl_r+0x24>
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800abb6:	8823      	ldrh	r3, [r4, #0]
 800abb8:	ba5b      	rev16	r3, r3
 800abba:	b29a      	uxth	r2, r3
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);

  if(ret == 0)
 800abbc:	d103      	bne.n	800abc6 <wm8994_aif1_control1_wl_r+0x26>
  {  
  *value &= WM8994_AIF1_CONTROL1_WL_MASK;
  *value = *value >> WM8994_AIF1_CONTROL1_WL_POSITION;
 800abbe:	f3c2 1241 	ubfx	r2, r2, #5, #2
 800abc2:	8022      	strh	r2, [r4, #0]
  }
  
  return ret;
}
 800abc4:	bd38      	pop	{r3, r4, r5, pc}
    *data = tmp;
 800abc6:	8023      	strh	r3, [r4, #0]
}
 800abc8:	bd38      	pop	{r3, r4, r5, pc}
 800abca:	bf00      	nop

0800abcc <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 800abcc:	b570      	push	{r4, r5, r6, lr}
  int32_t ret;
  uint16_t tmp = 0;
 800abce:	2500      	movs	r5, #0
{
 800abd0:	b082      	sub	sp, #8
 800abd2:	4604      	mov	r4, r0
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800abd4:	2302      	movs	r3, #2
  uint16_t tmp = 0;
 800abd6:	f8ad 5004 	strh.w	r5, [sp, #4]
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800abda:	aa01      	add	r2, sp, #4
{
 800abdc:	460d      	mov	r5, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800abde:	6880      	ldr	r0, [r0, #8]
 800abe0:	f44f 7140 	mov.w	r1, #768	; 0x300
 800abe4:	6866      	ldr	r6, [r4, #4]
 800abe6:	47b0      	blx	r6
  if(ret >= 0)
 800abe8:	2800      	cmp	r0, #0
 800abea:	db16      	blt.n	800ac1a <wm8994_aif1_control1_adcr_src+0x4e>
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800abec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800abf0:	ba5b      	rev16	r3, r3
 800abf2:	b29b      	uxth	r3, r3
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);

  if(ret == 0)
 800abf4:	d111      	bne.n	800ac1a <wm8994_aif1_control1_adcr_src+0x4e>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 800abf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800abfa:	6826      	ldr	r6, [r4, #0]
 800abfc:	2302      	movs	r3, #2
 800abfe:	68a0      	ldr	r0, [r4, #8]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 800ac00:	ea42 3185 	orr.w	r1, r2, r5, lsl #14
 800ac04:	b289      	uxth	r1, r1
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800ac06:	ba4a      	rev16	r2, r1
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 800ac08:	f8ad 1004 	strh.w	r1, [sp, #4]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800ac0c:	f44f 7140 	mov.w	r1, #768	; 0x300
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800ac10:	f8ad 2006 	strh.w	r2, [sp, #6]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800ac14:	f10d 0206 	add.w	r2, sp, #6
 800ac18:	47b0      	blx	r6
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
  }
  
  return ret;
}
 800ac1a:	b002      	add	sp, #8
 800ac1c:	bd70      	pop	{r4, r5, r6, pc}
 800ac1e:	bf00      	nop

0800ac20 <wm8994_aif1_adc1_left_vol_adc1l_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_adc1_left_vol_adc1l_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	460c      	mov	r4, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800ac24:	2302      	movs	r3, #2
 800ac26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ac2a:	4622      	mov	r2, r4
 800ac2c:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
 800ac30:	47a8      	blx	r5
  if(ret >= 0)
 800ac32:	2800      	cmp	r0, #0
 800ac34:	db05      	blt.n	800ac42 <wm8994_aif1_adc1_left_vol_adc1l_r+0x22>
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800ac36:	8823      	ldrh	r3, [r4, #0]
 800ac38:	ba5b      	rev16	r3, r3
 800ac3a:	b29a      	uxth	r2, r3
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_ADC1_LEFT_VOL, value, 2);
  
  if(ret == 0)
 800ac3c:	d102      	bne.n	800ac44 <wm8994_aif1_adc1_left_vol_adc1l_r+0x24>
  {  
  *value &= WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_MASK;
 800ac3e:	b2d2      	uxtb	r2, r2
 800ac40:	8022      	strh	r2, [r4, #0]
  *value = *value >> WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_POSITION;
  }
  
  return ret;
}
 800ac42:	bd38      	pop	{r3, r4, r5, pc}
    *data = tmp;
 800ac44:	8023      	strh	r3, [r4, #0]
}
 800ac46:	bd38      	pop	{r3, r4, r5, pc}

0800ac48 <BSP_LED_Init>:
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 800ac48:	4b13      	ldr	r3, [pc, #76]	; (800ac98 <BSP_LED_Init+0x50>)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800ac4a:	4914      	ldr	r1, [pc, #80]	; (800ac9c <BSP_LED_Init+0x54>)
  LEDx_GPIO_CLK_ENABLE();
 800ac4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ac50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
{
 800ac54:	b530      	push	{r4, r5, lr}
  LEDx_GPIO_CLK_ENABLE();
 800ac56:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800ac5a:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE();
 800ac5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac60:	2401      	movs	r4, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800ac62:	4a0f      	ldr	r2, [pc, #60]	; (800aca0 <BSP_LED_Init+0x58>)
  LEDx_GPIO_CLK_ENABLE();
 800ac64:	f403 7380 	and.w	r3, r3, #256	; 0x100
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800ac68:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800ac6c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  LEDx_GPIO_CLK_ENABLE();
 800ac70:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac72:	2303      	movs	r3, #3
  LEDx_GPIO_CLK_ENABLE();
 800ac74:	9902      	ldr	r1, [sp, #8]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800ac76:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac78:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800ac7a:	9001      	str	r0, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ac7c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac7e:	e9cd 5403 	strd	r5, r4, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800ac82:	f005 fb95 	bl	80103b0 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800ac86:	9801      	ldr	r0, [sp, #4]
 800ac88:	4622      	mov	r2, r4
 800ac8a:	b2a9      	uxth	r1, r5
 800ac8c:	f005 fda4 	bl	80107d8 <HAL_GPIO_WritePin>
 return ret;
}
 800ac90:	2000      	movs	r0, #0
 800ac92:	b009      	add	sp, #36	; 0x24
 800ac94:	bd30      	pop	{r4, r5, pc}
 800ac96:	bf00      	nop
 800ac98:	58024400 	.word	0x58024400
 800ac9c:	080bfe30 	.word	0x080bfe30
 800aca0:	080bfe40 	.word	0x080bfe40

0800aca4 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 800aca4:	4603      	mov	r3, r0
  int32_t ret = BSP_ERROR_NONE;

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800aca6:	4906      	ldr	r1, [pc, #24]	; (800acc0 <BSP_LED_On+0x1c>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
{
 800acae:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800acb0:	4c04      	ldr	r4, [pc, #16]	; (800acc4 <BSP_LED_On+0x20>)
 800acb2:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800acb6:	f005 fd8f 	bl	80107d8 <HAL_GPIO_WritePin>
  return ret;
}
 800acba:	2000      	movs	r0, #0
 800acbc:	bd10      	pop	{r4, pc}
 800acbe:	bf00      	nop
 800acc0:	080bfe30 	.word	0x080bfe30
 800acc4:	080bfe40 	.word	0x080bfe40

0800acc8 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Off(Led_TypeDef Led)
{
 800acc8:	4603      	mov	r3, r0
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 800acca:	4906      	ldr	r1, [pc, #24]	; (800ace4 <BSP_LED_Off+0x1c>)
 800accc:	2201      	movs	r2, #1
 800acce:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
{
 800acd2:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 800acd4:	4c04      	ldr	r4, [pc, #16]	; (800ace8 <BSP_LED_Off+0x20>)
 800acd6:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 800acda:	f005 fd7d 	bl	80107d8 <HAL_GPIO_WritePin>
  return ret;
}
 800acde:	2000      	movs	r0, #0
 800ace0:	bd10      	pop	{r4, pc}
 800ace2:	bf00      	nop
 800ace4:	080bfe30 	.word	0x080bfe30
 800ace8:	080bfe40 	.word	0x080bfe40

0800acec <BSP_LED_Toggle>:
  * @retval BSP status
  */
int32_t  BSP_LED_Toggle(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 800acec:	4a05      	ldr	r2, [pc, #20]	; (800ad04 <BSP_LED_Toggle+0x18>)
 800acee:	4906      	ldr	r1, [pc, #24]	; (800ad08 <BSP_LED_Toggle+0x1c>)
{
 800acf0:	b508      	push	{r3, lr}
 800acf2:	4603      	mov	r3, r0
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 800acf4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800acf8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800acfc:	f005 fd70 	bl	80107e0 <HAL_GPIO_TogglePin>
  return ret;
}
 800ad00:	2000      	movs	r0, #0
 800ad02:	bd08      	pop	{r3, pc}
 800ad04:	080bfe30 	.word	0x080bfe30
 800ad08:	080bfe40 	.word	0x080bfe40
 800ad0c:	00000000 	.word	0x00000000

0800ad10 <BSP_PB_Init>:
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_WAKEUP_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_WAKEUP_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_WAKEUP_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800ad10:	4b21      	ldr	r3, [pc, #132]	; (800ad98 <BSP_PB_Init+0x88>)
 800ad12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ad16:	f042 0204 	orr.w	r2, r2, #4
{
 800ad1a:	b530      	push	{r4, r5, lr}
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800ad1c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800ad20:	b089      	sub	sp, #36	; 0x24
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800ad22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800ad26:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800ad2a:	f002 0204 	and.w	r2, r2, #4
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800ad2e:	9502      	str	r5, [sp, #8]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800ad30:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800ad90 <BSP_PB_Init+0x80>
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800ad34:	9201      	str	r2, [sp, #4]
 800ad36:	9a01      	ldr	r2, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800ad38:	ed8d 7b04 	vstr	d7, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;

  if(ButtonMode == BUTTON_MODE_GPIO)
 800ad3c:	b941      	cbnz	r1, 800ad50 <BSP_PB_Init+0x40>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800ad3e:	460b      	mov	r3, r1
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800ad40:	4816      	ldr	r0, [pc, #88]	; (800ad9c <BSP_PB_Init+0x8c>)
 800ad42:	a902      	add	r1, sp, #8
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800ad44:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800ad46:	f005 fb33 	bl	80103b0 <HAL_GPIO_Init>
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }
  return BSP_ERROR_NONE;
}
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	b009      	add	sp, #36	; 0x24
 800ad4e:	bd30      	pop	{r4, r5, pc}
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800ad50:	4b13      	ldr	r3, [pc, #76]	; (800ada0 <BSP_PB_Init+0x90>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800ad52:	a902      	add	r1, sp, #8
 800ad54:	4604      	mov	r4, r0
 800ad56:	4811      	ldr	r0, [pc, #68]	; (800ad9c <BSP_PB_Init+0x8c>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800ad58:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800ad5a:	f005 fb29 	bl	80103b0 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800ad5e:	4811      	ldr	r0, [pc, #68]	; (800ada4 <BSP_PB_Init+0x94>)
 800ad60:	4911      	ldr	r1, [pc, #68]	; (800ada8 <BSP_PB_Init+0x98>)
 800ad62:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800ad66:	4620      	mov	r0, r4
 800ad68:	f005 fb1a 	bl	80103a0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800ad6c:	4a0f      	ldr	r2, [pc, #60]	; (800adac <BSP_PB_Init+0x9c>)
 800ad6e:	2100      	movs	r1, #0
 800ad70:	4620      	mov	r0, r4
 800ad72:	f005 fb0d 	bl	8010390 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800ad76:	2200      	movs	r2, #0
 800ad78:	210f      	movs	r1, #15
 800ad7a:	2028      	movs	r0, #40	; 0x28
 800ad7c:	f002 fe84 	bl	800da88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800ad80:	2028      	movs	r0, #40	; 0x28
 800ad82:	f002 febf 	bl	800db04 <HAL_NVIC_EnableIRQ>
}
 800ad86:	2000      	movs	r0, #0
 800ad88:	b009      	add	sp, #36	; 0x24
 800ad8a:	bd30      	pop	{r4, r5, pc}
 800ad8c:	f3af 8000 	nop.w
 800ad90:	00000000 	.word	0x00000000
 800ad94:	00000002 	.word	0x00000002
 800ad98:	58024400 	.word	0x58024400
 800ad9c:	58020800 	.word	0x58020800
 800ada0:	11110000 	.word	0x11110000
 800ada4:	24009054 	.word	0x24009054
 800ada8:	1670000d 	.word	0x1670000d
 800adac:	0800adc9 	.word	0x0800adc9

0800adb0 <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  * @retval The Button GPIO pin value
  */
int32_t  BSP_PB_GetState(Button_TypeDef Button)
{
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800adb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800adb4:	4802      	ldr	r0, [pc, #8]	; (800adc0 <BSP_PB_GetState+0x10>)
{
 800adb6:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800adb8:	f005 fd08 	bl	80107cc <HAL_GPIO_ReadPin>
}
 800adbc:	bd08      	pop	{r3, pc}
 800adbe:	bf00      	nop
 800adc0:	58020800 	.word	0x58020800

0800adc4 <BSP_PB_Callback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop

0800adc8 <BUTTON_WAKEUP_EXTI_Callback>:
  BSP_PB_Callback(BUTTON_WAKEUP);
 800adc8:	2000      	movs	r0, #0
{
 800adca:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_WAKEUP);
 800adcc:	f7ff fffa 	bl	800adc4 <BSP_PB_Callback>
}
 800add0:	bd08      	pop	{r3, pc}
 800add2:	bf00      	nop
 800add4:	0000      	movs	r0, r0
	...

0800add8 <BSP_JOY_Init>:
  *                                 with interrupt generation capability
  * @param  JoyPins joystick pins to be initialized
  * @retval BSP status
  */
int32_t BSP_JOY_Init(JOY_TypeDef JOY, JOYMode_TypeDef JoyMode, JOYPin_TypeDef JoyPins)
{
 800add8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                                                   BSP_JOY1_RIGHT_IT_PRIORITY,
                                                   BSP_JOY1_UP_IT_PRIORITY
                                                  };

  /* Store Joystick pins initialized */
  JoyPinsMask |= (uint32_t)JoyPins;
 800addc:	4c3e      	ldr	r4, [pc, #248]	; (800aed8 <BSP_JOY_Init+0x100>)
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
  {
    key_pressed = 1UL << joykey;
    if((key_pressed & (uint32_t)JoyPins) == key_pressed)
    {
      if(JOY == JOY1)
 800adde:	fab0 f780 	clz	r7, r0
{
 800ade2:	4616      	mov	r6, r2
 800ade4:	4688      	mov	r8, r1
  JoyPinsMask |= (uint32_t)JoyPins;
 800ade6:	6823      	ldr	r3, [r4, #0]
      if(JOY == JOY1)
 800ade8:	097f      	lsrs	r7, r7, #5
 800adea:	4d3c      	ldr	r5, [pc, #240]	; (800aedc <BSP_JOY_Init+0x104>)
  JoyPinsMask |= (uint32_t)JoyPins;
 800adec:	4313      	orrs	r3, r2
          {
            JOY1_UP_GPIO_CLK_ENABLE();
          }
        }

        gpio_init_structure.Pin = JOY1_PIN[joykey];
 800adee:	f8df a108 	ldr.w	sl, [pc, #264]	; 800aef8 <BSP_JOY_Init+0x120>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
        }
        else /*(JoyMode == JOY_MODE_EXTI)*/
        {
          /* Configure Joy pin as input with External interrupt */
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 800adf2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800aefc <BSP_JOY_Init+0x124>
{
 800adf6:	ed2d 8b02 	vpush	{d8}
        gpio_init_structure.Pull = GPIO_PULLUP;
 800adfa:	ed9f 8b35 	vldr	d8, [pc, #212]	; 800aed0 <BSP_JOY_Init+0xf8>
  JoyPinsMask |= (uint32_t)JoyPins;
 800adfe:	6023      	str	r3, [r4, #0]
{
 800ae00:	b08f      	sub	sp, #60	; 0x3c
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 800ae02:	2400      	movs	r4, #0
    key_pressed = 1UL << joykey;
 800ae04:	2301      	movs	r3, #1
 800ae06:	40a3      	lsls	r3, r4
      if(JOY == JOY1)
 800ae08:	43b3      	bics	r3, r6
 800ae0a:	d100      	bne.n	800ae0e <BSP_JOY_Init+0x36>
 800ae0c:	b94f      	cbnz	r7, 800ae22 <BSP_JOY_Init+0x4a>
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 800ae0e:	3401      	adds	r4, #1
 800ae10:	3504      	adds	r5, #4
 800ae12:	2c05      	cmp	r4, #5
 800ae14:	d1f6      	bne.n	800ae04 <BSP_JOY_Init+0x2c>
      }
    }
  }

  return ret;
}
 800ae16:	2000      	movs	r0, #0
 800ae18:	b00f      	add	sp, #60	; 0x3c
 800ae1a:	ecbd 8b02 	vpop	{d8}
 800ae1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          JOY1_SEL_GPIO_CLK_ENABLE();
 800ae22:	4b2f      	ldr	r3, [pc, #188]	; (800aee0 <BSP_JOY_Init+0x108>)
 800ae24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ae28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ae2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800ae30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        if(key_pressed == (uint32_t)JOY_SEL)
 800ae38:	2c00      	cmp	r4, #0
 800ae3a:	d03a      	beq.n	800aeb2 <BSP_JOY_Init+0xda>
        else if(key_pressed == (uint32_t)JOY_DOWN)
 800ae3c:	2c01      	cmp	r4, #1
 800ae3e:	d03b      	beq.n	800aeb8 <BSP_JOY_Init+0xe0>
        else if(key_pressed == (uint32_t) JOY_LEFT)
 800ae40:	2c02      	cmp	r4, #2
 800ae42:	d03c      	beq.n	800aebe <BSP_JOY_Init+0xe6>
        else if(key_pressed == (uint32_t) JOY_RIGHT)
 800ae44:	2c03      	cmp	r4, #3
 800ae46:	d03d      	beq.n	800aec4 <BSP_JOY_Init+0xec>
            JOY1_UP_GPIO_CLK_ENABLE();
 800ae48:	9307      	str	r3, [sp, #28]
 800ae4a:	9b07      	ldr	r3, [sp, #28]
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 800ae4c:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
        gpio_init_structure.Pull = GPIO_PULLUP;
 800ae50:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 800ae54:	9308      	str	r3, [sp, #32]
        if (JoyMode == JOY_MODE_GPIO)
 800ae56:	f1b8 0f00 	cmp.w	r8, #0
 800ae5a:	d106      	bne.n	800ae6a <BSP_JOY_Init+0x92>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 800ae5c:	a908      	add	r1, sp, #32
 800ae5e:	6828      	ldr	r0, [r5, #0]
          gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800ae60:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 800ae64:	f005 faa4 	bl	80103b0 <HAL_GPIO_Init>
 800ae68:	e7d1      	b.n	800ae0e <BSP_JOY_Init+0x36>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 800ae6a:	a908      	add	r1, sp, #32
 800ae6c:	6828      	ldr	r0, [r5, #0]
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 800ae6e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 800ae72:	f005 fa9d 	bl	80103b0 <HAL_GPIO_Init>
         (void)HAL_EXTI_GetHandle(&hjoy_exti[joykey], JOY_EXTI_LINE[joykey]);
 800ae76:	4b1b      	ldr	r3, [pc, #108]	; (800aee4 <BSP_JOY_Init+0x10c>)
 800ae78:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800ae7c:	4b1a      	ldr	r3, [pc, #104]	; (800aee8 <BSP_JOY_Init+0x110>)
 800ae7e:	4658      	mov	r0, fp
 800ae80:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800ae84:	f005 fa8c 	bl	80103a0 <HAL_EXTI_GetHandle>
         (void)HAL_EXTI_RegisterCallback(&hjoy_exti[joykey],  HAL_EXTI_COMMON_CB_ID, JoyCallback[joykey]);
 800ae88:	4b18      	ldr	r3, [pc, #96]	; (800aeec <BSP_JOY_Init+0x114>)
 800ae8a:	4658      	mov	r0, fp
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800ae92:	f005 fa7d 	bl	8010390 <HAL_EXTI_RegisterCallback>
          HAL_NVIC_SetPriority((IRQn_Type)(JOY1_IRQn[joykey]), BSP_JOY_PRIO[joykey], 0x00);
 800ae96:	4b16      	ldr	r3, [pc, #88]	; (800aef0 <BSP_JOY_Init+0x118>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f933 0014 	ldrsh.w	r0, [r3, r4, lsl #1]
 800ae9e:	4b15      	ldr	r3, [pc, #84]	; (800aef4 <BSP_JOY_Init+0x11c>)
 800aea0:	9001      	str	r0, [sp, #4]
 800aea2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800aea6:	f002 fdef 	bl	800da88 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ((IRQn_Type)(JOY1_IRQn[joykey]));
 800aeaa:	9801      	ldr	r0, [sp, #4]
 800aeac:	f002 fe2a 	bl	800db04 <HAL_NVIC_EnableIRQ>
 800aeb0:	e7ad      	b.n	800ae0e <BSP_JOY_Init+0x36>
          JOY1_SEL_GPIO_CLK_ENABLE();
 800aeb2:	9303      	str	r3, [sp, #12]
 800aeb4:	9b03      	ldr	r3, [sp, #12]
 800aeb6:	e7c9      	b.n	800ae4c <BSP_JOY_Init+0x74>
          JOY1_DOWN_GPIO_CLK_ENABLE();
 800aeb8:	9304      	str	r3, [sp, #16]
 800aeba:	9b04      	ldr	r3, [sp, #16]
 800aebc:	e7c6      	b.n	800ae4c <BSP_JOY_Init+0x74>
          JOY1_LEFT_GPIO_CLK_ENABLE();
 800aebe:	9305      	str	r3, [sp, #20]
 800aec0:	9b05      	ldr	r3, [sp, #20]
 800aec2:	e7c3      	b.n	800ae4c <BSP_JOY_Init+0x74>
          JOY1_RIGHT_GPIO_CLK_ENABLE();
 800aec4:	9306      	str	r3, [sp, #24]
 800aec6:	9b06      	ldr	r3, [sp, #24]
 800aec8:	e7c0      	b.n	800ae4c <BSP_JOY_Init+0x74>
 800aeca:	bf00      	nop
 800aecc:	f3af 8000 	nop.w
 800aed0:	00000001 	.word	0x00000001
 800aed4:	00000003 	.word	0x00000003
 800aed8:	24009028 	.word	0x24009028
 800aedc:	080bfdf4 	.word	0x080bfdf4
 800aee0:	58024400 	.word	0x58024400
 800aee4:	2400902c 	.word	0x2400902c
 800aee8:	080bfe08 	.word	0x080bfe08
 800aeec:	080bfe1c 	.word	0x080bfe1c
 800aef0:	080bfddc 	.word	0x080bfddc
 800aef4:	080bfdc8 	.word	0x080bfdc8
 800aef8:	080bfde8 	.word	0x080bfde8
 800aefc:	11310000 	.word	0x11310000

0800af00 <BSP_JOY_GetState>:
*            @arg  JOY_LEFT
*            @arg  JOY_RIGHT
*            @arg  JOY_UP
*/
int32_t BSP_JOY_GetState(JOY_TypeDef JOY,uint32_t JoyPin)
{
 800af00:	b538      	push	{r3, r4, r5, lr}

  uint32_t joykey, key_pressed;
  for (joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
  {
    key_pressed = 1UL << joykey;
    if((key_pressed & JoyPinsMask) == key_pressed)
 800af02:	4d21      	ldr	r5, [pc, #132]	; (800af88 <BSP_JOY_GetState+0x88>)
    {
      if(JOY == JOY1)
 800af04:	fab0 f480 	clz	r4, r0
    if((key_pressed & JoyPinsMask) == key_pressed)
 800af08:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 800af0a:	0964      	lsrs	r4, r4, #5
 800af0c:	07db      	lsls	r3, r3, #31
 800af0e:	d500      	bpl.n	800af12 <BSP_JOY_GetState+0x12>
 800af10:	b98c      	cbnz	r4, 800af36 <BSP_JOY_GetState+0x36>
    if((key_pressed & JoyPinsMask) == key_pressed)
 800af12:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 800af14:	0798      	lsls	r0, r3, #30
 800af16:	d500      	bpl.n	800af1a <BSP_JOY_GetState+0x1a>
 800af18:	b9ac      	cbnz	r4, 800af46 <BSP_JOY_GetState+0x46>
    if((key_pressed & JoyPinsMask) == key_pressed)
 800af1a:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 800af1c:	0759      	lsls	r1, r3, #29
 800af1e:	d500      	bpl.n	800af22 <BSP_JOY_GetState+0x22>
 800af20:	b9cc      	cbnz	r4, 800af56 <BSP_JOY_GetState+0x56>
    if((key_pressed & JoyPinsMask) == key_pressed)
 800af22:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 800af24:	071a      	lsls	r2, r3, #28
 800af26:	d500      	bpl.n	800af2a <BSP_JOY_GetState+0x2a>
 800af28:	b9ec      	cbnz	r4, 800af66 <BSP_JOY_GetState+0x66>
    if((key_pressed & JoyPinsMask) == key_pressed)
 800af2a:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 800af2c:	06db      	lsls	r3, r3, #27
 800af2e:	d500      	bpl.n	800af32 <BSP_JOY_GetState+0x32>
 800af30:	bb0c      	cbnz	r4, 800af76 <BSP_JOY_GetState+0x76>
        }
      }
    }
  }
  /* No Joystick key pressed */
  return (int32_t)JOY_NONE;
 800af32:	2000      	movs	r0, #0

}
 800af34:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800af36:	2104      	movs	r1, #4
 800af38:	4814      	ldr	r0, [pc, #80]	; (800af8c <BSP_JOY_GetState+0x8c>)
 800af3a:	f005 fc47 	bl	80107cc <HAL_GPIO_ReadPin>
 800af3e:	2801      	cmp	r0, #1
 800af40:	d0e7      	beq.n	800af12 <BSP_JOY_GetState+0x12>
    key_pressed = 1UL << joykey;
 800af42:	2001      	movs	r0, #1
}
 800af44:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800af46:	2108      	movs	r1, #8
 800af48:	4810      	ldr	r0, [pc, #64]	; (800af8c <BSP_JOY_GetState+0x8c>)
 800af4a:	f005 fc3f 	bl	80107cc <HAL_GPIO_ReadPin>
 800af4e:	2801      	cmp	r0, #1
 800af50:	d0e3      	beq.n	800af1a <BSP_JOY_GetState+0x1a>
    key_pressed = 1UL << joykey;
 800af52:	2002      	movs	r0, #2
}
 800af54:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800af56:	2110      	movs	r1, #16
 800af58:	480c      	ldr	r0, [pc, #48]	; (800af8c <BSP_JOY_GetState+0x8c>)
 800af5a:	f005 fc37 	bl	80107cc <HAL_GPIO_ReadPin>
 800af5e:	2801      	cmp	r0, #1
 800af60:	d0df      	beq.n	800af22 <BSP_JOY_GetState+0x22>
    key_pressed = 1UL << joykey;
 800af62:	2004      	movs	r0, #4
}
 800af64:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800af66:	2120      	movs	r1, #32
 800af68:	4808      	ldr	r0, [pc, #32]	; (800af8c <BSP_JOY_GetState+0x8c>)
 800af6a:	f005 fc2f 	bl	80107cc <HAL_GPIO_ReadPin>
 800af6e:	2801      	cmp	r0, #1
 800af70:	d0db      	beq.n	800af2a <BSP_JOY_GetState+0x2a>
    key_pressed = 1UL << joykey;
 800af72:	2008      	movs	r0, #8
}
 800af74:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800af76:	2140      	movs	r1, #64	; 0x40
 800af78:	4804      	ldr	r0, [pc, #16]	; (800af8c <BSP_JOY_GetState+0x8c>)
 800af7a:	f005 fc27 	bl	80107cc <HAL_GPIO_ReadPin>
 800af7e:	2801      	cmp	r0, #1
 800af80:	d0d7      	beq.n	800af32 <BSP_JOY_GetState+0x32>
    key_pressed = 1UL << joykey;
 800af82:	2010      	movs	r0, #16
}
 800af84:	bd38      	pop	{r3, r4, r5, pc}
 800af86:	bf00      	nop
 800af88:	24009028 	.word	0x24009028
 800af8c:	58022800 	.word	0x58022800

0800af90 <BSP_JOY_Callback>:
  UNUSED(JOY);
  UNUSED(JoyPin);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on JoyPin is triggered. */
}
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop

0800af94 <JOY1_UP_EXTI_Callback>:
  * @brief  JOY1 UP EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_UP_EXTI_Callback(void)
{
  BSP_JOY_Callback(JOY1, JOY_UP);
 800af94:	2110      	movs	r1, #16
 800af96:	2000      	movs	r0, #0
{
 800af98:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_UP);
 800af9a:	f7ff fff9 	bl	800af90 <BSP_JOY_Callback>
}
 800af9e:	bd08      	pop	{r3, pc}

0800afa0 <JOY1_RIGHT_EXTI_Callback>:
  * @brief  JOY1 RIGHT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_RIGHT_EXTI_Callback(void)
{
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 800afa0:	2108      	movs	r1, #8
 800afa2:	2000      	movs	r0, #0
{
 800afa4:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 800afa6:	f7ff fff3 	bl	800af90 <BSP_JOY_Callback>
}
 800afaa:	bd08      	pop	{r3, pc}

0800afac <JOY1_LEFT_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 800afac:	2104      	movs	r1, #4
 800afae:	2000      	movs	r0, #0
{
 800afb0:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 800afb2:	f7ff ffed 	bl	800af90 <BSP_JOY_Callback>
}
 800afb6:	bd08      	pop	{r3, pc}

0800afb8 <JOY1_DOWN_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 800afb8:	2102      	movs	r1, #2
 800afba:	2000      	movs	r0, #0
{
 800afbc:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 800afbe:	f7ff ffe7 	bl	800af90 <BSP_JOY_Callback>
}
 800afc2:	bd08      	pop	{r3, pc}

0800afc4 <JOY1_SEL_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_SEL);
 800afc4:	2101      	movs	r1, #1
 800afc6:	2000      	movs	r0, #0
{
 800afc8:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_SEL);
 800afca:	f7ff ffe1 	bl	800af90 <BSP_JOY_Callback>
}
 800afce:	bd08      	pop	{r3, pc}

0800afd0 <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 800afd0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;

    /* Enable SAI clock */
    AUDIO_OUT_SAIx_CLK_ENABLE();
 800afd4:	4c7e      	ldr	r4, [pc, #504]	; (800b1d0 <SAI_MspInit+0x200>)
{
 800afd6:	b098      	sub	sp, #96	; 0x60
    /* Enable GPIO clock */
    AUDIO_OUT_SAIx_SCK_ENABLE();
    AUDIO_OUT_SAIx_SD_ENABLE();
    AUDIO_OUT_SAIx_FS_ENABLE();
    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800afd8:	2210      	movs	r2, #16
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 800afda:	2606      	movs	r6, #6
    AUDIO_OUT_SAIx_CLK_ENABLE();
 800afdc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
{
 800afe0:	4605      	mov	r5, r0
    HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800afe2:	a912      	add	r1, sp, #72	; 0x48
 800afe4:	487b      	ldr	r0, [pc, #492]	; (800b1d4 <SAI_MspInit+0x204>)
    AUDIO_OUT_SAIx_CLK_ENABLE();
 800afe6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800afea:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800afee:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800aff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aff6:	9301      	str	r3, [sp, #4]
 800aff8:	9b01      	ldr	r3, [sp, #4]
    AUDIO_OUT_SAIx_SCK_ENABLE();
 800affa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800affe:	f043 0310 	orr.w	r3, r3, #16
 800b002:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b006:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b00a:	f003 0310 	and.w	r3, r3, #16
 800b00e:	9302      	str	r3, [sp, #8]
 800b010:	9b02      	ldr	r3, [sp, #8]
    AUDIO_OUT_SAIx_SD_ENABLE();
 800b012:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b016:	f043 0310 	orr.w	r3, r3, #16
 800b01a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b01e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b022:	f003 0310 	and.w	r3, r3, #16
 800b026:	9303      	str	r3, [sp, #12]
 800b028:	9b03      	ldr	r3, [sp, #12]
    AUDIO_OUT_SAIx_FS_ENABLE();
 800b02a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b02e:	f043 0310 	orr.w	r3, r3, #16
 800b032:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b036:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 800b03a:	9616      	str	r6, [sp, #88]	; 0x58
    AUDIO_OUT_SAIx_FS_ENABLE();
 800b03c:	f003 0310 	and.w	r3, r3, #16
 800b040:	9304      	str	r3, [sp, #16]
 800b042:	9b04      	ldr	r3, [sp, #16]
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800b044:	2302      	movs	r3, #2
 800b046:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b04a:	2200      	movs	r2, #0
 800b04c:	2303      	movs	r3, #3
 800b04e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800b052:	f005 f9ad 	bl	80103b0 <HAL_GPIO_Init>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800b056:	2320      	movs	r3, #32
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 800b058:	a912      	add	r1, sp, #72	; 0x48
 800b05a:	485e      	ldr	r0, [pc, #376]	; (800b1d4 <SAI_MspInit+0x204>)
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800b05c:	9312      	str	r3, [sp, #72]	; 0x48
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 800b05e:	9616      	str	r6, [sp, #88]	; 0x58
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 800b060:	f005 f9a6 	bl	80103b0 <HAL_GPIO_Init>

    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 800b064:	2340      	movs	r3, #64	; 0x40
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800b066:	a912      	add	r1, sp, #72	; 0x48
 800b068:	485a      	ldr	r0, [pc, #360]	; (800b1d4 <SAI_MspInit+0x204>)
    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 800b06a:	9312      	str	r3, [sp, #72]	; 0x48
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 800b06c:	9616      	str	r6, [sp, #88]	; 0x58
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800b06e:	f005 f99f 	bl	80103b0 <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 800b072:	682b      	ldr	r3, [r5, #0]
 800b074:	4a58      	ldr	r2, [pc, #352]	; (800b1d8 <SAI_MspInit+0x208>)
 800b076:	4293      	cmp	r3, r2
 800b078:	f000 80be 	beq.w	800b1f8 <SAI_MspInit+0x228>
    {
      if(haudio_in_sai.State != HAL_SAI_STATE_READY)
 800b07c:	4a57      	ldr	r2, [pc, #348]	; (800b1dc <SAI_MspInit+0x20c>)
 800b07e:	f892 2091 	ldrb.w	r2, [r2, #145]	; 0x91
 800b082:	2a01      	cmp	r2, #1
 800b084:	d10d      	bne.n	800b0a2 <SAI_MspInit+0xd2>
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 800b086:	4a56      	ldr	r2, [pc, #344]	; (800b1e0 <SAI_MspInit+0x210>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d021      	beq.n	800b0d0 <SAI_MspInit+0x100>
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 800b08c:	4a52      	ldr	r2, [pc, #328]	; (800b1d8 <SAI_MspInit+0x208>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	f000 80b2 	beq.w	800b1f8 <SAI_MspInit+0x228>
    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
  }
   /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 800b094:	4a53      	ldr	r2, [pc, #332]	; (800b1e4 <SAI_MspInit+0x214>)
 800b096:	4293      	cmp	r3, r2
 800b098:	f000 8144 	beq.w	800b324 <SAI_MspInit+0x354>
    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);

  }
}
 800b09c:	b018      	add	sp, #96	; 0x60
 800b09e:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 800b0a2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800b0a6:	a912      	add	r1, sp, #72	; 0x48
 800b0a8:	484f      	ldr	r0, [pc, #316]	; (800b1e8 <SAI_MspInit+0x218>)
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 800b0aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ae:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b0b2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 800b0b6:	9616      	str	r6, [sp, #88]	; 0x58
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 800b0b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0bc:	9305      	str	r3, [sp, #20]
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800b0be:	2380      	movs	r3, #128	; 0x80
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 800b0c0:	9a05      	ldr	r2, [sp, #20]
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800b0c2:	9312      	str	r3, [sp, #72]	; 0x48
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800b0c4:	f005 f974 	bl	80103b0 <HAL_GPIO_Init>
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	4a45      	ldr	r2, [pc, #276]	; (800b1e0 <SAI_MspInit+0x210>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d1dd      	bne.n	800b08c <SAI_MspInit+0xbc>
    __HAL_RCC_SAI1_CLK_ENABLE();
 800b0d0:	4c3f      	ldr	r4, [pc, #252]	; (800b1d0 <SAI_MspInit+0x200>)
  gpio_init_structure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 800b0d2:	2270      	movs	r2, #112	; 0x70
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800b0d4:	483f      	ldr	r0, [pc, #252]	; (800b1d4 <SAI_MspInit+0x204>)
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800b0d6:	2600      	movs	r6, #0
    __HAL_RCC_SAI1_CLK_ENABLE();
 800b0d8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800b0dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b0e0:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800b0e4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800b0e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0ec:	9306      	str	r3, [sp, #24]
 800b0ee:	9b06      	ldr	r3, [sp, #24]
 __HAL_RCC_GPIOE_CLK_ENABLE();
 800b0f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b0f4:	f043 0310 	orr.w	r3, r3, #16
 800b0f8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b0fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b100:	f003 0310 	and.w	r3, r3, #16
 800b104:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 800b106:	2302      	movs	r3, #2
 __HAL_RCC_GPIOE_CLK_ENABLE();
 800b108:	9907      	ldr	r1, [sp, #28]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800b10a:	a912      	add	r1, sp, #72	; 0x48
  gpio_init_structure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 800b10c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b110:	2200      	movs	r2, #0
 800b112:	2303      	movs	r3, #3
 800b114:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  gpio_init_structure.Alternate = GPIO_AF6_SAI1;
 800b118:	2306      	movs	r3, #6
 800b11a:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800b11c:	f005 f948 	bl	80103b0 <HAL_GPIO_Init>
   __HAL_RCC_GPIOG_CLK_ENABLE();
 800b120:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin = GPIO_PIN_7;
 800b124:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800b126:	a912      	add	r1, sp, #72	; 0x48
 800b128:	482f      	ldr	r0, [pc, #188]	; (800b1e8 <SAI_MspInit+0x218>)
   __HAL_RCC_GPIOG_CLK_ENABLE();
 800b12a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b12e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b132:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin = GPIO_PIN_7;
 800b136:	9212      	str	r2, [sp, #72]	; 0x48
   __HAL_RCC_GPIOG_CLK_ENABLE();
 800b138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b13c:	9308      	str	r3, [sp, #32]
 800b13e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800b140:	f005 f936 	bl	80103b0 <HAL_GPIO_Init>
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800b144:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800b148:	f44f 7c80 	mov.w	ip, #256	; 0x100
    if(Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 800b14c:	4a27      	ldr	r2, [pc, #156]	; (800b1ec <SAI_MspInit+0x21c>)
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800b14e:	f04f 0e04 	mov.w	lr, #4
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800b152:	f043 0302 	orr.w	r3, r3, #2
    if(Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 800b156:	68d2      	ldr	r2, [r2, #12]
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800b158:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800b15c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800b160:	2a10      	cmp	r2, #16
 800b162:	4c23      	ldr	r4, [pc, #140]	; (800b1f0 <SAI_MspInit+0x220>)
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800b164:	f003 0302 	and.w	r3, r3, #2
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800b168:	bf0a      	itet	eq
 800b16a:	f44f 5100 	moveq.w	r1, #8192	; 0x2000
 800b16e:	f44f 4180 	movne.w	r1, #16384	; 0x4000
 800b172:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800b176:	9309      	str	r3, [sp, #36]	; 0x24
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800b178:	bf18      	it	ne
 800b17a:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800b17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 800b180:	2357      	movs	r3, #87	; 0x57
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 800b182:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800b184:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 800b188:	6063      	str	r3, [r4, #4]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800b18a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b18e:	61a1      	str	r1, [r4, #24]
 800b190:	6123      	str	r3, [r4, #16]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800b192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b196:	6162      	str	r2, [r4, #20]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800b198:	60e6      	str	r6, [r4, #12]
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800b19a:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800b19c:	e9c4 c307 	strd	ip, r3, [r4, #28]
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	e9c4 e309 	strd	lr, r3, [r4, #36]	; 0x24
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800b1a6:	2340      	movs	r3, #64	; 0x40
 800b1a8:	60a3      	str	r3, [r4, #8]
    hdma_sai_tx.Instance                 = AUDIO_OUT_SAIx_DMAx_STREAM;
 800b1aa:	4b12      	ldr	r3, [pc, #72]	; (800b1f4 <SAI_MspInit+0x224>)
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800b1ac:	e9c4 660b 	strd	r6, r6, [r4, #44]	; 0x2c
    hdma_sai_tx.Instance                 = AUDIO_OUT_SAIx_DMAx_STREAM;
 800b1b0:	6023      	str	r3, [r4, #0]
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 800b1b2:	f003 fa2f 	bl	800e614 <HAL_DMA_DeInit>
    (void)HAL_DMA_Init(&hdma_sai_tx);
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f002 ffbe 	bl	800e138 <HAL_DMA_Init>
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 800b1bc:	4632      	mov	r2, r6
 800b1be:	210e      	movs	r1, #14
 800b1c0:	2039      	movs	r0, #57	; 0x39
 800b1c2:	f002 fc61 	bl	800da88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 800b1c6:	2039      	movs	r0, #57	; 0x39
 800b1c8:	f002 fc9c 	bl	800db04 <HAL_NVIC_EnableIRQ>
  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 800b1cc:	682b      	ldr	r3, [r5, #0]
 800b1ce:	e75d      	b.n	800b08c <SAI_MspInit+0xbc>
 800b1d0:	58024400 	.word	0x58024400
 800b1d4:	58021000 	.word	0x58021000
 800b1d8:	58005404 	.word	0x58005404
 800b1dc:	240090d4 	.word	0x240090d4
 800b1e0:	40015804 	.word	0x40015804
 800b1e4:	40015824 	.word	0x40015824
 800b1e8:	58021800 	.word	0x58021800
 800b1ec:	24009064 	.word	0x24009064
 800b1f0:	2400927c 	.word	0x2400927c
 800b1f4:	40020428 	.word	0x40020428
     AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 800b1f8:	4e7c      	ldr	r6, [pc, #496]	; (800b3ec <SAI_MspInit+0x41c>)
     gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 800b1fa:	2204      	movs	r2, #4
 800b1fc:	f04f 0a00 	mov.w	sl, #0
 800b200:	f04f 0b02 	mov.w	fp, #2
     AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 800b204:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800b208:	2700      	movs	r7, #0
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 800b20a:	4879      	ldr	r0, [pc, #484]	; (800b3f0 <SAI_MspInit+0x420>)
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 800b20c:	f04f 080f 	mov.w	r8, #15
     AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 800b210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 800b214:	4c77      	ldr	r4, [pc, #476]	; (800b3f4 <SAI_MspInit+0x424>)
     AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 800b216:	f8c6 30f4 	str.w	r3, [r6, #244]	; 0xf4
 800b21a:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
 800b21e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b222:	930a      	str	r3, [sp, #40]	; 0x28
 800b224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 800b226:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800b22a:	f043 0310 	orr.w	r3, r3, #16
 800b22e:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800b232:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800b236:	f003 0310 	and.w	r3, r3, #16
 800b23a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b23c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 800b23e:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800b242:	f043 0304 	orr.w	r3, r3, #4
 800b246:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800b24a:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800b24e:	f003 0304 	and.w	r3, r3, #4
 800b252:	930c      	str	r3, [sp, #48]	; 0x30
     gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 800b254:	2302      	movs	r3, #2
     AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 800b256:	990c      	ldr	r1, [sp, #48]	; 0x30
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 800b258:	a912      	add	r1, sp, #72	; 0x48
     gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 800b25a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    gpio_init_structure.Alternate = GPIO_AF10_SAI4;
 800b25e:	230a      	movs	r3, #10
     gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 800b260:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
    gpio_init_structure.Alternate = GPIO_AF10_SAI4;
 800b264:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 800b266:	f005 f8a3 	bl	80103b0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 800b26a:	2302      	movs	r3, #2
    gpio_init_structure.Pull = GPIO_PULLUP;
 800b26c:	2201      	movs	r2, #1
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 800b26e:	a912      	add	r1, sp, #72	; 0x48
 800b270:	4861      	ldr	r0, [pc, #388]	; (800b3f8 <SAI_MspInit+0x428>)
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 800b272:	9312      	str	r3, [sp, #72]	; 0x48
    gpio_init_structure.Pull = GPIO_PULLUP;
 800b274:	2301      	movs	r3, #1
 800b276:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 800b27a:	f005 f899 	bl	80103b0 <HAL_GPIO_Init>
    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 800b27e:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 800b282:	2230      	movs	r2, #48	; 0x30
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 800b284:	a912      	add	r1, sp, #72	; 0x48
    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 800b286:	f043 0310 	orr.w	r3, r3, #16
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 800b28a:	4859      	ldr	r0, [pc, #356]	; (800b3f0 <SAI_MspInit+0x420>)
    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 800b28c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800b290:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800b294:	f003 0310 	and.w	r3, r3, #16
 800b298:	930d      	str	r3, [sp, #52]	; 0x34
 800b29a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 800b29c:	2308      	movs	r3, #8
 800b29e:	9316      	str	r3, [sp, #88]	; 0x58
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 800b2a6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 800b2aa:	f005 f881 	bl	80103b0 <HAL_GPIO_Init>
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800b2ae:	60e7      	str	r7, [r4, #12]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800b2b0:	6267      	str	r7, [r4, #36]	; 0x24
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 800b2b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800b2b6:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800b2b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    HAL_DMA_DeInit(&hdma_sai_rx);
 800b2bc:	4620      	mov	r0, r4
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800b2be:	e9c4 8701 	strd	r8, r7, [r4, #4]
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800b2c2:	e9c4 770b 	strd	r7, r7, [r4, #44]	; 0x2c
      __HAL_RCC_BDMA_CLK_ENABLE();
 800b2c6:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800b2ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b2ce:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800b2d2:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800b2d6:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
      __HAL_RCC_BDMA_CLK_ENABLE();
 800b2da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2de:	930e      	str	r3, [sp, #56]	; 0x38
 800b2e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 800b2e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2e6:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800b2ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2ee:	e9c4 1306 	strd	r1, r3, [r4, #24]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800b2f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b2f6:	6223      	str	r3, [r4, #32]
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 800b2fc:	4b3f      	ldr	r3, [pc, #252]	; (800b3fc <SAI_MspInit+0x42c>)
 800b2fe:	6023      	str	r3, [r4, #0]
    HAL_DMA_DeInit(&hdma_sai_rx);
 800b300:	f003 f988 	bl	800e614 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 800b304:	4620      	mov	r0, r4
 800b306:	f002 ff17 	bl	800e138 <HAL_DMA_Init>
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 800b30a:	463a      	mov	r2, r7
 800b30c:	4641      	mov	r1, r8
 800b30e:	2082      	movs	r0, #130	; 0x82
 800b310:	f002 fbba 	bl	800da88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 800b314:	2082      	movs	r0, #130	; 0x82
 800b316:	f002 fbf5 	bl	800db04 <HAL_NVIC_EnableIRQ>
  if(hsai->Instance == AUDIO_IN_SAIx)
 800b31a:	682b      	ldr	r3, [r5, #0]
 800b31c:	4a38      	ldr	r2, [pc, #224]	; (800b400 <SAI_MspInit+0x430>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	f47f aebc 	bne.w	800b09c <SAI_MspInit+0xcc>
    AUDIO_IN_SAIx_CLK_ENABLE();
 800b324:	4e31      	ldr	r6, [pc, #196]	; (800b3ec <SAI_MspInit+0x41c>)
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800b326:	2208      	movs	r2, #8
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800b328:	a912      	add	r1, sp, #72	; 0x48
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 800b32a:	4c32      	ldr	r4, [pc, #200]	; (800b3f4 <SAI_MspInit+0x424>)
    AUDIO_IN_SAIx_CLK_ENABLE();
 800b32c:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800b330:	2700      	movs	r7, #0
    AUDIO_IN_SAIx_CLK_ENABLE();
 800b332:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b336:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 800b33a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 800b33e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b342:	930f      	str	r3, [sp, #60]	; 0x3c
 800b344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    AUDIO_IN_SAIx_SD_ENABLE();
 800b346:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800b34a:	f043 0310 	orr.w	r3, r3, #16
 800b34e:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800b352:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800b356:	f003 0310 	and.w	r3, r3, #16
 800b35a:	9310      	str	r3, [sp, #64]	; 0x40
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800b35c:	2302      	movs	r3, #2
    AUDIO_IN_SAIx_SD_ENABLE();
 800b35e:	9810      	ldr	r0, [sp, #64]	; 0x40
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800b360:	4823      	ldr	r0, [pc, #140]	; (800b3f0 <SAI_MspInit+0x420>)
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800b362:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b366:	2200      	movs	r2, #0
 800b368:	2302      	movs	r3, #2
 800b36a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 800b36e:	2306      	movs	r3, #6
 800b370:	9316      	str	r3, [sp, #88]	; 0x58
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800b372:	f005 f81d 	bl	80103b0 <HAL_GPIO_Init>
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800b376:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 800b37a:	2258      	movs	r2, #88	; 0x58
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800b37c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_sai_rx);
 800b37e:	4620      	mov	r0, r4
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800b380:	f043 0302 	orr.w	r3, r3, #2
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 800b384:	6062      	str	r2, [r4, #4]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800b386:	f44f 6280 	mov.w	r2, #1024	; 0x400
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800b38a:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
 800b38e:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800b392:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800b396:	f003 0302 	and.w	r3, r3, #2
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800b39a:	6267      	str	r7, [r4, #36]	; 0x24
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800b39c:	62e7      	str	r7, [r4, #44]	; 0x2c
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800b39e:	9311      	str	r3, [sp, #68]	; 0x44
 800b3a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800b3a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800b3a6:	6327      	str	r7, [r4, #48]	; 0x30
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800b3a8:	e9c4 2304 	strd	r2, r3, [r4, #16]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800b3ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b3b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3b4:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800b3b8:	2303      	movs	r3, #3
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800b3ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800b3be:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800b3c0:	4b10      	ldr	r3, [pc, #64]	; (800b404 <SAI_MspInit+0x434>)
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800b3c2:	6222      	str	r2, [r4, #32]
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800b3c4:	6023      	str	r3, [r4, #0]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800b3c6:	e9c4 7702 	strd	r7, r7, [r4, #8]
    HAL_DMA_DeInit(&hdma_sai_rx);
 800b3ca:	f003 f923 	bl	800e614 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f002 feb2 	bl	800e138 <HAL_DMA_Init>
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 800b3d4:	463a      	mov	r2, r7
 800b3d6:	210f      	movs	r1, #15
 800b3d8:	203c      	movs	r0, #60	; 0x3c
 800b3da:	f002 fb55 	bl	800da88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800b3de:	203c      	movs	r0, #60	; 0x3c
 800b3e0:	f002 fb90 	bl	800db04 <HAL_NVIC_EnableIRQ>
}
 800b3e4:	b018      	add	sp, #96	; 0x60
 800b3e6:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 800b3ea:	bf00      	nop
 800b3ec:	58024400 	.word	0x58024400
 800b3f0:	58021000 	.word	0x58021000
 800b3f4:	24009204 	.word	0x24009204
 800b3f8:	58020800 	.word	0x58020800
 800b3fc:	5802541c 	.word	0x5802541c
 800b400:	40015824 	.word	0x40015824
 800b404:	40020470 	.word	0x40020470

0800b408 <MX_SAI1_Block_A_Init>:
  __HAL_SAI_DISABLE(hsai);
 800b408:	6802      	ldr	r2, [r0, #0]
{
 800b40a:	b538      	push	{r3, r4, r5, lr}
  __HAL_SAI_DISABLE(hsai);
 800b40c:	6813      	ldr	r3, [r2, #0]
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800b40e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 800b412:	4604      	mov	r4, r0
  __HAL_SAI_DISABLE(hsai);
 800b414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b418:	6013      	str	r3, [r2, #0]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 800b41a:	2300      	movs	r3, #0
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 800b41c:	68ca      	ldr	r2, [r1, #12]
 800b41e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 800b420:	680a      	ldr	r2, [r1, #0]
 800b422:	6202      	str	r2, [r0, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 800b424:	684a      	ldr	r2, [r1, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 800b426:	6183      	str	r3, [r0, #24]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 800b428:	6042      	str	r2, [r0, #4]
  hsai->Init.DataSize             = MXConfig->DataSize;
 800b42a:	688a      	ldr	r2, [r1, #8]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 800b42c:	6443      	str	r3, [r0, #68]	; 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 800b42e:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 800b432:	690a      	ldr	r2, [r1, #16]
 800b434:	6502      	str	r2, [r0, #80]	; 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 800b436:	694a      	ldr	r2, [r1, #20]
 800b438:	6082      	str	r2, [r0, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 800b43a:	698a      	ldr	r2, [r1, #24]
 800b43c:	6142      	str	r2, [r0, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 800b43e:	2201      	movs	r2, #1
 800b440:	61c2      	str	r2, [r0, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 800b442:	69ca      	ldr	r2, [r1, #28]
  hsai->Init.PdmInit.Activation   = DISABLE;
 800b444:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 800b448:	60c2      	str	r2, [r0, #12]
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800b44a:	6a0a      	ldr	r2, [r1, #32]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 800b44c:	6303      	str	r3, [r0, #48]	; 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 800b44e:	6343      	str	r3, [r0, #52]	; 0x34
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_DISABLE;
 800b450:	6103      	str	r3, [r0, #16]
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 800b452:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hsai->Init.PdmInit.MicPairsNbr  = 0;
 800b456:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800b45a:	6542      	str	r2, [r0, #84]	; 0x54
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 800b45c:	e9d1 2109 	ldrd	r2, r1, [r1, #36]	; 0x24
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800b460:	6603      	str	r3, [r0, #96]	; 0x60
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 800b462:	6582      	str	r2, [r0, #88]	; 0x58
  hsai->SlotInit.SlotNumber         = 4;
 800b464:	2204      	movs	r2, #4
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800b466:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 800b468:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800b46c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  hsai->SlotInit.SlotNumber         = 4;
 800b470:	e9c0 211c 	strd	r2, r1, [r0, #112]	; 0x70
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800b474:	6643      	str	r3, [r0, #100]	; 0x64
  if(HAL_SAI_Init(hsai) != HAL_OK)
 800b476:	f008 ff6d 	bl	8014354 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(hsai);
 800b47a:	6822      	ldr	r2, [r4, #0]
}
 800b47c:	3800      	subs	r0, #0
  __HAL_SAI_ENABLE(hsai);
 800b47e:	6813      	ldr	r3, [r2, #0]
}
 800b480:	bf18      	it	ne
 800b482:	2001      	movne	r0, #1
  __HAL_SAI_ENABLE(hsai);
 800b484:	432b      	orrs	r3, r5
 800b486:	6013      	str	r3, [r2, #0]
}
 800b488:	bd38      	pop	{r3, r4, r5, pc}
 800b48a:	bf00      	nop

0800b48c <MX_SAI1_ClockConfig>:
{
 800b48c:	b510      	push	{r4, lr}
 800b48e:	b0b0      	sub	sp, #192	; 0xc0
 800b490:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800b492:	4668      	mov	r0, sp
 800b494:	f008 f916 	bl	80136c4 <HAL_RCCEx_GetPeriphCLKConfig>
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 800b498:	f642 3211 	movw	r2, #11025	; 0x2b11
 800b49c:	f245 6322 	movw	r3, #22050	; 0x5622
 800b4a0:	429c      	cmp	r4, r3
 800b4a2:	bf18      	it	ne
 800b4a4:	4294      	cmpne	r4, r2
 800b4a6:	d003      	beq.n	800b4b0 <MX_SAI1_ClockConfig+0x24>
 800b4a8:	f64a 4344 	movw	r3, #44100	; 0xac44
 800b4ac:	429c      	cmp	r4, r3
 800b4ae:	d115      	bne.n	800b4dc <MX_SAI1_ClockConfig+0x50>
    rcc_ex_clk_init_struct.PLL2.PLL2N = 429;
 800b4b0:	f240 12ad 	movw	r2, #429	; 0x1ad
    rcc_ex_clk_init_struct.PLL2.PLL2P = 38;
 800b4b4:	2426      	movs	r4, #38	; 0x26
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800b4b6:	2301      	movs	r3, #1
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800b4b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b4bc:	9202      	str	r2, [sp, #8]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 800b4be:	2219      	movs	r2, #25
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 800b4c0:	4668      	mov	r0, sp
 800b4c2:	9403      	str	r4, [sp, #12]
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800b4c4:	9100      	str	r1, [sp, #0]
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800b4c6:	9316      	str	r3, [sp, #88]	; 0x58
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 800b4c8:	9201      	str	r2, [sp, #4]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 800b4ca:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 800b4ce:	f007 fb97 	bl	8012c00 <HAL_RCCEx_PeriphCLKConfig>
}
 800b4d2:	3800      	subs	r0, #0
 800b4d4:	bf18      	it	ne
 800b4d6:	2001      	movne	r0, #1
 800b4d8:	b030      	add	sp, #192	; 0xc0
 800b4da:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 800b4dc:	f44f 72ac 	mov.w	r2, #344	; 0x158
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 800b4e0:	2407      	movs	r4, #7
 800b4e2:	e7e8      	b.n	800b4b6 <MX_SAI1_ClockConfig+0x2a>

0800b4e4 <BSP_AUDIO_OUT_Init>:
  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 800b4e4:	2801      	cmp	r0, #1
 800b4e6:	f200 80ae 	bhi.w	800b646 <BSP_AUDIO_OUT_Init+0x162>
    Audio_Out_Ctx[Instance].Device         = AudioInit->Device;
 800b4ea:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 800b4ee:	680a      	ldr	r2, [r1, #0]
{
 800b4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Audio_Out_Ctx[Instance].Device         = AudioInit->Device;
 800b4f4:	4e57      	ldr	r6, [pc, #348]	; (800b654 <BSP_AUDIO_OUT_Init+0x170>)
{
 800b4f6:	b091      	sub	sp, #68	; 0x44
  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800b4f8:	f8df a17c 	ldr.w	sl, [pc, #380]	; 800b678 <BSP_AUDIO_OUT_Init+0x194>
 800b4fc:	4605      	mov	r5, r0
    Audio_Out_Ctx[Instance].Instance       = Instance;
 800b4fe:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
    Audio_Out_Ctx[Instance].Device         = AudioInit->Device;
 800b502:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b506:	460c      	mov	r4, r1
 800b508:	00c7      	lsls	r7, r0, #3
 800b50a:	605a      	str	r2, [r3, #4]
  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800b50c:	4650      	mov	r0, sl
    Audio_Out_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 800b50e:	684a      	ldr	r2, [r1, #4]
 800b510:	609a      	str	r2, [r3, #8]
    Audio_Out_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 800b512:	688a      	ldr	r2, [r1, #8]
 800b514:	60da      	str	r2, [r3, #12]
    Audio_Out_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 800b516:	68ca      	ldr	r2, [r1, #12]
 800b518:	615a      	str	r2, [r3, #20]
    Audio_Out_Ctx[Instance].Volume         = AudioInit->Volume;
 800b51a:	690a      	ldr	r2, [r1, #16]
  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800b51c:	a905      	add	r1, sp, #20
    Audio_Out_Ctx[Instance].Volume         = AudioInit->Volume;
 800b51e:	611a      	str	r2, [r3, #16]
    Audio_Out_Ctx[Instance].State          = AUDIO_OUT_STATE_RESET;
 800b520:	2200      	movs	r2, #0
 800b522:	61da      	str	r2, [r3, #28]
  IOCtx.Address     = AUDIO_I2C_ADDRESS;
 800b524:	2334      	movs	r3, #52	; 0x34
 800b526:	f8ad 301c 	strh.w	r3, [sp, #28]
  IOCtx.Init        = BSP_I2C4_Init;
 800b52a:	4b4b      	ldr	r3, [pc, #300]	; (800b658 <BSP_AUDIO_OUT_Init+0x174>)
 800b52c:	9305      	str	r3, [sp, #20]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800b52e:	4b4b      	ldr	r3, [pc, #300]	; (800b65c <BSP_AUDIO_OUT_Init+0x178>)
 800b530:	9306      	str	r3, [sp, #24]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800b532:	4b4b      	ldr	r3, [pc, #300]	; (800b660 <BSP_AUDIO_OUT_Init+0x17c>)
 800b534:	9309      	str	r3, [sp, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 800b536:	4b4b      	ldr	r3, [pc, #300]	; (800b664 <BSP_AUDIO_OUT_Init+0x180>)
 800b538:	9308      	str	r3, [sp, #32]
  IOCtx.GetTick     = BSP_GetTick;
 800b53a:	4b4b      	ldr	r3, [pc, #300]	; (800b668 <BSP_AUDIO_OUT_Init+0x184>)
 800b53c:	930a      	str	r3, [sp, #40]	; 0x28
  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800b53e:	f7ff fa49 	bl	800a9d4 <WM8994_RegisterBusIO>
 800b542:	2800      	cmp	r0, #0
 800b544:	d178      	bne.n	800b638 <BSP_AUDIO_OUT_Init+0x154>
    if(WM8994_Reset(&WM8994Obj) != WM8994_OK)
 800b546:	4650      	mov	r0, sl
 800b548:	f7fe fbfe 	bl	8009d48 <WM8994_Reset>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d173      	bne.n	800b638 <BSP_AUDIO_OUT_Init+0x154>
    else if(WM8994_ReadID(&WM8994Obj, &id) != WM8994_OK)
 800b550:	4650      	mov	r0, sl
 800b552:	4669      	mov	r1, sp
 800b554:	f7fe fb5c 	bl	8009c10 <WM8994_ReadID>
 800b558:	2800      	cmp	r0, #0
 800b55a:	d16d      	bne.n	800b638 <BSP_AUDIO_OUT_Init+0x154>
    else if(id != WM8994_ID)
 800b55c:	9a00      	ldr	r2, [sp, #0]
 800b55e:	f648 1394 	movw	r3, #35220	; 0x8994
 800b562:	429a      	cmp	r2, r3
 800b564:	d168      	bne.n	800b638 <BSP_AUDIO_OUT_Init+0x154>
      if(MX_SAI1_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 800b566:	f8df b114 	ldr.w	fp, [pc, #276]	; 800b67c <BSP_AUDIO_OUT_Init+0x198>
      Audio_Drv = (AUDIO_Drv_t *) &WM8994_Driver;
 800b56a:	4b40      	ldr	r3, [pc, #256]	; (800b66c <BSP_AUDIO_OUT_Init+0x188>)
 800b56c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 800b680 <BSP_AUDIO_OUT_Init+0x19c>
      if(MX_SAI1_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 800b570:	4658      	mov	r0, fp
      Audio_CompObj = &WM8994Obj;
 800b572:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800b684 <BSP_AUDIO_OUT_Init+0x1a0>
      if(MX_SAI1_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 800b576:	6861      	ldr	r1, [r4, #4]
      Audio_CompObj = &WM8994Obj;
 800b578:	f8c8 a000 	str.w	sl, [r8]
      Audio_Drv = (AUDIO_Drv_t *) &WM8994_Driver;
 800b57c:	f8c9 3000 	str.w	r3, [r9]
      if(MX_SAI1_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 800b580:	f7ff ff84 	bl	800b48c <MX_SAI1_ClockConfig>
 800b584:	4682      	mov	sl, r0
 800b586:	2800      	cmp	r0, #0
 800b588:	d160      	bne.n	800b64c <BSP_AUDIO_OUT_Init+0x168>
        haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800b58a:	4b39      	ldr	r3, [pc, #228]	; (800b670 <BSP_AUDIO_OUT_Init+0x18c>)
        SAI_MspInit(&haudio_out_sai);
 800b58c:	4658      	mov	r0, fp
        haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800b58e:	f8cb 3000 	str.w	r3, [fp]
        SAI_MspInit(&haudio_out_sai);
 800b592:	f7ff fd1d 	bl	800afd0 <SAI_MspInit>
          mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 800b596:	68e3      	ldr	r3, [r4, #12]
          if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_sai_config) != HAL_OK)
 800b598:	a905      	add	r1, sp, #20
 800b59a:	4658      	mov	r0, fp
          mx_sai_config.AudioMode         = SAI_MODEMASTER_TX;
 800b59c:	f8cd a018 	str.w	sl, [sp, #24]
          mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 800b5a0:	2b01      	cmp	r3, #1
          mx_sai_config.Synchro           = SAI_ASYNCHRONOUS;
 800b5a2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
          mx_sai_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 800b5a6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
          mx_sai_config.AudioFrequency    = AudioInit->SampleRate;
 800b5aa:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800b5ae:	9205      	str	r2, [sp, #20]
          mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 800b5b0:	bf0c      	ite	eq
 800b5b2:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800b5b6:	2200      	movne	r2, #0
          mx_sai_config.DataSize          = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? SAI_DATASIZE_32 : SAI_DATASIZE_16;
 800b5b8:	2b20      	cmp	r3, #32
          mx_sai_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b5ba:	f04f 0301 	mov.w	r3, #1
          mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 800b5be:	9208      	str	r2, [sp, #32]
          mx_sai_config.ActiveFrameLength = 64;
 800b5c0:	f04f 0280 	mov.w	r2, #128	; 0x80
          mx_sai_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b5c4:	9309      	str	r3, [sp, #36]	; 0x24
          mx_sai_config.DataSize          = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? SAI_DATASIZE_32 : SAI_DATASIZE_16;
 800b5c6:	bf0c      	ite	eq
 800b5c8:	23e0      	moveq	r3, #224	; 0xe0
 800b5ca:	2380      	movne	r3, #128	; 0x80
 800b5cc:	9307      	str	r3, [sp, #28]
          mx_sai_config.ActiveFrameLength = 64;
 800b5ce:	2340      	movs	r3, #64	; 0x40
 800b5d0:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
          mx_sai_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 800b5d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5d8:	930b      	str	r3, [sp, #44]	; 0x2c
          mx_sai_config.SlotActive        = CODEC_AUDIOFRAME_SLOT_02;
 800b5da:	2305      	movs	r3, #5
 800b5dc:	930f      	str	r3, [sp, #60]	; 0x3c
          if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_sai_config) != HAL_OK)
 800b5de:	f7ff ff13 	bl	800b408 <MX_SAI1_Block_A_Init>
 800b5e2:	bb20      	cbnz	r0, 800b62e <BSP_AUDIO_OUT_Init+0x14a>
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? 3 : 0;
 800b5e4:	68a3      	ldr	r3, [r4, #8]
            codec_init.InputDevice  = WM8994_IN_NONE;
 800b5e6:	9000      	str	r0, [sp, #0]
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? 3 : 0;
 800b5e8:	2b20      	cmp	r3, #32
            codec_init.Frequency    = AudioInit->SampleRate;
 800b5ea:	6863      	ldr	r3, [r4, #4]
 800b5ec:	9302      	str	r3, [sp, #8]
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? 3 : 0;
 800b5ee:	bf0c      	ite	eq
 800b5f0:	2303      	moveq	r3, #3
 800b5f2:	2300      	movne	r3, #0
 800b5f4:	9303      	str	r3, [sp, #12]
            codec_init.OutputDevice = AudioInit->Device;
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	9301      	str	r3, [sp, #4]
            codec_init.Volume       = VOLUME_OUT_CONVERT(AudioInit->Volume);
 800b5fa:	6923      	ldr	r3, [r4, #16]
 800b5fc:	2b64      	cmp	r3, #100	; 0x64
 800b5fe:	d820      	bhi.n	800b642 <BSP_AUDIO_OUT_Init+0x15e>
 800b600:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 800b604:	4a1b      	ldr	r2, [pc, #108]	; (800b674 <BSP_AUDIO_OUT_Init+0x190>)
 800b606:	fba2 2303 	umull	r2, r3, r2, r3
 800b60a:	095b      	lsrs	r3, r3, #5
 800b60c:	9304      	str	r3, [sp, #16]
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 800b60e:	4669      	mov	r1, sp
 800b610:	f8d9 3000 	ldr.w	r3, [r9]
 800b614:	f8d8 0000 	ldr.w	r0, [r8]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4798      	blx	r3
 800b61c:	b960      	cbnz	r0, 800b638 <BSP_AUDIO_OUT_Init+0x154>
              Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 800b61e:	443d      	add	r5, r7
 800b620:	2302      	movs	r3, #2
 800b622:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800b626:	61f3      	str	r3, [r6, #28]
}
 800b628:	b011      	add	sp, #68	; 0x44
 800b62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = BSP_ERROR_PERIPH_FAILURE;
 800b62e:	f06f 0003 	mvn.w	r0, #3
}
 800b632:	b011      	add	sp, #68	; 0x44
 800b634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800b638:	f06f 0004 	mvn.w	r0, #4
}
 800b63c:	b011      	add	sp, #68	; 0x44
 800b63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            codec_init.Volume       = VOLUME_OUT_CONVERT(AudioInit->Volume);
 800b642:	233f      	movs	r3, #63	; 0x3f
 800b644:	e7e2      	b.n	800b60c <BSP_AUDIO_OUT_Init+0x128>
    ret = BSP_ERROR_WRONG_PARAM;
 800b646:	f06f 0001 	mvn.w	r0, #1
}
 800b64a:	4770      	bx	lr
        ret = BSP_ERROR_CLOCK_FAILURE;
 800b64c:	f06f 0008 	mvn.w	r0, #8
  return ret;
 800b650:	e7ea      	b.n	800b628 <BSP_AUDIO_OUT_Init+0x144>
 800b652:	bf00      	nop
 800b654:	24009064 	.word	0x24009064
 800b658:	0800b83d 	.word	0x0800b83d
 800b65c:	0800b7a9 	.word	0x0800b7a9
 800b660:	0800bfc1 	.word	0x0800bfc1
 800b664:	0800bf85 	.word	0x0800bf85
 800b668:	0800bffd 	.word	0x0800bffd
 800b66c:	2400745c 	.word	0x2400745c
 800b670:	40015804 	.word	0x40015804
 800b674:	51eb851f 	.word	0x51eb851f
 800b678:	240090ac 	.word	0x240090ac
 800b67c:	2400916c 	.word	0x2400916c
 800b680:	24009060 	.word	0x24009060
 800b684:	2400905c 	.word	0x2400905c

0800b688 <BSP_AUDIO_OUT_Play>:
  if((Instance >= AUDIO_OUT_INSTANCES_NBR) || (((NbrOfBytes / (Audio_Out_Ctx[Instance].BitsPerSample/8U)) > 0xFFFFU)))
 800b688:	2801      	cmp	r0, #1
 800b68a:	d822      	bhi.n	800b6d2 <BSP_AUDIO_OUT_Play+0x4a>
 800b68c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
{
 800b690:	b510      	push	{r4, lr}
  if((Instance >= AUDIO_OUT_INSTANCES_NBR) || (((NbrOfBytes / (Audio_Out_Ctx[Instance].BitsPerSample/8U)) > 0xFFFFU)))
 800b692:	4c16      	ldr	r4, [pc, #88]	; (800b6ec <BSP_AUDIO_OUT_Play+0x64>)
 800b694:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800b698:	68e3      	ldr	r3, [r4, #12]
 800b69a:	08db      	lsrs	r3, r3, #3
 800b69c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b6a0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b6a4:	d218      	bcs.n	800b6d8 <BSP_AUDIO_OUT_Play+0x50>
  else if((Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_STOP) || (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_RESET))
 800b6a6:	69e3      	ldr	r3, [r4, #28]
 800b6a8:	f033 0302 	bics.w	r3, r3, #2
 800b6ac:	d10e      	bne.n	800b6cc <BSP_AUDIO_OUT_Play+0x44>
    if(HAL_SAI_Transmit_DMA(&haudio_out_sai, pData, (uint16_t)(NbrOfBytes /(Audio_Out_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 800b6ae:	b292      	uxth	r2, r2
 800b6b0:	480f      	ldr	r0, [pc, #60]	; (800b6f0 <BSP_AUDIO_OUT_Play+0x68>)
 800b6b2:	f008 fedf 	bl	8014474 <HAL_SAI_Transmit_DMA>
 800b6b6:	b990      	cbnz	r0, 800b6de <BSP_AUDIO_OUT_Play+0x56>
      if(Audio_Drv->Play(Audio_CompObj) != BSP_ERROR_NONE)
 800b6b8:	4b0e      	ldr	r3, [pc, #56]	; (800b6f4 <BSP_AUDIO_OUT_Play+0x6c>)
 800b6ba:	4a0f      	ldr	r2, [pc, #60]	; (800b6f8 <BSP_AUDIO_OUT_Play+0x70>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	6810      	ldr	r0, [r2, #0]
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	4798      	blx	r3
 800b6c4:	b970      	cbnz	r0, 800b6e4 <BSP_AUDIO_OUT_Play+0x5c>
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PLAYING;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	61e3      	str	r3, [r4, #28]
}
 800b6ca:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_BUSY;
 800b6cc:	f06f 0002 	mvn.w	r0, #2
}
 800b6d0:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b6d2:	f06f 0001 	mvn.w	r0, #1
}
 800b6d6:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800b6d8:	f06f 0001 	mvn.w	r0, #1
}
 800b6dc:	bd10      	pop	{r4, pc}
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b6de:	f06f 0003 	mvn.w	r0, #3
}
 800b6e2:	bd10      	pop	{r4, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6e4:	f06f 0004 	mvn.w	r0, #4
}
 800b6e8:	bd10      	pop	{r4, pc}
 800b6ea:	bf00      	nop
 800b6ec:	24009064 	.word	0x24009064
 800b6f0:	2400916c 	.word	0x2400916c
 800b6f4:	24009060 	.word	0x24009060
 800b6f8:	2400905c 	.word	0x2400905c

0800b6fc <BSP_AUDIO_OUT_Stop>:
  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 800b6fc:	2801      	cmp	r0, #1
{
 800b6fe:	b538      	push	{r3, r4, r5, lr}
  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 800b700:	d81d      	bhi.n	800b73e <BSP_AUDIO_OUT_Stop+0x42>
  else if (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_PLAYING)
 800b702:	4d12      	ldr	r5, [pc, #72]	; (800b74c <BSP_AUDIO_OUT_Stop+0x50>)
 800b704:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800b708:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800b70c:	69e9      	ldr	r1, [r5, #28]
 800b70e:	2901      	cmp	r1, #1
 800b710:	d112      	bne.n	800b738 <BSP_AUDIO_OUT_Stop+0x3c>
    if(Audio_Drv->Stop(Audio_CompObj, CODEC_PDWN_SW) != BSP_ERROR_NONE)
 800b712:	4b0f      	ldr	r3, [pc, #60]	; (800b750 <BSP_AUDIO_OUT_Stop+0x54>)
 800b714:	4a0f      	ldr	r2, [pc, #60]	; (800b754 <BSP_AUDIO_OUT_Stop+0x58>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6810      	ldr	r0, [r2, #0]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	4798      	blx	r3
 800b71e:	4604      	mov	r4, r0
 800b720:	b938      	cbnz	r0, 800b732 <BSP_AUDIO_OUT_Stop+0x36>
      if(HAL_SAI_DMAStop(&haudio_out_sai)!= HAL_OK)
 800b722:	480d      	ldr	r0, [pc, #52]	; (800b758 <BSP_AUDIO_OUT_Stop+0x5c>)
 800b724:	f008 fe3a 	bl	801439c <HAL_SAI_DMAStop>
 800b728:	b960      	cbnz	r0, 800b744 <BSP_AUDIO_OUT_Stop+0x48>
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 800b72a:	2302      	movs	r3, #2
 800b72c:	61eb      	str	r3, [r5, #28]
}
 800b72e:	4620      	mov	r0, r4
 800b730:	bd38      	pop	{r3, r4, r5, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b732:	f06f 0404 	mvn.w	r4, #4
 800b736:	e7fa      	b.n	800b72e <BSP_AUDIO_OUT_Stop+0x32>
    ret = BSP_ERROR_BUSY;
 800b738:	f06f 0402 	mvn.w	r4, #2
 800b73c:	e7f7      	b.n	800b72e <BSP_AUDIO_OUT_Stop+0x32>
    ret = BSP_ERROR_WRONG_PARAM;
 800b73e:	f06f 0401 	mvn.w	r4, #1
 800b742:	e7f4      	b.n	800b72e <BSP_AUDIO_OUT_Stop+0x32>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800b744:	f06f 0403 	mvn.w	r4, #3
  return ret;
 800b748:	e7f1      	b.n	800b72e <BSP_AUDIO_OUT_Stop+0x32>
 800b74a:	bf00      	nop
 800b74c:	24009064 	.word	0x24009064
 800b750:	24009060 	.word	0x24009060
 800b754:	2400905c 	.word	0x2400905c
 800b758:	2400916c 	.word	0x2400916c

0800b75c <BSP_AUDIO_OUT_IRQHandler>:
  if (Instance == 0U)
 800b75c:	b100      	cbz	r0, 800b760 <BSP_AUDIO_OUT_IRQHandler+0x4>
}
 800b75e:	4770      	bx	lr
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800b760:	4b02      	ldr	r3, [pc, #8]	; (800b76c <BSP_AUDIO_OUT_IRQHandler+0x10>)
 800b762:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800b766:	f003 bc47 	b.w	800eff8 <HAL_DMA_IRQHandler>
 800b76a:	bf00      	nop
 800b76c:	2400916c 	.word	0x2400916c

0800b770 <HAL_SAI_TxCpltCallback>:
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 800b770:	2000      	movs	r0, #0
{
 800b772:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 800b774:	f7f5 fa92 	bl	8000c9c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800b778:	bd08      	pop	{r3, pc}
 800b77a:	bf00      	nop

0800b77c <HAL_SAI_TxHalfCpltCallback>:
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 800b77c:	2000      	movs	r0, #0
{
 800b77e:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 800b780:	f7f5 fa98 	bl	8000cb4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800b784:	bd08      	pop	{r3, pc}
 800b786:	bf00      	nop

0800b788 <BSP_AUDIO_IN_Error_CallBack>:
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop

0800b78c <HAL_SAI_ErrorCallback>:
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800b78c:	6802      	ldr	r2, [r0, #0]
  BSP_AUDIO_OUT_Error_CallBack(0);
 800b78e:	2000      	movs	r0, #0
{
 800b790:	b508      	push	{r3, lr}
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800b792:	4b04      	ldr	r3, [pc, #16]	; (800b7a4 <HAL_SAI_ErrorCallback+0x18>)
 800b794:	429a      	cmp	r2, r3
 800b796:	d002      	beq.n	800b79e <HAL_SAI_ErrorCallback+0x12>
  BSP_AUDIO_IN_Error_CallBack(0);
 800b798:	f7ff fff6 	bl	800b788 <BSP_AUDIO_IN_Error_CallBack>
}
 800b79c:	bd08      	pop	{r3, pc}
  BSP_AUDIO_OUT_Error_CallBack(0);
 800b79e:	f7f5 fa97 	bl	8000cd0 <BSP_AUDIO_OUT_Error_CallBack>
}
 800b7a2:	bd08      	pop	{r3, pc}
 800b7a4:	40015804 	.word	0x40015804

0800b7a8 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800b7a8:	4a10      	ldr	r2, [pc, #64]	; (800b7ec <BSP_I2C4_DeInit+0x44>)
{
 800b7aa:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 800b7ac:	6813      	ldr	r3, [r2, #0]
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800b7b2:	b10b      	cbz	r3, 800b7b8 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 800b7b4:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800b7b6:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800b7b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b7bc:	480c      	ldr	r0, [pc, #48]	; (800b7f0 <BSP_I2C4_DeInit+0x48>)
 800b7be:	f004 ff3d 	bl	801063c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800b7c2:	480b      	ldr	r0, [pc, #44]	; (800b7f0 <BSP_I2C4_DeInit+0x48>)
 800b7c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b7c8:	f004 ff38 	bl	801063c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800b7cc:	4a09      	ldr	r2, [pc, #36]	; (800b7f4 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800b7ce:	480a      	ldr	r0, [pc, #40]	; (800b7f8 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 800b7d0:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 800b7d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800b7dc:	f005 f914 	bl	8010a08 <HAL_I2C_DeInit>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d0e7      	beq.n	800b7b4 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 800b7e4:	f06f 0007 	mvn.w	r0, #7
}
 800b7e8:	bd08      	pop	{r3, pc}
 800b7ea:	bf00      	nop
 800b7ec:	240092f4 	.word	0x240092f4
 800b7f0:	58020c00 	.word	0x58020c00
 800b7f4:	58024400 	.word	0x58024400
 800b7f8:	24009cfc 	.word	0x24009cfc

0800b7fc <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
 800b7fc:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b7fe:	2201      	movs	r2, #1
{
 800b800:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
 800b802:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b806:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b80a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b80e:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
 800b812:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800b814:	f005 f8a0 	bl	8010958 <HAL_I2C_Init>
 800b818:	b108      	cbz	r0, 800b81e <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 800b81a:	2001      	movs	r0, #1
}
 800b81c:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800b81e:	4601      	mov	r1, r0
 800b820:	4620      	mov	r0, r4
 800b822:	f005 fb89 	bl	8010f38 <HAL_I2CEx_ConfigAnalogFilter>
 800b826:	2800      	cmp	r0, #0
 800b828:	d1f7      	bne.n	800b81a <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800b82a:	4601      	mov	r1, r0
 800b82c:	4620      	mov	r0, r4
 800b82e:	f005 fbad 	bl	8010f8c <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 800b832:	3800      	subs	r0, #0
 800b834:	bf18      	it	ne
 800b836:	2001      	movne	r0, #1
}
 800b838:	bd10      	pop	{r4, pc}
 800b83a:	bf00      	nop

0800b83c <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
 800b83c:	4b91      	ldr	r3, [pc, #580]	; (800ba84 <BSP_I2C4_Init+0x248>)
  hbus_i2c4.Instance = BUS_I2C4;
 800b83e:	4892      	ldr	r0, [pc, #584]	; (800ba88 <BSP_I2C4_Init+0x24c>)
 800b840:	4a92      	ldr	r2, [pc, #584]	; (800ba8c <BSP_I2C4_Init+0x250>)
  if (I2c4InitCounter == 0U)
 800b842:	6819      	ldr	r1, [r3, #0]
{
 800b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b848:	b09d      	sub	sp, #116	; 0x74
  hbus_i2c4.Instance = BUS_I2C4;
 800b84a:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
 800b84c:	9103      	str	r1, [sp, #12]
 800b84e:	b119      	cbz	r1, 800b858 <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
 800b850:	2000      	movs	r0, #0
}
 800b852:	b01d      	add	sp, #116	; 0x74
 800b854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800b858:	2201      	movs	r2, #1
 800b85a:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800b85c:	f005 fb66 	bl	8010f2c <HAL_I2C_GetState>
 800b860:	2800      	cmp	r0, #0
 800b862:	d1f5      	bne.n	800b850 <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800b864:	4c8a      	ldr	r4, [pc, #552]	; (800ba90 <BSP_I2C4_Init+0x254>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800b866:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b86a:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800b86c:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800b86e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800b872:	2600      	movs	r6, #0
 800b874:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800b876:	f043 0308 	orr.w	r3, r3, #8
 800b87a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b87e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b882:	f003 0308 	and.w	r3, r3, #8
 800b886:	9313      	str	r3, [sp, #76]	; 0x4c
 800b888:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800b88a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b88e:	f043 0308 	orr.w	r3, r3, #8
 800b892:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b896:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800b89a:	951a      	str	r5, [sp, #104]	; 0x68
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800b89c:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800b8a0:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800b8a4:	9314      	str	r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800b8a6:	a916      	add	r1, sp, #88	; 0x58
 800b8a8:	487a      	ldr	r0, [pc, #488]	; (800ba94 <BSP_I2C4_Init+0x258>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800b8aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800b8ac:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800b8b0:	f004 fd7e 	bl	80103b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800b8b4:	2312      	movs	r3, #18
 800b8b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800b8ba:	a916      	add	r1, sp, #88	; 0x58
 800b8bc:	4875      	ldr	r0, [pc, #468]	; (800ba94 <BSP_I2C4_Init+0x258>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800b8be:	951a      	str	r5, [sp, #104]	; 0x68
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800b8c0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b8c4:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800b8c8:	f004 fd72 	bl	80103b0 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800b8cc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800b8d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8d4:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800b8d8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800b8dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8e0:	9315      	str	r3, [sp, #84]	; 0x54
 800b8e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_FORCE_RESET();
 800b8e4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b8e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ec:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 800b8f0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b8f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8f8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800b8fc:	f007 f844 	bl	8012988 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800b900:	2800      	cmp	r0, #0
 800b902:	f000 81af 	beq.w	800bc64 <BSP_I2C4_Init+0x428>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b906:	4b64      	ldr	r3, [pc, #400]	; (800ba98 <BSP_I2C4_Init+0x25c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 800b908:	f04f 0a10 	mov.w	sl, #16
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b90c:	9d03      	ldr	r5, [sp, #12]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b90e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800b912:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800baa0 <BSP_I2C4_Init+0x264>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b916:	fbb3 f2f0 	udiv	r2, r3, r0
 800b91a:	4610      	mov	r0, r2
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b91c:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b920:	9202      	str	r2, [sp, #8]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b922:	f06f 021d 	mvn.w	r2, #29
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b926:	eb00 0140 	add.w	r1, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b92a:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b92e:	1a52      	subs	r2, r2, r1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b930:	4601      	mov	r1, r0
 800b932:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b936:	0040      	lsls	r0, r0, #1
 800b938:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800b93c:	ea22 76e2 	bic.w	r6, r2, r2, asr #31
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b940:	460a      	mov	r2, r1
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b942:	9011      	str	r0, [sp, #68]	; 0x44
 800b944:	0059      	lsls	r1, r3, #1
 800b946:	4b55      	ldr	r3, [pc, #340]	; (800ba9c <BSP_I2C4_Init+0x260>)
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b948:	4693      	mov	fp, r2
 800b94a:	681b      	ldr	r3, [r3, #0]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b94c:	4688      	mov	r8, r1
 800b94e:	9110      	str	r1, [sp, #64]	; 0x40
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800b950:	ebb6 0f4b 	cmp.w	r6, fp, lsl #1
 800b954:	46dc      	mov	ip, fp
 800b956:	eb0b 024b 	add.w	r2, fp, fp, lsl #1
 800b95a:	bf94      	ite	ls
 800b95c:	2001      	movls	r0, #1
 800b95e:	2000      	movhi	r0, #0
 800b960:	ebb4 0f4b 	cmp.w	r4, fp, lsl #1
 800b964:	f000 0001 	and.w	r0, r0, #1
 800b968:	eb0b 018b 	add.w	r1, fp, fp, lsl #2
 800b96c:	bf38      	it	cc
 800b96e:	2000      	movcc	r0, #0
 800b970:	4296      	cmp	r6, r2
 800b972:	eb0b 0e41 	add.w	lr, fp, r1, lsl #1
 800b976:	9001      	str	r0, [sp, #4]
 800b978:	bf8c      	ite	hi
 800b97a:	2000      	movhi	r0, #0
 800b97c:	2001      	movls	r0, #1
 800b97e:	4294      	cmp	r4, r2
 800b980:	bf38      	it	cc
 800b982:	2000      	movcc	r0, #0
 800b984:	ebb6 0f8b 	cmp.w	r6, fp, lsl #2
 800b988:	9006      	str	r0, [sp, #24]
 800b98a:	eb0b 0082 	add.w	r0, fp, r2, lsl #2
 800b98e:	9005      	str	r0, [sp, #20]
 800b990:	bf94      	ite	ls
 800b992:	2001      	movls	r0, #1
 800b994:	2000      	movhi	r0, #0
 800b996:	ebb4 0f8b 	cmp.w	r4, fp, lsl #2
 800b99a:	f000 0701 	and.w	r7, r0, #1
 800b99e:	bf38      	it	cc
 800b9a0:	2700      	movcc	r7, #0
 800b9a2:	428e      	cmp	r6, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b9a4:	f04f 0000 	mov.w	r0, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800b9a8:	9707      	str	r7, [sp, #28]
 800b9aa:	bf8c      	ite	hi
 800b9ac:	2700      	movhi	r7, #0
 800b9ae:	2701      	movls	r7, #1
 800b9b0:	428c      	cmp	r4, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b9b2:	9004      	str	r0, [sp, #16]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800b9b4:	bf38      	it	cc
 800b9b6:	2700      	movcc	r7, #0
 800b9b8:	ebb6 0f42 	cmp.w	r6, r2, lsl #1
 800b9bc:	bf98      	it	ls
 800b9be:	2001      	movls	r0, #1
 800b9c0:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
 800b9c4:	9708      	str	r7, [sp, #32]
 800b9c6:	f000 0001 	and.w	r0, r0, #1
 800b9ca:	bf38      	it	cc
 800b9cc:	2000      	movcc	r0, #0
 800b9ce:	9009      	str	r0, [sp, #36]	; 0x24
 800b9d0:	ebcb 00cb 	rsb	r0, fp, fp, lsl #3
 800b9d4:	4286      	cmp	r6, r0
 800b9d6:	bf8c      	ite	hi
 800b9d8:	2700      	movhi	r7, #0
 800b9da:	2701      	movls	r7, #1
 800b9dc:	4284      	cmp	r4, r0
 800b9de:	bf38      	it	cc
 800b9e0:	2700      	movcc	r7, #0
 800b9e2:	ebb6 0fcb 	cmp.w	r6, fp, lsl #3
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	bf94      	ite	ls
 800b9ea:	2001      	movls	r0, #1
 800b9ec:	2000      	movhi	r0, #0
 800b9ee:	970a      	str	r7, [sp, #40]	; 0x28
 800b9f0:	ebb4 0fcb 	cmp.w	r4, fp, lsl #3
 800b9f4:	f000 0701 	and.w	r7, r0, #1
 800b9f8:	eb0b 00cb 	add.w	r0, fp, fp, lsl #3
 800b9fc:	bf38      	it	cc
 800b9fe:	2700      	movcc	r7, #0
 800ba00:	4286      	cmp	r6, r0
 800ba02:	970b      	str	r7, [sp, #44]	; 0x2c
 800ba04:	bf8c      	ite	hi
 800ba06:	2700      	movhi	r7, #0
 800ba08:	2701      	movls	r7, #1
 800ba0a:	4284      	cmp	r4, r0
 800ba0c:	bf38      	it	cc
 800ba0e:	2700      	movcc	r7, #0
 800ba10:	ebb6 0f41 	cmp.w	r6, r1, lsl #1
 800ba14:	4638      	mov	r0, r7
 800ba16:	bf94      	ite	ls
 800ba18:	2001      	movls	r0, #1
 800ba1a:	2000      	movhi	r0, #0
 800ba1c:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
 800ba20:	970c      	str	r7, [sp, #48]	; 0x30
 800ba22:	f04f 0700 	mov.w	r7, #0
 800ba26:	f000 0101 	and.w	r1, r0, #1
 800ba2a:	bf38      	it	cc
 800ba2c:	2100      	movcc	r1, #0
 800ba2e:	4576      	cmp	r6, lr
 800ba30:	9805      	ldr	r0, [sp, #20]
 800ba32:	910d      	str	r1, [sp, #52]	; 0x34
 800ba34:	bf8c      	ite	hi
 800ba36:	2100      	movhi	r1, #0
 800ba38:	2101      	movls	r1, #1
 800ba3a:	4574      	cmp	r4, lr
 800ba3c:	bf38      	it	cc
 800ba3e:	2100      	movcc	r1, #0
 800ba40:	ebb6 0f82 	cmp.w	r6, r2, lsl #2
 800ba44:	910e      	str	r1, [sp, #56]	; 0x38
 800ba46:	bf94      	ite	ls
 800ba48:	2101      	movls	r1, #1
 800ba4a:	2100      	movhi	r1, #0
 800ba4c:	ebb4 0f82 	cmp.w	r4, r2, lsl #2
 800ba50:	4602      	mov	r2, r0
 800ba52:	f001 0e01 	and.w	lr, r1, #1
 800ba56:	bf38      	it	cc
 800ba58:	f04f 0e00 	movcc.w	lr, #0
 800ba5c:	4286      	cmp	r6, r0
 800ba5e:	bf8c      	ite	hi
 800ba60:	2200      	movhi	r2, #0
 800ba62:	2201      	movls	r2, #1
 800ba64:	4284      	cmp	r4, r0
 800ba66:	bf38      	it	cc
 800ba68:	2200      	movcc	r2, #0
 800ba6a:	920f      	str	r2, [sp, #60]	; 0x3c
 800ba6c:	ebcb 120b 	rsb	r2, fp, fp, lsl #4
 800ba70:	4296      	cmp	r6, r2
 800ba72:	bf8c      	ite	hi
 800ba74:	2100      	movhi	r1, #0
 800ba76:	2101      	movls	r1, #1
 800ba78:	4294      	cmp	r4, r2
 800ba7a:	bf38      	it	cc
 800ba7c:	2100      	movcc	r1, #0
 800ba7e:	9105      	str	r1, [sp, #20]
 800ba80:	e014      	b.n	800baac <BSP_I2C4_Init+0x270>
 800ba82:	bf00      	nop
 800ba84:	240092f4 	.word	0x240092f4
 800ba88:	24009cfc 	.word	0x24009cfc
 800ba8c:	58001c00 	.word	0x58001c00
 800ba90:	58024400 	.word	0x58024400
 800ba94:	58020c00 	.word	0x58020c00
 800ba98:	3b9aca00 	.word	0x3b9aca00
 800ba9c:	24009cf8 	.word	0x24009cf8
 800baa0:	240092f8 	.word	0x240092f8
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800baa4:	2f10      	cmp	r7, #16
 800baa6:	44dc      	add	ip, fp
 800baa8:	f000 8217 	beq.w	800beda <BSP_I2C4_Init+0x69e>
      if (tscldel >= (uint32_t)tscldel_min)
 800baac:	f240 3179 	movw	r1, #889	; 0x379
 800bab0:	463a      	mov	r2, r7
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800bab2:	3701      	adds	r7, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800bab4:	458c      	cmp	ip, r1
 800bab6:	d9f5      	bls.n	800baa4 <BSP_I2C4_Init+0x268>
            if(presc != prev_presc)
 800bab8:	2e00      	cmp	r6, #0
 800baba:	f040 80dd 	bne.w	800bc78 <BSP_I2C4_Init+0x43c>
 800babe:	45aa      	cmp	sl, r5
 800bac0:	f000 80da 	beq.w	800bc78 <BSP_I2C4_Init+0x43c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bac4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bac8:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800baca:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bacc:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bad0:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bad2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bad6:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bad8:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bada:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800badc:	f200 817c 	bhi.w	800bdd8 <BSP_I2C4_Init+0x59c>
 800bae0:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800bae2:	45aa      	cmp	sl, r5
 800bae4:	d012      	beq.n	800bb0c <BSP_I2C4_Init+0x2d0>
 800bae6:	9901      	ldr	r1, [sp, #4]
 800bae8:	2900      	cmp	r1, #0
 800baea:	f000 80e1 	beq.w	800bcb0 <BSP_I2C4_Init+0x474>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800baee:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800baf2:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800baf4:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800baf6:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bafa:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bafc:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bb00:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bb02:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb04:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bb06:	f200 8167 	bhi.w	800bdd8 <BSP_I2C4_Init+0x59c>
 800bb0a:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800bb0c:	4555      	cmp	r5, sl
 800bb0e:	d066      	beq.n	800bbde <BSP_I2C4_Init+0x3a2>
 800bb10:	9907      	ldr	r1, [sp, #28]
 800bb12:	2900      	cmp	r1, #0
 800bb14:	f000 80e1 	beq.w	800bcda <BSP_I2C4_Init+0x49e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb18:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bb1c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bb1e:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb20:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bb24:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb26:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bb2a:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bb2c:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb2e:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bb30:	f200 8152 	bhi.w	800bdd8 <BSP_I2C4_Init+0x59c>
 800bb34:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800bb36:	4555      	cmp	r5, sl
 800bb38:	d051      	beq.n	800bbde <BSP_I2C4_Init+0x3a2>
 800bb3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb3c:	2900      	cmp	r1, #0
 800bb3e:	f000 80e1 	beq.w	800bd04 <BSP_I2C4_Init+0x4c8>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb42:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bb46:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bb48:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb4a:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bb4e:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb50:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bb54:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bb56:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb58:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bb5a:	f200 813d 	bhi.w	800bdd8 <BSP_I2C4_Init+0x59c>
 800bb5e:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800bb60:	4555      	cmp	r5, sl
 800bb62:	d03c      	beq.n	800bbde <BSP_I2C4_Init+0x3a2>
 800bb64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb66:	2900      	cmp	r1, #0
 800bb68:	f000 80e1 	beq.w	800bd2e <BSP_I2C4_Init+0x4f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb6c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bb70:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bb72:	2008      	movs	r0, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb74:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bb78:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb7a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bb7e:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bb80:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb82:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bb84:	f200 8128 	bhi.w	800bdd8 <BSP_I2C4_Init+0x59c>
 800bb88:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800bb8a:	4555      	cmp	r5, sl
 800bb8c:	d027      	beq.n	800bbde <BSP_I2C4_Init+0x3a2>
 800bb8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bb90:	2900      	cmp	r1, #0
 800bb92:	f000 80e1 	beq.w	800bd58 <BSP_I2C4_Init+0x51c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb96:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bb9a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bb9c:	200a      	movs	r0, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb9e:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bba2:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bba4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bba8:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bbaa:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bbac:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bbae:	f200 8113 	bhi.w	800bdd8 <BSP_I2C4_Init+0x59c>
 800bbb2:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800bbb4:	4555      	cmp	r5, sl
 800bbb6:	d012      	beq.n	800bbde <BSP_I2C4_Init+0x3a2>
 800bbb8:	f1be 0f00 	cmp.w	lr, #0
 800bbbc:	f000 80e1 	beq.w	800bd82 <BSP_I2C4_Init+0x546>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bbc0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bbc4:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bbc6:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bbc8:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bbcc:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bbce:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bbd2:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bbd4:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bbd6:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bbd8:	f200 80fe 	bhi.w	800bdd8 <BSP_I2C4_Init+0x59c>
 800bbdc:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800bbde:	4546      	cmp	r6, r8
 800bbe0:	bf8c      	ite	hi
 800bbe2:	2100      	movhi	r1, #0
 800bbe4:	2101      	movls	r1, #1
 800bbe6:	4544      	cmp	r4, r8
 800bbe8:	bf38      	it	cc
 800bbea:	2100      	movcc	r1, #0
 800bbec:	2900      	cmp	r1, #0
 800bbee:	f000 80dd 	beq.w	800bdac <BSP_I2C4_Init+0x570>
 800bbf2:	4555      	cmp	r5, sl
 800bbf4:	f43f af56 	beq.w	800baa4 <BSP_I2C4_Init+0x268>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bbf8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bbfc:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bbfe:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
 800bc02:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bc06:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bc08:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bc0a:	f04f 020e 	mov.w	r2, #14
 800bc0e:	608a      	str	r2, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bc10:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bc12:	f200 80e1 	bhi.w	800bdd8 <BSP_I2C4_Init+0x59c>
 800bc16:	46aa      	mov	sl, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800bc18:	e744      	b.n	800baa4 <BSP_I2C4_Init+0x268>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800bc1a:	9a07      	ldr	r2, [sp, #28]
 800bc1c:	9b08      	ldr	r3, [sp, #32]
 800bc1e:	3214      	adds	r2, #20
 800bc20:	3301      	adds	r3, #1
 800bc22:	9207      	str	r2, [sp, #28]
 800bc24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc26:	9308      	str	r3, [sp, #32]
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	f040 80f4 	bne.w	800be16 <BSP_I2C4_Init+0x5da>
        if (idx < I2C_VALID_TIMING_NBR)
 800bc2e:	297f      	cmp	r1, #127	; 0x7f
 800bc30:	d818      	bhi.n	800bc64 <BSP_I2C4_Init+0x428>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800bc32:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800bc36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc38:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800bc3c:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800bc40:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800bc42:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800bc44:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800bc46:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800bc4a:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800bc4e:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800bc52:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800bc54:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800bc56:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800bc58:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800bc5c:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800bc5e:	430b      	orrs	r3, r1
 800bc60:	4313      	orrs	r3, r2
 800bc62:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800bc64:	9903      	ldr	r1, [sp, #12]
 800bc66:	48a5      	ldr	r0, [pc, #660]	; (800befc <BSP_I2C4_Init+0x6c0>)
 800bc68:	f7ff fdc8 	bl	800b7fc <MX_I2C4_Init>
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	f43f adef 	beq.w	800b850 <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
 800bc72:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800bc76:	e5ec      	b.n	800b852 <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
 800bc78:	455c      	cmp	r4, fp
 800bc7a:	bf34      	ite	cc
 800bc7c:	2100      	movcc	r1, #0
 800bc7e:	2101      	movcs	r1, #1
 800bc80:	455e      	cmp	r6, fp
 800bc82:	bf88      	it	hi
 800bc84:	2100      	movhi	r1, #0
 800bc86:	2900      	cmp	r1, #0
 800bc88:	f43f af2b 	beq.w	800bae2 <BSP_I2C4_Init+0x2a6>
 800bc8c:	45aa      	cmp	sl, r5
 800bc8e:	f43f af3d 	beq.w	800bb0c <BSP_I2C4_Init+0x2d0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bc92:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bc96:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bc98:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bc9a:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bc9e:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bca0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bca4:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bca6:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bca8:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bcaa:	f200 8095 	bhi.w	800bdd8 <BSP_I2C4_Init+0x59c>
 800bcae:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800bcb0:	45aa      	cmp	sl, r5
 800bcb2:	f43f af2b 	beq.w	800bb0c <BSP_I2C4_Init+0x2d0>
 800bcb6:	9906      	ldr	r1, [sp, #24]
 800bcb8:	2900      	cmp	r1, #0
 800bcba:	f43f af27 	beq.w	800bb0c <BSP_I2C4_Init+0x2d0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bcbe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bcc2:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bcc4:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bcc6:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bcca:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bccc:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bcd0:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bcd2:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bcd4:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bcd6:	d87f      	bhi.n	800bdd8 <BSP_I2C4_Init+0x59c>
 800bcd8:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800bcda:	4555      	cmp	r5, sl
 800bcdc:	f43f af7f 	beq.w	800bbde <BSP_I2C4_Init+0x3a2>
 800bce0:	9908      	ldr	r1, [sp, #32]
 800bce2:	2900      	cmp	r1, #0
 800bce4:	f43f af27 	beq.w	800bb36 <BSP_I2C4_Init+0x2fa>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bce8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bcec:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bcee:	2005      	movs	r0, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bcf0:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bcf4:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bcf6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bcfa:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bcfc:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bcfe:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bd00:	d86a      	bhi.n	800bdd8 <BSP_I2C4_Init+0x59c>
 800bd02:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800bd04:	4555      	cmp	r5, sl
 800bd06:	f43f af6a 	beq.w	800bbde <BSP_I2C4_Init+0x3a2>
 800bd0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bd0c:	2900      	cmp	r1, #0
 800bd0e:	f43f af27 	beq.w	800bb60 <BSP_I2C4_Init+0x324>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd12:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bd16:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bd18:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd1a:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bd1e:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd20:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bd24:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bd26:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd28:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bd2a:	d855      	bhi.n	800bdd8 <BSP_I2C4_Init+0x59c>
 800bd2c:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800bd2e:	4555      	cmp	r5, sl
 800bd30:	f43f af55 	beq.w	800bbde <BSP_I2C4_Init+0x3a2>
 800bd34:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bd36:	2900      	cmp	r1, #0
 800bd38:	f43f af27 	beq.w	800bb8a <BSP_I2C4_Init+0x34e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd3c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bd40:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bd42:	2009      	movs	r0, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd44:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bd48:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd4a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bd4e:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bd50:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd52:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bd54:	d840      	bhi.n	800bdd8 <BSP_I2C4_Init+0x59c>
 800bd56:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800bd58:	4555      	cmp	r5, sl
 800bd5a:	f43f af40 	beq.w	800bbde <BSP_I2C4_Init+0x3a2>
 800bd5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bd60:	2900      	cmp	r1, #0
 800bd62:	f43f af27 	beq.w	800bbb4 <BSP_I2C4_Init+0x378>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd66:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bd6a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bd6c:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd6e:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bd72:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd74:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bd78:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bd7a:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd7c:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bd7e:	d82b      	bhi.n	800bdd8 <BSP_I2C4_Init+0x59c>
 800bd80:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800bd82:	4555      	cmp	r5, sl
 800bd84:	f43f af2b 	beq.w	800bbde <BSP_I2C4_Init+0x3a2>
 800bd88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bd8a:	2900      	cmp	r1, #0
 800bd8c:	f43f af27 	beq.w	800bbde <BSP_I2C4_Init+0x3a2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd90:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bd94:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bd96:	200d      	movs	r0, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd98:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bd9c:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd9e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bda2:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bda4:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bda6:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bda8:	d816      	bhi.n	800bdd8 <BSP_I2C4_Init+0x59c>
 800bdaa:	46aa      	mov	sl, r5
            if(presc != prev_presc)
 800bdac:	4555      	cmp	r5, sl
 800bdae:	f43f ae79 	beq.w	800baa4 <BSP_I2C4_Init+0x268>
 800bdb2:	9905      	ldr	r1, [sp, #20]
 800bdb4:	2900      	cmp	r1, #0
 800bdb6:	f43f ae75 	beq.w	800baa4 <BSP_I2C4_Init+0x268>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bdba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800bdbe:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bdc0:	f849 5021 	str.w	r5, [r9, r1, lsl #2]
 800bdc4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bdc8:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bdca:	604a      	str	r2, [r1, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bdcc:	f04f 020f 	mov.w	r2, #15
 800bdd0:	608a      	str	r2, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bdd2:	4649      	mov	r1, r9
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bdd4:	f67f af1f 	bls.w	800bc16 <BSP_I2C4_Init+0x3da>
 800bdd8:	4a49      	ldr	r2, [pc, #292]	; (800bf00 <BSP_I2C4_Init+0x6c4>)
 800bdda:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
 800bdde:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800bde0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bde2:	f241 220c 	movw	r2, #4620	; 0x120c
 800bde6:	f640 769f 	movw	r6, #3999	; 0xf9f
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800bdea:	f242 7a10 	movw	sl, #10000	; 0x2710
 800bdee:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800bdf0:	f241 0b47 	movw	fp, #4167	; 0x1047
 800bdf4:	920c      	str	r2, [sp, #48]	; 0x30
 800bdf6:	9a02      	ldr	r2, [sp, #8]
 800bdf8:	4296      	cmp	r6, r2
 800bdfa:	bf38      	it	cc
 800bdfc:	4616      	movcc	r6, r2
 800bdfe:	4a41      	ldr	r2, [pc, #260]	; (800bf04 <BSP_I2C4_Init+0x6c8>)
 800be00:	189a      	adds	r2, r3, r2
 800be02:	3332      	adds	r3, #50	; 0x32
 800be04:	930d      	str	r3, [sp, #52]	; 0x34
 800be06:	4b40      	ldr	r3, [pc, #256]	; (800bf08 <BSP_I2C4_Init+0x6cc>)
 800be08:	920e      	str	r2, [sp, #56]	; 0x38
 800be0a:	9307      	str	r3, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800be0c:	2300      	movs	r3, #0
 800be0e:	9308      	str	r3, [sp, #32]
 800be10:	f04f 33ff 	mov.w	r3, #4294967295
 800be14:	4619      	mov	r1, r3
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800be16:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800be18:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800be1c:	6818      	ldr	r0, [r3, #0]
 800be1e:	9b02      	ldr	r3, [sp, #8]
 800be20:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800be24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be26:	1a1b      	subs	r3, r3, r0
 800be28:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800be2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be2e:	eb03 0e00 	add.w	lr, r3, r0
 800be32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be34:	4403      	add	r3, r0
 800be36:	9309      	str	r3, [sp, #36]	; 0x24
 800be38:	e006      	b.n	800be48 <BSP_I2C4_Init+0x60c>
 800be3a:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 800be3e:	4486      	add	lr, r0
 800be40:	eba9 0900 	sub.w	r9, r9, r0
 800be44:	f43f aee9 	beq.w	800bc1a <BSP_I2C4_Init+0x3de>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800be48:	f241 225c 	movw	r2, #4700	; 0x125c
 800be4c:	f8cd 8004 	str.w	r8, [sp, #4]
 800be50:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800be54:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800be58:	4596      	cmp	lr, r2
 800be5a:	d9ee      	bls.n	800be3a <BSP_I2C4_Init+0x5fe>
 800be5c:	9a02      	ldr	r2, [sp, #8]
 800be5e:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
 800be62:	d2ea      	bcs.n	800be3a <BSP_I2C4_Init+0x5fe>
 800be64:	f242 4c4a 	movw	ip, #9290	; 0x244a
 800be68:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800be6a:	f8cd 8010 	str.w	r8, [sp, #16]
 800be6e:	2200      	movs	r2, #0
 800be70:	ebac 0c03 	sub.w	ip, ip, r3
 800be74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be76:	f8cd e014 	str.w	lr, [sp, #20]
 800be7a:	4473      	add	r3, lr
 800be7c:	f8cd 9018 	str.w	r9, [sp, #24]
 800be80:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800be84:	468e      	mov	lr, r1
 800be86:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be8a:	e005      	b.n	800be98 <BSP_I2C4_Init+0x65c>
 800be8c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800be90:	eba4 0400 	sub.w	r4, r4, r0
 800be94:	4403      	add	r3, r0
 800be96:	d01a      	beq.n	800bece <BSP_I2C4_Init+0x692>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800be98:	eb0c 0103 	add.w	r1, ip, r3
 800be9c:	4617      	mov	r7, r2
 800be9e:	f203 6583 	addw	r5, r3, #1667	; 0x683
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800bea2:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800bea4:	428e      	cmp	r6, r1
 800bea6:	d2f1      	bcs.n	800be8c <BSP_I2C4_Init+0x650>
 800bea8:	455d      	cmp	r5, fp
 800beaa:	d8ef      	bhi.n	800be8c <BSP_I2C4_Init+0x650>
            if (error < 0)
 800beac:	ea33 0123 	bics.w	r1, r3, r3, asr #32
 800beb0:	bf28      	it	cs
 800beb2:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
 800beb4:	458a      	cmp	sl, r1
 800beb6:	d9e9      	bls.n	800be8c <BSP_I2C4_Init+0x650>
              I2c_valid_timing[count].sclh = sclh;
 800beb8:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800beba:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
 800bebe:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
 800bec0:	46ce      	mov	lr, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800bec2:	eba4 0400 	sub.w	r4, r4, r0
 800bec6:	4403      	add	r3, r0
              I2c_valid_timing[count].sclh = sclh;
 800bec8:	e9c8 7103 	strd	r7, r1, [r8, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800becc:	d1e4      	bne.n	800be98 <BSP_I2C4_Init+0x65c>
 800bece:	4671      	mov	r1, lr
 800bed0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bed4:	e9dd e905 	ldrd	lr, r9, [sp, #20]
 800bed8:	e7af      	b.n	800be3a <BSP_I2C4_Init+0x5fe>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800beda:	9a02      	ldr	r2, [sp, #8]
 800bedc:	3501      	adds	r5, #1
 800bede:	4493      	add	fp, r2
 800bee0:	2d10      	cmp	r5, #16
 800bee2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bee4:	4490      	add	r8, r2
 800bee6:	f47f ad33 	bne.w	800b950 <BSP_I2C4_Init+0x114>
 800beea:	4a05      	ldr	r2, [pc, #20]	; (800bf00 <BSP_I2C4_Init+0x6c4>)
 800beec:	930a      	str	r3, [sp, #40]	; 0x28
 800beee:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f43f aeb7 	beq.w	800bc64 <BSP_I2C4_Init+0x428>
 800bef6:	4b04      	ldr	r3, [pc, #16]	; (800bf08 <BSP_I2C4_Init+0x6cc>)
 800bef8:	930b      	str	r3, [sp, #44]	; 0x2c
 800befa:	e771      	b.n	800bde0 <BSP_I2C4_Init+0x5a4>
 800befc:	24009cfc 	.word	0x24009cfc
 800bf00:	24009cf8 	.word	0x24009cf8
 800bf04:	ffffdbb6 	.word	0xffffdbb6
 800bf08:	240092f8 	.word	0x240092f8

0800bf0c <BSP_I2C4_WriteReg>:
{
 800bf0c:	b530      	push	{r4, r5, lr}
 800bf0e:	4614      	mov	r4, r2
 800bf10:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bf12:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800bf16:	460a      	mov	r2, r1
 800bf18:	9301      	str	r3, [sp, #4]
 800bf1a:	4601      	mov	r1, r0
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	4809      	ldr	r0, [pc, #36]	; (800bf44 <BSP_I2C4_WriteReg+0x38>)
 800bf20:	9502      	str	r5, [sp, #8]
 800bf22:	9400      	str	r4, [sp, #0]
 800bf24:	f004 fd8a 	bl	8010a3c <HAL_I2C_Mem_Write>
 800bf28:	b908      	cbnz	r0, 800bf2e <BSP_I2C4_WriteReg+0x22>
}
 800bf2a:	b005      	add	sp, #20
 800bf2c:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800bf2e:	4805      	ldr	r0, [pc, #20]	; (800bf44 <BSP_I2C4_WriteReg+0x38>)
 800bf30:	f005 f800 	bl	8010f34 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800bf34:	2804      	cmp	r0, #4
 800bf36:	bf0c      	ite	eq
 800bf38:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800bf3c:	f06f 0003 	mvnne.w	r0, #3
 800bf40:	e7f3      	b.n	800bf2a <BSP_I2C4_WriteReg+0x1e>
 800bf42:	bf00      	nop
 800bf44:	24009cfc 	.word	0x24009cfc

0800bf48 <BSP_I2C4_ReadReg>:
{
 800bf48:	b530      	push	{r4, r5, lr}
 800bf4a:	4614      	mov	r4, r2
 800bf4c:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bf4e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800bf52:	460a      	mov	r2, r1
 800bf54:	9301      	str	r3, [sp, #4]
 800bf56:	4601      	mov	r1, r0
 800bf58:	2301      	movs	r3, #1
 800bf5a:	4809      	ldr	r0, [pc, #36]	; (800bf80 <BSP_I2C4_ReadReg+0x38>)
 800bf5c:	9502      	str	r5, [sp, #8]
 800bf5e:	9400      	str	r4, [sp, #0]
 800bf60:	f004 fe96 	bl	8010c90 <HAL_I2C_Mem_Read>
 800bf64:	b908      	cbnz	r0, 800bf6a <BSP_I2C4_ReadReg+0x22>
}
 800bf66:	b005      	add	sp, #20
 800bf68:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800bf6a:	4805      	ldr	r0, [pc, #20]	; (800bf80 <BSP_I2C4_ReadReg+0x38>)
 800bf6c:	f004 ffe2 	bl	8010f34 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800bf70:	2804      	cmp	r0, #4
 800bf72:	bf0c      	ite	eq
 800bf74:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800bf78:	f06f 0003 	mvnne.w	r0, #3
 800bf7c:	e7f3      	b.n	800bf66 <BSP_I2C4_ReadReg+0x1e>
 800bf7e:	bf00      	nop
 800bf80:	24009cfc 	.word	0x24009cfc

0800bf84 <BSP_I2C4_WriteReg16>:
{
 800bf84:	b530      	push	{r4, r5, lr}
 800bf86:	4614      	mov	r4, r2
 800bf88:	b085      	sub	sp, #20
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bf8a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800bf8e:	460a      	mov	r2, r1
 800bf90:	9301      	str	r3, [sp, #4]
 800bf92:	4601      	mov	r1, r0
 800bf94:	2302      	movs	r3, #2
 800bf96:	4809      	ldr	r0, [pc, #36]	; (800bfbc <BSP_I2C4_WriteReg16+0x38>)
 800bf98:	9502      	str	r5, [sp, #8]
 800bf9a:	9400      	str	r4, [sp, #0]
 800bf9c:	f004 fd4e 	bl	8010a3c <HAL_I2C_Mem_Write>
 800bfa0:	b908      	cbnz	r0, 800bfa6 <BSP_I2C4_WriteReg16+0x22>
}
 800bfa2:	b005      	add	sp, #20
 800bfa4:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800bfa6:	4805      	ldr	r0, [pc, #20]	; (800bfbc <BSP_I2C4_WriteReg16+0x38>)
 800bfa8:	f004 ffc4 	bl	8010f34 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800bfac:	2804      	cmp	r0, #4
 800bfae:	bf0c      	ite	eq
 800bfb0:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800bfb4:	f06f 0003 	mvnne.w	r0, #3
 800bfb8:	e7f3      	b.n	800bfa2 <BSP_I2C4_WriteReg16+0x1e>
 800bfba:	bf00      	nop
 800bfbc:	24009cfc 	.word	0x24009cfc

0800bfc0 <BSP_I2C4_ReadReg16>:
{
 800bfc0:	b530      	push	{r4, r5, lr}
 800bfc2:	4614      	mov	r4, r2
 800bfc4:	b085      	sub	sp, #20
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bfc6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800bfca:	460a      	mov	r2, r1
 800bfcc:	9301      	str	r3, [sp, #4]
 800bfce:	4601      	mov	r1, r0
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	4809      	ldr	r0, [pc, #36]	; (800bff8 <BSP_I2C4_ReadReg16+0x38>)
 800bfd4:	9502      	str	r5, [sp, #8]
 800bfd6:	9400      	str	r4, [sp, #0]
 800bfd8:	f004 fe5a 	bl	8010c90 <HAL_I2C_Mem_Read>
 800bfdc:	b908      	cbnz	r0, 800bfe2 <BSP_I2C4_ReadReg16+0x22>
}
 800bfde:	b005      	add	sp, #20
 800bfe0:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800bfe2:	4805      	ldr	r0, [pc, #20]	; (800bff8 <BSP_I2C4_ReadReg16+0x38>)
 800bfe4:	f004 ffa6 	bl	8010f34 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800bfe8:	2804      	cmp	r0, #4
 800bfea:	bf0c      	ite	eq
 800bfec:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800bff0:	f06f 0003 	mvnne.w	r0, #3
 800bff4:	e7f3      	b.n	800bfde <BSP_I2C4_ReadReg16+0x1e>
 800bff6:	bf00      	nop
 800bff8:	24009cfc 	.word	0x24009cfc

0800bffc <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 800bffc:	f001 bd0c 	b.w	800da18 <HAL_GetTick>

0800c000 <BSP_CAMERA_DeInit>:
  * @brief  DeInitializes the camera.
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_DeInit(uint32_t Instance)
{
 800c000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c002:	b089      	sub	sp, #36	; 0x24
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800c004:	2800      	cmp	r0, #0
 800c006:	d171      	bne.n	800c0ec <BSP_CAMERA_DeInit+0xec>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if((Camera_CompObj == NULL)||(Camera_Drv == NULL))
 800c008:	4e3a      	ldr	r6, [pc, #232]	; (800c0f4 <BSP_CAMERA_DeInit+0xf4>)
 800c00a:	6833      	ldr	r3, [r6, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d06a      	beq.n	800c0e6 <BSP_CAMERA_DeInit+0xe6>
 800c010:	4f39      	ldr	r7, [pc, #228]	; (800c0f8 <BSP_CAMERA_DeInit+0xf8>)
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d066      	beq.n	800c0e6 <BSP_CAMERA_DeInit+0xe6>
    {
      ret = BSP_ERROR_NO_INIT;
    }
    else
    {
      hcamera_dcmi.Instance = DCMI;
 800c018:	4c38      	ldr	r4, [pc, #224]	; (800c0fc <BSP_CAMERA_DeInit+0xfc>)
 800c01a:	4b39      	ldr	r3, [pc, #228]	; (800c100 <BSP_CAMERA_DeInit+0x100>)

  if(Instance >= CAMERA_INSTANCES_NBR)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 800c01c:	4620      	mov	r0, r4
      hcamera_dcmi.Instance = DCMI;
 800c01e:	6023      	str	r3, [r4, #0]
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 800c020:	f001 fe56 	bl	800dcd0 <HAL_DCMI_Stop>
 800c024:	2800      	cmp	r0, #0
 800c026:	d158      	bne.n	800c0da <BSP_CAMERA_DeInit+0xda>
      else if(HAL_DCMI_DisableCROP(&hcamera_dcmi)!= HAL_OK)
 800c028:	4620      	mov	r0, r4
 800c02a:	f001 ff6f 	bl	800df0c <HAL_DCMI_DisableCrop>
 800c02e:	2800      	cmp	r0, #0
 800c030:	d153      	bne.n	800c0da <BSP_CAMERA_DeInit+0xda>
      else if(HAL_DCMI_DeInit(&hcamera_dcmi) != HAL_OK)
 800c032:	4620      	mov	r0, r4
 800c034:	f001 fe40 	bl	800dcb8 <HAL_DCMI_DeInit>
 800c038:	2800      	cmp	r0, #0
 800c03a:	d14e      	bne.n	800c0da <BSP_CAMERA_DeInit+0xda>
static void DCMI_MspDeInit(DCMI_HandleTypeDef *hdcmi)
{
  GPIO_InitTypeDef gpio_init_structure;

  /* Disable NVIC  for DCMI transfer complete interrupt */
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 800c03c:	204e      	movs	r0, #78	; 0x4e
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);



  /* Disable DCMI clock */
  __HAL_RCC_DCMI_CLK_DISABLE();
 800c03e:	4d31      	ldr	r5, [pc, #196]	; (800c104 <BSP_CAMERA_DeInit+0x104>)
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 800c040:	f001 fd6e 	bl	800db20 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA2_Stream3_IRQn);
 800c044:	203b      	movs	r0, #59	; 0x3b
 800c046:	f001 fd6b 	bl	800db20 <HAL_NVIC_DisableIRQ>
  (void)HAL_DMA_DeInit(hdcmi->DMA_Handle);
 800c04a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c04c:	f002 fae2 	bl	800e614 <HAL_DMA_DeInit>
  HAL_GPIO_DeInit(GPIOA, gpio_init_structure.Pin);
 800c050:	2150      	movs	r1, #80	; 0x50
 800c052:	482d      	ldr	r0, [pc, #180]	; (800c108 <BSP_CAMERA_DeInit+0x108>)
 800c054:	f004 faf2 	bl	801063c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, gpio_init_structure.Pin);
 800c058:	f44f 7160 	mov.w	r1, #896	; 0x380
 800c05c:	482b      	ldr	r0, [pc, #172]	; (800c10c <BSP_CAMERA_DeInit+0x10c>)
 800c05e:	f004 faed 	bl	801063c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800c062:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 800c066:	482a      	ldr	r0, [pc, #168]	; (800c110 <BSP_CAMERA_DeInit+0x110>)
 800c068:	f004 fae8 	bl	801063c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 800c06c:	2108      	movs	r1, #8
 800c06e:	4829      	ldr	r0, [pc, #164]	; (800c114 <BSP_CAMERA_DeInit+0x114>)
 800c070:	f004 fae4 	bl	801063c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);
 800c074:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c078:	4827      	ldr	r0, [pc, #156]	; (800c118 <BSP_CAMERA_DeInit+0x118>)
 800c07a:	f004 fadf 	bl	801063c <HAL_GPIO_DeInit>
  __HAL_RCC_DCMI_CLK_DISABLE();
 800c07e:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 800c082:	6830      	ldr	r0, [r6, #0]
  __HAL_RCC_DCMI_CLK_DISABLE();
 800c084:	f023 0301 	bic.w	r3, r3, #1
 800c088:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	4798      	blx	r3
 800c092:	4604      	mov	r4, r0
 800c094:	bb20      	cbnz	r0, 800c0e0 <BSP_CAMERA_DeInit+0xe0>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c096:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c09a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c09e:	2101      	movs	r1, #1
 800c0a0:	2600      	movs	r6, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c0a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c0a6:	2702      	movs	r7, #2
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c0a8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800c0ac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800c0b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c0b8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c0ba:	a902      	add	r1, sp, #8
 800c0bc:	4817      	ldr	r0, [pc, #92]	; (800c11c <BSP_CAMERA_DeInit+0x11c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c0be:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c0c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c0c4:	f004 f974 	bl	80103b0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c0ce:	4813      	ldr	r0, [pc, #76]	; (800c11c <BSP_CAMERA_DeInit+0x11c>)
 800c0d0:	f004 fb82 	bl	80107d8 <HAL_GPIO_WritePin>
}
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	b009      	add	sp, #36	; 0x24
 800c0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = BSP_ERROR_PERIPH_FAILURE;
 800c0da:	f06f 0403 	mvn.w	r4, #3
 800c0de:	e7f9      	b.n	800c0d4 <BSP_CAMERA_DeInit+0xd4>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0e0:	f06f 0404 	mvn.w	r4, #4
  return ret;
 800c0e4:	e7f6      	b.n	800c0d4 <BSP_CAMERA_DeInit+0xd4>
      ret = BSP_ERROR_NO_INIT;
 800c0e6:	f04f 34ff 	mov.w	r4, #4294967295
 800c0ea:	e7f3      	b.n	800c0d4 <BSP_CAMERA_DeInit+0xd4>
    ret = BSP_ERROR_WRONG_PARAM;
 800c0ec:	f06f 0401 	mvn.w	r4, #1
 800c0f0:	e7f0      	b.n	800c0d4 <BSP_CAMERA_DeInit+0xd4>
 800c0f2:	bf00      	nop
 800c0f4:	24009d74 	.word	0x24009d74
 800c0f8:	24009dac 	.word	0x24009dac
 800c0fc:	24009e04 	.word	0x24009e04
 800c100:	48020000 	.word	0x48020000
 800c104:	58024400 	.word	0x58024400
 800c108:	58020000 	.word	0x58020000
 800c10c:	58020400 	.word	0x58020400
 800c110:	58020800 	.word	0x58020800
 800c114:	58020c00 	.word	0x58020c00
 800c118:	58021800 	.word	0x58021800
 800c11c:	58022400 	.word	0x58022400

0800c120 <MX_DCMI_Init>:
  hdcmi->Init.HSPolarity       = HSPolarity;
 800c120:	4909      	ldr	r1, [pc, #36]	; (800c148 <MX_DCMI_Init+0x28>)
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 800c122:	2200      	movs	r2, #0
{
 800c124:	b510      	push	{r4, lr}
  hdcmi->Init.HSPolarity       = HSPolarity;
 800c126:	6809      	ldr	r1, [r1, #0]
  hdcmi->Instance              = DCMI;
 800c128:	4c08      	ldr	r4, [pc, #32]	; (800c14c <MX_DCMI_Init+0x2c>)
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 800c12a:	6042      	str	r2, [r0, #4]
  hdcmi->Instance              = DCMI;
 800c12c:	6004      	str	r4, [r0, #0]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 800c12e:	2480      	movs	r4, #128	; 0x80
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800c130:	6182      	str	r2, [r0, #24]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 800c132:	60c4      	str	r4, [r0, #12]
  hdcmi->Init.HSPolarity       = HSPolarity;
 800c134:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 800c138:	2120      	movs	r1, #32
 800c13a:	6081      	str	r1, [r0, #8]
  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 800c13c:	f001 fd6c 	bl	800dc18 <HAL_DCMI_Init>
}
 800c140:	3800      	subs	r0, #0
 800c142:	bf18      	it	ne
 800c144:	2001      	movne	r0, #1
 800c146:	bd10      	pop	{r4, pc}
 800c148:	24009db0 	.word	0x24009db0
 800c14c:	48020000 	.word	0x48020000

0800c150 <BSP_CAMERA_Init>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800c150:	2800      	cmp	r0, #0
 800c152:	f040 8210 	bne.w	800c576 <BSP_CAMERA_Init+0x426>
{
 800c156:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_DCMI_CLK_ENABLE();
 800c15a:	4ccb      	ldr	r4, [pc, #812]	; (800c488 <BSP_CAMERA_Init+0x338>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800c15c:	260d      	movs	r6, #13
 800c15e:	4691      	mov	r9, r2
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 800c160:	2250      	movs	r2, #80	; 0x50
  __HAL_RCC_DCMI_CLK_ENABLE();
 800c162:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800c166:	4605      	mov	r5, r0
 800c168:	460f      	mov	r7, r1
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800c16a:	48c8      	ldr	r0, [pc, #800]	; (800c48c <BSP_CAMERA_Init+0x33c>)
  __HAL_RCC_DCMI_CLK_ENABLE();
 800c16c:	f043 0301 	orr.w	r3, r3, #1
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 800c170:	f8df 8364 	ldr.w	r8, [pc, #868]	; 800c4d8 <BSP_CAMERA_Init+0x388>
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800c174:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
{
 800c178:	ed2d 8b02 	vpush	{d8}
  __HAL_RCC_DCMI_CLK_ENABLE();
 800c17c:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
{
 800c180:	b093      	sub	sp, #76	; 0x4c
  __HAL_RCC_DCMI_CLK_ENABLE();
 800c182:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800c186:	a90c      	add	r1, sp, #48	; 0x30
  __HAL_RCC_DCMI_CLK_ENABLE();
 800c188:	f003 0301 	and.w	r3, r3, #1
 800c18c:	9303      	str	r3, [sp, #12]
 800c18e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c190:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800c194:	f043 0302 	orr.w	r3, r3, #2
 800c198:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800c19c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800c1a0:	f003 0302 	and.w	r3, r3, #2
 800c1a4:	9304      	str	r3, [sp, #16]
 800c1a6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1a8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800c1ac:	f043 0301 	orr.w	r3, r3, #1
 800c1b0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800c1b4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800c1b8:	f003 0301 	and.w	r3, r3, #1
 800c1bc:	9305      	str	r3, [sp, #20]
 800c1be:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c1c0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800c1c4:	f043 0302 	orr.w	r3, r3, #2
 800c1c8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800c1cc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800c1d0:	f003 0302 	and.w	r3, r3, #2
 800c1d4:	9306      	str	r3, [sp, #24]
 800c1d6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c1d8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800c1dc:	f043 0304 	orr.w	r3, r3, #4
 800c1e0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800c1e4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800c1e8:	f003 0304 	and.w	r3, r3, #4
 800c1ec:	9307      	str	r3, [sp, #28]
 800c1ee:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c1f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800c1f4:	f043 0308 	orr.w	r3, r3, #8
 800c1f8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800c1fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800c200:	f003 0308 	and.w	r3, r3, #8
 800c204:	9308      	str	r3, [sp, #32]
 800c206:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c208:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800c20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c210:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800c214:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800c218:	9610      	str	r6, [sp, #64]	; 0x40
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c21a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 800c21e:	ed9f 8b94 	vldr	d8, [pc, #592]	; 800c470 <BSP_CAMERA_Init+0x320>
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c222:	9309      	str	r3, [sp, #36]	; 0x24
 800c224:	9b09      	ldr	r3, [sp, #36]	; 0x24
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 800c226:	2302      	movs	r3, #2
 800c228:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
 800c22c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800c230:	f004 f8be 	bl	80103b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 800c234:	f44f 7260 	mov.w	r2, #896	; 0x380
 800c238:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 800c23a:	a90c      	add	r1, sp, #48	; 0x30
 800c23c:	4894      	ldr	r0, [pc, #592]	; (800c490 <BSP_CAMERA_Init+0x340>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800c23e:	9610      	str	r6, [sp, #64]	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 800c240:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c244:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 800c248:	f004 f8b2 	bl	80103b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 800c24c:	f44f 622c 	mov.w	r2, #2752	; 0xac0
 800c250:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800c252:	a90c      	add	r1, sp, #48	; 0x30
 800c254:	488f      	ldr	r0, [pc, #572]	; (800c494 <BSP_CAMERA_Init+0x344>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800c256:	9610      	str	r6, [sp, #64]	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 800c258:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c25c:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800c260:	f004 f8a6 	bl	80103b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_3;
 800c264:	2208      	movs	r2, #8
 800c266:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800c268:	a90c      	add	r1, sp, #48	; 0x30
 800c26a:	488b      	ldr	r0, [pc, #556]	; (800c498 <BSP_CAMERA_Init+0x348>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800c26c:	9610      	str	r6, [sp, #64]	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_3;
 800c26e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c272:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800c276:	f004 f89b 	bl	80103b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_10;
 800c27a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c27e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800c280:	a90c      	add	r1, sp, #48	; 0x30
 800c282:	4886      	ldr	r0, [pc, #536]	; (800c49c <BSP_CAMERA_Init+0x34c>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800c284:	9610      	str	r6, [sp, #64]	; 0x40
  hdma_handler.Init.Priority            = DMA_PRIORITY_VERY_HIGH;//DMA_PRIORITY_HIGH;
 800c286:	f44f 7680 	mov.w	r6, #256	; 0x100
  gpio_init_structure.Pin       = GPIO_PIN_10;
 800c28a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c28e:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800c292:	f004 f88d 	bl	80103b0 <HAL_GPIO_Init>
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 800c296:	4b82      	ldr	r3, [pc, #520]	; (800c4a0 <BSP_CAMERA_Init+0x350>)
 800c298:	224b      	movs	r2, #75	; 0x4b
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c29a:	f44f 6080 	mov.w	r0, #1024	; 0x400
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800c29e:	f04f 0c04 	mov.w	ip, #4
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800c2a2:	210f      	movs	r1, #15
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 800c2a4:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c2a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800c2aa:	f8c3 a018 	str.w	sl, [r3, #24]
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 800c2ae:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 800c2b2:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c2b6:	e9c3 0204 	strd	r0, r2, [r3, #16]
  hdma_handler.Init.Priority            = DMA_PRIORITY_VERY_HIGH;//DMA_PRIORITY_HIGH;
 800c2ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800c2be:	204e      	movs	r0, #78	; 0x4e
  hdma_handler.Init.Priority            = DMA_PRIORITY_VERY_HIGH;//DMA_PRIORITY_HIGH;
 800c2c0:	e9c3 6207 	strd	r6, r2, [r3, #28]
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800c2c4:	2203      	movs	r2, #3
 800c2c6:	e9c3 c209 	strd	ip, r2, [r3, #36]	; 0x24
  hdma_handler.Instance                 = DMA2_Stream3;
 800c2ca:	4a76      	ldr	r2, [pc, #472]	; (800c4a4 <BSP_CAMERA_Init+0x354>)
 800c2cc:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800c2ce:	462a      	mov	r2, r5
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 800c2d0:	e9c3 5502 	strd	r5, r5, [r3, #8]
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800c2d4:	e9c3 550b 	strd	r5, r5, [r3, #44]	; 0x2c
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800c2d8:	f001 fbd6 	bl	800da88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800c2dc:	204e      	movs	r0, #78	; 0x4e
 800c2de:	f001 fc11 	bl	800db04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800c2e2:	462a      	mov	r2, r5
 800c2e4:	210f      	movs	r1, #15
 800c2e6:	203b      	movs	r0, #59	; 0x3b
 800c2e8:	f001 fbce 	bl	800da88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800c2ec:	203b      	movs	r0, #59	; 0x3b
 800c2ee:	f001 fc09 	bl	800db04 <HAL_NVIC_EnableIRQ>
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 800c2f2:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 800c2f6:	f001 ff1f 	bl	800e138 <HAL_DMA_Init>
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800c2fa:	4640      	mov	r0, r8
 800c2fc:	f7ff ff10 	bl	800c120 <MX_DCMI_Init>
 800c300:	4605      	mov	r5, r0
 800c302:	2800      	cmp	r0, #0
 800c304:	f040 80ad 	bne.w	800c462 <BSP_CAMERA_Init+0x312>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c308:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c30c:	a90c      	add	r1, sp, #48	; 0x30
 800c30e:	4866      	ldr	r0, [pc, #408]	; (800c4a8 <BSP_CAMERA_Init+0x358>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800c314:	4e65      	ldr	r6, [pc, #404]	; (800c4ac <BSP_CAMERA_Init+0x35c>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800c316:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 800c4dc <BSP_CAMERA_Init+0x38c>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c31a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800c31e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  IOCtx.GetTick     = BSP_GetTick;
 800c322:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c4e0 <BSP_CAMERA_Init+0x390>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c326:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c32a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800c478 <BSP_CAMERA_Init+0x328>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c32e:	930a      	str	r3, [sp, #40]	; 0x28
 800c330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c332:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c336:	ed9f 7b52 	vldr	d7, [pc, #328]	; 800c480 <BSP_CAMERA_Init+0x330>
 800c33a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c33e:	f004 f837 	bl	80103b0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 800c342:	2201      	movs	r2, #1
 800c344:	4651      	mov	r1, sl
 800c346:	4858      	ldr	r0, [pc, #352]	; (800c4a8 <BSP_CAMERA_Init+0x358>)
 800c348:	f004 fa46 	bl	80107d8 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 800c34c:	2064      	movs	r0, #100	; 0x64
 800c34e:	f001 fb69 	bl	800da24 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 800c352:	462a      	mov	r2, r5
 800c354:	4651      	mov	r1, sl
 800c356:	4854      	ldr	r0, [pc, #336]	; (800c4a8 <BSP_CAMERA_Init+0x358>)
 800c358:	f004 fa3e 	bl	80107d8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800c35c:	2014      	movs	r0, #20
 800c35e:	f001 fb61 	bl	800da24 <HAL_Delay>
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 800c362:	2260      	movs	r2, #96	; 0x60
  IOCtx.Init        = BSP_I2C4_Init;
 800c364:	4b52      	ldr	r3, [pc, #328]	; (800c4b0 <BSP_CAMERA_Init+0x360>)
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800c366:	a90c      	add	r1, sp, #48	; 0x30
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 800c368:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800c36c:	4630      	mov	r0, r6
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800c36e:	4a51      	ldr	r2, [pc, #324]	; (800c4b4 <BSP_CAMERA_Init+0x364>)
  IOCtx.GetTick     = BSP_GetTick;
 800c370:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800c374:	9210      	str	r2, [sp, #64]	; 0x40
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800c376:	4a50      	ldr	r2, [pc, #320]	; (800c4b8 <BSP_CAMERA_Init+0x368>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800c378:	e9cd 3b0c 	strd	r3, fp, [sp, #48]	; 0x30
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800c37c:	920f      	str	r2, [sp, #60]	; 0x3c
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800c37e:	f7fd fa15 	bl	80097ac <OV9655_RegisterBusIO>
 800c382:	2800      	cmp	r0, #0
 800c384:	f040 80b0 	bne.w	800c4e8 <BSP_CAMERA_Init+0x398>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV9655_ReadID(&OV9655Obj, &CameraId) != OV9655_OK)
 800c388:	4c4c      	ldr	r4, [pc, #304]	; (800c4bc <BSP_CAMERA_Init+0x36c>)
 800c38a:	4630      	mov	r0, r6
 800c38c:	4621      	mov	r1, r4
 800c38e:	f7fd f959 	bl	8009644 <OV9655_ReadID>
 800c392:	2800      	cmp	r0, #0
 800c394:	f040 80a8 	bne.w	800c4e8 <BSP_CAMERA_Init+0x398>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if((CameraId != OV9655_ID) && (CameraId != OV9655_ID_2))
 800c398:	6821      	ldr	r1, [r4, #0]
 800c39a:	4a49      	ldr	r2, [pc, #292]	; (800c4c0 <BSP_CAMERA_Init+0x370>)
 800c39c:	440a      	add	r2, r1
 800c39e:	2a01      	cmp	r2, #1
 800c3a0:	f200 80a2 	bhi.w	800c4e8 <BSP_CAMERA_Init+0x398>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800c3a4:	4a47      	ldr	r2, [pc, #284]	; (800c4c4 <BSP_CAMERA_Init+0x374>)
      Camera_CompObj = &OV9655Obj;
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800c3a6:	4630      	mov	r0, r6
      Camera_CompObj = &OV9655Obj;
 800c3a8:	4d47      	ldr	r5, [pc, #284]	; (800c4c8 <BSP_CAMERA_Init+0x378>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800c3aa:	4639      	mov	r1, r7
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800c3ac:	f8df a134 	ldr.w	sl, [pc, #308]	; 800c4e4 <BSP_CAMERA_Init+0x394>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800c3b0:	6813      	ldr	r3, [r2, #0]
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800c3b2:	f8ca 2000 	str.w	r2, [sl]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800c3b6:	464a      	mov	r2, r9
      Camera_CompObj = &OV9655Obj;
 800c3b8:	602e      	str	r6, [r5, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800c3ba:	4798      	blx	r3
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	f040 8093 	bne.w	800c4e8 <BSP_CAMERA_Init+0x398>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV9655_OK)
 800c3c2:	f8da 3000 	ldr.w	r3, [sl]
 800c3c6:	6828      	ldr	r0, [r5, #0]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	4940      	ldr	r1, [pc, #256]	; (800c4cc <BSP_CAMERA_Init+0x37c>)
 800c3cc:	4798      	blx	r3
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	f040 808a 	bne.w	800c4e8 <BSP_CAMERA_Init+0x398>
        if((CameraId == OV9655_ID) || (CameraId == OV9655_ID_2))
 800c3d4:	6822      	ldr	r2, [r4, #0]
 800c3d6:	4b3a      	ldr	r3, [pc, #232]	; (800c4c0 <BSP_CAMERA_Init+0x370>)
 800c3d8:	4413      	add	r3, r2
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d839      	bhi.n	800c452 <BSP_CAMERA_Init+0x302>
          if(Resolution == CAMERA_R480x272)
 800c3de:	2f02      	cmp	r7, #2
 800c3e0:	f000 80b5 	beq.w	800c54e <BSP_CAMERA_Init+0x3fe>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c3e4:	4b28      	ldr	r3, [pc, #160]	; (800c488 <BSP_CAMERA_Init+0x338>)
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c3e6:	a90c      	add	r1, sp, #48	; 0x30
 800c3e8:	482f      	ldr	r0, [pc, #188]	; (800c4a8 <BSP_CAMERA_Init+0x358>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c3ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c3ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c3f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c3fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c3fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c402:	930b      	str	r3, [sp, #44]	; 0x2c
 800c404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c406:	2301      	movs	r3, #1
 800c408:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c40c:	2302      	movs	r3, #2
 800c40e:	2200      	movs	r2, #0
 800c410:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c414:	f003 ffcc 	bl	80103b0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 800c418:	2201      	movs	r2, #1
 800c41a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c41e:	4822      	ldr	r0, [pc, #136]	; (800c4a8 <BSP_CAMERA_Init+0x358>)
 800c420:	f004 f9da 	bl	80107d8 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 800c424:	2064      	movs	r0, #100	; 0x64
 800c426:	f001 fafd 	bl	800da24 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 800c42a:	2200      	movs	r2, #0
 800c42c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c430:	481d      	ldr	r0, [pc, #116]	; (800c4a8 <BSP_CAMERA_Init+0x358>)
 800c432:	f004 f9d1 	bl	80107d8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800c436:	2014      	movs	r0, #20
 800c438:	f001 faf4 	bl	800da24 <HAL_Delay>
          Camera_Ctx[Instance].CameraId  = CameraId;
 800c43c:	4b24      	ldr	r3, [pc, #144]	; (800c4d0 <BSP_CAMERA_Init+0x380>)
 800c43e:	6822      	ldr	r2, [r4, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 800c440:	2000      	movs	r0, #0
 800c442:	e9c3 7901 	strd	r7, r9, [r3, #4]
          Camera_Ctx[Instance].CameraId  = CameraId;
 800c446:	601a      	str	r2, [r3, #0]
}
 800c448:	b013      	add	sp, #76	; 0x4c
 800c44a:	ecbd 8b02 	vpop	{d8}
 800c44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 800c452:	4b20      	ldr	r3, [pc, #128]	; (800c4d4 <BSP_CAMERA_Init+0x384>)
 800c454:	2240      	movs	r2, #64	; 0x40
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800c456:	4820      	ldr	r0, [pc, #128]	; (800c4d8 <BSP_CAMERA_Init+0x388>)
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 800c458:	601a      	str	r2, [r3, #0]
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800c45a:	f7ff fe61 	bl	800c120 <MX_DCMI_Init>
 800c45e:	2800      	cmp	r0, #0
 800c460:	d0c0      	beq.n	800c3e4 <BSP_CAMERA_Init+0x294>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c462:	f06f 0003 	mvn.w	r0, #3
}
 800c466:	b013      	add	sp, #76	; 0x4c
 800c468:	ecbd 8b02 	vpop	{d8}
 800c46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c470:	00000001 	.word	0x00000001
 800c474:	00000003 	.word	0x00000003
 800c478:	00004000 	.word	0x00004000
 800c47c:	00000001 	.word	0x00000001
 800c480:	00000000 	.word	0x00000000
 800c484:	00000002 	.word	0x00000002
 800c488:	58024400 	.word	0x58024400
 800c48c:	58020000 	.word	0x58020000
 800c490:	58020400 	.word	0x58020400
 800c494:	58020800 	.word	0x58020800
 800c498:	58020c00 	.word	0x58020c00
 800c49c:	58021800 	.word	0x58021800
 800c4a0:	24009e54 	.word	0x24009e54
 800c4a4:	40020458 	.word	0x40020458
 800c4a8:	58022400 	.word	0x58022400
 800c4ac:	24009ddc 	.word	0x24009ddc
 800c4b0:	0800b83d 	.word	0x0800b83d
 800c4b4:	0800bf49 	.word	0x0800bf49
 800c4b8:	0800bf0d 	.word	0x0800bf0d
 800c4bc:	24009d48 	.word	0x24009d48
 800c4c0:	ffff69aa 	.word	0xffff69aa
 800c4c4:	24007414 	.word	0x24007414
 800c4c8:	24009d74 	.word	0x24009d74
 800c4cc:	24009d4c 	.word	0x24009d4c
 800c4d0:	24009d78 	.word	0x24009d78
 800c4d4:	24009db0 	.word	0x24009db0
 800c4d8:	24009e04 	.word	0x24009e04
 800c4dc:	0800b7a9 	.word	0x0800b7a9
 800c4e0:	0800bffd 	.word	0x0800bffd
 800c4e4:	24009dac 	.word	0x24009dac
  OV5640_IO_t              IOCtx;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
  IOCtx.Init        = BSP_I2C4_Init;
 800c4e8:	4b24      	ldr	r3, [pc, #144]	; (800c57c <BSP_CAMERA_Init+0x42c>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800c4ea:	a90c      	add	r1, sp, #48	; 0x30
 800c4ec:	4d24      	ldr	r5, [pc, #144]	; (800c580 <BSP_CAMERA_Init+0x430>)
  IOCtx.GetTick     = BSP_GetTick;
 800c4ee:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800c4f2:	4628      	mov	r0, r5
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800c4f4:	e9cd 3b0c 	strd	r3, fp, [sp, #48]	; 0x30
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800c4f8:	4b22      	ldr	r3, [pc, #136]	; (800c584 <BSP_CAMERA_Init+0x434>)
 800c4fa:	9310      	str	r3, [sp, #64]	; 0x40
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 800c4fc:	4b22      	ldr	r3, [pc, #136]	; (800c588 <BSP_CAMERA_Init+0x438>)
 800c4fe:	930f      	str	r3, [sp, #60]	; 0x3c
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 800c500:	2378      	movs	r3, #120	; 0x78
 800c502:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800c506:	f7fc fc4f 	bl	8008da8 <OV5640_RegisterBusIO>
 800c50a:	b9e8      	cbnz	r0, 800c548 <BSP_CAMERA_Init+0x3f8>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV5640_ReadID(&OV5640Obj, &CameraId) != OV5640_OK)
 800c50c:	4c1f      	ldr	r4, [pc, #124]	; (800c58c <BSP_CAMERA_Init+0x43c>)
 800c50e:	4628      	mov	r0, r5
 800c510:	4621      	mov	r1, r4
 800c512:	f7fc fa25 	bl	8008960 <OV5640_ReadID>
 800c516:	b9b8      	cbnz	r0, 800c548 <BSP_CAMERA_Init+0x3f8>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if(CameraId != OV5640_ID)
 800c518:	6822      	ldr	r2, [r4, #0]
 800c51a:	f245 6340 	movw	r3, #22080	; 0x5640
 800c51e:	429a      	cmp	r2, r3
 800c520:	d112      	bne.n	800c548 <BSP_CAMERA_Init+0x3f8>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
      Camera_CompObj = &OV5640Obj;
 800c522:	4e1b      	ldr	r6, [pc, #108]	; (800c590 <BSP_CAMERA_Init+0x440>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800c524:	4628      	mov	r0, r5
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 800c526:	4b1b      	ldr	r3, [pc, #108]	; (800c594 <BSP_CAMERA_Init+0x444>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800c528:	464a      	mov	r2, r9
      Camera_CompObj = &OV5640Obj;
 800c52a:	6035      	str	r5, [r6, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800c52c:	4639      	mov	r1, r7
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 800c52e:	4d1a      	ldr	r5, [pc, #104]	; (800c598 <BSP_CAMERA_Init+0x448>)
 800c530:	602b      	str	r3, [r5, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4798      	blx	r3
 800c536:	b938      	cbnz	r0, 800c548 <BSP_CAMERA_Init+0x3f8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV5640_OK)
 800c538:	682b      	ldr	r3, [r5, #0]
 800c53a:	6830      	ldr	r0, [r6, #0]
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	4917      	ldr	r1, [pc, #92]	; (800c59c <BSP_CAMERA_Init+0x44c>)
 800c540:	4798      	blx	r3
 800c542:	2800      	cmp	r0, #0
 800c544:	f43f af46 	beq.w	800c3d4 <BSP_CAMERA_Init+0x284>
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c548:	f06f 0006 	mvn.w	r0, #6
 800c54c:	e77c      	b.n	800c448 <BSP_CAMERA_Init+0x2f8>
            if(HAL_DCMI_ConfigCROP(&hcamera_dcmi,           /* Crop in the middle of the VGA picture */
 800c54e:	f240 130f 	movw	r3, #271	; 0x10f
 800c552:	2268      	movs	r2, #104	; 0x68
 800c554:	2150      	movs	r1, #80	; 0x50
 800c556:	4812      	ldr	r0, [pc, #72]	; (800c5a0 <BSP_CAMERA_Init+0x450>)
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	f240 33bf 	movw	r3, #959	; 0x3bf
 800c55e:	f001 fcb7 	bl	800ded0 <HAL_DCMI_ConfigCrop>
 800c562:	2800      	cmp	r0, #0
 800c564:	f47f af7d 	bne.w	800c462 <BSP_CAMERA_Init+0x312>
              if(HAL_DCMI_EnableCROP(&hcamera_dcmi) != HAL_OK)
 800c568:	480d      	ldr	r0, [pc, #52]	; (800c5a0 <BSP_CAMERA_Init+0x450>)
 800c56a:	f001 fce7 	bl	800df3c <HAL_DCMI_EnableCrop>
 800c56e:	2800      	cmp	r0, #0
 800c570:	f47f af77 	bne.w	800c462 <BSP_CAMERA_Init+0x312>
 800c574:	e736      	b.n	800c3e4 <BSP_CAMERA_Init+0x294>
    ret = BSP_ERROR_WRONG_PARAM;
 800c576:	f06f 0001 	mvn.w	r0, #1
}
 800c57a:	4770      	bx	lr
 800c57c:	0800b83d 	.word	0x0800b83d
 800c580:	24009db4 	.word	0x24009db4
 800c584:	0800bfc1 	.word	0x0800bfc1
 800c588:	0800bf85 	.word	0x0800bf85
 800c58c:	24009d48 	.word	0x24009d48
 800c590:	24009d74 	.word	0x24009d74
 800c594:	240073d0 	.word	0x240073d0
 800c598:	24009dac 	.word	0x24009dac
 800c59c:	24009d4c 	.word	0x24009d4c
 800c5a0:	24009e04 	.word	0x24009e04

0800c5a4 <BSP_CAMERA_Suspend>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800c5a4:	b948      	cbnz	r0, 800c5ba <BSP_CAMERA_Suspend+0x16>
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 800c5a6:	4806      	ldr	r0, [pc, #24]	; (800c5c0 <BSP_CAMERA_Suspend+0x1c>)
{
 800c5a8:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 800c5aa:	f001 fbd3 	bl	800dd54 <HAL_DCMI_Suspend>
    return BSP_ERROR_PERIPH_FAILURE;
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	bf0c      	ite	eq
 800c5b2:	2000      	moveq	r0, #0
 800c5b4:	f06f 0003 	mvnne.w	r0, #3
}
 800c5b8:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800c5ba:	f06f 0001 	mvn.w	r0, #1
}
 800c5be:	4770      	bx	lr
 800c5c0:	24009e04 	.word	0x24009e04

0800c5c4 <BSP_CAMERA_Resume>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800c5c4:	b948      	cbnz	r0, 800c5da <BSP_CAMERA_Resume+0x16>
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 800c5c6:	4806      	ldr	r0, [pc, #24]	; (800c5e0 <BSP_CAMERA_Resume+0x1c>)
{
 800c5c8:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 800c5ca:	f001 fc07 	bl	800dddc <HAL_DCMI_Resume>
    ret = BSP_ERROR_NONE;
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	bf14      	ite	ne
 800c5d2:	f06f 0003 	mvnne.w	r0, #3
 800c5d6:	2000      	moveq	r0, #0
}
 800c5d8:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800c5da:	f06f 0001 	mvn.w	r0, #1
}
 800c5de:	4770      	bx	lr
 800c5e0:	24009e04 	.word	0x24009e04

0800c5e4 <BSP_CAMERA_SetBrightness>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Brightness < CAMERA_BRIGHTNESS_MIN) && (Brightness > CAMERA_BRIGHTNESS_MAX)))
 800c5e4:	b988      	cbnz	r0, 800c60a <BSP_CAMERA_SetBrightness+0x26>
{
 800c5e6:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.Brightness == 0U)
 800c5e8:	4b0c      	ldr	r3, [pc, #48]	; (800c61c <BSP_CAMERA_SetBrightness+0x38>)
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	b183      	cbz	r3, 800c610 <BSP_CAMERA_SetBrightness+0x2c>
  else if(Camera_Drv->SetBrightness(Camera_CompObj, Brightness) < 0)
 800c5ee:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <BSP_CAMERA_SetBrightness+0x3c>)
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	4a0c      	ldr	r2, [pc, #48]	; (800c624 <BSP_CAMERA_SetBrightness+0x40>)
 800c5f4:	460d      	mov	r5, r1
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	6810      	ldr	r0, [r2, #0]
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	4798      	blx	r3
 800c5fe:	2800      	cmp	r0, #0
 800c600:	db09      	blt.n	800c616 <BSP_CAMERA_SetBrightness+0x32>
    Camera_Ctx[Instance].Brightness = Brightness;
 800c602:	4b09      	ldr	r3, [pc, #36]	; (800c628 <BSP_CAMERA_SetBrightness+0x44>)
    ret = BSP_ERROR_NONE;
 800c604:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Brightness = Brightness;
 800c606:	615d      	str	r5, [r3, #20]
}
 800c608:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800c60a:	f06f 0001 	mvn.w	r0, #1
}
 800c60e:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800c610:	f06f 000a 	mvn.w	r0, #10
}
 800c614:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c616:	f06f 0004 	mvn.w	r0, #4
}
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	24009d4c 	.word	0x24009d4c
 800c620:	24009dac 	.word	0x24009dac
 800c624:	24009d74 	.word	0x24009d74
 800c628:	24009d78 	.word	0x24009d78

0800c62c <BSP_CAMERA_SetContrast>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Contrast < CAMERA_CONTRAST_MIN) && (Contrast > CAMERA_CONTRAST_MAX)))
 800c62c:	b988      	cbnz	r0, 800c652 <BSP_CAMERA_SetContrast+0x26>
{
 800c62e:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.Contrast == 0U)
 800c630:	4b0c      	ldr	r3, [pc, #48]	; (800c664 <BSP_CAMERA_SetContrast+0x38>)
 800c632:	695b      	ldr	r3, [r3, #20]
 800c634:	b183      	cbz	r3, 800c658 <BSP_CAMERA_SetContrast+0x2c>
  else if(Camera_Drv->SetContrast(Camera_CompObj, Contrast)  < 0)
 800c636:	4b0c      	ldr	r3, [pc, #48]	; (800c668 <BSP_CAMERA_SetContrast+0x3c>)
 800c638:	4604      	mov	r4, r0
 800c63a:	4a0c      	ldr	r2, [pc, #48]	; (800c66c <BSP_CAMERA_SetContrast+0x40>)
 800c63c:	460d      	mov	r5, r1
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	6810      	ldr	r0, [r2, #0]
 800c642:	6a1b      	ldr	r3, [r3, #32]
 800c644:	4798      	blx	r3
 800c646:	2800      	cmp	r0, #0
 800c648:	db09      	blt.n	800c65e <BSP_CAMERA_SetContrast+0x32>
    Camera_Ctx[Instance].Contrast = Contrast;
 800c64a:	4b09      	ldr	r3, [pc, #36]	; (800c670 <BSP_CAMERA_SetContrast+0x44>)
    ret = BSP_ERROR_NONE;
 800c64c:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Contrast = Contrast;
 800c64e:	61dd      	str	r5, [r3, #28]
}
 800c650:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800c652:	f06f 0001 	mvn.w	r0, #1
}
 800c656:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800c658:	f06f 000a 	mvn.w	r0, #10
}
 800c65c:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c65e:	f06f 0004 	mvn.w	r0, #4
}
 800c662:	bd38      	pop	{r3, r4, r5, pc}
 800c664:	24009d4c 	.word	0x24009d4c
 800c668:	24009dac 	.word	0x24009dac
 800c66c:	24009d74 	.word	0x24009d74
 800c670:	24009d78 	.word	0x24009d78

0800c674 <BSP_CAMERA_SetMirrorFlip>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800c674:	b988      	cbnz	r0, 800c69a <BSP_CAMERA_SetMirrorFlip+0x26>
{
 800c676:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.MirrorFlip == 0U)
 800c678:	4b0c      	ldr	r3, [pc, #48]	; (800c6ac <BSP_CAMERA_SetMirrorFlip+0x38>)
 800c67a:	69db      	ldr	r3, [r3, #28]
 800c67c:	b183      	cbz	r3, 800c6a0 <BSP_CAMERA_SetMirrorFlip+0x2c>
  else if(Camera_Drv->MirrorFlipConfig(Camera_CompObj, MirrorFlip)  < 0)
 800c67e:	4b0c      	ldr	r3, [pc, #48]	; (800c6b0 <BSP_CAMERA_SetMirrorFlip+0x3c>)
 800c680:	4604      	mov	r4, r0
 800c682:	4a0c      	ldr	r2, [pc, #48]	; (800c6b4 <BSP_CAMERA_SetMirrorFlip+0x40>)
 800c684:	460d      	mov	r5, r1
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	6810      	ldr	r0, [r2, #0]
 800c68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c68c:	4798      	blx	r3
 800c68e:	2800      	cmp	r0, #0
 800c690:	db09      	blt.n	800c6a6 <BSP_CAMERA_SetMirrorFlip+0x32>
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 800c692:	4b09      	ldr	r3, [pc, #36]	; (800c6b8 <BSP_CAMERA_SetMirrorFlip+0x44>)
    ret = BSP_ERROR_NONE;
 800c694:	4620      	mov	r0, r4
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 800c696:	625d      	str	r5, [r3, #36]	; 0x24
}
 800c698:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800c69a:	f06f 0001 	mvn.w	r0, #1
}
 800c69e:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800c6a0:	f06f 000a 	mvn.w	r0, #10
}
 800c6a4:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c6a6:	f06f 0004 	mvn.w	r0, #4
}
 800c6aa:	bd38      	pop	{r3, r4, r5, pc}
 800c6ac:	24009d4c 	.word	0x24009d4c
 800c6b0:	24009dac 	.word	0x24009dac
 800c6b4:	24009d74 	.word	0x24009d74
 800c6b8:	24009d78 	.word	0x24009d78
 800c6bc:	00000000 	.word	0x00000000

0800c6c0 <BSP_CAMERA_PwrDown>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800c6c0:	bb20      	cbnz	r0, 800c70c <BSP_CAMERA_PwrDown+0x4c>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c6c2:	4b19      	ldr	r3, [pc, #100]	; (800c728 <BSP_CAMERA_PwrDown+0x68>)
 800c6c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c6c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c6cc:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800c718 <BSP_CAMERA_PwrDown+0x58>
{
 800c6d0:	b510      	push	{r4, lr}
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c6d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800c6d6:	b088      	sub	sp, #32
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c6d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c6dc:	4604      	mov	r4, r0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c6de:	a902      	add	r1, sp, #8
 800c6e0:	4812      	ldr	r0, [pc, #72]	; (800c72c <BSP_CAMERA_PwrDown+0x6c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c6e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c6e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c6ea:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800c720 <BSP_CAMERA_PwrDown+0x60>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c6ee:	9301      	str	r3, [sp, #4]
 800c6f0:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c6f2:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c6f6:	f003 fe5b 	bl	80103b0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c700:	480a      	ldr	r0, [pc, #40]	; (800c72c <BSP_CAMERA_PwrDown+0x6c>)
 800c702:	f004 f869 	bl	80107d8 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 800c706:	4620      	mov	r0, r4
}
 800c708:	b008      	add	sp, #32
 800c70a:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800c70c:	f06f 0001 	mvn.w	r0, #1
}
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	f3af 8000 	nop.w
 800c718:	00004000 	.word	0x00004000
 800c71c:	00000001 	.word	0x00000001
 800c720:	00000000 	.word	0x00000000
 800c724:	00000002 	.word	0x00000002
 800c728:	58024400 	.word	0x58024400
 800c72c:	58022400 	.word	0x58022400

0800c730 <BSP_CAMERA_IRQHandler>:
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 800c730:	4801      	ldr	r0, [pc, #4]	; (800c738 <BSP_CAMERA_IRQHandler+0x8>)
 800c732:	f001 bb7f 	b.w	800de34 <HAL_DCMI_IRQHandler>
 800c736:	bf00      	nop
 800c738:	24009e04 	.word	0x24009e04

0800c73c <BSP_CAMERA_DMA_IRQHandler>:
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 800c73c:	4b01      	ldr	r3, [pc, #4]	; (800c744 <BSP_CAMERA_DMA_IRQHandler+0x8>)
 800c73e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800c740:	f002 bc5a 	b.w	800eff8 <HAL_DMA_IRQHandler>
 800c744:	24009e04 	.word	0x24009e04

0800c748 <BSP_CAMERA_LineEventCallback>:
}
 800c748:	4770      	bx	lr
 800c74a:	bf00      	nop

0800c74c <HAL_DCMI_LineEventCallback>:
  BSP_CAMERA_LineEventCallback(0);
 800c74c:	2000      	movs	r0, #0
{
 800c74e:	b508      	push	{r3, lr}
  BSP_CAMERA_LineEventCallback(0);
 800c750:	f7ff fffa 	bl	800c748 <BSP_CAMERA_LineEventCallback>
}
 800c754:	bd08      	pop	{r3, pc}
 800c756:	bf00      	nop

0800c758 <HAL_DCMI_FrameEventCallback>:
  BSP_CAMERA_FrameEventCallback(0);
 800c758:	2000      	movs	r0, #0
{
 800c75a:	b508      	push	{r3, lr}
  BSP_CAMERA_FrameEventCallback(0);
 800c75c:	f7f5 f8e6 	bl	800192c <BSP_CAMERA_FrameEventCallback>
}
 800c760:	bd08      	pop	{r3, pc}
 800c762:	bf00      	nop

0800c764 <HAL_DCMI_VsyncEventCallback>:
  BSP_CAMERA_VsyncEventCallback(0);
 800c764:	2000      	movs	r0, #0
{
 800c766:	b508      	push	{r3, lr}
  BSP_CAMERA_VsyncEventCallback(0);
 800c768:	f7f5 f8fc 	bl	8001964 <BSP_CAMERA_VsyncEventCallback>
}
 800c76c:	bd08      	pop	{r3, pc}
 800c76e:	bf00      	nop

0800c770 <HAL_DCMI_ErrorCallback>:
  BSP_CAMERA_ErrorCallback(0);
 800c770:	2000      	movs	r0, #0
{
 800c772:	b508      	push	{r3, lr}
  BSP_CAMERA_ErrorCallback(0);
 800c774:	f7f5 f92c 	bl	80019d0 <BSP_CAMERA_ErrorCallback>
}
 800c778:	bd08      	pop	{r3, pc}
 800c77a:	bf00      	nop

0800c77c <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c77c:	b910      	cbnz	r0, 800c784 <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 800c77e:	4b03      	ldr	r3, [pc, #12]	; (800c78c <BSP_LCD_SetActiveLayer+0x10>)
 800c780:	6099      	str	r1, [r3, #8]
 800c782:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c784:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	24009ed0 	.word	0x24009ed0

0800c790 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c790:	b918      	cbnz	r0, 800c79a <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800c792:	4b03      	ldr	r3, [pc, #12]	; (800c7a0 <BSP_LCD_GetPixelFormat+0x10>)
 800c794:	68db      	ldr	r3, [r3, #12]
 800c796:	600b      	str	r3, [r1, #0]
 800c798:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c79a:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800c79e:	4770      	bx	lr
 800c7a0:	24009ed0 	.word	0x24009ed0

0800c7a4 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c7a4:	b948      	cbnz	r0, 800c7ba <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 800c7a6:	4b06      	ldr	r3, [pc, #24]	; (800c7c0 <BSP_LCD_GetXSize+0x1c>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ac:	b11b      	cbz	r3, 800c7b6 <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 800c7ae:	4b05      	ldr	r3, [pc, #20]	; (800c7c4 <BSP_LCD_GetXSize+0x20>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	600b      	str	r3, [r1, #0]
 800c7b4:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 800c7b6:	4618      	mov	r0, r3
  }

  return ret;
}
 800c7b8:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c7ba:	f06f 0001 	mvn.w	r0, #1
 800c7be:	4770      	bx	lr
 800c7c0:	24009eec 	.word	0x24009eec
 800c7c4:	24009ed0 	.word	0x24009ed0

0800c7c8 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c7c8:	b948      	cbnz	r0, 800c7de <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 800c7ca:	4b06      	ldr	r3, [pc, #24]	; (800c7e4 <BSP_LCD_GetYSize+0x1c>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7d0:	b11b      	cbz	r3, 800c7da <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 800c7d2:	4b05      	ldr	r3, [pc, #20]	; (800c7e8 <BSP_LCD_GetYSize+0x20>)
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	600b      	str	r3, [r1, #0]
 800c7d8:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 800c7da:	4618      	mov	r0, r3
  }

  return ret;
}
 800c7dc:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c7de:	f06f 0001 	mvn.w	r0, #1
 800c7e2:	4770      	bx	lr
 800c7e4:	24009eec 	.word	0x24009eec
 800c7e8:	24009ed0 	.word	0x24009ed0

0800c7ec <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800c7ec:	b470      	push	{r4, r5, r6}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c7ee:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800c7f2:	4d12      	ldr	r5, [pc, #72]	; (800c83c <BSP_LCD_ReadPixel+0x50>)
 800c7f4:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800c7f8:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 800c7fc:	0080      	lsls	r0, r0, #2
 800c7fe:	68a6      	ldr	r6, [r4, #8]
 800c800:	4c0f      	ldr	r4, [pc, #60]	; (800c840 <BSP_LCD_ReadPixel+0x54>)
 800c802:	fb0c 4c06 	mla	ip, ip, r6, r4
 800c806:	f8dc 4048 	ldr.w	r4, [ip, #72]	; 0x48
 800c80a:	b954      	cbnz	r4, 800c822 <BSP_LCD_ReadPixel+0x36>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800c80c:	5828      	ldr	r0, [r5, r0]
 800c80e:	f8dc 405c 	ldr.w	r4, [ip, #92]	; 0x5c
 800c812:	fb00 1102 	mla	r1, r0, r2, r1
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
  }

  return BSP_ERROR_NONE;
}
 800c816:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800c818:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
}
 800c81c:	bc70      	pop	{r4, r5, r6}
 800c81e:	601a      	str	r2, [r3, #0]
 800c820:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800c822:	582c      	ldr	r4, [r5, r0]
 800c824:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800c828:	fb04 1102 	mla	r1, r4, r2, r1
 800c82c:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
}
 800c830:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800c832:	b292      	uxth	r2, r2
}
 800c834:	bc70      	pop	{r4, r5, r6}
 800c836:	601a      	str	r2, [r3, #0]
 800c838:	4770      	bx	lr
 800c83a:	bf00      	nop
 800c83c:	24009ed0 	.word	0x24009ed0
 800c840:	24009f94 	.word	0x24009f94

0800c844 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800c844:	b470      	push	{r4, r5, r6}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c846:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800c84a:	4d11      	ldr	r5, [pc, #68]	; (800c890 <BSP_LCD_WritePixel+0x4c>)
 800c84c:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800c850:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 800c854:	0080      	lsls	r0, r0, #2
 800c856:	68a6      	ldr	r6, [r4, #8]
 800c858:	4c0e      	ldr	r4, [pc, #56]	; (800c894 <BSP_LCD_WritePixel+0x50>)
 800c85a:	fb0c 4c06 	mla	ip, ip, r6, r4
 800c85e:	f8dc 4048 	ldr.w	r4, [ip, #72]	; 0x48
 800c862:	b94c      	cbnz	r4, 800c878 <BSP_LCD_WritePixel+0x34>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800c864:	5828      	ldr	r0, [r5, r0]
 800c866:	f8dc 405c 	ldr.w	r4, [ip, #92]	; 0x5c
 800c86a:	fb00 1102 	mla	r1, r0, r2, r1
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
  }

  return BSP_ERROR_NONE;
}
 800c86e:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800c870:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
}
 800c874:	bc70      	pop	{r4, r5, r6}
 800c876:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800c878:	582c      	ldr	r4, [r5, r0]
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800c880:	fb04 1102 	mla	r1, r4, r2, r1
}
 800c884:	bc70      	pop	{r4, r5, r6}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800c886:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
}
 800c88a:	2000      	movs	r0, #0
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	24009ed0 	.word	0x24009ed0
 800c894:	24009f94 	.word	0x24009f94

0800c898 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 800c898:	b510      	push	{r4, lr}
 800c89a:	460c      	mov	r4, r1
 800c89c:	b084      	sub	sp, #16
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800c89e:	4601      	mov	r1, r0
 800c8a0:	2006      	movs	r0, #6
 800c8a2:	9401      	str	r4, [sp, #4]
 800c8a4:	9000      	str	r0, [sp, #0]
 800c8a6:	9202      	str	r2, [sp, #8]
 800c8a8:	4804      	ldr	r0, [pc, #16]	; (800c8bc <DSI_IO_Read+0x24>)
 800c8aa:	f003 fcd1 	bl	8010250 <HAL_DSI_Read>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800c8ae:	2800      	cmp	r0, #0
  }

  return ret;
}
 800c8b0:	bf14      	ite	ne
 800c8b2:	f06f 0007 	mvnne.w	r0, #7
 800c8b6:	2000      	moveq	r0, #0
 800c8b8:	b004      	add	sp, #16
 800c8ba:	bd10      	pop	{r4, pc}
 800c8bc:	24009f78 	.word	0x24009f78

0800c8c0 <BSP_LCD_DrawBitmap>:
{
 800c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c8c4:	4e4c      	ldr	r6, [pc, #304]	; (800c9f8 <BSP_LCD_DrawBitmap+0x138>)
 800c8c6:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c8ca:	f893 a018 	ldrb.w	sl, [r3, #24]
{
 800c8ce:	b085      	sub	sp, #20
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c8d0:	eb06 0c84 	add.w	ip, r6, r4, lsl #2
 800c8d4:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c8d8:	7b1d      	ldrb	r5, [r3, #12]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c8da:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c8de:	fb04 1102 	mla	r1, r4, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c8e2:	7d1c      	ldrb	r4, [r3, #20]
 800c8e4:	7cda      	ldrb	r2, [r3, #19]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c8e6:	042d      	lsls	r5, r5, #16
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c8e8:	0424      	lsls	r4, r4, #16
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c8ea:	7adf      	ldrb	r7, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800c8ec:	f893 901c 	ldrb.w	r9, [r3, #28]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c8f0:	eb04 2402 	add.w	r4, r4, r2, lsl #8
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c8f4:	7dda      	ldrb	r2, [r3, #23]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c8f6:	eb05 2507 	add.w	r5, r5, r7, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c8fa:	f8dc 8010 	ldr.w	r8, [ip, #16]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c8fe:	eb0a 2a02 	add.w	sl, sl, r2, lsl #8
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800c902:	7f5a      	ldrb	r2, [r3, #29]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c904:	4f3d      	ldr	r7, [pc, #244]	; (800c9fc <BSP_LCD_DrawBitmap+0x13c>)
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800c906:	eb09 2902 	add.w	r9, r9, r2, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c90a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800c90e:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800c912:	fb0c 7702 	mla	r7, ip, r2, r7
 800c916:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c918:	fb08 2801 	mla	r8, r8, r1, r2
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c91c:	7a9a      	ldrb	r2, [r3, #10]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c91e:	7d99      	ldrb	r1, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c920:	4415      	add	r5, r2
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c922:	7c9a      	ldrb	r2, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c924:	448a      	add	sl, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c926:	7b59      	ldrb	r1, [r3, #13]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c928:	4422      	add	r2, r4
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c92a:	eb05 6501 	add.w	r5, r5, r1, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c92e:	7d59      	ldrb	r1, [r3, #21]
 800c930:	eb02 6201 	add.w	r2, r2, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 800c934:	f1a9 0120 	sub.w	r1, r9, #32
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c938:	9203      	str	r2, [sp, #12]
  if ((bit_pixel/8U) == 4U)
 800c93a:	2907      	cmp	r1, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c93c:	7e5a      	ldrb	r2, [r3, #25]
 800c93e:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c942:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 800c946:	d954      	bls.n	800c9f2 <BSP_LCD_DrawBitmap+0x132>
  else if ((bit_pixel/8U) == 2U)
 800c948:	f1a9 0110 	sub.w	r1, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 800c94c:	2908      	cmp	r1, #8
 800c94e:	bf34      	ite	cc
 800c950:	f04f 0b02 	movcc.w	fp, #2
 800c954:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800c958:	9903      	ldr	r1, [sp, #12]
 800c95a:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800c95e:	fb01 f909 	mul.w	r9, r1, r9
 800c962:	f10a 31ff 	add.w	r1, sl, #4294967295
 800c966:	fb09 5501 	mla	r5, r9, r1, r5
 800c96a:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 800c96c:	f1ba 0f00 	cmp.w	sl, #0
 800c970:	d03b      	beq.n	800c9ea <BSP_LCD_DrawBitmap+0x12a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c972:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 800c974:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 800c978:	2700      	movs	r7, #0
 800c97a:	4c21      	ldr	r4, [pc, #132]	; (800ca00 <BSP_LCD_DrawBitmap+0x140>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c97c:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 800c980:	e006      	b.n	800c990 <BSP_LCD_DrawBitmap+0xd0>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800c982:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 800c984:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800c986:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 800c988:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800c98a:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 800c98e:	d02c      	beq.n	800c9ea <BSP_LCD_DrawBitmap+0x12a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c990:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 800c992:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800c994:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800c998:	21ff      	movs	r1, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800c99a:	2b02      	cmp	r3, #2
  for(index=0; index < height; index++)
 800c99c:	f107 0701 	add.w	r7, r7, #1
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800c9a0:	6060      	str	r0, [r4, #4]
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800c9a2:	bf18      	it	ne
 800c9a4:	4613      	movne	r3, r2
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c9a6:	4816      	ldr	r0, [pc, #88]	; (800ca00 <BSP_LCD_DrawBitmap+0x140>)
  hlcd_dma2d.Init.OutputOffset = 0;
 800c9a8:	60e2      	str	r2, [r4, #12]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800c9aa:	60a3      	str	r3, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 800c9ac:	4b15      	ldr	r3, [pc, #84]	; (800ca04 <BSP_LCD_DrawBitmap+0x144>)
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800c9ae:	e9c4 2113 	strd	r2, r1, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800c9b2:	e9c4 2b11 	strd	r2, fp, [r4, #68]	; 0x44
  hlcd_dma2d.Instance = DMA2D;
 800c9b6:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c9b8:	f002 fe72 	bl	800f6a0 <HAL_DMA2D_Init>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d1e0      	bne.n	800c982 <BSP_LCD_DrawBitmap+0xc2>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800c9c0:	2101      	movs	r1, #1
 800c9c2:	480f      	ldr	r0, [pc, #60]	; (800ca00 <BSP_LCD_DrawBitmap+0x140>)
 800c9c4:	f003 f8be 	bl	800fb44 <HAL_DMA2D_ConfigLayer>
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	d1da      	bne.n	800c982 <BSP_LCD_DrawBitmap+0xc2>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	4642      	mov	r2, r8
 800c9d0:	4629      	mov	r1, r5
 800c9d2:	480b      	ldr	r0, [pc, #44]	; (800ca00 <BSP_LCD_DrawBitmap+0x140>)
 800c9d4:	9300      	str	r3, [sp, #0]
 800c9d6:	9b03      	ldr	r3, [sp, #12]
 800c9d8:	f002 ff2a 	bl	800f830 <HAL_DMA2D_Start>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d1d0      	bne.n	800c982 <BSP_LCD_DrawBitmap+0xc2>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800c9e0:	2132      	movs	r1, #50	; 0x32
 800c9e2:	4807      	ldr	r0, [pc, #28]	; (800ca00 <BSP_LCD_DrawBitmap+0x140>)
 800c9e4:	f002 ff80 	bl	800f8e8 <HAL_DMA2D_PollForTransfer>
 800c9e8:	e7cb      	b.n	800c982 <BSP_LCD_DrawBitmap+0xc2>
}
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	b005      	add	sp, #20
 800c9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800c9f2:	f04f 0b00 	mov.w	fp, #0
 800c9f6:	e7af      	b.n	800c958 <BSP_LCD_DrawBitmap+0x98>
 800c9f8:	24009ed0 	.word	0x24009ed0
 800c9fc:	24009f94 	.word	0x24009f94
 800ca00:	24009f10 	.word	0x24009f10
 800ca04:	52001000 	.word	0x52001000

0800ca08 <BSP_LCD_DrawVLine>:
{
 800ca08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca0c:	4616      	mov	r6, r2
 800ca0e:	461d      	mov	r5, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ca10:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800ca14:	4b37      	ldr	r3, [pc, #220]	; (800caf4 <BSP_LCD_DrawVLine+0xec>)
{
 800ca16:	b085      	sub	sp, #20
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ca18:	f04f 0a34 	mov.w	sl, #52	; 0x34
 800ca1c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 800ca20:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
{
 800ca24:	9103      	str	r1, [sp, #12]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ca26:	00c2      	lsls	r2, r0, #3
 800ca28:	4933      	ldr	r1, [pc, #204]	; (800caf8 <BSP_LCD_DrawVLine+0xf0>)
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800ca2a:	eb06 0e05 	add.w	lr, r6, r5
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ca2e:	f8dc 7008 	ldr.w	r7, [ip, #8]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ca32:	1a10      	subs	r0, r2, r0
{
 800ca34:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ca36:	fb0a 1107 	mla	r1, sl, r7, r1
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ca3a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ca3e:	f8dc a010 	ldr.w	sl, [ip, #16]
 800ca42:	f8d1 905c 	ldr.w	r9, [r1, #92]	; 0x5c
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800ca46:	f8dc 1004 	ldr.w	r1, [ip, #4]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ca4a:	68da      	ldr	r2, [r3, #12]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800ca4c:	458e      	cmp	lr, r1
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800ca4e:	bf88      	it	hi
 800ca50:	1b8d      	subhi	r5, r1, r6
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ca52:	2a02      	cmp	r2, #2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800ca54:	f108 31ff 	add.w	r1, r8, #4294967295
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ca58:	d011      	beq.n	800ca7e <BSP_LCD_DrawVLine+0x76>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800ca5a:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800ca5c:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 800cb00 <BSP_LCD_DrawVLine+0xf8>
  hlcd_dma2d.Instance = DMA2D;
 800ca60:	4b26      	ldr	r3, [pc, #152]	; (800cafc <BSP_LCD_DrawVLine+0xf4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800ca62:	4658      	mov	r0, fp
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800ca64:	e9cb 2102 	strd	r2, r1, [fp, #8]
  hlcd_dma2d.Instance = DMA2D;
 800ca68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ca6c:	e9cb 3200 	strd	r3, r2, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800ca70:	f002 fe16 	bl	800f6a0 <HAL_DMA2D_Init>
 800ca74:	b328      	cbz	r0, 800cac2 <BSP_LCD_DrawVLine+0xba>
}
 800ca76:	2000      	movs	r0, #0
 800ca78:	b005      	add	sp, #20
 800ca7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800ca7e:	f3c4 1345 	ubfx	r3, r4, #5, #6
 800ca82:	f3c4 2cc4 	ubfx	ip, r4, #11, #5
 800ca86:	f004 041f 	and.w	r4, r4, #31
 800ca8a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 800ca8e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800ca92:	ebcc 1c4c 	rsb	ip, ip, ip, lsl #5
 800ca96:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 800ca9a:	f10c 0c17 	add.w	ip, ip, #23
 800ca9e:	f104 0017 	add.w	r0, r4, #23
 800caa2:	eb03 14c3 	add.w	r4, r3, r3, lsl #7
 800caa6:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 800caaa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800caae:	3421      	adds	r4, #33	; 0x21
 800cab0:	09a4      	lsrs	r4, r4, #6
 800cab2:	0224      	lsls	r4, r4, #8
 800cab4:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800cab8:	ea44 1490 	orr.w	r4, r4, r0, lsr #6
 800cabc:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
    break;
 800cac0:	e7cc      	b.n	800ca5c <BSP_LCD_DrawVLine+0x54>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800cac2:	2101      	movs	r1, #1
 800cac4:	4658      	mov	r0, fp
 800cac6:	f003 f83d 	bl	800fb44 <HAL_DMA2D_ConfigLayer>
 800caca:	2800      	cmp	r0, #0
 800cacc:	d1d3      	bne.n	800ca76 <BSP_LCD_DrawVLine+0x6e>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cace:	9b03      	ldr	r3, [sp, #12]
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800cad0:	4621      	mov	r1, r4
 800cad2:	4658      	mov	r0, fp
 800cad4:	9500      	str	r5, [sp, #0]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cad6:	fb06 3208 	mla	r2, r6, r8, r3
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800cada:	2301      	movs	r3, #1
 800cadc:	fb0a 9202 	mla	r2, sl, r2, r9
 800cae0:	f002 fea6 	bl	800f830 <HAL_DMA2D_Start>
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d1c6      	bne.n	800ca76 <BSP_LCD_DrawVLine+0x6e>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800cae8:	2119      	movs	r1, #25
 800caea:	4658      	mov	r0, fp
 800caec:	f002 fefc 	bl	800f8e8 <HAL_DMA2D_PollForTransfer>
 800caf0:	e7c1      	b.n	800ca76 <BSP_LCD_DrawVLine+0x6e>
 800caf2:	bf00      	nop
 800caf4:	24009ed0 	.word	0x24009ed0
 800caf8:	24009f94 	.word	0x24009f94
 800cafc:	52001000 	.word	0x52001000
 800cb00:	24009f10 	.word	0x24009f10

0800cb04 <DSI_IO_Write>:
  if(Size <= 1U)
 800cb04:	2b01      	cmp	r3, #1
{
 800cb06:	b530      	push	{r4, r5, lr}
 800cb08:	460c      	mov	r4, r1
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	4601      	mov	r1, r0
 800cb0e:	4615      	mov	r5, r2
  if(Size <= 1U)
 800cb10:	d909      	bls.n	800cb26 <DSI_IO_Write+0x22>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 800cb12:	2239      	movs	r2, #57	; 0x39
 800cb14:	480a      	ldr	r0, [pc, #40]	; (800cb40 <DSI_IO_Write+0x3c>)
 800cb16:	e9cd 4500 	strd	r4, r5, [sp]
 800cb1a:	f003 fb2b 	bl	8010174 <HAL_DSI_LongWrite>
 800cb1e:	b958      	cbnz	r0, 800cb38 <DSI_IO_Write+0x34>
  int32_t ret = BSP_ERROR_NONE;
 800cb20:	2000      	movs	r0, #0
}
 800cb22:	b003      	add	sp, #12
 800cb24:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 800cb26:	5cd5      	ldrb	r5, [r2, r3]
 800cb28:	4623      	mov	r3, r4
 800cb2a:	2215      	movs	r2, #21
 800cb2c:	4804      	ldr	r0, [pc, #16]	; (800cb40 <DSI_IO_Write+0x3c>)
 800cb2e:	9500      	str	r5, [sp, #0]
 800cb30:	f003 faf4 	bl	801011c <HAL_DSI_ShortWrite>
 800cb34:	2800      	cmp	r0, #0
 800cb36:	d0f3      	beq.n	800cb20 <DSI_IO_Write+0x1c>
      ret = BSP_ERROR_BUS_FAILURE;
 800cb38:	f06f 0007 	mvn.w	r0, #7
 800cb3c:	e7f1      	b.n	800cb22 <DSI_IO_Write+0x1e>
 800cb3e:	bf00      	nop
 800cb40:	24009f78 	.word	0x24009f78

0800cb44 <BSP_LCD_FillRGBRect>:
{
 800cb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb48:	e9dd 4609 	ldrd	r4, r6, [sp, #36]	; 0x24
  for(i = 0; i < Height; i++)
 800cb4c:	b376      	cbz	r6, 800cbac <BSP_LCD_FillRGBRect+0x68>
 800cb4e:	b36c      	cbz	r4, 800cbac <BSP_LCD_FillRGBRect+0x68>
 800cb50:	4d2f      	ldr	r5, [pc, #188]	; (800cc10 <BSP_LCD_FillRGBRect+0xcc>)
 800cb52:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800cb56:	f04f 0b1c 	mov.w	fp, #28
 800cb5a:	4416      	add	r6, r2
 800cb5c:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800cb60:	f04f 0e34 	mov.w	lr, #52	; 0x34
 800cb64:	fb0b 5b00 	mla	fp, fp, r0, r5
    for(j = 0; j < Width; j++)
 800cb68:	f04f 0800 	mov.w	r8, #0
 800cb6c:	4637      	mov	r7, r6
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800cb6e:	f8dc 6008 	ldr.w	r6, [ip, #8]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 800cb72:	eb01 0008 	add.w	r0, r1, r8
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800cb76:	4d27      	ldr	r5, [pc, #156]	; (800cc14 <BSP_LCD_FillRGBRect+0xd0>)
 800cb78:	f8d3 9000 	ldr.w	r9, [r3]
 800cb7c:	fb0e 5a06 	mla	sl, lr, r6, r5
 800cb80:	f8da 6048 	ldr.w	r6, [sl, #72]	; 0x48
 800cb84:	b9ae      	cbnz	r6, 800cbb2 <BSP_LCD_FillRGBRect+0x6e>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800cb86:	f8dc 5000 	ldr.w	r5, [ip]
    for(j = 0; j < Width; j++)
 800cb8a:	f108 0801 	add.w	r8, r8, #1
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800cb8e:	f8da 605c 	ldr.w	r6, [sl, #92]	; 0x5c
 800cb92:	fb05 0002 	mla	r0, r5, r2, r0
    for(j = 0; j < Width; j++)
 800cb96:	4544      	cmp	r4, r8
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800cb98:	f846 9020 	str.w	r9, [r6, r0, lsl #2]
      pData += Lcd_Ctx[Instance].BppFactor;
 800cb9c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800cba0:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 800cba2:	d1e4      	bne.n	800cb6e <BSP_LCD_FillRGBRect+0x2a>
 800cba4:	463e      	mov	r6, r7
  for(i = 0; i < Height; i++)
 800cba6:	3201      	adds	r2, #1
 800cba8:	4296      	cmp	r6, r2
 800cbaa:	d1dd      	bne.n	800cb68 <BSP_LCD_FillRGBRect+0x24>
}
 800cbac:	2000      	movs	r0, #0
 800cbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800cbb2:	f8dc 5000 	ldr.w	r5, [ip]
 800cbb6:	463e      	mov	r6, r7
 800cbb8:	fa1f f989 	uxth.w	r9, r9
 800cbbc:	f8da 705c 	ldr.w	r7, [sl, #92]	; 0x5c
 800cbc0:	fb05 0002 	mla	r0, r5, r2, r0
    for(j = 0; j < Width; j++)
 800cbc4:	f108 0801 	add.w	r8, r8, #1
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800cbc8:	f827 9010 	strh.w	r9, [r7, r0, lsl #1]
    for(j = 0; j < Width; j++)
 800cbcc:	45a0      	cmp	r8, r4
      pData += Lcd_Ctx[Instance].BppFactor;
 800cbce:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800cbd2:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 800cbd4:	d0e7      	beq.n	800cba6 <BSP_LCD_FillRGBRect+0x62>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800cbd6:	4d0f      	ldr	r5, [pc, #60]	; (800cc14 <BSP_LCD_FillRGBRect+0xd0>)
 800cbd8:	f8db 0008 	ldr.w	r0, [fp, #8]
 800cbdc:	fb0e 5000 	mla	r0, lr, r0, r5
 800cbe0:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800cbe4:	f8d0 a05c 	ldr.w	sl, [r0, #92]	; 0x5c
 800cbe8:	f8db 0000 	ldr.w	r0, [fp]
 800cbec:	fb02 f000 	mul.w	r0, r2, r0
 800cbf0:	f8d3 9000 	ldr.w	r9, [r3]
 800cbf4:	eb08 0701 	add.w	r7, r8, r1
    for(j = 0; j < Width; j++)
 800cbf8:	f108 0801 	add.w	r8, r8, #1
      pData += Lcd_Ctx[Instance].BppFactor;
 800cbfc:	442b      	add	r3, r5
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800cbfe:	fa1f f989 	uxth.w	r9, r9
 800cc02:	4407      	add	r7, r0
    for(j = 0; j < Width; j++)
 800cc04:	4544      	cmp	r4, r8
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800cc06:	f82a 9017 	strh.w	r9, [sl, r7, lsl #1]
    for(j = 0; j < Width; j++)
 800cc0a:	d8f1      	bhi.n	800cbf0 <BSP_LCD_FillRGBRect+0xac>
 800cc0c:	e7cb      	b.n	800cba6 <BSP_LCD_FillRGBRect+0x62>
 800cc0e:	bf00      	nop
 800cc10:	24009ed0 	.word	0x24009ed0
 800cc14:	24009f94 	.word	0x24009f94

0800cc18 <BSP_LCD_FillRect>:
{
 800cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cc1c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 800cc20:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cc22:	492f      	ldr	r1, [pc, #188]	; (800cce0 <BSP_LCD_FillRect+0xc8>)
{
 800cc24:	461e      	mov	r6, r3
 800cc26:	4690      	mov	r8, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cc28:	2434      	movs	r4, #52	; 0x34
 800cc2a:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 800cc2e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800cc32:	4a2c      	ldr	r2, [pc, #176]	; (800cce4 <BSP_LCD_FillRect+0xcc>)
{
 800cc34:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cc36:	6899      	ldr	r1, [r3, #8]
{
 800cc38:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cc3a:	fb04 2201 	mla	r2, r4, r1, r2
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800cc3e:	eba9 0106 	sub.w	r1, r9, r6
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cc42:	f8d2 a05c 	ldr.w	sl, [r2, #92]	; 0x5c
 800cc46:	e9d3 2b03 	ldrd	r2, fp, [r3, #12]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800cc4a:	2a02      	cmp	r2, #2
 800cc4c:	d010      	beq.n	800cc70 <BSP_LCD_FillRect+0x58>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800cc4e:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800cc50:	4c25      	ldr	r4, [pc, #148]	; (800cce8 <BSP_LCD_FillRect+0xd0>)
  hlcd_dma2d.Instance = DMA2D;
 800cc52:	4b26      	ldr	r3, [pc, #152]	; (800ccec <BSP_LCD_FillRect+0xd4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800cc54:	4620      	mov	r0, r4
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800cc56:	e9c4 2102 	strd	r2, r1, [r4, #8]
  hlcd_dma2d.Instance = DMA2D;
 800cc5a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800cc5e:	e9c4 3200 	strd	r3, r2, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800cc62:	f002 fd1d 	bl	800f6a0 <HAL_DMA2D_Init>
 800cc66:	b318      	cbz	r0, 800ccb0 <BSP_LCD_FillRect+0x98>
}
 800cc68:	2000      	movs	r0, #0
 800cc6a:	b003      	add	sp, #12
 800cc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800cc70:	f3c5 1345 	ubfx	r3, r5, #5, #6
 800cc74:	f3c5 24c4 	ubfx	r4, r5, #11, #5
 800cc78:	f005 051f 	and.w	r5, r5, #31
 800cc7c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800cc80:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 800cc84:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 800cc88:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800cc8c:	3417      	adds	r4, #23
 800cc8e:	f105 0017 	add.w	r0, r5, #23
 800cc92:	eb03 15c3 	add.w	r5, r3, r3, lsl #7
 800cc96:	09a4      	lsrs	r4, r4, #6
 800cc98:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800cc9c:	3521      	adds	r5, #33	; 0x21
 800cc9e:	09ad      	lsrs	r5, r5, #6
 800cca0:	022d      	lsls	r5, r5, #8
 800cca2:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800cca6:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 800ccaa:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 800ccae:	e7cf      	b.n	800cc50 <BSP_LCD_FillRect+0x38>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800ccb0:	2101      	movs	r1, #1
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f002 ff46 	bl	800fb44 <HAL_DMA2D_ConfigLayer>
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	d1d5      	bne.n	800cc68 <BSP_LCD_FillRect+0x50>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ccbc:	fb08 7209 	mla	r2, r8, r9, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ccc4:	4633      	mov	r3, r6
 800ccc6:	fb0b a202 	mla	r2, fp, r2, sl
 800ccca:	4620      	mov	r0, r4
 800cccc:	9500      	str	r5, [sp, #0]
 800ccce:	f002 fdaf 	bl	800f830 <HAL_DMA2D_Start>
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	d1c8      	bne.n	800cc68 <BSP_LCD_FillRect+0x50>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800ccd6:	2119      	movs	r1, #25
 800ccd8:	4620      	mov	r0, r4
 800ccda:	f002 fe05 	bl	800f8e8 <HAL_DMA2D_PollForTransfer>
 800ccde:	e7c3      	b.n	800cc68 <BSP_LCD_FillRect+0x50>
 800cce0:	24009ed0 	.word	0x24009ed0
 800cce4:	24009f94 	.word	0x24009f94
 800cce8:	24009f10 	.word	0x24009f10
 800ccec:	52001000 	.word	0x52001000

0800ccf0 <BSP_LCD_DrawHLine>:
{
 800ccf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf4:	460e      	mov	r6, r1
 800ccf6:	469b      	mov	fp, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800ccf8:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 800ccfc:	4b34      	ldr	r3, [pc, #208]	; (800cdd0 <BSP_LCD_DrawHLine+0xe0>)
 800ccfe:	00c4      	lsls	r4, r0, #3
 800cd00:	f04f 0934 	mov.w	r9, #52	; 0x34
 800cd04:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800cd08:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
 800cd0c:	4617      	mov	r7, r2
  switch(Lcd_Ctx[Instance].PixelFormat)
 800cd0e:	1a20      	subs	r0, r4, r0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800cd10:	4a30      	ldr	r2, [pc, #192]	; (800cdd4 <BSP_LCD_DrawHLine+0xe4>)
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800cd12:	eb06 0c0b 	add.w	ip, r6, fp
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800cd16:	f8de 1008 	ldr.w	r1, [lr, #8]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800cd1a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800cd1e:	45e0      	cmp	r8, ip
{
 800cd20:	b083      	sub	sp, #12
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800cd22:	fb09 2201 	mla	r2, r9, r1, r2
 800cd26:	f8de a010 	ldr.w	sl, [lr, #16]
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800cd2a:	bf38      	it	cc
 800cd2c:	eba8 0b06 	subcc.w	fp, r8, r6
{
 800cd30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800cd32:	f8d2 905c 	ldr.w	r9, [r2, #92]	; 0x5c
  switch(Lcd_Ctx[Instance].PixelFormat)
 800cd36:	68da      	ldr	r2, [r3, #12]
 800cd38:	2a02      	cmp	r2, #2
 800cd3a:	d011      	beq.n	800cd60 <BSP_LCD_DrawHLine+0x70>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800cd3c:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800cd3e:	4c26      	ldr	r4, [pc, #152]	; (800cdd8 <BSP_LCD_DrawHLine+0xe8>)
 800cd40:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800cd44:	6063      	str	r3, [r4, #4]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800cd46:	2300      	movs	r3, #0
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800cd48:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800cd4a:	60a2      	str	r2, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800cd4c:	60e3      	str	r3, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 800cd4e:	4b23      	ldr	r3, [pc, #140]	; (800cddc <BSP_LCD_DrawHLine+0xec>)
 800cd50:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800cd52:	f002 fca5 	bl	800f6a0 <HAL_DMA2D_Init>
 800cd56:	b318      	cbz	r0, 800cda0 <BSP_LCD_DrawHLine+0xb0>
}
 800cd58:	2000      	movs	r0, #0
 800cd5a:	b003      	add	sp, #12
 800cd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800cd60:	f3c5 1345 	ubfx	r3, r5, #5, #6
 800cd64:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 800cd68:	f005 051f 	and.w	r5, r5, #31
 800cd6c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 800cd70:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 800cd74:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 800cd78:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 800cd7c:	3117      	adds	r1, #23
 800cd7e:	f105 0017 	add.w	r0, r5, #23
 800cd82:	eb03 15c3 	add.w	r5, r3, r3, lsl #7
 800cd86:	0989      	lsrs	r1, r1, #6
 800cd88:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800cd8c:	3521      	adds	r5, #33	; 0x21
 800cd8e:	09ad      	lsrs	r5, r5, #6
 800cd90:	022d      	lsls	r5, r5, #8
 800cd92:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800cd96:	ea45 1590 	orr.w	r5, r5, r0, lsr #6
 800cd9a:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 800cd9e:	e7ce      	b.n	800cd3e <BSP_LCD_DrawHLine+0x4e>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800cda0:	2101      	movs	r1, #1
 800cda2:	4620      	mov	r0, r4
 800cda4:	f002 fece 	bl	800fb44 <HAL_DMA2D_ConfigLayer>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d1d5      	bne.n	800cd58 <BSP_LCD_DrawHLine+0x68>
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800cdac:	fb07 6208 	mla	r2, r7, r8, r6
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	2501      	movs	r5, #1
 800cdb4:	465b      	mov	r3, fp
 800cdb6:	fb0a 9202 	mla	r2, sl, r2, r9
 800cdba:	4620      	mov	r0, r4
 800cdbc:	9500      	str	r5, [sp, #0]
 800cdbe:	f002 fd37 	bl	800f830 <HAL_DMA2D_Start>
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d1c8      	bne.n	800cd58 <BSP_LCD_DrawHLine+0x68>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800cdc6:	2119      	movs	r1, #25
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f002 fd8d 	bl	800f8e8 <HAL_DMA2D_PollForTransfer>
 800cdce:	e7c3      	b.n	800cd58 <BSP_LCD_DrawHLine+0x68>
 800cdd0:	24009ed0 	.word	0x24009ed0
 800cdd4:	24009f94 	.word	0x24009f94
 800cdd8:	24009f10 	.word	0x24009f10
 800cddc:	52001000 	.word	0x52001000

0800cde0 <MX_DSIHOST_DSI_Init>:
{
 800cde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cde4:	4699      	mov	r9, r3
 800cde6:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800cde8:	2300      	movs	r3, #0
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800cdea:	f04f 0a04 	mov.w	sl, #4
 800cdee:	2601      	movs	r6, #1
{
 800cdf0:	4690      	mov	r8, r2
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800cdf2:	6043      	str	r3, [r0, #4]
  PLLInit.PLLNDIV = 100;
 800cdf4:	2264      	movs	r2, #100	; 0x64
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800cdf6:	9302      	str	r3, [sp, #8]
  hdsi->Instance = DSI;
 800cdf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
{
 800cdfc:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800cdfe:	4669      	mov	r1, sp
  hdsi->Instance = DSI;
 800ce00:	6003      	str	r3, [r0, #0]
  PLLInit.PLLNDIV = 100;
 800ce02:	2305      	movs	r3, #5
{
 800ce04:	4604      	mov	r4, r0
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800ce06:	e9c0 a602 	strd	sl, r6, [r0, #8]
  PLLInit.PLLNDIV = 100;
 800ce0a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800ce0e:	f002 ff0b 	bl	800fc28 <HAL_DSI_Init>
 800ce12:	b118      	cbz	r0, 800ce1c <MX_DSIHOST_DSI_Init+0x3c>
    return HAL_ERROR;
 800ce14:	4630      	mov	r0, r6
}
 800ce16:	b01e      	add	sp, #120	; 0x78
 800ce18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800ce1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 800ce20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ce24:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800ce26:	4620      	mov	r0, r4
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800ce28:	9314      	str	r3, [sp, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 800ce2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  VidCfg.Mode = DSI_VID_MODE_BURST;
 800ce2e:	2402      	movs	r4, #2
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800ce30:	a903      	add	r1, sp, #12
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 800ce32:	9317      	str	r3, [sp, #92]	; 0x5c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 800ce34:	f44f 6300 	mov.w	r3, #2048	; 0x800
  VidCfg.ColorCoding = PixelFormat;
 800ce38:	f8cd 9010 	str.w	r9, [sp, #16]
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 800ce3c:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.VerticalActive = Height;
 800ce3e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.VirtualChannelID = 0;
 800ce42:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 800ce44:	9505      	str	r5, [sp, #20]
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 800ce46:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.Mode = DSI_VID_MODE_BURST;
 800ce48:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 800ce4a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 800ce4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ce52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce56:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800ce5a:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800ce5e:	f24f 4224 	movw	r2, #62500	; 0xf424
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800ce62:	931c      	str	r3, [sp, #112]	; 0x70
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800ce64:	4b10      	ldr	r3, [pc, #64]	; (800cea8 <MX_DSIHOST_DSI_Init+0xc8>)
  VidCfg.NumberOfChunks = 0;
 800ce66:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800ce6a:	fb02 3707 	mla	r7, r2, r7, r3
 800ce6e:	4a0f      	ldr	r2, [pc, #60]	; (800ceac <MX_DSIHOST_DSI_Init+0xcc>)
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 800ce70:	230f      	movs	r3, #15
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800ce72:	fba2 2707 	umull	r2, r7, r2, r7
  VidCfg.NullPacketSize = 0xFFFU;
 800ce76:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 800ce7a:	9311      	str	r3, [sp, #68]	; 0x44
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800ce7c:	2310      	movs	r3, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800ce7e:	0b7f      	lsrs	r7, r7, #13
  VidCfg.NullPacketSize = 0xFFFU;
 800ce80:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800ce82:	9312      	str	r3, [sp, #72]	; 0x48
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800ce84:	234d      	movs	r3, #77	; 0x4d
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800ce86:	970f      	str	r7, [sp, #60]	; 0x3c
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800ce88:	930e      	str	r3, [sp, #56]	; 0x38
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 800ce8a:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 800ce8e:	e9cd 5a0c 	strd	r5, sl, [sp, #48]	; 0x30
  VidCfg.LPVACTLargestPacketSize = 4;
 800ce92:	e9cd aa15 	strd	sl, sl, [sp, #84]	; 0x54
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800ce96:	f002 fffd 	bl	800fe94 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 800ce9a:	3800      	subs	r0, #0
 800ce9c:	bf18      	it	ne
 800ce9e:	2001      	movne	r0, #1
}
 800cea0:	b01e      	add	sp, #120	; 0x78
 800cea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cea6:	bf00      	nop
 800cea8:	0042c1d8 	.word	0x0042c1d8
 800ceac:	4c751ce3 	.word	0x4c751ce3

0800ceb0 <MX_LTDC_Init>:
{
 800ceb0:	b410      	push	{r4}
  hltdc->Instance = LTDC;
 800ceb2:	4c0e      	ldr	r4, [pc, #56]	; (800ceec <MX_LTDC_Init+0x3c>)
 800ceb4:	6004      	str	r4, [r0, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800ceb6:	2400      	movs	r4, #0
  hltdc->Init.Backcolor.Blue  = 0x00;
 800ceb8:	8684      	strh	r4, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 800ceba:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 800cebe:	6184      	str	r4, [r0, #24]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800cec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800cec4:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 800cec8:	2401      	movs	r4, #1
 800ceca:	6144      	str	r4, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 800cecc:	2423      	movs	r4, #35	; 0x23
 800cece:	61c4      	str	r4, [r0, #28]
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800ced0:	190c      	adds	r4, r1, r4
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800ced2:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800ced4:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 800ced6:	240f      	movs	r4, #15
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800ced8:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800ceda:	1911      	adds	r1, r2, r4
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 800cedc:	321f      	adds	r2, #31
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 800cede:	6204      	str	r4, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800cee0:	6281      	str	r1, [r0, #40]	; 0x28
}
 800cee2:	f85d 4b04 	ldr.w	r4, [sp], #4
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 800cee6:	6302      	str	r2, [r0, #48]	; 0x30
  return HAL_LTDC_Init(hltdc);
 800cee8:	f004 b87e 	b.w	8010fe8 <HAL_LTDC_Init>
 800ceec:	50001000 	.word	0x50001000

0800cef0 <MX_LTDC_ConfigLayer>:
{
 800cef0:	4613      	mov	r3, r2
 800cef2:	460a      	mov	r2, r1
 800cef4:	b510      	push	{r4, lr}
  pLayerCfg.WindowX1 = Config->X1;
 800cef6:	e9d3 1400 	ldrd	r1, r4, [r3]
{
 800cefa:	b08e      	sub	sp, #56	; 0x38
  pLayerCfg.WindowX0 = Config->X0;
 800cefc:	9101      	str	r1, [sp, #4]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800cefe:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowX1 = Config->X1;
 800cf00:	9402      	str	r4, [sp, #8]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800cf02:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.WindowY1 = Config->Y1;
 800cf04:	e9d3 1402 	ldrd	r1, r4, [r3, #8]
  pLayerCfg.WindowY0 = Config->Y0;
 800cf08:	9103      	str	r1, [sp, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800cf0a:	1a61      	subs	r1, r4, r1
  pLayerCfg.WindowY1 = Config->Y1;
 800cf0c:	9404      	str	r4, [sp, #16]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800cf0e:	910c      	str	r1, [sp, #48]	; 0x30
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800cf10:	a901      	add	r1, sp, #4
  pLayerCfg.FBStartAdress = Config->Address;
 800cf12:	e9d3 4304 	ldrd	r4, r3, [r3, #16]
 800cf16:	930a      	str	r3, [sp, #40]	; 0x28
  pLayerCfg.Alpha = 255;
 800cf18:	2300      	movs	r3, #0
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800cf1a:	9405      	str	r4, [sp, #20]
  pLayerCfg.Alpha = 255;
 800cf1c:	24ff      	movs	r4, #255	; 0xff
  pLayerCfg.Backcolor.Blue = 0;
 800cf1e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 800cf22:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  pLayerCfg.Alpha = 255;
 800cf26:	e9cd 4306 	strd	r4, r3, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800cf2a:	2307      	movs	r3, #7
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800cf2c:	f44f 64c0 	mov.w	r4, #1536	; 0x600
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800cf30:	9309      	str	r3, [sp, #36]	; 0x24
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800cf32:	9408      	str	r4, [sp, #32]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800cf34:	f004 f92c 	bl	8011190 <HAL_LTDC_ConfigLayer>
}
 800cf38:	b00e      	add	sp, #56	; 0x38
 800cf3a:	bd10      	pop	{r4, pc}

0800cf3c <MX_LTDC_ClockConfig>:
{
 800cf3c:	b510      	push	{r4, lr}
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800cf3e:	2105      	movs	r1, #5
{
 800cf40:	b0b0      	sub	sp, #192	; 0xc0
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800cf42:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 800cf46:	2084      	movs	r0, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800cf48:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800cf4a:	2300      	movs	r3, #0
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800cf4c:	9400      	str	r4, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 800cf4e:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800cf50:	9109      	str	r1, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 800cf52:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 800cf56:	900a      	str	r0, [sp, #40]	; 0x28
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800cf58:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800cf5a:	920b      	str	r2, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q      = 2U;
 800cf5c:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 800cf5e:	e9cd 410d 	strd	r4, r1, [sp, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 800cf62:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800cf66:	f005 fe4b 	bl	8012c00 <HAL_RCCEx_PeriphCLKConfig>
}
 800cf6a:	b030      	add	sp, #192	; 0xc0
 800cf6c:	bd10      	pop	{r4, pc}
 800cf6e:	bf00      	nop

0800cf70 <BSP_LCD_InitEx>:
{
 800cf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800cf74:	2901      	cmp	r1, #1
{
 800cf76:	b095      	sub	sp, #84	; 0x54
 800cf78:	9f1e      	ldr	r7, [sp, #120]	; 0x78
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800cf7a:	f200 8142 	bhi.w	800d202 <BSP_LCD_InitEx+0x292>
 800cf7e:	f1b0 0b00 	subs.w	fp, r0, #0
 800cf82:	bf18      	it	ne
 800cf84:	f04f 0b01 	movne.w	fp, #1
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	f040 813a 	bne.w	800d202 <BSP_LCD_InitEx+0x292>
 800cf8e:	4689      	mov	r9, r1
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 800cf90:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800cf92:	2901      	cmp	r1, #1
 800cf94:	f200 8135 	bhi.w	800d202 <BSP_LCD_InitEx+0x292>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800cf98:	2a02      	cmp	r2, #2
 800cf9a:	461d      	mov	r5, r3
 800cf9c:	f000 80ff 	beq.w	800d19e <BSP_LCD_InitEx+0x22e>
      Lcd_Ctx[Instance].BppFactor = 4U;
 800cfa0:	2104      	movs	r1, #4
      dsi_pixel_format = DSI_RGB888;
 800cfa2:	2305      	movs	r3, #5
  LCD_RESET_GPIO_CLK_ENABLE();
 800cfa4:	4ca2      	ldr	r4, [pc, #648]	; (800d230 <BSP_LCD_InitEx+0x2c0>)
 800cfa6:	4ea3      	ldr	r6, [pc, #652]	; (800d234 <BSP_LCD_InitEx+0x2c4>)
 800cfa8:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800cfaa:	48a3      	ldr	r0, [pc, #652]	; (800d238 <BSP_LCD_InitEx+0x2c8>)
    hlcd_ltdc.Instance = LTDC;
 800cfac:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 800d268 <BSP_LCD_InitEx+0x2f8>
    hlcd_dsi.Instance = DSI;
 800cfb0:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800d26c <BSP_LCD_InitEx+0x2fc>
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800cfb4:	e9c6 2103 	strd	r2, r1, [r6, #12]
    Lcd_Ctx[Instance].YSize  = Height;
 800cfb8:	e9c6 5700 	strd	r5, r7, [r6]
  LCD_RESET_GPIO_CLK_ENABLE();
 800cfbc:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800cfc0:	a90e      	add	r1, sp, #56	; 0x38
  LCD_RESET_GPIO_CLK_ENABLE();
 800cfc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800cfc6:	ed9f 7b90 	vldr	d7, [pc, #576]	; 800d208 <BSP_LCD_InitEx+0x298>
  LCD_RESET_GPIO_CLK_ENABLE();
 800cfca:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800cfce:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800cfd2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  LCD_RESET_GPIO_CLK_ENABLE();
 800cfd6:	f002 0240 	and.w	r2, r2, #64	; 0x40
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800cfda:	ed9f 7b8d 	vldr	d7, [pc, #564]	; 800d210 <BSP_LCD_InitEx+0x2a0>
  LCD_RESET_GPIO_CLK_ENABLE();
 800cfde:	9208      	str	r2, [sp, #32]
 800cfe0:	9a08      	ldr	r2, [sp, #32]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800cfe2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800cfe6:	f003 f9e3 	bl	80103b0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 800cfea:	2200      	movs	r2, #0
 800cfec:	2108      	movs	r1, #8
 800cfee:	4892      	ldr	r0, [pc, #584]	; (800d238 <BSP_LCD_InitEx+0x2c8>)
 800cff0:	f003 fbf2 	bl	80107d8 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800cff4:	2014      	movs	r0, #20
 800cff6:	f000 fd15 	bl	800da24 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 800cffa:	2201      	movs	r2, #1
 800cffc:	2108      	movs	r1, #8
 800cffe:	488e      	ldr	r0, [pc, #568]	; (800d238 <BSP_LCD_InitEx+0x2c8>)
 800d000:	f003 fbea 	bl	80107d8 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800d004:	200a      	movs	r0, #10
 800d006:	f000 fd0d 	bl	800da24 <HAL_Delay>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800d00a:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800d00e:	a90e      	add	r1, sp, #56	; 0x38
 800d010:	488a      	ldr	r0, [pc, #552]	; (800d23c <BSP_LCD_InitEx+0x2cc>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800d012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800d016:	ed9f 7b80 	vldr	d7, [pc, #512]	; 800d218 <BSP_LCD_InitEx+0x2a8>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800d01a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800d01e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800d022:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800d026:	f402 7200 	and.w	r2, r2, #512	; 0x200
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800d02a:	ed9f 7b7d 	vldr	d7, [pc, #500]	; 800d220 <BSP_LCD_InitEx+0x2b0>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800d02e:	9206      	str	r2, [sp, #24]
 800d030:	9a06      	ldr	r2, [sp, #24]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800d032:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800d036:	f003 f9bb 	bl	80103b0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800d03a:	2201      	movs	r2, #1
 800d03c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d040:	487e      	ldr	r0, [pc, #504]	; (800d23c <BSP_LCD_InitEx+0x2cc>)
 800d042:	f003 fbc9 	bl	80107d8 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 800d046:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800d04a:	a90e      	add	r1, sp, #56	; 0x38
 800d04c:	487b      	ldr	r0, [pc, #492]	; (800d23c <BSP_LCD_InitEx+0x2cc>)
  LCD_TE_GPIO_CLK_ENABLE();
 800d04e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d052:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800d056:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800d05a:	f402 7200 	and.w	r2, r2, #512	; 0x200
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800d05e:	ed9f 7b72 	vldr	d7, [pc, #456]	; 800d228 <BSP_LCD_InitEx+0x2b8>
  LCD_TE_GPIO_CLK_ENABLE();
 800d062:	9207      	str	r2, [sp, #28]
 800d064:	9a07      	ldr	r2, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800d066:	2202      	movs	r2, #2
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800d068:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800d06c:	9211      	str	r2, [sp, #68]	; 0x44
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800d06e:	f003 f99f 	bl	80103b0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 800d072:	2201      	movs	r2, #1
 800d074:	2104      	movs	r1, #4
 800d076:	4871      	ldr	r0, [pc, #452]	; (800d23c <BSP_LCD_InitEx+0x2cc>)
 800d078:	f003 fbae 	bl	80107d8 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 800d07c:	2200      	movs	r2, #0
 800d07e:	210f      	movs	r1, #15
 800d080:	2058      	movs	r0, #88	; 0x58
 800d082:	f000 fd01 	bl	800da88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800d086:	2058      	movs	r0, #88	; 0x58
 800d088:	f000 fd3c 	bl	800db04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 800d08c:	2200      	movs	r2, #0
 800d08e:	210f      	movs	r1, #15
 800d090:	205a      	movs	r0, #90	; 0x5a
 800d092:	f000 fcf9 	bl	800da88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800d096:	205a      	movs	r0, #90	; 0x5a
 800d098:	f000 fd34 	bl	800db04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 800d09c:	2200      	movs	r2, #0
 800d09e:	210f      	movs	r1, #15
 800d0a0:	207b      	movs	r0, #123	; 0x7b
 800d0a2:	f000 fcf1 	bl	800da88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800d0a6:	207b      	movs	r0, #123	; 0x7b
 800d0a8:	f000 fd2c 	bl	800db04 <HAL_NVIC_EnableIRQ>
    hlcd_ltdc.Instance = LTDC;
 800d0ac:	4a64      	ldr	r2, [pc, #400]	; (800d240 <BSP_LCD_InitEx+0x2d0>)
    hlcd_dma2d.Instance = DMA2D;
 800d0ae:	4965      	ldr	r1, [pc, #404]	; (800d244 <BSP_LCD_InitEx+0x2d4>)
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800d0b0:	4650      	mov	r0, sl
    hlcd_ltdc.Instance = LTDC;
 800d0b2:	f8c8 2000 	str.w	r2, [r8]
    hlcd_dma2d.Instance = DMA2D;
 800d0b6:	4a64      	ldr	r2, [pc, #400]	; (800d248 <BSP_LCD_InitEx+0x2d8>)
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800d0b8:	9b01      	ldr	r3, [sp, #4]
    hlcd_dma2d.Instance = DMA2D;
 800d0ba:	6011      	str	r1, [r2, #0]
    hlcd_dsi.Instance = DSI;
 800d0bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800d0c0:	4629      	mov	r1, r5
    hlcd_dsi.Instance = DSI;
 800d0c2:	f8ca 2000 	str.w	r2, [sl]
    __HAL_RCC_LTDC_CLK_ENABLE();
 800d0c6:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 800d0ca:	f042 0208 	orr.w	r2, r2, #8
 800d0ce:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
 800d0d2:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 800d0d6:	f002 0208 	and.w	r2, r2, #8
 800d0da:	9205      	str	r2, [sp, #20]
 800d0dc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_LTDC_FORCE_RESET();
 800d0de:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800d0e2:	f042 0208 	orr.w	r2, r2, #8
 800d0e6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800d0ea:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800d0ee:	f022 0208 	bic.w	r2, r2, #8
 800d0f2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800d0f6:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800d0fa:	f042 0210 	orr.w	r2, r2, #16
 800d0fe:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
 800d102:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800d106:	f002 0210 	and.w	r2, r2, #16
 800d10a:	9204      	str	r2, [sp, #16]
 800d10c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800d10e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d110:	f042 0210 	orr.w	r2, r2, #16
 800d114:	67e2      	str	r2, [r4, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800d116:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d118:	f022 0210 	bic.w	r2, r2, #16
 800d11c:	67e2      	str	r2, [r4, #124]	; 0x7c
    __HAL_RCC_DSI_CLK_ENABLE();
 800d11e:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 800d122:	f042 0210 	orr.w	r2, r2, #16
 800d126:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
 800d12a:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 800d12e:	f002 0210 	and.w	r2, r2, #16
 800d132:	9203      	str	r2, [sp, #12]
 800d134:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_DSI_FORCE_RESET();
 800d136:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800d13a:	f042 0210 	orr.w	r2, r2, #16
 800d13e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 800d142:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800d146:	f022 0210 	bic.w	r2, r2, #16
 800d14a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800d14e:	463a      	mov	r2, r7
 800d150:	f7ff fe46 	bl	800cde0 <MX_DSIHOST_DSI_Init>
 800d154:	2800      	cmp	r0, #0
 800d156:	d14f      	bne.n	800d1f8 <BSP_LCD_InitEx+0x288>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800d158:	4640      	mov	r0, r8
 800d15a:	f7ff feef 	bl	800cf3c <MX_LTDC_ClockConfig>
 800d15e:	2800      	cmp	r0, #0
 800d160:	d14a      	bne.n	800d1f8 <BSP_LCD_InitEx+0x288>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800d162:	4629      	mov	r1, r5
 800d164:	463a      	mov	r2, r7
 800d166:	4640      	mov	r0, r8
 800d168:	f7ff fea2 	bl	800ceb0 <MX_LTDC_Init>
 800d16c:	4601      	mov	r1, r0
 800d16e:	2800      	cmp	r0, #0
 800d170:	d142      	bne.n	800d1f8 <BSP_LCD_InitEx+0x288>
      config.Address     = LCD_LAYER_0_ADDRESS;
 800d172:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800d176:	aa0e      	add	r2, sp, #56	; 0x38
 800d178:	4640      	mov	r0, r8
      config.X1          = Width;
 800d17a:	950f      	str	r5, [sp, #60]	; 0x3c
      config.Y1          = Height;
 800d17c:	9711      	str	r7, [sp, #68]	; 0x44
      config.X0          = 0;
 800d17e:	910e      	str	r1, [sp, #56]	; 0x38
      config.Y0          = 0;
 800d180:	9110      	str	r1, [sp, #64]	; 0x40
      config.PixelFormat = ltdc_pixel_format;
 800d182:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
      config.Address     = LCD_LAYER_0_ADDRESS;
 800d186:	9313      	str	r3, [sp, #76]	; 0x4c
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800d188:	f7ff feb2 	bl	800cef0 <MX_LTDC_ConfigLayer>
 800d18c:	4604      	mov	r4, r0
 800d18e:	b150      	cbz	r0, 800d1a6 <BSP_LCD_InitEx+0x236>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800d190:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 800d194:	2301      	movs	r3, #1
 800d196:	61b3      	str	r3, [r6, #24]
}
 800d198:	b015      	add	sp, #84	; 0x54
 800d19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      dsi_pixel_format = DSI_RGB565;
 800d19e:	465b      	mov	r3, fp
      Lcd_Ctx[Instance].BppFactor = 2U;
 800d1a0:	4611      	mov	r1, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 800d1a2:	4693      	mov	fp, r2
 800d1a4:	e6fe      	b.n	800cfa4 <BSP_LCD_InitEx+0x34>
        (void)HAL_DSI_Start(&hlcd_dsi);
 800d1a6:	4650      	mov	r0, sl
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800d1a8:	4d28      	ldr	r5, [pc, #160]	; (800d24c <BSP_LCD_InitEx+0x2dc>)
        (void)HAL_DSI_Start(&hlcd_dsi);
 800d1aa:	f002 ff8f 	bl	80100cc <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 800d1ae:	2104      	movs	r1, #4
 800d1b0:	4650      	mov	r0, sl
 800d1b2:	f002 ff77 	bl	80100a4 <HAL_DSI_ConfigFlowControl>
  IOCtx.GetTick     = BSP_GetTick;
 800d1b6:	4b26      	ldr	r3, [pc, #152]	; (800d250 <BSP_LCD_InitEx+0x2e0>)
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800d1b8:	a90a      	add	r1, sp, #40	; 0x28
 800d1ba:	4628      	mov	r0, r5
  IOCtx.GetTick     = BSP_GetTick;
 800d1bc:	930d      	str	r3, [sp, #52]	; 0x34
  IOCtx.WriteReg    = DSI_IO_Write;
 800d1be:	4b25      	ldr	r3, [pc, #148]	; (800d254 <BSP_LCD_InitEx+0x2e4>)
  IOCtx.Address     = 0;
 800d1c0:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
  IOCtx.WriteReg    = DSI_IO_Write;
 800d1c4:	930b      	str	r3, [sp, #44]	; 0x2c
  IOCtx.ReadReg     = DSI_IO_Read;
 800d1c6:	4b24      	ldr	r3, [pc, #144]	; (800d258 <BSP_LCD_InitEx+0x2e8>)
 800d1c8:	930c      	str	r3, [sp, #48]	; 0x30
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800d1ca:	f7fa fd95 	bl	8007cf8 <OTM8009A_RegisterBusIO>
 800d1ce:	b980      	cbnz	r0, 800d1f2 <BSP_LCD_InitEx+0x282>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 800d1d0:	4c22      	ldr	r4, [pc, #136]	; (800d25c <BSP_LCD_InitEx+0x2ec>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	a909      	add	r1, sp, #36	; 0x24
    Lcd_CompObj = &OTM8009AObj;
 800d1d6:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800d1d8:	f7fa fd7a 	bl	8007cd0 <OTM8009A_ReadID>
 800d1dc:	b948      	cbnz	r0, 800d1f2 <BSP_LCD_InitEx+0x282>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800d1de:	4b20      	ldr	r3, [pc, #128]	; (800d260 <BSP_LCD_InitEx+0x2f0>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800d1e0:	464a      	mov	r2, r9
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800d1e2:	4d20      	ldr	r5, [pc, #128]	; (800d264 <BSP_LCD_InitEx+0x2f4>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800d1e4:	4659      	mov	r1, fp
 800d1e6:	6820      	ldr	r0, [r4, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800d1e8:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4798      	blx	r3
 800d1ee:	2800      	cmp	r0, #0
 800d1f0:	d0d0      	beq.n	800d194 <BSP_LCD_InitEx+0x224>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800d1f2:	f06f 0006 	mvn.w	r0, #6
 800d1f6:	e7cd      	b.n	800d194 <BSP_LCD_InitEx+0x224>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800d1f8:	f06f 0003 	mvn.w	r0, #3
}
 800d1fc:	b015      	add	sp, #84	; 0x54
 800d1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d202:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800d206:	e7c7      	b.n	800d198 <BSP_LCD_InitEx+0x228>
 800d208:	00000008 	.word	0x00000008
 800d20c:	00000001 	.word	0x00000001
 800d210:	00000001 	.word	0x00000001
 800d214:	00000003 	.word	0x00000003
 800d218:	00001000 	.word	0x00001000
 800d21c:	00000001 	.word	0x00000001
 800d220:	00000000 	.word	0x00000000
 800d224:	00000002 	.word	0x00000002
 800d228:	00000004 	.word	0x00000004
 800d22c:	00000000 	.word	0x00000000
 800d230:	58024400 	.word	0x58024400
 800d234:	24009ed0 	.word	0x24009ed0
 800d238:	58021800 	.word	0x58021800
 800d23c:	58022400 	.word	0x58022400
 800d240:	50001000 	.word	0x50001000
 800d244:	52001000 	.word	0x52001000
 800d248:	24009f10 	.word	0x24009f10
 800d24c:	24009ef0 	.word	0x24009ef0
 800d250:	0800bffd 	.word	0x0800bffd
 800d254:	0800cb05 	.word	0x0800cb05
 800d258:	0800c899 	.word	0x0800c899
 800d25c:	24009ecc 	.word	0x24009ecc
 800d260:	24007384 	.word	0x24007384
 800d264:	24009eec 	.word	0x24009eec
 800d268:	24009f94 	.word	0x24009f94
 800d26c:	24009f78 	.word	0x24009f78

0800d270 <BSP_LCD_Init>:
{
 800d270:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800d272:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 800d276:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800d278:	f44f 7348 	mov.w	r3, #800	; 0x320
 800d27c:	2201      	movs	r2, #1
 800d27e:	9400      	str	r4, [sp, #0]
 800d280:	f7ff fe76 	bl	800cf70 <BSP_LCD_InitEx>
}
 800d284:	b002      	add	sp, #8
 800d286:	bd10      	pop	{r4, pc}

0800d288 <BSP_LCD_ConfigLayer>:
  if(Instance >= LCD_INSTANCES_NBR)
 800d288:	b948      	cbnz	r0, 800d29e <BSP_LCD_ConfigLayer+0x16>
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 800d28a:	4806      	ldr	r0, [pc, #24]	; (800d2a4 <BSP_LCD_ConfigLayer+0x1c>)
{
 800d28c:	b508      	push	{r3, lr}
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 800d28e:	f7ff fe2f 	bl	800cef0 <MX_LTDC_ConfigLayer>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800d292:	2800      	cmp	r0, #0
 800d294:	bf0c      	ite	eq
 800d296:	2000      	moveq	r0, #0
 800d298:	f06f 0003 	mvnne.w	r0, #3
}
 800d29c:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d29e:	f06f 0001 	mvn.w	r0, #1
}
 800d2a2:	4770      	bx	lr
 800d2a4:	24009f94 	.word	0x24009f94

0800d2a8 <BSP_LCD_SetBrightness>:
  if(Instance >= LCD_INSTANCES_NBR)
 800d2a8:	b958      	cbnz	r0, 800d2c2 <BSP_LCD_SetBrightness+0x1a>
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 800d2aa:	4a07      	ldr	r2, [pc, #28]	; (800d2c8 <BSP_LCD_SetBrightness+0x20>)
{
 800d2ac:	b508      	push	{r3, lr}
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 800d2ae:	4b07      	ldr	r3, [pc, #28]	; (800d2cc <BSP_LCD_SetBrightness+0x24>)
 800d2b0:	6810      	ldr	r0, [r2, #0]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	695b      	ldr	r3, [r3, #20]
 800d2b6:	4798      	blx	r3
      ret = BSP_ERROR_PERIPH_FAILURE;
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	bf18      	it	ne
 800d2bc:	f06f 0003 	mvnne.w	r0, #3
}
 800d2c0:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d2c2:	f06f 0001 	mvn.w	r0, #1
}
 800d2c6:	4770      	bx	lr
 800d2c8:	24009ecc 	.word	0x24009ecc
 800d2cc:	24009eec 	.word	0x24009eec

0800d2d0 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800d2d0:	b410      	push	{r4}
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800d2d2:	4c0b      	ldr	r4, [pc, #44]	; (800d300 <MX_QSPI_Init+0x30>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800d2d4:	2200      	movs	r2, #0
  hQspi->Instance                = QUADSPI;
 800d2d6:	6004      	str	r4, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800d2d8:	684c      	ldr	r4, [r1, #4]
 800d2da:	6044      	str	r4, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 800d2dc:	2401      	movs	r4, #1
 800d2de:	6084      	str	r4, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800d2e0:	688c      	ldr	r4, [r1, #8]
 800d2e2:	60c4      	str	r4, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800d2e4:	680c      	ldr	r4, [r1, #0]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800d2e6:	68c9      	ldr	r1, [r1, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800d2e8:	6104      	str	r4, [r0, #16]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800d2ea:	6201      	str	r1, [r0, #32]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800d2ec:	f44f 7140 	mov.w	r1, #768	; 0x300

  return HAL_QSPI_Init(hQspi);
}
 800d2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800d2f4:	6182      	str	r2, [r0, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800d2f6:	61c2      	str	r2, [r0, #28]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800d2f8:	6141      	str	r1, [r0, #20]
  return HAL_QSPI_Init(hQspi);
 800d2fa:	f004 bae7 	b.w	80118cc <HAL_QSPI_Init>
 800d2fe:	bf00      	nop
 800d300:	52005000 	.word	0x52005000

0800d304 <BSP_QSPI_Init>:
{
 800d304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d308:	b0a5      	sub	sp, #148	; 0x94
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800d30a:	2800      	cmp	r0, #0
 800d30c:	f040 81e2 	bne.w	800d6d4 <BSP_QSPI_Init+0x3d0>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800d310:	4d04      	ldr	r5, [pc, #16]	; (800d324 <BSP_QSPI_Init+0x20>)
 800d312:	4604      	mov	r4, r0
 800d314:	782b      	ldrb	r3, [r5, #0]
 800d316:	b13b      	cbz	r3, 800d328 <BSP_QSPI_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 800d318:	4680      	mov	r8, r0
}
 800d31a:	4640      	mov	r0, r8
 800d31c:	b025      	add	sp, #148	; 0x94
 800d31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d322:	bf00      	nop
 800d324:	2400a03c 	.word	0x2400a03c
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800d328:	4bc9      	ldr	r3, [pc, #804]	; (800d650 <BSP_QSPI_Init+0x34c>)
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800d32a:	2709      	movs	r7, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800d32c:	f04f 0940 	mov.w	r9, #64	; 0x40
 800d330:	460e      	mov	r6, r1
  QSPI_CLK_ENABLE();
 800d332:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800d336:	f04f 0b0a 	mov.w	fp, #10
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800d33a:	48c6      	ldr	r0, [pc, #792]	; (800d654 <BSP_QSPI_Init+0x350>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800d33c:	f04f 0801 	mov.w	r8, #1
  QSPI_CLK_ENABLE();
 800d340:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800d344:	f44f 7a00 	mov.w	sl, #512	; 0x200
  QSPI_CLK_ENABLE();
 800d348:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800d34c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800d350:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800d354:	9201      	str	r2, [sp, #4]
 800d356:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 800d358:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d35a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d35e:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800d360:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d362:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d366:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 800d368:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d36c:	f042 0202 	orr.w	r2, r2, #2
 800d370:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d374:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d378:	f002 0202 	and.w	r2, r2, #2
 800d37c:	9202      	str	r2, [sp, #8]
 800d37e:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800d380:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d388:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d38c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d390:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800d394:	9203      	str	r2, [sp, #12]
 800d396:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800d398:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d39c:	f042 0208 	orr.w	r2, r2, #8
 800d3a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d3a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d3a8:	f002 0208 	and.w	r2, r2, #8
 800d3ac:	9204      	str	r2, [sp, #16]
 800d3ae:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800d3b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d3b4:	f042 0220 	orr.w	r2, r2, #32
 800d3b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d3bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d3c0:	f002 0220 	and.w	r2, r2, #32
 800d3c4:	9205      	str	r2, [sp, #20]
 800d3c6:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800d3c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d3cc:	f042 0220 	orr.w	r2, r2, #32
 800d3d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d3d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d3d8:	f002 0220 	and.w	r2, r2, #32
 800d3dc:	9206      	str	r2, [sp, #24]
 800d3de:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800d3e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d3e4:	f042 0220 	orr.w	r2, r2, #32
 800d3e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d3ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d3f0:	f002 0220 	and.w	r2, r2, #32
 800d3f4:	9207      	str	r2, [sp, #28]
 800d3f6:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800d3f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d3fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d400:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d404:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d408:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800d40c:	9208      	str	r2, [sp, #32]
 800d40e:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800d410:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d414:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d418:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d41c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d420:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800d424:	9209      	str	r2, [sp, #36]	; 0x24
 800d426:	9a09      	ldr	r2, [sp, #36]	; 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800d428:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d42c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d430:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d434:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d438:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800d43c:	920a      	str	r2, [sp, #40]	; 0x28
 800d43e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800d440:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d448:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800d44c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d450:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800d454:	920b      	str	r2, [sp, #44]	; 0x2c
 800d456:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800d458:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800d45c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d460:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800d464:	2204      	movs	r2, #4
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800d466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d46a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d46e:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800d470:	2302      	movs	r3, #2
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800d472:	990c      	ldr	r1, [sp, #48]	; 0x30
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800d474:	a916      	add	r1, sp, #88	; 0x58
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800d476:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d47a:	2200      	movs	r2, #0
 800d47c:	2303      	movs	r3, #3
 800d47e:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800d482:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800d484:	f002 ff94 	bl	80103b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800d488:	a916      	add	r1, sp, #88	; 0x58
 800d48a:	4873      	ldr	r0, [pc, #460]	; (800d658 <BSP_QSPI_Init+0x354>)
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800d48c:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800d490:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800d494:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800d498:	f002 ff8a 	bl	80103b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800d49c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800d4a0:	a916      	add	r1, sp, #88	; 0x58
 800d4a2:	486e      	ldr	r0, [pc, #440]	; (800d65c <BSP_QSPI_Init+0x358>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800d4a4:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800d4a6:	9418      	str	r4, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800d4a8:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800d4aa:	f002 ff81 	bl	80103b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800d4ae:	2304      	movs	r3, #4
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800d4b0:	a916      	add	r1, sp, #88	; 0x58
 800d4b2:	486b      	ldr	r0, [pc, #428]	; (800d660 <BSP_QSPI_Init+0x35c>)
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800d4b4:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800d4b6:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800d4b8:	f002 ff7a 	bl	80103b0 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800d4bc:	a916      	add	r1, sp, #88	; 0x58
 800d4be:	4869      	ldr	r0, [pc, #420]	; (800d664 <BSP_QSPI_Init+0x360>)
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800d4c0:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800d4c4:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800d4c8:	f002 ff72 	bl	80103b0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800d4cc:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800d4ce:	a916      	add	r1, sp, #88	; 0x58
 800d4d0:	4863      	ldr	r0, [pc, #396]	; (800d660 <BSP_QSPI_Init+0x35c>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800d4d2:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800d4d4:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800d4d6:	f002 ff6b 	bl	80103b0 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800d4da:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800d4dc:	a916      	add	r1, sp, #88	; 0x58
 800d4de:	4861      	ldr	r0, [pc, #388]	; (800d664 <BSP_QSPI_Init+0x360>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800d4e0:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800d4e2:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800d4e4:	f002 ff64 	bl	80103b0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800d4e8:	a916      	add	r1, sp, #88	; 0x58
 800d4ea:	485b      	ldr	r0, [pc, #364]	; (800d658 <BSP_QSPI_Init+0x354>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800d4ec:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800d4f0:	f002 ff5e 	bl	80103b0 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800d4f4:	a916      	add	r1, sp, #88	; 0x58
 800d4f6:	485b      	ldr	r0, [pc, #364]	; (800d664 <BSP_QSPI_Init+0x360>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800d4f8:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800d4fc:	f002 ff58 	bl	80103b0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800d500:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800d504:	a916      	add	r1, sp, #88	; 0x58
 800d506:	4854      	ldr	r0, [pc, #336]	; (800d658 <BSP_QSPI_Init+0x354>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800d508:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800d50a:	f002 ff51 	bl	80103b0 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800d50e:	4622      	mov	r2, r4
 800d510:	210f      	movs	r1, #15
 800d512:	205c      	movs	r0, #92	; 0x5c
 800d514:	f000 fab8 	bl	800da88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800d518:	205c      	movs	r0, #92	; 0x5c
 800d51a:	f000 faf3 	bl	800db04 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800d51e:	a811      	add	r0, sp, #68	; 0x44
 800d520:	f7f9 fcf8 	bl	8006f14 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800d524:	7872      	ldrb	r2, [r6, #1]
 800d526:	4b50      	ldr	r3, [pc, #320]	; (800d668 <BSP_QSPI_Init+0x364>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800d528:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800d52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d530:	930e      	str	r3, [sp, #56]	; 0x38
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d532:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d534:	fa93 f3a3 	rbit	r3, r3
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800d538:	fab3 f383 	clz	r3, r3
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800d53c:	2a00      	cmp	r2, #0
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800d53e:	4f4b      	ldr	r7, [pc, #300]	; (800d66c <BSP_QSPI_Init+0x368>)
 800d540:	a90d      	add	r1, sp, #52	; 0x34
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800d542:	f103 33ff 	add.w	r3, r3, #4294967295
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800d546:	4638      	mov	r0, r7
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800d548:	930d      	str	r3, [sp, #52]	; 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800d54a:	bf0c      	ite	eq
 800d54c:	2310      	moveq	r3, #16
 800d54e:	2300      	movne	r3, #0
 800d550:	930f      	str	r3, [sp, #60]	; 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800d552:	f7ff febd 	bl	800d2d0 <MX_QSPI_Init>
 800d556:	2800      	cmp	r0, #0
 800d558:	f040 80bf 	bne.w	800d6da <BSP_QSPI_Init+0x3d6>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800d55c:	2103      	movs	r1, #3
 800d55e:	4638      	mov	r0, r7
 800d560:	f7f9 fec2 	bl	80072e8 <MT25TL01G_ResetEnable>
 800d564:	2800      	cmp	r0, #0
 800d566:	f040 80a9 	bne.w	800d6bc <BSP_QSPI_Init+0x3b8>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800d56a:	2103      	movs	r1, #3
 800d56c:	4638      	mov	r0, r7
 800d56e:	f7f9 fedd 	bl	800732c <MT25TL01G_ResetMemory>
 800d572:	2800      	cmp	r0, #0
 800d574:	f040 80a2 	bne.w	800d6bc <BSP_QSPI_Init+0x3b8>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d578:	7869      	ldrb	r1, [r5, #1]
 800d57a:	4638      	mov	r0, r7
 800d57c:	f7f9 fce0 	bl	8006f40 <MT25TL01G_AutoPollingMemReady>
 800d580:	2800      	cmp	r0, #0
 800d582:	f040 809b 	bne.w	800d6bc <BSP_QSPI_Init+0x3b8>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800d586:	4621      	mov	r1, r4
 800d588:	4638      	mov	r0, r7
 800d58a:	f7f9 fead 	bl	80072e8 <MT25TL01G_ResetEnable>
 800d58e:	2800      	cmp	r0, #0
 800d590:	f040 8094 	bne.w	800d6bc <BSP_QSPI_Init+0x3b8>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800d594:	4621      	mov	r1, r4
 800d596:	4638      	mov	r0, r7
 800d598:	f7f9 fec8 	bl	800732c <MT25TL01G_ResetMemory>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	f040 808d 	bne.w	800d6bc <BSP_QSPI_Init+0x3b8>
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d5a2:	4621      	mov	r1, r4
 800d5a4:	4638      	mov	r0, r7
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800d5a6:	f8a5 8000 	strh.w	r8, [r5]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800d5aa:	70ac      	strb	r4, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d5ac:	f7f9 fcc8 	bl	8006f40 <MT25TL01G_AutoPollingMemReady>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	f040 8083 	bne.w	800d6bc <BSP_QSPI_Init+0x3b8>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d5b6:	7869      	ldrb	r1, [r5, #1]
 800d5b8:	4638      	mov	r0, r7
 800d5ba:	f7f9 fd45 	bl	8007048 <MT25TL01G_Enter4BytesAddressMode>
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d17c      	bne.n	800d6bc <BSP_QSPI_Init+0x3b8>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800d5c2:	f44f 7340 	mov.w	r3, #768	; 0x300
  uint16_t reg=0;
 800d5c6:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 800d5ca:	901b      	str	r0, [sp, #108]	; 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d5cc:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800d5d0:	931c      	str	r3, [sp, #112]	; 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800d5d2:	2385      	movs	r3, #133	; 0x85
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800d5d4:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d5d6:	a916      	add	r1, sp, #88	; 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800d5d8:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.NbData            = 2;
 800d5da:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800d5dc:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800d5e0:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
  s_command.NbData            = 2;
 800d5e4:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
 800d5e8:	e9cd 031f 	strd	r0, r3, [sp, #124]	; 0x7c
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d5ec:	481f      	ldr	r0, [pc, #124]	; (800d66c <BSP_QSPI_Init+0x368>)
 800d5ee:	f004 f9c9 	bl	8011984 <HAL_QSPI_Command>
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	d162      	bne.n	800d6bc <BSP_QSPI_Init+0x3b8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d5f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5fa:	481c      	ldr	r0, [pc, #112]	; (800d66c <BSP_QSPI_Init+0x368>)
 800d5fc:	f10d 0102 	add.w	r1, sp, #2
 800d600:	f004 faa8 	bl	8011b54 <HAL_QSPI_Receive>
 800d604:	2800      	cmp	r0, #0
 800d606:	d159      	bne.n	800d6bc <BSP_QSPI_Init+0x3b8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d608:	7869      	ldrb	r1, [r5, #1]
 800d60a:	4818      	ldr	r0, [pc, #96]	; (800d66c <BSP_QSPI_Init+0x368>)
 800d60c:	f7f9 fcd0 	bl	8006fb0 <MT25TL01G_WriteEnable>
 800d610:	4680      	mov	r8, r0
 800d612:	2800      	cmp	r0, #0
 800d614:	d152      	bne.n	800d6bc <BSP_QSPI_Init+0x3b8>
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800d616:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d61a:	f640 720f 	movw	r2, #3855	; 0xf0f
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d61e:	a916      	add	r1, sp, #88	; 0x58
 800d620:	4812      	ldr	r0, [pc, #72]	; (800d66c <BSP_QSPI_Init+0x368>)
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800d622:	401a      	ands	r2, r3
 800d624:	f248 0380 	movw	r3, #32896	; 0x8080
 800d628:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d62a:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800d62e:	f8ad 3002 	strh.w	r3, [sp, #2]
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800d632:	2381      	movs	r3, #129	; 0x81
 800d634:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d636:	f004 f9a5 	bl	8011984 <HAL_QSPI_Command>
 800d63a:	2800      	cmp	r0, #0
 800d63c:	d13e      	bne.n	800d6bc <BSP_QSPI_Init+0x3b8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d63e:	f10d 0102 	add.w	r1, sp, #2
 800d642:	f241 3288 	movw	r2, #5000	; 0x1388
 800d646:	4809      	ldr	r0, [pc, #36]	; (800d66c <BSP_QSPI_Init+0x368>)
 800d648:	f004 fa06 	bl	8011a58 <HAL_QSPI_Transmit>
 800d64c:	e010      	b.n	800d670 <BSP_QSPI_Init+0x36c>
 800d64e:	bf00      	nop
 800d650:	58024400 	.word	0x58024400
 800d654:	58020400 	.word	0x58020400
 800d658:	58021800 	.word	0x58021800
 800d65c:	58020c00 	.word	0x58020c00
 800d660:	58021c00 	.word	0x58021c00
 800d664:	58021400 	.word	0x58021400
 800d668:	080bfe7c 	.word	0x080bfe7c
 800d66c:	2400a048 	.word	0x2400a048
 800d670:	bb20      	cbnz	r0, 800d6bc <BSP_QSPI_Init+0x3b8>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800d672:	782b      	ldrb	r3, [r5, #0]
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800d674:	f896 9000 	ldrb.w	r9, [r6]
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800d678:	2b02      	cmp	r3, #2
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800d67a:	7876      	ldrb	r6, [r6, #1]
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800d67c:	d01e      	beq.n	800d6bc <BSP_QSPI_Init+0x3b8>
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800d67e:	2e00      	cmp	r6, #0
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800d680:	4817      	ldr	r0, [pc, #92]	; (800d6e0 <BSP_QSPI_Init+0x3dc>)
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800d682:	bf08      	it	eq
 800d684:	2410      	moveq	r4, #16
 800d686:	60fc      	str	r4, [r7, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800d688:	f004 f920 	bl	80118cc <HAL_QSPI_Init>
 800d68c:	b9b0      	cbnz	r0, 800d6bc <BSP_QSPI_Init+0x3b8>
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800d68e:	786b      	ldrb	r3, [r5, #1]
 800d690:	2b03      	cmp	r3, #3
 800d692:	d00b      	beq.n	800d6ac <BSP_QSPI_Init+0x3a8>
          if(Mode == MT25TL01G_QPI_MODE)
 800d694:	f1b9 0f03 	cmp.w	r9, #3
 800d698:	d016      	beq.n	800d6c8 <BSP_QSPI_Init+0x3c4>
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800d69a:	2301      	movs	r3, #1
}
 800d69c:	4640      	mov	r0, r8
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800d69e:	f885 9001 	strb.w	r9, [r5, #1]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800d6a2:	70ae      	strb	r6, [r5, #2]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800d6a4:	702b      	strb	r3, [r5, #0]
}
 800d6a6:	b025      	add	sp, #148	; 0x94
 800d6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if(Mode != MT25TL01G_QPI_MODE)
 800d6ac:	f1b9 0f03 	cmp.w	r9, #3
 800d6b0:	d0f3      	beq.n	800d69a <BSP_QSPI_Init+0x396>
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800d6b2:	480b      	ldr	r0, [pc, #44]	; (800d6e0 <BSP_QSPI_Init+0x3dc>)
 800d6b4:	f7f9 fd40 	bl	8007138 <MT25TL01G_ExitQPIMode>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	d0ee      	beq.n	800d69a <BSP_QSPI_Init+0x396>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800d6bc:	f06f 0804 	mvn.w	r8, #4
}
 800d6c0:	4640      	mov	r0, r8
 800d6c2:	b025      	add	sp, #148	; 0x94
 800d6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800d6c8:	4805      	ldr	r0, [pc, #20]	; (800d6e0 <BSP_QSPI_Init+0x3dc>)
 800d6ca:	f7f9 fd19 	bl	8007100 <MT25TL01G_EnterQPIMode>
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d0e3      	beq.n	800d69a <BSP_QSPI_Init+0x396>
 800d6d2:	e7f3      	b.n	800d6bc <BSP_QSPI_Init+0x3b8>
    ret = BSP_ERROR_WRONG_PARAM;
 800d6d4:	f06f 0801 	mvn.w	r8, #1
 800d6d8:	e61f      	b.n	800d31a <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800d6da:	f06f 0803 	mvn.w	r8, #3
  return ret;
 800d6de:	e61c      	b.n	800d31a <BSP_QSPI_Init+0x16>
 800d6e0:	2400a048 	.word	0x2400a048

0800d6e4 <BSP_QSPI_EnableMemoryMappedMode>:
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800d6e4:	b998      	cbnz	r0, 800d70e <BSP_QSPI_EnableMemoryMappedMode+0x2a>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d6e6:	480b      	ldr	r0, [pc, #44]	; (800d714 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
{
 800d6e8:	b510      	push	{r4, lr}
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800d6ea:	4c0b      	ldr	r4, [pc, #44]	; (800d718 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
 800d6ec:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d6ee:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800d6f0:	b133      	cbz	r3, 800d700 <BSP_QSPI_EnableMemoryMappedMode+0x1c>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d6f2:	f7f9 fd3d 	bl	8007170 <MT25TL01G_EnableMemoryMappedModeDTR>
 800d6f6:	b938      	cbnz	r0, 800d708 <BSP_QSPI_EnableMemoryMappedMode+0x24>
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800d6f8:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 800d6fa:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800d6fc:	7023      	strb	r3, [r4, #0]
}
 800d6fe:	bd10      	pop	{r4, pc}
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d700:	f7f9 fd92 	bl	8007228 <MT25TL01G_EnableMemoryMappedModeSTR>
 800d704:	2800      	cmp	r0, #0
 800d706:	d0f7      	beq.n	800d6f8 <BSP_QSPI_EnableMemoryMappedMode+0x14>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800d708:	f06f 0004 	mvn.w	r0, #4
}
 800d70c:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d70e:	f06f 0001 	mvn.w	r0, #1
}
 800d712:	4770      	bx	lr
 800d714:	2400a048 	.word	0x2400a048
 800d718:	2400a03c 	.word	0x2400a03c

0800d71c <BSP_SD_DeInit>:
  * @retval SD status
  */
int32_t BSP_SD_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;
  if(Instance >= SD_INSTANCES_NBR)
 800d71c:	b9d0      	cbnz	r0, 800d754 <BSP_SD_DeInit+0x38>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 800d71e:	4810      	ldr	r0, [pc, #64]	; (800d760 <BSP_SD_DeInit+0x44>)
{
 800d720:	b510      	push	{r4, lr}
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 800d722:	f007 fab3 	bl	8014c8c <HAL_SD_DeInit>
 800d726:	4604      	mov	r4, r0
 800d728:	b9b8      	cbnz	r0, 800d75a <BSP_SD_DeInit+0x3e>
{
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
  {
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 800d72a:	2031      	movs	r0, #49	; 0x31
 800d72c:	f000 f9f8 	bl	800db20 <HAL_NVIC_DisableIRQ>

    /* DeInit GPIO pins can be done in the application
    (by surcharging this __weak function) */

    /* Disable SDMMC1 clock */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800d730:	4a0c      	ldr	r2, [pc, #48]	; (800d764 <BSP_SD_DeInit+0x48>)
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
#else
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800d732:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800d736:	480c      	ldr	r0, [pc, #48]	; (800d768 <BSP_SD_DeInit+0x4c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800d738:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 800d73c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d740:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800d744:	f002 ff7a 	bl	801063c <HAL_GPIO_DeInit>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
    HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 800d748:	2104      	movs	r1, #4
 800d74a:	4808      	ldr	r0, [pc, #32]	; (800d76c <BSP_SD_DeInit+0x50>)
 800d74c:	f002 ff76 	bl	801063c <HAL_GPIO_DeInit>
  int32_t ret = BSP_ERROR_NONE;
 800d750:	4620      	mov	r0, r4
}
 800d752:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d754:	f06f 0001 	mvn.w	r0, #1
}
 800d758:	4770      	bx	lr
      ret = BSP_ERROR_PERIPH_FAILURE;
 800d75a:	f06f 0003 	mvn.w	r0, #3
}
 800d75e:	bd10      	pop	{r4, pc}
 800d760:	2400a094 	.word	0x2400a094
 800d764:	58024400 	.word	0x58024400
 800d768:	58020800 	.word	0x58020800
 800d76c:	58020c00 	.word	0x58020c00

0800d770 <MX_SDMMC1_SD_Init>:
{
 800d770:	b510      	push	{r4, lr}
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d772:	2200      	movs	r2, #0
  hsd->Instance                 = SDMMC1;
 800d774:	4c07      	ldr	r4, [pc, #28]	; (800d794 <MX_SDMMC1_SD_Init+0x24>)
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
 800d776:	2102      	movs	r1, #2
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d778:	6102      	str	r2, [r0, #16]
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d77a:	e9c0 4200 	strd	r4, r2, [r0]
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d77e:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 800d782:	2204      	movs	r2, #4
 800d784:	e9c0 2105 	strd	r2, r1, [r0, #20]
  if(HAL_SD_Init(hsd) != HAL_OK)
 800d788:	f007 fefc 	bl	8015584 <HAL_SD_Init>
}
 800d78c:	3800      	subs	r0, #0
 800d78e:	bf18      	it	ne
 800d790:	2001      	movne	r0, #1
 800d792:	bd10      	pop	{r4, pc}
 800d794:	52007000 	.word	0x52007000

0800d798 <BSP_SD_Init>:
  if(Instance >= SD_INSTANCES_NBR)
 800d798:	2800      	cmp	r0, #0
 800d79a:	f040 8081 	bne.w	800d8a0 <BSP_SD_Init+0x108>
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800d79e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d7a2:	4842      	ldr	r0, [pc, #264]	; (800d8ac <BSP_SD_Init+0x114>)
{
 800d7a4:	b530      	push	{r4, r5, lr}
 800d7a6:	b08d      	sub	sp, #52	; 0x34
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800d7a8:	f003 f810 	bl	80107cc <HAL_GPIO_ReadPin>
    if(ret != GPIO_PIN_RESET)
 800d7ac:	4605      	mov	r5, r0
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	d172      	bne.n	800d898 <BSP_SD_Init+0x100>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800d7b2:	4c3f      	ldr	r4, [pc, #252]	; (800d8b0 <BSP_SD_Init+0x118>)
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800d7b4:	220c      	movs	r2, #12
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800d7b6:	a906      	add	r1, sp, #24
 800d7b8:	483e      	ldr	r0, [pc, #248]	; (800d8b4 <BSP_SD_Init+0x11c>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800d7ba:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800d7be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7c2:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 800d7c6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800d7ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d7ce:	9301      	str	r3, [sp, #4]
 800d7d0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d7d2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d7d6:	f043 0302 	orr.w	r3, r3, #2
 800d7da:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d7de:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d7e2:	f003 0302 	and.w	r3, r3, #2
 800d7e6:	9302      	str	r3, [sp, #8]
 800d7e8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d7ea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d7ee:	f043 0304 	orr.w	r3, r3, #4
 800d7f2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d7f6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d7fa:	f003 0304 	and.w	r3, r3, #4
 800d7fe:	9303      	str	r3, [sp, #12]
 800d800:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d802:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d806:	f043 0308 	orr.w	r3, r3, #8
 800d80a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d80e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800d812:	920a      	str	r2, [sp, #40]	; 0x28
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800d814:	f44f 5288 	mov.w	r2, #4352	; 0x1100
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d818:	f003 0308 	and.w	r3, r3, #8
 800d81c:	9304      	str	r3, [sp, #16]
 800d81e:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800d820:	2302      	movs	r3, #2
 800d822:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d826:	2201      	movs	r2, #1
 800d828:	2303      	movs	r3, #3
 800d82a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800d82e:	f002 fdbf 	bl	80103b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin = GPIO_PIN_2;
 800d832:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800d834:	a906      	add	r1, sp, #24
 800d836:	4820      	ldr	r0, [pc, #128]	; (800d8b8 <BSP_SD_Init+0x120>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 800d838:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800d83a:	f002 fdb9 	bl	80103b0 <HAL_GPIO_Init>
  SD_DETECT_GPIO_CLK_ENABLE();
 800d83e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800d842:	f44f 7280 	mov.w	r2, #256	; 0x100
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800d846:	a906      	add	r1, sp, #24
 800d848:	4818      	ldr	r0, [pc, #96]	; (800d8ac <BSP_SD_Init+0x114>)
  SD_DETECT_GPIO_CLK_ENABLE();
 800d84a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d84e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d852:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d85a:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800d85c:	2300      	movs	r3, #0
  SD_DETECT_GPIO_CLK_ENABLE();
 800d85e:	9c05      	ldr	r4, [sp, #20]
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800d860:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d864:	2302      	movs	r3, #2
 800d866:	2201      	movs	r2, #1
 800d868:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800d86c:	f002 fda0 	bl	80103b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 800d870:	462a      	mov	r2, r5
 800d872:	210e      	movs	r1, #14
 800d874:	2031      	movs	r0, #49	; 0x31
 800d876:	f000 f907 	bl	800da88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800d87a:	2031      	movs	r0, #49	; 0x31
 800d87c:	f000 f942 	bl	800db04 <HAL_NVIC_EnableIRQ>
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 800d880:	480e      	ldr	r0, [pc, #56]	; (800d8bc <BSP_SD_Init+0x124>)
 800d882:	f7ff ff75 	bl	800d770 <MX_SDMMC1_SD_Init>
 800d886:	4604      	mov	r4, r0
 800d888:	b968      	cbnz	r0, 800d8a6 <BSP_SD_Init+0x10e>
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 800d88a:	2102      	movs	r1, #2
 800d88c:	480b      	ldr	r0, [pc, #44]	; (800d8bc <BSP_SD_Init+0x124>)
 800d88e:	f007 fedf 	bl	8015650 <HAL_SD_ConfigSpeedBusOperation>
  int32_t ret = BSP_ERROR_NONE;
 800d892:	4620      	mov	r0, r4
}
 800d894:	b00d      	add	sp, #52	; 0x34
 800d896:	bd30      	pop	{r4, r5, pc}
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800d898:	f06f 0006 	mvn.w	r0, #6
}
 800d89c:	b00d      	add	sp, #52	; 0x34
 800d89e:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d8a0:	f06f 0001 	mvn.w	r0, #1
}
 800d8a4:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 800d8a6:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800d8aa:	e7f3      	b.n	800d894 <BSP_SD_Init+0xfc>
 800d8ac:	58022000 	.word	0x58022000
 800d8b0:	58024400 	.word	0x58024400
 800d8b4:	58020800 	.word	0x58020800
 800d8b8:	58020c00 	.word	0x58020c00
 800d8bc:	2400a094 	.word	0x2400a094

0800d8c0 <BSP_SD_ReadBlocks>:
{
 800d8c0:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800d8c2:	2464      	movs	r4, #100	; 0x64
{
 800d8c4:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800d8c6:	fb03 f404 	mul.w	r4, r3, r4
  if(Instance >= SD_INSTANCES_NBR)
 800d8ca:	b950      	cbnz	r0, 800d8e2 <BSP_SD_ReadBlocks+0x22>
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800d8cc:	4806      	ldr	r0, [pc, #24]	; (800d8e8 <BSP_SD_ReadBlocks+0x28>)
 800d8ce:	9400      	str	r4, [sp, #0]
 800d8d0:	f006 ffcc 	bl	801486c <HAL_SD_ReadBlocks>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	bf0c      	ite	eq
 800d8d8:	2000      	moveq	r0, #0
 800d8da:	f06f 0003 	mvnne.w	r0, #3
}
 800d8de:	b002      	add	sp, #8
 800d8e0:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d8e2:	f06f 0001 	mvn.w	r0, #1
 800d8e6:	e7fa      	b.n	800d8de <BSP_SD_ReadBlocks+0x1e>
 800d8e8:	2400a094 	.word	0x2400a094

0800d8ec <BSP_SD_WriteBlocks>:
{
 800d8ec:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800d8ee:	2464      	movs	r4, #100	; 0x64
{
 800d8f0:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800d8f2:	fb03 f404 	mul.w	r4, r3, r4
  if(Instance >= SD_INSTANCES_NBR)
 800d8f6:	b950      	cbnz	r0, 800d90e <BSP_SD_WriteBlocks+0x22>
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800d8f8:	4806      	ldr	r0, [pc, #24]	; (800d914 <BSP_SD_WriteBlocks+0x28>)
 800d8fa:	9400      	str	r4, [sp, #0]
 800d8fc:	f007 f8d6 	bl	8014aac <HAL_SD_WriteBlocks>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800d900:	2800      	cmp	r0, #0
 800d902:	bf0c      	ite	eq
 800d904:	2000      	moveq	r0, #0
 800d906:	f06f 0003 	mvnne.w	r0, #3
}
 800d90a:	b002      	add	sp, #8
 800d90c:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d90e:	f06f 0001 	mvn.w	r0, #1
 800d912:	e7fa      	b.n	800d90a <BSP_SD_WriteBlocks+0x1e>
 800d914:	2400a094 	.word	0x2400a094

0800d918 <BSP_SD_GetCardState>:
{
 800d918:	b508      	push	{r3, lr}
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d91a:	4b04      	ldr	r3, [pc, #16]	; (800d92c <BSP_SD_GetCardState+0x14>)
 800d91c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
 800d920:	f007 fff4 	bl	801590c <HAL_SD_GetCardState>
}
 800d924:	3804      	subs	r0, #4
 800d926:	bf18      	it	ne
 800d928:	2001      	movne	r0, #1
 800d92a:	bd08      	pop	{r3, pc}
 800d92c:	2400a094 	.word	0x2400a094

0800d930 <BSP_SD_GetCardInfo>:
  if(Instance >= SD_INSTANCES_NBR)
 800d930:	b948      	cbnz	r0, 800d946 <BSP_SD_GetCardInfo+0x16>
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 800d932:	4806      	ldr	r0, [pc, #24]	; (800d94c <BSP_SD_GetCardInfo+0x1c>)
{
 800d934:	b508      	push	{r3, lr}
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 800d936:	f007 fd71 	bl	801541c <HAL_SD_GetCardInfo>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800d93a:	2800      	cmp	r0, #0
 800d93c:	bf0c      	ite	eq
 800d93e:	2000      	moveq	r0, #0
 800d940:	f06f 0003 	mvnne.w	r0, #3
}
 800d944:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d946:	f06f 0001 	mvn.w	r0, #1
}
 800d94a:	4770      	bx	lr
 800d94c:	2400a094 	.word	0x2400a094

0800d950 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop

0800d954 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800d954:	4b0f      	ldr	r3, [pc, #60]	; (800d994 <HAL_InitTick+0x40>)
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	b90b      	cbnz	r3, 800d95e <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800d95a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800d95c:	4770      	bx	lr
{
 800d95e:	b510      	push	{r4, lr}
 800d960:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800d962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d966:	4a0c      	ldr	r2, [pc, #48]	; (800d998 <HAL_InitTick+0x44>)
 800d968:	fbb0 f3f3 	udiv	r3, r0, r3
 800d96c:	6810      	ldr	r0, [r2, #0]
 800d96e:	fbb0 f0f3 	udiv	r0, r0, r3
 800d972:	f000 f8e9 	bl	800db48 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d976:	2c0f      	cmp	r4, #15
 800d978:	d800      	bhi.n	800d97c <HAL_InitTick+0x28>
 800d97a:	b108      	cbz	r0, 800d980 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800d97c:	2001      	movs	r0, #1
}
 800d97e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d980:	2200      	movs	r2, #0
 800d982:	4621      	mov	r1, r4
 800d984:	f04f 30ff 	mov.w	r0, #4294967295
 800d988:	f000 f87e 	bl	800da88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d98c:	4b03      	ldr	r3, [pc, #12]	; (800d99c <HAL_InitTick+0x48>)
 800d98e:	2000      	movs	r0, #0
 800d990:	601c      	str	r4, [r3, #0]
}
 800d992:	bd10      	pop	{r4, pc}
 800d994:	240074a4 	.word	0x240074a4
 800d998:	2400737c 	.word	0x2400737c
 800d99c:	240074a8 	.word	0x240074a8

0800d9a0 <HAL_Init>:
{
 800d9a0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d9a2:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d9a4:	4c12      	ldr	r4, [pc, #72]	; (800d9f0 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d9a6:	f000 f85d 	bl	800da64 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d9aa:	f004 fd9d 	bl	80124e8 <HAL_RCC_GetSysClockFreq>
 800d9ae:	4b11      	ldr	r3, [pc, #68]	; (800d9f4 <HAL_Init+0x54>)
 800d9b0:	4911      	ldr	r1, [pc, #68]	; (800d9f8 <HAL_Init+0x58>)
 800d9b2:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d9b4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d9b6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d9ba:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d9be:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d9c0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d9c2:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800d9c6:	490d      	ldr	r1, [pc, #52]	; (800d9fc <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d9c8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d9cc:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d9ce:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800d9d2:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d9d4:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d9d6:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d9d8:	f7ff ffbc 	bl	800d954 <HAL_InitTick>
 800d9dc:	b110      	cbz	r0, 800d9e4 <HAL_Init+0x44>
    return HAL_ERROR;
 800d9de:	2401      	movs	r4, #1
}
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	bd10      	pop	{r4, pc}
 800d9e4:	4604      	mov	r4, r0
  HAL_MspInit();
 800d9e6:	f7f8 fffb 	bl	80069e0 <HAL_MspInit>
}
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	bd10      	pop	{r4, pc}
 800d9ee:	bf00      	nop
 800d9f0:	24007380 	.word	0x24007380
 800d9f4:	58024400 	.word	0x58024400
 800d9f8:	080bf4ec 	.word	0x080bf4ec
 800d9fc:	2400737c 	.word	0x2400737c

0800da00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800da00:	4a03      	ldr	r2, [pc, #12]	; (800da10 <HAL_IncTick+0x10>)
 800da02:	4b04      	ldr	r3, [pc, #16]	; (800da14 <HAL_IncTick+0x14>)
 800da04:	6811      	ldr	r1, [r2, #0]
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	440b      	add	r3, r1
 800da0a:	6013      	str	r3, [r2, #0]
}
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop
 800da10:	2400a114 	.word	0x2400a114
 800da14:	240074a4 	.word	0x240074a4

0800da18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800da18:	4b01      	ldr	r3, [pc, #4]	; (800da20 <HAL_GetTick+0x8>)
 800da1a:	6818      	ldr	r0, [r3, #0]
}
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	2400a114 	.word	0x2400a114

0800da24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800da24:	b538      	push	{r3, r4, r5, lr}
 800da26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800da28:	f7ff fff6 	bl	800da18 <HAL_GetTick>
 800da2c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800da2e:	1c63      	adds	r3, r4, #1
 800da30:	d002      	beq.n	800da38 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800da32:	4b04      	ldr	r3, [pc, #16]	; (800da44 <HAL_Delay+0x20>)
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800da38:	f7ff ffee 	bl	800da18 <HAL_GetTick>
 800da3c:	1b43      	subs	r3, r0, r5
 800da3e:	42a3      	cmp	r3, r4
 800da40:	d3fa      	bcc.n	800da38 <HAL_Delay+0x14>
  {
  }
}
 800da42:	bd38      	pop	{r3, r4, r5, pc}
 800da44:	240074a4 	.word	0x240074a4

0800da48 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800da48:	4b01      	ldr	r3, [pc, #4]	; (800da50 <HAL_GetREVID+0x8>)
 800da4a:	6818      	ldr	r0, [r3, #0]
}
 800da4c:	0c00      	lsrs	r0, r0, #16
 800da4e:	4770      	bx	lr
 800da50:	5c001000 	.word	0x5c001000

0800da54 <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 800da54:	4a02      	ldr	r2, [pc, #8]	; (800da60 <HAL_EnableCompensationCell+0xc>)
 800da56:	6a13      	ldr	r3, [r2, #32]
 800da58:	f043 0301 	orr.w	r3, r3, #1
 800da5c:	6213      	str	r3, [r2, #32]
}
 800da5e:	4770      	bx	lr
 800da60:	58000400 	.word	0x58000400

0800da64 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800da64:	4906      	ldr	r1, [pc, #24]	; (800da80 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800da66:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800da6a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800da6c:	4b05      	ldr	r3, [pc, #20]	; (800da84 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800da6e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800da70:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800da74:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800da78:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800da7a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800da7c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800da7e:	4770      	bx	lr
 800da80:	e000ed00 	.word	0xe000ed00
 800da84:	05fa0000 	.word	0x05fa0000

0800da88 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800da88:	4b1b      	ldr	r3, [pc, #108]	; (800daf8 <HAL_NVIC_SetPriority+0x70>)
 800da8a:	68db      	ldr	r3, [r3, #12]
 800da8c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800da90:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800da92:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800da96:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800da9a:	f1be 0f04 	cmp.w	lr, #4
 800da9e:	bf28      	it	cs
 800daa0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800daa4:	f1bc 0f06 	cmp.w	ip, #6
 800daa8:	d91a      	bls.n	800dae0 <HAL_NVIC_SetPriority+0x58>
 800daaa:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800daac:	f04f 3cff 	mov.w	ip, #4294967295
 800dab0:	fa0c fc03 	lsl.w	ip, ip, r3
 800dab4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dab8:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800dabc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dabe:	fa0c fc0e 	lsl.w	ip, ip, lr
 800dac2:	ea21 010c 	bic.w	r1, r1, ip
 800dac6:	fa01 f103 	lsl.w	r1, r1, r3
 800daca:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800dace:	db0a      	blt.n	800dae6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dad0:	0109      	lsls	r1, r1, #4
 800dad2:	4b0a      	ldr	r3, [pc, #40]	; (800dafc <HAL_NVIC_SetPriority+0x74>)
 800dad4:	b2c9      	uxtb	r1, r1
 800dad6:	4403      	add	r3, r0
 800dad8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800dadc:	f85d fb04 	ldr.w	pc, [sp], #4
 800dae0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800dae2:	4613      	mov	r3, r2
 800dae4:	e7e8      	b.n	800dab8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dae6:	f000 000f 	and.w	r0, r0, #15
 800daea:	0109      	lsls	r1, r1, #4
 800daec:	4b04      	ldr	r3, [pc, #16]	; (800db00 <HAL_NVIC_SetPriority+0x78>)
 800daee:	b2c9      	uxtb	r1, r1
 800daf0:	4403      	add	r3, r0
 800daf2:	7619      	strb	r1, [r3, #24]
 800daf4:	f85d fb04 	ldr.w	pc, [sp], #4
 800daf8:	e000ed00 	.word	0xe000ed00
 800dafc:	e000e100 	.word	0xe000e100
 800db00:	e000ecfc 	.word	0xe000ecfc

0800db04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800db04:	2800      	cmp	r0, #0
 800db06:	db07      	blt.n	800db18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800db08:	f000 011f 	and.w	r1, r0, #31
 800db0c:	2301      	movs	r3, #1
 800db0e:	0940      	lsrs	r0, r0, #5
 800db10:	4a02      	ldr	r2, [pc, #8]	; (800db1c <HAL_NVIC_EnableIRQ+0x18>)
 800db12:	408b      	lsls	r3, r1
 800db14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	e000e100 	.word	0xe000e100

0800db20 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800db20:	2800      	cmp	r0, #0
 800db22:	db0d      	blt.n	800db40 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800db24:	0943      	lsrs	r3, r0, #5
 800db26:	2201      	movs	r2, #1
 800db28:	f000 001f 	and.w	r0, r0, #31
 800db2c:	4905      	ldr	r1, [pc, #20]	; (800db44 <HAL_NVIC_DisableIRQ+0x24>)
 800db2e:	3320      	adds	r3, #32
 800db30:	fa02 f000 	lsl.w	r0, r2, r0
 800db34:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800db38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800db3c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800db40:	4770      	bx	lr
 800db42:	bf00      	nop
 800db44:	e000e100 	.word	0xe000e100

0800db48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800db48:	1e43      	subs	r3, r0, #1
 800db4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800db4e:	d20c      	bcs.n	800db6a <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800db50:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800db54:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db56:	4906      	ldr	r1, [pc, #24]	; (800db70 <HAL_SYSTICK_Config+0x28>)
 800db58:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800db5c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800db5e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db60:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800db64:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800db66:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800db68:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800db6a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	e000ed00 	.word	0xe000ed00

0800db74 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800db74:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800db78:	4b04      	ldr	r3, [pc, #16]	; (800db8c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800db7a:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800db7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800db82:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 800db84:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 800db88:	4770      	bx	lr
 800db8a:	bf00      	nop
 800db8c:	e000ed00 	.word	0xe000ed00

0800db90 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800db90:	4b06      	ldr	r3, [pc, #24]	; (800dbac <HAL_MPU_Enable+0x1c>)
 800db92:	f040 0001 	orr.w	r0, r0, #1
 800db96:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800db9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dba0:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800dba2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800dba6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800dbaa:	4770      	bx	lr
 800dbac:	e000ed00 	.word	0xe000ed00

0800dbb0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800dbb0:	4a17      	ldr	r2, [pc, #92]	; (800dc10 <HAL_MPU_ConfigRegion+0x60>)
 800dbb2:	7843      	ldrb	r3, [r0, #1]
 800dbb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 800dbb8:	7801      	ldrb	r1, [r0, #0]
 800dbba:	b321      	cbz	r1, 800dc06 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800dbbc:	6843      	ldr	r3, [r0, #4]
{
 800dbbe:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 800dbc0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800dbc4:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800dbc6:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800dbca:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800dbcc:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800dbd0:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800dbd4:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800dbd8:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800dbda:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800dbdc:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800dbe0:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800dbe4:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800dbe8:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800dbec:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800dbf0:	7a01      	ldrb	r1, [r0, #8]
 800dbf2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800dbf6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800dbfa:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800dbfe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800dc02:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 800dc06:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800dc0a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 800dc0e:	4770      	bx	lr
 800dc10:	e000ed00 	.word	0xe000ed00

0800dc14 <HAL_DCMI_MspInit>:
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop

0800dc18 <HAL_DCMI_Init>:
  if (hdcmi == NULL)
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	d047      	beq.n	800dcac <HAL_DCMI_Init+0x94>
{
 800dc1c:	b570      	push	{r4, r5, r6, lr}
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800dc1e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800dc22:	4604      	mov	r4, r0
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d03e      	beq.n	800dca6 <HAL_DCMI_Init+0x8e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800dc28:	2202      	movs	r2, #2
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800dc2a:	69a3      	ldr	r3, [r4, #24]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800dc2c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d134      	bne.n	800dc9e <HAL_DCMI_Init+0x86>
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800dc34:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800dc36:	6861      	ldr	r1, [r4, #4]
 800dc38:	6966      	ldr	r6, [r4, #20]
 800dc3a:	430b      	orrs	r3, r1
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800dc3c:	6822      	ldr	r2, [r4, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800dc3e:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800dc40:	ea43 0306 	orr.w	r3, r3, r6
 800dc44:	68e6      	ldr	r6, [r4, #12]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800dc46:	6815      	ldr	r5, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800dc48:	ea43 0306 	orr.w	r3, r3, r6
 800dc4c:	6926      	ldr	r6, [r4, #16]
 800dc4e:	ea43 0306 	orr.w	r3, r3, r6
 800dc52:	68a6      	ldr	r6, [r4, #8]
 800dc54:	ea43 0306 	orr.w	r3, r3, r6
 800dc58:	6a26      	ldr	r6, [r4, #32]
 800dc5a:	ea43 0306 	orr.w	r3, r3, r6
 800dc5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc60:	ea43 0306 	orr.w	r3, r3, r6
 800dc64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc66:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800dc6a:	4e11      	ldr	r6, [pc, #68]	; (800dcb0 <HAL_DCMI_Init+0x98>)
 800dc6c:	ea06 0605 	and.w	r6, r6, r5
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800dc70:	6b25      	ldr	r5, [r4, #48]	; 0x30
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800dc72:	6016      	str	r6, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800dc74:	ea43 0305 	orr.w	r3, r3, r5
 800dc78:	6815      	ldr	r5, [r2, #0]
 800dc7a:	ea43 0305 	orr.w	r3, r3, r5
 800dc7e:	ea43 0300 	orr.w	r3, r3, r0
 800dc82:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800dc84:	d101      	bne.n	800dc8a <HAL_DCMI_Init+0x72>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800dc86:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800dc88:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800dc8a:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800dc8c:	2000      	movs	r0, #0
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800dc8e:	2101      	movs	r1, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800dc90:	f043 031e 	orr.w	r3, r3, #30
 800dc94:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800dc96:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800dc98:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 800dc9c:	bd70      	pop	{r4, r5, r6, pc}
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800dc9e:	2200      	movs	r2, #0
 800dca0:	4610      	mov	r0, r2
 800dca2:	6262      	str	r2, [r4, #36]	; 0x24
 800dca4:	e7c7      	b.n	800dc36 <HAL_DCMI_Init+0x1e>
    HAL_DCMI_MspInit(hdcmi);
 800dca6:	f7ff ffb5 	bl	800dc14 <HAL_DCMI_MspInit>
 800dcaa:	e7bd      	b.n	800dc28 <HAL_DCMI_Init+0x10>
    return HAL_ERROR;
 800dcac:	2001      	movs	r0, #1
}
 800dcae:	4770      	bx	lr
 800dcb0:	ffe0f007 	.word	0xffe0f007

0800dcb4 <HAL_DCMI_MspDeInit>:
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop

0800dcb8 <HAL_DCMI_DeInit>:
{
 800dcb8:	b510      	push	{r4, lr}
 800dcba:	4604      	mov	r4, r0
  HAL_DCMI_MspDeInit(hdcmi);
 800dcbc:	f7ff fffa 	bl	800dcb4 <HAL_DCMI_MspDeInit>
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	64e0      	str	r0, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hdcmi);
 800dcc4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_RESET;
 800dcc8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800dccc:	bd10      	pop	{r4, pc}
 800dcce:	bf00      	nop

0800dcd0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 800dcd0:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dcd2:	4b1e      	ldr	r3, [pc, #120]	; (800dd4c <HAL_DCMI_Stop+0x7c>)
 800dcd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dcd8:	4a1d      	ldr	r2, [pc, #116]	; (800dd50 <HAL_DCMI_Stop+0x80>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	fba2 3203 	umull	r3, r2, r2, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800dce0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dce4:	0a52      	lsrs	r2, r2, #9
  __HAL_LOCK(hdcmi);
 800dce6:	2b01      	cmp	r3, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dce8:	fb01 f202 	mul.w	r2, r1, r2
  __HAL_LOCK(hdcmi);
 800dcec:	d02a      	beq.n	800dd44 <HAL_DCMI_Stop+0x74>

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800dcee:	6801      	ldr	r1, [r0, #0]
 800dcf0:	4605      	mov	r5, r0
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800dcf2:	2302      	movs	r3, #2
  __HAL_LOCK(hdcmi);
 800dcf4:	2001      	movs	r0, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800dcf6:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800dcfa:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800dcfe:	680b      	ldr	r3, [r1, #0]
 800dd00:	f023 0301 	bic.w	r3, r3, #1
 800dd04:	600b      	str	r3, [r1, #0]
 800dd06:	e003      	b.n	800dd10 <HAL_DCMI_Stop+0x40>

      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800dd08:	680b      	ldr	r3, [r1, #0]
 800dd0a:	f013 0301 	ands.w	r3, r3, #1
 800dd0e:	d017      	beq.n	800dd40 <HAL_DCMI_Stop+0x70>
    if (count == 0U)
 800dd10:	3a01      	subs	r2, #1
 800dd12:	d1f9      	bne.n	800dd08 <HAL_DCMI_Stop+0x38>
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800dd14:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
      status = HAL_TIMEOUT;
 800dd16:	2403      	movs	r4, #3
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800dd18:	f043 0320 	orr.w	r3, r3, #32
 800dd1c:	64eb      	str	r3, [r5, #76]	; 0x4c

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800dd1e:	680b      	ldr	r3, [r1, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800dd20:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  __HAL_DCMI_DISABLE(hdcmi);
 800dd22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd26:	600b      	str	r3, [r1, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800dd28:	f000 ff24 	bl	800eb74 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800dd2c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800dd2e:	2301      	movs	r3, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800dd30:	2200      	movs	r2, #0
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800dd32:	64e9      	str	r1, [r5, #76]	; 0x4c

  /* Return function status */
  return status;
}
 800dd34:	4620      	mov	r0, r4
  __HAL_UNLOCK(hdcmi);
 800dd36:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_READY;
 800dd3a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800dd3e:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800dd40:	461c      	mov	r4, r3
 800dd42:	e7ec      	b.n	800dd1e <HAL_DCMI_Stop+0x4e>
  __HAL_LOCK(hdcmi);
 800dd44:	2402      	movs	r4, #2
}
 800dd46:	4620      	mov	r0, r4
 800dd48:	bd38      	pop	{r3, r4, r5, pc}
 800dd4a:	bf00      	nop
 800dd4c:	2400737c 	.word	0x2400737c
 800dd50:	10624dd3 	.word	0x10624dd3

0800dd54 <HAL_DCMI_Suspend>:
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dd54:	4b1f      	ldr	r3, [pc, #124]	; (800ddd4 <HAL_DCMI_Suspend+0x80>)
 800dd56:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800dd58:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d037      	beq.n	800ddd0 <HAL_DCMI_Suspend+0x7c>
 800dd60:	4601      	mov	r1, r0
 800dd62:	2001      	movs	r0, #1

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800dd64:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800dd68:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800dd6c:	2b02      	cmp	r3, #2
 800dd6e:	d004      	beq.n	800dd7a <HAL_DCMI_Suspend+0x26>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800dd70:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800dd72:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 800dd74:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34

  /* Return function status */
  return status;
}
 800dd78:	4770      	bx	lr
{
 800dd7a:	b500      	push	{lr}
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800dd7c:	6808      	ldr	r0, [r1, #0]
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800dd7e:	f04f 0e05 	mov.w	lr, #5
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dd82:	4b15      	ldr	r3, [pc, #84]	; (800ddd8 <HAL_DCMI_Suspend+0x84>)
 800dd84:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800dd88:	f881 e035 	strb.w	lr, [r1, #53]	; 0x35
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dd8c:	fba3 2302 	umull	r2, r3, r3, r2
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800dd90:	6802      	ldr	r2, [r0, #0]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dd92:	0a5b      	lsrs	r3, r3, #9
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800dd94:	f022 0201 	bic.w	r2, r2, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dd98:	fb0c f303 	mul.w	r3, ip, r3
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800dd9c:	6002      	str	r2, [r0, #0]
 800dd9e:	e002      	b.n	800dda6 <HAL_DCMI_Suspend+0x52>
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800dda0:	6802      	ldr	r2, [r0, #0]
 800dda2:	07d2      	lsls	r2, r2, #31
 800dda4:	d50e      	bpl.n	800ddc4 <HAL_DCMI_Suspend+0x70>
      if (count == 0U)
 800dda6:	3b01      	subs	r3, #1
 800dda8:	d1fa      	bne.n	800dda0 <HAL_DCMI_Suspend+0x4c>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800ddaa:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
        hdcmi->State = HAL_DCMI_STATE_READY;
 800ddac:	2201      	movs	r2, #1
        status = HAL_TIMEOUT;
 800ddae:	2003      	movs	r0, #3
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800ddb0:	f043 0320 	orr.w	r3, r3, #32
 800ddb4:	64cb      	str	r3, [r1, #76]	; 0x4c
  __HAL_UNLOCK(hdcmi);
 800ddb6:	2300      	movs	r3, #0
        hdcmi->State = HAL_DCMI_STATE_READY;
 800ddb8:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800ddbc:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
}
 800ddc0:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_UNLOCK(hdcmi);
 800ddc4:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ddc6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 800ddc8:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
}
 800ddcc:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_LOCK(hdcmi);
 800ddd0:	2002      	movs	r0, #2
 800ddd2:	4770      	bx	lr
 800ddd4:	2400737c 	.word	0x2400737c
 800ddd8:	10624dd3 	.word	0x10624dd3

0800dddc <HAL_DCMI_Resume>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
  /* Process locked */
  __HAL_LOCK(hdcmi);
 800dddc:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
 800dde0:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 800dde2:	2a01      	cmp	r2, #1
 800dde4:	d013      	beq.n	800de0e <HAL_DCMI_Resume+0x32>

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800dde6:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800ddea:	2101      	movs	r1, #1
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800ddec:	2a05      	cmp	r2, #5
  __HAL_LOCK(hdcmi);
 800ddee:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800ddf2:	d107      	bne.n	800de04 <HAL_DCMI_Resume+0x28>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;

    /* Disable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800ddf4:	6801      	ldr	r1, [r0, #0]
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 800ddf6:	2202      	movs	r2, #2
 800ddf8:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800ddfc:	680a      	ldr	r2, [r1, #0]
 800ddfe:	f042 0201 	orr.w	r2, r2, #1
 800de02:	600a      	str	r2, [r1, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800de04:	2200      	movs	r2, #0

  /* Return function status */
  return HAL_OK;
 800de06:	4610      	mov	r0, r2
  __HAL_UNLOCK(hdcmi);
 800de08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800de0c:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800de0e:	2002      	movs	r0, #2
}
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop

0800de14 <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800de14:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800de16:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800de18:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800de1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de1c:	2b02      	cmp	r3, #2
 800de1e:	d006      	beq.n	800de2e <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800de20:	2301      	movs	r3, #1
 800de22:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800de26:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800de28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de2c:	64c3      	str	r3, [r0, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800de2e:	f7fe fc9f 	bl	800c770 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800de32:	bd08      	pop	{r3, pc}

0800de34 <HAL_DCMI_IRQHandler>:
{
 800de34:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800de36:	6803      	ldr	r3, [r0, #0]
{
 800de38:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800de3a:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800de3c:	0769      	lsls	r1, r5, #29
 800de3e:	d437      	bmi.n	800deb0 <HAL_DCMI_IRQHandler+0x7c>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800de40:	07aa      	lsls	r2, r5, #30
 800de42:	d425      	bmi.n	800de90 <HAL_DCMI_IRQHandler+0x5c>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800de44:	06eb      	lsls	r3, r5, #27
 800de46:	d41c      	bmi.n	800de82 <HAL_DCMI_IRQHandler+0x4e>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800de48:	0728      	lsls	r0, r5, #28
 800de4a:	d413      	bmi.n	800de74 <HAL_DCMI_IRQHandler+0x40>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800de4c:	07e9      	lsls	r1, r5, #31
 800de4e:	d510      	bpl.n	800de72 <HAL_DCMI_IRQHandler+0x3e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800de50:	6823      	ldr	r3, [r4, #0]
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	0792      	lsls	r2, r2, #30
 800de56:	d503      	bpl.n	800de60 <HAL_DCMI_IRQHandler+0x2c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800de58:	68da      	ldr	r2, [r3, #12]
 800de5a:	f022 021e 	bic.w	r2, r2, #30
 800de5e:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800de60:	68da      	ldr	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800de62:	2101      	movs	r1, #1
    HAL_DCMI_FrameEventCallback(hdcmi);
 800de64:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800de66:	f022 0201 	bic.w	r2, r2, #1
 800de6a:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800de6c:	6159      	str	r1, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 800de6e:	f7fe fc73 	bl	800c758 <HAL_DCMI_FrameEventCallback>
}
 800de72:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800de74:	6823      	ldr	r3, [r4, #0]
 800de76:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800de78:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800de7a:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800de7c:	f7fe fc72 	bl	800c764 <HAL_DCMI_VsyncEventCallback>
 800de80:	e7e4      	b.n	800de4c <HAL_DCMI_IRQHandler+0x18>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800de82:	6823      	ldr	r3, [r4, #0]
 800de84:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 800de86:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800de88:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 800de8a:	f7fe fc5f 	bl	800c74c <HAL_DCMI_LineEventCallback>
 800de8e:	e7db      	b.n	800de48 <HAL_DCMI_IRQHandler+0x14>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800de90:	6823      	ldr	r3, [r4, #0]
 800de92:	2102      	movs	r1, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800de94:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800de96:	2204      	movs	r2, #4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800de98:	6159      	str	r1, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800de9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800de9c:	f043 0301 	orr.w	r3, r3, #1
 800dea0:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800dea2:	4b0a      	ldr	r3, [pc, #40]	; (800decc <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800dea4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800dea8:	6503      	str	r3, [r0, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800deaa:	f000 ffdb 	bl	800ee64 <HAL_DMA_Abort_IT>
 800deae:	e7c9      	b.n	800de44 <HAL_DCMI_IRQHandler+0x10>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800deb0:	2204      	movs	r2, #4
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800deb2:	6c80      	ldr	r0, [r0, #72]	; 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800deb4:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800deb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800deb8:	f043 0302 	orr.w	r3, r3, #2
 800debc:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800debe:	4b03      	ldr	r3, [pc, #12]	; (800decc <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800dec0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800dec4:	6503      	str	r3, [r0, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800dec6:	f000 ffcd 	bl	800ee64 <HAL_DMA_Abort_IT>
 800deca:	e7b9      	b.n	800de40 <HAL_DCMI_IRQHandler+0xc>
 800decc:	0800de15 	.word	0x0800de15

0800ded0 <HAL_DCMI_ConfigCrop>:
{
 800ded0:	4684      	mov	ip, r0
  __HAL_LOCK(hdcmi);
 800ded2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800ded6:	2801      	cmp	r0, #1
 800ded8:	d015      	beq.n	800df06 <HAL_DCMI_ConfigCrop+0x36>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800deda:	2002      	movs	r0, #2
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800dedc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  __HAL_UNLOCK(hdcmi);
 800dee0:	2200      	movs	r2, #0
{
 800dee2:	b510      	push	{r4, lr}
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800dee4:	9c02      	ldr	r4, [sp, #8]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800dee6:	f04f 0e01 	mov.w	lr, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800deea:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800deee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800def2:	f8dc 0000 	ldr.w	r0, [ip]
 800def6:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800def8:	6201      	str	r1, [r0, #32]
  return HAL_OK;
 800defa:	4610      	mov	r0, r2
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800defc:	f88c e035 	strb.w	lr, [ip, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800df00:	f88c 2034 	strb.w	r2, [ip, #52]	; 0x34
}
 800df04:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdcmi);
 800df06:	2002      	movs	r0, #2
}
 800df08:	4770      	bx	lr
 800df0a:	bf00      	nop

0800df0c <HAL_DCMI_DisableCrop>:
  __HAL_LOCK(hdcmi);
 800df0c:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
 800df10:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 800df12:	2a01      	cmp	r2, #1
 800df14:	d010      	beq.n	800df38 <HAL_DCMI_DisableCrop+0x2c>
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800df16:	6800      	ldr	r0, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800df18:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdcmi);
 800df1a:	2100      	movs	r1, #0
  hdcmi->State = HAL_DCMI_STATE_READY;
 800df1c:	f04f 0c01 	mov.w	ip, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800df20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800df24:	6802      	ldr	r2, [r0, #0]
 800df26:	f022 0204 	bic.w	r2, r2, #4
 800df2a:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 800df2c:	4608      	mov	r0, r1
  hdcmi->State = HAL_DCMI_STATE_READY;
 800df2e:	f883 c035 	strb.w	ip, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800df32:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
  return HAL_OK;
 800df36:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800df38:	2002      	movs	r0, #2
}
 800df3a:	4770      	bx	lr

0800df3c <HAL_DCMI_EnableCrop>:
  __HAL_LOCK(hdcmi);
 800df3c:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
 800df40:	4603      	mov	r3, r0
  __HAL_LOCK(hdcmi);
 800df42:	2a01      	cmp	r2, #1
 800df44:	d010      	beq.n	800df68 <HAL_DCMI_EnableCrop+0x2c>
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800df46:	6800      	ldr	r0, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800df48:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdcmi);
 800df4a:	2100      	movs	r1, #0
  hdcmi->State = HAL_DCMI_STATE_READY;
 800df4c:	f04f 0c01 	mov.w	ip, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800df50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800df54:	6802      	ldr	r2, [r0, #0]
 800df56:	f042 0204 	orr.w	r2, r2, #4
 800df5a:	6002      	str	r2, [r0, #0]
  return HAL_OK;
 800df5c:	4608      	mov	r0, r1
  hdcmi->State = HAL_DCMI_STATE_READY;
 800df5e:	f883 c035 	strb.w	ip, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800df62:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
  return HAL_OK;
 800df66:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800df68:	2002      	movs	r0, #2
}
 800df6a:	4770      	bx	lr

0800df6c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800df6c:	6802      	ldr	r2, [r0, #0]
 800df6e:	4b34      	ldr	r3, [pc, #208]	; (800e040 <DMA_CalcBaseAndBitshift+0xd4>)
 800df70:	4934      	ldr	r1, [pc, #208]	; (800e044 <DMA_CalcBaseAndBitshift+0xd8>)
{
 800df72:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800df74:	4d34      	ldr	r5, [pc, #208]	; (800e048 <DMA_CalcBaseAndBitshift+0xdc>)
 800df76:	4c35      	ldr	r4, [pc, #212]	; (800e04c <DMA_CalcBaseAndBitshift+0xe0>)
 800df78:	42aa      	cmp	r2, r5
 800df7a:	bf18      	it	ne
 800df7c:	429a      	cmpne	r2, r3
 800df7e:	bf0c      	ite	eq
 800df80:	2301      	moveq	r3, #1
 800df82:	2300      	movne	r3, #0
 800df84:	428a      	cmp	r2, r1
 800df86:	bf08      	it	eq
 800df88:	f043 0301 	orreq.w	r3, r3, #1
 800df8c:	3130      	adds	r1, #48	; 0x30
 800df8e:	42a2      	cmp	r2, r4
 800df90:	bf08      	it	eq
 800df92:	f043 0301 	orreq.w	r3, r3, #1
 800df96:	3430      	adds	r4, #48	; 0x30
 800df98:	428a      	cmp	r2, r1
 800df9a:	bf08      	it	eq
 800df9c:	f043 0301 	orreq.w	r3, r3, #1
 800dfa0:	3130      	adds	r1, #48	; 0x30
 800dfa2:	42a2      	cmp	r2, r4
 800dfa4:	bf08      	it	eq
 800dfa6:	f043 0301 	orreq.w	r3, r3, #1
 800dfaa:	3430      	adds	r4, #48	; 0x30
 800dfac:	428a      	cmp	r2, r1
 800dfae:	bf08      	it	eq
 800dfb0:	f043 0301 	orreq.w	r3, r3, #1
 800dfb4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800dfb8:	42a2      	cmp	r2, r4
 800dfba:	bf08      	it	eq
 800dfbc:	f043 0301 	orreq.w	r3, r3, #1
 800dfc0:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800dfc4:	428a      	cmp	r2, r1
 800dfc6:	bf08      	it	eq
 800dfc8:	f043 0301 	orreq.w	r3, r3, #1
 800dfcc:	3130      	adds	r1, #48	; 0x30
 800dfce:	42a2      	cmp	r2, r4
 800dfd0:	bf08      	it	eq
 800dfd2:	f043 0301 	orreq.w	r3, r3, #1
 800dfd6:	3430      	adds	r4, #48	; 0x30
 800dfd8:	428a      	cmp	r2, r1
 800dfda:	bf08      	it	eq
 800dfdc:	f043 0301 	orreq.w	r3, r3, #1
 800dfe0:	3130      	adds	r1, #48	; 0x30
 800dfe2:	42a2      	cmp	r2, r4
 800dfe4:	bf08      	it	eq
 800dfe6:	f043 0301 	orreq.w	r3, r3, #1
 800dfea:	3430      	adds	r4, #48	; 0x30
 800dfec:	428a      	cmp	r2, r1
 800dfee:	bf08      	it	eq
 800dff0:	f043 0301 	orreq.w	r3, r3, #1
 800dff4:	3130      	adds	r1, #48	; 0x30
 800dff6:	42a2      	cmp	r2, r4
 800dff8:	bf08      	it	eq
 800dffa:	f043 0301 	orreq.w	r3, r3, #1
 800dffe:	428a      	cmp	r2, r1
 800e000:	bf08      	it	eq
 800e002:	f043 0301 	orreq.w	r3, r3, #1
 800e006:	b913      	cbnz	r3, 800e00e <DMA_CalcBaseAndBitshift+0xa2>
 800e008:	4b11      	ldr	r3, [pc, #68]	; (800e050 <DMA_CalcBaseAndBitshift+0xe4>)
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d113      	bne.n	800e036 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e00e:	b2d3      	uxtb	r3, r2
 800e010:	4910      	ldr	r1, [pc, #64]	; (800e054 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e012:	4c11      	ldr	r4, [pc, #68]	; (800e058 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e014:	3b10      	subs	r3, #16
 800e016:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 800e01a:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e01c:	4b0f      	ldr	r3, [pc, #60]	; (800e05c <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e01e:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e022:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e026:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e028:	bf88      	it	hi
 800e02a:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e02c:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800e02e:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800e030:	4618      	mov	r0, r3
 800e032:	bc30      	pop	{r4, r5}
 800e034:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800e036:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 800e03a:	6583      	str	r3, [r0, #88]	; 0x58
 800e03c:	e7f8      	b.n	800e030 <DMA_CalcBaseAndBitshift+0xc4>
 800e03e:	bf00      	nop
 800e040:	40020010 	.word	0x40020010
 800e044:	40020040 	.word	0x40020040
 800e048:	40020028 	.word	0x40020028
 800e04c:	40020058 	.word	0x40020058
 800e050:	400204b8 	.word	0x400204b8
 800e054:	aaaaaaab 	.word	0xaaaaaaab
 800e058:	080bfe84 	.word	0x080bfe84
 800e05c:	fffffc00 	.word	0xfffffc00

0800e060 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800e060:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e062:	4a29      	ldr	r2, [pc, #164]	; (800e108 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800e064:	4929      	ldr	r1, [pc, #164]	; (800e10c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 800e066:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e068:	4d29      	ldr	r5, [pc, #164]	; (800e110 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800e06a:	4c2a      	ldr	r4, [pc, #168]	; (800e114 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 800e06c:	42ab      	cmp	r3, r5
 800e06e:	bf18      	it	ne
 800e070:	4293      	cmpne	r3, r2
 800e072:	bf0c      	ite	eq
 800e074:	2201      	moveq	r2, #1
 800e076:	2200      	movne	r2, #0
 800e078:	428b      	cmp	r3, r1
 800e07a:	bf08      	it	eq
 800e07c:	f042 0201 	orreq.w	r2, r2, #1
 800e080:	3128      	adds	r1, #40	; 0x28
 800e082:	42a3      	cmp	r3, r4
 800e084:	bf08      	it	eq
 800e086:	f042 0201 	orreq.w	r2, r2, #1
 800e08a:	3428      	adds	r4, #40	; 0x28
 800e08c:	428b      	cmp	r3, r1
 800e08e:	bf08      	it	eq
 800e090:	f042 0201 	orreq.w	r2, r2, #1
 800e094:	3128      	adds	r1, #40	; 0x28
 800e096:	42a3      	cmp	r3, r4
 800e098:	bf08      	it	eq
 800e09a:	f042 0201 	orreq.w	r2, r2, #1
 800e09e:	428b      	cmp	r3, r1
 800e0a0:	bf08      	it	eq
 800e0a2:	f042 0201 	orreq.w	r2, r2, #1
 800e0a6:	b912      	cbnz	r2, 800e0ae <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 800e0a8:	4a1b      	ldr	r2, [pc, #108]	; (800e118 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d113      	bne.n	800e0d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	4c1a      	ldr	r4, [pc, #104]	; (800e11c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e0b2:	4a1b      	ldr	r2, [pc, #108]	; (800e120 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e0b4:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e0b6:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e0b8:	4d1a      	ldr	r5, [pc, #104]	; (800e124 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e0ba:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e0be:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e0c0:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e0c4:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e0c8:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e0ca:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e0ce:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e0d0:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800e0d2:	bc30      	pop	{r4, r5}
 800e0d4:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e0d6:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e0d8:	4913      	ldr	r1, [pc, #76]	; (800e128 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e0da:	4c14      	ldr	r4, [pc, #80]	; (800e12c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e0dc:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e0de:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e0e0:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e0e2:	fba4 2302 	umull	r2, r3, r4, r2
 800e0e6:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e0ea:	d800      	bhi.n	800e0ee <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 800e0ec:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e0ee:	4a10      	ldr	r2, [pc, #64]	; (800e130 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e0f0:	f003 051f 	and.w	r5, r3, #31
 800e0f4:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e0f6:	4c0f      	ldr	r4, [pc, #60]	; (800e134 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e0f8:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e0fa:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e0fc:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e0fe:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e100:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e102:	6602      	str	r2, [r0, #96]	; 0x60
}
 800e104:	e7e5      	b.n	800e0d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 800e106:	bf00      	nop
 800e108:	58025408 	.word	0x58025408
 800e10c:	58025430 	.word	0x58025430
 800e110:	5802541c 	.word	0x5802541c
 800e114:	58025444 	.word	0x58025444
 800e118:	58025494 	.word	0x58025494
 800e11c:	cccccccd 	.word	0xcccccccd
 800e120:	16009600 	.word	0x16009600
 800e124:	58025880 	.word	0x58025880
 800e128:	bffdfbf0 	.word	0xbffdfbf0
 800e12c:	aaaaaaab 	.word	0xaaaaaaab
 800e130:	10008200 	.word	0x10008200
 800e134:	40020880 	.word	0x40020880

0800e138 <HAL_DMA_Init>:
{
 800e138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e13a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800e13c:	f7ff fc6c 	bl	800da18 <HAL_GetTick>
  if(hdma == NULL)
 800e140:	2c00      	cmp	r4, #0
 800e142:	f000 8177 	beq.w	800e434 <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e146:	6823      	ldr	r3, [r4, #0]
 800e148:	4605      	mov	r5, r0
 800e14a:	4a92      	ldr	r2, [pc, #584]	; (800e394 <HAL_DMA_Init+0x25c>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d048      	beq.n	800e1e2 <HAL_DMA_Init+0xaa>
 800e150:	3218      	adds	r2, #24
 800e152:	4293      	cmp	r3, r2
 800e154:	d045      	beq.n	800e1e2 <HAL_DMA_Init+0xaa>
 800e156:	3230      	adds	r2, #48	; 0x30
 800e158:	498f      	ldr	r1, [pc, #572]	; (800e398 <HAL_DMA_Init+0x260>)
 800e15a:	428b      	cmp	r3, r1
 800e15c:	bf18      	it	ne
 800e15e:	4293      	cmpne	r3, r2
 800e160:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800e164:	bf0c      	ite	eq
 800e166:	2201      	moveq	r2, #1
 800e168:	2200      	movne	r2, #0
 800e16a:	428b      	cmp	r3, r1
 800e16c:	bf08      	it	eq
 800e16e:	f042 0201 	orreq.w	r2, r2, #1
 800e172:	3118      	adds	r1, #24
 800e174:	428b      	cmp	r3, r1
 800e176:	bf08      	it	eq
 800e178:	f042 0201 	orreq.w	r2, r2, #1
 800e17c:	3118      	adds	r1, #24
 800e17e:	428b      	cmp	r3, r1
 800e180:	bf08      	it	eq
 800e182:	f042 0201 	orreq.w	r2, r2, #1
 800e186:	3118      	adds	r1, #24
 800e188:	428b      	cmp	r3, r1
 800e18a:	bf08      	it	eq
 800e18c:	f042 0201 	orreq.w	r2, r2, #1
 800e190:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800e194:	428b      	cmp	r3, r1
 800e196:	bf08      	it	eq
 800e198:	f042 0201 	orreq.w	r2, r2, #1
 800e19c:	3118      	adds	r1, #24
 800e19e:	428b      	cmp	r3, r1
 800e1a0:	bf08      	it	eq
 800e1a2:	f042 0201 	orreq.w	r2, r2, #1
 800e1a6:	3118      	adds	r1, #24
 800e1a8:	428b      	cmp	r3, r1
 800e1aa:	bf08      	it	eq
 800e1ac:	f042 0201 	orreq.w	r2, r2, #1
 800e1b0:	3118      	adds	r1, #24
 800e1b2:	428b      	cmp	r3, r1
 800e1b4:	bf08      	it	eq
 800e1b6:	f042 0201 	orreq.w	r2, r2, #1
 800e1ba:	3118      	adds	r1, #24
 800e1bc:	428b      	cmp	r3, r1
 800e1be:	bf08      	it	eq
 800e1c0:	f042 0201 	orreq.w	r2, r2, #1
 800e1c4:	3118      	adds	r1, #24
 800e1c6:	428b      	cmp	r3, r1
 800e1c8:	bf08      	it	eq
 800e1ca:	f042 0201 	orreq.w	r2, r2, #1
 800e1ce:	3118      	adds	r1, #24
 800e1d0:	428b      	cmp	r3, r1
 800e1d2:	bf08      	it	eq
 800e1d4:	f042 0201 	orreq.w	r2, r2, #1
 800e1d8:	b91a      	cbnz	r2, 800e1e2 <HAL_DMA_Init+0xaa>
 800e1da:	4a70      	ldr	r2, [pc, #448]	; (800e39c <HAL_DMA_Init+0x264>)
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	f040 8198 	bne.w	800e512 <HAL_DMA_Init+0x3da>
    hdma->State = HAL_DMA_STATE_BUSY;
 800e1e2:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800e1e4:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800e1e6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800e1ea:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	f022 0201 	bic.w	r2, r2, #1
 800e1f4:	601a      	str	r2, [r3, #0]
 800e1f6:	e006      	b.n	800e206 <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e1f8:	f7ff fc0e 	bl	800da18 <HAL_GetTick>
 800e1fc:	1b43      	subs	r3, r0, r5
 800e1fe:	2b05      	cmp	r3, #5
 800e200:	f200 80ff 	bhi.w	800e402 <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800e204:	6823      	ldr	r3, [r4, #0]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	07d6      	lsls	r6, r2, #31
 800e20a:	d4f5      	bmi.n	800e1f8 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 800e20c:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e210:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800e212:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e214:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800e216:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e218:	4302      	orrs	r2, r0
 800e21a:	6960      	ldr	r0, [r4, #20]
 800e21c:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e21e:	69e0      	ldr	r0, [r4, #28]
 800e220:	430a      	orrs	r2, r1
 800e222:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e224:	485e      	ldr	r0, [pc, #376]	; (800e3a0 <HAL_DMA_Init+0x268>)
 800e226:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 800e228:	6a25      	ldr	r5, [r4, #32]
 800e22a:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800e22c:	4d5d      	ldr	r5, [pc, #372]	; (800e3a4 <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 800e22e:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e230:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e232:	2804      	cmp	r0, #4
 800e234:	f000 8100 	beq.w	800e438 <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800e238:	682e      	ldr	r6, [r5, #0]
 800e23a:	4d5b      	ldr	r5, [pc, #364]	; (800e3a8 <HAL_DMA_Init+0x270>)
 800e23c:	4035      	ands	r5, r6
 800e23e:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 800e242:	f080 80bb 	bcs.w	800e3bc <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800e246:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800e248:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e24a:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800e24e:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800e250:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e252:	4620      	mov	r0, r4
 800e254:	f7ff fe8a 	bl	800df6c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e258:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e25a:	233f      	movs	r3, #63	; 0x3f
 800e25c:	f002 021f 	and.w	r2, r2, #31
 800e260:	4093      	lsls	r3, r2
 800e262:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800e264:	6822      	ldr	r2, [r4, #0]
 800e266:	4b4b      	ldr	r3, [pc, #300]	; (800e394 <HAL_DMA_Init+0x25c>)
 800e268:	4850      	ldr	r0, [pc, #320]	; (800e3ac <HAL_DMA_Init+0x274>)
 800e26a:	494b      	ldr	r1, [pc, #300]	; (800e398 <HAL_DMA_Init+0x260>)
 800e26c:	4282      	cmp	r2, r0
 800e26e:	bf18      	it	ne
 800e270:	429a      	cmpne	r2, r3
 800e272:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800e276:	bf0c      	ite	eq
 800e278:	2301      	moveq	r3, #1
 800e27a:	2300      	movne	r3, #0
 800e27c:	428a      	cmp	r2, r1
 800e27e:	bf08      	it	eq
 800e280:	f043 0301 	orreq.w	r3, r3, #1
 800e284:	3130      	adds	r1, #48	; 0x30
 800e286:	4282      	cmp	r2, r0
 800e288:	bf08      	it	eq
 800e28a:	f043 0301 	orreq.w	r3, r3, #1
 800e28e:	3030      	adds	r0, #48	; 0x30
 800e290:	428a      	cmp	r2, r1
 800e292:	bf08      	it	eq
 800e294:	f043 0301 	orreq.w	r3, r3, #1
 800e298:	3130      	adds	r1, #48	; 0x30
 800e29a:	4282      	cmp	r2, r0
 800e29c:	bf08      	it	eq
 800e29e:	f043 0301 	orreq.w	r3, r3, #1
 800e2a2:	3030      	adds	r0, #48	; 0x30
 800e2a4:	428a      	cmp	r2, r1
 800e2a6:	bf08      	it	eq
 800e2a8:	f043 0301 	orreq.w	r3, r3, #1
 800e2ac:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800e2b0:	4282      	cmp	r2, r0
 800e2b2:	bf08      	it	eq
 800e2b4:	f043 0301 	orreq.w	r3, r3, #1
 800e2b8:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800e2bc:	428a      	cmp	r2, r1
 800e2be:	bf08      	it	eq
 800e2c0:	f043 0301 	orreq.w	r3, r3, #1
 800e2c4:	3130      	adds	r1, #48	; 0x30
 800e2c6:	4282      	cmp	r2, r0
 800e2c8:	bf08      	it	eq
 800e2ca:	f043 0301 	orreq.w	r3, r3, #1
 800e2ce:	3030      	adds	r0, #48	; 0x30
 800e2d0:	428a      	cmp	r2, r1
 800e2d2:	bf08      	it	eq
 800e2d4:	f043 0301 	orreq.w	r3, r3, #1
 800e2d8:	3130      	adds	r1, #48	; 0x30
 800e2da:	4282      	cmp	r2, r0
 800e2dc:	bf08      	it	eq
 800e2de:	f043 0301 	orreq.w	r3, r3, #1
 800e2e2:	3030      	adds	r0, #48	; 0x30
 800e2e4:	428a      	cmp	r2, r1
 800e2e6:	bf08      	it	eq
 800e2e8:	f043 0301 	orreq.w	r3, r3, #1
 800e2ec:	3130      	adds	r1, #48	; 0x30
 800e2ee:	4282      	cmp	r2, r0
 800e2f0:	bf08      	it	eq
 800e2f2:	f043 0301 	orreq.w	r3, r3, #1
 800e2f6:	3030      	adds	r0, #48	; 0x30
 800e2f8:	428a      	cmp	r2, r1
 800e2fa:	bf08      	it	eq
 800e2fc:	f043 0301 	orreq.w	r3, r3, #1
 800e300:	492b      	ldr	r1, [pc, #172]	; (800e3b0 <HAL_DMA_Init+0x278>)
 800e302:	4282      	cmp	r2, r0
 800e304:	bf08      	it	eq
 800e306:	f043 0301 	orreq.w	r3, r3, #1
 800e30a:	482a      	ldr	r0, [pc, #168]	; (800e3b4 <HAL_DMA_Init+0x27c>)
 800e30c:	428a      	cmp	r2, r1
 800e30e:	bf08      	it	eq
 800e310:	f043 0301 	orreq.w	r3, r3, #1
 800e314:	3128      	adds	r1, #40	; 0x28
 800e316:	4282      	cmp	r2, r0
 800e318:	bf08      	it	eq
 800e31a:	f043 0301 	orreq.w	r3, r3, #1
 800e31e:	3028      	adds	r0, #40	; 0x28
 800e320:	428a      	cmp	r2, r1
 800e322:	bf08      	it	eq
 800e324:	f043 0301 	orreq.w	r3, r3, #1
 800e328:	3128      	adds	r1, #40	; 0x28
 800e32a:	4282      	cmp	r2, r0
 800e32c:	bf08      	it	eq
 800e32e:	f043 0301 	orreq.w	r3, r3, #1
 800e332:	3028      	adds	r0, #40	; 0x28
 800e334:	428a      	cmp	r2, r1
 800e336:	bf08      	it	eq
 800e338:	f043 0301 	orreq.w	r3, r3, #1
 800e33c:	3128      	adds	r1, #40	; 0x28
 800e33e:	4282      	cmp	r2, r0
 800e340:	bf08      	it	eq
 800e342:	f043 0301 	orreq.w	r3, r3, #1
 800e346:	428a      	cmp	r2, r1
 800e348:	bf08      	it	eq
 800e34a:	f043 0301 	orreq.w	r3, r3, #1
 800e34e:	b913      	cbnz	r3, 800e356 <HAL_DMA_Init+0x21e>
 800e350:	4b19      	ldr	r3, [pc, #100]	; (800e3b8 <HAL_DMA_Init+0x280>)
 800e352:	429a      	cmp	r2, r3
 800e354:	d118      	bne.n	800e388 <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800e356:	4620      	mov	r0, r4
 800e358:	f7ff fe82 	bl	800e060 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800e35c:	68a3      	ldr	r3, [r4, #8]
 800e35e:	2b80      	cmp	r3, #128	; 0x80
 800e360:	d05c      	beq.n	800e41c <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800e362:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e364:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800e366:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800e368:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e36a:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800e36e:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800e370:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e372:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800e374:	d859      	bhi.n	800e42a <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e376:	1e50      	subs	r0, r2, #1
 800e378:	2807      	cmp	r0, #7
 800e37a:	d96e      	bls.n	800e45a <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e37c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800e37e:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800e382:	2000      	movs	r0, #0
 800e384:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e386:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e388:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800e38a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e38c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800e38e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800e392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e394:	40020010 	.word	0x40020010
 800e398:	40020040 	.word	0x40020040
 800e39c:	400204b8 	.word	0x400204b8
 800e3a0:	fe10803f 	.word	0xfe10803f
 800e3a4:	5c001000 	.word	0x5c001000
 800e3a8:	ffff0000 	.word	0xffff0000
 800e3ac:	40020028 	.word	0x40020028
 800e3b0:	58025408 	.word	0x58025408
 800e3b4:	5802541c 	.word	0x5802541c
 800e3b8:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800e3bc:	6865      	ldr	r5, [r4, #4]
 800e3be:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 800e3c2:	2e1f      	cmp	r6, #31
 800e3c4:	d924      	bls.n	800e410 <HAL_DMA_Init+0x2d8>
 800e3c6:	3d4f      	subs	r5, #79	; 0x4f
 800e3c8:	2d03      	cmp	r5, #3
 800e3ca:	d801      	bhi.n	800e3d0 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 800e3cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800e3d0:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e3d2:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800e3d4:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e3d6:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800e3da:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e3de:	f47f af37 	bne.w	800e250 <HAL_DMA_Init+0x118>
 800e3e2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800e3e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e3e6:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800e3e8:	2d00      	cmp	r5, #0
 800e3ea:	f43f af31 	beq.w	800e250 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e3ee:	2900      	cmp	r1, #0
 800e3f0:	d169      	bne.n	800e4c6 <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 800e3f2:	2801      	cmp	r0, #1
 800e3f4:	f000 8088 	beq.w	800e508 <HAL_DMA_Init+0x3d0>
 800e3f8:	f030 0102 	bics.w	r1, r0, #2
 800e3fc:	f47f af28 	bne.w	800e250 <HAL_DMA_Init+0x118>
 800e400:	e069      	b.n	800e4d6 <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e402:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800e404:	2303      	movs	r3, #3
        return HAL_ERROR;
 800e406:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e408:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800e40a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800e40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800e410:	4d73      	ldr	r5, [pc, #460]	; (800e5e0 <HAL_DMA_Init+0x4a8>)
 800e412:	fa25 f606 	lsr.w	r6, r5, r6
 800e416:	07f5      	lsls	r5, r6, #31
 800e418:	d5da      	bpl.n	800e3d0 <HAL_DMA_Init+0x298>
 800e41a:	e7d7      	b.n	800e3cc <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800e41c:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e41e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800e420:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800e424:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800e426:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e428:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 800e42a:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800e42c:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800e430:	6763      	str	r3, [r4, #116]	; 0x74
 800e432:	e7a9      	b.n	800e388 <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 800e434:	2001      	movs	r0, #1
}
 800e436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800e438:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e43a:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 800e43e:	432e      	orrs	r6, r5
 800e440:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800e442:	4e68      	ldr	r6, [pc, #416]	; (800e5e4 <HAL_DMA_Init+0x4ac>)
 800e444:	403e      	ands	r6, r7
 800e446:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 800e44a:	d2b7      	bcs.n	800e3bc <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800e44c:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800e44e:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e450:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800e454:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e458:	e7c4      	b.n	800e3e4 <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e45a:	6821      	ldr	r1, [r4, #0]
 800e45c:	4b62      	ldr	r3, [pc, #392]	; (800e5e8 <HAL_DMA_Init+0x4b0>)
 800e45e:	4d63      	ldr	r5, [pc, #396]	; (800e5ec <HAL_DMA_Init+0x4b4>)
 800e460:	42a9      	cmp	r1, r5
 800e462:	bf18      	it	ne
 800e464:	4299      	cmpne	r1, r3
 800e466:	f105 0514 	add.w	r5, r5, #20
 800e46a:	bf0c      	ite	eq
 800e46c:	2301      	moveq	r3, #1
 800e46e:	2300      	movne	r3, #0
 800e470:	42a9      	cmp	r1, r5
 800e472:	bf08      	it	eq
 800e474:	f043 0301 	orreq.w	r3, r3, #1
 800e478:	3514      	adds	r5, #20
 800e47a:	42a9      	cmp	r1, r5
 800e47c:	bf08      	it	eq
 800e47e:	f043 0301 	orreq.w	r3, r3, #1
 800e482:	3514      	adds	r5, #20
 800e484:	42a9      	cmp	r1, r5
 800e486:	bf08      	it	eq
 800e488:	f043 0301 	orreq.w	r3, r3, #1
 800e48c:	3514      	adds	r5, #20
 800e48e:	42a9      	cmp	r1, r5
 800e490:	bf08      	it	eq
 800e492:	f043 0301 	orreq.w	r3, r3, #1
 800e496:	3514      	adds	r5, #20
 800e498:	42a9      	cmp	r1, r5
 800e49a:	bf08      	it	eq
 800e49c:	f043 0301 	orreq.w	r3, r3, #1
 800e4a0:	b93b      	cbnz	r3, 800e4b2 <HAL_DMA_Init+0x37a>
 800e4a2:	4b53      	ldr	r3, [pc, #332]	; (800e5f0 <HAL_DMA_Init+0x4b8>)
 800e4a4:	4299      	cmp	r1, r3
 800e4a6:	d004      	beq.n	800e4b2 <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e4a8:	4b52      	ldr	r3, [pc, #328]	; (800e5f4 <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e4aa:	4953      	ldr	r1, [pc, #332]	; (800e5f8 <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e4ac:	4413      	add	r3, r2
 800e4ae:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e4b0:	e003      	b.n	800e4ba <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e4b2:	4b52      	ldr	r3, [pc, #328]	; (800e5fc <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e4b4:	4952      	ldr	r1, [pc, #328]	; (800e600 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e4b6:	4413      	add	r3, r2
 800e4b8:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	4082      	lsls	r2, r0
 800e4be:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 800e4c2:	6762      	str	r2, [r4, #116]	; 0x74
 800e4c4:	e75d      	b.n	800e382 <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e4c6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800e4ca:	d00e      	beq.n	800e4ea <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 800e4cc:	2802      	cmp	r0, #2
 800e4ce:	d905      	bls.n	800e4dc <HAL_DMA_Init+0x3a4>
 800e4d0:	2803      	cmp	r0, #3
 800e4d2:	f47f aebd 	bne.w	800e250 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e4d6:	01e9      	lsls	r1, r5, #7
 800e4d8:	f57f aeba 	bpl.w	800e250 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 800e4dc:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e4de:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 800e4e0:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e4e2:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800e4e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800e4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 800e4ea:	2803      	cmp	r0, #3
 800e4ec:	f63f aeb0 	bhi.w	800e250 <HAL_DMA_Init+0x118>
 800e4f0:	a101      	add	r1, pc, #4	; (adr r1, 800e4f8 <HAL_DMA_Init+0x3c0>)
 800e4f2:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800e4f6:	bf00      	nop
 800e4f8:	0800e4dd 	.word	0x0800e4dd
 800e4fc:	0800e4d7 	.word	0x0800e4d7
 800e500:	0800e4dd 	.word	0x0800e4dd
 800e504:	0800e509 	.word	0x0800e509
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e508:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800e50c:	f47f aea0 	bne.w	800e250 <HAL_DMA_Init+0x118>
 800e510:	e7e4      	b.n	800e4dc <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e512:	4a35      	ldr	r2, [pc, #212]	; (800e5e8 <HAL_DMA_Init+0x4b0>)
 800e514:	4835      	ldr	r0, [pc, #212]	; (800e5ec <HAL_DMA_Init+0x4b4>)
 800e516:	493b      	ldr	r1, [pc, #236]	; (800e604 <HAL_DMA_Init+0x4cc>)
 800e518:	4283      	cmp	r3, r0
 800e51a:	bf18      	it	ne
 800e51c:	4293      	cmpne	r3, r2
 800e51e:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800e522:	bf0c      	ite	eq
 800e524:	2201      	moveq	r2, #1
 800e526:	2200      	movne	r2, #0
 800e528:	428b      	cmp	r3, r1
 800e52a:	bf08      	it	eq
 800e52c:	f042 0201 	orreq.w	r2, r2, #1
 800e530:	3128      	adds	r1, #40	; 0x28
 800e532:	4283      	cmp	r3, r0
 800e534:	bf08      	it	eq
 800e536:	f042 0201 	orreq.w	r2, r2, #1
 800e53a:	3028      	adds	r0, #40	; 0x28
 800e53c:	428b      	cmp	r3, r1
 800e53e:	bf08      	it	eq
 800e540:	f042 0201 	orreq.w	r2, r2, #1
 800e544:	3128      	adds	r1, #40	; 0x28
 800e546:	4283      	cmp	r3, r0
 800e548:	bf08      	it	eq
 800e54a:	f042 0201 	orreq.w	r2, r2, #1
 800e54e:	428b      	cmp	r3, r1
 800e550:	bf08      	it	eq
 800e552:	f042 0201 	orreq.w	r2, r2, #1
 800e556:	b912      	cbnz	r2, 800e55e <HAL_DMA_Init+0x426>
 800e558:	4a25      	ldr	r2, [pc, #148]	; (800e5f0 <HAL_DMA_Init+0x4b8>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d138      	bne.n	800e5d0 <HAL_DMA_Init+0x498>
    hdma->State = HAL_DMA_STATE_BUSY;
 800e55e:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800e560:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800e562:	4d29      	ldr	r5, [pc, #164]	; (800e608 <HAL_DMA_Init+0x4d0>)
    __HAL_UNLOCK(hdma);
 800e564:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800e568:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800e56c:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800e56e:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800e570:	68a2      	ldr	r2, [r4, #8]
 800e572:	2a40      	cmp	r2, #64	; 0x40
 800e574:	d02a      	beq.n	800e5cc <HAL_DMA_Init+0x494>
 800e576:	2a80      	cmp	r2, #128	; 0x80
 800e578:	bf0c      	ite	eq
 800e57a:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 800e57e:	4608      	movne	r0, r1
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800e580:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800e582:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800e586:	08d2      	lsrs	r2, r2, #3
 800e588:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800e58c:	6961      	ldr	r1, [r4, #20]
 800e58e:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800e592:	69a1      	ldr	r1, [r4, #24]
 800e594:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800e598:	69e1      	ldr	r1, [r4, #28]
 800e59a:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800e59e:	491b      	ldr	r1, [pc, #108]	; (800e60c <HAL_DMA_Init+0x4d4>)
 800e5a0:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 800e5a4:	4419      	add	r1, r3
 800e5a6:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800e5a8:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800e5aa:	4819      	ldr	r0, [pc, #100]	; (800e610 <HAL_DMA_Init+0x4d8>)
 800e5ac:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e5b0:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800e5b2:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800e5b4:	090b      	lsrs	r3, r1, #4
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e5ba:	f7ff fcd7 	bl	800df6c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800e5be:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	f002 021f 	and.w	r2, r2, #31
 800e5c6:	4093      	lsls	r3, r2
 800e5c8:	6043      	str	r3, [r0, #4]
 800e5ca:	e64b      	b.n	800e264 <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800e5cc:	2010      	movs	r0, #16
 800e5ce:	e7d7      	b.n	800e580 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e5d0:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800e5d2:	2303      	movs	r3, #3
    return HAL_ERROR;
 800e5d4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e5d6:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800e5d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800e5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	c3c0003f 	.word	0xc3c0003f
 800e5e4:	ffff0000 	.word	0xffff0000
 800e5e8:	58025408 	.word	0x58025408
 800e5ec:	5802541c 	.word	0x5802541c
 800e5f0:	58025494 	.word	0x58025494
 800e5f4:	1000823f 	.word	0x1000823f
 800e5f8:	40020940 	.word	0x40020940
 800e5fc:	1600963f 	.word	0x1600963f
 800e600:	58025940 	.word	0x58025940
 800e604:	58025430 	.word	0x58025430
 800e608:	fffe000f 	.word	0xfffe000f
 800e60c:	a7fdabf8 	.word	0xa7fdabf8
 800e610:	cccccccd 	.word	0xcccccccd

0800e614 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800e614:	2800      	cmp	r0, #0
 800e616:	f000 80f3 	beq.w	800e800 <HAL_DMA_DeInit+0x1ec>
  __HAL_DMA_DISABLE(hdma);
 800e61a:	6802      	ldr	r2, [r0, #0]
 800e61c:	497c      	ldr	r1, [pc, #496]	; (800e810 <HAL_DMA_DeInit+0x1fc>)
{
 800e61e:	b538      	push	{r3, r4, r5, lr}
  __HAL_DMA_DISABLE(hdma);
 800e620:	4b7c      	ldr	r3, [pc, #496]	; (800e814 <HAL_DMA_DeInit+0x200>)
 800e622:	4604      	mov	r4, r0
 800e624:	487c      	ldr	r0, [pc, #496]	; (800e818 <HAL_DMA_DeInit+0x204>)
 800e626:	4282      	cmp	r2, r0
 800e628:	bf18      	it	ne
 800e62a:	429a      	cmpne	r2, r3
 800e62c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800e630:	bf0c      	ite	eq
 800e632:	2301      	moveq	r3, #1
 800e634:	2300      	movne	r3, #0
 800e636:	428a      	cmp	r2, r1
 800e638:	bf08      	it	eq
 800e63a:	f043 0301 	orreq.w	r3, r3, #1
 800e63e:	3130      	adds	r1, #48	; 0x30
 800e640:	4282      	cmp	r2, r0
 800e642:	bf08      	it	eq
 800e644:	f043 0301 	orreq.w	r3, r3, #1
 800e648:	3030      	adds	r0, #48	; 0x30
 800e64a:	428a      	cmp	r2, r1
 800e64c:	bf08      	it	eq
 800e64e:	f043 0301 	orreq.w	r3, r3, #1
 800e652:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800e656:	4282      	cmp	r2, r0
 800e658:	bf08      	it	eq
 800e65a:	f043 0301 	orreq.w	r3, r3, #1
 800e65e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800e662:	428a      	cmp	r2, r1
 800e664:	bf08      	it	eq
 800e666:	f043 0301 	orreq.w	r3, r3, #1
 800e66a:	3130      	adds	r1, #48	; 0x30
 800e66c:	4282      	cmp	r2, r0
 800e66e:	bf08      	it	eq
 800e670:	f043 0301 	orreq.w	r3, r3, #1
 800e674:	3030      	adds	r0, #48	; 0x30
 800e676:	428a      	cmp	r2, r1
 800e678:	bf08      	it	eq
 800e67a:	f043 0301 	orreq.w	r3, r3, #1
 800e67e:	3130      	adds	r1, #48	; 0x30
 800e680:	4282      	cmp	r2, r0
 800e682:	bf08      	it	eq
 800e684:	f043 0301 	orreq.w	r3, r3, #1
 800e688:	3030      	adds	r0, #48	; 0x30
 800e68a:	428a      	cmp	r2, r1
 800e68c:	bf08      	it	eq
 800e68e:	f043 0301 	orreq.w	r3, r3, #1
 800e692:	3130      	adds	r1, #48	; 0x30
 800e694:	4282      	cmp	r2, r0
 800e696:	bf08      	it	eq
 800e698:	f043 0301 	orreq.w	r3, r3, #1
 800e69c:	428a      	cmp	r2, r1
 800e69e:	bf08      	it	eq
 800e6a0:	f043 0301 	orreq.w	r3, r3, #1
 800e6a4:	3118      	adds	r1, #24
 800e6a6:	428a      	cmp	r2, r1
 800e6a8:	bf08      	it	eq
 800e6aa:	f043 0301 	orreq.w	r3, r3, #1
 800e6ae:	b933      	cbnz	r3, 800e6be <HAL_DMA_DeInit+0xaa>
 800e6b0:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800e6b4:	4b59      	ldr	r3, [pc, #356]	; (800e81c <HAL_DMA_DeInit+0x208>)
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	bf18      	it	ne
 800e6ba:	428a      	cmpne	r2, r1
 800e6bc:	d165      	bne.n	800e78a <HAL_DMA_DeInit+0x176>
 800e6be:	6811      	ldr	r1, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800e6c0:	2300      	movs	r3, #0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800e6c2:	2521      	movs	r5, #33	; 0x21
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e6c4:	4620      	mov	r0, r4
  __HAL_DMA_DISABLE(hdma);
 800e6c6:	f021 0101 	bic.w	r1, r1, #1
 800e6ca:	6011      	str	r1, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800e6cc:	6013      	str	r3, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800e6ce:	6053      	str	r3, [r2, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800e6d0:	6093      	str	r3, [r2, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800e6d2:	60d3      	str	r3, [r2, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800e6d4:	6113      	str	r3, [r2, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800e6d6:	6155      	str	r5, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e6d8:	f7ff fc48 	bl	800df6c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e6dc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e6de:	233f      	movs	r3, #63	; 0x3f
 800e6e0:	f002 021f 	and.w	r2, r2, #31
 800e6e4:	4093      	lsls	r3, r2
 800e6e6:	6083      	str	r3, [r0, #8]
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	f7ff fcb9 	bl	800e060 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->DMAmuxChannel != 0U)
 800e6ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800e6f0:	b123      	cbz	r3, 800e6fc <HAL_DMA_DeInit+0xe8>
      hdma->DMAmuxChannel->CCR = 0U;
 800e6f2:	2000      	movs	r0, #0
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e6f4:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
      hdma->DMAmuxChannel->CCR = 0U;
 800e6f8:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e6fa:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800e6fc:	6861      	ldr	r1, [r4, #4]
 800e6fe:	1e4b      	subs	r3, r1, #1
 800e700:	2b07      	cmp	r3, #7
 800e702:	d910      	bls.n	800e726 <HAL_DMA_DeInit+0x112>
    hdma->DMAmuxRequestGen = 0U;
 800e704:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e706:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800e708:	4618      	mov	r0, r3
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800e70a:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->State = HAL_DMA_STATE_RESET;
 800e70c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800e710:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->DMAmuxRequestGenStatus = 0U;
 800e714:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
  hdma->XferHalfCpltCallback   = NULL;
 800e718:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800e71c:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback      = NULL;
 800e720:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 800e724:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e726:	6820      	ldr	r0, [r4, #0]
 800e728:	4a3d      	ldr	r2, [pc, #244]	; (800e820 <HAL_DMA_DeInit+0x20c>)
 800e72a:	4d3e      	ldr	r5, [pc, #248]	; (800e824 <HAL_DMA_DeInit+0x210>)
 800e72c:	42a8      	cmp	r0, r5
 800e72e:	bf18      	it	ne
 800e730:	4290      	cmpne	r0, r2
 800e732:	f105 0514 	add.w	r5, r5, #20
 800e736:	bf0c      	ite	eq
 800e738:	2201      	moveq	r2, #1
 800e73a:	2200      	movne	r2, #0
 800e73c:	42a8      	cmp	r0, r5
 800e73e:	bf08      	it	eq
 800e740:	f042 0201 	orreq.w	r2, r2, #1
 800e744:	3514      	adds	r5, #20
 800e746:	42a8      	cmp	r0, r5
 800e748:	bf08      	it	eq
 800e74a:	f042 0201 	orreq.w	r2, r2, #1
 800e74e:	3514      	adds	r5, #20
 800e750:	42a8      	cmp	r0, r5
 800e752:	bf08      	it	eq
 800e754:	f042 0201 	orreq.w	r2, r2, #1
 800e758:	3514      	adds	r5, #20
 800e75a:	42a8      	cmp	r0, r5
 800e75c:	bf08      	it	eq
 800e75e:	f042 0201 	orreq.w	r2, r2, #1
 800e762:	3514      	adds	r5, #20
 800e764:	42a8      	cmp	r0, r5
 800e766:	bf08      	it	eq
 800e768:	f042 0201 	orreq.w	r2, r2, #1
 800e76c:	b912      	cbnz	r2, 800e774 <HAL_DMA_DeInit+0x160>
 800e76e:	4a2e      	ldr	r2, [pc, #184]	; (800e828 <HAL_DMA_DeInit+0x214>)
 800e770:	4290      	cmp	r0, r2
 800e772:	d147      	bne.n	800e804 <HAL_DMA_DeInit+0x1f0>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e774:	4a2d      	ldr	r2, [pc, #180]	; (800e82c <HAL_DMA_DeInit+0x218>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e776:	482e      	ldr	r0, [pc, #184]	; (800e830 <HAL_DMA_DeInit+0x21c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e778:	440a      	add	r2, r1
 800e77a:	0091      	lsls	r1, r2, #2
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e77c:	2201      	movs	r2, #1
 800e77e:	fa02 f303 	lsl.w	r3, r2, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800e782:	2200      	movs	r2, #0
 800e784:	600a      	str	r2, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e786:	6043      	str	r3, [r0, #4]
 800e788:	e7bc      	b.n	800e704 <HAL_DMA_DeInit+0xf0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e78a:	4b25      	ldr	r3, [pc, #148]	; (800e820 <HAL_DMA_DeInit+0x20c>)
 800e78c:	4d25      	ldr	r5, [pc, #148]	; (800e824 <HAL_DMA_DeInit+0x210>)
 800e78e:	4829      	ldr	r0, [pc, #164]	; (800e834 <HAL_DMA_DeInit+0x220>)
 800e790:	42aa      	cmp	r2, r5
 800e792:	bf18      	it	ne
 800e794:	429a      	cmpne	r2, r3
  __HAL_DMA_DISABLE(hdma);
 800e796:	6811      	ldr	r1, [r2, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e798:	bf0c      	ite	eq
 800e79a:	2301      	moveq	r3, #1
 800e79c:	2300      	movne	r3, #0
  __HAL_DMA_DISABLE(hdma);
 800e79e:	f021 0101 	bic.w	r1, r1, #1
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e7a2:	4282      	cmp	r2, r0
 800e7a4:	bf08      	it	eq
 800e7a6:	f043 0301 	orreq.w	r3, r3, #1
 800e7aa:	3014      	adds	r0, #20
  __HAL_DMA_DISABLE(hdma);
 800e7ac:	6011      	str	r1, [r2, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e7ae:	4282      	cmp	r2, r0
 800e7b0:	bf08      	it	eq
 800e7b2:	f043 0301 	orreq.w	r3, r3, #1
 800e7b6:	4920      	ldr	r1, [pc, #128]	; (800e838 <HAL_DMA_DeInit+0x224>)
 800e7b8:	3028      	adds	r0, #40	; 0x28
 800e7ba:	428a      	cmp	r2, r1
 800e7bc:	bf08      	it	eq
 800e7be:	f043 0301 	orreq.w	r3, r3, #1
 800e7c2:	3128      	adds	r1, #40	; 0x28
 800e7c4:	4282      	cmp	r2, r0
 800e7c6:	bf08      	it	eq
 800e7c8:	f043 0301 	orreq.w	r3, r3, #1
 800e7cc:	428a      	cmp	r2, r1
 800e7ce:	bf08      	it	eq
 800e7d0:	f043 0301 	orreq.w	r3, r3, #1
 800e7d4:	b913      	cbnz	r3, 800e7dc <HAL_DMA_DeInit+0x1c8>
 800e7d6:	4b14      	ldr	r3, [pc, #80]	; (800e828 <HAL_DMA_DeInit+0x214>)
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d10f      	bne.n	800e7fc <HAL_DMA_DeInit+0x1e8>
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800e7dc:	2300      	movs	r3, #0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e7de:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800e7e0:	6013      	str	r3, [r2, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800e7e2:	6053      	str	r3, [r2, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800e7e4:	6093      	str	r3, [r2, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800e7e6:	60d3      	str	r3, [r2, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800e7e8:	6113      	str	r3, [r2, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e7ea:	f7ff fbbf 	bl	800df6c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800e7ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	f002 021f 	and.w	r2, r2, #31
 800e7f6:	4093      	lsls	r3, r2
 800e7f8:	6043      	str	r3, [r0, #4]
 800e7fa:	e775      	b.n	800e6e8 <HAL_DMA_DeInit+0xd4>
    return HAL_ERROR;
 800e7fc:	2001      	movs	r0, #1
}
 800e7fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e800:	2001      	movs	r0, #1
}
 800e802:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e804:	4a0d      	ldr	r2, [pc, #52]	; (800e83c <HAL_DMA_DeInit+0x228>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e806:	480e      	ldr	r0, [pc, #56]	; (800e840 <HAL_DMA_DeInit+0x22c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e808:	440a      	add	r2, r1
 800e80a:	0091      	lsls	r1, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e80c:	e7b6      	b.n	800e77c <HAL_DMA_DeInit+0x168>
 800e80e:	bf00      	nop
 800e810:	40020070 	.word	0x40020070
 800e814:	40020058 	.word	0x40020058
 800e818:	40020040 	.word	0x40020040
 800e81c:	40020028 	.word	0x40020028
 800e820:	58025408 	.word	0x58025408
 800e824:	5802541c 	.word	0x5802541c
 800e828:	58025494 	.word	0x58025494
 800e82c:	1600963f 	.word	0x1600963f
 800e830:	58025940 	.word	0x58025940
 800e834:	58025430 	.word	0x58025430
 800e838:	58025458 	.word	0x58025458
 800e83c:	1000823f 	.word	0x1000823f
 800e840:	40020940 	.word	0x40020940

0800e844 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800e844:	2800      	cmp	r0, #0
 800e846:	f000 8177 	beq.w	800eb38 <HAL_DMA_Start_IT+0x2f4>
 800e84a:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 800e84c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800e850:	2801      	cmp	r0, #1
 800e852:	f000 8173 	beq.w	800eb3c <HAL_DMA_Start_IT+0x2f8>
 800e856:	2001      	movs	r0, #1
{
 800e858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 800e85c:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 800e860:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800e864:	4284      	cmp	r4, r0
 800e866:	d008      	beq.n	800e87a <HAL_DMA_Start_IT+0x36>
    __HAL_UNLOCK(hdma);
 800e868:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800e86a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800e86e:	f88c 2034 	strb.w	r2, [ip, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800e872:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
}
 800e876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800e87a:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 800e87c:	f8dc 4000 	ldr.w	r4, [ip]
 800e880:	4d53      	ldr	r5, [pc, #332]	; (800e9d0 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800e882:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e886:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800e888:	4e52      	ldr	r6, [pc, #328]	; (800e9d4 <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e88a:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800e88e:	4852      	ldr	r0, [pc, #328]	; (800e9d8 <HAL_DMA_Start_IT+0x194>)
 800e890:	42ac      	cmp	r4, r5
 800e892:	bf18      	it	ne
 800e894:	4284      	cmpne	r4, r0
 800e896:	f105 0518 	add.w	r5, r5, #24
 800e89a:	bf0c      	ite	eq
 800e89c:	2001      	moveq	r0, #1
 800e89e:	2000      	movne	r0, #0
 800e8a0:	42ac      	cmp	r4, r5
 800e8a2:	bf08      	it	eq
 800e8a4:	f040 0001 	orreq.w	r0, r0, #1
 800e8a8:	3518      	adds	r5, #24
 800e8aa:	42ac      	cmp	r4, r5
 800e8ac:	bf08      	it	eq
 800e8ae:	f040 0001 	orreq.w	r0, r0, #1
 800e8b2:	3518      	adds	r5, #24
 800e8b4:	42ac      	cmp	r4, r5
 800e8b6:	bf08      	it	eq
 800e8b8:	f040 0001 	orreq.w	r0, r0, #1
 800e8bc:	3518      	adds	r5, #24
 800e8be:	42ac      	cmp	r4, r5
 800e8c0:	bf08      	it	eq
 800e8c2:	f040 0001 	orreq.w	r0, r0, #1
 800e8c6:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800e8ca:	42ac      	cmp	r4, r5
 800e8cc:	bf08      	it	eq
 800e8ce:	f040 0001 	orreq.w	r0, r0, #1
 800e8d2:	3518      	adds	r5, #24
 800e8d4:	42ac      	cmp	r4, r5
 800e8d6:	bf08      	it	eq
 800e8d8:	f040 0001 	orreq.w	r0, r0, #1
 800e8dc:	3518      	adds	r5, #24
 800e8de:	42ac      	cmp	r4, r5
 800e8e0:	bf08      	it	eq
 800e8e2:	f040 0001 	orreq.w	r0, r0, #1
 800e8e6:	3518      	adds	r5, #24
 800e8e8:	42ac      	cmp	r4, r5
 800e8ea:	bf08      	it	eq
 800e8ec:	f040 0001 	orreq.w	r0, r0, #1
 800e8f0:	3518      	adds	r5, #24
 800e8f2:	42ac      	cmp	r4, r5
 800e8f4:	bf08      	it	eq
 800e8f6:	f040 0001 	orreq.w	r0, r0, #1
 800e8fa:	3518      	adds	r5, #24
 800e8fc:	42ac      	cmp	r4, r5
 800e8fe:	bf08      	it	eq
 800e900:	f040 0001 	orreq.w	r0, r0, #1
 800e904:	3518      	adds	r5, #24
 800e906:	42ac      	cmp	r4, r5
 800e908:	bf08      	it	eq
 800e90a:	f040 0001 	orreq.w	r0, r0, #1
 800e90e:	3518      	adds	r5, #24
 800e910:	42ac      	cmp	r4, r5
 800e912:	bf14      	ite	ne
 800e914:	4681      	movne	r9, r0
 800e916:	f040 0901 	orreq.w	r9, r0, #1
 800e91a:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 800e91e:	42ac      	cmp	r4, r5
 800e920:	bf18      	it	ne
 800e922:	42b4      	cmpne	r4, r6
 800e924:	bf0c      	ite	eq
 800e926:	2501      	moveq	r5, #1
 800e928:	2500      	movne	r5, #0
 800e92a:	d002      	beq.n	800e932 <HAL_DMA_Start_IT+0xee>
 800e92c:	f1b9 0f00 	cmp.w	r9, #0
 800e930:	d054      	beq.n	800e9dc <HAL_DMA_Start_IT+0x198>
 800e932:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e934:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 800e938:	f026 0601 	bic.w	r6, r6, #1
 800e93c:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800e93e:	2d00      	cmp	r5, #0
 800e940:	d078      	beq.n	800ea34 <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e942:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800e946:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800e948:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800e94c:	b117      	cbz	r7, 800e954 <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e94e:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 800e952:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e954:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 800e958:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 800e95c:	f006 081f 	and.w	r8, r6, #31
 800e960:	fa0e fe08 	lsl.w	lr, lr, r8
 800e964:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e968:	6826      	ldr	r6, [r4, #0]
 800e96a:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 800e96e:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800e970:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e972:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800e976:	2b40      	cmp	r3, #64	; 0x40
 800e978:	f000 80e2 	beq.w	800eb40 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800e97c:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800e97e:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e980:	b91d      	cbnz	r5, 800e98a <HAL_DMA_Start_IT+0x146>
 800e982:	f1b9 0f00 	cmp.w	r9, #0
 800e986:	f000 80e1 	beq.w	800eb4c <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800e98a:	6823      	ldr	r3, [r4, #0]
 800e98c:	f023 031e 	bic.w	r3, r3, #30
 800e990:	f043 0316 	orr.w	r3, r3, #22
 800e994:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800e996:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800e99a:	b11b      	cbz	r3, 800e9a4 <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800e99c:	6823      	ldr	r3, [r4, #0]
 800e99e:	f043 0308 	orr.w	r3, r3, #8
 800e9a2:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800e9a4:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	03d2      	lsls	r2, r2, #15
 800e9ac:	d503      	bpl.n	800e9b6 <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e9b4:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800e9b6:	b11f      	cbz	r7, 800e9c0 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e9be:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 800e9c0:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e9c2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800e9c4:	f043 0301 	orr.w	r3, r3, #1
 800e9c8:	6023      	str	r3, [r4, #0]
}
 800e9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9ce:	bf00      	nop
 800e9d0:	40020058 	.word	0x40020058
 800e9d4:	40020010 	.word	0x40020010
 800e9d8:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800e9dc:	4f61      	ldr	r7, [pc, #388]	; (800eb64 <HAL_DMA_Start_IT+0x320>)
 800e9de:	4e62      	ldr	r6, [pc, #392]	; (800eb68 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e9e0:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800e9e4:	42b4      	cmp	r4, r6
 800e9e6:	bf18      	it	ne
 800e9e8:	42bc      	cmpne	r4, r7
 800e9ea:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800e9ee:	bf0c      	ite	eq
 800e9f0:	2701      	moveq	r7, #1
 800e9f2:	2700      	movne	r7, #0
 800e9f4:	42b4      	cmp	r4, r6
 800e9f6:	bf08      	it	eq
 800e9f8:	f047 0701 	orreq.w	r7, r7, #1
 800e9fc:	3614      	adds	r6, #20
 800e9fe:	42b4      	cmp	r4, r6
 800ea00:	bf08      	it	eq
 800ea02:	f047 0701 	orreq.w	r7, r7, #1
 800ea06:	3614      	adds	r6, #20
 800ea08:	42b4      	cmp	r4, r6
 800ea0a:	bf08      	it	eq
 800ea0c:	f047 0701 	orreq.w	r7, r7, #1
 800ea10:	3614      	adds	r6, #20
 800ea12:	42b4      	cmp	r4, r6
 800ea14:	bf08      	it	eq
 800ea16:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 800ea1a:	6826      	ldr	r6, [r4, #0]
 800ea1c:	f026 0601 	bic.w	r6, r6, #1
 800ea20:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ea22:	4e52      	ldr	r6, [pc, #328]	; (800eb6c <HAL_DMA_Start_IT+0x328>)
 800ea24:	42b4      	cmp	r4, r6
 800ea26:	bf08      	it	eq
 800ea28:	f047 0701 	orreq.w	r7, r7, #1
 800ea2c:	b917      	cbnz	r7, 800ea34 <HAL_DMA_Start_IT+0x1f0>
 800ea2e:	4f50      	ldr	r7, [pc, #320]	; (800eb70 <HAL_DMA_Start_IT+0x32c>)
 800ea30:	42bc      	cmp	r4, r7
 800ea32:	d10b      	bne.n	800ea4c <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ea34:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 800ea38:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800ea3a:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800ea3e:	b117      	cbz	r7, 800ea46 <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ea40:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 800ea44:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ea46:	f1b9 0f00 	cmp.w	r9, #0
 800ea4a:	d183      	bne.n	800e954 <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800ea4c:	4f46      	ldr	r7, [pc, #280]	; (800eb68 <HAL_DMA_Start_IT+0x324>)
 800ea4e:	f8df e114 	ldr.w	lr, [pc, #276]	; 800eb64 <HAL_DMA_Start_IT+0x320>
 800ea52:	4574      	cmp	r4, lr
 800ea54:	bf18      	it	ne
 800ea56:	42bc      	cmpne	r4, r7
 800ea58:	f10e 0e14 	add.w	lr, lr, #20
 800ea5c:	bf0c      	ite	eq
 800ea5e:	2701      	moveq	r7, #1
 800ea60:	2700      	movne	r7, #0
 800ea62:	4574      	cmp	r4, lr
 800ea64:	bf08      	it	eq
 800ea66:	f047 0701 	orreq.w	r7, r7, #1
 800ea6a:	f10e 0e14 	add.w	lr, lr, #20
 800ea6e:	4574      	cmp	r4, lr
 800ea70:	bf08      	it	eq
 800ea72:	f047 0701 	orreq.w	r7, r7, #1
 800ea76:	f10e 0e14 	add.w	lr, lr, #20
 800ea7a:	4574      	cmp	r4, lr
 800ea7c:	bf08      	it	eq
 800ea7e:	f047 0701 	orreq.w	r7, r7, #1
 800ea82:	f10e 0e14 	add.w	lr, lr, #20
 800ea86:	4574      	cmp	r4, lr
 800ea88:	bf08      	it	eq
 800ea8a:	f047 0701 	orreq.w	r7, r7, #1
 800ea8e:	f10e 0e14 	add.w	lr, lr, #20
 800ea92:	4574      	cmp	r4, lr
 800ea94:	bf08      	it	eq
 800ea96:	f047 0701 	orreq.w	r7, r7, #1
 800ea9a:	b917      	cbnz	r7, 800eaa2 <HAL_DMA_Start_IT+0x25e>
 800ea9c:	4f34      	ldr	r7, [pc, #208]	; (800eb70 <HAL_DMA_Start_IT+0x32c>)
 800ea9e:	42bc      	cmp	r4, r7
 800eaa0:	d154      	bne.n	800eb4c <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800eaa2:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800eaa6:	2701      	movs	r7, #1
 800eaa8:	f000 0e1f 	and.w	lr, r0, #31
 800eaac:	fa07 f70e 	lsl.w	r7, r7, lr
 800eab0:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800eab4:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800eab6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800eaba:	2b40      	cmp	r3, #64	; 0x40
 800eabc:	d043      	beq.n	800eb46 <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800eabe:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800eac0:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800eac2:	6823      	ldr	r3, [r4, #0]
 800eac4:	f023 030e 	bic.w	r3, r3, #14
 800eac8:	f043 030a 	orr.w	r3, r3, #10
 800eacc:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800eace:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d02d      	beq.n	800eb32 <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800ead6:	6823      	ldr	r3, [r4, #0]
 800ead8:	f043 0304 	orr.w	r3, r3, #4
 800eadc:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800eade:	4b21      	ldr	r3, [pc, #132]	; (800eb64 <HAL_DMA_Start_IT+0x320>)
 800eae0:	4a21      	ldr	r2, [pc, #132]	; (800eb68 <HAL_DMA_Start_IT+0x324>)
 800eae2:	4294      	cmp	r4, r2
 800eae4:	bf18      	it	ne
 800eae6:	429c      	cmpne	r4, r3
 800eae8:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800eaec:	bf0c      	ite	eq
 800eaee:	2301      	moveq	r3, #1
 800eaf0:	2300      	movne	r3, #0
 800eaf2:	4294      	cmp	r4, r2
 800eaf4:	bf08      	it	eq
 800eaf6:	f043 0301 	orreq.w	r3, r3, #1
 800eafa:	3214      	adds	r2, #20
 800eafc:	4294      	cmp	r4, r2
 800eafe:	bf08      	it	eq
 800eb00:	f043 0301 	orreq.w	r3, r3, #1
 800eb04:	3214      	adds	r2, #20
 800eb06:	4294      	cmp	r4, r2
 800eb08:	bf08      	it	eq
 800eb0a:	f043 0301 	orreq.w	r3, r3, #1
 800eb0e:	3214      	adds	r2, #20
 800eb10:	4294      	cmp	r4, r2
 800eb12:	bf08      	it	eq
 800eb14:	f043 0301 	orreq.w	r3, r3, #1
 800eb18:	3214      	adds	r2, #20
 800eb1a:	4294      	cmp	r4, r2
 800eb1c:	bf08      	it	eq
 800eb1e:	f043 0301 	orreq.w	r3, r3, #1
 800eb22:	3214      	adds	r2, #20
 800eb24:	4294      	cmp	r4, r2
 800eb26:	bf08      	it	eq
 800eb28:	f043 0301 	orreq.w	r3, r3, #1
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f43f af47 	beq.w	800e9c0 <HAL_DMA_Start_IT+0x17c>
 800eb32:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800eb36:	e735      	b.n	800e9a4 <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 800eb38:	2001      	movs	r0, #1
 800eb3a:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800eb3c:	2002      	movs	r0, #2
}
 800eb3e:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800eb40:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800eb42:	60e1      	str	r1, [r4, #12]
 800eb44:	e71c      	b.n	800e980 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800eb46:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800eb48:	60e1      	str	r1, [r4, #12]
 800eb4a:	e7ba      	b.n	800eac2 <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800eb4c:	6823      	ldr	r3, [r4, #0]
 800eb4e:	f023 030e 	bic.w	r3, r3, #14
 800eb52:	f043 030a 	orr.w	r3, r3, #10
 800eb56:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800eb58:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d1ba      	bne.n	800ead6 <HAL_DMA_Start_IT+0x292>
 800eb60:	e7bd      	b.n	800eade <HAL_DMA_Start_IT+0x29a>
 800eb62:	bf00      	nop
 800eb64:	5802541c 	.word	0x5802541c
 800eb68:	58025408 	.word	0x58025408
 800eb6c:	58025480 	.word	0x58025480
 800eb70:	58025494 	.word	0x58025494

0800eb74 <HAL_DMA_Abort>:
{
 800eb74:	b570      	push	{r4, r5, r6, lr}
 800eb76:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800eb78:	f7fe ff4e 	bl	800da18 <HAL_GetTick>
  if(hdma == NULL)
 800eb7c:	2d00      	cmp	r5, #0
 800eb7e:	f000 8124 	beq.w	800edca <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800eb82:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800eb86:	2b02      	cmp	r3, #2
 800eb88:	f040 80dd 	bne.w	800ed46 <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800eb8c:	682c      	ldr	r4, [r5, #0]
 800eb8e:	4606      	mov	r6, r0
 800eb90:	4b8f      	ldr	r3, [pc, #572]	; (800edd0 <HAL_DMA_Abort+0x25c>)
 800eb92:	4890      	ldr	r0, [pc, #576]	; (800edd4 <HAL_DMA_Abort+0x260>)
 800eb94:	4a90      	ldr	r2, [pc, #576]	; (800edd8 <HAL_DMA_Abort+0x264>)
 800eb96:	4284      	cmp	r4, r0
 800eb98:	bf18      	it	ne
 800eb9a:	429c      	cmpne	r4, r3
 800eb9c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800eba0:	498e      	ldr	r1, [pc, #568]	; (800eddc <HAL_DMA_Abort+0x268>)
 800eba2:	bf0c      	ite	eq
 800eba4:	2301      	moveq	r3, #1
 800eba6:	2300      	movne	r3, #0
 800eba8:	4284      	cmp	r4, r0
 800ebaa:	bf08      	it	eq
 800ebac:	f043 0301 	orreq.w	r3, r3, #1
 800ebb0:	3018      	adds	r0, #24
 800ebb2:	4284      	cmp	r4, r0
 800ebb4:	bf08      	it	eq
 800ebb6:	f043 0301 	orreq.w	r3, r3, #1
 800ebba:	3018      	adds	r0, #24
 800ebbc:	4284      	cmp	r4, r0
 800ebbe:	bf08      	it	eq
 800ebc0:	f043 0301 	orreq.w	r3, r3, #1
 800ebc4:	3018      	adds	r0, #24
 800ebc6:	4284      	cmp	r4, r0
 800ebc8:	bf08      	it	eq
 800ebca:	f043 0301 	orreq.w	r3, r3, #1
 800ebce:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800ebd2:	4284      	cmp	r4, r0
 800ebd4:	bf08      	it	eq
 800ebd6:	f043 0301 	orreq.w	r3, r3, #1
 800ebda:	3018      	adds	r0, #24
 800ebdc:	4284      	cmp	r4, r0
 800ebde:	bf08      	it	eq
 800ebe0:	f043 0301 	orreq.w	r3, r3, #1
 800ebe4:	3018      	adds	r0, #24
 800ebe6:	4284      	cmp	r4, r0
 800ebe8:	bf08      	it	eq
 800ebea:	f043 0301 	orreq.w	r3, r3, #1
 800ebee:	3018      	adds	r0, #24
 800ebf0:	4284      	cmp	r4, r0
 800ebf2:	bf08      	it	eq
 800ebf4:	f043 0301 	orreq.w	r3, r3, #1
 800ebf8:	3018      	adds	r0, #24
 800ebfa:	4284      	cmp	r4, r0
 800ebfc:	bf08      	it	eq
 800ebfe:	f043 0301 	orreq.w	r3, r3, #1
 800ec02:	3018      	adds	r0, #24
 800ec04:	4284      	cmp	r4, r0
 800ec06:	bf08      	it	eq
 800ec08:	f043 0301 	orreq.w	r3, r3, #1
 800ec0c:	3018      	adds	r0, #24
 800ec0e:	4284      	cmp	r4, r0
 800ec10:	bf08      	it	eq
 800ec12:	f043 0301 	orreq.w	r3, r3, #1
 800ec16:	3018      	adds	r0, #24
 800ec18:	4284      	cmp	r4, r0
 800ec1a:	bf08      	it	eq
 800ec1c:	f043 0301 	orreq.w	r3, r3, #1
 800ec20:	428c      	cmp	r4, r1
 800ec22:	bf18      	it	ne
 800ec24:	4294      	cmpne	r4, r2
 800ec26:	bf0c      	ite	eq
 800ec28:	2201      	moveq	r2, #1
 800ec2a:	2200      	movne	r2, #0
 800ec2c:	d002      	beq.n	800ec34 <HAL_DMA_Abort+0xc0>
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	f000 8090 	beq.w	800ed54 <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800ec34:	6821      	ldr	r1, [r4, #0]
 800ec36:	f021 011e 	bic.w	r1, r1, #30
 800ec3a:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800ec3c:	6961      	ldr	r1, [r4, #20]
 800ec3e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ec42:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ec44:	2a00      	cmp	r2, #0
 800ec46:	f000 80b0 	beq.w	800edaa <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ec4a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800ec4c:	6813      	ldr	r3, [r2, #0]
 800ec4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec52:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800ec54:	6823      	ldr	r3, [r4, #0]
 800ec56:	f023 0301 	bic.w	r3, r3, #1
 800ec5a:	6023      	str	r3, [r4, #0]
 800ec5c:	e005      	b.n	800ec6a <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ec5e:	f7fe fedb 	bl	800da18 <HAL_GetTick>
 800ec62:	1b83      	subs	r3, r0, r6
 800ec64:	2b05      	cmp	r3, #5
 800ec66:	f200 80a6 	bhi.w	800edb6 <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800ec6a:	6823      	ldr	r3, [r4, #0]
 800ec6c:	07db      	lsls	r3, r3, #31
 800ec6e:	d4f6      	bmi.n	800ec5e <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ec70:	682a      	ldr	r2, [r5, #0]
 800ec72:	4b57      	ldr	r3, [pc, #348]	; (800edd0 <HAL_DMA_Abort+0x25c>)
 800ec74:	4857      	ldr	r0, [pc, #348]	; (800edd4 <HAL_DMA_Abort+0x260>)
 800ec76:	495a      	ldr	r1, [pc, #360]	; (800ede0 <HAL_DMA_Abort+0x26c>)
 800ec78:	4282      	cmp	r2, r0
 800ec7a:	bf18      	it	ne
 800ec7c:	429a      	cmpne	r2, r3
 800ec7e:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800ec82:	bf0c      	ite	eq
 800ec84:	2301      	moveq	r3, #1
 800ec86:	2300      	movne	r3, #0
 800ec88:	428a      	cmp	r2, r1
 800ec8a:	bf08      	it	eq
 800ec8c:	f043 0301 	orreq.w	r3, r3, #1
 800ec90:	3130      	adds	r1, #48	; 0x30
 800ec92:	4282      	cmp	r2, r0
 800ec94:	bf08      	it	eq
 800ec96:	f043 0301 	orreq.w	r3, r3, #1
 800ec9a:	3030      	adds	r0, #48	; 0x30
 800ec9c:	428a      	cmp	r2, r1
 800ec9e:	bf08      	it	eq
 800eca0:	f043 0301 	orreq.w	r3, r3, #1
 800eca4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800eca8:	4282      	cmp	r2, r0
 800ecaa:	bf08      	it	eq
 800ecac:	f043 0301 	orreq.w	r3, r3, #1
 800ecb0:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800ecb4:	428a      	cmp	r2, r1
 800ecb6:	bf08      	it	eq
 800ecb8:	f043 0301 	orreq.w	r3, r3, #1
 800ecbc:	3130      	adds	r1, #48	; 0x30
 800ecbe:	4282      	cmp	r2, r0
 800ecc0:	bf08      	it	eq
 800ecc2:	f043 0301 	orreq.w	r3, r3, #1
 800ecc6:	3030      	adds	r0, #48	; 0x30
 800ecc8:	428a      	cmp	r2, r1
 800ecca:	bf08      	it	eq
 800eccc:	f043 0301 	orreq.w	r3, r3, #1
 800ecd0:	3130      	adds	r1, #48	; 0x30
 800ecd2:	4282      	cmp	r2, r0
 800ecd4:	bf08      	it	eq
 800ecd6:	f043 0301 	orreq.w	r3, r3, #1
 800ecda:	3030      	adds	r0, #48	; 0x30
 800ecdc:	428a      	cmp	r2, r1
 800ecde:	bf08      	it	eq
 800ece0:	f043 0301 	orreq.w	r3, r3, #1
 800ece4:	3130      	adds	r1, #48	; 0x30
 800ece6:	4282      	cmp	r2, r0
 800ece8:	bf08      	it	eq
 800ecea:	f043 0301 	orreq.w	r3, r3, #1
 800ecee:	428a      	cmp	r2, r1
 800ecf0:	bf08      	it	eq
 800ecf2:	f043 0301 	orreq.w	r3, r3, #1
 800ecf6:	3118      	adds	r1, #24
 800ecf8:	428a      	cmp	r2, r1
 800ecfa:	bf08      	it	eq
 800ecfc:	f043 0301 	orreq.w	r3, r3, #1
 800ed00:	b933      	cbnz	r3, 800ed10 <HAL_DMA_Abort+0x19c>
 800ed02:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800ed06:	4b35      	ldr	r3, [pc, #212]	; (800eddc <HAL_DMA_Abort+0x268>)
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	bf18      	it	ne
 800ed0c:	428a      	cmpne	r2, r1
 800ed0e:	d16f      	bne.n	800edf0 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ed10:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800ed12:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ed14:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ed16:	f002 021f 	and.w	r2, r2, #31
 800ed1a:	4093      	lsls	r3, r2
 800ed1c:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 800ed1e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ed20:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 800ed24:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800ed26:	b133      	cbz	r3, 800ed36 <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ed28:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ed2a:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ed2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ed32:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ed34:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800ed36:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800ed38:	2201      	movs	r2, #1
  return HAL_OK;
 800ed3a:	4618      	mov	r0, r3
    __HAL_UNLOCK(hdma);
 800ed3c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800ed40:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 800ed44:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ed46:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800ed48:	2300      	movs	r3, #0
    return HAL_ERROR;
 800ed4a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ed4c:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800ed4e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 800ed52:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800ed54:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ed56:	4923      	ldr	r1, [pc, #140]	; (800ede4 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800ed58:	f022 020e 	bic.w	r2, r2, #14
 800ed5c:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ed5e:	4a22      	ldr	r2, [pc, #136]	; (800ede8 <HAL_DMA_Abort+0x274>)
 800ed60:	428c      	cmp	r4, r1
 800ed62:	bf18      	it	ne
 800ed64:	4294      	cmpne	r4, r2
 800ed66:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800ed6a:	bf0c      	ite	eq
 800ed6c:	2201      	moveq	r2, #1
 800ed6e:	2200      	movne	r2, #0
 800ed70:	428c      	cmp	r4, r1
 800ed72:	bf08      	it	eq
 800ed74:	f042 0201 	orreq.w	r2, r2, #1
 800ed78:	3114      	adds	r1, #20
 800ed7a:	428c      	cmp	r4, r1
 800ed7c:	bf08      	it	eq
 800ed7e:	f042 0201 	orreq.w	r2, r2, #1
 800ed82:	3114      	adds	r1, #20
 800ed84:	428c      	cmp	r4, r1
 800ed86:	bf08      	it	eq
 800ed88:	f042 0201 	orreq.w	r2, r2, #1
 800ed8c:	3114      	adds	r1, #20
 800ed8e:	428c      	cmp	r4, r1
 800ed90:	bf08      	it	eq
 800ed92:	f042 0201 	orreq.w	r2, r2, #1
 800ed96:	3114      	adds	r1, #20
 800ed98:	428c      	cmp	r4, r1
 800ed9a:	bf08      	it	eq
 800ed9c:	f042 0201 	orreq.w	r2, r2, #1
 800eda0:	b91a      	cbnz	r2, 800edaa <HAL_DMA_Abort+0x236>
 800eda2:	4a12      	ldr	r2, [pc, #72]	; (800edec <HAL_DMA_Abort+0x278>)
 800eda4:	4294      	cmp	r4, r2
 800eda6:	f47f af55 	bne.w	800ec54 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800edaa:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800edac:	680a      	ldr	r2, [r1, #0]
 800edae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800edb2:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800edb4:	e74e      	b.n	800ec54 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800edb6:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800edb8:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 800edba:	2303      	movs	r3, #3
        return HAL_ERROR;
 800edbc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800edbe:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800edc0:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 800edc4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800edc8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800edca:	2001      	movs	r0, #1
}
 800edcc:	bd70      	pop	{r4, r5, r6, pc}
 800edce:	bf00      	nop
 800edd0:	40020058 	.word	0x40020058
 800edd4:	40020040 	.word	0x40020040
 800edd8:	40020010 	.word	0x40020010
 800eddc:	40020028 	.word	0x40020028
 800ede0:	40020070 	.word	0x40020070
 800ede4:	58025408 	.word	0x58025408
 800ede8:	5802541c 	.word	0x5802541c
 800edec:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800edf0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800edf2:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800edf4:	4b16      	ldr	r3, [pc, #88]	; (800ee50 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800edf6:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800edfa:	4c16      	ldr	r4, [pc, #88]	; (800ee54 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800edfc:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800edfe:	42a2      	cmp	r2, r4
 800ee00:	bf18      	it	ne
 800ee02:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ee04:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ee06:	bf0c      	ite	eq
 800ee08:	2301      	moveq	r3, #1
 800ee0a:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ee0c:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ee0e:	4812      	ldr	r0, [pc, #72]	; (800ee58 <HAL_DMA_Abort+0x2e4>)
 800ee10:	4912      	ldr	r1, [pc, #72]	; (800ee5c <HAL_DMA_Abort+0x2e8>)
 800ee12:	4282      	cmp	r2, r0
 800ee14:	bf08      	it	eq
 800ee16:	f043 0301 	orreq.w	r3, r3, #1
 800ee1a:	3028      	adds	r0, #40	; 0x28
 800ee1c:	428a      	cmp	r2, r1
 800ee1e:	bf08      	it	eq
 800ee20:	f043 0301 	orreq.w	r3, r3, #1
 800ee24:	3128      	adds	r1, #40	; 0x28
 800ee26:	4282      	cmp	r2, r0
 800ee28:	bf08      	it	eq
 800ee2a:	f043 0301 	orreq.w	r3, r3, #1
 800ee2e:	428a      	cmp	r2, r1
 800ee30:	bf08      	it	eq
 800ee32:	f043 0301 	orreq.w	r3, r3, #1
 800ee36:	3114      	adds	r1, #20
 800ee38:	428a      	cmp	r2, r1
 800ee3a:	bf08      	it	eq
 800ee3c:	f043 0301 	orreq.w	r3, r3, #1
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	f47f af6c 	bne.w	800ed1e <HAL_DMA_Abort+0x1aa>
 800ee46:	4b06      	ldr	r3, [pc, #24]	; (800ee60 <HAL_DMA_Abort+0x2ec>)
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	f43f af68 	beq.w	800ed1e <HAL_DMA_Abort+0x1aa>
 800ee4e:	e772      	b.n	800ed36 <HAL_DMA_Abort+0x1c2>
 800ee50:	5802541c 	.word	0x5802541c
 800ee54:	58025408 	.word	0x58025408
 800ee58:	58025430 	.word	0x58025430
 800ee5c:	58025444 	.word	0x58025444
 800ee60:	58025494 	.word	0x58025494

0800ee64 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800ee64:	2800      	cmp	r0, #0
 800ee66:	d05f      	beq.n	800ef28 <HAL_DMA_Abort_IT+0xc4>
{
 800ee68:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ee6a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800ee6e:	4603      	mov	r3, r0
 800ee70:	2a02      	cmp	r2, #2
 800ee72:	d155      	bne.n	800ef20 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ee74:	6801      	ldr	r1, [r0, #0]
 800ee76:	4a57      	ldr	r2, [pc, #348]	; (800efd4 <HAL_DMA_Abort_IT+0x170>)
 800ee78:	4291      	cmp	r1, r2
 800ee7a:	d048      	beq.n	800ef0e <HAL_DMA_Abort_IT+0xaa>
 800ee7c:	3218      	adds	r2, #24
 800ee7e:	4291      	cmp	r1, r2
 800ee80:	d045      	beq.n	800ef0e <HAL_DMA_Abort_IT+0xaa>
 800ee82:	3230      	adds	r2, #48	; 0x30
 800ee84:	4c54      	ldr	r4, [pc, #336]	; (800efd8 <HAL_DMA_Abort_IT+0x174>)
 800ee86:	4855      	ldr	r0, [pc, #340]	; (800efdc <HAL_DMA_Abort_IT+0x178>)
 800ee88:	42a1      	cmp	r1, r4
 800ee8a:	bf18      	it	ne
 800ee8c:	4291      	cmpne	r1, r2
 800ee8e:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800ee92:	bf0c      	ite	eq
 800ee94:	2201      	moveq	r2, #1
 800ee96:	2200      	movne	r2, #0
 800ee98:	4281      	cmp	r1, r0
 800ee9a:	bf08      	it	eq
 800ee9c:	f042 0201 	orreq.w	r2, r2, #1
 800eea0:	3030      	adds	r0, #48	; 0x30
 800eea2:	42a1      	cmp	r1, r4
 800eea4:	bf08      	it	eq
 800eea6:	f042 0201 	orreq.w	r2, r2, #1
 800eeaa:	3430      	adds	r4, #48	; 0x30
 800eeac:	4281      	cmp	r1, r0
 800eeae:	bf08      	it	eq
 800eeb0:	f042 0201 	orreq.w	r2, r2, #1
 800eeb4:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800eeb8:	42a1      	cmp	r1, r4
 800eeba:	bf08      	it	eq
 800eebc:	f042 0201 	orreq.w	r2, r2, #1
 800eec0:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800eec4:	4281      	cmp	r1, r0
 800eec6:	bf08      	it	eq
 800eec8:	f042 0201 	orreq.w	r2, r2, #1
 800eecc:	3030      	adds	r0, #48	; 0x30
 800eece:	42a1      	cmp	r1, r4
 800eed0:	bf08      	it	eq
 800eed2:	f042 0201 	orreq.w	r2, r2, #1
 800eed6:	3430      	adds	r4, #48	; 0x30
 800eed8:	4281      	cmp	r1, r0
 800eeda:	bf08      	it	eq
 800eedc:	f042 0201 	orreq.w	r2, r2, #1
 800eee0:	3030      	adds	r0, #48	; 0x30
 800eee2:	42a1      	cmp	r1, r4
 800eee4:	bf08      	it	eq
 800eee6:	f042 0201 	orreq.w	r2, r2, #1
 800eeea:	3430      	adds	r4, #48	; 0x30
 800eeec:	4281      	cmp	r1, r0
 800eeee:	bf08      	it	eq
 800eef0:	f042 0201 	orreq.w	r2, r2, #1
 800eef4:	3030      	adds	r0, #48	; 0x30
 800eef6:	42a1      	cmp	r1, r4
 800eef8:	bf08      	it	eq
 800eefa:	f042 0201 	orreq.w	r2, r2, #1
 800eefe:	4281      	cmp	r1, r0
 800ef00:	bf08      	it	eq
 800ef02:	f042 0201 	orreq.w	r2, r2, #1
 800ef06:	b912      	cbnz	r2, 800ef0e <HAL_DMA_Abort_IT+0xaa>
 800ef08:	4a35      	ldr	r2, [pc, #212]	; (800efe0 <HAL_DMA_Abort_IT+0x17c>)
 800ef0a:	4291      	cmp	r1, r2
 800ef0c:	d10e      	bne.n	800ef2c <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800ef0e:	2204      	movs	r2, #4
  return HAL_OK;
 800ef10:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800ef12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800ef16:	680b      	ldr	r3, [r1, #0]
 800ef18:	f023 0301 	bic.w	r3, r3, #1
 800ef1c:	600b      	str	r3, [r1, #0]
}
 800ef1e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ef20:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800ef22:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ef24:	655a      	str	r2, [r3, #84]	; 0x54
}
 800ef26:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ef28:	2001      	movs	r0, #1
}
 800ef2a:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ef2c:	4a2d      	ldr	r2, [pc, #180]	; (800efe4 <HAL_DMA_Abort_IT+0x180>)
 800ef2e:	4d2e      	ldr	r5, [pc, #184]	; (800efe8 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800ef30:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ef32:	42a9      	cmp	r1, r5
 800ef34:	bf18      	it	ne
 800ef36:	4291      	cmpne	r1, r2
 800ef38:	4c2c      	ldr	r4, [pc, #176]	; (800efec <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800ef3a:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ef3e:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800ef42:	bf0c      	ite	eq
 800ef44:	2201      	moveq	r2, #1
 800ef46:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800ef48:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ef4a:	42a1      	cmp	r1, r4
 800ef4c:	bf08      	it	eq
 800ef4e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800ef52:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ef54:	3428      	adds	r4, #40	; 0x28
 800ef56:	42a9      	cmp	r1, r5
 800ef58:	bf08      	it	eq
 800ef5a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800ef5e:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ef62:	42a1      	cmp	r1, r4
 800ef64:	bf08      	it	eq
 800ef66:	f042 0201 	orreq.w	r2, r2, #1
 800ef6a:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 800ef6c:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ef6e:	42a1      	cmp	r1, r4
 800ef70:	bf08      	it	eq
 800ef72:	f042 0201 	orreq.w	r2, r2, #1
 800ef76:	481e      	ldr	r0, [pc, #120]	; (800eff0 <HAL_DMA_Abort_IT+0x18c>)
 800ef78:	4281      	cmp	r1, r0
 800ef7a:	bf08      	it	eq
 800ef7c:	f042 0201 	orreq.w	r2, r2, #1
 800ef80:	b912      	cbnz	r2, 800ef88 <HAL_DMA_Abort_IT+0x124>
 800ef82:	4a1c      	ldr	r2, [pc, #112]	; (800eff4 <HAL_DMA_Abort_IT+0x190>)
 800ef84:	4291      	cmp	r1, r2
 800ef86:	d117      	bne.n	800efb8 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ef88:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ef8a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ef8c:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ef90:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ef92:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ef96:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ef9a:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ef9c:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ef9e:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800efa0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800efa2:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 800efa6:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800efa8:	b132      	cbz	r2, 800efb8 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800efaa:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800efac:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800efb0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800efb4:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800efb6:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 800efb8:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 800efba:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 800efbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800efbe:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800efc2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800efc6:	b11a      	cbz	r2, 800efd0 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 800efc8:	4618      	mov	r0, r3
 800efca:	4790      	blx	r2
  return HAL_OK;
 800efcc:	4620      	mov	r0, r4
}
 800efce:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800efd0:	4610      	mov	r0, r2
}
 800efd2:	bd38      	pop	{r3, r4, r5, pc}
 800efd4:	40020010 	.word	0x40020010
 800efd8:	40020040 	.word	0x40020040
 800efdc:	40020070 	.word	0x40020070
 800efe0:	400204b8 	.word	0x400204b8
 800efe4:	5802541c 	.word	0x5802541c
 800efe8:	58025408 	.word	0x58025408
 800efec:	58025430 	.word	0x58025430
 800eff0:	58025480 	.word	0x58025480
 800eff4:	58025494 	.word	0x58025494

0800eff8 <HAL_DMA_IRQHandler>:
{
 800eff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 800effc:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800effe:	4b9c      	ldr	r3, [pc, #624]	; (800f270 <HAL_DMA_IRQHandler+0x278>)
{
 800f000:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800f002:	4e9c      	ldr	r6, [pc, #624]	; (800f274 <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 800f004:	681d      	ldr	r5, [r3, #0]
{
 800f006:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 800f008:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800f00a:	6803      	ldr	r3, [r0, #0]
 800f00c:	4a9a      	ldr	r2, [pc, #616]	; (800f278 <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f00e:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800f010:	4293      	cmp	r3, r2
 800f012:	bf18      	it	ne
 800f014:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 800f016:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800f018:	bf08      	it	eq
 800f01a:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 800f01c:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800f01e:	bf18      	it	ne
 800f020:	2600      	movne	r6, #0
 800f022:	d045      	beq.n	800f0b0 <HAL_DMA_IRQHandler+0xb8>
 800f024:	3218      	adds	r2, #24
 800f026:	4895      	ldr	r0, [pc, #596]	; (800f27c <HAL_DMA_IRQHandler+0x284>)
 800f028:	4283      	cmp	r3, r0
 800f02a:	bf18      	it	ne
 800f02c:	4293      	cmpne	r3, r2
 800f02e:	f100 0018 	add.w	r0, r0, #24
 800f032:	bf0c      	ite	eq
 800f034:	2201      	moveq	r2, #1
 800f036:	2200      	movne	r2, #0
 800f038:	4283      	cmp	r3, r0
 800f03a:	bf08      	it	eq
 800f03c:	f042 0201 	orreq.w	r2, r2, #1
 800f040:	3018      	adds	r0, #24
 800f042:	4283      	cmp	r3, r0
 800f044:	bf08      	it	eq
 800f046:	f042 0201 	orreq.w	r2, r2, #1
 800f04a:	3018      	adds	r0, #24
 800f04c:	4283      	cmp	r3, r0
 800f04e:	bf08      	it	eq
 800f050:	f042 0201 	orreq.w	r2, r2, #1
 800f054:	3018      	adds	r0, #24
 800f056:	4283      	cmp	r3, r0
 800f058:	bf08      	it	eq
 800f05a:	f042 0201 	orreq.w	r2, r2, #1
 800f05e:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800f062:	4283      	cmp	r3, r0
 800f064:	bf08      	it	eq
 800f066:	f042 0201 	orreq.w	r2, r2, #1
 800f06a:	3018      	adds	r0, #24
 800f06c:	4283      	cmp	r3, r0
 800f06e:	bf08      	it	eq
 800f070:	f042 0201 	orreq.w	r2, r2, #1
 800f074:	3018      	adds	r0, #24
 800f076:	4283      	cmp	r3, r0
 800f078:	bf08      	it	eq
 800f07a:	f042 0201 	orreq.w	r2, r2, #1
 800f07e:	3018      	adds	r0, #24
 800f080:	4283      	cmp	r3, r0
 800f082:	bf08      	it	eq
 800f084:	f042 0201 	orreq.w	r2, r2, #1
 800f088:	3018      	adds	r0, #24
 800f08a:	4283      	cmp	r3, r0
 800f08c:	bf08      	it	eq
 800f08e:	f042 0201 	orreq.w	r2, r2, #1
 800f092:	3018      	adds	r0, #24
 800f094:	4283      	cmp	r3, r0
 800f096:	bf08      	it	eq
 800f098:	f042 0201 	orreq.w	r2, r2, #1
 800f09c:	3018      	adds	r0, #24
 800f09e:	4283      	cmp	r3, r0
 800f0a0:	bf08      	it	eq
 800f0a2:	f042 0201 	orreq.w	r2, r2, #1
 800f0a6:	b91a      	cbnz	r2, 800f0b0 <HAL_DMA_IRQHandler+0xb8>
 800f0a8:	4a75      	ldr	r2, [pc, #468]	; (800f280 <HAL_DMA_IRQHandler+0x288>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	f040 8250 	bne.w	800f550 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f0b0:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 800f0b4:	2208      	movs	r2, #8
 800f0b6:	f001 0c1f 	and.w	ip, r1, #31
 800f0ba:	fa02 f20c 	lsl.w	r2, r2, ip
 800f0be:	4217      	tst	r7, r2
 800f0c0:	f040 8188 	bne.w	800f3d4 <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f0c4:	fa27 f20c 	lsr.w	r2, r7, ip
 800f0c8:	07d2      	lsls	r2, r2, #31
 800f0ca:	d50c      	bpl.n	800f0e6 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800f0cc:	695a      	ldr	r2, [r3, #20]
 800f0ce:	0610      	lsls	r0, r2, #24
 800f0d0:	d509      	bpl.n	800f0e6 <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	fa02 f20c 	lsl.w	r2, r2, ip
 800f0d8:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f0da:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 800f0de:	f042 0202 	orr.w	r2, r2, #2
 800f0e2:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f0e6:	f04f 0e04 	mov.w	lr, #4
 800f0ea:	fa0e f00c 	lsl.w	r0, lr, ip
 800f0ee:	4238      	tst	r0, r7
 800f0f0:	d05b      	beq.n	800f1aa <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800f0f2:	2e00      	cmp	r6, #0
 800f0f4:	d14f      	bne.n	800f196 <HAL_DMA_IRQHandler+0x19e>
 800f0f6:	4a63      	ldr	r2, [pc, #396]	; (800f284 <HAL_DMA_IRQHandler+0x28c>)
 800f0f8:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800f27c <HAL_DMA_IRQHandler+0x284>
 800f0fc:	4543      	cmp	r3, r8
 800f0fe:	bf18      	it	ne
 800f100:	4293      	cmpne	r3, r2
 800f102:	f108 0818 	add.w	r8, r8, #24
 800f106:	bf0c      	ite	eq
 800f108:	2201      	moveq	r2, #1
 800f10a:	2200      	movne	r2, #0
 800f10c:	4543      	cmp	r3, r8
 800f10e:	bf08      	it	eq
 800f110:	f042 0201 	orreq.w	r2, r2, #1
 800f114:	f108 0818 	add.w	r8, r8, #24
 800f118:	4543      	cmp	r3, r8
 800f11a:	bf08      	it	eq
 800f11c:	f042 0201 	orreq.w	r2, r2, #1
 800f120:	f108 0818 	add.w	r8, r8, #24
 800f124:	4543      	cmp	r3, r8
 800f126:	bf08      	it	eq
 800f128:	f042 0201 	orreq.w	r2, r2, #1
 800f12c:	f108 0818 	add.w	r8, r8, #24
 800f130:	4543      	cmp	r3, r8
 800f132:	bf08      	it	eq
 800f134:	f042 0201 	orreq.w	r2, r2, #1
 800f138:	f508 7856 	add.w	r8, r8, #856	; 0x358
 800f13c:	4543      	cmp	r3, r8
 800f13e:	bf08      	it	eq
 800f140:	f042 0201 	orreq.w	r2, r2, #1
 800f144:	f108 0818 	add.w	r8, r8, #24
 800f148:	4543      	cmp	r3, r8
 800f14a:	bf08      	it	eq
 800f14c:	f042 0201 	orreq.w	r2, r2, #1
 800f150:	f108 0818 	add.w	r8, r8, #24
 800f154:	4543      	cmp	r3, r8
 800f156:	bf08      	it	eq
 800f158:	f042 0201 	orreq.w	r2, r2, #1
 800f15c:	f108 0818 	add.w	r8, r8, #24
 800f160:	4543      	cmp	r3, r8
 800f162:	bf08      	it	eq
 800f164:	f042 0201 	orreq.w	r2, r2, #1
 800f168:	f108 0818 	add.w	r8, r8, #24
 800f16c:	4543      	cmp	r3, r8
 800f16e:	bf08      	it	eq
 800f170:	f042 0201 	orreq.w	r2, r2, #1
 800f174:	f108 0818 	add.w	r8, r8, #24
 800f178:	4543      	cmp	r3, r8
 800f17a:	bf08      	it	eq
 800f17c:	f042 0201 	orreq.w	r2, r2, #1
 800f180:	f108 0818 	add.w	r8, r8, #24
 800f184:	4543      	cmp	r3, r8
 800f186:	bf08      	it	eq
 800f188:	f042 0201 	orreq.w	r2, r2, #1
 800f18c:	b91a      	cbnz	r2, 800f196 <HAL_DMA_IRQHandler+0x19e>
 800f18e:	4a3c      	ldr	r2, [pc, #240]	; (800f280 <HAL_DMA_IRQHandler+0x288>)
 800f190:	4293      	cmp	r3, r2
 800f192:	f040 8219 	bne.w	800f5c8 <HAL_DMA_IRQHandler+0x5d0>
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	0792      	lsls	r2, r2, #30
 800f19a:	d506      	bpl.n	800f1aa <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f19c:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f19e:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 800f1a2:	f042 0204 	orr.w	r2, r2, #4
 800f1a6:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f1aa:	2210      	movs	r2, #16
 800f1ac:	fa02 fc0c 	lsl.w	ip, r2, ip
 800f1b0:	ea1c 0f07 	tst.w	ip, r7
 800f1b4:	d06c      	beq.n	800f290 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800f1b6:	2e00      	cmp	r6, #0
 800f1b8:	d145      	bne.n	800f246 <HAL_DMA_IRQHandler+0x24e>
 800f1ba:	4a32      	ldr	r2, [pc, #200]	; (800f284 <HAL_DMA_IRQHandler+0x28c>)
 800f1bc:	4e2f      	ldr	r6, [pc, #188]	; (800f27c <HAL_DMA_IRQHandler+0x284>)
 800f1be:	42b3      	cmp	r3, r6
 800f1c0:	bf18      	it	ne
 800f1c2:	4293      	cmpne	r3, r2
 800f1c4:	f106 0618 	add.w	r6, r6, #24
 800f1c8:	bf0c      	ite	eq
 800f1ca:	2201      	moveq	r2, #1
 800f1cc:	2200      	movne	r2, #0
 800f1ce:	42b3      	cmp	r3, r6
 800f1d0:	bf08      	it	eq
 800f1d2:	f042 0201 	orreq.w	r2, r2, #1
 800f1d6:	3618      	adds	r6, #24
 800f1d8:	42b3      	cmp	r3, r6
 800f1da:	bf08      	it	eq
 800f1dc:	f042 0201 	orreq.w	r2, r2, #1
 800f1e0:	3618      	adds	r6, #24
 800f1e2:	42b3      	cmp	r3, r6
 800f1e4:	bf08      	it	eq
 800f1e6:	f042 0201 	orreq.w	r2, r2, #1
 800f1ea:	3618      	adds	r6, #24
 800f1ec:	42b3      	cmp	r3, r6
 800f1ee:	bf08      	it	eq
 800f1f0:	f042 0201 	orreq.w	r2, r2, #1
 800f1f4:	f506 7656 	add.w	r6, r6, #856	; 0x358
 800f1f8:	42b3      	cmp	r3, r6
 800f1fa:	bf08      	it	eq
 800f1fc:	f042 0201 	orreq.w	r2, r2, #1
 800f200:	3618      	adds	r6, #24
 800f202:	42b3      	cmp	r3, r6
 800f204:	bf08      	it	eq
 800f206:	f042 0201 	orreq.w	r2, r2, #1
 800f20a:	3618      	adds	r6, #24
 800f20c:	42b3      	cmp	r3, r6
 800f20e:	bf08      	it	eq
 800f210:	f042 0201 	orreq.w	r2, r2, #1
 800f214:	3618      	adds	r6, #24
 800f216:	42b3      	cmp	r3, r6
 800f218:	bf08      	it	eq
 800f21a:	f042 0201 	orreq.w	r2, r2, #1
 800f21e:	3618      	adds	r6, #24
 800f220:	42b3      	cmp	r3, r6
 800f222:	bf08      	it	eq
 800f224:	f042 0201 	orreq.w	r2, r2, #1
 800f228:	3618      	adds	r6, #24
 800f22a:	42b3      	cmp	r3, r6
 800f22c:	bf08      	it	eq
 800f22e:	f042 0201 	orreq.w	r2, r2, #1
 800f232:	3618      	adds	r6, #24
 800f234:	42b3      	cmp	r3, r6
 800f236:	bf08      	it	eq
 800f238:	f042 0201 	orreq.w	r2, r2, #1
 800f23c:	b91a      	cbnz	r2, 800f246 <HAL_DMA_IRQHandler+0x24e>
 800f23e:	4a10      	ldr	r2, [pc, #64]	; (800f280 <HAL_DMA_IRQHandler+0x288>)
 800f240:	4293      	cmp	r3, r2
 800f242:	f040 81c9 	bne.w	800f5d8 <HAL_DMA_IRQHandler+0x5e0>
 800f246:	681a      	ldr	r2, [r3, #0]
 800f248:	0710      	lsls	r0, r2, #28
 800f24a:	d521      	bpl.n	800f290 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f24c:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800f250:	681a      	ldr	r2, [r3, #0]
 800f252:	0356      	lsls	r6, r2, #13
 800f254:	f100 814c 	bmi.w	800f4f0 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	05d2      	lsls	r2, r2, #23
 800f25c:	d403      	bmi.n	800f266 <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	f022 0208 	bic.w	r2, r2, #8
 800f264:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800f266:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800f26a:	b18b      	cbz	r3, 800f290 <HAL_DMA_IRQHandler+0x298>
 800f26c:	e00c      	b.n	800f288 <HAL_DMA_IRQHandler+0x290>
 800f26e:	bf00      	nop
 800f270:	2400737c 	.word	0x2400737c
 800f274:	40020010 	.word	0x40020010
 800f278:	40020028 	.word	0x40020028
 800f27c:	40020058 	.word	0x40020058
 800f280:	400204b8 	.word	0x400204b8
 800f284:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 800f288:	4648      	mov	r0, r9
 800f28a:	4798      	blx	r3
 800f28c:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f290:	f001 011f 	and.w	r1, r1, #31
 800f294:	2620      	movs	r6, #32
 800f296:	408e      	lsls	r6, r1
 800f298:	423e      	tst	r6, r7
 800f29a:	d068      	beq.n	800f36e <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800f29c:	f8d9 2000 	ldr.w	r2, [r9]
 800f2a0:	4ba5      	ldr	r3, [pc, #660]	; (800f538 <HAL_DMA_IRQHandler+0x540>)
 800f2a2:	4fa6      	ldr	r7, [pc, #664]	; (800f53c <HAL_DMA_IRQHandler+0x544>)
 800f2a4:	42ba      	cmp	r2, r7
 800f2a6:	bf18      	it	ne
 800f2a8:	429a      	cmpne	r2, r3
 800f2aa:	f107 0718 	add.w	r7, r7, #24
 800f2ae:	bf0c      	ite	eq
 800f2b0:	2301      	moveq	r3, #1
 800f2b2:	2300      	movne	r3, #0
 800f2b4:	42ba      	cmp	r2, r7
 800f2b6:	bf08      	it	eq
 800f2b8:	f043 0301 	orreq.w	r3, r3, #1
 800f2bc:	3718      	adds	r7, #24
 800f2be:	42ba      	cmp	r2, r7
 800f2c0:	bf08      	it	eq
 800f2c2:	f043 0301 	orreq.w	r3, r3, #1
 800f2c6:	3718      	adds	r7, #24
 800f2c8:	42ba      	cmp	r2, r7
 800f2ca:	bf08      	it	eq
 800f2cc:	f043 0301 	orreq.w	r3, r3, #1
 800f2d0:	3718      	adds	r7, #24
 800f2d2:	42ba      	cmp	r2, r7
 800f2d4:	bf08      	it	eq
 800f2d6:	f043 0301 	orreq.w	r3, r3, #1
 800f2da:	3718      	adds	r7, #24
 800f2dc:	42ba      	cmp	r2, r7
 800f2de:	bf08      	it	eq
 800f2e0:	f043 0301 	orreq.w	r3, r3, #1
 800f2e4:	3718      	adds	r7, #24
 800f2e6:	42ba      	cmp	r2, r7
 800f2e8:	bf08      	it	eq
 800f2ea:	f043 0301 	orreq.w	r3, r3, #1
 800f2ee:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800f2f2:	42ba      	cmp	r2, r7
 800f2f4:	bf08      	it	eq
 800f2f6:	f043 0301 	orreq.w	r3, r3, #1
 800f2fa:	3718      	adds	r7, #24
 800f2fc:	42ba      	cmp	r2, r7
 800f2fe:	bf08      	it	eq
 800f300:	f043 0301 	orreq.w	r3, r3, #1
 800f304:	3718      	adds	r7, #24
 800f306:	42ba      	cmp	r2, r7
 800f308:	bf08      	it	eq
 800f30a:	f043 0301 	orreq.w	r3, r3, #1
 800f30e:	3718      	adds	r7, #24
 800f310:	42ba      	cmp	r2, r7
 800f312:	bf08      	it	eq
 800f314:	f043 0301 	orreq.w	r3, r3, #1
 800f318:	3718      	adds	r7, #24
 800f31a:	42ba      	cmp	r2, r7
 800f31c:	bf08      	it	eq
 800f31e:	f043 0301 	orreq.w	r3, r3, #1
 800f322:	3718      	adds	r7, #24
 800f324:	42ba      	cmp	r2, r7
 800f326:	bf08      	it	eq
 800f328:	f043 0301 	orreq.w	r3, r3, #1
 800f32c:	3718      	adds	r7, #24
 800f32e:	42ba      	cmp	r2, r7
 800f330:	bf08      	it	eq
 800f332:	f043 0301 	orreq.w	r3, r3, #1
 800f336:	b91b      	cbnz	r3, 800f340 <HAL_DMA_IRQHandler+0x348>
 800f338:	4b81      	ldr	r3, [pc, #516]	; (800f540 <HAL_DMA_IRQHandler+0x548>)
 800f33a:	429a      	cmp	r2, r3
 800f33c:	f040 8162 	bne.w	800f604 <HAL_DMA_IRQHandler+0x60c>
 800f340:	6813      	ldr	r3, [r2, #0]
 800f342:	06db      	lsls	r3, r3, #27
 800f344:	d513      	bpl.n	800f36e <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f346:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800f348:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 800f34c:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f34e:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800f350:	f000 80ae 	beq.w	800f4b0 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800f354:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800f358:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800f35a:	f000 80d3 	beq.w	800f504 <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800f35e:	031c      	lsls	r4, r3, #12
 800f360:	f140 80de 	bpl.w	800f520 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 800f364:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800f368:	b10b      	cbz	r3, 800f36e <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 800f36a:	4648      	mov	r0, r9
 800f36c:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f36e:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800f372:	2b00      	cmp	r3, #0
 800f374:	f000 80b9 	beq.w	800f4ea <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800f378:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800f37c:	07d8      	lsls	r0, r3, #31
 800f37e:	d51f      	bpl.n	800f3c0 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 800f380:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 800f384:	2104      	movs	r1, #4
 800f386:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800f38a:	6813      	ldr	r3, [r2, #0]
 800f38c:	f023 0301 	bic.w	r3, r3, #1
 800f390:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f392:	4b6c      	ldr	r3, [pc, #432]	; (800f544 <HAL_DMA_IRQHandler+0x54c>)
 800f394:	fba3 3505 	umull	r3, r5, r3, r5
 800f398:	0aad      	lsrs	r5, r5, #10
 800f39a:	e002      	b.n	800f3a2 <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800f39c:	6813      	ldr	r3, [r2, #0]
 800f39e:	07d9      	lsls	r1, r3, #31
 800f3a0:	d504      	bpl.n	800f3ac <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 800f3a2:	9b01      	ldr	r3, [sp, #4]
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	42ab      	cmp	r3, r5
 800f3a8:	9301      	str	r3, [sp, #4]
 800f3aa:	d9f7      	bls.n	800f39c <HAL_DMA_IRQHandler+0x3a4>
        __HAL_UNLOCK(hdma);
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800f3b2:	6813      	ldr	r3, [r2, #0]
 800f3b4:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800f3b6:	bf4c      	ite	mi
 800f3b8:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800f3ba:	2301      	movpl	r3, #1
 800f3bc:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800f3c0:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f000 8090 	beq.w	800f4ea <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 800f3ca:	4648      	mov	r0, r9
}
 800f3cc:	b003      	add	sp, #12
 800f3ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 800f3d2:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800f3d4:	6818      	ldr	r0, [r3, #0]
 800f3d6:	0740      	lsls	r0, r0, #29
 800f3d8:	d50a      	bpl.n	800f3f0 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800f3da:	6818      	ldr	r0, [r3, #0]
 800f3dc:	f020 0004 	bic.w	r0, r0, #4
 800f3e0:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f3e2:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f3e4:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 800f3e8:	f042 0201 	orr.w	r2, r2, #1
 800f3ec:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f3f0:	fa27 f20c 	lsr.w	r2, r7, ip
 800f3f4:	07d2      	lsls	r2, r2, #31
 800f3f6:	f57f ae76 	bpl.w	800f0e6 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800f3fa:	4a53      	ldr	r2, [pc, #332]	; (800f548 <HAL_DMA_IRQHandler+0x550>)
 800f3fc:	4853      	ldr	r0, [pc, #332]	; (800f54c <HAL_DMA_IRQHandler+0x554>)
 800f3fe:	4283      	cmp	r3, r0
 800f400:	bf18      	it	ne
 800f402:	4293      	cmpne	r3, r2
 800f404:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800f408:	bf0c      	ite	eq
 800f40a:	2201      	moveq	r2, #1
 800f40c:	2200      	movne	r2, #0
 800f40e:	4283      	cmp	r3, r0
 800f410:	bf08      	it	eq
 800f412:	f042 0201 	orreq.w	r2, r2, #1
 800f416:	3018      	adds	r0, #24
 800f418:	4283      	cmp	r3, r0
 800f41a:	bf08      	it	eq
 800f41c:	f042 0201 	orreq.w	r2, r2, #1
 800f420:	3018      	adds	r0, #24
 800f422:	4283      	cmp	r3, r0
 800f424:	bf08      	it	eq
 800f426:	f042 0201 	orreq.w	r2, r2, #1
 800f42a:	3018      	adds	r0, #24
 800f42c:	4283      	cmp	r3, r0
 800f42e:	bf08      	it	eq
 800f430:	f042 0201 	orreq.w	r2, r2, #1
 800f434:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800f438:	4283      	cmp	r3, r0
 800f43a:	bf08      	it	eq
 800f43c:	f042 0201 	orreq.w	r2, r2, #1
 800f440:	3018      	adds	r0, #24
 800f442:	4283      	cmp	r3, r0
 800f444:	bf08      	it	eq
 800f446:	f042 0201 	orreq.w	r2, r2, #1
 800f44a:	3018      	adds	r0, #24
 800f44c:	4283      	cmp	r3, r0
 800f44e:	bf08      	it	eq
 800f450:	f042 0201 	orreq.w	r2, r2, #1
 800f454:	3018      	adds	r0, #24
 800f456:	4283      	cmp	r3, r0
 800f458:	bf08      	it	eq
 800f45a:	f042 0201 	orreq.w	r2, r2, #1
 800f45e:	3018      	adds	r0, #24
 800f460:	4283      	cmp	r3, r0
 800f462:	bf08      	it	eq
 800f464:	f042 0201 	orreq.w	r2, r2, #1
 800f468:	3018      	adds	r0, #24
 800f46a:	4283      	cmp	r3, r0
 800f46c:	bf08      	it	eq
 800f46e:	f042 0201 	orreq.w	r2, r2, #1
 800f472:	3018      	adds	r0, #24
 800f474:	4283      	cmp	r3, r0
 800f476:	bf08      	it	eq
 800f478:	f042 0201 	orreq.w	r2, r2, #1
 800f47c:	3018      	adds	r0, #24
 800f47e:	4283      	cmp	r3, r0
 800f480:	bf08      	it	eq
 800f482:	f042 0201 	orreq.w	r2, r2, #1
 800f486:	2a00      	cmp	r2, #0
 800f488:	f47f ae20 	bne.w	800f0cc <HAL_DMA_IRQHandler+0xd4>
 800f48c:	2e00      	cmp	r6, #0
 800f48e:	f47f ae1d 	bne.w	800f0cc <HAL_DMA_IRQHandler+0xd4>
 800f492:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f494:	2204      	movs	r2, #4
 800f496:	fa02 f20c 	lsl.w	r2, r2, ip
 800f49a:	423a      	tst	r2, r7
 800f49c:	f040 8094 	bne.w	800f5c8 <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f4a0:	2210      	movs	r2, #16
 800f4a2:	fa02 fc0c 	lsl.w	ip, r2, ip
 800f4a6:	ea17 0f0c 	tst.w	r7, ip
 800f4aa:	f43f aef1 	beq.w	800f290 <HAL_DMA_IRQHandler+0x298>
 800f4ae:	e684      	b.n	800f1ba <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f4b0:	f023 0316 	bic.w	r3, r3, #22
 800f4b4:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800f4b6:	6953      	ldr	r3, [r2, #20]
 800f4b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f4bc:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f4be:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800f4c2:	b39b      	cbz	r3, 800f52c <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800f4c4:	6813      	ldr	r3, [r2, #0]
 800f4c6:	f023 0308 	bic.w	r3, r3, #8
 800f4ca:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800f4cc:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 800f4ce:	2500      	movs	r5, #0
          hdma->State = HAL_DMA_STATE_READY;
 800f4d0:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800f4d2:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800f4d6:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800f4da:	60a1      	str	r1, [r4, #8]
          __HAL_UNLOCK(hdma);
 800f4dc:	f889 5034 	strb.w	r5, [r9, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800f4e0:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f47f af70 	bne.w	800f3ca <HAL_DMA_IRQHandler+0x3d2>
}
 800f4ea:	b003      	add	sp, #12
 800f4ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	0318      	lsls	r0, r3, #12
 800f4f4:	f57f aeb7 	bpl.w	800f266 <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800f4f8:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	f47f aec3 	bne.w	800f288 <HAL_DMA_IRQHandler+0x290>
 800f502:	e6c5      	b.n	800f290 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800f504:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800f508:	f47f af2c 	bne.w	800f364 <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800f50c:	6811      	ldr	r1, [r2, #0]
 800f50e:	f021 0110 	bic.w	r1, r1, #16
 800f512:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800f514:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800f516:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800f51a:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
 800f51e:	e721      	b.n	800f364 <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 800f520:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800f524:	2b00      	cmp	r3, #0
 800f526:	f47f af20 	bne.w	800f36a <HAL_DMA_IRQHandler+0x372>
 800f52a:	e720      	b.n	800f36e <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f52c:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800f530:	2b00      	cmp	r3, #0
 800f532:	d1c7      	bne.n	800f4c4 <HAL_DMA_IRQHandler+0x4cc>
 800f534:	e7ca      	b.n	800f4cc <HAL_DMA_IRQHandler+0x4d4>
 800f536:	bf00      	nop
 800f538:	40020010 	.word	0x40020010
 800f53c:	40020028 	.word	0x40020028
 800f540:	400204b8 	.word	0x400204b8
 800f544:	1b4e81b5 	.word	0x1b4e81b5
 800f548:	40020058 	.word	0x40020058
 800f54c:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800f550:	4a4e      	ldr	r2, [pc, #312]	; (800f68c <HAL_DMA_IRQHandler+0x694>)
 800f552:	4d4f      	ldr	r5, [pc, #316]	; (800f690 <HAL_DMA_IRQHandler+0x698>)
 800f554:	42ab      	cmp	r3, r5
 800f556:	bf18      	it	ne
 800f558:	4293      	cmpne	r3, r2
 800f55a:	f105 0514 	add.w	r5, r5, #20
 800f55e:	bf0c      	ite	eq
 800f560:	2201      	moveq	r2, #1
 800f562:	2200      	movne	r2, #0
 800f564:	42ab      	cmp	r3, r5
 800f566:	bf08      	it	eq
 800f568:	f042 0201 	orreq.w	r2, r2, #1
 800f56c:	3514      	adds	r5, #20
 800f56e:	42ab      	cmp	r3, r5
 800f570:	bf08      	it	eq
 800f572:	f042 0201 	orreq.w	r2, r2, #1
 800f576:	3514      	adds	r5, #20
 800f578:	42ab      	cmp	r3, r5
 800f57a:	bf08      	it	eq
 800f57c:	f042 0201 	orreq.w	r2, r2, #1
 800f580:	3514      	adds	r5, #20
 800f582:	42ab      	cmp	r3, r5
 800f584:	bf08      	it	eq
 800f586:	f042 0201 	orreq.w	r2, r2, #1
 800f58a:	3514      	adds	r5, #20
 800f58c:	42ab      	cmp	r3, r5
 800f58e:	bf08      	it	eq
 800f590:	f042 0201 	orreq.w	r2, r2, #1
 800f594:	b912      	cbnz	r2, 800f59c <HAL_DMA_IRQHandler+0x5a4>
 800f596:	4a3f      	ldr	r2, [pc, #252]	; (800f694 <HAL_DMA_IRQHandler+0x69c>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d1a6      	bne.n	800f4ea <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800f59c:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 800f5a0:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800f5a2:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800f5a4:	f005 051f 	and.w	r5, r5, #31
 800f5a8:	40ae      	lsls	r6, r5
 800f5aa:	420e      	tst	r6, r1
 800f5ac:	d019      	beq.n	800f5e2 <HAL_DMA_IRQHandler+0x5ea>
 800f5ae:	0757      	lsls	r7, r2, #29
 800f5b0:	d517      	bpl.n	800f5e2 <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800f5b2:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800f5b4:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800f5b6:	d54b      	bpl.n	800f650 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800f5b8:	03d1      	lsls	r1, r2, #15
 800f5ba:	d44f      	bmi.n	800f65c <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f5bc:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	f47f af02 	bne.w	800f3ca <HAL_DMA_IRQHandler+0x3d2>
 800f5c6:	e790      	b.n	800f4ea <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800f5c8:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f5ca:	2210      	movs	r2, #16
 800f5cc:	fa02 fc0c 	lsl.w	ip, r2, ip
 800f5d0:	ea17 0f0c 	tst.w	r7, ip
 800f5d4:	f43f ae5c 	beq.w	800f290 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800f5d8:	681a      	ldr	r2, [r3, #0]
 800f5da:	0752      	lsls	r2, r2, #29
 800f5dc:	f57f ae58 	bpl.w	800f290 <HAL_DMA_IRQHandler+0x298>
 800f5e0:	e634      	b.n	800f24c <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800f5e2:	2602      	movs	r6, #2
 800f5e4:	40ae      	lsls	r6, r5
 800f5e6:	420e      	tst	r6, r1
 800f5e8:	d011      	beq.n	800f60e <HAL_DMA_IRQHandler+0x616>
 800f5ea:	0797      	lsls	r7, r2, #30
 800f5ec:	d50f      	bpl.n	800f60e <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800f5ee:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800f5f0:	0414      	lsls	r4, r2, #16
 800f5f2:	d539      	bpl.n	800f668 <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800f5f4:	03d0      	lsls	r0, r2, #15
 800f5f6:	d443      	bmi.n	800f680 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 800f5f8:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	f47f aee4 	bne.w	800f3ca <HAL_DMA_IRQHandler+0x3d2>
 800f602:	e772      	b.n	800f4ea <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800f604:	6813      	ldr	r3, [r2, #0]
 800f606:	079f      	lsls	r7, r3, #30
 800f608:	f57f aeb1 	bpl.w	800f36e <HAL_DMA_IRQHandler+0x376>
 800f60c:	e69b      	b.n	800f346 <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800f60e:	2608      	movs	r6, #8
 800f610:	40ae      	lsls	r6, r5
 800f612:	420e      	tst	r6, r1
 800f614:	f43f af69 	beq.w	800f4ea <HAL_DMA_IRQHandler+0x4f2>
 800f618:	0711      	lsls	r1, r2, #28
 800f61a:	f57f af66 	bpl.w	800f4ea <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f61e:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 800f620:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f622:	f022 020e 	bic.w	r2, r2, #14
 800f626:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800f628:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 800f62a:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800f62e:	fa03 f505 	lsl.w	r5, r3, r5
 800f632:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f634:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800f638:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800f63c:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800f640:	2a00      	cmp	r2, #0
 800f642:	f43f af52 	beq.w	800f4ea <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 800f646:	4648      	mov	r0, r9
}
 800f648:	b003      	add	sp, #12
 800f64a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 800f64e:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800f650:	0692      	lsls	r2, r2, #26
 800f652:	d403      	bmi.n	800f65c <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f654:	681a      	ldr	r2, [r3, #0]
 800f656:	f022 0204 	bic.w	r2, r2, #4
 800f65a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800f65c:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 800f660:	2b00      	cmp	r3, #0
 800f662:	f47f aeb2 	bne.w	800f3ca <HAL_DMA_IRQHandler+0x3d2>
 800f666:	e740      	b.n	800f4ea <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800f668:	f012 0220 	ands.w	r2, r2, #32
 800f66c:	d108      	bne.n	800f680 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f66e:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800f670:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f672:	f021 010a 	bic.w	r1, r1, #10
 800f676:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 800f678:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800f67c:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800f680:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800f684:	2b00      	cmp	r3, #0
 800f686:	f47f aea0 	bne.w	800f3ca <HAL_DMA_IRQHandler+0x3d2>
 800f68a:	e72e      	b.n	800f4ea <HAL_DMA_IRQHandler+0x4f2>
 800f68c:	58025408 	.word	0x58025408
 800f690:	5802541c 	.word	0x5802541c
 800f694:	58025494 	.word	0x58025494

0800f698 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800f698:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800f69a:	4770      	bx	lr

0800f69c <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop

0800f6a0 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d035      	beq.n	800f710 <HAL_DMA2D_Init+0x70>
{
 800f6a4:	b538      	push	{r3, r4, r5, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800f6a6:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800f6aa:	4604      	mov	r4, r0
 800f6ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f6b0:	b34b      	cbz	r3, 800f706 <HAL_DMA2D_Init+0x66>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800f6b2:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800f6b4:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800f6b6:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800f6b8:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800f6bc:	69e1      	ldr	r1, [r4, #28]
 800f6be:	681d      	ldr	r5, [r3, #0]
 800f6c0:	4814      	ldr	r0, [pc, #80]	; (800f714 <HAL_DMA2D_Init+0x74>)
 800f6c2:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800f6c4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800f6c6:	4028      	ands	r0, r5
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800f6c8:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800f6ca:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800f6cc:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800f6ce:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800f6d0:	4302      	orrs	r2, r0
 800f6d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f6d4:	4810      	ldr	r0, [pc, #64]	; (800f718 <HAL_DMA2D_Init+0x78>)
 800f6d6:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800f6d8:	4910      	ldr	r1, [pc, #64]	; (800f71c <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800f6da:	4302      	orrs	r2, r0
 800f6dc:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800f6de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f6e0:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800f6e2:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800f6e6:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800f6e8:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800f6ea:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800f6ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f6ee:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800f6f2:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800f6f4:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800f6f8:	430a      	orrs	r2, r1
 800f6fa:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800f6fc:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800f6fe:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800f700:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 800f704:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800f706:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800f70a:	f7ff ffc7 	bl	800f69c <HAL_DMA2D_MspInit>
 800f70e:	e7d0      	b.n	800f6b2 <HAL_DMA2D_Init+0x12>
     return HAL_ERROR;
 800f710:	2001      	movs	r0, #1
}
 800f712:	4770      	bx	lr
 800f714:	fff8ffbf 	.word	0xfff8ffbf
 800f718:	fffffef8 	.word	0xfffffef8
 800f71c:	ffff0000 	.word	0xffff0000

0800f720 <HAL_DMA2D_MspDeInit>:
 800f720:	4770      	bx	lr
 800f722:	bf00      	nop

0800f724 <HAL_DMA2D_DeInit>:
  if(hdma2d == NULL)
 800f724:	2800      	cmp	r0, #0
 800f726:	d06b      	beq.n	800f800 <HAL_DMA2D_DeInit+0xdc>
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800f728:	4b40      	ldr	r3, [pc, #256]	; (800f82c <HAL_DMA2D_DeInit+0x108>)
 800f72a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
{
 800f72e:	b570      	push	{r4, r5, r6, lr}
 800f730:	4605      	mov	r5, r0
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800f732:	6804      	ldr	r4, [r0, #0]
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800f734:	06d8      	lsls	r0, r3, #27
 800f736:	d508      	bpl.n	800f74a <HAL_DMA2D_DeInit+0x26>
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800f738:	6823      	ldr	r3, [r4, #0]
 800f73a:	07d9      	lsls	r1, r3, #31
 800f73c:	d418      	bmi.n	800f770 <HAL_DMA2D_DeInit+0x4c>
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800f73e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f740:	069a      	lsls	r2, r3, #26
 800f742:	d45f      	bmi.n	800f804 <HAL_DMA2D_DeInit+0xe0>
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800f744:	69e3      	ldr	r3, [r4, #28]
 800f746:	069b      	lsls	r3, r3, #26
 800f748:	d431      	bmi.n	800f7ae <HAL_DMA2D_DeInit+0x8a>
  hdma2d->Instance->CR       =    0U;
 800f74a:	2600      	movs	r6, #0
  hdma2d->Instance->IFCR     = 0x3FU;
 800f74c:	233f      	movs	r3, #63	; 0x3f
  HAL_DMA2D_MspDeInit(hdma2d);
 800f74e:	4628      	mov	r0, r5
  hdma2d->Instance->CR       =    0U;
 800f750:	6026      	str	r6, [r4, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800f752:	60a3      	str	r3, [r4, #8]
  hdma2d->Instance->FGOR     =    0U;
 800f754:	6126      	str	r6, [r4, #16]
  hdma2d->Instance->BGOR     =    0U;
 800f756:	61a6      	str	r6, [r4, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800f758:	61e6      	str	r6, [r4, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800f75a:	6266      	str	r6, [r4, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800f75c:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_DMA2D_MspDeInit(hdma2d);
 800f75e:	f7ff ffdf 	bl	800f720 <HAL_DMA2D_MspDeInit>
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800f762:	666e      	str	r6, [r5, #100]	; 0x64
  return HAL_OK;
 800f764:	4630      	mov	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800f766:	f885 6061 	strb.w	r6, [r5, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800f76a:	f885 6060 	strb.w	r6, [r5, #96]	; 0x60
}
 800f76e:	bd70      	pop	{r4, r5, r6, pc}

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800f770:	6823      	ldr	r3, [r4, #0]
 800f772:	f023 0305 	bic.w	r3, r3, #5
 800f776:	f043 0304 	orr.w	r3, r3, #4
 800f77a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f77c:	f7fe f94c 	bl	800da18 <HAL_GetTick>
 800f780:	4606      	mov	r6, r0

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800f782:	e005      	b.n	800f790 <HAL_DMA2D_DeInit+0x6c>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800f784:	f7fe f948 	bl	800da18 <HAL_GetTick>
 800f788:	1b80      	subs	r0, r0, r6
 800f78a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f78e:	d82b      	bhi.n	800f7e8 <HAL_DMA2D_DeInit+0xc4>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800f790:	682c      	ldr	r4, [r5, #0]
 800f792:	6823      	ldr	r3, [r4, #0]
 800f794:	f013 0301 	ands.w	r3, r3, #1
 800f798:	d1f4      	bne.n	800f784 <HAL_DMA2D_DeInit+0x60>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800f79a:	6822      	ldr	r2, [r4, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800f79c:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800f79e:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800f7a2:	6022      	str	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800f7a4:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800f7a8:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60

  return HAL_OK;
 800f7ac:	e7cd      	b.n	800f74a <HAL_DMA2D_DeInit+0x26>
{
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800f7ae:	6823      	ldr	r3, [r4, #0]
 800f7b0:	f043 0304 	orr.w	r3, r3, #4
 800f7b4:	6023      	str	r3, [r4, #0]
    reg  = &(hdma2d->Instance->FGPFCCR);
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800f7b6:	f7fe f92f 	bl	800da18 <HAL_GetTick>
 800f7ba:	4606      	mov	r6, r0

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800f7bc:	e005      	b.n	800f7ca <HAL_DMA2D_DeInit+0xa6>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800f7be:	f7fe f92b 	bl	800da18 <HAL_GetTick>
 800f7c2:	1b80      	subs	r0, r0, r6
 800f7c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f7c8:	d80e      	bhi.n	800f7e8 <HAL_DMA2D_DeInit+0xc4>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800f7ca:	69e3      	ldr	r3, [r4, #28]
 800f7cc:	f013 0320 	ands.w	r3, r3, #32
 800f7d0:	d1f5      	bne.n	800f7be <HAL_DMA2D_DeInit+0x9a>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800f7d2:	682c      	ldr	r4, [r5, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800f7d4:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800f7d6:	6822      	ldr	r2, [r4, #0]
 800f7d8:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800f7dc:	6022      	str	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800f7de:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800f7e2:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60

  return HAL_OK;
 800f7e6:	e7b0      	b.n	800f74a <HAL_DMA2D_DeInit+0x26>
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800f7e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800f7ea:	2203      	movs	r2, #3
      __HAL_UNLOCK(hdma2d);
 800f7ec:	2100      	movs	r1, #0
            return HAL_ERROR;
 800f7ee:	2001      	movs	r0, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800f7f0:	f043 0320 	orr.w	r3, r3, #32
      __HAL_UNLOCK(hdma2d);
 800f7f4:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800f7f8:	666b      	str	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800f7fa:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
}
 800f7fe:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 800f800:	2001      	movs	r0, #1
}
 800f802:	4770      	bx	lr
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800f804:	6823      	ldr	r3, [r4, #0]
 800f806:	f043 0304 	orr.w	r3, r3, #4
 800f80a:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800f80c:	f7fe f904 	bl	800da18 <HAL_GetTick>
 800f810:	4606      	mov	r6, r0
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800f812:	e005      	b.n	800f820 <HAL_DMA2D_DeInit+0xfc>
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800f814:	f7fe f900 	bl	800da18 <HAL_GetTick>
 800f818:	1b80      	subs	r0, r0, r6
 800f81a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f81e:	d8e3      	bhi.n	800f7e8 <HAL_DMA2D_DeInit+0xc4>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800f820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f822:	f013 0320 	ands.w	r3, r3, #32
 800f826:	d1f5      	bne.n	800f814 <HAL_DMA2D_DeInit+0xf0>
 800f828:	e7d3      	b.n	800f7d2 <HAL_DMA2D_DeInit+0xae>
 800f82a:	bf00      	nop
 800f82c:	58024400 	.word	0x58024400

0800f830 <HAL_DMA2D_Start>:
{
 800f830:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 800f832:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800f836:	2c01      	cmp	r4, #1
 800f838:	d03a      	beq.n	800f8b0 <HAL_DMA2D_Start+0x80>
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800f83a:	9c03      	ldr	r4, [sp, #12]
  __HAL_LOCK(hdma2d);
 800f83c:	2501      	movs	r5, #1
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800f83e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800f842:	2302      	movs	r3, #2
  __HAL_LOCK(hdma2d);
 800f844:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800f848:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800f84c:	e9d0 3600 	ldrd	r3, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800f850:	6c5d      	ldr	r5, [r3, #68]	; 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800f852:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800f856:	f005 4c40 	and.w	ip, r5, #3221225472	; 0xc0000000
 800f85a:	ea44 040c 	orr.w	r4, r4, ip
 800f85e:	645c      	str	r4, [r3, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800f860:	63da      	str	r2, [r3, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800f862:	d00a      	beq.n	800f87a <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if(hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800f864:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 800f868:	d025      	beq.n	800f8b6 <HAL_DMA2D_Start+0x86>
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800f86a:	60d9      	str	r1, [r3, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800f86c:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800f86e:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 800f870:	f042 0201 	orr.w	r2, r2, #1
}
 800f874:	bc70      	pop	{r4, r5, r6}
  __HAL_DMA2D_ENABLE(hdma2d);
 800f876:	601a      	str	r2, [r3, #0]
}
 800f878:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800f87a:	6882      	ldr	r2, [r0, #8]
 800f87c:	b1b2      	cbz	r2, 800f8ac <HAL_DMA2D_Start+0x7c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800f87e:	2a01      	cmp	r2, #1
 800f880:	d026      	beq.n	800f8d0 <HAL_DMA2D_Start+0xa0>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800f882:	2a02      	cmp	r2, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800f884:	f401 007f 	and.w	r0, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800f888:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800f88c:	b2cc      	uxtb	r4, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800f88e:	d022      	beq.n	800f8d6 <HAL_DMA2D_Start+0xa6>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800f890:	2a03      	cmp	r2, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800f892:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800f896:	d010      	beq.n	800f8ba <HAL_DMA2D_Start+0x8a>
      tmp2 = (tmp2 >> 20U);
 800f898:	0d02      	lsrs	r2, r0, #20
      tmp3 = (tmp3 >> 12U);
 800f89a:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800f89c:	0212      	lsls	r2, r2, #8
      tmp1 = (tmp1 >> 28U);
 800f89e:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800f8a0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800f8a4:	ea42 1214 	orr.w	r2, r2, r4, lsr #4
 800f8a8:	ea42 3101 	orr.w	r1, r2, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800f8ac:	6399      	str	r1, [r3, #56]	; 0x38
 800f8ae:	e7dd      	b.n	800f86c <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 800f8b0:	2002      	movs	r0, #2
}
 800f8b2:	bc70      	pop	{r4, r5, r6}
 800f8b4:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
 800f8b6:	6159      	str	r1, [r3, #20]
 800f8b8:	e7d8      	b.n	800f86c <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 800f8ba:	0cc0      	lsrs	r0, r0, #19
      tmp3 = (tmp3 >> 11U);
 800f8bc:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800f8be:	0282      	lsls	r2, r0, #10
      tmp1 = (tmp1 >> 31U);
 800f8c0:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800f8c2:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
 800f8c6:	ea42 02d4 	orr.w	r2, r2, r4, lsr #3
 800f8ca:	ea42 31c1 	orr.w	r1, r2, r1, lsl #15
 800f8ce:	e7ed      	b.n	800f8ac <HAL_DMA2D_Start+0x7c>
      tmp = (tmp3 | tmp2 | tmp4);
 800f8d0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800f8d4:	e7ea      	b.n	800f8ac <HAL_DMA2D_Start+0x7c>
      tmp2 = (tmp2 >> 19U);
 800f8d6:	0cc1      	lsrs	r1, r0, #19
      tmp3 = (tmp3 >> 10U);
 800f8d8:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800f8da:	02c9      	lsls	r1, r1, #11
 800f8dc:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800f8e0:	ea41 01d4 	orr.w	r1, r1, r4, lsr #3
 800f8e4:	e7e2      	b.n	800f8ac <HAL_DMA2D_Start+0x7c>
 800f8e6:	bf00      	nop

0800f8e8 <HAL_DMA2D_PollForTransfer>:
{
 800f8e8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800f8ea:	2300      	movs	r3, #0
{
 800f8ec:	b082      	sub	sp, #8
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 800f8f2:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800f8f4:	6803      	ldr	r3, [r0, #0]
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	07d6      	lsls	r6, r2, #31
 800f8fa:	d40f      	bmi.n	800f91c <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800f8fc:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800f8fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f900:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800f902:	0691      	lsls	r1, r2, #26
 800f904:	d432      	bmi.n	800f96c <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_UNLOCK(hdma2d);
 800f906:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800f908:	2012      	movs	r0, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800f90a:	2101      	movs	r1, #1
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800f90c:	6098      	str	r0, [r3, #8]
  return HAL_OK;
 800f90e:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800f910:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800f914:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
}
 800f918:	b002      	add	sp, #8
 800f91a:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800f91c:	f7fe f87c 	bl	800da18 <HAL_GetTick>
 800f920:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800f922:	1c6a      	adds	r2, r5, #1
 800f924:	6823      	ldr	r3, [r4, #0]
 800f926:	d147      	bne.n	800f9b8 <HAL_DMA2D_PollForTransfer+0xd0>
 800f928:	685a      	ldr	r2, [r3, #4]
 800f92a:	0796      	lsls	r6, r2, #30
 800f92c:	d4e6      	bmi.n	800f8fc <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800f92e:	685a      	ldr	r2, [r3, #4]
 800f930:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800f932:	9a01      	ldr	r2, [sp, #4]
 800f934:	f012 0f21 	tst.w	r2, #33	; 0x21
 800f938:	d0f6      	beq.n	800f928 <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800f93a:	9a01      	ldr	r2, [sp, #4]
 800f93c:	0690      	lsls	r0, r2, #26
 800f93e:	d503      	bpl.n	800f948 <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800f940:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f942:	f042 0202 	orr.w	r2, r2, #2
 800f946:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800f948:	9a01      	ldr	r2, [sp, #4]
 800f94a:	07d1      	lsls	r1, r2, #31
 800f94c:	d503      	bpl.n	800f956 <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800f94e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f950:	f042 0201 	orr.w	r2, r2, #1
 800f954:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800f956:	2021      	movs	r0, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800f958:	6098      	str	r0, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800f95a:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 800f95c:	2200      	movs	r2, #0
        return HAL_ERROR;
 800f95e:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800f960:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 800f964:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
}
 800f968:	b002      	add	sp, #8
 800f96a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800f96c:	f7fe f854 	bl	800da18 <HAL_GetTick>
 800f970:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800f972:	1c68      	adds	r0, r5, #1
 800f974:	6823      	ldr	r3, [r4, #0]
 800f976:	d13b      	bne.n	800f9f0 <HAL_DMA2D_PollForTransfer+0x108>
 800f978:	685a      	ldr	r2, [r3, #4]
 800f97a:	06d1      	lsls	r1, r2, #27
 800f97c:	d4c3      	bmi.n	800f906 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800f97e:	685a      	ldr	r2, [r3, #4]
 800f980:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800f982:	9a01      	ldr	r2, [sp, #4]
 800f984:	f012 0f29 	tst.w	r2, #41	; 0x29
 800f988:	d0f6      	beq.n	800f978 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800f98a:	9a01      	ldr	r2, [sp, #4]
 800f98c:	0712      	lsls	r2, r2, #28
 800f98e:	d503      	bpl.n	800f998 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800f990:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f992:	f042 0204 	orr.w	r2, r2, #4
 800f996:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800f998:	9a01      	ldr	r2, [sp, #4]
 800f99a:	0696      	lsls	r6, r2, #26
 800f99c:	d503      	bpl.n	800f9a6 <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800f99e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f9a0:	f042 0202 	orr.w	r2, r2, #2
 800f9a4:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800f9a6:	9a01      	ldr	r2, [sp, #4]
 800f9a8:	07d5      	lsls	r5, r2, #31
 800f9aa:	d503      	bpl.n	800f9b4 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800f9ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f9ae:	f042 0201 	orr.w	r2, r2, #1
 800f9b2:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800f9b4:	2029      	movs	r0, #41	; 0x29
 800f9b6:	e7cf      	b.n	800f958 <HAL_DMA2D_PollForTransfer+0x70>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800f9b8:	685a      	ldr	r2, [r3, #4]
 800f9ba:	0790      	lsls	r0, r2, #30
 800f9bc:	d49e      	bmi.n	800f8fc <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800f9be:	685a      	ldr	r2, [r3, #4]
 800f9c0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800f9c2:	9a01      	ldr	r2, [sp, #4]
 800f9c4:	f012 0f21 	tst.w	r2, #33	; 0x21
 800f9c8:	d1b7      	bne.n	800f93a <HAL_DMA2D_PollForTransfer+0x52>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800f9ca:	f7fe f825 	bl	800da18 <HAL_GetTick>
 800f9ce:	1b80      	subs	r0, r0, r6
 800f9d0:	42a8      	cmp	r0, r5
 800f9d2:	d801      	bhi.n	800f9d8 <HAL_DMA2D_PollForTransfer+0xf0>
 800f9d4:	2d00      	cmp	r5, #0
 800f9d6:	d1a4      	bne.n	800f922 <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800f9d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800f9da:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 800f9dc:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800f9de:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 800f9e2:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 800f9e4:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800f9e8:	6663      	str	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800f9ea:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
          return HAL_TIMEOUT;
 800f9ee:	e793      	b.n	800f918 <HAL_DMA2D_PollForTransfer+0x30>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800f9f0:	685a      	ldr	r2, [r3, #4]
 800f9f2:	06d2      	lsls	r2, r2, #27
 800f9f4:	d487      	bmi.n	800f906 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800f9f6:	685a      	ldr	r2, [r3, #4]
 800f9f8:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800f9fa:	9a01      	ldr	r2, [sp, #4]
 800f9fc:	f012 0f29 	tst.w	r2, #41	; 0x29
 800fa00:	d1c3      	bne.n	800f98a <HAL_DMA2D_PollForTransfer+0xa2>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800fa02:	f7fe f809 	bl	800da18 <HAL_GetTick>
 800fa06:	1b80      	subs	r0, r0, r6
 800fa08:	42a8      	cmp	r0, r5
 800fa0a:	d8e5      	bhi.n	800f9d8 <HAL_DMA2D_PollForTransfer+0xf0>
 800fa0c:	2d00      	cmp	r5, #0
 800fa0e:	d1b0      	bne.n	800f972 <HAL_DMA2D_PollForTransfer+0x8a>
 800fa10:	e7e2      	b.n	800f9d8 <HAL_DMA2D_PollForTransfer+0xf0>
 800fa12:	bf00      	nop

0800fa14 <HAL_DMA2D_LineEventCallback>:
 800fa14:	4770      	bx	lr
 800fa16:	bf00      	nop

0800fa18 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop

0800fa1c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800fa1c:	6803      	ldr	r3, [r0, #0]
{
 800fa1e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800fa20:	685d      	ldr	r5, [r3, #4]
{
 800fa22:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800fa24:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800fa26:	07ea      	lsls	r2, r5, #31
 800fa28:	d501      	bpl.n	800fa2e <HAL_DMA2D_IRQHandler+0x12>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800fa2a:	05f1      	lsls	r1, r6, #23
 800fa2c:	d456      	bmi.n	800fadc <HAL_DMA2D_IRQHandler+0xc0>
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800fa2e:	06aa      	lsls	r2, r5, #26
 800fa30:	d501      	bpl.n	800fa36 <HAL_DMA2D_IRQHandler+0x1a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800fa32:	04b3      	lsls	r3, r6, #18
 800fa34:	d43b      	bmi.n	800faae <HAL_DMA2D_IRQHandler+0x92>
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800fa36:	0728      	lsls	r0, r5, #28
 800fa38:	d501      	bpl.n	800fa3e <HAL_DMA2D_IRQHandler+0x22>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800fa3a:	0531      	lsls	r1, r6, #20
 800fa3c:	d421      	bmi.n	800fa82 <HAL_DMA2D_IRQHandler+0x66>
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800fa3e:	076a      	lsls	r2, r5, #29
 800fa40:	d501      	bpl.n	800fa46 <HAL_DMA2D_IRQHandler+0x2a>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800fa42:	0573      	lsls	r3, r6, #21
 800fa44:	d472      	bmi.n	800fb2c <HAL_DMA2D_IRQHandler+0x110>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800fa46:	07a8      	lsls	r0, r5, #30
 800fa48:	d501      	bpl.n	800fa4e <HAL_DMA2D_IRQHandler+0x32>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800fa4a:	05b1      	lsls	r1, r6, #22
 800fa4c:	d404      	bmi.n	800fa58 <HAL_DMA2D_IRQHandler+0x3c>
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800fa4e:	06ea      	lsls	r2, r5, #27
 800fa50:	d501      	bpl.n	800fa56 <HAL_DMA2D_IRQHandler+0x3a>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800fa52:	04f3      	lsls	r3, r6, #19
 800fa54:	d457      	bmi.n	800fb06 <HAL_DMA2D_IRQHandler+0xea>
}
 800fa56:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800fa58:	6823      	ldr	r3, [r4, #0]
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800fa60:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800fa62:	2202      	movs	r2, #2
 800fa64:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800fa66:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800fa68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa6a:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800fa6c:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800fa6e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800fa72:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if(hdma2d->XferCpltCallback != NULL)
 800fa76:	6a23      	ldr	r3, [r4, #32]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d0e8      	beq.n	800fa4e <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	4798      	blx	r3
 800fa80:	e7e5      	b.n	800fa4e <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800fa82:	6823      	ldr	r3, [r4, #0]
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fa8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800fa8c:	2208      	movs	r2, #8
 800fa8e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800fa90:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800fa92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa94:	4313      	orrs	r3, r2
 800fa96:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800fa98:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800fa9c:	2200      	movs	r2, #0
      if(hdma2d->XferErrorCallback != NULL)
 800fa9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
 800faa0:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if(hdma2d->XferErrorCallback != NULL)
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d0ca      	beq.n	800fa3e <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
 800faa8:	4620      	mov	r0, r4
 800faaa:	4798      	blx	r3
 800faac:	e7c7      	b.n	800fa3e <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800faae:	6823      	ldr	r3, [r4, #0]
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fab6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800fab8:	2220      	movs	r2, #32
 800faba:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800fabc:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800fabe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fac0:	f043 0302 	orr.w	r3, r3, #2
 800fac4:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800fac6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800faca:	2200      	movs	r2, #0
      if(hdma2d->XferErrorCallback != NULL)
 800facc:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
 800face:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if(hdma2d->XferErrorCallback != NULL)
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d0af      	beq.n	800fa36 <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
 800fad6:	4620      	mov	r0, r4
 800fad8:	4798      	blx	r3
 800fada:	e7ac      	b.n	800fa36 <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800fadc:	681a      	ldr	r2, [r3, #0]
 800fade:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fae2:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800fae4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800fae6:	f042 0201 	orr.w	r2, r2, #1
 800faea:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800faec:	2201      	movs	r2, #1
 800faee:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800faf0:	2304      	movs	r3, #4
 800faf2:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800faf6:	2300      	movs	r3, #0
 800faf8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if(hdma2d->XferErrorCallback != NULL)
 800fafc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d095      	beq.n	800fa2e <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
 800fb02:	4798      	blx	r3
 800fb04:	e793      	b.n	800fa2e <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800fb06:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800fb08:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800fb0a:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800fb0c:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fb14:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800fb16:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800fb18:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800fb1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800fb1c:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800fb20:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800fb22:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800fb26:	f7ff ff77 	bl	800fa18 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800fb2a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800fb2c:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800fb2e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800fb30:	681a      	ldr	r2, [r3, #0]
 800fb32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb36:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800fb38:	2204      	movs	r2, #4
 800fb3a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800fb3c:	f7ff ff6a 	bl	800fa14 <HAL_DMA2D_LineEventCallback>
 800fb40:	e781      	b.n	800fa46 <HAL_DMA2D_IRQHandler+0x2a>
 800fb42:	bf00      	nop

0800fb44 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800fb44:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 800fb48:	2a01      	cmp	r2, #1
 800fb4a:	d065      	beq.n	800fc18 <HAL_DMA2D_ConfigLayer+0xd4>
 800fb4c:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800fb4e:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800fb52:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800fb54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 800fb58:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 800fb5a:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800fb5c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 800fb60:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800fb64:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800fb66:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800fb68:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800fb6a:	0512      	lsls	r2, r2, #20
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800fb6c:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800fb70:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800fb74:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800fb76:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800fb7a:	ea42 0204 	orr.w	r2, r2, r4
 800fb7e:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800fb82:	d922      	bls.n	800fbca <HAL_DMA2D_ConfigLayer+0x86>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800fb84:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800fb86:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800fb8a:	b981      	cbnz	r1, 800fbae <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800fb8c:	6818      	ldr	r0, [r3, #0]
 800fb8e:	4923      	ldr	r1, [pc, #140]	; (800fc1c <HAL_DMA2D_ConfigLayer+0xd8>)
 800fb90:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800fb92:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800fb94:	4029      	ands	r1, r5
 800fb96:	430a      	orrs	r2, r1
 800fb98:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800fb9a:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 800fb9c:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800fb9e:	2101      	movs	r1, #1
  return HAL_OK;
 800fba0:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800fba2:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800fba6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800fbaa:	bc70      	pop	{r4, r5, r6}
 800fbac:	4770      	bx	lr
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800fbae:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fbb0:	681c      	ldr	r4, [r3, #0]
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800fbb2:	d129      	bne.n	800fc08 <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fbb4:	69e5      	ldr	r5, [r4, #28]
 800fbb6:	491a      	ldr	r1, [pc, #104]	; (800fc20 <HAL_DMA2D_ConfigLayer+0xdc>)
 800fbb8:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800fbba:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800fbbc:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fbbe:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 800fbc2:	430a      	orrs	r2, r1
 800fbc4:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800fbc6:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800fbc8:	e7e8      	b.n	800fb9c <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800fbca:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800fbcc:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 800fbd0:	4322      	orrs	r2, r4
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800fbd2:	b961      	cbnz	r1, 800fbee <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800fbd4:	6818      	ldr	r0, [r3, #0]
 800fbd6:	4911      	ldr	r1, [pc, #68]	; (800fc1c <HAL_DMA2D_ConfigLayer+0xd8>)
 800fbd8:	6a46      	ldr	r6, [r0, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800fbda:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800fbdc:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800fbde:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800fbe0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800fbe4:	430a      	orrs	r2, r1
 800fbe6:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800fbe8:	6185      	str	r5, [r0, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800fbea:	6284      	str	r4, [r0, #40]	; 0x28
 800fbec:	e7d6      	b.n	800fb9c <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fbee:	681c      	ldr	r4, [r3, #0]
 800fbf0:	490a      	ldr	r1, [pc, #40]	; (800fc1c <HAL_DMA2D_ConfigLayer+0xd8>)
 800fbf2:	69e5      	ldr	r5, [r4, #28]
 800fbf4:	4029      	ands	r1, r5
 800fbf6:	430a      	orrs	r2, r1
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800fbf8:	6b41      	ldr	r1, [r0, #52]	; 0x34
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800fbfa:	6a80      	ldr	r0, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800fbfc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fc00:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800fc02:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800fc04:	6221      	str	r1, [r4, #32]
 800fc06:	e7c9      	b.n	800fb9c <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fc08:	69e5      	ldr	r5, [r4, #28]
 800fc0a:	4904      	ldr	r1, [pc, #16]	; (800fc1c <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800fc0c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fc0e:	4029      	ands	r1, r5
 800fc10:	430a      	orrs	r2, r1
 800fc12:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800fc14:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800fc16:	e7c1      	b.n	800fb9c <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 800fc18:	2002      	movs	r0, #2
}
 800fc1a:	4770      	bx	lr
 800fc1c:	00ccfff0 	.word	0x00ccfff0
 800fc20:	00c0fff0 	.word	0x00c0fff0

0800fc24 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop

0800fc28 <HAL_DSI_Init>:
  if (hdsi == NULL)
 800fc28:	2800      	cmp	r0, #0
 800fc2a:	f000 80b1 	beq.w	800fd90 <HAL_DSI_Init+0x168>
{
 800fc2e:	b570      	push	{r4, r5, r6, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800fc30:	7c43      	ldrb	r3, [r0, #17]
{
 800fc32:	b082      	sub	sp, #8
 800fc34:	4604      	mov	r4, r0
 800fc36:	460d      	mov	r5, r1
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	f000 80a6 	beq.w	800fd8a <HAL_DSI_Init+0x162>
  __HAL_DSI_REG_ENABLE(hdsi);
 800fc3e:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 800fc40:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 800fc42:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 800fc44:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800fc46:	9200      	str	r2, [sp, #0]
 800fc48:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800fc4c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800fc50:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800fc54:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800fc58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fc5c:	9300      	str	r3, [sp, #0]
 800fc5e:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800fc60:	f7fd feda 	bl	800da18 <HAL_GetTick>
 800fc64:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800fc66:	e006      	b.n	800fc76 <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800fc68:	f7fd fed6 	bl	800da18 <HAL_GetTick>
 800fc6c:	1b83      	subs	r3, r0, r6
 800fc6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fc72:	f200 8087 	bhi.w	800fd84 <HAL_DSI_Init+0x15c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800fc76:	6823      	ldr	r3, [r4, #0]
 800fc78:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800fc7c:	04d1      	lsls	r1, r2, #19
 800fc7e:	d5f3      	bpl.n	800fc68 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800fc80:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800fc84:	4943      	ldr	r1, [pc, #268]	; (800fd94 <HAL_DSI_Init+0x16c>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800fc86:	6828      	ldr	r0, [r5, #0]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800fc88:	4011      	ands	r1, r2
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800fc8a:	686a      	ldr	r2, [r5, #4]
 800fc8c:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800fc8e:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800fc92:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800fc96:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
 800fc9a:	68a8      	ldr	r0, [r5, #8]
 800fc9c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800fca0:	430a      	orrs	r2, r1
  __HAL_DSI_PLL_ENABLE(hdsi);
 800fca2:	2100      	movs	r1, #0
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800fca4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800fca8:	9101      	str	r1, [sp, #4]
 800fcaa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800fcae:	f042 0201 	orr.w	r2, r2, #1
 800fcb2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800fcb6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800fcba:	f003 0301 	and.w	r3, r3, #1
 800fcbe:	9301      	str	r3, [sp, #4]
 800fcc0:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 800fcc2:	f7fd fea9 	bl	800da18 <HAL_GetTick>
 800fcc6:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800fcc8:	e005      	b.n	800fcd6 <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800fcca:	f7fd fea5 	bl	800da18 <HAL_GetTick>
 800fcce:	1b80      	subs	r0, r0, r6
 800fcd0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800fcd4:	d856      	bhi.n	800fd84 <HAL_DSI_Init+0x15c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800fcd6:	6823      	ldr	r3, [r4, #0]
 800fcd8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800fcdc:	05d2      	lsls	r2, r2, #23
 800fcde:	d5f4      	bpl.n	800fcca <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800fce0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800fce4:	6860      	ldr	r0, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800fce6:	f041 0106 	orr.w	r1, r1, #6
 800fcea:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800fcee:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fcf2:	f021 0103 	bic.w	r1, r1, #3
 800fcf6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800fcfa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800fcfe:	4302      	orrs	r2, r0
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800fd00:	68e0      	ldr	r0, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800fd02:	f042 0201 	orr.w	r2, r2, #1
 800fd06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800fd0a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800fd0e:	f021 0103 	bic.w	r1, r1, #3
 800fd12:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800fd16:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800fd1a:	4302      	orrs	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800fd1c:	68a0      	ldr	r0, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800fd1e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800fd22:	689a      	ldr	r2, [r3, #8]
 800fd24:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800fd28:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800fd2a:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800fd2c:	6899      	ldr	r1, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800fd2e:	2a01      	cmp	r2, #1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800fd30:	ea41 0100 	orr.w	r1, r1, r0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800fd34:	6828      	ldr	r0, [r5, #0]
 800fd36:	bf38      	it	cc
 800fd38:	2201      	movcc	r2, #1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800fd3a:	6099      	str	r1, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800fd3c:	68a9      	ldr	r1, [r5, #8]
 800fd3e:	4d16      	ldr	r5, [pc, #88]	; (800fd98 <HAL_DSI_Init+0x170>)
 800fd40:	f001 0103 	and.w	r1, r1, #3
 800fd44:	fb05 f202 	mul.w	r2, r5, r2
 800fd48:	408a      	lsls	r2, r1
 800fd4a:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800fd4e:	fb01 f000 	mul.w	r0, r1, r0
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800fd52:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800fd56:	fbb2 f2f0 	udiv	r2, r2, r0
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800fd5a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800fd5e:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800fd62:	2100      	movs	r1, #0
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800fd64:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
 800fd68:	4302      	orrs	r2, r0
  return HAL_OK;
 800fd6a:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800fd6c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->State = HAL_DSI_STATE_READY;
 800fd70:	2201      	movs	r2, #1
  hdsi->Instance->IER[0U] = 0U;
 800fd72:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800fd76:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800fd7a:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800fd7c:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800fd7e:	7462      	strb	r2, [r4, #17]
}
 800fd80:	b002      	add	sp, #8
 800fd82:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800fd84:	2003      	movs	r0, #3
}
 800fd86:	b002      	add	sp, #8
 800fd88:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 800fd8a:	f7ff ff4b 	bl	800fc24 <HAL_DSI_MspInit>
 800fd8e:	e756      	b.n	800fc3e <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 800fd90:	2001      	movs	r0, #1
}
 800fd92:	4770      	bx	lr
 800fd94:	fffc8603 	.word	0xfffc8603
 800fd98:	003d0900 	.word	0x003d0900

0800fd9c <HAL_DSI_TearingEffectCallback>:
 800fd9c:	4770      	bx	lr
 800fd9e:	bf00      	nop

0800fda0 <HAL_DSI_EndOfRefreshCallback>:
 800fda0:	4770      	bx	lr
 800fda2:	bf00      	nop

0800fda4 <HAL_DSI_ErrorCallback>:
 800fda4:	4770      	bx	lr
 800fda6:	bf00      	nop

0800fda8 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800fda8:	b538      	push	{r3, r4, r5, lr}
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800fdaa:	6803      	ldr	r3, [r0, #0]
{
 800fdac:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800fdae:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800fdb2:	07d1      	lsls	r1, r2, #31
 800fdb4:	d503      	bpl.n	800fdbe <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800fdb6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800fdba:	07d2      	lsls	r2, r2, #31
 800fdbc:	d462      	bmi.n	800fe84 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800fdbe:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800fdc2:	0795      	lsls	r5, r2, #30
 800fdc4:	d503      	bpl.n	800fdce <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800fdc6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800fdca:	0790      	lsls	r0, r2, #30
 800fdcc:	d44f      	bmi.n	800fe6e <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800fdce:	69a3      	ldr	r3, [r4, #24]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d04b      	beq.n	800fe6c <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800fdd4:	6821      	ldr	r1, [r4, #0]
 800fdd6:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800fdda:	f8d1 00c4 	ldr.w	r0, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800fdde:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800fde2:	4002      	ands	r2, r0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800fde4:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800fde8:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800fdea:	402b      	ands	r3, r5
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800fdec:	b119      	cbz	r1, 800fdf6 <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800fdee:	6961      	ldr	r1, [r4, #20]
 800fdf0:	f041 0101 	orr.w	r1, r1, #1
 800fdf4:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800fdf6:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800fdfa:	d003      	beq.n	800fe04 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800fdfc:	6962      	ldr	r2, [r4, #20]
 800fdfe:	f042 0202 	orr.w	r2, r2, #2
 800fe02:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800fe04:	07d9      	lsls	r1, r3, #31
 800fe06:	d503      	bpl.n	800fe10 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800fe08:	6962      	ldr	r2, [r4, #20]
 800fe0a:	f042 0204 	orr.w	r2, r2, #4
 800fe0e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800fe10:	079a      	lsls	r2, r3, #30
 800fe12:	d503      	bpl.n	800fe1c <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800fe14:	6962      	ldr	r2, [r4, #20]
 800fe16:	f042 0208 	orr.w	r2, r2, #8
 800fe1a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800fe1c:	f013 0f0c 	tst.w	r3, #12
 800fe20:	d003      	beq.n	800fe2a <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800fe22:	6962      	ldr	r2, [r4, #20]
 800fe24:	f042 0210 	orr.w	r2, r2, #16
 800fe28:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800fe2a:	06dd      	lsls	r5, r3, #27
 800fe2c:	d503      	bpl.n	800fe36 <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800fe2e:	6962      	ldr	r2, [r4, #20]
 800fe30:	f042 0220 	orr.w	r2, r2, #32
 800fe34:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800fe36:	0698      	lsls	r0, r3, #26
 800fe38:	d503      	bpl.n	800fe42 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800fe3a:	6962      	ldr	r2, [r4, #20]
 800fe3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fe40:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800fe42:	0659      	lsls	r1, r3, #25
 800fe44:	d503      	bpl.n	800fe4e <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800fe46:	6962      	ldr	r2, [r4, #20]
 800fe48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fe4c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800fe4e:	061a      	lsls	r2, r3, #24
 800fe50:	d503      	bpl.n	800fe5a <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800fe52:	6962      	ldr	r2, [r4, #20]
 800fe54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fe58:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800fe5a:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800fe5e:	d003      	beq.n	800fe68 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800fe60:	6963      	ldr	r3, [r4, #20]
 800fe62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fe66:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800fe68:	6963      	ldr	r3, [r4, #20]
 800fe6a:	b93b      	cbnz	r3, 800fe7c <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800fe6c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800fe6e:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800fe70:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800fe72:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800fe76:	f7ff ff93 	bl	800fda0 <HAL_DSI_EndOfRefreshCallback>
 800fe7a:	e7a8      	b.n	800fdce <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 800fe7c:	4620      	mov	r0, r4
 800fe7e:	f7ff ff91 	bl	800fda4 <HAL_DSI_ErrorCallback>
}
 800fe82:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800fe84:	2201      	movs	r2, #1
 800fe86:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800fe8a:	f7ff ff87 	bl	800fd9c <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800fe8e:	6823      	ldr	r3, [r4, #0]
 800fe90:	e795      	b.n	800fdbe <HAL_DSI_IRQHandler+0x16>
 800fe92:	bf00      	nop

0800fe94 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800fe94:	7c03      	ldrb	r3, [r0, #16]
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	f000 80f8 	beq.w	801008c <HAL_DSI_ConfigVideoMode+0x1f8>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800fe9c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 800fe9e:	2201      	movs	r2, #1
 800fea0:	4684      	mov	ip, r0
{
 800fea2:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 800fea4:	7402      	strb	r2, [r0, #16]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800fea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 800fea8:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800feaa:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800feae:	68cc      	ldr	r4, [r1, #12]
  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800feb0:	4d77      	ldr	r5, [pc, #476]	; (8010090 <HAL_DSI_ConfigVideoMode+0x1fc>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800feb2:	2803      	cmp	r0, #3
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800feb4:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800feb6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800feba:	f022 0201 	bic.w	r2, r2, #1
 800febe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800fec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fec4:	f022 0203 	bic.w	r2, r2, #3
 800fec8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800feca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fecc:	ea42 0204 	orr.w	r2, r2, r4
 800fed0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800fed2:	4a70      	ldr	r2, [pc, #448]	; (8010094 <HAL_DSI_ConfigVideoMode+0x200>)
 800fed4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800fed6:	ea02 0204 	and.w	r2, r2, r4
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800feda:	690c      	ldr	r4, [r1, #16]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800fedc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800fede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fee0:	ea42 0204 	orr.w	r2, r2, r4
 800fee4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800fee6:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800fee8:	694a      	ldr	r2, [r1, #20]
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800feea:	ea04 0405 	and.w	r4, r4, r5
 800feee:	641c      	str	r4, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800fef0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800fef2:	ea44 0402 	orr.w	r4, r4, r2
 800fef6:	641c      	str	r4, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800fef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800fefa:	698c      	ldr	r4, [r1, #24]
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800fefc:	ea02 0205 	and.w	r2, r2, r5
 800ff00:	645a      	str	r2, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800ff02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff04:	ea42 0204 	orr.w	r2, r2, r4
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800ff08:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800ff0a:	645a      	str	r2, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800ff0c:	68da      	ldr	r2, [r3, #12]
 800ff0e:	f022 0203 	bic.w	r2, r2, #3
 800ff12:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800ff14:	68da      	ldr	r2, [r3, #12]
 800ff16:	ea42 0204 	orr.w	r2, r2, r4
 800ff1a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800ff1c:	695a      	ldr	r2, [r3, #20]
 800ff1e:	f022 0207 	bic.w	r2, r2, #7
 800ff22:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800ff24:	695c      	ldr	r4, [r3, #20]
 800ff26:	e9d1 5208 	ldrd	r5, r2, [r1, #32]
 800ff2a:	ea42 0205 	orr.w	r2, r2, r5
 800ff2e:	69cd      	ldr	r5, [r1, #28]
 800ff30:	ea42 0205 	orr.w	r2, r2, r5
 800ff34:	ea42 0204 	orr.w	r2, r2, r4
 800ff38:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800ff3a:	691a      	ldr	r2, [r3, #16]
 800ff3c:	f022 020f 	bic.w	r2, r2, #15
 800ff40:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800ff42:	691a      	ldr	r2, [r3, #16]
 800ff44:	ea42 0200 	orr.w	r2, r2, r0
 800ff48:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800ff4a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800ff4e:	f022 020e 	bic.w	r2, r2, #14
 800ff52:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800ff56:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800ff5a:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800ff5e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 800ff62:	d107      	bne.n	800ff74 <HAL_DSI_ConfigVideoMode+0xe0>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800ff64:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800ff66:	688c      	ldr	r4, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800ff68:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800ff6c:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800ff6e:	691a      	ldr	r2, [r3, #16]
 800ff70:	4322      	orrs	r2, r4
 800ff72:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800ff74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ff76:	4c48      	ldr	r4, [pc, #288]	; (8010098 <HAL_DSI_ConfigVideoMode+0x204>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800ff78:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800ff7a:	4022      	ands	r2, r4
 800ff7c:	649a      	str	r2, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800ff7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ff80:	4302      	orrs	r2, r0
 800ff82:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800ff84:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ff86:	4020      	ands	r0, r4
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800ff88:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800ff8a:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800ff8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800ff8e:	4843      	ldr	r0, [pc, #268]	; (801009c <HAL_DSI_ConfigVideoMode+0x208>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800ff90:	4322      	orrs	r2, r4
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800ff92:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800ff94:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800ff96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff98:	4010      	ands	r0, r2
 800ff9a:	6518      	str	r0, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800ff9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800ff9e:	4840      	ldr	r0, [pc, #256]	; (80100a0 <HAL_DSI_ConfigVideoMode+0x20c>)
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800ffa0:	4322      	orrs	r2, r4
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800ffa2:	6b4c      	ldr	r4, [r1, #52]	; 0x34
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800ffa4:	651a      	str	r2, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800ffa6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ffa8:	4002      	ands	r2, r0
 800ffaa:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800ffac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ffae:	4322      	orrs	r2, r4

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800ffb0:	6b8c      	ldr	r4, [r1, #56]	; 0x38
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800ffb2:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800ffb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ffb6:	4002      	ands	r2, r0
 800ffb8:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800ffba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ffbc:	4322      	orrs	r2, r4

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800ffbe:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800ffc0:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800ffc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ffc4:	4002      	ands	r2, r0
 800ffc6:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800ffc8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800ffca:	4a32      	ldr	r2, [pc, #200]	; (8010094 <HAL_DSI_ConfigVideoMode+0x200>)
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800ffcc:	4320      	orrs	r0, r4
 800ffce:	65d8      	str	r0, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800ffd0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800ffd2:	4002      	ands	r2, r0
 800ffd4:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800ffd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ffd8:	6c08      	ldr	r0, [r1, #64]	; 0x40

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800ffda:	6c4c      	ldr	r4, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800ffdc:	4302      	orrs	r2, r0
 800ffde:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800ffe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ffe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ffe6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800ffe8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ffea:	4320      	orrs	r0, r4

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800ffec:	6c8c      	ldr	r4, [r1, #72]	; 0x48
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800ffee:	6398      	str	r0, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800fff0:	6998      	ldr	r0, [r3, #24]
 800fff2:	f420 007f 	bic.w	r0, r0, #16711680	; 0xff0000
 800fff6:	6198      	str	r0, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800fff8:	699a      	ldr	r2, [r3, #24]
 800fffa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800fffe:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8010000:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8010002:	699a      	ldr	r2, [r3, #24]
 8010004:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8010008:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 801000a:	6998      	ldr	r0, [r3, #24]
 801000c:	4320      	orrs	r0, r4

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 801000e:	6d0c      	ldr	r4, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8010010:	6198      	str	r0, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8010012:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010014:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8010018:	6398      	str	r0, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 801001a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801001c:	4322      	orrs	r2, r4

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 801001e:	6d4c      	ldr	r4, [r1, #84]	; 0x54
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8010020:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8010022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010024:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010028:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 801002a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801002c:	4320      	orrs	r0, r4

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 801002e:	6d8c      	ldr	r4, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8010030:	6398      	str	r0, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8010032:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010034:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8010038:	6398      	str	r0, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 801003a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801003c:	4322      	orrs	r2, r4
 801003e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8010040:	6b98      	ldr	r0, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8010042:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8010044:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8010048:	6398      	str	r0, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 801004a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801004c:	4322      	orrs	r2, r4

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 801004e:	6e0c      	ldr	r4, [r1, #96]	; 0x60
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8010050:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8010052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010054:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010058:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 801005a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801005c:	4320      	orrs	r0, r4
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 801005e:	2400      	movs	r4, #0
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8010060:	e9d1 2519 	ldrd	r2, r5, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8010064:	6398      	str	r0, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8010066:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010068:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 801006c:	6398      	str	r0, [r3, #56]	; 0x38

  return HAL_OK;
 801006e:	4620      	mov	r0, r4
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8010070:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8010072:	4311      	orrs	r1, r2
 8010074:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8010076:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8010078:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 801007c:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 801007e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010080:	432a      	orrs	r2, r5
 8010082:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 8010084:	f88c 4010 	strb.w	r4, [ip, #16]
}
 8010088:	bc30      	pop	{r4, r5}
 801008a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 801008c:	2002      	movs	r0, #2
}
 801008e:	4770      	bx	lr
 8010090:	ffffe000 	.word	0xffffe000
 8010094:	ffffc000 	.word	0xffffc000
 8010098:	fffff000 	.word	0xfffff000
 801009c:	ffff8000 	.word	0xffff8000
 80100a0:	fffffc00 	.word	0xfffffc00

080100a4 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80100a4:	7c02      	ldrb	r2, [r0, #16]
{
 80100a6:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80100a8:	2a01      	cmp	r2, #1
 80100aa:	d00d      	beq.n	80100c8 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80100ac:	6802      	ldr	r2, [r0, #0]
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80100ae:	f04f 0c00 	mov.w	ip, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80100b2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80100b4:	f020 001f 	bic.w	r0, r0, #31
 80100b8:	62d0      	str	r0, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80100ba:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80100bc:	4301      	orrs	r1, r0

  return HAL_OK;
 80100be:	4660      	mov	r0, ip
  hdsi->Instance->PCR |= FlowControl;
 80100c0:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 80100c2:	f883 c010 	strb.w	ip, [r3, #16]
  return HAL_OK;
 80100c6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80100c8:	2002      	movs	r0, #2
}
 80100ca:	4770      	bx	lr

080100cc <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80100cc:	7c03      	ldrb	r3, [r0, #16]
 80100ce:	2b01      	cmp	r3, #1
 80100d0:	d021      	beq.n	8010116 <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80100d2:	6803      	ldr	r3, [r0, #0]
 80100d4:	2100      	movs	r1, #0
 80100d6:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 80100d8:	4608      	mov	r0, r1
{
 80100da:	b410      	push	{r4}
 80100dc:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 80100de:	9100      	str	r1, [sp, #0]
 80100e0:	685c      	ldr	r4, [r3, #4]
 80100e2:	f044 0401 	orr.w	r4, r4, #1
 80100e6:	605c      	str	r4, [r3, #4]
 80100e8:	685c      	ldr	r4, [r3, #4]
 80100ea:	f004 0401 	and.w	r4, r4, #1
 80100ee:	9400      	str	r4, [sp, #0]
 80100f0:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80100f2:	9101      	str	r1, [sp, #4]
 80100f4:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 80100f8:	f044 0408 	orr.w	r4, r4, #8
 80100fc:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 8010100:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 8010104:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8010106:	f003 0308 	and.w	r3, r3, #8
 801010a:	9301      	str	r3, [sp, #4]
 801010c:	9b01      	ldr	r3, [sp, #4]
}
 801010e:	b003      	add	sp, #12
 8010110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010114:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8010116:	2002      	movs	r0, #2
}
 8010118:	4770      	bx	lr
 801011a:	bf00      	nop

0801011c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 801011c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010120:	4699      	mov	r9, r3
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8010122:	7c03      	ldrb	r3, [r0, #16]
 8010124:	2b01      	cmp	r3, #1
 8010126:	d022      	beq.n	801016e <HAL_DSI_ShortWrite+0x52>
 8010128:	2301      	movs	r3, #1
 801012a:	4605      	mov	r5, r0
 801012c:	4688      	mov	r8, r1
 801012e:	4617      	mov	r7, r2
 8010130:	7403      	strb	r3, [r0, #16]
  tickstart = HAL_GetTick();
 8010132:	f7fd fc71 	bl	800da18 <HAL_GetTick>
 8010136:	4606      	mov	r6, r0
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8010138:	e006      	b.n	8010148 <HAL_DSI_ShortWrite+0x2c>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 801013a:	f7fd fc6d 	bl	800da18 <HAL_GetTick>
 801013e:	eba0 0c06 	sub.w	ip, r0, r6
 8010142:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8010146:	d810      	bhi.n	801016a <HAL_DSI_ShortWrite+0x4e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8010148:	682c      	ldr	r4, [r5, #0]
 801014a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801014c:	07db      	lsls	r3, r3, #31
 801014e:	d5f4      	bpl.n	801013a <HAL_DSI_ShortWrite+0x1e>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8010150:	ea47 2109 	orr.w	r1, r7, r9, lsl #8
 8010154:	9b08      	ldr	r3, [sp, #32]
  return HAL_OK;
 8010156:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8010158:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801015c:	ea41 1188 	orr.w	r1, r1, r8, lsl #6
 8010160:	66e1      	str	r1, [r4, #108]	; 0x6c

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8010162:	2300      	movs	r3, #0
 8010164:	742b      	strb	r3, [r5, #16]

  return status;
}
 8010166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 801016a:	2003      	movs	r0, #3
 801016c:	e7f9      	b.n	8010162 <HAL_DSI_ShortWrite+0x46>
  __HAL_LOCK(hdsi);
 801016e:	2002      	movs	r0, #2
}
 8010170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010174 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8010174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010178:	461f      	mov	r7, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 801017a:	7c03      	ldrb	r3, [r0, #16]
 801017c:	2b01      	cmp	r3, #1
 801017e:	d060      	beq.n	8010242 <HAL_DSI_LongWrite+0xce>
 8010180:	2301      	movs	r3, #1
 8010182:	4605      	mov	r5, r0
 8010184:	4688      	mov	r8, r1
 8010186:	4691      	mov	r9, r2
 8010188:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 801018a:	f7fd fc45 	bl	800da18 <HAL_GetTick>
 801018e:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8010190:	e006      	b.n	80101a0 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8010192:	f7fd fc41 	bl	800da18 <HAL_GetTick>
 8010196:	eba0 0c06 	sub.w	ip, r0, r6
 801019a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 801019e:	d84c      	bhi.n	801023a <HAL_DSI_LongWrite+0xc6>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80101a0:	682a      	ldr	r2, [r5, #0]
 80101a2:	6f54      	ldr	r4, [r2, #116]	; 0x74
 80101a4:	f014 0401 	ands.w	r4, r4, #1
 80101a8:	d0f3      	beq.n	8010192 <HAL_DSI_LongWrite+0x1e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80101aa:	2f03      	cmp	r7, #3
 80101ac:	463b      	mov	r3, r7
 80101ae:	bf28      	it	cs
 80101b0:	2303      	movcs	r3, #3

  for (count = 0U; count < nbBytes; count++)
 80101b2:	2f00      	cmp	r7, #0
 80101b4:	d048      	beq.n	8010248 <HAL_DSI_LongWrite+0xd4>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80101b6:	9909      	ldr	r1, [sp, #36]	; 0x24
  for (count = 0U; count < nbBytes; count++)
 80101b8:	2f01      	cmp	r7, #1
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80101ba:	9808      	ldr	r0, [sp, #32]
 80101bc:	7809      	ldrb	r1, [r1, #0]
 80101be:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
  for (count = 0U; count < nbBytes; count++)
 80101c2:	d909      	bls.n	80101d8 <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80101c4:	9809      	ldr	r0, [sp, #36]	; 0x24
  for (count = 0U; count < nbBytes; count++)
 80101c6:	2f02      	cmp	r7, #2
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80101c8:	7840      	ldrb	r0, [r0, #1]
 80101ca:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  for (count = 0U; count < nbBytes; count++)
 80101ce:	d903      	bls.n	80101d8 <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80101d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101d2:	7880      	ldrb	r0, [r0, #2]
 80101d4:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  }
  hdsi->Instance->GPDR = fifoword;
 80101d8:	6711      	str	r1, [r2, #112]	; 0x70

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 80101da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101dc:	4419      	add	r1, r3
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80101de:	1afb      	subs	r3, r7, r3
 80101e0:	d017      	beq.n	8010212 <HAL_DSI_LongWrite+0x9e>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80101e2:	2b04      	cmp	r3, #4
 80101e4:	461c      	mov	r4, r3
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80101e6:	7808      	ldrb	r0, [r1, #0]
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80101e8:	bf28      	it	cs
 80101ea:	2404      	movcs	r4, #4
    for (count = 0U; count < nbBytes; count++)
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	d00c      	beq.n	801020a <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80101f0:	784e      	ldrb	r6, [r1, #1]
    for (count = 0U; count < nbBytes; count++)
 80101f2:	2b02      	cmp	r3, #2
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80101f4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    for (count = 0U; count < nbBytes; count++)
 80101f8:	d007      	beq.n	801020a <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80101fa:	788e      	ldrb	r6, [r1, #2]
    for (count = 0U; count < nbBytes; count++)
 80101fc:	2b03      	cmp	r3, #3
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80101fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    for (count = 0U; count < nbBytes; count++)
 8010202:	d902      	bls.n	801020a <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8010204:	78ce      	ldrb	r6, [r1, #3]
 8010206:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
  while (uicounter != 0U)
 801020a:	1b1b      	subs	r3, r3, r4
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 801020c:	4421      	add	r1, r4
    hdsi->Instance->GPDR = fifoword;
 801020e:	6710      	str	r0, [r2, #112]	; 0x70
  while (uicounter != 0U)
 8010210:	d1e7      	bne.n	80101e2 <HAL_DSI_LongWrite+0x6e>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8010212:	3701      	adds	r7, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8010214:	ea49 1888 	orr.w	r8, r9, r8, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8010218:	2300      	movs	r3, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 801021a:	ea4f 2907 	mov.w	r9, r7, lsl #8

  return HAL_OK;
 801021e:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8010220:	464f      	mov	r7, r9
 8010222:	fa1f f989 	uxth.w	r9, r9
 8010226:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
 801022a:	ea48 0809 	orr.w	r8, r8, r9
 801022e:	ea48 0707 	orr.w	r7, r8, r7
 8010232:	66d7      	str	r7, [r2, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8010234:	742b      	strb	r3, [r5, #16]
}
 8010236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 801023a:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 801023c:	742c      	strb	r4, [r5, #16]
}
 801023e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hdsi);
 8010242:	2002      	movs	r0, #2
}
 8010244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hdsi->Instance->GPDR = fifoword;
 8010248:	9b08      	ldr	r3, [sp, #32]
 801024a:	6713      	str	r3, [r2, #112]	; 0x70
  while (uicounter != 0U)
 801024c:	e7e1      	b.n	8010212 <HAL_DSI_LongWrite+0x9e>
 801024e:	bf00      	nop

08010250 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8010250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010254:	461c      	mov	r4, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8010256:	7c03      	ldrb	r3, [r0, #16]
{
 8010258:	f8dd 9020 	ldr.w	r9, [sp, #32]
  __HAL_LOCK(hdsi);
 801025c:	2b01      	cmp	r3, #1
 801025e:	f000 808a 	beq.w	8010376 <HAL_DSI_Read+0x126>
 8010262:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8010264:	2c02      	cmp	r4, #2
 8010266:	4605      	mov	r5, r0
 8010268:	460f      	mov	r7, r1
 801026a:	4616      	mov	r6, r2
  __HAL_LOCK(hdsi);
 801026c:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 801026e:	d810      	bhi.n	8010292 <HAL_DSI_Read+0x42>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8010270:	f1b9 0f06 	cmp.w	r9, #6
 8010274:	d02c      	beq.n	80102d0 <HAL_DSI_Read+0x80>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8010276:	f1b9 0f04 	cmp.w	r9, #4
 801027a:	d068      	beq.n	801034e <HAL_DSI_Read+0xfe>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 801027c:	f1b9 0f14 	cmp.w	r9, #20
 8010280:	d07c      	beq.n	801037c <HAL_DSI_Read+0x12c>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8010282:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 8010286:	d068      	beq.n	801035a <HAL_DSI_Read+0x10a>
      __HAL_UNLOCK(hdsi);
 8010288:	2300      	movs	r3, #0
      return HAL_ERROR;
 801028a:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 801028c:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 801028e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  tickstart = HAL_GetTick();
 8010292:	f7fd fbc1 	bl	800da18 <HAL_GetTick>
 8010296:	4680      	mov	r8, r0
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8010298:	e006      	b.n	80102a8 <HAL_DSI_Read+0x58>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 801029a:	f7fd fbbd 	bl	800da18 <HAL_GetTick>
 801029e:	eba0 0008 	sub.w	r0, r0, r8
 80102a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80102a6:	d8ef      	bhi.n	8010288 <HAL_DSI_Read+0x38>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80102a8:	682b      	ldr	r3, [r5, #0]
 80102aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80102ac:	07d1      	lsls	r1, r2, #31
 80102ae:	d5f4      	bpl.n	801029a <HAL_DSI_Read+0x4a>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80102b0:	0222      	lsls	r2, r4, #8
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80102b2:	f1b9 0f06 	cmp.w	r9, #6
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80102b6:	ea4f 2104 	mov.w	r1, r4, lsl #8
 80102ba:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80102be:	b289      	uxth	r1, r1
 80102c0:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 80102c4:	ea42 0201 	orr.w	r2, r2, r1
 80102c8:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80102cc:	66da      	str	r2, [r3, #108]	; 0x6c
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80102ce:	d1d2      	bne.n	8010276 <HAL_DSI_Read+0x26>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80102d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 80102d2:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80102d4:	021b      	lsls	r3, r3, #8
 80102d6:	ea43 1787 	orr.w	r7, r3, r7, lsl #6
 80102da:	f047 0706 	orr.w	r7, r7, #6
 80102de:	66d7      	str	r7, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80102e0:	f7fd fb9a 	bl	800da18 <HAL_GetTick>
 80102e4:	4607      	mov	r7, r0
  while (((int32_t)(datasize)) > 0)
 80102e6:	e005      	b.n	80102f4 <HAL_DSI_Read+0xa4>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80102e8:	f7fd fb96 	bl	800da18 <HAL_GetTick>
 80102ec:	1bc1      	subs	r1, r0, r7
 80102ee:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80102f2:	d822      	bhi.n	801033a <HAL_DSI_Read+0xea>
  while (((int32_t)(datasize)) > 0)
 80102f4:	2c00      	cmp	r4, #0
 80102f6:	dd25      	ble.n	8010344 <HAL_DSI_Read+0xf4>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80102f8:	682b      	ldr	r3, [r5, #0]
 80102fa:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80102fc:	06ca      	lsls	r2, r1, #27
 80102fe:	d4f3      	bmi.n	80102e8 <HAL_DSI_Read+0x98>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8010300:	2c04      	cmp	r4, #4
      fifoword = hdsi->Instance->GPDR;
 8010302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8010304:	4622      	mov	r2, r4
 8010306:	bf28      	it	cs
 8010308:	2204      	movcs	r2, #4
      for (count = 0U; count < nbbytes; count++)
 801030a:	2c01      	cmp	r4, #1
        *pdata = (uint8_t)(fifoword >> (8U * count));
 801030c:	ea4f 2113 	mov.w	r1, r3, lsr #8
 8010310:	7033      	strb	r3, [r6, #0]
 8010312:	ea4f 4013 	mov.w	r0, r3, lsr #16
 8010316:	ea4f 6313 	mov.w	r3, r3, lsr #24
      for (count = 0U; count < nbbytes; count++)
 801031a:	d006      	beq.n	801032a <HAL_DSI_Read+0xda>
 801031c:	2c02      	cmp	r4, #2
        *pdata = (uint8_t)(fifoword >> (8U * count));
 801031e:	7071      	strb	r1, [r6, #1]
      for (count = 0U; count < nbbytes; count++)
 8010320:	d003      	beq.n	801032a <HAL_DSI_Read+0xda>
 8010322:	2c03      	cmp	r4, #3
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8010324:	70b0      	strb	r0, [r6, #2]
 8010326:	bf88      	it	hi
 8010328:	70f3      	strbhi	r3, [r6, #3]
        pdata++;
 801032a:	4416      	add	r6, r2
        datasize--;
 801032c:	1aa4      	subs	r4, r4, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 801032e:	f7fd fb73 	bl	800da18 <HAL_GetTick>
 8010332:	1bc1      	subs	r1, r0, r7
 8010334:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8010338:	d9dc      	bls.n	80102f4 <HAL_DSI_Read+0xa4>
      __HAL_UNLOCK(hdsi);
 801033a:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 801033c:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 801033e:	742b      	strb	r3, [r5, #16]
}
 8010340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_UNLOCK(hdsi);
 8010344:	2300      	movs	r3, #0
  return HAL_OK;
 8010346:	4618      	mov	r0, r3
  __HAL_UNLOCK(hdsi);
 8010348:	742b      	strb	r3, [r5, #16]
}
 801034a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 801034e:	01bf      	lsls	r7, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8010350:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8010352:	f047 0704 	orr.w	r7, r7, #4
 8010356:	66df      	str	r7, [r3, #108]	; 0x6c
}
 8010358:	e7c2      	b.n	80102e0 <HAL_DSI_Read+0x90>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 801035a:	990a      	ldr	r1, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 801035c:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 801035e:	682a      	ldr	r2, [r5, #0]
 8010360:	7849      	ldrb	r1, [r1, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8010362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8010366:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010368:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 801036a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801036e:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8010372:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8010374:	e7b4      	b.n	80102e0 <HAL_DSI_Read+0x90>
  __HAL_LOCK(hdsi);
 8010376:	2002      	movs	r0, #2
}
 8010378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 801037c:	990a      	ldr	r1, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 801037e:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8010380:	682a      	ldr	r2, [r5, #0]
 8010382:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8010384:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8010388:	f043 0314 	orr.w	r3, r3, #20
 801038c:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 801038e:	e7a7      	b.n	80102e0 <HAL_DSI_Read+0x90>

08010390 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8010390:	4603      	mov	r3, r0
  if (hexti == NULL)
  {
    return HAL_ERROR;
  }

  switch (CallbackID)
 8010392:	b919      	cbnz	r1, 801039c <HAL_EXTI_RegisterCallback+0xc>
 8010394:	b110      	cbz	r0, 801039c <HAL_EXTI_RegisterCallback+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8010396:	2000      	movs	r0, #0
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8010398:	605a      	str	r2, [r3, #4]
      break;
 801039a:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 801039c:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 801039e:	4770      	bx	lr

080103a0 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80103a0:	4603      	mov	r3, r0
 80103a2:	b110      	cbz	r0, 80103aa <HAL_EXTI_GetHandle+0xa>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 80103a4:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 80103a6:	6019      	str	r1, [r3, #0]
    return HAL_OK;
 80103a8:	4770      	bx	lr
    return HAL_ERROR;
 80103aa:	2001      	movs	r0, #1
  }
}
 80103ac:	4770      	bx	lr
 80103ae:	bf00      	nop

080103b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80103b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80103b4:	680d      	ldr	r5, [r1, #0]
{
 80103b6:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80103b8:	2d00      	cmp	r5, #0
 80103ba:	f000 80eb 	beq.w	8010594 <HAL_GPIO_Init+0x1e4>
 80103be:	f04f 0c00 	mov.w	ip, #0
 80103c2:	f8df 8268 	ldr.w	r8, [pc, #616]	; 801062c <HAL_GPIO_Init+0x27c>
  uint32_t position = 0x00U;
 80103c6:	4663      	mov	r3, ip
 80103c8:	e025      	b.n	8010416 <HAL_GPIO_Init+0x66>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80103ca:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80103ce:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80103d2:	f04f 0a0f 	mov.w	sl, #15
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80103d6:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80103da:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80103de:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80103e2:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80103e6:	fa0a fa09 	lsl.w	sl, sl, r9
        temp = GPIOx->AFR[position >> 3U];
 80103ea:	f8de 2020 	ldr.w	r2, [lr, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80103ee:	ea22 0a0a 	bic.w	sl, r2, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80103f2:	690a      	ldr	r2, [r1, #16]
 80103f4:	fa02 f209 	lsl.w	r2, r2, r9
 80103f8:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 80103fc:	f8ce 2020 	str.w	r2, [lr, #32]
      temp = GPIOx->MODER;
 8010400:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8010402:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010404:	4326      	orrs	r6, r4
      GPIOx->MODER = temp;
 8010406:	6006      	str	r6, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8010408:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801040a:	f10c 0c02 	add.w	ip, ip, #2
 801040e:	fa35 f203 	lsrs.w	r2, r5, r3
 8010412:	f000 80bf 	beq.w	8010594 <HAL_GPIO_Init+0x1e4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8010416:	2201      	movs	r2, #1
 8010418:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 801041a:	ea12 0e05 	ands.w	lr, r2, r5
 801041e:	d0f3      	beq.n	8010408 <HAL_GPIO_Init+0x58>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010420:	684c      	ldr	r4, [r1, #4]
 8010422:	f024 0910 	bic.w	r9, r4, #16
 8010426:	f109 36ff 	add.w	r6, r9, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801042a:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801042c:	f04f 0603 	mov.w	r6, #3
 8010430:	fa06 f60c 	lsl.w	r6, r6, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010434:	f200 80b1 	bhi.w	801059a <HAL_GPIO_Init+0x1ea>
        temp = GPIOx->OSPEEDR;
 8010438:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801043c:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801043e:	ea2a 0a06 	bic.w	sl, sl, r6
 8010442:	43f6      	mvns	r6, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010444:	fa07 fb0c 	lsl.w	fp, r7, ip
 8010448:	ea4b 0a0a 	orr.w	sl, fp, sl
        GPIOx->OSPEEDR = temp;
 801044c:	f8c0 a008 	str.w	sl, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8010450:	f3c4 1a00 	ubfx	sl, r4, #4, #1
        temp = GPIOx->OTYPER;
 8010454:	f8d0 b004 	ldr.w	fp, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8010458:	fa0a fa03 	lsl.w	sl, sl, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801045c:	ea2b 0202 	bic.w	r2, fp, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8010460:	ea4a 0202 	orr.w	r2, sl, r2
        GPIOx->OTYPER = temp;
 8010464:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8010466:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010468:	f1b9 0f02 	cmp.w	r9, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801046c:	ea02 0a06 	and.w	sl, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010470:	688a      	ldr	r2, [r1, #8]
 8010472:	fa02 f20c 	lsl.w	r2, r2, ip
 8010476:	ea42 020a 	orr.w	r2, r2, sl
      GPIOx->PUPDR = temp;
 801047a:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801047c:	d0a5      	beq.n	80103ca <HAL_GPIO_Init+0x1a>
      temp = GPIOx->MODER;
 801047e:	6802      	ldr	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8010480:	00e7      	lsls	r7, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8010482:	ea02 0206 	and.w	r2, r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010486:	f004 0603 	and.w	r6, r4, #3
 801048a:	fa06 f60c 	lsl.w	r6, r6, ip
 801048e:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->MODER = temp;
 8010492:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8010494:	d5b8      	bpl.n	8010408 <HAL_GPIO_Init+0x58>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010496:	4e5e      	ldr	r6, [pc, #376]	; (8010610 <HAL_GPIO_Init+0x260>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8010498:	f003 0903 	and.w	r9, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801049c:	4f5d      	ldr	r7, [pc, #372]	; (8010614 <HAL_GPIO_Init+0x264>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801049e:	f8d6 20f4 	ldr.w	r2, [r6, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80104a2:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80104a6:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80104a8:	f042 0202 	orr.w	r2, r2, #2
 80104ac:	f8c6 20f4 	str.w	r2, [r6, #244]	; 0xf4
 80104b0:	f8d6 20f4 	ldr.w	r2, [r6, #244]	; 0xf4
 80104b4:	f023 0603 	bic.w	r6, r3, #3
 80104b8:	f002 0202 	and.w	r2, r2, #2
 80104bc:	4446      	add	r6, r8
 80104be:	9201      	str	r2, [sp, #4]
 80104c0:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80104c2:	f04f 020f 	mov.w	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 80104c6:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80104ca:	fa02 f209 	lsl.w	r2, r2, r9
 80104ce:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80104d2:	d026      	beq.n	8010522 <HAL_GPIO_Init+0x172>
 80104d4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80104d8:	42b8      	cmp	r0, r7
 80104da:	d067      	beq.n	80105ac <HAL_GPIO_Init+0x1fc>
 80104dc:	4f4e      	ldr	r7, [pc, #312]	; (8010618 <HAL_GPIO_Init+0x268>)
 80104de:	42b8      	cmp	r0, r7
 80104e0:	d06b      	beq.n	80105ba <HAL_GPIO_Init+0x20a>
 80104e2:	4f4e      	ldr	r7, [pc, #312]	; (801061c <HAL_GPIO_Init+0x26c>)
 80104e4:	42b8      	cmp	r0, r7
 80104e6:	d05a      	beq.n	801059e <HAL_GPIO_Init+0x1ee>
 80104e8:	4f4d      	ldr	r7, [pc, #308]	; (8010620 <HAL_GPIO_Init+0x270>)
 80104ea:	42b8      	cmp	r0, r7
 80104ec:	d073      	beq.n	80105d6 <HAL_GPIO_Init+0x226>
 80104ee:	4f4d      	ldr	r7, [pc, #308]	; (8010624 <HAL_GPIO_Init+0x274>)
 80104f0:	42b8      	cmp	r0, r7
 80104f2:	d077      	beq.n	80105e4 <HAL_GPIO_Init+0x234>
 80104f4:	4f4c      	ldr	r7, [pc, #304]	; (8010628 <HAL_GPIO_Init+0x278>)
 80104f6:	42b8      	cmp	r0, r7
 80104f8:	d066      	beq.n	80105c8 <HAL_GPIO_Init+0x218>
 80104fa:	f8df a134 	ldr.w	sl, [pc, #308]	; 8010630 <HAL_GPIO_Init+0x280>
 80104fe:	4550      	cmp	r0, sl
 8010500:	d077      	beq.n	80105f2 <HAL_GPIO_Init+0x242>
 8010502:	f8df a130 	ldr.w	sl, [pc, #304]	; 8010634 <HAL_GPIO_Init+0x284>
 8010506:	4550      	cmp	r0, sl
 8010508:	d07a      	beq.n	8010600 <HAL_GPIO_Init+0x250>
 801050a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8010638 <HAL_GPIO_Init+0x288>
 801050e:	4550      	cmp	r0, sl
 8010510:	bf0c      	ite	eq
 8010512:	f04f 0a09 	moveq.w	sl, #9
 8010516:	f04f 0a0a 	movne.w	sl, #10
 801051a:	fa0a f909 	lsl.w	r9, sl, r9
 801051e:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010522:	60b2      	str	r2, [r6, #8]
        temp = EXTI_CurrentCPU->IMR1;
 8010524:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010528:	03e6      	lsls	r6, r4, #15
        temp &= ~(iocurrent);
 801052a:	ea6f 090e 	mvn.w	r9, lr
        temp = EXTI_CurrentCPU->IMR1;
 801052e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        EXTI_CurrentCPU->IMR1 = temp;
 8010532:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
    position++;
 8010536:	f103 0301 	add.w	r3, r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801053a:	f10c 0c02 	add.w	ip, ip, #2
        temp &= ~(iocurrent);
 801053e:	bf54      	ite	pl
 8010540:	ea09 0202 	andpl.w	r2, r9, r2
          temp |= iocurrent;
 8010544:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8010548:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801054c:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 801054e:	f8d6 6084 	ldr.w	r6, [r6, #132]	; 0x84
        EXTI_CurrentCPU->EMR1 = temp;
 8010552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8010556:	bf54      	ite	pl
 8010558:	ea09 0606 	andpl.w	r6, r9, r6
          temp |= iocurrent;
 801055c:	ea4e 0606 	orrmi.w	r6, lr, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010560:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 8010562:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI->RTSR1;
 8010566:	6816      	ldr	r6, [r2, #0]
        EXTI->RTSR1 = temp;
 8010568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 801056c:	bf54      	ite	pl
 801056e:	ea09 0606 	andpl.w	r6, r9, r6
          temp |= iocurrent;
 8010572:	ea4e 0606 	orrmi.w	r6, lr, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010576:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 8010578:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 801057c:	6016      	str	r6, [r2, #0]
        temp = EXTI->FTSR1;
 801057e:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 8010580:	bf54      	ite	pl
 8010582:	ea09 0202 	andpl.w	r2, r9, r2
          temp |= iocurrent;
 8010586:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->FTSR1 = temp;
 801058a:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801058c:	fa35 f203 	lsrs.w	r2, r5, r3
 8010590:	f47f af41 	bne.w	8010416 <HAL_GPIO_Init+0x66>
  }
}
 8010594:	b003      	add	sp, #12
 8010596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801059a:	43f6      	mvns	r6, r6
 801059c:	e763      	b.n	8010466 <HAL_GPIO_Init+0xb6>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801059e:	f04f 0a03 	mov.w	sl, #3
 80105a2:	fa0a f909 	lsl.w	r9, sl, r9
 80105a6:	ea42 0209 	orr.w	r2, r2, r9
 80105aa:	e7ba      	b.n	8010522 <HAL_GPIO_Init+0x172>
 80105ac:	f04f 0a01 	mov.w	sl, #1
 80105b0:	fa0a f909 	lsl.w	r9, sl, r9
 80105b4:	ea42 0209 	orr.w	r2, r2, r9
 80105b8:	e7b3      	b.n	8010522 <HAL_GPIO_Init+0x172>
 80105ba:	f04f 0a02 	mov.w	sl, #2
 80105be:	fa0a f909 	lsl.w	r9, sl, r9
 80105c2:	ea42 0209 	orr.w	r2, r2, r9
 80105c6:	e7ac      	b.n	8010522 <HAL_GPIO_Init+0x172>
 80105c8:	f04f 0a06 	mov.w	sl, #6
 80105cc:	fa0a f909 	lsl.w	r9, sl, r9
 80105d0:	ea42 0209 	orr.w	r2, r2, r9
 80105d4:	e7a5      	b.n	8010522 <HAL_GPIO_Init+0x172>
 80105d6:	f04f 0a04 	mov.w	sl, #4
 80105da:	fa0a f909 	lsl.w	r9, sl, r9
 80105de:	ea42 0209 	orr.w	r2, r2, r9
 80105e2:	e79e      	b.n	8010522 <HAL_GPIO_Init+0x172>
 80105e4:	f04f 0a05 	mov.w	sl, #5
 80105e8:	fa0a f909 	lsl.w	r9, sl, r9
 80105ec:	ea42 0209 	orr.w	r2, r2, r9
 80105f0:	e797      	b.n	8010522 <HAL_GPIO_Init+0x172>
 80105f2:	f04f 0a07 	mov.w	sl, #7
 80105f6:	fa0a f909 	lsl.w	r9, sl, r9
 80105fa:	ea42 0209 	orr.w	r2, r2, r9
 80105fe:	e790      	b.n	8010522 <HAL_GPIO_Init+0x172>
 8010600:	f04f 0a08 	mov.w	sl, #8
 8010604:	fa0a f909 	lsl.w	r9, sl, r9
 8010608:	ea42 0209 	orr.w	r2, r2, r9
 801060c:	e789      	b.n	8010522 <HAL_GPIO_Init+0x172>
 801060e:	bf00      	nop
 8010610:	58024400 	.word	0x58024400
 8010614:	58020000 	.word	0x58020000
 8010618:	58020800 	.word	0x58020800
 801061c:	58020c00 	.word	0x58020c00
 8010620:	58021000 	.word	0x58021000
 8010624:	58021400 	.word	0x58021400
 8010628:	58021800 	.word	0x58021800
 801062c:	58000400 	.word	0x58000400
 8010630:	58021c00 	.word	0x58021c00
 8010634:	58022000 	.word	0x58022000
 8010638:	58022400 	.word	0x58022400

0801063c <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 801063c:	2900      	cmp	r1, #0
 801063e:	f000 80a8 	beq.w	8010792 <HAL_GPIO_DeInit+0x156>
  uint32_t position = 0x00U;
 8010642:	2300      	movs	r3, #0
{
 8010644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010648:	f8df 9168 	ldr.w	r9, [pc, #360]	; 80107b4 <HAL_GPIO_DeInit+0x178>
 801064c:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 801064e:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80107b8 <HAL_GPIO_DeInit+0x17c>
 8010652:	f8df a168 	ldr.w	sl, [pc, #360]	; 80107bc <HAL_GPIO_DeInit+0x180>
 8010656:	f8df b168 	ldr.w	fp, [pc, #360]	; 80107c0 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
 801065a:	f04f 0e01 	mov.w	lr, #1
 801065e:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
 8010662:	ea12 0c01 	ands.w	ip, r2, r1
 8010666:	d06f      	beq.n	8010748 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8010668:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 801066c:	f003 0403 	and.w	r4, r3, #3
 8010670:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8010672:	4540      	cmp	r0, r8
 8010674:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8010676:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 801067a:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 801067c:	fa06 f604 	lsl.w	r6, r6, r4
 8010680:	ea07 0706 	and.w	r7, r7, r6
 8010684:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8010686:	d021      	beq.n	80106cc <HAL_GPIO_DeInit+0x90>
 8010688:	4550      	cmp	r0, sl
 801068a:	d066      	beq.n	801075a <HAL_GPIO_DeInit+0x11e>
 801068c:	4558      	cmp	r0, fp
 801068e:	d067      	beq.n	8010760 <HAL_GPIO_DeInit+0x124>
 8010690:	4f43      	ldr	r7, [pc, #268]	; (80107a0 <HAL_GPIO_DeInit+0x164>)
 8010692:	42b8      	cmp	r0, r7
 8010694:	d06e      	beq.n	8010774 <HAL_GPIO_DeInit+0x138>
 8010696:	4f43      	ldr	r7, [pc, #268]	; (80107a4 <HAL_GPIO_DeInit+0x168>)
 8010698:	42b8      	cmp	r0, r7
 801069a:	d070      	beq.n	801077e <HAL_GPIO_DeInit+0x142>
 801069c:	4f42      	ldr	r7, [pc, #264]	; (80107a8 <HAL_GPIO_DeInit+0x16c>)
 801069e:	42b8      	cmp	r0, r7
 80106a0:	d063      	beq.n	801076a <HAL_GPIO_DeInit+0x12e>
 80106a2:	4f42      	ldr	r7, [pc, #264]	; (80107ac <HAL_GPIO_DeInit+0x170>)
 80106a4:	42b8      	cmp	r0, r7
 80106a6:	d056      	beq.n	8010756 <HAL_GPIO_DeInit+0x11a>
 80106a8:	4f41      	ldr	r7, [pc, #260]	; (80107b0 <HAL_GPIO_DeInit+0x174>)
 80106aa:	42b8      	cmp	r0, r7
 80106ac:	d072      	beq.n	8010794 <HAL_GPIO_DeInit+0x158>
 80106ae:	f8df e114 	ldr.w	lr, [pc, #276]	; 80107c4 <HAL_GPIO_DeInit+0x188>
 80106b2:	4570      	cmp	r0, lr
 80106b4:	d068      	beq.n	8010788 <HAL_GPIO_DeInit+0x14c>
 80106b6:	f8df e110 	ldr.w	lr, [pc, #272]	; 80107c8 <HAL_GPIO_DeInit+0x18c>
 80106ba:	4570      	cmp	r0, lr
 80106bc:	bf14      	ite	ne
 80106be:	f04f 0e0a 	movne.w	lr, #10
 80106c2:	f04f 0e09 	moveq.w	lr, #9
 80106c6:	fa0e f404 	lsl.w	r4, lr, r4
 80106ca:	e000      	b.n	80106ce <HAL_GPIO_DeInit+0x92>
 80106cc:	2400      	movs	r4, #0
 80106ce:	9f01      	ldr	r7, [sp, #4]
 80106d0:	42a7      	cmp	r7, r4
 80106d2:	d119      	bne.n	8010708 <HAL_GPIO_DeInit+0xcc>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80106d4:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80106d8:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 80106dc:	ea27 070c 	bic.w	r7, r7, ip
 80106e0:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80106e4:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 80106e8:	ea27 070c 	bic.w	r7, r7, ip
 80106ec:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80106f0:	6827      	ldr	r7, [r4, #0]
 80106f2:	ea27 070c 	bic.w	r7, r7, ip
 80106f6:	6027      	str	r7, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80106f8:	6867      	ldr	r7, [r4, #4]
 80106fa:	ea27 070c 	bic.w	r7, r7, ip
 80106fe:	6067      	str	r7, [r4, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8010700:	68ac      	ldr	r4, [r5, #8]
 8010702:	ea24 0606 	bic.w	r6, r4, r6
 8010706:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8010708:	2503      	movs	r5, #3
 801070a:	005c      	lsls	r4, r3, #1

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 801070c:	f003 0707 	and.w	r7, r3, #7
 8010710:	260f      	movs	r6, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8010712:	fa05 f404 	lsl.w	r4, r5, r4
 8010716:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8010718:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 801071a:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 801071c:	fa06 f707 	lsl.w	r7, r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8010720:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8010722:	08dd      	lsrs	r5, r3, #3
 8010724:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8010728:	6a2e      	ldr	r6, [r5, #32]
 801072a:	ea26 0607 	bic.w	r6, r6, r7
 801072e:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010730:	68c5      	ldr	r5, [r0, #12]
 8010732:	ea25 0504 	bic.w	r5, r5, r4
 8010736:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8010738:	6845      	ldr	r5, [r0, #4]
 801073a:	ea25 0202 	bic.w	r2, r5, r2
 801073e:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8010740:	6882      	ldr	r2, [r0, #8]
 8010742:	ea22 0404 	bic.w	r4, r2, r4
 8010746:	6084      	str	r4, [r0, #8]
    }

    position++;
 8010748:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 801074a:	fa31 f203 	lsrs.w	r2, r1, r3
 801074e:	d184      	bne.n	801065a <HAL_GPIO_DeInit+0x1e>
  }
}
 8010750:	b003      	add	sp, #12
 8010752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8010756:	f04f 0e06 	mov.w	lr, #6
 801075a:	fa0e f404 	lsl.w	r4, lr, r4
 801075e:	e7b6      	b.n	80106ce <HAL_GPIO_DeInit+0x92>
 8010760:	f04f 0e02 	mov.w	lr, #2
 8010764:	fa0e f404 	lsl.w	r4, lr, r4
 8010768:	e7b1      	b.n	80106ce <HAL_GPIO_DeInit+0x92>
 801076a:	f04f 0e05 	mov.w	lr, #5
 801076e:	fa0e f404 	lsl.w	r4, lr, r4
 8010772:	e7ac      	b.n	80106ce <HAL_GPIO_DeInit+0x92>
 8010774:	f04f 0e03 	mov.w	lr, #3
 8010778:	fa0e f404 	lsl.w	r4, lr, r4
 801077c:	e7a7      	b.n	80106ce <HAL_GPIO_DeInit+0x92>
 801077e:	f04f 0e04 	mov.w	lr, #4
 8010782:	fa0e f404 	lsl.w	r4, lr, r4
 8010786:	e7a2      	b.n	80106ce <HAL_GPIO_DeInit+0x92>
 8010788:	f04f 0e08 	mov.w	lr, #8
 801078c:	fa0e f404 	lsl.w	r4, lr, r4
 8010790:	e79d      	b.n	80106ce <HAL_GPIO_DeInit+0x92>
 8010792:	4770      	bx	lr
 8010794:	f04f 0e07 	mov.w	lr, #7
 8010798:	fa0e f404 	lsl.w	r4, lr, r4
 801079c:	e797      	b.n	80106ce <HAL_GPIO_DeInit+0x92>
 801079e:	bf00      	nop
 80107a0:	58020c00 	.word	0x58020c00
 80107a4:	58021000 	.word	0x58021000
 80107a8:	58021400 	.word	0x58021400
 80107ac:	58021800 	.word	0x58021800
 80107b0:	58021c00 	.word	0x58021c00
 80107b4:	58000400 	.word	0x58000400
 80107b8:	58020000 	.word	0x58020000
 80107bc:	58020400 	.word	0x58020400
 80107c0:	58020800 	.word	0x58020800
 80107c4:	58022000 	.word	0x58022000
 80107c8:	58022400 	.word	0x58022400

080107cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80107cc:	6903      	ldr	r3, [r0, #16]
 80107ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80107d0:	bf14      	ite	ne
 80107d2:	2001      	movne	r0, #1
 80107d4:	2000      	moveq	r0, #0
 80107d6:	4770      	bx	lr

080107d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80107d8:	b902      	cbnz	r2, 80107dc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80107da:	0409      	lsls	r1, r1, #16
 80107dc:	6181      	str	r1, [r0, #24]
  }
}
 80107de:	4770      	bx	lr

080107e0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80107e0:	6943      	ldr	r3, [r0, #20]
 80107e2:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80107e6:	bf08      	it	eq
 80107e8:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80107ea:	6181      	str	r1, [r0, #24]
  }
}
 80107ec:	4770      	bx	lr
 80107ee:	bf00      	nop

080107f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80107f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107f2:	4605      	mov	r5, r0
 80107f4:	460e      	mov	r6, r1
 80107f6:	4617      	mov	r7, r2
 80107f8:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80107fa:	682c      	ldr	r4, [r5, #0]
 80107fc:	d12c      	bne.n	8010858 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 80107fe:	69a3      	ldr	r3, [r4, #24]
 8010800:	0799      	lsls	r1, r3, #30
 8010802:	d427      	bmi.n	8010854 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010804:	69a3      	ldr	r3, [r4, #24]
 8010806:	06da      	lsls	r2, r3, #27
 8010808:	d5f9      	bpl.n	80107fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801080a:	69a3      	ldr	r3, [r4, #24]
 801080c:	069a      	lsls	r2, r3, #26
 801080e:	d5fc      	bpl.n	801080a <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010810:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010812:	2210      	movs	r2, #16
 8010814:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010816:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010818:	69a3      	ldr	r3, [r4, #24]
 801081a:	079f      	lsls	r7, r3, #30
 801081c:	d501      	bpl.n	8010822 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 801081e:	2300      	movs	r3, #0
 8010820:	62a3      	str	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010822:	69a3      	ldr	r3, [r4, #24]
 8010824:	07de      	lsls	r6, r3, #31
 8010826:	d403      	bmi.n	8010830 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010828:	69a3      	ldr	r3, [r4, #24]
 801082a:	f043 0301 	orr.w	r3, r3, #1
 801082e:	61a3      	str	r3, [r4, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010830:	6863      	ldr	r3, [r4, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010832:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 8010834:	481b      	ldr	r0, [pc, #108]	; (80108a4 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 8010836:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8010838:	4003      	ands	r3, r0
      return HAL_ERROR;
 801083a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 801083c:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801083e:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010840:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010844:	f043 0304 	orr.w	r3, r3, #4
 8010848:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801084a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801084e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8010852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8010854:	2000      	movs	r0, #0
}
 8010856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010858:	69a3      	ldr	r3, [r4, #24]
 801085a:	079b      	lsls	r3, r3, #30
 801085c:	d4fa      	bmi.n	8010854 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801085e:	69a3      	ldr	r3, [r4, #24]
 8010860:	06d9      	lsls	r1, r3, #27
 8010862:	d41b      	bmi.n	801089c <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010864:	f7fd f8d8 	bl	800da18 <HAL_GetTick>
 8010868:	1bc0      	subs	r0, r0, r7
 801086a:	42b0      	cmp	r0, r6
 801086c:	d801      	bhi.n	8010872 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 801086e:	2e00      	cmp	r6, #0
 8010870:	d1c2      	bne.n	80107f8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010872:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010874:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010876:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8010878:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801087a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 801087c:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010880:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010882:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010886:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 801088a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801088c:	f7fd f8c4 	bl	800da18 <HAL_GetTick>
 8010890:	1bc0      	subs	r0, r0, r7
 8010892:	4286      	cmp	r6, r0
 8010894:	d3ed      	bcc.n	8010872 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8010896:	2e00      	cmp	r6, #0
 8010898:	d0eb      	beq.n	8010872 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801089a:	682c      	ldr	r4, [r5, #0]
 801089c:	69a3      	ldr	r3, [r4, #24]
 801089e:	069b      	lsls	r3, r3, #26
 80108a0:	d5f4      	bpl.n	801088c <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 80108a2:	e7b5      	b.n	8010810 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 80108a4:	fe00e800 	.word	0xfe00e800

080108a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80108a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108aa:	4605      	mov	r5, r0
 80108ac:	460e      	mov	r6, r1
 80108ae:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80108b0:	682c      	ldr	r4, [r5, #0]
 80108b2:	69a3      	ldr	r3, [r4, #24]
 80108b4:	069b      	lsls	r3, r3, #26
 80108b6:	d449      	bmi.n	801094c <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80108b8:	69a3      	ldr	r3, [r4, #24]
 80108ba:	06da      	lsls	r2, r3, #27
 80108bc:	d526      	bpl.n	801090c <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 80108be:	1c73      	adds	r3, r6, #1
 80108c0:	d138      	bne.n	8010934 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80108c2:	69a3      	ldr	r3, [r4, #24]
 80108c4:	069e      	lsls	r6, r3, #26
 80108c6:	d5fc      	bpl.n	80108c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80108c8:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80108ca:	2210      	movs	r2, #16
 80108cc:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80108ce:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80108d0:	69a3      	ldr	r3, [r4, #24]
 80108d2:	0799      	lsls	r1, r3, #30
 80108d4:	d501      	bpl.n	80108da <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 80108d6:	2300      	movs	r3, #0
 80108d8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80108da:	69a3      	ldr	r3, [r4, #24]
 80108dc:	07da      	lsls	r2, r3, #31
 80108de:	d403      	bmi.n	80108e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80108e0:	69a3      	ldr	r3, [r4, #24]
 80108e2:	f043 0301 	orr.w	r3, r3, #1
 80108e6:	61a3      	str	r3, [r4, #24]
    I2C_RESET_CR2(hi2c);
 80108e8:	6863      	ldr	r3, [r4, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80108ea:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 80108ec:	4818      	ldr	r0, [pc, #96]	; (8010950 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 80108ee:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80108f0:	4003      	ands	r3, r0
      return HAL_ERROR;
 80108f2:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80108f4:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80108f6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80108f8:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80108fc:	f043 0304 	orr.w	r3, r3, #4
 8010900:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010902:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010906:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 801090a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801090c:	f7fd f884 	bl	800da18 <HAL_GetTick>
 8010910:	1bc0      	subs	r0, r0, r7
 8010912:	42b0      	cmp	r0, r6
 8010914:	d801      	bhi.n	801091a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8010916:	2e00      	cmp	r6, #0
 8010918:	d1ca      	bne.n	80108b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801091a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801091c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801091e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8010920:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010922:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8010924:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010928:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801092a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801092e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8010932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010934:	69a3      	ldr	r3, [r4, #24]
 8010936:	0698      	lsls	r0, r3, #26
 8010938:	d4c6      	bmi.n	80108c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801093a:	f7fd f86d 	bl	800da18 <HAL_GetTick>
 801093e:	1bc0      	subs	r0, r0, r7
 8010940:	4286      	cmp	r6, r0
 8010942:	d3ea      	bcc.n	801091a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 8010944:	2e00      	cmp	r6, #0
 8010946:	d0e8      	beq.n	801091a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010948:	682c      	ldr	r4, [r5, #0]
 801094a:	e7b8      	b.n	80108be <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 801094c:	2000      	movs	r0, #0
}
 801094e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010950:	fe00e800 	.word	0xfe00e800

08010954 <HAL_I2C_MspInit>:
}
 8010954:	4770      	bx	lr
 8010956:	bf00      	nop

08010958 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8010958:	2800      	cmp	r0, #0
 801095a:	d04e      	beq.n	80109fa <HAL_I2C_Init+0xa2>
{
 801095c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 801095e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8010962:	4604      	mov	r4, r0
 8010964:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010968:	2b00      	cmp	r3, #0
 801096a:	d041      	beq.n	80109f0 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
 801096c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 801096e:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010970:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8010972:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8010976:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010978:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801097c:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 801097e:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010982:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8010984:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010986:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8010988:	689a      	ldr	r2, [r3, #8]
 801098a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801098e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8010990:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010992:	d029      	beq.n	80109e8 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8010994:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010998:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801099a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801099c:	d102      	bne.n	80109a4 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801099e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80109a2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80109a4:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 80109a6:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80109aa:	4915      	ldr	r1, [pc, #84]	; (8010a00 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80109ac:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80109ae:	4301      	orrs	r1, r0
 80109b0:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80109b2:	68d9      	ldr	r1, [r3, #12]
 80109b4:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80109b8:	60d9      	str	r1, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80109ba:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
 80109be:	4302      	orrs	r2, r0
 80109c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80109c4:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80109c8:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80109ca:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80109cc:	4301      	orrs	r1, r0
  return HAL_OK;
 80109ce:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80109d0:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80109d2:	6819      	ldr	r1, [r3, #0]
 80109d4:	f041 0101 	orr.w	r1, r1, #1
 80109d8:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80109da:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80109dc:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80109e0:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80109e2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80109e6:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80109e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80109ec:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80109ee:	e7d9      	b.n	80109a4 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 80109f0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80109f4:	f7ff ffae 	bl	8010954 <HAL_I2C_MspInit>
 80109f8:	e7b8      	b.n	801096c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80109fa:	2001      	movs	r0, #1
}
 80109fc:	4770      	bx	lr
 80109fe:	bf00      	nop
 8010a00:	02008000 	.word	0x02008000

08010a04 <HAL_I2C_MspDeInit>:
 8010a04:	4770      	bx	lr
 8010a06:	bf00      	nop

08010a08 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8010a08:	b1b0      	cbz	r0, 8010a38 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8010a0a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8010a0c:	2324      	movs	r3, #36	; 0x24
{
 8010a0e:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 8010a10:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8010a14:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 8010a16:	6813      	ldr	r3, [r2, #0]
 8010a18:	f023 0301 	bic.w	r3, r3, #1
 8010a1c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8010a1e:	f7ff fff1 	bl	8010a04 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010a22:	2300      	movs	r3, #0
 8010a24:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8010a26:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 8010a28:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8010a2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 8010a30:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010a32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8010a36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8010a38:	2001      	movs	r0, #1
}
 8010a3a:	4770      	bx	lr

08010a3c <HAL_I2C_Mem_Write>:
{
 8010a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a40:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010a42:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8010a46:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010a4a:	2b20      	cmp	r3, #32
{
 8010a4c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010a50:	f040 80a8 	bne.w	8010ba4 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8010a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a56:	4604      	mov	r4, r0
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	f000 809d 	beq.w	8010b98 <HAL_I2C_Mem_Write+0x15c>
 8010a5e:	f1bb 0f00 	cmp.w	fp, #0
 8010a62:	f000 8099 	beq.w	8010b98 <HAL_I2C_Mem_Write+0x15c>
    __HAL_LOCK(hi2c);
 8010a66:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8010a6a:	2b01      	cmp	r3, #1
 8010a6c:	f000 809a 	beq.w	8010ba4 <HAL_I2C_Mem_Write+0x168>
 8010a70:	2301      	movs	r3, #1
 8010a72:	460f      	mov	r7, r1
 8010a74:	4691      	mov	r9, r2
 8010a76:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8010a7a:	f7fc ffcd 	bl	800da18 <HAL_GetTick>
 8010a7e:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8010a80:	e005      	b.n	8010a8e <HAL_I2C_Mem_Write+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a82:	f7fc ffc9 	bl	800da18 <HAL_GetTick>
 8010a86:	1b80      	subs	r0, r0, r6
 8010a88:	2819      	cmp	r0, #25
 8010a8a:	f200 80a9 	bhi.w	8010be0 <HAL_I2C_Mem_Write+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010a8e:	6823      	ldr	r3, [r4, #0]
 8010a90:	699d      	ldr	r5, [r3, #24]
 8010a92:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
 8010a96:	d1f4      	bne.n	8010a82 <HAL_I2C_Mem_Write+0x46>
    hi2c->pBuffPtr  = pData;
 8010a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010a9a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8010a9e:	4977      	ldr	r1, [pc, #476]	; (8010c7c <HAL_I2C_Mem_Write+0x240>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010aa0:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8010aa2:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010aa4:	2221      	movs	r2, #33	; 0x21
    hi2c->XferISR   = NULL;
 8010aa6:	6365      	str	r5, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010aa8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8010aac:	2240      	movs	r2, #64	; 0x40
 8010aae:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010ab2:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8010ab4:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010ab8:	685a      	ldr	r2, [r3, #4]
 8010aba:	400a      	ands	r2, r1
 8010abc:	fa5f f18a 	uxtb.w	r1, sl
 8010ac0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010ac4:	496e      	ldr	r1, [pc, #440]	; (8010c80 <HAL_I2C_Mem_Write+0x244>)
 8010ac6:	433a      	orrs	r2, r7
 8010ac8:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010aca:	4632      	mov	r2, r6
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010acc:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010ace:	4641      	mov	r1, r8
 8010ad0:	f7ff fe8e 	bl	80107f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	d171      	bne.n	8010bbc <HAL_I2C_Mem_Write+0x180>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010ad8:	f1ba 0f01 	cmp.w	sl, #1
 8010adc:	d00a      	beq.n	8010af4 <HAL_I2C_Mem_Write+0xb8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8010ade:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8010ae2:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010ae4:	4641      	mov	r1, r8
 8010ae6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8010ae8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010aea:	4632      	mov	r2, r6
 8010aec:	f7ff fe80 	bl	80107f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	d163      	bne.n	8010bbc <HAL_I2C_Mem_Write+0x180>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010af4:	fa5f f389 	uxtb.w	r3, r9
 8010af8:	6822      	ldr	r2, [r4, #0]
 8010afa:	6293      	str	r3, [r2, #40]	; 0x28
 8010afc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010b00:	f040 8089 	bne.w	8010c16 <HAL_I2C_Mem_Write+0x1da>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010b04:	6993      	ldr	r3, [r2, #24]
 8010b06:	0618      	lsls	r0, r3, #24
 8010b08:	d5fc      	bpl.n	8010b04 <HAL_I2C_Mem_Write+0xc8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010b0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	2bff      	cmp	r3, #255	; 0xff
 8010b10:	f240 8091 	bls.w	8010c36 <HAL_I2C_Mem_Write+0x1fa>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010b14:	6853      	ldr	r3, [r2, #4]
 8010b16:	495b      	ldr	r1, [pc, #364]	; (8010c84 <HAL_I2C_Mem_Write+0x248>)
 8010b18:	400b      	ands	r3, r1
 8010b1a:	495b      	ldr	r1, [pc, #364]	; (8010c88 <HAL_I2C_Mem_Write+0x24c>)
 8010b1c:	433b      	orrs	r3, r7
 8010b1e:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010b20:	23ff      	movs	r3, #255	; 0xff
 8010b22:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010b24:	6051      	str	r1, [r2, #4]
 8010b26:	4d57      	ldr	r5, [pc, #348]	; (8010c84 <HAL_I2C_Mem_Write+0x248>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010b28:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010b2c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8010c88 <HAL_I2C_Mem_Write+0x24c>
 8010b30:	e004      	b.n	8010b3c <HAL_I2C_Mem_Write+0x100>
    while (hi2c->XferCount > 0U);
 8010b32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8010b34:	b29b      	uxth	r3, r3
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	f000 808b 	beq.w	8010c52 <HAL_I2C_Mem_Write+0x216>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010b3c:	4632      	mov	r2, r6
 8010b3e:	4641      	mov	r1, r8
 8010b40:	4620      	mov	r0, r4
 8010b42:	f7ff fe55 	bl	80107f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d173      	bne.n	8010c32 <HAL_I2C_Mem_Write+0x1f6>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010b4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010b4c:	6821      	ldr	r1, [r4, #0]
 8010b4e:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
 8010b52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010b54:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
 8010b56:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8010b58:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8010b5a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8010b5c:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8010b5e:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 8010b60:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8010b62:	b292      	uxth	r2, r2
 8010b64:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010b66:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8010b68:	b292      	uxth	r2, r2
 8010b6a:	2a00      	cmp	r2, #0
 8010b6c:	d0e1      	beq.n	8010b32 <HAL_I2C_Mem_Write+0xf6>
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d1df      	bne.n	8010b32 <HAL_I2C_Mem_Write+0xf6>
 8010b72:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010b76:	d126      	bne.n	8010bc6 <HAL_I2C_Mem_Write+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010b78:	698b      	ldr	r3, [r1, #24]
 8010b7a:	061a      	lsls	r2, r3, #24
 8010b7c:	d5fc      	bpl.n	8010b78 <HAL_I2C_Mem_Write+0x13c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010b7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	2bff      	cmp	r3, #255	; 0xff
 8010b84:	d93a      	bls.n	8010bfc <HAL_I2C_Mem_Write+0x1c0>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010b86:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010b88:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010b8c:	402b      	ands	r3, r5
 8010b8e:	433b      	orrs	r3, r7
 8010b90:	ea43 0309 	orr.w	r3, r3, r9
 8010b94:	604b      	str	r3, [r1, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8010b96:	e7cc      	b.n	8010b32 <HAL_I2C_Mem_Write+0xf6>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8010b98:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8010b9c:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8010b9e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8010ba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8010ba4:	2002      	movs	r0, #2
}
 8010ba6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010baa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010bac:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010bae:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010bb0:	430b      	orrs	r3, r1
 8010bb2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010bb4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010bb8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8010bbc:	2300      	movs	r3, #0
      return HAL_ERROR;
 8010bbe:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8010bc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8010bc4:	e7ec      	b.n	8010ba0 <HAL_I2C_Mem_Write+0x164>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010bc6:	698b      	ldr	r3, [r1, #24]
 8010bc8:	061b      	lsls	r3, r3, #24
 8010bca:	d4d8      	bmi.n	8010b7e <HAL_I2C_Mem_Write+0x142>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010bcc:	f7fc ff24 	bl	800da18 <HAL_GetTick>
 8010bd0:	1b80      	subs	r0, r0, r6
 8010bd2:	4580      	cmp	r8, r0
 8010bd4:	d304      	bcc.n	8010be0 <HAL_I2C_Mem_Write+0x1a4>
 8010bd6:	f1b8 0f00 	cmp.w	r8, #0
 8010bda:	d001      	beq.n	8010be0 <HAL_I2C_Mem_Write+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010bdc:	6821      	ldr	r1, [r4, #0]
 8010bde:	e7c8      	b.n	8010b72 <HAL_I2C_Mem_Write+0x136>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010be0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010be2:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010be4:	2200      	movs	r2, #0
          return HAL_ERROR;
 8010be6:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010be8:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8010bea:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010bee:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010bf0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010bf4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8010bf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          hi2c->XferSize = hi2c->XferCount;
 8010bfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8010bfe:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010c00:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
 8010c02:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010c04:	684b      	ldr	r3, [r1, #4]
 8010c06:	402b      	ands	r3, r5
 8010c08:	433b      	orrs	r3, r7
 8010c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010c12:	604b      	str	r3, [r1, #4]
}
 8010c14:	e78d      	b.n	8010b32 <HAL_I2C_Mem_Write+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010c16:	6993      	ldr	r3, [r2, #24]
 8010c18:	0619      	lsls	r1, r3, #24
 8010c1a:	f53f af76 	bmi.w	8010b0a <HAL_I2C_Mem_Write+0xce>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010c1e:	f7fc fefb 	bl	800da18 <HAL_GetTick>
 8010c22:	1b80      	subs	r0, r0, r6
 8010c24:	4580      	cmp	r8, r0
 8010c26:	d3c0      	bcc.n	8010baa <HAL_I2C_Mem_Write+0x16e>
 8010c28:	f1b8 0f00 	cmp.w	r8, #0
 8010c2c:	d0bd      	beq.n	8010baa <HAL_I2C_Mem_Write+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010c2e:	6822      	ldr	r2, [r4, #0]
 8010c30:	e764      	b.n	8010afc <HAL_I2C_Mem_Write+0xc0>
        return HAL_ERROR;
 8010c32:	2001      	movs	r0, #1
 8010c34:	e7b4      	b.n	8010ba0 <HAL_I2C_Mem_Write+0x164>
      hi2c->XferSize = hi2c->XferCount;
 8010c36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010c38:	4812      	ldr	r0, [pc, #72]	; (8010c84 <HAL_I2C_Mem_Write+0x248>)
      hi2c->XferSize = hi2c->XferCount;
 8010c3a:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010c3c:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
 8010c3e:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010c40:	6853      	ldr	r3, [r2, #4]
 8010c42:	4003      	ands	r3, r0
 8010c44:	433b      	orrs	r3, r7
 8010c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010c4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010c4e:	6053      	str	r3, [r2, #4]
}
 8010c50:	e769      	b.n	8010b26 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010c52:	4632      	mov	r2, r6
 8010c54:	4641      	mov	r1, r8
 8010c56:	4620      	mov	r0, r4
 8010c58:	f7ff fe26 	bl	80108a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010c5c:	2800      	cmp	r0, #0
 8010c5e:	d1e8      	bne.n	8010c32 <HAL_I2C_Mem_Write+0x1f6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010c60:	6823      	ldr	r3, [r4, #0]
 8010c62:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8010c64:	4d09      	ldr	r5, [pc, #36]	; (8010c8c <HAL_I2C_Mem_Write+0x250>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010c66:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8010c68:	685a      	ldr	r2, [r3, #4]
 8010c6a:	402a      	ands	r2, r5
 8010c6c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8010c6e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8010c72:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010c76:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8010c7a:	e791      	b.n	8010ba0 <HAL_I2C_Mem_Write+0x164>
 8010c7c:	fc009800 	.word	0xfc009800
 8010c80:	81002000 	.word	0x81002000
 8010c84:	fc009c00 	.word	0xfc009c00
 8010c88:	01ff0000 	.word	0x01ff0000
 8010c8c:	fe00e800 	.word	0xfe00e800

08010c90 <HAL_I2C_Mem_Read>:
{
 8010c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c94:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010c96:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8010c9a:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010c9e:	2b20      	cmp	r3, #32
{
 8010ca0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010ca2:	f040 80bf 	bne.w	8010e24 <HAL_I2C_Mem_Read+0x194>
    if ((pData == NULL) || (Size == 0U))
 8010ca6:	9b08      	ldr	r3, [sp, #32]
 8010ca8:	4682      	mov	sl, r0
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	f000 80b3 	beq.w	8010e16 <HAL_I2C_Mem_Read+0x186>
 8010cb0:	f1b9 0f00 	cmp.w	r9, #0
 8010cb4:	f000 80af 	beq.w	8010e16 <HAL_I2C_Mem_Read+0x186>
    __HAL_LOCK(hi2c);
 8010cb8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8010cbc:	2b01      	cmp	r3, #1
 8010cbe:	f000 80b1 	beq.w	8010e24 <HAL_I2C_Mem_Read+0x194>
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	460e      	mov	r6, r1
 8010cc6:	4690      	mov	r8, r2
 8010cc8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8010ccc:	f7fc fea4 	bl	800da18 <HAL_GetTick>
 8010cd0:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8010cd2:	e005      	b.n	8010ce0 <HAL_I2C_Mem_Read+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010cd4:	f7fc fea0 	bl	800da18 <HAL_GetTick>
 8010cd8:	1b40      	subs	r0, r0, r5
 8010cda:	2819      	cmp	r0, #25
 8010cdc:	f200 808b 	bhi.w	8010df6 <HAL_I2C_Mem_Read+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010ce0:	f8da 3000 	ldr.w	r3, [sl]
 8010ce4:	6998      	ldr	r0, [r3, #24]
 8010ce6:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8010cea:	d1f3      	bne.n	8010cd4 <HAL_I2C_Mem_Read+0x44>
    hi2c->pBuffPtr  = pData;
 8010cec:	9a08      	ldr	r2, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010cee:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8010cf2:	4987      	ldr	r1, [pc, #540]	; (8010f10 <HAL_I2C_Mem_Read+0x280>)
    hi2c->pBuffPtr  = pData;
 8010cf4:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010cf8:	2222      	movs	r2, #34	; 0x22
    hi2c->XferISR   = NULL;
 8010cfa:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010cfe:	f88a 2041 	strb.w	r2, [sl, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8010d02:	2240      	movs	r2, #64	; 0x40
 8010d04:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010d08:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010d0c:	4650      	mov	r0, sl
    hi2c->XferCount = Size;
 8010d0e:	f8aa 902a 	strh.w	r9, [sl, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010d12:	685a      	ldr	r2, [r3, #4]
 8010d14:	400a      	ands	r2, r1
 8010d16:	b2f9      	uxtb	r1, r7
 8010d18:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010d1c:	497d      	ldr	r1, [pc, #500]	; (8010f14 <HAL_I2C_Mem_Read+0x284>)
 8010d1e:	4332      	orrs	r2, r6
 8010d20:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010d22:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010d24:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010d26:	4621      	mov	r1, r4
 8010d28:	f7ff fd62 	bl	80107f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	f040 8087 	bne.w	8010e40 <HAL_I2C_Mem_Read+0x1b0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010d32:	2f01      	cmp	r7, #1
 8010d34:	d00b      	beq.n	8010d4e <HAL_I2C_Mem_Read+0xbe>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8010d36:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8010d3a:	f8da 3000 	ldr.w	r3, [sl]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010d3e:	4621      	mov	r1, r4
 8010d40:	4650      	mov	r0, sl
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8010d42:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010d44:	462a      	mov	r2, r5
 8010d46:	f7ff fd53 	bl	80107f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8010d4a:	2800      	cmp	r0, #0
 8010d4c:	d178      	bne.n	8010e40 <HAL_I2C_Mem_Read+0x1b0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010d4e:	fa5f f388 	uxtb.w	r3, r8
 8010d52:	f8da 2000 	ldr.w	r2, [sl]
 8010d56:	6293      	str	r3, [r2, #40]	; 0x28
 8010d58:	1c61      	adds	r1, r4, #1
 8010d5a:	f040 80a4 	bne.w	8010ea6 <HAL_I2C_Mem_Read+0x216>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010d5e:	6993      	ldr	r3, [r2, #24]
 8010d60:	065b      	lsls	r3, r3, #25
 8010d62:	d5fc      	bpl.n	8010d5e <HAL_I2C_Mem_Read+0xce>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010d64:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
 8010d68:	b29b      	uxth	r3, r3
 8010d6a:	2bff      	cmp	r3, #255	; 0xff
 8010d6c:	f240 80a9 	bls.w	8010ec2 <HAL_I2C_Mem_Read+0x232>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010d70:	6853      	ldr	r3, [r2, #4]
 8010d72:	4967      	ldr	r1, [pc, #412]	; (8010f10 <HAL_I2C_Mem_Read+0x280>)
 8010d74:	400b      	ands	r3, r1
 8010d76:	4968      	ldr	r1, [pc, #416]	; (8010f18 <HAL_I2C_Mem_Read+0x288>)
 8010d78:	4333      	orrs	r3, r6
 8010d7a:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010d7c:	23ff      	movs	r3, #255	; 0xff
 8010d7e:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010d82:	6051      	str	r1, [r2, #4]
 8010d84:	1c60      	adds	r0, r4, #1
 8010d86:	4f65      	ldr	r7, [pc, #404]	; (8010f1c <HAL_I2C_Mem_Read+0x28c>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010d88:	f04f 09ff 	mov.w	r9, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010d8c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8010f28 <HAL_I2C_Mem_Read+0x298>
 8010d90:	d127      	bne.n	8010de2 <HAL_I2C_Mem_Read+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010d92:	6993      	ldr	r3, [r2, #24]
 8010d94:	0759      	lsls	r1, r3, #29
 8010d96:	d5fc      	bpl.n	8010d92 <HAL_I2C_Mem_Read+0x102>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010d9a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8010d9e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8010da0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
      hi2c->XferCount--;
 8010da4:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8010da8:	3301      	adds	r3, #1
      hi2c->XferCount--;
 8010daa:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8010dac:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      hi2c->XferSize--;
 8010db0:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
      hi2c->XferCount--;
 8010db4:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8010db6:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8010db8:	f8aa 202a 	strh.w	r2, [sl, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010dbc:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
      hi2c->XferSize--;
 8010dc0:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010dc2:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8010dc4:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010dc8:	b90b      	cbnz	r3, 8010dce <HAL_I2C_Mem_Read+0x13e>
 8010dca:	2a00      	cmp	r2, #0
 8010dcc:	d147      	bne.n	8010e5e <HAL_I2C_Mem_Read+0x1ce>
    while (hi2c->XferCount > 0U);
 8010dce:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
 8010dd2:	b29b      	uxth	r3, r3
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	f000 8084 	beq.w	8010ee2 <HAL_I2C_Mem_Read+0x252>
 8010dda:	1c60      	adds	r0, r4, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010ddc:	f8da 2000 	ldr.w	r2, [sl]
 8010de0:	d0d7      	beq.n	8010d92 <HAL_I2C_Mem_Read+0x102>
 8010de2:	6993      	ldr	r3, [r2, #24]
 8010de4:	075b      	lsls	r3, r3, #29
 8010de6:	d4d7      	bmi.n	8010d98 <HAL_I2C_Mem_Read+0x108>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010de8:	f7fc fe16 	bl	800da18 <HAL_GetTick>
 8010dec:	1b40      	subs	r0, r0, r5
 8010dee:	4284      	cmp	r4, r0
 8010df0:	d301      	bcc.n	8010df6 <HAL_I2C_Mem_Read+0x166>
 8010df2:	2c00      	cmp	r4, #0
 8010df4:	d1f1      	bne.n	8010dda <HAL_I2C_Mem_Read+0x14a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010df6:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010dfa:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010dfc:	2200      	movs	r2, #0
          return HAL_ERROR;
 8010dfe:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010e00:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8010e02:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010e06:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010e0a:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e0e:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
}
 8010e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8010e16:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8010e1a:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8010e1c:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
}
 8010e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 8010e24:	2002      	movs	r0, #2
}
 8010e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010e2a:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010e2e:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e30:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010e32:	430b      	orrs	r3, r1
 8010e34:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010e38:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e3c:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8010e40:	2300      	movs	r3, #0
      return HAL_ERROR;
 8010e42:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8010e44:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
      return HAL_ERROR;
 8010e48:	e7ea      	b.n	8010e20 <HAL_I2C_Mem_Read+0x190>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010e4a:	6993      	ldr	r3, [r2, #24]
 8010e4c:	061b      	lsls	r3, r3, #24
 8010e4e:	d40d      	bmi.n	8010e6c <HAL_I2C_Mem_Read+0x1dc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010e50:	f7fc fde2 	bl	800da18 <HAL_GetTick>
 8010e54:	1b40      	subs	r0, r0, r5
 8010e56:	4284      	cmp	r4, r0
 8010e58:	d3cd      	bcc.n	8010df6 <HAL_I2C_Mem_Read+0x166>
 8010e5a:	2c00      	cmp	r4, #0
 8010e5c:	d0cb      	beq.n	8010df6 <HAL_I2C_Mem_Read+0x166>
 8010e5e:	1c60      	adds	r0, r4, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010e60:	f8da 2000 	ldr.w	r2, [sl]
 8010e64:	d1f1      	bne.n	8010e4a <HAL_I2C_Mem_Read+0x1ba>
 8010e66:	6993      	ldr	r3, [r2, #24]
 8010e68:	0619      	lsls	r1, r3, #24
 8010e6a:	d5fc      	bpl.n	8010e66 <HAL_I2C_Mem_Read+0x1d6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010e6c:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
 8010e70:	b29b      	uxth	r3, r3
 8010e72:	2bff      	cmp	r3, #255	; 0xff
 8010e74:	d908      	bls.n	8010e88 <HAL_I2C_Mem_Read+0x1f8>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010e76:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010e78:	f8aa 9028 	strh.w	r9, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010e7c:	403b      	ands	r3, r7
 8010e7e:	4333      	orrs	r3, r6
 8010e80:	ea43 0308 	orr.w	r3, r3, r8
 8010e84:	6053      	str	r3, [r2, #4]
}
 8010e86:	e7a2      	b.n	8010dce <HAL_I2C_Mem_Read+0x13e>
          hi2c->XferSize = hi2c->XferCount;
 8010e88:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
 8010e8c:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010e8e:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 8010e90:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010e94:	6853      	ldr	r3, [r2, #4]
 8010e96:	403b      	ands	r3, r7
 8010e98:	4333      	orrs	r3, r6
 8010e9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010ea2:	6053      	str	r3, [r2, #4]
}
 8010ea4:	e793      	b.n	8010dce <HAL_I2C_Mem_Read+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010ea6:	6993      	ldr	r3, [r2, #24]
 8010ea8:	065f      	lsls	r7, r3, #25
 8010eaa:	f53f af5b 	bmi.w	8010d64 <HAL_I2C_Mem_Read+0xd4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010eae:	f7fc fdb3 	bl	800da18 <HAL_GetTick>
 8010eb2:	1b40      	subs	r0, r0, r5
 8010eb4:	4284      	cmp	r4, r0
 8010eb6:	d3b8      	bcc.n	8010e2a <HAL_I2C_Mem_Read+0x19a>
 8010eb8:	2c00      	cmp	r4, #0
 8010eba:	d0b6      	beq.n	8010e2a <HAL_I2C_Mem_Read+0x19a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010ebc:	f8da 2000 	ldr.w	r2, [sl]
 8010ec0:	e74a      	b.n	8010d58 <HAL_I2C_Mem_Read+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 8010ec2:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010ec6:	4812      	ldr	r0, [pc, #72]	; (8010f10 <HAL_I2C_Mem_Read+0x280>)
      hi2c->XferSize = hi2c->XferCount;
 8010ec8:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010eca:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
 8010ecc:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010ed0:	6853      	ldr	r3, [r2, #4]
 8010ed2:	4003      	ands	r3, r0
 8010ed4:	4333      	orrs	r3, r6
 8010ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010eda:	4911      	ldr	r1, [pc, #68]	; (8010f20 <HAL_I2C_Mem_Read+0x290>)
 8010edc:	4319      	orrs	r1, r3
 8010ede:	6051      	str	r1, [r2, #4]
}
 8010ee0:	e750      	b.n	8010d84 <HAL_I2C_Mem_Read+0xf4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010ee2:	462a      	mov	r2, r5
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	4650      	mov	r0, sl
 8010ee8:	f7ff fcde 	bl	80108a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010eec:	b970      	cbnz	r0, 8010f0c <HAL_I2C_Mem_Read+0x27c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010eee:	f8da 3000 	ldr.w	r3, [sl]
 8010ef2:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8010ef4:	4c0b      	ldr	r4, [pc, #44]	; (8010f24 <HAL_I2C_Mem_Read+0x294>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010ef6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8010ef8:	685a      	ldr	r2, [r3, #4]
 8010efa:	4022      	ands	r2, r4
 8010efc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8010efe:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8010f02:	f88a 0040 	strb.w	r0, [sl, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010f06:	f88a 0042 	strb.w	r0, [sl, #66]	; 0x42
    return HAL_OK;
 8010f0a:	e789      	b.n	8010e20 <HAL_I2C_Mem_Read+0x190>
      return HAL_ERROR;
 8010f0c:	2001      	movs	r0, #1
 8010f0e:	e787      	b.n	8010e20 <HAL_I2C_Mem_Read+0x190>
 8010f10:	fc009800 	.word	0xfc009800
 8010f14:	80002000 	.word	0x80002000
 8010f18:	81ff2400 	.word	0x81ff2400
 8010f1c:	fc009c00 	.word	0xfc009c00
 8010f20:	82002400 	.word	0x82002400
 8010f24:	fe00e800 	.word	0xfe00e800
 8010f28:	01ff0000 	.word	0x01ff0000

08010f2c <HAL_I2C_GetState>:
  return hi2c->State;
 8010f2c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8010f30:	4770      	bx	lr
 8010f32:	bf00      	nop

08010f34 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8010f34:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8010f36:	4770      	bx	lr

08010f38 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010f38:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8010f3c:	2a20      	cmp	r2, #32
 8010f3e:	d123      	bne.n	8010f88 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8010f40:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010f44:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8010f48:	4603      	mov	r3, r0
 8010f4a:	2a01      	cmp	r2, #1
 8010f4c:	d01c      	beq.n	8010f88 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010f4e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8010f50:	2024      	movs	r0, #36	; 0x24
{
 8010f52:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8010f54:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010f58:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 8010f5c:	6810      	ldr	r0, [r2, #0]
 8010f5e:	f020 0001 	bic.w	r0, r0, #1
 8010f62:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010f64:	6810      	ldr	r0, [r2, #0]
 8010f66:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8010f6a:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8010f6c:	6810      	ldr	r0, [r2, #0]
 8010f6e:	4301      	orrs	r1, r0

    return HAL_OK;
 8010f70:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 8010f72:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8010f74:	6811      	ldr	r1, [r2, #0]
 8010f76:	f041 0101 	orr.w	r1, r1, #1
 8010f7a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8010f7c:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8010f80:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8010f84:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8010f88:	2002      	movs	r0, #2
}
 8010f8a:	4770      	bx	lr

08010f8c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010f8c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8010f90:	2a20      	cmp	r2, #32
 8010f92:	d122      	bne.n	8010fda <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8010f94:	4603      	mov	r3, r0
{
 8010f96:	b500      	push	{lr}
 8010f98:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010f9c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8010fa0:	2a01      	cmp	r2, #1
 8010fa2:	d01c      	beq.n	8010fde <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010fa4:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8010fa6:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010fa8:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8010fac:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8010fb0:	6810      	ldr	r0, [r2, #0]
 8010fb2:	f020 0001 	bic.w	r0, r0, #1
 8010fb6:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8010fb8:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8010fba:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8010fbe:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 8010fc2:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 8010fc4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8010fc6:	6811      	ldr	r1, [r2, #0]
 8010fc8:	f041 0101 	orr.w	r1, r1, #1
 8010fcc:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8010fce:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8010fd2:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8010fd6:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8010fda:	2002      	movs	r0, #2
}
 8010fdc:	4770      	bx	lr
    return HAL_BUSY;
 8010fde:	2002      	movs	r0, #2
}
 8010fe0:	f85d fb04 	ldr.w	pc, [sp], #4

08010fe4 <HAL_LTDC_MspInit>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8010fe4:	4770      	bx	lr
 8010fe6:	bf00      	nop

08010fe8 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	d067      	beq.n	80110bc <HAL_LTDC_Init+0xd4>
{
 8010fec:	b538      	push	{r3, r4, r5, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8010fee:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8010ff2:	4604      	mov	r4, r0
 8010ff4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d05a      	beq.n	80110b2 <HAL_LTDC_Init+0xca>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8010ffc:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8010ffe:	2102      	movs	r1, #2
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8011000:	69e5      	ldr	r5, [r4, #28]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8011002:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8011006:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 801100a:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801100c:	4302      	orrs	r2, r0
 801100e:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8011010:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8011014:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8011016:	6920      	ldr	r0, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8011018:	6199      	str	r1, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 801101a:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801101c:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 801101e:	4828      	ldr	r0, [pc, #160]	; (80110c0 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8011020:	430a      	orrs	r2, r1
 8011022:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8011024:	689a      	ldr	r2, [r3, #8]
 8011026:	4002      	ands	r2, r0
 8011028:	609a      	str	r2, [r3, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 801102a:	6962      	ldr	r2, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 801102c:	6899      	ldr	r1, [r3, #8]
 801102e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011032:	69a2      	ldr	r2, [r4, #24]
 8011034:	4311      	orrs	r1, r2
 8011036:	6099      	str	r1, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8011038:	68d9      	ldr	r1, [r3, #12]
 801103a:	4001      	ands	r1, r0
 801103c:	60d9      	str	r1, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 801103e:	68da      	ldr	r2, [r3, #12]
 8011040:	6a21      	ldr	r1, [r4, #32]
 8011042:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8011046:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8011048:	430a      	orrs	r2, r1
 801104a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 801104c:	691a      	ldr	r2, [r3, #16]
 801104e:	4002      	ands	r2, r0
 8011050:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8011052:	6919      	ldr	r1, [r3, #16]
 8011054:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8011056:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 801105a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 801105c:	4311      	orrs	r1, r2
 801105e:	6119      	str	r1, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8011060:	6959      	ldr	r1, [r3, #20]
 8011062:	4008      	ands	r0, r1
 8011064:	6158      	str	r0, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8011066:	695a      	ldr	r2, [r3, #20]
 8011068:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801106a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 801106e:	430a      	orrs	r2, r1
 8011070:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8011072:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8011074:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8011078:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 801107c:	f894 c036 	ldrb.w	ip, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8011080:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8011082:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011084:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8011088:	430a      	orrs	r2, r1
 801108a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 801108e:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8011090:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8011094:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8011096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011098:	f042 0206 	orr.w	r2, r2, #6
 801109c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 801109e:	699a      	ldr	r2, [r3, #24]
 80110a0:	f042 0201 	orr.w	r2, r2, #1
 80110a4:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80110a6:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80110a8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80110ac:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80110b0:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80110b2:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80110b6:	f7ff ff95 	bl	8010fe4 <HAL_LTDC_MspInit>
 80110ba:	e79f      	b.n	8010ffc <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 80110bc:	2001      	movs	r0, #1
}
 80110be:	4770      	bx	lr
 80110c0:	f000f800 	.word	0xf000f800

080110c4 <HAL_LTDC_ErrorCallback>:
 80110c4:	4770      	bx	lr
 80110c6:	bf00      	nop

080110c8 <HAL_LTDC_LineEventCallback>:
 80110c8:	4770      	bx	lr
 80110ca:	bf00      	nop

080110cc <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80110cc:	6803      	ldr	r3, [r0, #0]
{
 80110ce:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80110d0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
 80110d2:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80110d4:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80110d6:	076a      	lsls	r2, r5, #29
 80110d8:	d501      	bpl.n	80110de <HAL_LTDC_IRQHandler+0x12>
 80110da:	0771      	lsls	r1, r6, #29
 80110dc:	d41d      	bmi.n	801111a <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80110de:	07aa      	lsls	r2, r5, #30
 80110e0:	d501      	bpl.n	80110e6 <HAL_LTDC_IRQHandler+0x1a>
 80110e2:	07b3      	lsls	r3, r6, #30
 80110e4:	d42d      	bmi.n	8011142 <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80110e6:	07e8      	lsls	r0, r5, #31
 80110e8:	d501      	bpl.n	80110ee <HAL_LTDC_IRQHandler+0x22>
 80110ea:	07f1      	lsls	r1, r6, #31
 80110ec:	d440      	bmi.n	8011170 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80110ee:	072a      	lsls	r2, r5, #28
 80110f0:	d501      	bpl.n	80110f6 <HAL_LTDC_IRQHandler+0x2a>
 80110f2:	0733      	lsls	r3, r6, #28
 80110f4:	d400      	bmi.n	80110f8 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80110f6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80110f8:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80110fa:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 80110fc:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 80110fe:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8011100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011102:	f022 0208 	bic.w	r2, r2, #8
 8011106:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8011108:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
 801110a:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
 801110c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8011110:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8011114:	f7f0 fdc4 	bl	8001ca0 <HAL_LTDC_ReloadEventCallback>
}
 8011118:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 801111a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801111c:	f022 0204 	bic.w	r2, r2, #4
 8011120:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8011122:	2204      	movs	r2, #4
 8011124:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8011126:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 801112a:	f043 0301 	orr.w	r3, r3, #1
 801112e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8011132:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8011134:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8011138:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 801113c:	f7ff ffc2 	bl	80110c4 <HAL_LTDC_ErrorCallback>
 8011140:	e7cd      	b.n	80110de <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8011142:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8011144:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8011146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011148:	f022 0202 	bic.w	r2, r2, #2
 801114c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 801114e:	2202      	movs	r2, #2
 8011150:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8011152:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8011154:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8011158:	f043 0302 	orr.w	r3, r3, #2
 801115c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8011160:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8011162:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8011166:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 801116a:	f7ff ffab 	bl	80110c4 <HAL_LTDC_ErrorCallback>
 801116e:	e7ba      	b.n	80110e6 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8011170:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8011172:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8011174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011176:	f022 0201 	bic.w	r2, r2, #1
 801117a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 801117c:	2201      	movs	r2, #1
 801117e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8011180:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8011182:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8011186:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 801118a:	f7ff ff9d 	bl	80110c8 <HAL_LTDC_LineEventCallback>
 801118e:	e7ae      	b.n	80110ee <HAL_LTDC_IRQHandler+0x22>

08011190 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8011190:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8011194:	2b01      	cmp	r3, #1
 8011196:	f000 80c6 	beq.w	8011326 <HAL_LTDC_ConfigLayer+0x196>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801119a:	2302      	movs	r3, #2
{
 801119c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80111a0:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80111a4:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80111a8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
 80111ac:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80111ae:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80111b2:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80111b4:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80111b8:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80111ba:	f102 0684 	add.w	r6, r2, #132	; 0x84
 80111be:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80111c0:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
 80111c4:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80111c6:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80111ca:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80111ce:	f8df a164 	ldr.w	sl, [pc, #356]	; 8011334 <HAL_LTDC_ConfigLayer+0x1a4>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80111d2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80111d6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80111da:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80111dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80111e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80111e4:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80111e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80111ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80111f0:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80111f2:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80111f4:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80111f8:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80111fa:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80111fc:	f8cc 3004 	str.w	r3, [ip, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8011200:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8011204:	1c51      	adds	r1, r2, #1
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8011206:	f8d5 e018 	ldr.w	lr, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801120a:	f3c3 430b 	ubfx	r3, r3, #16, #12
 801120e:	440b      	add	r3, r1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8011210:	68e9      	ldr	r1, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8011212:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
 8011216:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801121a:	f8d9 300c 	ldr.w	r3, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 801121e:	f8dc 0008 	ldr.w	r0, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8011222:	f3c3 030a 	ubfx	r3, r3, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8011226:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801122a:	4419      	add	r1, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 801122c:	68ab      	ldr	r3, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 801122e:	f8cc 0008 	str.w	r0, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8011232:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8011236:	3301      	adds	r3, #1
 8011238:	f3c0 000a 	ubfx	r0, r0, #0, #11
 801123c:	4403      	add	r3, r0
 801123e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8011242:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8011244:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8011248:	f8dc 3010 	ldr.w	r3, [ip, #16]
 801124c:	f023 0307 	bic.w	r3, r3, #7
 8011250:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8011254:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8011258:	f8dc 3018 	ldr.w	r3, [ip, #24]
 801125c:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 801125e:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8011262:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8011266:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 801126a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 801126e:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8011272:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8011276:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801127a:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 801127e:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8011282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8011286:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 801128a:	696b      	ldr	r3, [r5, #20]
 801128c:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8011290:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8011294:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8011296:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801129a:	6a28      	ldr	r0, [r5, #32]
 801129c:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 801129e:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80112a2:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80112a6:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 80112aa:	2300      	movs	r3, #0
 80112ac:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80112b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80112b2:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80112b6:	bb59      	cbnz	r1, 8011310 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
 80112b8:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80112ba:	1abf      	subs	r7, r7, r2
 80112bc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80112be:	fb03 f707 	mul.w	r7, r3, r7
 80112c2:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80112c6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80112c8:	3707      	adds	r7, #7
 80112ca:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80112ce:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 80112d2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80112d6:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80112da:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80112de:	4b14      	ldr	r3, [pc, #80]	; (8011330 <HAL_LTDC_ConfigLayer+0x1a0>)
 80112e0:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
 80112e4:	400b      	ands	r3, r1
 80112e6:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80112ea:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80112ee:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80112f0:	f859 3006 	ldr.w	r3, [r9, r6]
 80112f4:	4313      	orrs	r3, r2
 80112f6:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
 80112fa:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80112fc:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
 8011300:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
 8011302:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8011306:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
 801130a:	b003      	add	sp, #12
 801130c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8011310:	2901      	cmp	r1, #1
 8011312:	d00a      	beq.n	801132a <HAL_LTDC_ConfigLayer+0x19a>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8011314:	1e8b      	subs	r3, r1, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8011316:	2b02      	cmp	r3, #2
 8011318:	d903      	bls.n	8011322 <HAL_LTDC_ConfigLayer+0x192>
 801131a:	2907      	cmp	r1, #7
 801131c:	d001      	beq.n	8011322 <HAL_LTDC_ConfigLayer+0x192>
    tmp = 1U;
 801131e:	2301      	movs	r3, #1
 8011320:	e7cb      	b.n	80112ba <HAL_LTDC_ConfigLayer+0x12a>
    tmp = 2U;
 8011322:	2302      	movs	r3, #2
 8011324:	e7c9      	b.n	80112ba <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
 8011326:	2002      	movs	r0, #2
}
 8011328:	4770      	bx	lr
    tmp = 3U;
 801132a:	2303      	movs	r3, #3
 801132c:	e7c5      	b.n	80112ba <HAL_LTDC_ConfigLayer+0x12a>
 801132e:	bf00      	nop
 8011330:	fffff800 	.word	0xfffff800
 8011334:	fffff8f8 	.word	0xfffff8f8

08011338 <HAL_LTDC_Reload>:
  __HAL_LOCK(hltdc);
 8011338:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 801133c:	2a01      	cmp	r2, #1
 801133e:	d015      	beq.n	801136c <HAL_LTDC_Reload+0x34>
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8011340:	6802      	ldr	r2, [r0, #0]
 8011342:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8011344:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
 8011346:	f04f 0c00 	mov.w	ip, #0
{
 801134a:	b500      	push	{lr}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801134c:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  hltdc->State = HAL_LTDC_STATE_READY;
 8011350:	f04f 0e01 	mov.w	lr, #1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8011354:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8011356:	f040 0008 	orr.w	r0, r0, #8
 801135a:	6350      	str	r0, [r2, #52]	; 0x34
  return HAL_OK;
 801135c:	4660      	mov	r0, ip
  hltdc->Instance->SRCR = ReloadType;
 801135e:	6251      	str	r1, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8011360:	f883 e0a1 	strb.w	lr, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8011364:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
 8011368:	f85d fb04 	ldr.w	pc, [sp], #4
  __HAL_LOCK(hltdc);
 801136c:	2002      	movs	r0, #2
}
 801136e:	4770      	bx	lr

08011370 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8011370:	b538      	push	{r3, r4, r5, lr}
 8011372:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011374:	f7fc fb50 	bl	800da18 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8011378:	2c00      	cmp	r4, #0
 801137a:	d05a      	beq.n	8011432 <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 801137c:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
 801137e:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
 8011380:	2100      	movs	r1, #0
 8011382:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8011384:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8011388:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 801138c:	68da      	ldr	r2, [r3, #12]
 801138e:	f022 0201 	bic.w	r2, r2, #1
 8011392:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8011394:	e005      	b.n	80113a2 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8011396:	f7fc fb3f 	bl	800da18 <HAL_GetTick>
 801139a:	1b43      	subs	r3, r0, r5
 801139c:	2b05      	cmp	r3, #5
 801139e:	d841      	bhi.n	8011424 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80113a0:	6823      	ldr	r3, [r4, #0]
 80113a2:	68da      	ldr	r2, [r3, #12]
 80113a4:	07d2      	lsls	r2, r2, #31
 80113a6:	d4f6      	bmi.n	8011396 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80113a8:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 80113ac:	69e0      	ldr	r0, [r4, #28]
 80113ae:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80113b0:	68e1      	ldr	r1, [r4, #12]
 80113b2:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80113b4:	4302      	orrs	r2, r0
 80113b6:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80113b8:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80113ba:	4302      	orrs	r2, r0
 80113bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80113be:	4302      	orrs	r2, r0
 80113c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80113c2:	4302      	orrs	r2, r0
 80113c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80113c6:	4302      	orrs	r2, r0
 80113c8:	68a0      	ldr	r0, [r4, #8]
 80113ca:	4302      	orrs	r2, r0
 80113cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80113ce:	3801      	subs	r0, #1
 80113d0:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80113d4:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80113d6:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80113d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80113dc:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80113de:	d103      	bne.n	80113e8 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80113e0:	691a      	ldr	r2, [r3, #16]
 80113e2:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80113e6:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80113e8:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80113ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80113ec:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
 80113ee:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80113f0:	db30      	blt.n	8011454 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80113f2:	b292      	uxth	r2, r2
 80113f4:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80113f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80113f8:	2a00      	cmp	r2, #0
 80113fa:	db1c      	blt.n	8011436 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80113fc:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80113fe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8011402:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8011406:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8011408:	d021      	beq.n	801144e <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 801140a:	b2c0      	uxtb	r0, r0
 801140c:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 801140e:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8011410:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8011412:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8011414:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8011416:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8011418:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 801141a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 801141e:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8011422:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8011424:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8011426:	2303      	movs	r3, #3
      return HAL_ERROR;
 8011428:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 801142a:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 801142c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011430:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8011432:	2001      	movs	r0, #1
}
 8011434:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8011436:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8011438:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 801143a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 801143e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8011442:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8011444:	6a19      	ldr	r1, [r3, #32]
 8011446:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 801144a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 801144c:	d1dd      	bne.n	801140a <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 801144e:	2200      	movs	r2, #0
 8011450:	629a      	str	r2, [r3, #40]	; 0x28
 8011452:	e7dc      	b.n	801140e <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8011454:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8011456:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8011458:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 801145c:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 801145e:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8011460:	621a      	str	r2, [r3, #32]
 8011462:	e7c8      	b.n	80113f6 <HAL_MDMA_Init+0x86>

08011464 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 8011464:	2800      	cmp	r0, #0
 8011466:	d06e      	beq.n	8011546 <HAL_MDMA_Start_IT+0xe2>
 8011468:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
 801146a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 801146e:	2801      	cmp	r0, #1
 8011470:	d071      	beq.n	8011556 <HAL_MDMA_Start_IT+0xf2>
 8011472:	2001      	movs	r0, #1
 8011474:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8011478:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
 801147c:	2801      	cmp	r0, #1
 801147e:	d004      	beq.n	801148a <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
 8011480:	2300      	movs	r3, #0
    return HAL_BUSY;
 8011482:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
 8011484:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
 8011488:	4770      	bx	lr
{
 801148a:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 801148c:	f3c3 0010 	ubfx	r0, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8011490:	2402      	movs	r4, #2
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8011492:	2300      	movs	r3, #0
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8011494:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8011496:	f88c 403d 	strb.w	r4, [ip, #61]	; 0x3d
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 801149a:	f1a4 1402 	sub.w	r4, r4, #131074	; 0x20002
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 801149e:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 80114a2:	f105 3eff 	add.w	lr, r5, #4294967295
    __HAL_MDMA_DISABLE(hmdma);
 80114a6:	f8dc 3000 	ldr.w	r3, [ip]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80114aa:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
    __HAL_MDMA_DISABLE(hmdma);
 80114ae:	68dd      	ldr	r5, [r3, #12]
 80114b0:	f025 0501 	bic.w	r5, r5, #1
 80114b4:	60dd      	str	r5, [r3, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 80114b6:	695d      	ldr	r5, [r3, #20]
 80114b8:	ea04 0405 	and.w	r4, r4, r5
 80114bc:	ea44 0400 	orr.w	r4, r4, r0
 80114c0:	615c      	str	r4, [r3, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 80114c2:	6958      	ldr	r0, [r3, #20]
 80114c4:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80114c8:	ea40 500e 	orr.w	r0, r0, lr, lsl #20
 80114cc:	6158      	str	r0, [r3, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 80114ce:	f04f 001f 	mov.w	r0, #31
 80114d2:	6058      	str	r0, [r3, #4]
  hmdma->Instance->CDAR = DstAddress;
 80114d4:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CSAR = SrcAddress;
 80114d6:	6199      	str	r1, [r3, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 80114d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80114da:	bf0c      	ite	eq
 80114dc:	f441 3180 	orreq.w	r1, r1, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 80114e0:	f421 3180 	bicne.w	r1, r1, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80114e4:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 80114e8:	6299      	str	r1, [r3, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 80114ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    if(hmdma->XferBlockCpltCallback != NULL)
 80114ec:	f8dc 104c 	ldr.w	r1, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 80114f0:	bf0c      	ite	eq
 80114f2:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 80114f6:	f422 3200 	bicne.w	r2, r2, #131072	; 0x20000
 80114fa:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 80114fc:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
 8011500:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8011502:	68da      	ldr	r2, [r3, #12]
 8011504:	f042 0206 	orr.w	r2, r2, #6
 8011508:	60da      	str	r2, [r3, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 801150a:	b119      	cbz	r1, 8011514 <HAL_MDMA_Start_IT+0xb0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 801150c:	68da      	ldr	r2, [r3, #12]
 801150e:	f042 0210 	orr.w	r2, r2, #16
 8011512:	60da      	str	r2, [r3, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8011514:	f8dc 2050 	ldr.w	r2, [ip, #80]	; 0x50
 8011518:	b11a      	cbz	r2, 8011522 <HAL_MDMA_Start_IT+0xbe>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 801151a:	68da      	ldr	r2, [r3, #12]
 801151c:	f042 0208 	orr.w	r2, r2, #8
 8011520:	60da      	str	r2, [r3, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8011522:	f8dc 2048 	ldr.w	r2, [ip, #72]	; 0x48
 8011526:	b11a      	cbz	r2, 8011530 <HAL_MDMA_Start_IT+0xcc>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8011528:	68da      	ldr	r2, [r3, #12]
 801152a:	f042 0220 	orr.w	r2, r2, #32
 801152e:	60da      	str	r2, [r3, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8011530:	68da      	ldr	r2, [r3, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8011532:	f8dc 1004 	ldr.w	r1, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
 8011536:	f042 0201 	orr.w	r2, r2, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801153a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 801153e:	60da      	str	r2, [r3, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8011540:	d003      	beq.n	801154a <HAL_MDMA_Start_IT+0xe6>
  return HAL_OK;
 8011542:	2000      	movs	r0, #0
}
 8011544:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8011546:	2001      	movs	r0, #1
 8011548:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 801154a:	68da      	ldr	r2, [r3, #12]
  return HAL_OK;
 801154c:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 801154e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011552:	60da      	str	r2, [r3, #12]
}
 8011554:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
 8011556:	2002      	movs	r0, #2
}
 8011558:	4770      	bx	lr
 801155a:	bf00      	nop

0801155c <HAL_MDMA_IRQHandler>:
{
 801155c:	b530      	push	{r4, r5, lr}
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 801155e:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
{
 8011562:	4604      	mov	r4, r0
 8011564:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8011566:	2500      	movs	r5, #0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8011568:	4a58      	ldr	r2, [pc, #352]	; (80116cc <HAL_MDMA_IRQHandler+0x170>)
 801156a:	2101      	movs	r1, #1
  __IO uint32_t count = 0;
 801156c:	9501      	str	r5, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 801156e:	6818      	ldr	r0, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8011570:	6823      	ldr	r3, [r4, #0]
 8011572:	441a      	add	r2, r3
 8011574:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8011578:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 801157c:	4202      	tst	r2, r0
 801157e:	f000 80a2 	beq.w	80116c6 <HAL_MDMA_IRQHandler+0x16a>
  uint32_t timeout = SystemCoreClock / 9600U;
 8011582:	4953      	ldr	r1, [pc, #332]	; (80116d0 <HAL_MDMA_IRQHandler+0x174>)
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8011584:	681a      	ldr	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011586:	680d      	ldr	r5, [r1, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8011588:	07d1      	lsls	r1, r2, #31
 801158a:	d529      	bpl.n	80115e0 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 801158c:	68da      	ldr	r2, [r3, #12]
 801158e:	0792      	lsls	r2, r2, #30
 8011590:	d526      	bpl.n	80115e0 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8011592:	68da      	ldr	r2, [r3, #12]
 8011594:	f022 0202 	bic.w	r2, r2, #2
 8011598:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 801159a:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 801159c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 801159e:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80115a0:	bf54      	ite	pl
 80115a2:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80115a6:	f041 0102 	orrmi.w	r1, r1, #2
 80115aa:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80115ac:	0591      	lsls	r1, r2, #22
 80115ae:	d503      	bpl.n	80115b8 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80115b0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80115b2:	f041 0104 	orr.w	r1, r1, #4
 80115b6:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80115b8:	05d0      	lsls	r0, r2, #23
 80115ba:	d503      	bpl.n	80115c4 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80115bc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80115be:	f041 0108 	orr.w	r1, r1, #8
 80115c2:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80115c4:	0551      	lsls	r1, r2, #21
 80115c6:	d503      	bpl.n	80115d0 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80115c8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80115ca:	f041 0110 	orr.w	r1, r1, #16
 80115ce:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80115d0:	0510      	lsls	r0, r2, #20
 80115d2:	d503      	bpl.n	80115dc <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80115d4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80115d6:	f042 0220 	orr.w	r2, r2, #32
 80115da:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80115dc:	2201      	movs	r2, #1
 80115de:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80115e0:	681a      	ldr	r2, [r3, #0]
 80115e2:	06d1      	lsls	r1, r2, #27
 80115e4:	d509      	bpl.n	80115fa <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80115e6:	68da      	ldr	r2, [r3, #12]
 80115e8:	0692      	lsls	r2, r2, #26
 80115ea:	d506      	bpl.n	80115fa <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80115ec:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 80115ee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80115f0:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 80115f2:	b112      	cbz	r2, 80115fa <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 80115f4:	4620      	mov	r0, r4
 80115f6:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80115f8:	6823      	ldr	r3, [r4, #0]
 80115fa:	681a      	ldr	r2, [r3, #0]
 80115fc:	0710      	lsls	r0, r2, #28
 80115fe:	d509      	bpl.n	8011614 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8011600:	68da      	ldr	r2, [r3, #12]
 8011602:	06d1      	lsls	r1, r2, #27
 8011604:	d506      	bpl.n	8011614 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8011606:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 8011608:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 801160a:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 801160c:	b112      	cbz	r2, 8011614 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 801160e:	4620      	mov	r0, r4
 8011610:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8011612:	6823      	ldr	r3, [r4, #0]
 8011614:	681a      	ldr	r2, [r3, #0]
 8011616:	0752      	lsls	r2, r2, #29
 8011618:	d509      	bpl.n	801162e <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 801161a:	68da      	ldr	r2, [r3, #12]
 801161c:	0710      	lsls	r0, r2, #28
 801161e:	d506      	bpl.n	801162e <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8011620:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8011622:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8011624:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8011626:	b112      	cbz	r2, 801162e <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8011628:	4620      	mov	r0, r4
 801162a:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 801162c:	6823      	ldr	r3, [r4, #0]
 801162e:	681a      	ldr	r2, [r3, #0]
 8011630:	0791      	lsls	r1, r2, #30
 8011632:	d516      	bpl.n	8011662 <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8011634:	68da      	ldr	r2, [r3, #12]
 8011636:	0752      	lsls	r2, r2, #29
 8011638:	d513      	bpl.n	8011662 <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 801163a:	68da      	ldr	r2, [r3, #12]
 801163c:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8011640:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8011642:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8011646:	2a04      	cmp	r2, #4
 8011648:	d034      	beq.n	80116b4 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 801164a:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
 801164c:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 801164e:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8011650:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
 8011652:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
 8011654:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8011658:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
 801165c:	b10b      	cbz	r3, 8011662 <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 801165e:	4620      	mov	r0, r4
 8011660:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8011662:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8011664:	2b00      	cmp	r3, #0
 8011666:	d02e      	beq.n	80116c6 <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
 8011668:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 801166a:	2304      	movs	r3, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 801166c:	4a19      	ldr	r2, [pc, #100]	; (80116d4 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 801166e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8011672:	68cb      	ldr	r3, [r1, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011674:	fba2 0205 	umull	r0, r2, r2, r5
    __HAL_MDMA_DISABLE(hmdma);
 8011678:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 801167c:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 801167e:	60cb      	str	r3, [r1, #12]
 8011680:	e002      	b.n	8011688 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8011682:	68cb      	ldr	r3, [r1, #12]
 8011684:	07d8      	lsls	r0, r3, #31
 8011686:	d504      	bpl.n	8011692 <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 8011688:	9b01      	ldr	r3, [sp, #4]
 801168a:	3301      	adds	r3, #1
 801168c:	4293      	cmp	r3, r2
 801168e:	9301      	str	r3, [sp, #4]
 8011690:	d9f7      	bls.n	8011682 <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 8011692:	2300      	movs	r3, #0
 8011694:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8011698:	68cb      	ldr	r3, [r1, #12]
 801169a:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 801169c:	bf4c      	ite	mi
 801169e:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 80116a0:	2301      	movpl	r3, #1
 80116a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
 80116a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80116a8:	b16b      	cbz	r3, 80116c6 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 80116aa:	4620      	mov	r0, r4
}
 80116ac:	b003      	add	sp, #12
 80116ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 80116b2:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 80116b4:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 80116b6:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 80116b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
 80116ba:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 80116be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d1f1      	bne.n	80116aa <HAL_MDMA_IRQHandler+0x14e>
}
 80116c6:	b003      	add	sp, #12
 80116c8:	bd30      	pop	{r4, r5, pc}
 80116ca:	bf00      	nop
 80116cc:	adffffc0 	.word	0xadffffc0
 80116d0:	2400737c 	.word	0x2400737c
 80116d4:	1b4e81b5 	.word	0x1b4e81b5

080116d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80116d8:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80116da:	4c1d      	ldr	r4, [pc, #116]	; (8011750 <HAL_PWREx_ConfigSupply+0x78>)
{
 80116dc:	4605      	mov	r5, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80116de:	68e3      	ldr	r3, [r4, #12]
 80116e0:	f003 0307 	and.w	r3, r3, #7
 80116e4:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80116e6:	68e3      	ldr	r3, [r4, #12]
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80116e8:	d005      	beq.n	80116f6 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80116ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80116ee:	1a18      	subs	r0, r3, r0
 80116f0:	bf18      	it	ne
 80116f2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80116f4:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80116f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80116fa:	4303      	orrs	r3, r0
 80116fc:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80116fe:	f7fc f98b 	bl	800da18 <HAL_GetTick>
 8011702:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011704:	e005      	b.n	8011712 <HAL_PWREx_ConfigSupply+0x3a>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011706:	f7fc f987 	bl	800da18 <HAL_GetTick>
 801170a:	1b83      	subs	r3, r0, r6
 801170c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011710:	d81b      	bhi.n	801174a <HAL_PWREx_ConfigSupply+0x72>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011712:	6863      	ldr	r3, [r4, #4]
 8011714:	049a      	lsls	r2, r3, #18
 8011716:	d5f6      	bpl.n	8011706 <HAL_PWREx_ConfigSupply+0x2e>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8011718:	f1a5 031d 	sub.w	r3, r5, #29
 801171c:	2b01      	cmp	r3, #1
 801171e:	d905      	bls.n	801172c <HAL_PWREx_ConfigSupply+0x54>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8011720:	f1a5 002d 	sub.w	r0, r5, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8011724:	2801      	cmp	r0, #1
 8011726:	d901      	bls.n	801172c <HAL_PWREx_ConfigSupply+0x54>
  return HAL_OK;
 8011728:	2000      	movs	r0, #0
}
 801172a:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 801172c:	f7fc f974 	bl	800da18 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8011730:	4d07      	ldr	r5, [pc, #28]	; (8011750 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 8011732:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8011734:	e005      	b.n	8011742 <HAL_PWREx_ConfigSupply+0x6a>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011736:	f7fc f96f 	bl	800da18 <HAL_GetTick>
 801173a:	1b00      	subs	r0, r0, r4
 801173c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8011740:	d803      	bhi.n	801174a <HAL_PWREx_ConfigSupply+0x72>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8011742:	68eb      	ldr	r3, [r5, #12]
 8011744:	03db      	lsls	r3, r3, #15
 8011746:	d5f6      	bpl.n	8011736 <HAL_PWREx_ConfigSupply+0x5e>
 8011748:	e7ee      	b.n	8011728 <HAL_PWREx_ConfigSupply+0x50>
      return HAL_ERROR;
 801174a:	2001      	movs	r0, #1
}
 801174c:	bd70      	pop	{r4, r5, r6, pc}
 801174e:	bf00      	nop
 8011750:	58024800 	.word	0x58024800

08011754 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8011754:	b470      	push	{r4, r5, r6}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8011756:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8011758:	b115      	cbz	r5, 8011760 <QSPI_Config+0xc>
 801175a:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 801175e:	d13a      	bne.n	80117d6 <QSPI_Config+0x82>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8011760:	698b      	ldr	r3, [r1, #24]
 8011762:	b31b      	cbz	r3, 80117ac <QSPI_Config+0x58>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8011764:	6a0c      	ldr	r4, [r1, #32]
 8011766:	2c00      	cmp	r4, #0
 8011768:	d04c      	beq.n	8011804 <QSPI_Config+0xb0>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 801176a:	688e      	ldr	r6, [r1, #8]
 801176c:	6800      	ldr	r0, [r0, #0]
 801176e:	61c6      	str	r6, [r0, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8011770:	69ce      	ldr	r6, [r1, #28]
 8011772:	2e00      	cmp	r6, #0
 8011774:	d069      	beq.n	801184a <QSPI_Config+0xf6>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011776:	432b      	orrs	r3, r5
 8011778:	4313      	orrs	r3, r2
 801177a:	4323      	orrs	r3, r4
 801177c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 801177e:	4333      	orrs	r3, r6
 8011780:	4323      	orrs	r3, r4
 8011782:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8011784:	4323      	orrs	r3, r4
 8011786:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8011788:	4323      	orrs	r3, r4
 801178a:	690c      	ldr	r4, [r1, #16]
 801178c:	4323      	orrs	r3, r4
 801178e:	68cc      	ldr	r4, [r1, #12]
 8011790:	4323      	orrs	r3, r4
 8011792:	680c      	ldr	r4, [r1, #0]
    {
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
      {
        /*---- Command with only address ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011794:	4323      	orrs	r3, r4
 8011796:	694c      	ldr	r4, [r1, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8011798:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801179c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80117a0:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80117a2:	d065      	beq.n	8011870 <QSPI_Config+0x11c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80117a4:	684b      	ldr	r3, [r1, #4]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80117a6:	bc70      	pop	{r4, r5, r6}
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80117a8:	6183      	str	r3, [r0, #24]
}
 80117aa:	4770      	bx	lr
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80117ac:	6a0b      	ldr	r3, [r1, #32]
 80117ae:	b1bb      	cbz	r3, 80117e0 <QSPI_Config+0x8c>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80117b0:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80117b2:	432b      	orrs	r3, r5
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80117b4:	688c      	ldr	r4, [r1, #8]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80117b6:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80117b8:	61c4      	str	r4, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80117ba:	2e00      	cmp	r6, #0
 80117bc:	d06b      	beq.n	8011896 <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80117be:	4313      	orrs	r3, r2
 80117c0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80117c2:	4333      	orrs	r3, r6
 80117c4:	4323      	orrs	r3, r4
 80117c6:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80117c8:	4323      	orrs	r3, r4
 80117ca:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80117cc:	4323      	orrs	r3, r4
 80117ce:	690c      	ldr	r4, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80117d0:	4323      	orrs	r3, r4
 80117d2:	68cc      	ldr	r4, [r1, #12]
 80117d4:	e7de      	b.n	8011794 <QSPI_Config+0x40>
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80117d6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80117d8:	6804      	ldr	r4, [r0, #0]
 80117da:	3b01      	subs	r3, #1
 80117dc:	6123      	str	r3, [r4, #16]
 80117de:	e7bf      	b.n	8011760 <QSPI_Config+0xc>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80117e0:	69cb      	ldr	r3, [r1, #28]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d166      	bne.n	80118b4 <QSPI_Config+0x160>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80117e6:	2d00      	cmp	r5, #0
 80117e8:	d042      	beq.n	8011870 <QSPI_Config+0x11c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80117ea:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80117ec:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80117ee:	432b      	orrs	r3, r5
 80117f0:	6800      	ldr	r0, [r0, #0]
 80117f2:	4313      	orrs	r3, r2
 80117f4:	694a      	ldr	r2, [r1, #20]
 80117f6:	4323      	orrs	r3, r4
 80117f8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80117fa:	4323      	orrs	r3, r4
 80117fc:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8011800:	6143      	str	r3, [r0, #20]
}
 8011802:	e035      	b.n	8011870 <QSPI_Config+0x11c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8011804:	69cc      	ldr	r4, [r1, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011806:	ea45 0c03 	orr.w	ip, r5, r3
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801180a:	2c00      	cmp	r4, #0
 801180c:	d032      	beq.n	8011874 <QSPI_Config+0x120>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801180e:	6803      	ldr	r3, [r0, #0]
 8011810:	ea4c 0002 	orr.w	r0, ip, r2
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8011814:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011818:	ea40 0004 	orr.w	r0, r0, r4
 801181c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 801181e:	ea40 0004 	orr.w	r0, r0, r4
 8011822:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8011824:	ea40 0004 	orr.w	r0, r0, r4
 8011828:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 801182a:	ea40 0004 	orr.w	r0, r0, r4
 801182e:	68cc      	ldr	r4, [r1, #12]
 8011830:	ea40 0004 	orr.w	r0, r0, r4
 8011834:	680c      	ldr	r4, [r1, #0]
 8011836:	ea40 0004 	orr.w	r0, r0, r4
 801183a:	694c      	ldr	r4, [r1, #20]
 801183c:	ea40 4084 	orr.w	r0, r0, r4, lsl #18
 8011840:	6158      	str	r0, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8011842:	d015      	beq.n	8011870 <QSPI_Config+0x11c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8011844:	684a      	ldr	r2, [r1, #4]
 8011846:	619a      	str	r2, [r3, #24]
 8011848:	e012      	b.n	8011870 <QSPI_Config+0x11c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801184a:	ea45 0c03 	orr.w	ip, r5, r3
 801184e:	690d      	ldr	r5, [r1, #16]
 8011850:	ea4c 0302 	orr.w	r3, ip, r2
 8011854:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8011856:	4323      	orrs	r3, r4
 8011858:	4313      	orrs	r3, r2
 801185a:	e9d1 420c 	ldrd	r4, r2, [r1, #48]	; 0x30
 801185e:	4323      	orrs	r3, r4
 8011860:	680c      	ldr	r4, [r1, #0]
 8011862:	4313      	orrs	r3, r2
 8011864:	694a      	ldr	r2, [r1, #20]
 8011866:	432b      	orrs	r3, r5
 8011868:	4323      	orrs	r3, r4
 801186a:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 801186e:	6143      	str	r3, [r0, #20]
}
 8011870:	bc70      	pop	{r4, r5, r6}
 8011872:	4770      	bx	lr
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011874:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8011876:	ea4c 0302 	orr.w	r3, ip, r2
 801187a:	6800      	ldr	r0, [r0, #0]
 801187c:	4323      	orrs	r3, r4
 801187e:	e9d1 420c 	ldrd	r4, r2, [r1, #48]	; 0x30
 8011882:	4323      	orrs	r3, r4
 8011884:	680c      	ldr	r4, [r1, #0]
 8011886:	4313      	orrs	r3, r2
 8011888:	694a      	ldr	r2, [r1, #20]
 801188a:	4323      	orrs	r3, r4
 801188c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
}
 8011890:	bc70      	pop	{r4, r5, r6}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011892:	6143      	str	r3, [r0, #20]
}
 8011894:	4770      	bx	lr
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011896:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8011898:	4313      	orrs	r3, r2
 801189a:	4323      	orrs	r3, r4
 801189c:	e9d1 420c 	ldrd	r4, r2, [r1, #48]	; 0x30
 80118a0:	4323      	orrs	r3, r4
 80118a2:	4313      	orrs	r3, r2
 80118a4:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 80118a8:	4323      	orrs	r3, r4
 80118aa:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
}
 80118ae:	bc70      	pop	{r4, r5, r6}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80118b0:	6143      	str	r3, [r0, #20]
}
 80118b2:	4770      	bx	lr
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80118b4:	432b      	orrs	r3, r5
 80118b6:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 80118b8:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80118ba:	4313      	orrs	r3, r2
 80118bc:	6800      	ldr	r0, [r0, #0]
 80118be:	432b      	orrs	r3, r5
 80118c0:	4323      	orrs	r3, r4
 80118c2:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80118c4:	e784      	b.n	80117d0 <QSPI_Config+0x7c>
 80118c6:	bf00      	nop

080118c8 <HAL_QSPI_MspInit>:
}
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop

080118cc <HAL_QSPI_Init>:
{
 80118cc:	b570      	push	{r4, r5, r6, lr}
 80118ce:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80118d0:	f7fc f8a2 	bl	800da18 <HAL_GetTick>
  if(hqspi == NULL)
 80118d4:	2d00      	cmp	r5, #0
 80118d6:	d046      	beq.n	8011966 <HAL_QSPI_Init+0x9a>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80118d8:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 80118dc:	4606      	mov	r6, r0
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d039      	beq.n	8011956 <HAL_QSPI_Init+0x8a>
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80118e2:	6cac      	ldr	r4, [r5, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80118e4:	682a      	ldr	r2, [r5, #0]
 80118e6:	68a9      	ldr	r1, [r5, #8]
 80118e8:	6813      	ldr	r3, [r2, #0]
 80118ea:	3901      	subs	r1, #1
 80118ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80118f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80118f4:	6013      	str	r3, [r2, #0]
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80118f6:	e001      	b.n	80118fc <HAL_QSPI_Init+0x30>
    if (Timeout != HAL_MAX_DELAY)
 80118f8:	1c63      	adds	r3, r4, #1
 80118fa:	d124      	bne.n	8011946 <HAL_QSPI_Init+0x7a>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80118fc:	6893      	ldr	r3, [r2, #8]
 80118fe:	f013 0320 	ands.w	r3, r3, #32
 8011902:	d1f9      	bne.n	80118f8 <HAL_QSPI_Init+0x2c>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8011904:	69e8      	ldr	r0, [r5, #28]
 8011906:	68e9      	ldr	r1, [r5, #12]
 8011908:	6814      	ldr	r4, [r2, #0]
 801190a:	4301      	orrs	r1, r0
 801190c:	6a28      	ldr	r0, [r5, #32]
 801190e:	4301      	orrs	r1, r0
 8011910:	6868      	ldr	r0, [r5, #4]
 8011912:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 8011916:	4819      	ldr	r0, [pc, #100]	; (801197c <HAL_QSPI_Init+0xb0>)
 8011918:	4020      	ands	r0, r4
 801191a:	4301      	orrs	r1, r0
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 801191c:	6968      	ldr	r0, [r5, #20]
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 801191e:	6011      	str	r1, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8011920:	69a9      	ldr	r1, [r5, #24]
 8011922:	6854      	ldr	r4, [r2, #4]
 8011924:	4301      	orrs	r1, r0
 8011926:	6928      	ldr	r0, [r5, #16]
 8011928:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801192c:	4814      	ldr	r0, [pc, #80]	; (8011980 <HAL_QSPI_Init+0xb4>)
 801192e:	4020      	ands	r0, r4
    hqspi->State = HAL_QSPI_STATE_READY;
 8011930:	2401      	movs	r4, #1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8011932:	4301      	orrs	r1, r0
    hqspi->State = HAL_QSPI_STATE_READY;
 8011934:	4618      	mov	r0, r3
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8011936:	6051      	str	r1, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8011938:	6811      	ldr	r1, [r2, #0]
 801193a:	4321      	orrs	r1, r4
 801193c:	6011      	str	r1, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801193e:	646b      	str	r3, [r5, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8011940:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
}
 8011944:	bd70      	pop	{r4, r5, r6, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011946:	f7fc f867 	bl	800da18 <HAL_GetTick>
 801194a:	1b80      	subs	r0, r0, r6
 801194c:	42a0      	cmp	r0, r4
 801194e:	d80c      	bhi.n	801196a <HAL_QSPI_Init+0x9e>
 8011950:	b15c      	cbz	r4, 801196a <HAL_QSPI_Init+0x9e>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011952:	682a      	ldr	r2, [r5, #0]
 8011954:	e7d2      	b.n	80118fc <HAL_QSPI_Init+0x30>
    HAL_QSPI_MspInit(hqspi);
 8011956:	4628      	mov	r0, r5
 8011958:	f7ff ffb6 	bl	80118c8 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 801195c:	f241 3388 	movw	r3, #5000	; 0x1388
}
 8011960:	461c      	mov	r4, r3
  hqspi->Timeout = Timeout;
 8011962:	64ab      	str	r3, [r5, #72]	; 0x48
}
 8011964:	e7be      	b.n	80118e4 <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 8011966:	2001      	movs	r0, #1
}
 8011968:	bd70      	pop	{r4, r5, r6, pc}
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 801196a:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 801196c:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 801196e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011972:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8011974:	4303      	orrs	r3, r0
 8011976:	646b      	str	r3, [r5, #68]	; 0x44
}
 8011978:	bd70      	pop	{r4, r5, r6, pc}
 801197a:	bf00      	nop
 801197c:	00ffff2f 	.word	0x00ffff2f
 8011980:	ffe0f8fe 	.word	0xffe0f8fe

08011984 <HAL_QSPI_Command>:
{
 8011984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011988:	4604      	mov	r4, r0
 801198a:	460e      	mov	r6, r1
 801198c:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 801198e:	f7fc f843 	bl	800da18 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8011992:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011996:	2b01      	cmp	r3, #1
 8011998:	d03a      	beq.n	8011a10 <HAL_QSPI_Command+0x8c>
 801199a:	2301      	movs	r3, #1
 801199c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80119a0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80119a4:	2b01      	cmp	r3, #1
 80119a6:	b2df      	uxtb	r7, r3
 80119a8:	d006      	beq.n	80119b8 <HAL_QSPI_Command+0x34>
    status = HAL_BUSY;
 80119aa:	2702      	movs	r7, #2
  __HAL_UNLOCK(hqspi);
 80119ac:	2300      	movs	r3, #0
}
 80119ae:	4638      	mov	r0, r7
  __HAL_UNLOCK(hqspi);
 80119b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80119b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80119b8:	2300      	movs	r3, #0
 80119ba:	4680      	mov	r8, r0
 80119bc:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80119be:	2302      	movs	r3, #2
 80119c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80119c4:	1c68      	adds	r0, r5, #1
 80119c6:	6823      	ldr	r3, [r4, #0]
 80119c8:	d10e      	bne.n	80119e8 <HAL_QSPI_Command+0x64>
 80119ca:	689a      	ldr	r2, [r3, #8]
 80119cc:	f012 0220 	ands.w	r2, r2, #32
 80119d0:	d1fb      	bne.n	80119ca <HAL_QSPI_Command+0x46>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80119d2:	4631      	mov	r1, r6
 80119d4:	4620      	mov	r0, r4
 80119d6:	f7ff febd 	bl	8011754 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80119da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80119dc:	b1e3      	cbz	r3, 8011a18 <HAL_QSPI_Command+0x94>
        hqspi->State = HAL_QSPI_STATE_READY;
 80119de:	2301      	movs	r3, #1
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80119e0:	2700      	movs	r7, #0
        hqspi->State = HAL_QSPI_STATE_READY;
 80119e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80119e6:	e7e1      	b.n	80119ac <HAL_QSPI_Command+0x28>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80119e8:	689a      	ldr	r2, [r3, #8]
 80119ea:	f012 0220 	ands.w	r2, r2, #32
 80119ee:	d01e      	beq.n	8011a2e <HAL_QSPI_Command+0xaa>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119f0:	f7fc f812 	bl	800da18 <HAL_GetTick>
 80119f4:	eba0 0008 	sub.w	r0, r0, r8
 80119f8:	4285      	cmp	r5, r0
 80119fa:	d301      	bcc.n	8011a00 <HAL_QSPI_Command+0x7c>
 80119fc:	2d00      	cmp	r5, #0
 80119fe:	d1e1      	bne.n	80119c4 <HAL_QSPI_Command+0x40>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011a00:	2304      	movs	r3, #4
 8011a02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011a06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011a08:	f043 0301 	orr.w	r3, r3, #1
 8011a0c:	6463      	str	r3, [r4, #68]	; 0x44
        if (status == HAL_OK)
 8011a0e:	e7cd      	b.n	80119ac <HAL_QSPI_Command+0x28>
  __HAL_LOCK(hqspi);
 8011a10:	2702      	movs	r7, #2
}
 8011a12:	4638      	mov	r0, r7
 8011a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011a18:	6822      	ldr	r2, [r4, #0]
 8011a1a:	6893      	ldr	r3, [r2, #8]
 8011a1c:	079b      	lsls	r3, r3, #30
 8011a1e:	d5fc      	bpl.n	8011a1a <HAL_QSPI_Command+0x96>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8011a20:	2102      	movs	r1, #2
          hqspi->State = HAL_QSPI_STATE_READY;
 8011a22:	2301      	movs	r3, #1
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8011a24:	2700      	movs	r7, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8011a26:	60d1      	str	r1, [r2, #12]
          hqspi->State = HAL_QSPI_STATE_READY;
 8011a28:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011a2c:	e7be      	b.n	80119ac <HAL_QSPI_Command+0x28>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8011a2e:	4631      	mov	r1, r6
 8011a30:	4620      	mov	r0, r4
 8011a32:	f7ff fe8f 	bl	8011754 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8011a36:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011a38:	b143      	cbz	r3, 8011a4c <HAL_QSPI_Command+0xc8>
 8011a3a:	e7d0      	b.n	80119de <HAL_QSPI_Command+0x5a>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a3c:	f7fb ffec 	bl	800da18 <HAL_GetTick>
 8011a40:	eba0 0008 	sub.w	r0, r0, r8
 8011a44:	4285      	cmp	r5, r0
 8011a46:	d3db      	bcc.n	8011a00 <HAL_QSPI_Command+0x7c>
 8011a48:	2d00      	cmp	r5, #0
 8011a4a:	d0d9      	beq.n	8011a00 <HAL_QSPI_Command+0x7c>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011a4c:	6822      	ldr	r2, [r4, #0]
 8011a4e:	6893      	ldr	r3, [r2, #8]
 8011a50:	0799      	lsls	r1, r3, #30
 8011a52:	d5f3      	bpl.n	8011a3c <HAL_QSPI_Command+0xb8>
 8011a54:	e7e4      	b.n	8011a20 <HAL_QSPI_Command+0x9c>
 8011a56:	bf00      	nop

08011a58 <HAL_QSPI_Transmit>:
{
 8011a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a5c:	4604      	mov	r4, r0
 8011a5e:	4689      	mov	r9, r1
 8011a60:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8011a62:	f7fb ffd9 	bl	800da18 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8011a66:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8011a6a:	6827      	ldr	r7, [r4, #0]
  __HAL_LOCK(hqspi);
 8011a6c:	2b01      	cmp	r3, #1
 8011a6e:	d067      	beq.n	8011b40 <HAL_QSPI_Transmit+0xe8>
 8011a70:	2301      	movs	r3, #1
 8011a72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8011a76:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8011a7a:	2b01      	cmp	r3, #1
 8011a7c:	fa5f f883 	uxtb.w	r8, r3
 8011a80:	d007      	beq.n	8011a92 <HAL_QSPI_Transmit+0x3a>
    status = HAL_BUSY;
 8011a82:	f04f 0802 	mov.w	r8, #2
  __HAL_UNLOCK(hqspi);
 8011a86:	2300      	movs	r3, #0
}
 8011a88:	4640      	mov	r0, r8
  __HAL_UNLOCK(hqspi);
 8011a8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8011a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011a92:	2300      	movs	r3, #0
 8011a94:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 8011a96:	f1b9 0f00 	cmp.w	r9, #0
 8011a9a:	d056      	beq.n	8011b4a <HAL_QSPI_Transmit+0xf2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8011a9c:	2312      	movs	r3, #18
 8011a9e:	4606      	mov	r6, r0
 8011aa0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	3301      	adds	r3, #1
 8011aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8011aaa:	693b      	ldr	r3, [r7, #16]
      hqspi->pTxBuffPtr = pData;
 8011aac:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	62a3      	str	r3, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8011aba:	617b      	str	r3, [r7, #20]
      while(hqspi->TxXferCount > 0U)
 8011abc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d031      	beq.n	8011b26 <HAL_QSPI_Transmit+0xce>
 8011ac2:	1c6a      	adds	r2, r5, #1
 8011ac4:	4639      	mov	r1, r7
 8011ac6:	d111      	bne.n	8011aec <HAL_QSPI_Transmit+0x94>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011ac8:	688b      	ldr	r3, [r1, #8]
 8011aca:	075b      	lsls	r3, r3, #29
 8011acc:	d5fc      	bpl.n	8011ac8 <HAL_QSPI_Transmit+0x70>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8011ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	f887 3020 	strb.w	r3, [r7, #32]
        hqspi->TxXferCount--;
 8011ad6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hqspi->pTxBuffPtr++;
 8011ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8011ada:	3a01      	subs	r2, #1
        hqspi->pTxBuffPtr++;
 8011adc:	3301      	adds	r3, #1
        hqspi->TxXferCount--;
 8011ade:	62e2      	str	r2, [r4, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8011ae0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hqspi->pTxBuffPtr++;
 8011ae2:	6263      	str	r3, [r4, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8011ae4:	b1f2      	cbz	r2, 8011b24 <HAL_QSPI_Transmit+0xcc>
 8011ae6:	1c6a      	adds	r2, r5, #1
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011ae8:	6821      	ldr	r1, [r4, #0]
 8011aea:	d0ed      	beq.n	8011ac8 <HAL_QSPI_Transmit+0x70>
 8011aec:	688b      	ldr	r3, [r1, #8]
 8011aee:	0758      	lsls	r0, r3, #29
 8011af0:	d4ed      	bmi.n	8011ace <HAL_QSPI_Transmit+0x76>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011af2:	f7fb ff91 	bl	800da18 <HAL_GetTick>
 8011af6:	1b80      	subs	r0, r0, r6
 8011af8:	4285      	cmp	r5, r0
 8011afa:	d301      	bcc.n	8011b00 <HAL_QSPI_Transmit+0xa8>
 8011afc:	2d00      	cmp	r5, #0
 8011afe:	d1f2      	bne.n	8011ae6 <HAL_QSPI_Transmit+0x8e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011b00:	2304      	movs	r3, #4
 8011b02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011b06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011b08:	f043 0301 	orr.w	r3, r3, #1
 8011b0c:	6463      	str	r3, [r4, #68]	; 0x44
        if (status == HAL_OK)
 8011b0e:	e013      	b.n	8011b38 <HAL_QSPI_Transmit+0xe0>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	079b      	lsls	r3, r3, #30
 8011b14:	d40c      	bmi.n	8011b30 <HAL_QSPI_Transmit+0xd8>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b16:	f7fb ff7f 	bl	800da18 <HAL_GetTick>
 8011b1a:	1b80      	subs	r0, r0, r6
 8011b1c:	4285      	cmp	r5, r0
 8011b1e:	d3ef      	bcc.n	8011b00 <HAL_QSPI_Transmit+0xa8>
 8011b20:	2d00      	cmp	r5, #0
 8011b22:	d0ed      	beq.n	8011b00 <HAL_QSPI_Transmit+0xa8>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011b24:	6827      	ldr	r7, [r4, #0]
 8011b26:	1c69      	adds	r1, r5, #1
 8011b28:	d1f2      	bne.n	8011b10 <HAL_QSPI_Transmit+0xb8>
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	079a      	lsls	r2, r3, #30
 8011b2e:	d5fc      	bpl.n	8011b2a <HAL_QSPI_Transmit+0xd2>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8011b30:	2302      	movs	r3, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8011b32:	f04f 0800 	mov.w	r8, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8011b36:	60fb      	str	r3, [r7, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8011b38:	2301      	movs	r3, #1
 8011b3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011b3e:	e7a2      	b.n	8011a86 <HAL_QSPI_Transmit+0x2e>
  __HAL_LOCK(hqspi);
 8011b40:	f04f 0802 	mov.w	r8, #2
}
 8011b44:	4640      	mov	r0, r8
 8011b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8011b4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011b4c:	f043 0308 	orr.w	r3, r3, #8
 8011b50:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8011b52:	e798      	b.n	8011a86 <HAL_QSPI_Transmit+0x2e>

08011b54 <HAL_QSPI_Receive>:
{
 8011b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b58:	4604      	mov	r4, r0
 8011b5a:	4615      	mov	r5, r2
 8011b5c:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8011b5e:	f7fb ff5b 	bl	800da18 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8011b62:	6827      	ldr	r7, [r4, #0]
 8011b64:	69ba      	ldr	r2, [r7, #24]
  __HAL_LOCK(hqspi);
 8011b66:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011b6a:	2b01      	cmp	r3, #1
 8011b6c:	d06c      	beq.n	8011c48 <HAL_QSPI_Receive+0xf4>
 8011b6e:	2301      	movs	r3, #1
 8011b70:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8011b74:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	fa5f f883 	uxtb.w	r8, r3
 8011b7e:	d007      	beq.n	8011b90 <HAL_QSPI_Receive+0x3c>
    status = HAL_BUSY;
 8011b80:	f04f 0802 	mov.w	r8, #2
  __HAL_UNLOCK(hqspi);
 8011b84:	2300      	movs	r3, #0
}
 8011b86:	4640      	mov	r0, r8
  __HAL_UNLOCK(hqspi);
 8011b88:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8011b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011b90:	2300      	movs	r3, #0
 8011b92:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 8011b94:	f1b9 0f00 	cmp.w	r9, #0
 8011b98:	d05b      	beq.n	8011c52 <HAL_QSPI_Receive+0xfe>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8011b9a:	2322      	movs	r3, #34	; 0x22
 8011b9c:	4606      	mov	r6, r0
 8011b9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8011ba2:	693b      	ldr	r3, [r7, #16]
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	63a3      	str	r3, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8011ba8:	693b      	ldr	r3, [r7, #16]
      hqspi->pRxBuffPtr = pData;
 8011baa:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8011bae:	3301      	adds	r3, #1
 8011bb0:	6363      	str	r3, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8011bb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011bbc:	617b      	str	r3, [r7, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8011bbe:	61ba      	str	r2, [r7, #24]
      while(hqspi->RxXferCount > 0U)
 8011bc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d033      	beq.n	8011c2e <HAL_QSPI_Receive+0xda>
 8011bc6:	1c68      	adds	r0, r5, #1
 8011bc8:	4639      	mov	r1, r7
 8011bca:	d112      	bne.n	8011bf2 <HAL_QSPI_Receive+0x9e>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011bcc:	688b      	ldr	r3, [r1, #8]
 8011bce:	f013 0f06 	tst.w	r3, #6
 8011bd2:	d0fb      	beq.n	8011bcc <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8011bd4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011bd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011bda:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 8011bdc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hqspi->pRxBuffPtr++;
 8011bde:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8011be0:	3a01      	subs	r2, #1
        hqspi->pRxBuffPtr++;
 8011be2:	3301      	adds	r3, #1
        hqspi->RxXferCount--;
 8011be4:	63a2      	str	r2, [r4, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8011be6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hqspi->pRxBuffPtr++;
 8011be8:	6323      	str	r3, [r4, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8011bea:	b1fa      	cbz	r2, 8011c2c <HAL_QSPI_Receive+0xd8>
 8011bec:	1c68      	adds	r0, r5, #1
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011bee:	6821      	ldr	r1, [r4, #0]
 8011bf0:	d0ec      	beq.n	8011bcc <HAL_QSPI_Receive+0x78>
 8011bf2:	688b      	ldr	r3, [r1, #8]
 8011bf4:	f013 0f06 	tst.w	r3, #6
 8011bf8:	d1ec      	bne.n	8011bd4 <HAL_QSPI_Receive+0x80>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011bfa:	f7fb ff0d 	bl	800da18 <HAL_GetTick>
 8011bfe:	1b80      	subs	r0, r0, r6
 8011c00:	4285      	cmp	r5, r0
 8011c02:	d301      	bcc.n	8011c08 <HAL_QSPI_Receive+0xb4>
 8011c04:	2d00      	cmp	r5, #0
 8011c06:	d1f1      	bne.n	8011bec <HAL_QSPI_Receive+0x98>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011c08:	2304      	movs	r3, #4
 8011c0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011c0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011c10:	f043 0301 	orr.w	r3, r3, #1
 8011c14:	6463      	str	r3, [r4, #68]	; 0x44
        if  (status == HAL_OK)
 8011c16:	e013      	b.n	8011c40 <HAL_QSPI_Receive+0xec>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	079b      	lsls	r3, r3, #30
 8011c1c:	d40c      	bmi.n	8011c38 <HAL_QSPI_Receive+0xe4>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c1e:	f7fb fefb 	bl	800da18 <HAL_GetTick>
 8011c22:	1b80      	subs	r0, r0, r6
 8011c24:	4285      	cmp	r5, r0
 8011c26:	d3ef      	bcc.n	8011c08 <HAL_QSPI_Receive+0xb4>
 8011c28:	2d00      	cmp	r5, #0
 8011c2a:	d0ed      	beq.n	8011c08 <HAL_QSPI_Receive+0xb4>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011c2c:	6827      	ldr	r7, [r4, #0]
 8011c2e:	1c69      	adds	r1, r5, #1
 8011c30:	d1f2      	bne.n	8011c18 <HAL_QSPI_Receive+0xc4>
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	079a      	lsls	r2, r3, #30
 8011c36:	d5fc      	bpl.n	8011c32 <HAL_QSPI_Receive+0xde>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8011c38:	2302      	movs	r3, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8011c3a:	f04f 0800 	mov.w	r8, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8011c3e:	60fb      	str	r3, [r7, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8011c40:	2301      	movs	r3, #1
 8011c42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011c46:	e79d      	b.n	8011b84 <HAL_QSPI_Receive+0x30>
  __HAL_LOCK(hqspi);
 8011c48:	f04f 0802 	mov.w	r8, #2
}
 8011c4c:	4640      	mov	r0, r8
 8011c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8011c52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011c54:	f043 0308 	orr.w	r3, r3, #8
 8011c58:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8011c5a:	e793      	b.n	8011b84 <HAL_QSPI_Receive+0x30>

08011c5c <HAL_QSPI_AutoPolling>:
{
 8011c5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c60:	4604      	mov	r4, r0
 8011c62:	461f      	mov	r7, r3
 8011c64:	4689      	mov	r9, r1
 8011c66:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8011c68:	f7fb fed6 	bl	800da18 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8011c6c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d052      	beq.n	8011d1a <HAL_QSPI_AutoPolling+0xbe>
 8011c74:	2301      	movs	r3, #1
 8011c76:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8011c7a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8011c7e:	2b01      	cmp	r3, #1
 8011c80:	fa5f fb83 	uxtb.w	fp, r3
 8011c84:	d007      	beq.n	8011c96 <HAL_QSPI_AutoPolling+0x3a>
    status = HAL_BUSY;
 8011c86:	f04f 0b02 	mov.w	fp, #2
  __HAL_UNLOCK(hqspi);
 8011c8a:	2300      	movs	r3, #0
}
 8011c8c:	4658      	mov	r0, fp
  __HAL_UNLOCK(hqspi);
 8011c8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8011c92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011c96:	2300      	movs	r3, #0
 8011c98:	4682      	mov	sl, r0
 8011c9a:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8011c9c:	2342      	movs	r3, #66	; 0x42
 8011c9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011ca2:	1c7a      	adds	r2, r7, #1
 8011ca4:	6826      	ldr	r6, [r4, #0]
 8011ca6:	d12c      	bne.n	8011d02 <HAL_QSPI_AutoPolling+0xa6>
 8011ca8:	68b5      	ldr	r5, [r6, #8]
 8011caa:	06ab      	lsls	r3, r5, #26
 8011cac:	d4fc      	bmi.n	8011ca8 <HAL_QSPI_AutoPolling+0x4c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8011cae:	f8d8 3000 	ldr.w	r3, [r8]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8011cb2:	4649      	mov	r1, r9
 8011cb4:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8011cb6:	62b3      	str	r3, [r6, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8011cb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011cbc:	6273      	str	r3, [r6, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8011cbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011cc2:	62f3      	str	r3, [r6, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8011cc4:	6832      	ldr	r2, [r6, #0]
 8011cc6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011cca:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8011cce:	4313      	orrs	r3, r2
      cmd->NbData = cfg->StatusBytesSize;
 8011cd0:	f8d8 200c 	ldr.w	r2, [r8, #12]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8011cd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011cd8:	6033      	str	r3, [r6, #0]
      cmd->NbData = cfg->StatusBytesSize;
 8011cda:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8011cde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011ce2:	f7ff fd37 	bl	8011754 <QSPI_Config>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011ce6:	1c78      	adds	r0, r7, #1
 8011ce8:	6822      	ldr	r2, [r4, #0]
 8011cea:	d11b      	bne.n	8011d24 <HAL_QSPI_AutoPolling+0xc8>
 8011cec:	6893      	ldr	r3, [r2, #8]
 8011cee:	0719      	lsls	r1, r3, #28
 8011cf0:	d5fc      	bpl.n	8011cec <HAL_QSPI_AutoPolling+0x90>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8011cf2:	2108      	movs	r1, #8
        hqspi->State = HAL_QSPI_STATE_READY;
 8011cf4:	2301      	movs	r3, #1
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8011cf6:	f04f 0b00 	mov.w	fp, #0
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8011cfa:	60d1      	str	r1, [r2, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8011cfc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011d00:	e7c3      	b.n	8011c8a <HAL_QSPI_AutoPolling+0x2e>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011d02:	68b3      	ldr	r3, [r6, #8]
 8011d04:	069d      	lsls	r5, r3, #26
 8011d06:	d5d2      	bpl.n	8011cae <HAL_QSPI_AutoPolling+0x52>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d08:	f7fb fe86 	bl	800da18 <HAL_GetTick>
 8011d0c:	eba0 000a 	sub.w	r0, r0, sl
 8011d10:	4287      	cmp	r7, r0
 8011d12:	d312      	bcc.n	8011d3a <HAL_QSPI_AutoPolling+0xde>
 8011d14:	2f00      	cmp	r7, #0
 8011d16:	d1c4      	bne.n	8011ca2 <HAL_QSPI_AutoPolling+0x46>
 8011d18:	e00f      	b.n	8011d3a <HAL_QSPI_AutoPolling+0xde>
  __HAL_LOCK(hqspi);
 8011d1a:	f04f 0b02 	mov.w	fp, #2
}
 8011d1e:	4658      	mov	r0, fp
 8011d20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011d24:	6893      	ldr	r3, [r2, #8]
 8011d26:	071b      	lsls	r3, r3, #28
 8011d28:	d4e3      	bmi.n	8011cf2 <HAL_QSPI_AutoPolling+0x96>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d2a:	f7fb fe75 	bl	800da18 <HAL_GetTick>
 8011d2e:	eba0 000a 	sub.w	r0, r0, sl
 8011d32:	4287      	cmp	r7, r0
 8011d34:	d301      	bcc.n	8011d3a <HAL_QSPI_AutoPolling+0xde>
 8011d36:	2f00      	cmp	r7, #0
 8011d38:	d1d5      	bne.n	8011ce6 <HAL_QSPI_AutoPolling+0x8a>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011d3a:	2304      	movs	r3, #4
 8011d3c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011d40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011d42:	f043 0301 	orr.w	r3, r3, #1
 8011d46:	6463      	str	r3, [r4, #68]	; 0x44
      if (status == HAL_OK)
 8011d48:	e79f      	b.n	8011c8a <HAL_QSPI_AutoPolling+0x2e>
 8011d4a:	bf00      	nop

08011d4c <HAL_QSPI_MemoryMapped>:
{
 8011d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d50:	4604      	mov	r4, r0
 8011d52:	460f      	mov	r7, r1
 8011d54:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8011d56:	f7fb fe5f 	bl	800da18 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8011d5a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011d5e:	2b01      	cmp	r3, #1
 8011d60:	d045      	beq.n	8011dee <HAL_QSPI_MemoryMapped+0xa2>
 8011d62:	2301      	movs	r3, #1
 8011d64:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8011d68:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	fa5f f983 	uxtb.w	r9, r3
 8011d72:	d007      	beq.n	8011d84 <HAL_QSPI_MemoryMapped+0x38>
    status = HAL_BUSY;
 8011d74:	f04f 0902 	mov.w	r9, #2
  __HAL_UNLOCK(hqspi);
 8011d78:	2300      	movs	r3, #0
}
 8011d7a:	4648      	mov	r0, r9
  __HAL_UNLOCK(hqspi);
 8011d7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8011d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011d84:	2300      	movs	r3, #0
 8011d86:	4680      	mov	r8, r0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8011d88:	f8d4 a048 	ldr.w	sl, [r4, #72]	; 0x48
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011d8c:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8011d8e:	2382      	movs	r3, #130	; 0x82
 8011d90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011d94:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011d98:	6825      	ldr	r5, [r4, #0]
 8011d9a:	d114      	bne.n	8011dc6 <HAL_QSPI_MemoryMapped+0x7a>
 8011d9c:	68ab      	ldr	r3, [r5, #8]
 8011d9e:	069a      	lsls	r2, r3, #26
 8011da0:	d4fc      	bmi.n	8011d9c <HAL_QSPI_MemoryMapped+0x50>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8011da2:	682b      	ldr	r3, [r5, #0]
 8011da4:	6872      	ldr	r2, [r6, #4]
 8011da6:	f023 0308 	bic.w	r3, r3, #8
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8011daa:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8011dac:	ea43 0302 	orr.w	r3, r3, r2
 8011db0:	602b      	str	r3, [r5, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8011db2:	d021      	beq.n	8011df8 <HAL_QSPI_MemoryMapped+0xac>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8011db4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8011db8:	4639      	mov	r1, r7
 8011dba:	4620      	mov	r0, r4
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8011dbc:	f04f 0900 	mov.w	r9, #0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8011dc0:	f7ff fcc8 	bl	8011754 <QSPI_Config>
 8011dc4:	e7d8      	b.n	8011d78 <HAL_QSPI_MemoryMapped+0x2c>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011dc6:	68ab      	ldr	r3, [r5, #8]
 8011dc8:	069b      	lsls	r3, r3, #26
 8011dca:	d5ea      	bpl.n	8011da2 <HAL_QSPI_MemoryMapped+0x56>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011dcc:	f7fb fe24 	bl	800da18 <HAL_GetTick>
 8011dd0:	eba0 0008 	sub.w	r0, r0, r8
 8011dd4:	4582      	cmp	sl, r0
 8011dd6:	d302      	bcc.n	8011dde <HAL_QSPI_MemoryMapped+0x92>
 8011dd8:	f1ba 0f00 	cmp.w	sl, #0
 8011ddc:	d1da      	bne.n	8011d94 <HAL_QSPI_MemoryMapped+0x48>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011dde:	2304      	movs	r3, #4
 8011de0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011de4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011de6:	f043 0301 	orr.w	r3, r3, #1
 8011dea:	6463      	str	r3, [r4, #68]	; 0x44
    if (status == HAL_OK)
 8011dec:	e7c4      	b.n	8011d78 <HAL_QSPI_MemoryMapped+0x2c>
  __HAL_LOCK(hqspi);
 8011dee:	f04f 0902 	mov.w	r9, #2
}
 8011df2:	4648      	mov	r0, r9
 8011df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8011df8:	6832      	ldr	r2, [r6, #0]
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8011dfa:	2310      	movs	r3, #16
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8011dfc:	632a      	str	r2, [r5, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8011dfe:	60eb      	str	r3, [r5, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8011e00:	682b      	ldr	r3, [r5, #0]
 8011e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e06:	602b      	str	r3, [r5, #0]
 8011e08:	e7d4      	b.n	8011db4 <HAL_QSPI_MemoryMapped+0x68>
 8011e0a:	bf00      	nop

08011e0c <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011e0c:	4b3b      	ldr	r3, [pc, #236]	; (8011efc <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8011e0e:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8011e12:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011e14:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8011e16:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8011e1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8011e1c:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8011e20:	d038      	beq.n	8011e94 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8011e22:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011e26:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011e2a:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8011e2e:	fb05 f101 	mul.w	r1, r5, r1
 8011e32:	2a01      	cmp	r2, #1
 8011e34:	ee07 1a90 	vmov	s15, r1
 8011e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8011e3c:	d002      	beq.n	8011e44 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8011e3e:	2a02      	cmp	r2, #2
 8011e40:	d04e      	beq.n	8011ee0 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8011e42:	b34a      	cbz	r2, 8011e98 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011e44:	ee07 0a90 	vmov	s15, r0
 8011e48:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8011f00 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8011e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e52:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8011e56:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8011f04 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8011e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e5e:	ee06 3a90 	vmov	s13, r3
 8011e62:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8011e66:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011e6a:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011e6e:	eee7 6a25 	vfma.f32	s13, s14, s11
 8011e72:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8011e76:	4b21      	ldr	r3, [pc, #132]	; (8011efc <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8011e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e7a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8011e7e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8011e80:	ee07 3a90 	vmov	s15, r3
 8011e84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011e90:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8011e94:	bc30      	pop	{r4, r5}
 8011e96:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011e98:	681a      	ldr	r2, [r3, #0]
 8011e9a:	0692      	lsls	r2, r2, #26
 8011e9c:	d527      	bpl.n	8011eee <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011e9e:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011ea0:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011ea4:	4a18      	ldr	r2, [pc, #96]	; (8011f08 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011ea6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011eac:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011eb4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8011f04 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8011eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011ebc:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011ebe:	ee06 3a90 	vmov	s13, r3
 8011ec2:	ee05 2a90 	vmov	s11, r2
 8011ec6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011eca:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8011ece:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011ed2:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8011ed6:	eee7 6a05 	vfma.f32	s13, s14, s10
 8011eda:	ee66 6a26 	vmul.f32	s13, s12, s13
 8011ede:	e7ca      	b.n	8011e76 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011ee0:	ee07 0a90 	vmov	s15, r0
 8011ee4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8011f0c <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8011ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011eec:	e7b0      	b.n	8011e50 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011eee:	ee07 0a90 	vmov	s15, r0
 8011ef2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8011f10 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8011ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011efa:	e7a9      	b.n	8011e50 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8011efc:	58024400 	.word	0x58024400
 8011f00:	4a742400 	.word	0x4a742400
 8011f04:	39000000 	.word	0x39000000
 8011f08:	03d09000 	.word	0x03d09000
 8011f0c:	4bbebc20 	.word	0x4bbebc20
 8011f10:	4c742400 	.word	0x4c742400

08011f14 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8011f14:	2800      	cmp	r0, #0
 8011f16:	f000 81eb 	beq.w	80122f0 <HAL_RCC_OscConfig+0x3dc>
{
 8011f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011f1c:	6803      	ldr	r3, [r0, #0]
 8011f1e:	4604      	mov	r4, r0
 8011f20:	07d9      	lsls	r1, r3, #31
 8011f22:	d530      	bpl.n	8011f86 <HAL_RCC_OscConfig+0x72>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011f24:	49a0      	ldr	r1, [pc, #640]	; (80121a8 <HAL_RCC_OscConfig+0x294>)
 8011f26:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011f28:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011f2a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8011f2e:	2a10      	cmp	r2, #16
 8011f30:	f000 8127 	beq.w	8012182 <HAL_RCC_OscConfig+0x26e>
 8011f34:	2a18      	cmp	r2, #24
 8011f36:	f000 811f 	beq.w	8012178 <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011f3a:	6863      	ldr	r3, [r4, #4]
 8011f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f40:	f000 8161 	beq.w	8012206 <HAL_RCC_OscConfig+0x2f2>
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	f000 8179 	beq.w	801223c <HAL_RCC_OscConfig+0x328>
 8011f4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011f4e:	4b96      	ldr	r3, [pc, #600]	; (80121a8 <HAL_RCC_OscConfig+0x294>)
 8011f50:	681a      	ldr	r2, [r3, #0]
 8011f52:	f000 826c 	beq.w	801242e <HAL_RCC_OscConfig+0x51a>
 8011f56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011f5a:	601a      	str	r2, [r3, #0]
 8011f5c:	681a      	ldr	r2, [r3, #0]
 8011f5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011f62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011f64:	f7fb fd58 	bl	800da18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011f68:	4e8f      	ldr	r6, [pc, #572]	; (80121a8 <HAL_RCC_OscConfig+0x294>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011f6a:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8011f6e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011f70:	e005      	b.n	8011f7e <HAL_RCC_OscConfig+0x6a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011f72:	f7fb fd51 	bl	800da18 <HAL_GetTick>
 8011f76:	1b40      	subs	r0, r0, r5
 8011f78:	42b8      	cmp	r0, r7
 8011f7a:	f200 815d 	bhi.w	8012238 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011f7e:	6833      	ldr	r3, [r6, #0]
 8011f80:	039b      	lsls	r3, r3, #14
 8011f82:	d5f6      	bpl.n	8011f72 <HAL_RCC_OscConfig+0x5e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011f84:	6823      	ldr	r3, [r4, #0]
 8011f86:	0799      	lsls	r1, r3, #30
 8011f88:	d521      	bpl.n	8011fce <HAL_RCC_OscConfig+0xba>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011f8a:	4a87      	ldr	r2, [pc, #540]	; (80121a8 <HAL_RCC_OscConfig+0x294>)
 8011f8c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011f8e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011f90:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8011f94:	f040 80a4 	bne.w	80120e0 <HAL_RCC_OscConfig+0x1cc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011f98:	4b83      	ldr	r3, [pc, #524]	; (80121a8 <HAL_RCC_OscConfig+0x294>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	075b      	lsls	r3, r3, #29
 8011f9e:	d503      	bpl.n	8011fa8 <HAL_RCC_OscConfig+0x94>
 8011fa0:	68e3      	ldr	r3, [r4, #12]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f000 80e6 	beq.w	8012174 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011fa8:	f7fb fd4e 	bl	800da48 <HAL_GetREVID>
 8011fac:	f241 0303 	movw	r3, #4099	; 0x1003
 8011fb0:	4298      	cmp	r0, r3
 8011fb2:	f200 817e 	bhi.w	80122b2 <HAL_RCC_OscConfig+0x39e>
 8011fb6:	6922      	ldr	r2, [r4, #16]
 8011fb8:	2a40      	cmp	r2, #64	; 0x40
 8011fba:	f000 8240 	beq.w	801243e <HAL_RCC_OscConfig+0x52a>
 8011fbe:	497a      	ldr	r1, [pc, #488]	; (80121a8 <HAL_RCC_OscConfig+0x294>)
 8011fc0:	684b      	ldr	r3, [r1, #4]
 8011fc2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8011fc6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8011fca:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8011fcc:	6823      	ldr	r3, [r4, #0]
 8011fce:	06d9      	lsls	r1, r3, #27
 8011fd0:	d453      	bmi.n	801207a <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011fd2:	071d      	lsls	r5, r3, #28
 8011fd4:	d516      	bpl.n	8012004 <HAL_RCC_OscConfig+0xf0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011fd6:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8011fd8:	4d73      	ldr	r5, [pc, #460]	; (80121a8 <HAL_RCC_OscConfig+0x294>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	f000 80ae 	beq.w	801213c <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_LSI_ENABLE();
 8011fe0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8011fe2:	f043 0301 	orr.w	r3, r3, #1
 8011fe6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8011fe8:	f7fb fd16 	bl	800da18 <HAL_GetTick>
 8011fec:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011fee:	e005      	b.n	8011ffc <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011ff0:	f7fb fd12 	bl	800da18 <HAL_GetTick>
 8011ff4:	1b80      	subs	r0, r0, r6
 8011ff6:	2802      	cmp	r0, #2
 8011ff8:	f200 811e 	bhi.w	8012238 <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011ffc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8011ffe:	0798      	lsls	r0, r3, #30
 8012000:	d5f6      	bpl.n	8011ff0 <HAL_RCC_OscConfig+0xdc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012002:	6823      	ldr	r3, [r4, #0]
 8012004:	069a      	lsls	r2, r3, #26
 8012006:	d516      	bpl.n	8012036 <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8012008:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 801200a:	4d67      	ldr	r5, [pc, #412]	; (80121a8 <HAL_RCC_OscConfig+0x294>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 801200c:	2b00      	cmp	r3, #0
 801200e:	f000 812d 	beq.w	801226c <HAL_RCC_OscConfig+0x358>
      __HAL_RCC_HSI48_ENABLE();
 8012012:	682b      	ldr	r3, [r5, #0]
 8012014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012018:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 801201a:	f7fb fcfd 	bl	800da18 <HAL_GetTick>
 801201e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8012020:	e005      	b.n	801202e <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8012022:	f7fb fcf9 	bl	800da18 <HAL_GetTick>
 8012026:	1b80      	subs	r0, r0, r6
 8012028:	2802      	cmp	r0, #2
 801202a:	f200 8105 	bhi.w	8012238 <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801202e:	682b      	ldr	r3, [r5, #0]
 8012030:	049f      	lsls	r7, r3, #18
 8012032:	d5f6      	bpl.n	8012022 <HAL_RCC_OscConfig+0x10e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012034:	6823      	ldr	r3, [r4, #0]
 8012036:	0759      	lsls	r1, r3, #29
 8012038:	f100 80ad 	bmi.w	8012196 <HAL_RCC_OscConfig+0x282>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801203c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801203e:	b1d0      	cbz	r0, 8012076 <HAL_RCC_OscConfig+0x162>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8012040:	4d59      	ldr	r5, [pc, #356]	; (80121a8 <HAL_RCC_OscConfig+0x294>)
 8012042:	692b      	ldr	r3, [r5, #16]
 8012044:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012048:	2b18      	cmp	r3, #24
 801204a:	f000 81c2 	beq.w	80123d2 <HAL_RCC_OscConfig+0x4be>
        __HAL_RCC_PLL_DISABLE();
 801204e:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012050:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8012052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012056:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012058:	f000 8156 	beq.w	8012308 <HAL_RCC_OscConfig+0x3f4>
        tickstart = HAL_GetTick();
 801205c:	f7fb fcdc 	bl	800da18 <HAL_GetTick>
 8012060:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012062:	e005      	b.n	8012070 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012064:	f7fb fcd8 	bl	800da18 <HAL_GetTick>
 8012068:	1b00      	subs	r0, r0, r4
 801206a:	2802      	cmp	r0, #2
 801206c:	f200 80e4 	bhi.w	8012238 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012070:	682b      	ldr	r3, [r5, #0]
 8012072:	019b      	lsls	r3, r3, #6
 8012074:	d4f6      	bmi.n	8012064 <HAL_RCC_OscConfig+0x150>
  return HAL_OK;
 8012076:	2000      	movs	r0, #0
}
 8012078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801207a:	4a4b      	ldr	r2, [pc, #300]	; (80121a8 <HAL_RCC_OscConfig+0x294>)
 801207c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801207e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012080:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8012084:	2b08      	cmp	r3, #8
 8012086:	d06e      	beq.n	8012166 <HAL_RCC_OscConfig+0x252>
 8012088:	2b18      	cmp	r3, #24
 801208a:	d068      	beq.n	801215e <HAL_RCC_OscConfig+0x24a>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 801208c:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 801208e:	4d46      	ldr	r5, [pc, #280]	; (80121a8 <HAL_RCC_OscConfig+0x294>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8012090:	2b00      	cmp	r3, #0
 8012092:	f000 80fc 	beq.w	801228e <HAL_RCC_OscConfig+0x37a>
        __HAL_RCC_CSI_ENABLE();
 8012096:	682b      	ldr	r3, [r5, #0]
 8012098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801209c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801209e:	f7fb fcbb 	bl	800da18 <HAL_GetTick>
 80120a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80120a4:	e005      	b.n	80120b2 <HAL_RCC_OscConfig+0x19e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80120a6:	f7fb fcb7 	bl	800da18 <HAL_GetTick>
 80120aa:	1b80      	subs	r0, r0, r6
 80120ac:	2802      	cmp	r0, #2
 80120ae:	f200 80c3 	bhi.w	8012238 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80120b2:	682b      	ldr	r3, [r5, #0]
 80120b4:	05db      	lsls	r3, r3, #23
 80120b6:	d5f6      	bpl.n	80120a6 <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80120b8:	f7fb fcc6 	bl	800da48 <HAL_GetREVID>
 80120bc:	f241 0303 	movw	r3, #4099	; 0x1003
 80120c0:	4298      	cmp	r0, r3
 80120c2:	f200 81e5 	bhi.w	8012490 <HAL_RCC_OscConfig+0x57c>
 80120c6:	6a22      	ldr	r2, [r4, #32]
 80120c8:	686b      	ldr	r3, [r5, #4]
 80120ca:	2a20      	cmp	r2, #32
 80120cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80120d0:	bf0c      	ite	eq
 80120d2:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80120d6:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80120da:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80120dc:	6823      	ldr	r3, [r4, #0]
 80120de:	e778      	b.n	8011fd2 <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80120e0:	2b18      	cmp	r3, #24
 80120e2:	f000 8101 	beq.w	80122e8 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80120e6:	4d30      	ldr	r5, [pc, #192]	; (80121a8 <HAL_RCC_OscConfig+0x294>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80120e8:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80120ea:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80120ec:	2a00      	cmp	r2, #0
 80120ee:	f000 80ea 	beq.w	80122c6 <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80120f2:	f023 0319 	bic.w	r3, r3, #25
 80120f6:	4313      	orrs	r3, r2
 80120f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80120fa:	f7fb fc8d 	bl	800da18 <HAL_GetTick>
 80120fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012100:	e005      	b.n	801210e <HAL_RCC_OscConfig+0x1fa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012102:	f7fb fc89 	bl	800da18 <HAL_GetTick>
 8012106:	1b80      	subs	r0, r0, r6
 8012108:	2802      	cmp	r0, #2
 801210a:	f200 8095 	bhi.w	8012238 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801210e:	682b      	ldr	r3, [r5, #0]
 8012110:	075f      	lsls	r7, r3, #29
 8012112:	d5f6      	bpl.n	8012102 <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012114:	f7fb fc98 	bl	800da48 <HAL_GetREVID>
 8012118:	f241 0303 	movw	r3, #4099	; 0x1003
 801211c:	4298      	cmp	r0, r3
 801211e:	f200 81c0 	bhi.w	80124a2 <HAL_RCC_OscConfig+0x58e>
 8012122:	6922      	ldr	r2, [r4, #16]
 8012124:	686b      	ldr	r3, [r5, #4]
 8012126:	2a40      	cmp	r2, #64	; 0x40
 8012128:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801212c:	bf0c      	ite	eq
 801212e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8012132:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8012136:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8012138:	6823      	ldr	r3, [r4, #0]
 801213a:	e748      	b.n	8011fce <HAL_RCC_OscConfig+0xba>
      __HAL_RCC_LSI_DISABLE();
 801213c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801213e:	f023 0301 	bic.w	r3, r3, #1
 8012142:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8012144:	f7fb fc68 	bl	800da18 <HAL_GetTick>
 8012148:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801214a:	e004      	b.n	8012156 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801214c:	f7fb fc64 	bl	800da18 <HAL_GetTick>
 8012150:	1b80      	subs	r0, r0, r6
 8012152:	2802      	cmp	r0, #2
 8012154:	d870      	bhi.n	8012238 <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012156:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8012158:	0799      	lsls	r1, r3, #30
 801215a:	d4f7      	bmi.n	801214c <HAL_RCC_OscConfig+0x238>
 801215c:	e751      	b.n	8012002 <HAL_RCC_OscConfig+0xee>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801215e:	f002 0203 	and.w	r2, r2, #3
 8012162:	2a01      	cmp	r2, #1
 8012164:	d192      	bne.n	801208c <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8012166:	4b10      	ldr	r3, [pc, #64]	; (80121a8 <HAL_RCC_OscConfig+0x294>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	05da      	lsls	r2, r3, #23
 801216c:	d551      	bpl.n	8012212 <HAL_RCC_OscConfig+0x2fe>
 801216e:	69e3      	ldr	r3, [r4, #28]
 8012170:	2b80      	cmp	r3, #128	; 0x80
 8012172:	d04e      	beq.n	8012212 <HAL_RCC_OscConfig+0x2fe>
        return HAL_ERROR;
 8012174:	2001      	movs	r0, #1
}
 8012176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8012178:	f001 0103 	and.w	r1, r1, #3
 801217c:	2902      	cmp	r1, #2
 801217e:	f47f aedc 	bne.w	8011f3a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012182:	4a09      	ldr	r2, [pc, #36]	; (80121a8 <HAL_RCC_OscConfig+0x294>)
 8012184:	6812      	ldr	r2, [r2, #0]
 8012186:	0392      	lsls	r2, r2, #14
 8012188:	f57f aefd 	bpl.w	8011f86 <HAL_RCC_OscConfig+0x72>
 801218c:	6862      	ldr	r2, [r4, #4]
 801218e:	2a00      	cmp	r2, #0
 8012190:	f47f aef9 	bne.w	8011f86 <HAL_RCC_OscConfig+0x72>
 8012194:	e7ee      	b.n	8012174 <HAL_RCC_OscConfig+0x260>
    PWR->CR1 |= PWR_CR1_DBP;
 8012196:	4d05      	ldr	r5, [pc, #20]	; (80121ac <HAL_RCC_OscConfig+0x298>)
 8012198:	682b      	ldr	r3, [r5, #0]
 801219a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801219e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80121a0:	f7fb fc3a 	bl	800da18 <HAL_GetTick>
 80121a4:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80121a6:	e008      	b.n	80121ba <HAL_RCC_OscConfig+0x2a6>
 80121a8:	58024400 	.word	0x58024400
 80121ac:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80121b0:	f7fb fc32 	bl	800da18 <HAL_GetTick>
 80121b4:	1b80      	subs	r0, r0, r6
 80121b6:	2864      	cmp	r0, #100	; 0x64
 80121b8:	d83e      	bhi.n	8012238 <HAL_RCC_OscConfig+0x324>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80121ba:	682b      	ldr	r3, [r5, #0]
 80121bc:	05da      	lsls	r2, r3, #23
 80121be:	d5f7      	bpl.n	80121b0 <HAL_RCC_OscConfig+0x29c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80121c0:	68a3      	ldr	r3, [r4, #8]
 80121c2:	2b01      	cmp	r3, #1
 80121c4:	f000 8176 	beq.w	80124b4 <HAL_RCC_OscConfig+0x5a0>
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	f000 8141 	beq.w	8012450 <HAL_RCC_OscConfig+0x53c>
 80121ce:	2b05      	cmp	r3, #5
 80121d0:	4ba7      	ldr	r3, [pc, #668]	; (8012470 <HAL_RCC_OscConfig+0x55c>)
 80121d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80121d4:	f000 817d 	beq.w	80124d2 <HAL_RCC_OscConfig+0x5be>
 80121d8:	f022 0201 	bic.w	r2, r2, #1
 80121dc:	671a      	str	r2, [r3, #112]	; 0x70
 80121de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80121e0:	f022 0204 	bic.w	r2, r2, #4
 80121e4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80121e6:	f7fb fc17 	bl	800da18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80121ea:	4ea1      	ldr	r6, [pc, #644]	; (8012470 <HAL_RCC_OscConfig+0x55c>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80121ec:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80121f0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80121f2:	e004      	b.n	80121fe <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80121f4:	f7fb fc10 	bl	800da18 <HAL_GetTick>
 80121f8:	1b40      	subs	r0, r0, r5
 80121fa:	42b8      	cmp	r0, r7
 80121fc:	d81c      	bhi.n	8012238 <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80121fe:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8012200:	079b      	lsls	r3, r3, #30
 8012202:	d5f7      	bpl.n	80121f4 <HAL_RCC_OscConfig+0x2e0>
 8012204:	e71a      	b.n	801203c <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012206:	4a9a      	ldr	r2, [pc, #616]	; (8012470 <HAL_RCC_OscConfig+0x55c>)
 8012208:	6813      	ldr	r3, [r2, #0]
 801220a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801220e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012210:	e6a8      	b.n	8011f64 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012212:	f7fb fc19 	bl	800da48 <HAL_GetREVID>
 8012216:	f241 0303 	movw	r3, #4099	; 0x1003
 801221a:	4298      	cmp	r0, r3
 801221c:	d86a      	bhi.n	80122f4 <HAL_RCC_OscConfig+0x3e0>
 801221e:	6a22      	ldr	r2, [r4, #32]
 8012220:	2a20      	cmp	r2, #32
 8012222:	f000 814d 	beq.w	80124c0 <HAL_RCC_OscConfig+0x5ac>
 8012226:	4992      	ldr	r1, [pc, #584]	; (8012470 <HAL_RCC_OscConfig+0x55c>)
 8012228:	684b      	ldr	r3, [r1, #4]
 801222a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801222e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8012232:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012234:	6823      	ldr	r3, [r4, #0]
 8012236:	e6cc      	b.n	8011fd2 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 8012238:	2003      	movs	r0, #3
}
 801223a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801223c:	4d8c      	ldr	r5, [pc, #560]	; (8012470 <HAL_RCC_OscConfig+0x55c>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801223e:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012242:	682b      	ldr	r3, [r5, #0]
 8012244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012248:	602b      	str	r3, [r5, #0]
 801224a:	682b      	ldr	r3, [r5, #0]
 801224c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012250:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8012252:	f7fb fbe1 	bl	800da18 <HAL_GetTick>
 8012256:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012258:	e004      	b.n	8012264 <HAL_RCC_OscConfig+0x350>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801225a:	f7fb fbdd 	bl	800da18 <HAL_GetTick>
 801225e:	1b80      	subs	r0, r0, r6
 8012260:	42b8      	cmp	r0, r7
 8012262:	d8e9      	bhi.n	8012238 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012264:	682b      	ldr	r3, [r5, #0]
 8012266:	0398      	lsls	r0, r3, #14
 8012268:	d4f7      	bmi.n	801225a <HAL_RCC_OscConfig+0x346>
 801226a:	e68b      	b.n	8011f84 <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_HSI48_DISABLE();
 801226c:	682b      	ldr	r3, [r5, #0]
 801226e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012272:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8012274:	f7fb fbd0 	bl	800da18 <HAL_GetTick>
 8012278:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801227a:	e004      	b.n	8012286 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801227c:	f7fb fbcc 	bl	800da18 <HAL_GetTick>
 8012280:	1b80      	subs	r0, r0, r6
 8012282:	2802      	cmp	r0, #2
 8012284:	d8d8      	bhi.n	8012238 <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012286:	682b      	ldr	r3, [r5, #0]
 8012288:	0498      	lsls	r0, r3, #18
 801228a:	d4f7      	bmi.n	801227c <HAL_RCC_OscConfig+0x368>
 801228c:	e6d2      	b.n	8012034 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 801228e:	682b      	ldr	r3, [r5, #0]
 8012290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012294:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8012296:	f7fb fbbf 	bl	800da18 <HAL_GetTick>
 801229a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801229c:	e004      	b.n	80122a8 <HAL_RCC_OscConfig+0x394>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 801229e:	f7fb fbbb 	bl	800da18 <HAL_GetTick>
 80122a2:	1b80      	subs	r0, r0, r6
 80122a4:	2802      	cmp	r0, #2
 80122a6:	d8c7      	bhi.n	8012238 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80122a8:	682b      	ldr	r3, [r5, #0]
 80122aa:	05df      	lsls	r7, r3, #23
 80122ac:	d4f7      	bmi.n	801229e <HAL_RCC_OscConfig+0x38a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80122ae:	6823      	ldr	r3, [r4, #0]
 80122b0:	e68f      	b.n	8011fd2 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80122b2:	4a6f      	ldr	r2, [pc, #444]	; (8012470 <HAL_RCC_OscConfig+0x55c>)
 80122b4:	6921      	ldr	r1, [r4, #16]
 80122b6:	6853      	ldr	r3, [r2, #4]
 80122b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80122bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80122c0:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80122c2:	6823      	ldr	r3, [r4, #0]
 80122c4:	e683      	b.n	8011fce <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_DISABLE();
 80122c6:	f023 0301 	bic.w	r3, r3, #1
 80122ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80122cc:	f7fb fba4 	bl	800da18 <HAL_GetTick>
 80122d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80122d2:	e004      	b.n	80122de <HAL_RCC_OscConfig+0x3ca>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80122d4:	f7fb fba0 	bl	800da18 <HAL_GetTick>
 80122d8:	1b80      	subs	r0, r0, r6
 80122da:	2802      	cmp	r0, #2
 80122dc:	d8ac      	bhi.n	8012238 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80122de:	682b      	ldr	r3, [r5, #0]
 80122e0:	0758      	lsls	r0, r3, #29
 80122e2:	d4f7      	bmi.n	80122d4 <HAL_RCC_OscConfig+0x3c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80122e4:	6823      	ldr	r3, [r4, #0]
 80122e6:	e672      	b.n	8011fce <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80122e8:	0792      	lsls	r2, r2, #30
 80122ea:	f47f aefc 	bne.w	80120e6 <HAL_RCC_OscConfig+0x1d2>
 80122ee:	e653      	b.n	8011f98 <HAL_RCC_OscConfig+0x84>
    return HAL_ERROR;
 80122f0:	2001      	movs	r0, #1
}
 80122f2:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80122f4:	4a5e      	ldr	r2, [pc, #376]	; (8012470 <HAL_RCC_OscConfig+0x55c>)
 80122f6:	6a21      	ldr	r1, [r4, #32]
 80122f8:	68d3      	ldr	r3, [r2, #12]
 80122fa:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80122fe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8012302:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012304:	6823      	ldr	r3, [r4, #0]
 8012306:	e664      	b.n	8011fd2 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8012308:	f7fb fb86 	bl	800da18 <HAL_GetTick>
 801230c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801230e:	e004      	b.n	801231a <HAL_RCC_OscConfig+0x406>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012310:	f7fb fb82 	bl	800da18 <HAL_GetTick>
 8012314:	1b80      	subs	r0, r0, r6
 8012316:	2802      	cmp	r0, #2
 8012318:	d88e      	bhi.n	8012238 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801231a:	682b      	ldr	r3, [r5, #0]
 801231c:	0199      	lsls	r1, r3, #6
 801231e:	d4f7      	bmi.n	8012310 <HAL_RCC_OscConfig+0x3fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012320:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8012322:	4b54      	ldr	r3, [pc, #336]	; (8012474 <HAL_RCC_OscConfig+0x560>)
 8012324:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012326:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8012328:	4953      	ldr	r1, [pc, #332]	; (8012478 <HAL_RCC_OscConfig+0x564>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801232a:	4e51      	ldr	r6, [pc, #324]	; (8012470 <HAL_RCC_OscConfig+0x55c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801232c:	4313      	orrs	r3, r2
 801232e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012330:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8012334:	62ab      	str	r3, [r5, #40]	; 0x28
 8012336:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 801233a:	3b01      	subs	r3, #1
 801233c:	3a01      	subs	r2, #1
 801233e:	025b      	lsls	r3, r3, #9
 8012340:	0412      	lsls	r2, r2, #16
 8012342:	b29b      	uxth	r3, r3
 8012344:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8012348:	4313      	orrs	r3, r2
 801234a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801234c:	3a01      	subs	r2, #1
 801234e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012352:	4313      	orrs	r3, r2
 8012354:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012356:	3a01      	subs	r2, #1
 8012358:	0612      	lsls	r2, r2, #24
 801235a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 801235e:	4313      	orrs	r3, r2
 8012360:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8012362:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8012364:	f023 0301 	bic.w	r3, r3, #1
 8012368:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801236a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 801236c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801236e:	4011      	ands	r1, r2
 8012370:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8012374:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8012376:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8012378:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801237a:	f023 030c 	bic.w	r3, r3, #12
 801237e:	4313      	orrs	r3, r2
 8012380:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8012382:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8012384:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8012386:	f023 0302 	bic.w	r3, r3, #2
 801238a:	4313      	orrs	r3, r2
 801238c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801238e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8012390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012394:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012396:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8012398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801239c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801239e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80123a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80123a4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80123a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80123a8:	f043 0301 	orr.w	r3, r3, #1
 80123ac:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80123ae:	682b      	ldr	r3, [r5, #0]
 80123b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80123b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80123b6:	f7fb fb2f 	bl	800da18 <HAL_GetTick>
 80123ba:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80123bc:	e005      	b.n	80123ca <HAL_RCC_OscConfig+0x4b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80123be:	f7fb fb2b 	bl	800da18 <HAL_GetTick>
 80123c2:	1b00      	subs	r0, r0, r4
 80123c4:	2802      	cmp	r0, #2
 80123c6:	f63f af37 	bhi.w	8012238 <HAL_RCC_OscConfig+0x324>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80123ca:	6833      	ldr	r3, [r6, #0]
 80123cc:	019a      	lsls	r2, r3, #6
 80123ce:	d5f6      	bpl.n	80123be <HAL_RCC_OscConfig+0x4aa>
 80123d0:	e651      	b.n	8012076 <HAL_RCC_OscConfig+0x162>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80123d2:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80123d4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80123d6:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80123d8:	f43f ae4e 	beq.w	8012078 <HAL_RCC_OscConfig+0x164>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80123dc:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80123e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80123e2:	428b      	cmp	r3, r1
 80123e4:	f47f aec6 	bne.w	8012174 <HAL_RCC_OscConfig+0x260>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80123e8:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80123ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80123ee:	429a      	cmp	r2, r3
 80123f0:	f47f aec0 	bne.w	8012174 <HAL_RCC_OscConfig+0x260>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80123f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80123f6:	f3c5 0208 	ubfx	r2, r5, #0, #9
 80123fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80123fc:	429a      	cmp	r2, r3
 80123fe:	f47f aeb9 	bne.w	8012174 <HAL_RCC_OscConfig+0x260>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012404:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8012408:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801240a:	429a      	cmp	r2, r3
 801240c:	f47f aeb2 	bne.w	8012174 <HAL_RCC_OscConfig+0x260>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012410:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012412:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8012416:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012418:	429a      	cmp	r2, r3
 801241a:	f47f aeab 	bne.w	8012174 <HAL_RCC_OscConfig+0x260>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801241e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012420:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8012424:	3801      	subs	r0, #1
  return HAL_OK;
 8012426:	1a28      	subs	r0, r5, r0
 8012428:	bf18      	it	ne
 801242a:	2001      	movne	r0, #1
}
 801242c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801242e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8012432:	601a      	str	r2, [r3, #0]
 8012434:	681a      	ldr	r2, [r3, #0]
 8012436:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801243a:	601a      	str	r2, [r3, #0]
 801243c:	e592      	b.n	8011f64 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801243e:	4a0c      	ldr	r2, [pc, #48]	; (8012470 <HAL_RCC_OscConfig+0x55c>)
 8012440:	6853      	ldr	r3, [r2, #4]
 8012442:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8012446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801244a:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801244c:	6823      	ldr	r3, [r4, #0]
 801244e:	e5be      	b.n	8011fce <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012450:	4d07      	ldr	r5, [pc, #28]	; (8012470 <HAL_RCC_OscConfig+0x55c>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012452:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012456:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8012458:	f023 0301 	bic.w	r3, r3, #1
 801245c:	672b      	str	r3, [r5, #112]	; 0x70
 801245e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8012460:	f023 0304 	bic.w	r3, r3, #4
 8012464:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8012466:	f7fb fad7 	bl	800da18 <HAL_GetTick>
 801246a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801246c:	e00c      	b.n	8012488 <HAL_RCC_OscConfig+0x574>
 801246e:	bf00      	nop
 8012470:	58024400 	.word	0x58024400
 8012474:	fffffc0c 	.word	0xfffffc0c
 8012478:	ffff0007 	.word	0xffff0007
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801247c:	f7fb facc 	bl	800da18 <HAL_GetTick>
 8012480:	1b80      	subs	r0, r0, r6
 8012482:	42b8      	cmp	r0, r7
 8012484:	f63f aed8 	bhi.w	8012238 <HAL_RCC_OscConfig+0x324>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8012488:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801248a:	0798      	lsls	r0, r3, #30
 801248c:	d4f6      	bmi.n	801247c <HAL_RCC_OscConfig+0x568>
 801248e:	e5d5      	b.n	801203c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012490:	68eb      	ldr	r3, [r5, #12]
 8012492:	6a22      	ldr	r2, [r4, #32]
 8012494:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8012498:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801249c:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801249e:	6823      	ldr	r3, [r4, #0]
 80124a0:	e597      	b.n	8011fd2 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80124a2:	686b      	ldr	r3, [r5, #4]
 80124a4:	6922      	ldr	r2, [r4, #16]
 80124a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80124aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80124ae:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80124b0:	6823      	ldr	r3, [r4, #0]
 80124b2:	e58c      	b.n	8011fce <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80124b4:	4a0b      	ldr	r2, [pc, #44]	; (80124e4 <HAL_RCC_OscConfig+0x5d0>)
 80124b6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80124b8:	f043 0301 	orr.w	r3, r3, #1
 80124bc:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80124be:	e692      	b.n	80121e6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80124c0:	4a08      	ldr	r2, [pc, #32]	; (80124e4 <HAL_RCC_OscConfig+0x5d0>)
 80124c2:	6853      	ldr	r3, [r2, #4]
 80124c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80124c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80124cc:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80124ce:	6823      	ldr	r3, [r4, #0]
 80124d0:	e57f      	b.n	8011fd2 <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80124d2:	f042 0204 	orr.w	r2, r2, #4
 80124d6:	671a      	str	r2, [r3, #112]	; 0x70
 80124d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80124da:	f042 0201 	orr.w	r2, r2, #1
 80124de:	671a      	str	r2, [r3, #112]	; 0x70
 80124e0:	e681      	b.n	80121e6 <HAL_RCC_OscConfig+0x2d2>
 80124e2:	bf00      	nop
 80124e4:	58024400 	.word	0x58024400

080124e8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80124e8:	4a47      	ldr	r2, [pc, #284]	; (8012608 <HAL_RCC_GetSysClockFreq+0x120>)
 80124ea:	6913      	ldr	r3, [r2, #16]
 80124ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80124f0:	2b10      	cmp	r3, #16
 80124f2:	d004      	beq.n	80124fe <HAL_RCC_GetSysClockFreq+0x16>
 80124f4:	2b18      	cmp	r3, #24
 80124f6:	d00d      	beq.n	8012514 <HAL_RCC_GetSysClockFreq+0x2c>
 80124f8:	b11b      	cbz	r3, 8012502 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 80124fa:	4844      	ldr	r0, [pc, #272]	; (801260c <HAL_RCC_GetSysClockFreq+0x124>)
 80124fc:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80124fe:	4844      	ldr	r0, [pc, #272]	; (8012610 <HAL_RCC_GetSysClockFreq+0x128>)
 8012500:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012502:	6813      	ldr	r3, [r2, #0]
 8012504:	0699      	lsls	r1, r3, #26
 8012506:	d54a      	bpl.n	801259e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012508:	6813      	ldr	r3, [r2, #0]
 801250a:	4842      	ldr	r0, [pc, #264]	; (8012614 <HAL_RCC_GetSysClockFreq+0x12c>)
 801250c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8012510:	40d8      	lsrs	r0, r3
 8012512:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012514:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8012516:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8012518:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 801251a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    if (pllm != 0U)
 801251c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012520:	6b51      	ldr	r1, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8012522:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8012526:	d038      	beq.n	801259a <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012528:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 801252c:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012530:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012534:	fb05 f101 	mul.w	r1, r5, r1
 8012538:	2b01      	cmp	r3, #1
 801253a:	ee07 1a90 	vmov	s15, r1
 801253e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 8012542:	d002      	beq.n	801254a <HAL_RCC_GetSysClockFreq+0x62>
 8012544:	2b02      	cmp	r3, #2
 8012546:	d02c      	beq.n	80125a2 <HAL_RCC_GetSysClockFreq+0xba>
 8012548:	b393      	cbz	r3, 80125b0 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801254a:	ee07 0a90 	vmov	s15, r0
 801254e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8012618 <HAL_RCC_GetSysClockFreq+0x130>
 8012552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012556:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012558:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801255c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 801261c <HAL_RCC_GetSysClockFreq+0x134>
 8012560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012564:	ee06 3a90 	vmov	s13, r3
 8012568:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801256c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012570:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012574:	eee7 6a25 	vfma.f32	s13, s14, s11
 8012578:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 801257c:	4b22      	ldr	r3, [pc, #136]	; (8012608 <HAL_RCC_GetSysClockFreq+0x120>)
 801257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012580:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8012584:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8012586:	ee07 3a90 	vmov	s15, r3
 801258a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801258e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012596:	ee17 0a90 	vmov	r0, s15
}
 801259a:	bc30      	pop	{r4, r5}
 801259c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 801259e:	481d      	ldr	r0, [pc, #116]	; (8012614 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 80125a0:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80125a2:	ee07 0a90 	vmov	s15, r0
 80125a6:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8012620 <HAL_RCC_GetSysClockFreq+0x138>
 80125aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125ae:	e7d2      	b.n	8012556 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80125b0:	6813      	ldr	r3, [r2, #0]
 80125b2:	069b      	lsls	r3, r3, #26
 80125b4:	d520      	bpl.n	80125f8 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80125b6:	6814      	ldr	r4, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80125b8:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80125bc:	4915      	ldr	r1, [pc, #84]	; (8012614 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80125be:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80125c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80125c4:	f3c4 04c1 	ubfx	r4, r4, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80125c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125cc:	ed9f 5a13 	vldr	s10, [pc, #76]	; 801261c <HAL_RCC_GetSysClockFreq+0x134>
 80125d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80125d4:	40e1      	lsrs	r1, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80125d6:	ee06 3a90 	vmov	s13, r3
 80125da:	ee05 1a90 	vmov	s11, r1
 80125de:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80125e2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80125e6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80125ea:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80125ee:	eee7 6a05 	vfma.f32	s13, s14, s10
 80125f2:	ee66 6a26 	vmul.f32	s13, s12, s13
 80125f6:	e7c1      	b.n	801257c <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80125f8:	ee07 0a90 	vmov	s15, r0
 80125fc:	eddf 6a09 	vldr	s13, [pc, #36]	; 8012624 <HAL_RCC_GetSysClockFreq+0x13c>
 8012600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012604:	e7a7      	b.n	8012556 <HAL_RCC_GetSysClockFreq+0x6e>
 8012606:	bf00      	nop
 8012608:	58024400 	.word	0x58024400
 801260c:	003d0900 	.word	0x003d0900
 8012610:	017d7840 	.word	0x017d7840
 8012614:	03d09000 	.word	0x03d09000
 8012618:	4a742400 	.word	0x4a742400
 801261c:	39000000 	.word	0x39000000
 8012620:	4bbebc20 	.word	0x4bbebc20
 8012624:	4c742400 	.word	0x4c742400

08012628 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8012628:	2800      	cmp	r0, #0
 801262a:	f000 810c 	beq.w	8012846 <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801262e:	4a8c      	ldr	r2, [pc, #560]	; (8012860 <HAL_RCC_ClockConfig+0x238>)
 8012630:	6813      	ldr	r3, [r2, #0]
 8012632:	f003 030f 	and.w	r3, r3, #15
 8012636:	428b      	cmp	r3, r1
{
 8012638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801263c:	4604      	mov	r4, r0
 801263e:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012640:	d20c      	bcs.n	801265c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012642:	6813      	ldr	r3, [r2, #0]
 8012644:	f023 030f 	bic.w	r3, r3, #15
 8012648:	430b      	orrs	r3, r1
 801264a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801264c:	6813      	ldr	r3, [r2, #0]
 801264e:	f003 030f 	and.w	r3, r3, #15
 8012652:	428b      	cmp	r3, r1
 8012654:	d002      	beq.n	801265c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8012656:	2001      	movs	r0, #1
}
 8012658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801265c:	6823      	ldr	r3, [r4, #0]
 801265e:	075f      	lsls	r7, r3, #29
 8012660:	d50b      	bpl.n	801267a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8012662:	4980      	ldr	r1, [pc, #512]	; (8012864 <HAL_RCC_ClockConfig+0x23c>)
 8012664:	6920      	ldr	r0, [r4, #16]
 8012666:	698a      	ldr	r2, [r1, #24]
 8012668:	f002 0270 	and.w	r2, r2, #112	; 0x70
 801266c:	4290      	cmp	r0, r2
 801266e:	d904      	bls.n	801267a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8012670:	698a      	ldr	r2, [r1, #24]
 8012672:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8012676:	4302      	orrs	r2, r0
 8012678:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801267a:	071e      	lsls	r6, r3, #28
 801267c:	d50b      	bpl.n	8012696 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801267e:	4979      	ldr	r1, [pc, #484]	; (8012864 <HAL_RCC_ClockConfig+0x23c>)
 8012680:	6960      	ldr	r0, [r4, #20]
 8012682:	69ca      	ldr	r2, [r1, #28]
 8012684:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8012688:	4290      	cmp	r0, r2
 801268a:	d904      	bls.n	8012696 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801268c:	69ca      	ldr	r2, [r1, #28]
 801268e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8012692:	4302      	orrs	r2, r0
 8012694:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012696:	06d8      	lsls	r0, r3, #27
 8012698:	d50b      	bpl.n	80126b2 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801269a:	4972      	ldr	r1, [pc, #456]	; (8012864 <HAL_RCC_ClockConfig+0x23c>)
 801269c:	69a0      	ldr	r0, [r4, #24]
 801269e:	69ca      	ldr	r2, [r1, #28]
 80126a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80126a4:	4290      	cmp	r0, r2
 80126a6:	d904      	bls.n	80126b2 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80126a8:	69ca      	ldr	r2, [r1, #28]
 80126aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80126ae:	4302      	orrs	r2, r0
 80126b0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80126b2:	0699      	lsls	r1, r3, #26
 80126b4:	d50b      	bpl.n	80126ce <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80126b6:	496b      	ldr	r1, [pc, #428]	; (8012864 <HAL_RCC_ClockConfig+0x23c>)
 80126b8:	69e0      	ldr	r0, [r4, #28]
 80126ba:	6a0a      	ldr	r2, [r1, #32]
 80126bc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80126c0:	4290      	cmp	r0, r2
 80126c2:	d904      	bls.n	80126ce <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80126c4:	6a0a      	ldr	r2, [r1, #32]
 80126c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80126ca:	4302      	orrs	r2, r0
 80126cc:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80126ce:	079a      	lsls	r2, r3, #30
 80126d0:	f140 80ab 	bpl.w	801282a <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80126d4:	4863      	ldr	r0, [pc, #396]	; (8012864 <HAL_RCC_ClockConfig+0x23c>)
 80126d6:	68e1      	ldr	r1, [r4, #12]
 80126d8:	6982      	ldr	r2, [r0, #24]
 80126da:	f002 020f 	and.w	r2, r2, #15
 80126de:	4291      	cmp	r1, r2
 80126e0:	d904      	bls.n	80126ec <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80126e2:	6982      	ldr	r2, [r0, #24]
 80126e4:	f022 020f 	bic.w	r2, r2, #15
 80126e8:	430a      	orrs	r2, r1
 80126ea:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80126ec:	07d8      	lsls	r0, r3, #31
 80126ee:	d530      	bpl.n	8012752 <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80126f0:	4a5c      	ldr	r2, [pc, #368]	; (8012864 <HAL_RCC_ClockConfig+0x23c>)
 80126f2:	68a1      	ldr	r1, [r4, #8]
 80126f4:	6993      	ldr	r3, [r2, #24]
 80126f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80126fa:	430b      	orrs	r3, r1
 80126fc:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80126fe:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012700:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012702:	2902      	cmp	r1, #2
 8012704:	f000 80a1 	beq.w	801284a <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012708:	2903      	cmp	r1, #3
 801270a:	f000 8098 	beq.w	801283e <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801270e:	2901      	cmp	r1, #1
 8012710:	f000 80a1 	beq.w	8012856 <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012714:	0758      	lsls	r0, r3, #29
 8012716:	d59e      	bpl.n	8012656 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012718:	4e52      	ldr	r6, [pc, #328]	; (8012864 <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801271a:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801271e:	6933      	ldr	r3, [r6, #16]
 8012720:	f023 0307 	bic.w	r3, r3, #7
 8012724:	430b      	orrs	r3, r1
 8012726:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8012728:	f7fb f976 	bl	800da18 <HAL_GetTick>
 801272c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801272e:	e005      	b.n	801273c <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012730:	f7fb f972 	bl	800da18 <HAL_GetTick>
 8012734:	1bc0      	subs	r0, r0, r7
 8012736:	4540      	cmp	r0, r8
 8012738:	f200 808b 	bhi.w	8012852 <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801273c:	6933      	ldr	r3, [r6, #16]
 801273e:	6862      	ldr	r2, [r4, #4]
 8012740:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012744:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8012748:	d1f2      	bne.n	8012730 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801274a:	6823      	ldr	r3, [r4, #0]
 801274c:	0799      	lsls	r1, r3, #30
 801274e:	d506      	bpl.n	801275e <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8012750:	68e1      	ldr	r1, [r4, #12]
 8012752:	4844      	ldr	r0, [pc, #272]	; (8012864 <HAL_RCC_ClockConfig+0x23c>)
 8012754:	6982      	ldr	r2, [r0, #24]
 8012756:	f002 020f 	and.w	r2, r2, #15
 801275a:	428a      	cmp	r2, r1
 801275c:	d869      	bhi.n	8012832 <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801275e:	4940      	ldr	r1, [pc, #256]	; (8012860 <HAL_RCC_ClockConfig+0x238>)
 8012760:	680a      	ldr	r2, [r1, #0]
 8012762:	f002 020f 	and.w	r2, r2, #15
 8012766:	42aa      	cmp	r2, r5
 8012768:	d90a      	bls.n	8012780 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801276a:	680a      	ldr	r2, [r1, #0]
 801276c:	f022 020f 	bic.w	r2, r2, #15
 8012770:	432a      	orrs	r2, r5
 8012772:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012774:	680a      	ldr	r2, [r1, #0]
 8012776:	f002 020f 	and.w	r2, r2, #15
 801277a:	42aa      	cmp	r2, r5
 801277c:	f47f af6b 	bne.w	8012656 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012780:	075a      	lsls	r2, r3, #29
 8012782:	d50b      	bpl.n	801279c <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8012784:	4937      	ldr	r1, [pc, #220]	; (8012864 <HAL_RCC_ClockConfig+0x23c>)
 8012786:	6920      	ldr	r0, [r4, #16]
 8012788:	698a      	ldr	r2, [r1, #24]
 801278a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 801278e:	4290      	cmp	r0, r2
 8012790:	d204      	bcs.n	801279c <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8012792:	698a      	ldr	r2, [r1, #24]
 8012794:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8012798:	4302      	orrs	r2, r0
 801279a:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801279c:	071f      	lsls	r7, r3, #28
 801279e:	d50b      	bpl.n	80127b8 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80127a0:	4930      	ldr	r1, [pc, #192]	; (8012864 <HAL_RCC_ClockConfig+0x23c>)
 80127a2:	6960      	ldr	r0, [r4, #20]
 80127a4:	69ca      	ldr	r2, [r1, #28]
 80127a6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80127aa:	4290      	cmp	r0, r2
 80127ac:	d204      	bcs.n	80127b8 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80127ae:	69ca      	ldr	r2, [r1, #28]
 80127b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80127b4:	4302      	orrs	r2, r0
 80127b6:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80127b8:	06de      	lsls	r6, r3, #27
 80127ba:	d50b      	bpl.n	80127d4 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80127bc:	4929      	ldr	r1, [pc, #164]	; (8012864 <HAL_RCC_ClockConfig+0x23c>)
 80127be:	69a0      	ldr	r0, [r4, #24]
 80127c0:	69ca      	ldr	r2, [r1, #28]
 80127c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80127c6:	4290      	cmp	r0, r2
 80127c8:	d204      	bcs.n	80127d4 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80127ca:	69ca      	ldr	r2, [r1, #28]
 80127cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80127d0:	4302      	orrs	r2, r0
 80127d2:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80127d4:	069d      	lsls	r5, r3, #26
 80127d6:	d50b      	bpl.n	80127f0 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80127d8:	4a22      	ldr	r2, [pc, #136]	; (8012864 <HAL_RCC_ClockConfig+0x23c>)
 80127da:	69e1      	ldr	r1, [r4, #28]
 80127dc:	6a13      	ldr	r3, [r2, #32]
 80127de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80127e2:	4299      	cmp	r1, r3
 80127e4:	d204      	bcs.n	80127f0 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80127e6:	6a13      	ldr	r3, [r2, #32]
 80127e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80127ec:	430b      	orrs	r3, r1
 80127ee:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80127f0:	f7ff fe7a 	bl	80124e8 <HAL_RCC_GetSysClockFreq>
 80127f4:	4a1b      	ldr	r2, [pc, #108]	; (8012864 <HAL_RCC_ClockConfig+0x23c>)
 80127f6:	4603      	mov	r3, r0
 80127f8:	481b      	ldr	r0, [pc, #108]	; (8012868 <HAL_RCC_ClockConfig+0x240>)
 80127fa:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80127fc:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80127fe:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8012802:	4d1a      	ldr	r5, [pc, #104]	; (801286c <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012804:	f002 020f 	and.w	r2, r2, #15
 8012808:	4c19      	ldr	r4, [pc, #100]	; (8012870 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801280a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801280c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801280e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8012812:	4818      	ldr	r0, [pc, #96]	; (8012874 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012814:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012818:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 801281a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 801281c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801281e:	40d3      	lsrs	r3, r2
 8012820:	6023      	str	r3, [r4, #0]
}
 8012822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8012826:	f7fb b895 	b.w	800d954 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801282a:	07da      	lsls	r2, r3, #31
 801282c:	f53f af60 	bmi.w	80126f0 <HAL_RCC_ClockConfig+0xc8>
 8012830:	e795      	b.n	801275e <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012832:	6982      	ldr	r2, [r0, #24]
 8012834:	f022 020f 	bic.w	r2, r2, #15
 8012838:	4311      	orrs	r1, r2
 801283a:	6181      	str	r1, [r0, #24]
 801283c:	e78f      	b.n	801275e <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801283e:	019f      	lsls	r7, r3, #6
 8012840:	f53f af6a 	bmi.w	8012718 <HAL_RCC_ClockConfig+0xf0>
 8012844:	e707      	b.n	8012656 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8012846:	2001      	movs	r0, #1
}
 8012848:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801284a:	039b      	lsls	r3, r3, #14
 801284c:	f53f af64 	bmi.w	8012718 <HAL_RCC_ClockConfig+0xf0>
 8012850:	e701      	b.n	8012656 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8012852:	2003      	movs	r0, #3
 8012854:	e700      	b.n	8012658 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8012856:	05de      	lsls	r6, r3, #23
 8012858:	f53f af5e 	bmi.w	8012718 <HAL_RCC_ClockConfig+0xf0>
 801285c:	e6fb      	b.n	8012656 <HAL_RCC_ClockConfig+0x2e>
 801285e:	bf00      	nop
 8012860:	52002000 	.word	0x52002000
 8012864:	58024400 	.word	0x58024400
 8012868:	080bf4ec 	.word	0x080bf4ec
 801286c:	2400737c 	.word	0x2400737c
 8012870:	24007380 	.word	0x24007380
 8012874:	240074a8 	.word	0x240074a8

08012878 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012878:	4a18      	ldr	r2, [pc, #96]	; (80128dc <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801287a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801287c:	6913      	ldr	r3, [r2, #16]
 801287e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012882:	2b10      	cmp	r3, #16
 8012884:	d01a      	beq.n	80128bc <HAL_RCC_GetHCLKFreq+0x44>
 8012886:	2b18      	cmp	r3, #24
 8012888:	d023      	beq.n	80128d2 <HAL_RCC_GetHCLKFreq+0x5a>
 801288a:	b1cb      	cbz	r3, 80128c0 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 801288c:	4814      	ldr	r0, [pc, #80]	; (80128e0 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801288e:	4b13      	ldr	r3, [pc, #76]	; (80128dc <HAL_RCC_GetHCLKFreq+0x64>)
 8012890:	4914      	ldr	r1, [pc, #80]	; (80128e4 <HAL_RCC_GetHCLKFreq+0x6c>)
 8012892:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012894:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012896:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801289a:	4c13      	ldr	r4, [pc, #76]	; (80128e8 <HAL_RCC_GetHCLKFreq+0x70>)
 801289c:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80128a0:	4d12      	ldr	r5, [pc, #72]	; (80128ec <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80128a2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80128a4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80128a6:	f002 021f 	and.w	r2, r2, #31
 80128aa:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80128ae:	f003 001f 	and.w	r0, r3, #31
 80128b2:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 80128b6:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80128b8:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80128ba:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80128bc:	480c      	ldr	r0, [pc, #48]	; (80128f0 <HAL_RCC_GetHCLKFreq+0x78>)
 80128be:	e7e6      	b.n	801288e <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80128c0:	6813      	ldr	r3, [r2, #0]
 80128c2:	069b      	lsls	r3, r3, #26
 80128c4:	d508      	bpl.n	80128d8 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80128c6:	6812      	ldr	r2, [r2, #0]
 80128c8:	480a      	ldr	r0, [pc, #40]	; (80128f4 <HAL_RCC_GetHCLKFreq+0x7c>)
 80128ca:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80128ce:	40d0      	lsrs	r0, r2
 80128d0:	e7dd      	b.n	801288e <HAL_RCC_GetHCLKFreq+0x16>
 80128d2:	f7ff fa9b 	bl	8011e0c <HAL_RCC_GetSysClockFreq.part.0>
 80128d6:	e7da      	b.n	801288e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80128d8:	4806      	ldr	r0, [pc, #24]	; (80128f4 <HAL_RCC_GetHCLKFreq+0x7c>)
 80128da:	e7d8      	b.n	801288e <HAL_RCC_GetHCLKFreq+0x16>
 80128dc:	58024400 	.word	0x58024400
 80128e0:	003d0900 	.word	0x003d0900
 80128e4:	080bf4ec 	.word	0x080bf4ec
 80128e8:	24007380 	.word	0x24007380
 80128ec:	2400737c 	.word	0x2400737c
 80128f0:	017d7840 	.word	0x017d7840
 80128f4:	03d09000 	.word	0x03d09000

080128f8 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80128f8:	4a1c      	ldr	r2, [pc, #112]	; (801296c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80128fa:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80128fc:	6913      	ldr	r3, [r2, #16]
 80128fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012902:	2b10      	cmp	r3, #16
 8012904:	d021      	beq.n	801294a <HAL_RCC_GetPCLK1Freq+0x52>
 8012906:	2b18      	cmp	r3, #24
 8012908:	d02b      	beq.n	8012962 <HAL_RCC_GetPCLK1Freq+0x6a>
 801290a:	b303      	cbz	r3, 801294e <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 801290c:	4818      	ldr	r0, [pc, #96]	; (8012970 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801290e:	4a17      	ldr	r2, [pc, #92]	; (801296c <HAL_RCC_GetPCLK1Freq+0x74>)
 8012910:	4918      	ldr	r1, [pc, #96]	; (8012974 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8012912:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8012914:	4d18      	ldr	r5, [pc, #96]	; (8012978 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012916:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801291a:	4c18      	ldr	r4, [pc, #96]	; (801297c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801291c:	5ccb      	ldrb	r3, [r1, r3]
 801291e:	f003 031f 	and.w	r3, r3, #31
 8012922:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012926:	6990      	ldr	r0, [r2, #24]
 8012928:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 801292c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801292e:	5c08      	ldrb	r0, [r1, r0]
 8012930:	f000 001f 	and.w	r0, r0, #31
 8012934:	40c3      	lsrs	r3, r0
 8012936:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8012938:	69d2      	ldr	r2, [r2, #28]
 801293a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 801293e:	5c88      	ldrb	r0, [r1, r2]
 8012940:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8012944:	fa23 f000 	lsr.w	r0, r3, r0
 8012948:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801294a:	480d      	ldr	r0, [pc, #52]	; (8012980 <HAL_RCC_GetPCLK1Freq+0x88>)
 801294c:	e7df      	b.n	801290e <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801294e:	6813      	ldr	r3, [r2, #0]
 8012950:	069b      	lsls	r3, r3, #26
 8012952:	d509      	bpl.n	8012968 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012954:	6810      	ldr	r0, [r2, #0]
 8012956:	4b0b      	ldr	r3, [pc, #44]	; (8012984 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8012958:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 801295c:	fa23 f000 	lsr.w	r0, r3, r0
 8012960:	e7d5      	b.n	801290e <HAL_RCC_GetPCLK1Freq+0x16>
 8012962:	f7ff fa53 	bl	8011e0c <HAL_RCC_GetSysClockFreq.part.0>
 8012966:	e7d2      	b.n	801290e <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8012968:	4806      	ldr	r0, [pc, #24]	; (8012984 <HAL_RCC_GetPCLK1Freq+0x8c>)
 801296a:	e7d0      	b.n	801290e <HAL_RCC_GetPCLK1Freq+0x16>
 801296c:	58024400 	.word	0x58024400
 8012970:	003d0900 	.word	0x003d0900
 8012974:	080bf4ec 	.word	0x080bf4ec
 8012978:	2400737c 	.word	0x2400737c
 801297c:	24007380 	.word	0x24007380
 8012980:	017d7840 	.word	0x017d7840
 8012984:	03d09000 	.word	0x03d09000

08012988 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012988:	4a1c      	ldr	r2, [pc, #112]	; (80129fc <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801298a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801298c:	6913      	ldr	r3, [r2, #16]
 801298e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012992:	2b10      	cmp	r3, #16
 8012994:	d021      	beq.n	80129da <HAL_RCC_GetPCLK2Freq+0x52>
 8012996:	2b18      	cmp	r3, #24
 8012998:	d02b      	beq.n	80129f2 <HAL_RCC_GetPCLK2Freq+0x6a>
 801299a:	b303      	cbz	r3, 80129de <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 801299c:	4818      	ldr	r0, [pc, #96]	; (8012a00 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801299e:	4a17      	ldr	r2, [pc, #92]	; (80129fc <HAL_RCC_GetPCLK2Freq+0x74>)
 80129a0:	4918      	ldr	r1, [pc, #96]	; (8012a04 <HAL_RCC_GetPCLK2Freq+0x7c>)
 80129a2:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 80129a4:	4d18      	ldr	r5, [pc, #96]	; (8012a08 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80129a6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80129aa:	4c18      	ldr	r4, [pc, #96]	; (8012a0c <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80129ac:	5ccb      	ldrb	r3, [r1, r3]
 80129ae:	f003 031f 	and.w	r3, r3, #31
 80129b2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80129b6:	6990      	ldr	r0, [r2, #24]
 80129b8:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 80129bc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80129be:	5c08      	ldrb	r0, [r1, r0]
 80129c0:	f000 001f 	and.w	r0, r0, #31
 80129c4:	40c3      	lsrs	r3, r0
 80129c6:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80129c8:	69d2      	ldr	r2, [r2, #28]
 80129ca:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80129ce:	5c88      	ldrb	r0, [r1, r2]
 80129d0:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80129d4:	fa23 f000 	lsr.w	r0, r3, r0
 80129d8:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80129da:	480d      	ldr	r0, [pc, #52]	; (8012a10 <HAL_RCC_GetPCLK2Freq+0x88>)
 80129dc:	e7df      	b.n	801299e <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80129de:	6813      	ldr	r3, [r2, #0]
 80129e0:	069b      	lsls	r3, r3, #26
 80129e2:	d509      	bpl.n	80129f8 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80129e4:	6810      	ldr	r0, [r2, #0]
 80129e6:	4b0b      	ldr	r3, [pc, #44]	; (8012a14 <HAL_RCC_GetPCLK2Freq+0x8c>)
 80129e8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80129ec:	fa23 f000 	lsr.w	r0, r3, r0
 80129f0:	e7d5      	b.n	801299e <HAL_RCC_GetPCLK2Freq+0x16>
 80129f2:	f7ff fa0b 	bl	8011e0c <HAL_RCC_GetSysClockFreq.part.0>
 80129f6:	e7d2      	b.n	801299e <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80129f8:	4806      	ldr	r0, [pc, #24]	; (8012a14 <HAL_RCC_GetPCLK2Freq+0x8c>)
 80129fa:	e7d0      	b.n	801299e <HAL_RCC_GetPCLK2Freq+0x16>
 80129fc:	58024400 	.word	0x58024400
 8012a00:	003d0900 	.word	0x003d0900
 8012a04:	080bf4ec 	.word	0x080bf4ec
 8012a08:	2400737c 	.word	0x2400737c
 8012a0c:	24007380 	.word	0x24007380
 8012a10:	017d7840 	.word	0x017d7840
 8012a14:	03d09000 	.word	0x03d09000

08012a18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8012a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012a1a:	4c3a      	ldr	r4, [pc, #232]	; (8012b04 <RCCEx_PLL2_Config+0xec>)
 8012a1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012a1e:	f003 0303 	and.w	r3, r3, #3
 8012a22:	2b03      	cmp	r3, #3
 8012a24:	d067      	beq.n	8012af6 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8012a26:	6823      	ldr	r3, [r4, #0]
 8012a28:	4606      	mov	r6, r0
 8012a2a:	460f      	mov	r7, r1
 8012a2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012a30:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012a32:	f7fa fff1 	bl	800da18 <HAL_GetTick>
 8012a36:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012a38:	e004      	b.n	8012a44 <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012a3a:	f7fa ffed 	bl	800da18 <HAL_GetTick>
 8012a3e:	1b43      	subs	r3, r0, r5
 8012a40:	2b02      	cmp	r3, #2
 8012a42:	d856      	bhi.n	8012af2 <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012a44:	6823      	ldr	r3, [r4, #0]
 8012a46:	011a      	lsls	r2, r3, #4
 8012a48:	d4f7      	bmi.n	8012a3a <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8012a4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012a4c:	6832      	ldr	r2, [r6, #0]
 8012a4e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8012a52:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8012a56:	62a3      	str	r3, [r4, #40]	; 0x28
 8012a58:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8012a5c:	3b01      	subs	r3, #1
 8012a5e:	3a01      	subs	r2, #1
 8012a60:	025b      	lsls	r3, r3, #9
 8012a62:	0412      	lsls	r2, r2, #16
 8012a64:	b29b      	uxth	r3, r3
 8012a66:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8012a6a:	4313      	orrs	r3, r2
 8012a6c:	6872      	ldr	r2, [r6, #4]
 8012a6e:	3a01      	subs	r2, #1
 8012a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012a74:	4313      	orrs	r3, r2
 8012a76:	6932      	ldr	r2, [r6, #16]
 8012a78:	3a01      	subs	r2, #1
 8012a7a:	0612      	lsls	r2, r2, #24
 8012a7c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8012a80:	4313      	orrs	r3, r2
 8012a82:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8012a84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012a86:	6972      	ldr	r2, [r6, #20]
 8012a88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012a8c:	4313      	orrs	r3, r2
 8012a8e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012a90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012a92:	69b3      	ldr	r3, [r6, #24]
 8012a94:	f022 0220 	bic.w	r2, r2, #32
 8012a98:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012a9a:	4b1b      	ldr	r3, [pc, #108]	; (8012b08 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012a9c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8012a9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012aa0:	f022 0210 	bic.w	r2, r2, #16
 8012aa4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012aa6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012aa8:	69f2      	ldr	r2, [r6, #28]
 8012aaa:	400b      	ands	r3, r1
 8012aac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8012ab0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8012ab2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012ab4:	f043 0310 	orr.w	r3, r3, #16
 8012ab8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012aba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8012abc:	b1ef      	cbz	r7, 8012afa <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012abe:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8012ac0:	bf0c      	ite	eq
 8012ac2:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8012ac6:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8012aca:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012acc:	4c0d      	ldr	r4, [pc, #52]	; (8012b04 <RCCEx_PLL2_Config+0xec>)
 8012ace:	6823      	ldr	r3, [r4, #0]
 8012ad0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012ad4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012ad6:	f7fa ff9f 	bl	800da18 <HAL_GetTick>
 8012ada:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012adc:	e004      	b.n	8012ae8 <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012ade:	f7fa ff9b 	bl	800da18 <HAL_GetTick>
 8012ae2:	1b40      	subs	r0, r0, r5
 8012ae4:	2802      	cmp	r0, #2
 8012ae6:	d804      	bhi.n	8012af2 <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012ae8:	6823      	ldr	r3, [r4, #0]
 8012aea:	011b      	lsls	r3, r3, #4
 8012aec:	d5f7      	bpl.n	8012ade <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8012aee:	2000      	movs	r0, #0
}
 8012af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8012af2:	2003      	movs	r0, #3
}
 8012af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8012af6:	2001      	movs	r0, #1
}
 8012af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012afa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012afe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012b00:	e7e4      	b.n	8012acc <RCCEx_PLL2_Config+0xb4>
 8012b02:	bf00      	nop
 8012b04:	58024400 	.word	0x58024400
 8012b08:	ffff0007 	.word	0xffff0007

08012b0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8012b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012b0e:	4c3a      	ldr	r4, [pc, #232]	; (8012bf8 <RCCEx_PLL3_Config+0xec>)
 8012b10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012b12:	f003 0303 	and.w	r3, r3, #3
 8012b16:	2b03      	cmp	r3, #3
 8012b18:	d067      	beq.n	8012bea <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8012b1a:	6823      	ldr	r3, [r4, #0]
 8012b1c:	4606      	mov	r6, r0
 8012b1e:	460f      	mov	r7, r1
 8012b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012b24:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012b26:	f7fa ff77 	bl	800da18 <HAL_GetTick>
 8012b2a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012b2c:	e004      	b.n	8012b38 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012b2e:	f7fa ff73 	bl	800da18 <HAL_GetTick>
 8012b32:	1b43      	subs	r3, r0, r5
 8012b34:	2b02      	cmp	r3, #2
 8012b36:	d856      	bhi.n	8012be6 <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012b38:	6823      	ldr	r3, [r4, #0]
 8012b3a:	009a      	lsls	r2, r3, #2
 8012b3c:	d4f7      	bmi.n	8012b2e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012b3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012b40:	6832      	ldr	r2, [r6, #0]
 8012b42:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8012b46:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8012b4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8012b4c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8012b50:	3b01      	subs	r3, #1
 8012b52:	3a01      	subs	r2, #1
 8012b54:	025b      	lsls	r3, r3, #9
 8012b56:	0412      	lsls	r2, r2, #16
 8012b58:	b29b      	uxth	r3, r3
 8012b5a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8012b5e:	4313      	orrs	r3, r2
 8012b60:	6872      	ldr	r2, [r6, #4]
 8012b62:	3a01      	subs	r2, #1
 8012b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012b68:	4313      	orrs	r3, r2
 8012b6a:	6932      	ldr	r2, [r6, #16]
 8012b6c:	3a01      	subs	r2, #1
 8012b6e:	0612      	lsls	r2, r2, #24
 8012b70:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8012b74:	4313      	orrs	r3, r2
 8012b76:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012b78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012b7a:	6972      	ldr	r2, [r6, #20]
 8012b7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8012b80:	4313      	orrs	r3, r2
 8012b82:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012b84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012b86:	69b3      	ldr	r3, [r6, #24]
 8012b88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012b8c:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012b8e:	4b1b      	ldr	r3, [pc, #108]	; (8012bfc <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012b90:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8012b92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012b98:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012b9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012b9c:	69f2      	ldr	r2, [r6, #28]
 8012b9e:	400b      	ands	r3, r1
 8012ba0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8012ba4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8012ba6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012bac:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8012bae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8012bb0:	b1ef      	cbz	r7, 8012bee <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012bb2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8012bb4:	bf0c      	ite	eq
 8012bb6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8012bba:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8012bbe:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8012bc0:	4c0d      	ldr	r4, [pc, #52]	; (8012bf8 <RCCEx_PLL3_Config+0xec>)
 8012bc2:	6823      	ldr	r3, [r4, #0]
 8012bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012bc8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012bca:	f7fa ff25 	bl	800da18 <HAL_GetTick>
 8012bce:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012bd0:	e004      	b.n	8012bdc <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012bd2:	f7fa ff21 	bl	800da18 <HAL_GetTick>
 8012bd6:	1b40      	subs	r0, r0, r5
 8012bd8:	2802      	cmp	r0, #2
 8012bda:	d804      	bhi.n	8012be6 <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012bdc:	6823      	ldr	r3, [r4, #0]
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	d5f7      	bpl.n	8012bd2 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8012be2:	2000      	movs	r0, #0
}
 8012be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8012be6:	2003      	movs	r0, #3
}
 8012be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8012bea:	2001      	movs	r0, #1
}
 8012bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8012bee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012bf2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012bf4:	e7e4      	b.n	8012bc0 <RCCEx_PLL3_Config+0xb4>
 8012bf6:	bf00      	nop
 8012bf8:	58024400 	.word	0x58024400
 8012bfc:	ffff0007 	.word	0xffff0007

08012c00 <HAL_RCCEx_PeriphCLKConfig>:
{
 8012c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012c04:	6803      	ldr	r3, [r0, #0]
{
 8012c06:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012c08:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8012c0c:	d01c      	beq.n	8012c48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8012c0e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8012c10:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8012c14:	f000 84e7 	beq.w	80135e6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 8012c18:	d823      	bhi.n	8012c62 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8012c1a:	2a00      	cmp	r2, #0
 8012c1c:	f000 83df 	beq.w	80133de <HAL_RCCEx_PeriphCLKConfig+0x7de>
 8012c20:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8012c24:	d120      	bne.n	8012c68 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012c26:	2102      	movs	r1, #2
 8012c28:	3004      	adds	r0, #4
 8012c2a:	f7ff fef5 	bl	8012a18 <RCCEx_PLL2_Config>
 8012c2e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8012c30:	2e00      	cmp	r6, #0
 8012c32:	f040 84b4 	bne.w	801359e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8012c36:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012c38:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8012c3a:	48a7      	ldr	r0, [pc, #668]	; (8012ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8012c3c:	2600      	movs	r6, #0
 8012c3e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8012c40:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8012c44:	430a      	orrs	r2, r1
 8012c46:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012c48:	05da      	lsls	r2, r3, #23
 8012c4a:	d511      	bpl.n	8012c70 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8012c4c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8012c4e:	2a04      	cmp	r2, #4
 8012c50:	f200 8527 	bhi.w	80136a2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8012c54:	e8df f012 	tbh	[pc, r2, lsl #1]
 8012c58:	049c04c0 	.word	0x049c04c0
 8012c5c:	02f504af 	.word	0x02f504af
 8012c60:	02f5      	.short	0x02f5
    switch(PeriphClkInit->SpdifrxClockSelection)
 8012c62:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8012c66:	d0e8      	beq.n	8012c3a <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012c68:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 8012c6a:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012c6e:	d4ed      	bmi.n	8012c4c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8012c70:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8012c72:	059f      	lsls	r7, r3, #22
 8012c74:	d51b      	bpl.n	8012cae <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 8012c76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012c78:	2a80      	cmp	r2, #128	; 0x80
 8012c7a:	f000 84c6 	beq.w	801360a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8012c7e:	f200 80fa 	bhi.w	8012e76 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8012c82:	2a00      	cmp	r2, #0
 8012c84:	f000 83b7 	beq.w	80133f6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8012c88:	2a40      	cmp	r2, #64	; 0x40
 8012c8a:	f040 80fb 	bne.w	8012e84 <HAL_RCCEx_PeriphCLKConfig+0x284>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012c8e:	2100      	movs	r1, #0
 8012c90:	1d20      	adds	r0, r4, #4
 8012c92:	f7ff fec1 	bl	8012a18 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8012c96:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012c98:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012c9a:	2d00      	cmp	r5, #0
 8012c9c:	f040 8385 	bne.w	80133aa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8012ca0:	498d      	ldr	r1, [pc, #564]	; (8012ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8012ca2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8012ca4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8012ca6:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8012caa:	4302      	orrs	r2, r0
 8012cac:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8012cae:	0558      	lsls	r0, r3, #21
 8012cb0:	d51f      	bpl.n	8012cf2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 8012cb2:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8012cb6:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8012cba:	f000 849d 	beq.w	80135f8 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
 8012cbe:	f200 80e4 	bhi.w	8012e8a <HAL_RCCEx_PeriphCLKConfig+0x28a>
 8012cc2:	2a00      	cmp	r2, #0
 8012cc4:	f000 8391 	beq.w	80133ea <HAL_RCCEx_PeriphCLKConfig+0x7ea>
 8012cc8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8012ccc:	f040 80e5 	bne.w	8012e9a <HAL_RCCEx_PeriphCLKConfig+0x29a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012cd0:	2100      	movs	r1, #0
 8012cd2:	1d20      	adds	r0, r4, #4
 8012cd4:	f7ff fea0 	bl	8012a18 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8012cd8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012cda:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012cdc:	2d00      	cmp	r5, #0
 8012cde:	f040 8366 	bne.w	80133ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8012ce2:	497d      	ldr	r1, [pc, #500]	; (8012ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8012ce4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8012ce8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8012cea:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8012cee:	4302      	orrs	r2, r0
 8012cf0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8012cf2:	0519      	lsls	r1, r3, #20
 8012cf4:	d51f      	bpl.n	8012d36 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 8012cf6:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8012cfa:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8012cfe:	f000 8451 	beq.w	80135a4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8012d02:	f200 80cd 	bhi.w	8012ea0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8012d06:	2a00      	cmp	r2, #0
 8012d08:	f000 837b 	beq.w	8013402 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8012d0c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8012d10:	f040 80ce 	bne.w	8012eb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012d14:	2100      	movs	r1, #0
 8012d16:	1d20      	adds	r0, r4, #4
 8012d18:	f7ff fe7e 	bl	8012a18 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8012d1c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012d1e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012d20:	2d00      	cmp	r5, #0
 8012d22:	f040 834a 	bne.w	80133ba <HAL_RCCEx_PeriphCLKConfig+0x7ba>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8012d26:	496c      	ldr	r1, [pc, #432]	; (8012ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8012d28:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8012d2c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8012d2e:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8012d32:	4302      	orrs	r2, r0
 8012d34:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8012d36:	019a      	lsls	r2, r3, #6
 8012d38:	d518      	bpl.n	8012d6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 8012d3a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8012d3c:	2a20      	cmp	r2, #32
 8012d3e:	f000 83f8 	beq.w	8013532 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8012d42:	f200 80b8 	bhi.w	8012eb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8012d46:	b13a      	cbz	r2, 8012d58 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8012d48:	2a10      	cmp	r2, #16
 8012d4a:	f040 80b7 	bne.w	8012ebc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012d4e:	4962      	ldr	r1, [pc, #392]	; (8012ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8012d50:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012d52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8012d56:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8012d58:	2d00      	cmp	r5, #0
 8012d5a:	f040 8383 	bne.w	8013464 <HAL_RCCEx_PeriphCLKConfig+0x864>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8012d5e:	495e      	ldr	r1, [pc, #376]	; (8012ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8012d60:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8012d62:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8012d64:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8012d68:	4302      	orrs	r2, r0
 8012d6a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8012d6c:	04df      	lsls	r7, r3, #19
 8012d6e:	d51d      	bpl.n	8012dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 8012d70:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012d72:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8012d76:	f000 8426 	beq.w	80135c6 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 8012d7a:	f200 80a2 	bhi.w	8012ec2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8012d7e:	2a00      	cmp	r2, #0
 8012d80:	f000 8345 	beq.w	801340e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8012d84:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8012d88:	f040 80a3 	bne.w	8012ed2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012d8c:	2100      	movs	r1, #0
 8012d8e:	1d20      	adds	r0, r4, #4
 8012d90:	f7ff fe42 	bl	8012a18 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8012d94:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012d96:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012d98:	2d00      	cmp	r5, #0
 8012d9a:	f040 830a 	bne.w	80133b2 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8012d9e:	494e      	ldr	r1, [pc, #312]	; (8012ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8012da0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012da2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8012da4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8012da8:	4302      	orrs	r2, r0
 8012daa:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8012dac:	0498      	lsls	r0, r3, #18
 8012dae:	d51b      	bpl.n	8012de8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 8012db0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012db2:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8012db6:	f000 839f 	beq.w	80134f8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8012dba:	f200 808f 	bhi.w	8012edc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8012dbe:	b14a      	cbz	r2, 8012dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8012dc0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8012dc4:	f040 8094 	bne.w	8012ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012dc8:	2101      	movs	r1, #1
 8012dca:	1d20      	adds	r0, r4, #4
 8012dcc:	f7ff fe24 	bl	8012a18 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8012dd0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012dd2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012dd4:	2d00      	cmp	r5, #0
 8012dd6:	f040 8347 	bne.w	8013468 <HAL_RCCEx_PeriphCLKConfig+0x868>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8012dda:	493f      	ldr	r1, [pc, #252]	; (8012ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8012ddc:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8012dde:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8012de0:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8012de4:	4302      	orrs	r2, r0
 8012de6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8012de8:	0459      	lsls	r1, r3, #17
 8012dea:	d51c      	bpl.n	8012e26 <HAL_RCCEx_PeriphCLKConfig+0x226>
    switch(PeriphClkInit->Spi6ClockSelection)
 8012dec:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8012df0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8012df4:	f000 838a 	beq.w	801350c <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8012df8:	d87d      	bhi.n	8012ef6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8012dfa:	b14a      	cbz	r2, 8012e10 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8012dfc:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8012e00:	f040 8081 	bne.w	8012f06 <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012e04:	2101      	movs	r1, #1
 8012e06:	1d20      	adds	r0, r4, #4
 8012e08:	f7ff fe06 	bl	8012a18 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8012e0c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012e0e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012e10:	2d00      	cmp	r5, #0
 8012e12:	f040 831d 	bne.w	8013450 <HAL_RCCEx_PeriphCLKConfig+0x850>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8012e16:	4930      	ldr	r1, [pc, #192]	; (8012ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8012e18:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8012e1c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8012e1e:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8012e22:	4302      	orrs	r2, r0
 8012e24:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8012e26:	015a      	lsls	r2, r3, #5
 8012e28:	d509      	bpl.n	8012e3e <HAL_RCCEx_PeriphCLKConfig+0x23e>
    switch(PeriphClkInit->DsiClockSelection)
 8012e2a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8012e2c:	2a00      	cmp	r2, #0
 8012e2e:	f000 8253 	beq.w	80132d8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8012e32:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8012e36:	f000 8249 	beq.w	80132cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8012e3a:	2601      	movs	r6, #1
 8012e3c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8012e3e:	041f      	lsls	r7, r3, #16
 8012e40:	d50d      	bpl.n	8012e5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch(PeriphClkInit->FdcanClockSelection)
 8012e42:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012e44:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8012e48:	f000 837c 	beq.w	8013544 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8012e4c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8012e50:	f000 8229 	beq.w	80132a6 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8012e54:	2a00      	cmp	r2, #0
 8012e56:	f000 822c 	beq.w	80132b2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8012e5a:	2601      	movs	r6, #1
 8012e5c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8012e5e:	01d8      	lsls	r0, r3, #7
 8012e60:	d55e      	bpl.n	8012f20 <HAL_RCCEx_PeriphCLKConfig+0x320>
    switch(PeriphClkInit->FmcClockSelection)
 8012e62:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8012e64:	2a03      	cmp	r2, #3
 8012e66:	f200 841f 	bhi.w	80136a8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8012e6a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8012e6e:	0055      	.short	0x0055
 8012e70:	004f0359 	.word	0x004f0359
 8012e74:	0055      	.short	0x0055
    switch(PeriphClkInit->Sai23ClockSelection)
 8012e76:	2ac0      	cmp	r2, #192	; 0xc0
 8012e78:	f43f af0f 	beq.w	8012c9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8012e7c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8012e80:	f43f af0b 	beq.w	8012c9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8012e84:	2601      	movs	r6, #1
 8012e86:	4635      	mov	r5, r6
 8012e88:	e711      	b.n	8012cae <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 8012e8a:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8012e8e:	f43f af25 	beq.w	8012cdc <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8012e92:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8012e96:	f43f af21 	beq.w	8012cdc <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8012e9a:	2601      	movs	r6, #1
 8012e9c:	4635      	mov	r5, r6
 8012e9e:	e728      	b.n	8012cf2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4BClockSelection)
 8012ea0:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8012ea4:	f43f af3c 	beq.w	8012d20 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8012ea8:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8012eac:	f43f af38 	beq.w	8012d20 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8012eb0:	2601      	movs	r6, #1
 8012eb2:	4635      	mov	r5, r6
 8012eb4:	e73f      	b.n	8012d36 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 8012eb6:	2a30      	cmp	r2, #48	; 0x30
 8012eb8:	f43f af4e 	beq.w	8012d58 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8012ebc:	2601      	movs	r6, #1
 8012ebe:	4635      	mov	r5, r6
 8012ec0:	e754      	b.n	8012d6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8012ec2:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8012ec6:	f43f af67 	beq.w	8012d98 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8012eca:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8012ece:	f43f af63 	beq.w	8012d98 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8012ed2:	2601      	movs	r6, #1
 8012ed4:	4635      	mov	r5, r6
 8012ed6:	e769      	b.n	8012dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8012ed8:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 8012edc:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8012ee0:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8012ee4:	f43f af76 	beq.w	8012dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8012ee8:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8012eec:	f43f af72 	beq.w	8012dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8012ef0:	2601      	movs	r6, #1
 8012ef2:	4635      	mov	r5, r6
 8012ef4:	e778      	b.n	8012de8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 8012ef6:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8012efa:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8012efe:	d087      	beq.n	8012e10 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8012f00:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8012f04:	d084      	beq.n	8012e10 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8012f06:	2601      	movs	r6, #1
 8012f08:	4635      	mov	r5, r6
 8012f0a:	e78c      	b.n	8012e26 <HAL_RCCEx_PeriphCLKConfig+0x226>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012f0c:	2102      	movs	r1, #2
 8012f0e:	1d20      	adds	r0, r4, #4
 8012f10:	f7ff fd82 	bl	8012a18 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012f14:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012f16:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012f18:	2d00      	cmp	r5, #0
 8012f1a:	f000 829b 	beq.w	8013454 <HAL_RCCEx_PeriphCLKConfig+0x854>
 8012f1e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012f20:	0259      	lsls	r1, r3, #9
 8012f22:	f100 8201 	bmi.w	8013328 <HAL_RCCEx_PeriphCLKConfig+0x728>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012f26:	07df      	lsls	r7, r3, #31
 8012f28:	d52f      	bpl.n	8012f8a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8012f2a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8012f2c:	2a28      	cmp	r2, #40	; 0x28
 8012f2e:	d82a      	bhi.n	8012f86 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8012f30:	e8df f012 	tbh	[pc, r2, lsl #1]
 8012f34:	002901e4 	.word	0x002901e4
 8012f38:	00290029 	.word	0x00290029
 8012f3c:	00290029 	.word	0x00290029
 8012f40:	00290029 	.word	0x00290029
 8012f44:	00290388 	.word	0x00290388
 8012f48:	00290029 	.word	0x00290029
 8012f4c:	00290029 	.word	0x00290029
 8012f50:	00290029 	.word	0x00290029
 8012f54:	002901dd 	.word	0x002901dd
 8012f58:	00290029 	.word	0x00290029
 8012f5c:	00290029 	.word	0x00290029
 8012f60:	00290029 	.word	0x00290029
 8012f64:	002901e4 	.word	0x002901e4
 8012f68:	00290029 	.word	0x00290029
 8012f6c:	00290029 	.word	0x00290029
 8012f70:	00290029 	.word	0x00290029
 8012f74:	002901e4 	.word	0x002901e4
 8012f78:	00290029 	.word	0x00290029
 8012f7c:	00290029 	.word	0x00290029
 8012f80:	00290029 	.word	0x00290029
 8012f84:	01e4      	.short	0x01e4
 8012f86:	2601      	movs	r6, #1
 8012f88:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012f8a:	0798      	lsls	r0, r3, #30
 8012f8c:	d516      	bpl.n	8012fbc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8012f8e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8012f90:	2a05      	cmp	r2, #5
 8012f92:	f200 838c 	bhi.w	80136ae <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8012f96:	e8df f012 	tbh	[pc, r2, lsl #1]
 8012f9a:	000d      	.short	0x000d
 8012f9c:	00060341 	.word	0x00060341
 8012fa0:	000d000d 	.word	0x000d000d
 8012fa4:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012fa6:	2101      	movs	r1, #1
 8012fa8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012fac:	f7ff fdae 	bl	8012b0c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012fb0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012fb2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012fb4:	2d00      	cmp	r5, #0
 8012fb6:	f000 8243 	beq.w	8013440 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8012fba:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012fbc:	0759      	lsls	r1, r3, #29
 8012fbe:	d517      	bpl.n	8012ff0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8012fc0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8012fc4:	2a05      	cmp	r2, #5
 8012fc6:	f200 8375 	bhi.w	80136b4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8012fca:	e8df f012 	tbh	[pc, r2, lsl #1]
 8012fce:	000d      	.short	0x000d
 8012fd0:	00060331 	.word	0x00060331
 8012fd4:	000d000d 	.word	0x000d000d
 8012fd8:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012fda:	2101      	movs	r1, #1
 8012fdc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012fe0:	f7ff fd94 	bl	8012b0c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012fe4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012fe6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012fe8:	2d00      	cmp	r5, #0
 8012fea:	f000 8220 	beq.w	801342e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8012fee:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012ff0:	069a      	lsls	r2, r3, #26
 8012ff2:	d51d      	bpl.n	8013030 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8012ff4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8012ff8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8012ffc:	f000 8272 	beq.w	80134e4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 8013000:	f200 80dc 	bhi.w	80131bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8013004:	b14a      	cbz	r2, 801301a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8013006:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 801300a:	f040 80e1 	bne.w	80131d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801300e:	2100      	movs	r1, #0
 8013010:	1d20      	adds	r0, r4, #4
 8013012:	f7ff fd01 	bl	8012a18 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8013016:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013018:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 801301a:	2d00      	cmp	r5, #0
 801301c:	f040 8201 	bne.w	8013422 <HAL_RCCEx_PeriphCLKConfig+0x822>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013020:	49a9      	ldr	r1, [pc, #676]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013022:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8013026:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8013028:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 801302c:	4302      	orrs	r2, r0
 801302e:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8013030:	065f      	lsls	r7, r3, #25
 8013032:	d51d      	bpl.n	8013070 <HAL_RCCEx_PeriphCLKConfig+0x470>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8013034:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8013038:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801303c:	f000 823e 	beq.w	80134bc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8013040:	f200 80c9 	bhi.w	80131d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8013044:	b14a      	cbz	r2, 801305a <HAL_RCCEx_PeriphCLKConfig+0x45a>
 8013046:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801304a:	f040 80ce 	bne.w	80131ea <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801304e:	2100      	movs	r1, #0
 8013050:	1d20      	adds	r0, r4, #4
 8013052:	f7ff fce1 	bl	8012a18 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8013056:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013058:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 801305a:	2d00      	cmp	r5, #0
 801305c:	f040 81df 	bne.w	801341e <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8013060:	4999      	ldr	r1, [pc, #612]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013062:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8013066:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8013068:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 801306c:	4302      	orrs	r2, r0
 801306e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8013070:	0618      	lsls	r0, r3, #24
 8013072:	d51d      	bpl.n	80130b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8013074:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8013078:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 801307c:	f000 8228 	beq.w	80134d0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 8013080:	f200 80b6 	bhi.w	80131f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8013084:	b14a      	cbz	r2, 801309a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8013086:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 801308a:	f040 80bb 	bne.w	8013204 <HAL_RCCEx_PeriphCLKConfig+0x604>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801308e:	2100      	movs	r1, #0
 8013090:	1d20      	adds	r0, r4, #4
 8013092:	f7ff fcc1 	bl	8012a18 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8013096:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013098:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 801309a:	2d00      	cmp	r5, #0
 801309c:	f040 81c3 	bne.w	8013426 <HAL_RCCEx_PeriphCLKConfig+0x826>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80130a0:	4989      	ldr	r1, [pc, #548]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80130a2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80130a6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80130a8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80130ac:	4302      	orrs	r2, r0
 80130ae:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80130b0:	0719      	lsls	r1, r3, #28
 80130b2:	d50b      	bpl.n	80130cc <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80130b4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80130b8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80130bc:	f000 8257 	beq.w	801356e <HAL_RCCEx_PeriphCLKConfig+0x96e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80130c0:	4881      	ldr	r0, [pc, #516]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80130c2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80130c4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80130c8:	430a      	orrs	r2, r1
 80130ca:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80130cc:	06da      	lsls	r2, r3, #27
 80130ce:	d50b      	bpl.n	80130e8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80130d0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80130d4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80130d8:	f000 823c 	beq.w	8013554 <HAL_RCCEx_PeriphCLKConfig+0x954>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80130dc:	487a      	ldr	r0, [pc, #488]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80130de:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80130e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80130e4:	430a      	orrs	r2, r1
 80130e6:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80130e8:	031f      	lsls	r7, r3, #12
 80130ea:	d50e      	bpl.n	801310a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    switch(PeriphClkInit->AdcClockSelection)
 80130ec:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80130f0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80130f4:	f000 80c4 	beq.w	8013280 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80130f8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80130fc:	f000 80c7 	beq.w	801328e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8013100:	2900      	cmp	r1, #0
 8013102:	f000 81d3 	beq.w	80134ac <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8013106:	2601      	movs	r6, #1
 8013108:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801310a:	0358      	lsls	r0, r3, #13
 801310c:	d50f      	bpl.n	801312e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch(PeriphClkInit->UsbClockSelection)
 801310e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8013112:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8013116:	f000 80a0 	beq.w	801325a <HAL_RCCEx_PeriphCLKConfig+0x65a>
 801311a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 801311e:	f000 80a3 	beq.w	8013268 <HAL_RCCEx_PeriphCLKConfig+0x668>
 8013122:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8013126:	f000 81b9 	beq.w	801349c <HAL_RCCEx_PeriphCLKConfig+0x89c>
 801312a:	2601      	movs	r6, #1
 801312c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801312e:	03d9      	lsls	r1, r3, #15
 8013130:	d509      	bpl.n	8013146 <HAL_RCCEx_PeriphCLKConfig+0x546>
    switch(PeriphClkInit->SdmmcClockSelection)
 8013132:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8013134:	2a00      	cmp	r2, #0
 8013136:	f000 81a8 	beq.w	801348a <HAL_RCCEx_PeriphCLKConfig+0x88a>
 801313a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801313e:	f000 813e 	beq.w	80133be <HAL_RCCEx_PeriphCLKConfig+0x7be>
 8013142:	2601      	movs	r6, #1
 8013144:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8013146:	009a      	lsls	r2, r3, #2
 8013148:	f100 80e3 	bmi.w	8013312 <HAL_RCCEx_PeriphCLKConfig+0x712>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801314c:	039f      	lsls	r7, r3, #14
 801314e:	d45c      	bmi.n	801320a <HAL_RCCEx_PeriphCLKConfig+0x60a>
    return HAL_OK;
 8013150:	1e30      	subs	r0, r6, #0
 8013152:	bf18      	it	ne
 8013154:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8013156:	02de      	lsls	r6, r3, #11
 8013158:	d506      	bpl.n	8013168 <HAL_RCCEx_PeriphCLKConfig+0x568>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801315a:	495b      	ldr	r1, [pc, #364]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801315c:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801315e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8013160:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8013164:	432a      	orrs	r2, r5
 8013166:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8013168:	00dd      	lsls	r5, r3, #3
 801316a:	d507      	bpl.n	801317c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801316c:	4956      	ldr	r1, [pc, #344]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801316e:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8013172:	690a      	ldr	r2, [r1, #16]
 8013174:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013178:	432a      	orrs	r2, r5
 801317a:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801317c:	0299      	lsls	r1, r3, #10
 801317e:	d506      	bpl.n	801318e <HAL_RCCEx_PeriphCLKConfig+0x58e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8013180:	4951      	ldr	r1, [pc, #324]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013182:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8013184:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8013186:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 801318a:	432a      	orrs	r2, r5
 801318c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801318e:	005a      	lsls	r2, r3, #1
 8013190:	d509      	bpl.n	80131a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013192:	4a4d      	ldr	r2, [pc, #308]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013194:	6911      	ldr	r1, [r2, #16]
 8013196:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 801319a:	6111      	str	r1, [r2, #16]
 801319c:	6911      	ldr	r1, [r2, #16]
 801319e:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 80131a2:	4329      	orrs	r1, r5
 80131a4:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	da06      	bge.n	80131b8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80131aa:	4a47      	ldr	r2, [pc, #284]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80131ac:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80131ae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80131b0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80131b4:	430b      	orrs	r3, r1
 80131b6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80131b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 80131bc:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80131c0:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80131c4:	f43f af29 	beq.w	801301a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80131c8:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80131cc:	f43f af25 	beq.w	801301a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80131d0:	2601      	movs	r6, #1
 80131d2:	4635      	mov	r5, r6
 80131d4:	e72c      	b.n	8013030 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80131d6:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80131da:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80131de:	f43f af3c 	beq.w	801305a <HAL_RCCEx_PeriphCLKConfig+0x45a>
 80131e2:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80131e6:	f43f af38 	beq.w	801305a <HAL_RCCEx_PeriphCLKConfig+0x45a>
 80131ea:	2601      	movs	r6, #1
 80131ec:	4635      	mov	r5, r6
 80131ee:	e73f      	b.n	8013070 <HAL_RCCEx_PeriphCLKConfig+0x470>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80131f0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80131f4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80131f8:	f43f af4f 	beq.w	801309a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80131fc:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8013200:	f43f af4b 	beq.w	801309a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8013204:	2601      	movs	r6, #1
 8013206:	4635      	mov	r5, r6
 8013208:	e752      	b.n	80130b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    switch(PeriphClkInit->RngClockSelection)
 801320a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801320e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8013212:	f000 812f 	beq.w	8013474 <HAL_RCCEx_PeriphCLKConfig+0x874>
 8013216:	d906      	bls.n	8013226 <HAL_RCCEx_PeriphCLKConfig+0x626>
 8013218:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 801321c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013220:	d003      	beq.n	801322a <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8013222:	2001      	movs	r0, #1
 8013224:	e797      	b.n	8013156 <HAL_RCCEx_PeriphCLKConfig+0x556>
 8013226:	2a00      	cmp	r2, #0
 8013228:	d1fb      	bne.n	8013222 <HAL_RCCEx_PeriphCLKConfig+0x622>
    if(ret == HAL_OK)
 801322a:	2d00      	cmp	r5, #0
 801322c:	d1f9      	bne.n	8013222 <HAL_RCCEx_PeriphCLKConfig+0x622>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801322e:	4d26      	ldr	r5, [pc, #152]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
    return HAL_OK;
 8013230:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013232:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 8013234:	bf18      	it	ne
 8013236:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013238:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 801323c:	430a      	orrs	r2, r1
 801323e:	656a      	str	r2, [r5, #84]	; 0x54
 8013240:	e789      	b.n	8013156 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->Sai1ClockSelection)
 8013242:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8013244:	2d00      	cmp	r5, #0
 8013246:	f040 80b6 	bne.w	80133b6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801324a:	491f      	ldr	r1, [pc, #124]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 801324c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801324e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8013250:	f022 0207 	bic.w	r2, r2, #7
 8013254:	4302      	orrs	r2, r0
 8013256:	650a      	str	r2, [r1, #80]	; 0x50
 8013258:	e50b      	b.n	8012c72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801325a:	2101      	movs	r1, #1
 801325c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013260:	f7ff fc54 	bl	8012b0c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8013264:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8013266:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8013268:	2d00      	cmp	r5, #0
 801326a:	f040 80d6 	bne.w	801341a <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801326e:	4916      	ldr	r1, [pc, #88]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013270:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8013274:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8013276:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 801327a:	4302      	orrs	r2, r0
 801327c:	654a      	str	r2, [r1, #84]	; 0x54
 801327e:	e756      	b.n	801312e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8013280:	2102      	movs	r1, #2
 8013282:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013286:	f7ff fc41 	bl	8012b0c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801328a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801328c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 801328e:	2d00      	cmp	r5, #0
 8013290:	f040 80ee 	bne.w	8013470 <HAL_RCCEx_PeriphCLKConfig+0x870>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8013294:	490c      	ldr	r1, [pc, #48]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8013296:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 801329a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 801329c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80132a0:	4302      	orrs	r2, r0
 80132a2:	658a      	str	r2, [r1, #88]	; 0x58
 80132a4:	e731      	b.n	801310a <HAL_RCCEx_PeriphCLKConfig+0x50a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80132a6:	2101      	movs	r1, #1
 80132a8:	1d20      	adds	r0, r4, #4
 80132aa:	f7ff fbb5 	bl	8012a18 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80132ae:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80132b0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80132b2:	2d00      	cmp	r5, #0
 80132b4:	f040 80da 	bne.w	801346c <HAL_RCCEx_PeriphCLKConfig+0x86c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80132b8:	4903      	ldr	r1, [pc, #12]	; (80132c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80132ba:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80132bc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80132be:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80132c2:	4302      	orrs	r2, r0
 80132c4:	650a      	str	r2, [r1, #80]	; 0x50
 80132c6:	e5ca      	b.n	8012e5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80132c8:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80132cc:	2101      	movs	r1, #1
 80132ce:	1d20      	adds	r0, r4, #4
 80132d0:	f7ff fba2 	bl	8012a18 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80132d4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80132d6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80132d8:	2d00      	cmp	r5, #0
 80132da:	f040 80d4 	bne.w	8013486 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80132de:	49aa      	ldr	r1, [pc, #680]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 80132e0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80132e2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80132e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80132e8:	4302      	orrs	r2, r0
 80132ea:	64ca      	str	r2, [r1, #76]	; 0x4c
 80132ec:	e5a7      	b.n	8012e3e <HAL_RCCEx_PeriphCLKConfig+0x23e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80132ee:	2101      	movs	r1, #1
 80132f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80132f4:	f7ff fc0a 	bl	8012b0c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80132f8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80132fa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80132fc:	2d00      	cmp	r5, #0
 80132fe:	f040 8094 	bne.w	801342a <HAL_RCCEx_PeriphCLKConfig+0x82a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8013302:	49a1      	ldr	r1, [pc, #644]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8013304:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8013306:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8013308:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 801330c:	4302      	orrs	r2, r0
 801330e:	654a      	str	r2, [r1, #84]	; 0x54
 8013310:	e63b      	b.n	8012f8a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8013312:	2102      	movs	r1, #2
 8013314:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013318:	f7ff fbf8 	bl	8012b0c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801331c:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 801331e:	2800      	cmp	r0, #0
 8013320:	f43f af14 	beq.w	801314c <HAL_RCCEx_PeriphCLKConfig+0x54c>
      status=HAL_ERROR;
 8013324:	2601      	movs	r6, #1
 8013326:	e711      	b.n	801314c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8013328:	4f98      	ldr	r7, [pc, #608]	; (801358c <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013330:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8013332:	f7fa fb71 	bl	800da18 <HAL_GetTick>
 8013336:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013338:	e006      	b.n	8013348 <HAL_RCCEx_PeriphCLKConfig+0x748>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801333a:	f7fa fb6d 	bl	800da18 <HAL_GetTick>
 801333e:	eba0 0008 	sub.w	r0, r0, r8
 8013342:	2864      	cmp	r0, #100	; 0x64
 8013344:	f200 8188 	bhi.w	8013658 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013348:	683b      	ldr	r3, [r7, #0]
 801334a:	05da      	lsls	r2, r3, #23
 801334c:	d5f5      	bpl.n	801333a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    if(ret == HAL_OK)
 801334e:	2d00      	cmp	r5, #0
 8013350:	f040 81a4 	bne.w	801369c <HAL_RCCEx_PeriphCLKConfig+0xa9c>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8013354:	4a8c      	ldr	r2, [pc, #560]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8013356:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801335a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 801335c:	4059      	eors	r1, r3
 801335e:	f411 7f40 	tst.w	r1, #768	; 0x300
 8013362:	d00b      	beq.n	801337c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013364:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8013366:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013368:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 801336c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8013370:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8013372:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8013374:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8013378:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 801337a:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801337c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013380:	f000 816e 	beq.w	8013660 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013384:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8013388:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 801338c:	f000 817c 	beq.w	8013688 <HAL_RCCEx_PeriphCLKConfig+0xa88>
 8013390:	497d      	ldr	r1, [pc, #500]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8013392:	690a      	ldr	r2, [r1, #16]
 8013394:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8013398:	610a      	str	r2, [r1, #16]
 801339a:	4a7b      	ldr	r2, [pc, #492]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 801339c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80133a0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80133a2:	430b      	orrs	r3, r1
 80133a4:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80133a6:	6823      	ldr	r3, [r4, #0]
 80133a8:	e5bd      	b.n	8012f26 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80133aa:	462e      	mov	r6, r5
 80133ac:	e47f      	b.n	8012cae <HAL_RCCEx_PeriphCLKConfig+0xae>
 80133ae:	462e      	mov	r6, r5
 80133b0:	e49f      	b.n	8012cf2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 80133b2:	462e      	mov	r6, r5
 80133b4:	e4fa      	b.n	8012dac <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80133b6:	462e      	mov	r6, r5
 80133b8:	e45b      	b.n	8012c72 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80133ba:	462e      	mov	r6, r5
 80133bc:	e4bb      	b.n	8012d36 <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80133be:	2102      	movs	r1, #2
 80133c0:	1d20      	adds	r0, r4, #4
 80133c2:	f7ff fb29 	bl	8012a18 <RCCEx_PLL2_Config>
 80133c6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80133c8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80133ca:	2d00      	cmp	r5, #0
 80133cc:	d164      	bne.n	8013498 <HAL_RCCEx_PeriphCLKConfig+0x898>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80133ce:	496e      	ldr	r1, [pc, #440]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 80133d0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80133d2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80133d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80133d8:	4302      	orrs	r2, r0
 80133da:	64ca      	str	r2, [r1, #76]	; 0x4c
 80133dc:	e6b3      	b.n	8013146 <HAL_RCCEx_PeriphCLKConfig+0x546>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80133de:	486a      	ldr	r0, [pc, #424]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 80133e0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80133e2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80133e6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80133e8:	e427      	b.n	8012c3a <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80133ea:	4967      	ldr	r1, [pc, #412]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 80133ec:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80133ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80133f2:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80133f4:	e472      	b.n	8012cdc <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80133f6:	4964      	ldr	r1, [pc, #400]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 80133f8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80133fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80133fe:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8013400:	e44b      	b.n	8012c9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013402:	4961      	ldr	r1, [pc, #388]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8013404:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013406:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801340a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 801340c:	e488      	b.n	8012d20 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801340e:	495e      	ldr	r1, [pc, #376]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8013410:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013412:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8013416:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8013418:	e4be      	b.n	8012d98 <HAL_RCCEx_PeriphCLKConfig+0x198>
 801341a:	462e      	mov	r6, r5
 801341c:	e687      	b.n	801312e <HAL_RCCEx_PeriphCLKConfig+0x52e>
 801341e:	462e      	mov	r6, r5
 8013420:	e626      	b.n	8013070 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8013422:	462e      	mov	r6, r5
 8013424:	e604      	b.n	8013030 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8013426:	462e      	mov	r6, r5
 8013428:	e642      	b.n	80130b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 801342a:	462e      	mov	r6, r5
 801342c:	e5ad      	b.n	8012f8a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801342e:	4956      	ldr	r1, [pc, #344]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8013430:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8013434:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8013436:	f022 0207 	bic.w	r2, r2, #7
 801343a:	4302      	orrs	r2, r0
 801343c:	658a      	str	r2, [r1, #88]	; 0x58
 801343e:	e5d7      	b.n	8012ff0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8013440:	4951      	ldr	r1, [pc, #324]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8013442:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8013444:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8013446:	f022 0207 	bic.w	r2, r2, #7
 801344a:	4302      	orrs	r2, r0
 801344c:	654a      	str	r2, [r1, #84]	; 0x54
 801344e:	e5b5      	b.n	8012fbc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8013450:	462e      	mov	r6, r5
 8013452:	e4e8      	b.n	8012e26 <HAL_RCCEx_PeriphCLKConfig+0x226>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8013454:	494c      	ldr	r1, [pc, #304]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8013456:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013458:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 801345a:	f022 0203 	bic.w	r2, r2, #3
 801345e:	4302      	orrs	r2, r0
 8013460:	64ca      	str	r2, [r1, #76]	; 0x4c
 8013462:	e55d      	b.n	8012f20 <HAL_RCCEx_PeriphCLKConfig+0x320>
 8013464:	462e      	mov	r6, r5
 8013466:	e481      	b.n	8012d6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8013468:	462e      	mov	r6, r5
 801346a:	e4bd      	b.n	8012de8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 801346c:	462e      	mov	r6, r5
 801346e:	e4f6      	b.n	8012e5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8013470:	462e      	mov	r6, r5
 8013472:	e64a      	b.n	801310a <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013474:	4844      	ldr	r0, [pc, #272]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8013476:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013478:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 801347c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 801347e:	2d00      	cmp	r5, #0
 8013480:	f47f aecf 	bne.w	8013222 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8013484:	e6d3      	b.n	801322e <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8013486:	462e      	mov	r6, r5
 8013488:	e4d9      	b.n	8012e3e <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801348a:	493f      	ldr	r1, [pc, #252]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 801348c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801348e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8013492:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8013494:	2d00      	cmp	r5, #0
 8013496:	d09a      	beq.n	80133ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8013498:	462e      	mov	r6, r5
 801349a:	e654      	b.n	8013146 <HAL_RCCEx_PeriphCLKConfig+0x546>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801349c:	493a      	ldr	r1, [pc, #232]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 801349e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80134a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80134a4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80134a6:	2d00      	cmp	r5, #0
 80134a8:	d1b7      	bne.n	801341a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80134aa:	e6e0      	b.n	801326e <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80134ac:	1d20      	adds	r0, r4, #4
 80134ae:	f7ff fab3 	bl	8012a18 <RCCEx_PLL2_Config>
 80134b2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80134b4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80134b6:	2d00      	cmp	r5, #0
 80134b8:	d1da      	bne.n	8013470 <HAL_RCCEx_PeriphCLKConfig+0x870>
 80134ba:	e6eb      	b.n	8013294 <HAL_RCCEx_PeriphCLKConfig+0x694>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80134bc:	2102      	movs	r1, #2
 80134be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80134c2:	f7ff fb23 	bl	8012b0c <RCCEx_PLL3_Config>
 80134c6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80134c8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80134ca:	2d00      	cmp	r5, #0
 80134cc:	d1a7      	bne.n	801341e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80134ce:	e5c7      	b.n	8013060 <HAL_RCCEx_PeriphCLKConfig+0x460>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80134d0:	2102      	movs	r1, #2
 80134d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80134d6:	f7ff fb19 	bl	8012b0c <RCCEx_PLL3_Config>
 80134da:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80134dc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80134de:	2d00      	cmp	r5, #0
 80134e0:	d1a1      	bne.n	8013426 <HAL_RCCEx_PeriphCLKConfig+0x826>
 80134e2:	e5dd      	b.n	80130a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80134e4:	2102      	movs	r1, #2
 80134e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80134ea:	f7ff fb0f 	bl	8012b0c <RCCEx_PLL3_Config>
 80134ee:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80134f0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80134f2:	2d00      	cmp	r5, #0
 80134f4:	d195      	bne.n	8013422 <HAL_RCCEx_PeriphCLKConfig+0x822>
 80134f6:	e593      	b.n	8013020 <HAL_RCCEx_PeriphCLKConfig+0x420>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80134f8:	2101      	movs	r1, #1
 80134fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80134fe:	f7ff fb05 	bl	8012b0c <RCCEx_PLL3_Config>
 8013502:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8013504:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8013506:	2d00      	cmp	r5, #0
 8013508:	d1ae      	bne.n	8013468 <HAL_RCCEx_PeriphCLKConfig+0x868>
 801350a:	e466      	b.n	8012dda <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801350c:	2101      	movs	r1, #1
 801350e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013512:	f7ff fafb 	bl	8012b0c <RCCEx_PLL3_Config>
 8013516:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8013518:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 801351a:	2d00      	cmp	r5, #0
 801351c:	d198      	bne.n	8013450 <HAL_RCCEx_PeriphCLKConfig+0x850>
 801351e:	e47a      	b.n	8012e16 <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013520:	4919      	ldr	r1, [pc, #100]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8013522:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013524:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8013528:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 801352a:	2d00      	cmp	r5, #0
 801352c:	f47f acf7 	bne.w	8012f1e <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8013530:	e790      	b.n	8013454 <HAL_RCCEx_PeriphCLKConfig+0x854>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8013532:	2102      	movs	r1, #2
 8013534:	1d20      	adds	r0, r4, #4
 8013536:	f7ff fa6f 	bl	8012a18 <RCCEx_PLL2_Config>
 801353a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801353c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 801353e:	2d00      	cmp	r5, #0
 8013540:	d190      	bne.n	8013464 <HAL_RCCEx_PeriphCLKConfig+0x864>
 8013542:	e40c      	b.n	8012d5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013544:	4910      	ldr	r1, [pc, #64]	; (8013588 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8013546:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013548:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801354c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 801354e:	2d00      	cmp	r5, #0
 8013550:	d18c      	bne.n	801346c <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8013552:	e6b1      	b.n	80132b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8013554:	2102      	movs	r1, #2
 8013556:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801355a:	f7ff fad7 	bl	8012b0c <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801355e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8013562:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8013564:	2800      	cmp	r0, #0
 8013566:	f43f adb9 	beq.w	80130dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
        status = HAL_ERROR;
 801356a:	2601      	movs	r6, #1
 801356c:	e5b6      	b.n	80130dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801356e:	2102      	movs	r1, #2
 8013570:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013574:	f7ff faca 	bl	8012b0c <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8013578:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801357c:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801357e:	2800      	cmp	r0, #0
 8013580:	f43f ad9e 	beq.w	80130c0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
          status = HAL_ERROR;
 8013584:	2601      	movs	r6, #1
 8013586:	e59b      	b.n	80130c0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8013588:	58024400 	.word	0x58024400
 801358c:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013590:	2100      	movs	r1, #0
 8013592:	1d20      	adds	r0, r4, #4
 8013594:	f7ff fa40 	bl	8012a18 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8013598:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801359a:	4605      	mov	r5, r0
      break;
 801359c:	e652      	b.n	8013244 <HAL_RCCEx_PeriphCLKConfig+0x644>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801359e:	6823      	ldr	r3, [r4, #0]
 80135a0:	f7ff bb52 	b.w	8012c48 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80135a4:	2100      	movs	r1, #0
 80135a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80135aa:	f7ff faaf 	bl	8012b0c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80135ae:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80135b0:	4605      	mov	r5, r0
      break;
 80135b2:	f7ff bbb5 	b.w	8012d20 <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80135b6:	2100      	movs	r1, #0
 80135b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80135bc:	f7ff faa6 	bl	8012b0c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80135c0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80135c2:	4605      	mov	r5, r0
      break;
 80135c4:	e63e      	b.n	8013244 <HAL_RCCEx_PeriphCLKConfig+0x644>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80135c6:	2100      	movs	r1, #0
 80135c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80135cc:	f7ff fa9e 	bl	8012b0c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80135d0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80135d2:	4605      	mov	r5, r0
      break;
 80135d4:	f7ff bbe0 	b.w	8012d98 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80135d8:	4938      	ldr	r1, [pc, #224]	; (80136bc <HAL_RCCEx_PeriphCLKConfig+0xabc>)
      break;
 80135da:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80135dc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80135de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80135e2:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80135e4:	e62e      	b.n	8013244 <HAL_RCCEx_PeriphCLKConfig+0x644>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80135e6:	2102      	movs	r1, #2
 80135e8:	3024      	adds	r0, #36	; 0x24
 80135ea:	f7ff fa8f 	bl	8012b0c <RCCEx_PLL3_Config>
 80135ee:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80135f0:	2e00      	cmp	r6, #0
 80135f2:	f43f ab20 	beq.w	8012c36 <HAL_RCCEx_PeriphCLKConfig+0x36>
 80135f6:	e7d2      	b.n	801359e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80135f8:	2100      	movs	r1, #0
 80135fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80135fe:	f7ff fa85 	bl	8012b0c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8013602:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8013604:	4605      	mov	r5, r0
      break;
 8013606:	f7ff bb69 	b.w	8012cdc <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801360a:	2100      	movs	r1, #0
 801360c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013610:	f7ff fa7c 	bl	8012b0c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8013614:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8013616:	4605      	mov	r5, r0
      break;
 8013618:	f7ff bb3f 	b.w	8012c9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801361c:	2101      	movs	r1, #1
 801361e:	1d20      	adds	r0, r4, #4
 8013620:	f7ff f9fa 	bl	8012a18 <RCCEx_PLL2_Config>
 8013624:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8013626:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8013628:	2d00      	cmp	r5, #0
 801362a:	f47f acc6 	bne.w	8012fba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 801362e:	e707      	b.n	8013440 <HAL_RCCEx_PeriphCLKConfig+0x840>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8013630:	2101      	movs	r1, #1
 8013632:	1d20      	adds	r0, r4, #4
 8013634:	f7ff f9f0 	bl	8012a18 <RCCEx_PLL2_Config>
 8013638:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801363a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 801363c:	2d00      	cmp	r5, #0
 801363e:	f47f acd6 	bne.w	8012fee <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8013642:	e6f4      	b.n	801342e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8013644:	2101      	movs	r1, #1
 8013646:	1d20      	adds	r0, r4, #4
 8013648:	f7ff f9e6 	bl	8012a18 <RCCEx_PLL2_Config>
 801364c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801364e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8013650:	2d00      	cmp	r5, #0
 8013652:	f47f aeea 	bne.w	801342a <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8013656:	e654      	b.n	8013302 <HAL_RCCEx_PeriphCLKConfig+0x702>
            ret = HAL_TIMEOUT;
 8013658:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801365a:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 801365c:	4635      	mov	r5, r6
 801365e:	e462      	b.n	8012f26 <HAL_RCCEx_PeriphCLKConfig+0x326>
        tickstart = HAL_GetTick();
 8013660:	f7fa f9da 	bl	800da18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013664:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80136bc <HAL_RCCEx_PeriphCLKConfig+0xabc>
        tickstart = HAL_GetTick();
 8013668:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801366a:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801366e:	e004      	b.n	801367a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013670:	f7fa f9d2 	bl	800da18 <HAL_GetTick>
 8013674:	1bc0      	subs	r0, r0, r7
 8013676:	4548      	cmp	r0, r9
 8013678:	d8ee      	bhi.n	8013658 <HAL_RCCEx_PeriphCLKConfig+0xa58>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801367a:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 801367e:	079b      	lsls	r3, r3, #30
 8013680:	d5f6      	bpl.n	8013670 <HAL_RCCEx_PeriphCLKConfig+0xa70>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013682:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8013686:	e67d      	b.n	8013384 <HAL_RCCEx_PeriphCLKConfig+0x784>
 8013688:	480c      	ldr	r0, [pc, #48]	; (80136bc <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 801368a:	4a0d      	ldr	r2, [pc, #52]	; (80136c0 <HAL_RCCEx_PeriphCLKConfig+0xac0>)
 801368c:	6901      	ldr	r1, [r0, #16]
 801368e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8013692:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8013696:	430a      	orrs	r2, r1
 8013698:	6102      	str	r2, [r0, #16]
 801369a:	e67e      	b.n	801339a <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801369c:	6823      	ldr	r3, [r4, #0]
 801369e:	462e      	mov	r6, r5
 80136a0:	e441      	b.n	8012f26 <HAL_RCCEx_PeriphCLKConfig+0x326>
    switch(PeriphClkInit->Sai1ClockSelection)
 80136a2:	2601      	movs	r6, #1
 80136a4:	f7ff bae4 	b.w	8012c70 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->FmcClockSelection)
 80136a8:	2601      	movs	r6, #1
 80136aa:	4635      	mov	r5, r6
 80136ac:	e438      	b.n	8012f20 <HAL_RCCEx_PeriphCLKConfig+0x320>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80136ae:	2601      	movs	r6, #1
 80136b0:	4635      	mov	r5, r6
 80136b2:	e483      	b.n	8012fbc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80136b4:	2601      	movs	r6, #1
 80136b6:	4635      	mov	r5, r6
 80136b8:	e49a      	b.n	8012ff0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80136ba:	bf00      	nop
 80136bc:	58024400 	.word	0x58024400
 80136c0:	00ffffcf 	.word	0x00ffffcf

080136c4 <HAL_RCCEx_GetPeriphCLKConfig>:
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 80136c4:	4b65      	ldr	r3, [pc, #404]	; (801385c <HAL_RCCEx_GetPeriphCLKConfig+0x198>)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
 80136c6:	f04f 32ff 	mov.w	r2, #4294967295
 80136ca:	6002      	str	r2, [r0, #0]
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 80136cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80136ce:	f3c2 5205 	ubfx	r2, r2, #20, #6
 80136d2:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
 80136d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80136d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80136da:	3201      	adds	r2, #1
 80136dc:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
 80136de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80136e0:	f3c2 6206 	ubfx	r2, r2, #24, #7
 80136e4:	3201      	adds	r2, #1
 80136e6:	6342      	str	r2, [r0, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
 80136e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80136ea:	f3c2 2246 	ubfx	r2, r2, #9, #7
 80136ee:	3201      	adds	r2, #1
 80136f0:	62c2      	str	r2, [r0, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
 80136f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80136f4:	f3c2 4206 	ubfx	r2, r2, #16, #7
 80136f8:	3201      	adds	r2, #1
 80136fa:	6302      	str	r2, [r0, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 80136fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136fe:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8013702:	6382      	str	r2, [r0, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 8013704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013706:	f3c2 2240 	ubfx	r2, r2, #9, #1
 801370a:	63c2      	str	r2, [r0, #60]	; 0x3c
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
 801370c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801370e:	f3c2 3205 	ubfx	r2, r2, #12, #6
 8013712:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
 8013714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013716:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801371a:	3201      	adds	r2, #1
 801371c:	6082      	str	r2, [r0, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
 801371e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013720:	f3c2 6206 	ubfx	r2, r2, #24, #7
 8013724:	3201      	adds	r2, #1
 8013726:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
 8013728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801372a:	f3c2 2246 	ubfx	r2, r2, #9, #7
 801372e:	3201      	adds	r2, #1
 8013730:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
 8013732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013734:	f3c2 4206 	ubfx	r2, r2, #16, #7
 8013738:	3201      	adds	r2, #1
 801373a:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 801373c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801373e:	f3c2 1281 	ubfx	r2, r2, #6, #2
 8013742:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 8013744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013746:	f3c2 1240 	ubfx	r2, r2, #5, #1
 801374a:	61c2      	str	r2, [r0, #28]
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 801374c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801374e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8013752:	67c2      	str	r2, [r0, #124]	; 0x7c
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 8013754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013756:	f002 0207 	and.w	r2, r2, #7
 801375a:	6782      	str	r2, [r0, #120]	; 0x78
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 801375c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801375e:	f002 0207 	and.w	r2, r2, #7
 8013762:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 8013766:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013768:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 801376c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 8013770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013772:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8013776:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 801377a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801377c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8013780:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 8013784:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013786:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
 801378a:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 801378e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013790:	f002 0207 	and.w	r2, r2, #7
 8013794:	6582      	str	r2, [r0, #88]	; 0x58
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
 8013796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013798:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
 801379c:	65c2      	str	r2, [r0, #92]	; 0x5c
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 801379e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80137a0:	f402 0260 	and.w	r2, r2, #14680064	; 0xe00000
 80137a4:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 80137a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80137aa:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
 80137ae:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 80137b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80137b4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80137b8:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 80137bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80137be:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80137c2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 80137c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80137c8:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80137cc:	6502      	str	r2, [r0, #80]	; 0x50
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 80137ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80137d0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80137d4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
 80137d8:	691a      	ldr	r2, [r3, #16]
 80137da:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80137de:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 80137e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80137e4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80137e8:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 80137ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80137f2:	6742      	str	r2, [r0, #116]	; 0x74
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 80137f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137f6:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 80137fa:	66c2      	str	r2, [r0, #108]	; 0x6c
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 80137fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137fe:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8013802:	6682      	str	r2, [r0, #104]	; 0x68
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 8013804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013806:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 801380a:	6602      	str	r2, [r0, #96]	; 0x60
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 801380c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801380e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
 8013812:	6642      	str	r2, [r0, #100]	; 0x64
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 8013814:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013816:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 801381a:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 801381e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013820:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
 8013824:	6702      	str	r2, [r0, #112]	; 0x70
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 8013826:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013828:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 801382c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 8013830:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013832:	f002 0203 	and.w	r2, r2, #3
 8013836:	6442      	str	r2, [r0, #68]	; 0x44
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
 8013838:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801383a:	f002 0230 	and.w	r2, r2, #48	; 0x30
 801383e:	6482      	str	r2, [r0, #72]	; 0x48
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
 8013840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013842:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8013846:	64c2      	str	r2, [r0, #76]	; 0x4c
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 8013848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801384a:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
 801384e:	6542      	str	r2, [r0, #84]	; 0x54
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 8013850:	691b      	ldr	r3, [r3, #16]
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8013852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013856:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
}
 801385a:	4770      	bx	lr
 801385c:	58024400 	.word	0x58024400

08013860 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8013860:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013862:	f7ff f809 	bl	8012878 <HAL_RCC_GetHCLKFreq>
 8013866:	4b05      	ldr	r3, [pc, #20]	; (801387c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8013868:	4a05      	ldr	r2, [pc, #20]	; (8013880 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 801386a:	6a1b      	ldr	r3, [r3, #32]
 801386c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8013870:	5cd3      	ldrb	r3, [r2, r3]
 8013872:	f003 031f 	and.w	r3, r3, #31
}
 8013876:	40d8      	lsrs	r0, r3
 8013878:	bd08      	pop	{r3, pc}
 801387a:	bf00      	nop
 801387c:	58024400 	.word	0x58024400
 8013880:	080bf4ec 	.word	0x080bf4ec

08013884 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013884:	4b4f      	ldr	r3, [pc, #316]	; (80139c4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8013886:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013888:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 801388a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801388c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 801388e:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8013892:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8013896:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8013898:	d05c      	beq.n	8013954 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 801389a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801389e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80138a2:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80138a6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80138aa:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80138ac:	ee07 4a90 	vmov	s15, r4
 80138b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80138b4:	d003      	beq.n	80138be <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 80138b6:	2902      	cmp	r1, #2
 80138b8:	d075      	beq.n	80139a6 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 80138ba:	2900      	cmp	r1, #0
 80138bc:	d04f      	beq.n	801395e <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80138be:	ee07 2a90 	vmov	s15, r2
 80138c2:	eddf 6a41 	vldr	s13, [pc, #260]	; 80139c8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80138c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138cc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80138d0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80139cc <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80138d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138d8:	ee06 3a90 	vmov	s13, r3
 80138dc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80138e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80138e4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80138e8:	eee7 6a25 	vfma.f32	s13, s14, s11
 80138ec:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80138f0:	4a34      	ldr	r2, [pc, #208]	; (80139c4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 80138f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80138f6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80138f8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80138fc:	ee07 3a10 	vmov	s14, r3
 8013900:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8013904:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8013906:	ee37 7a06 	vadd.f32	s14, s14, s12
 801390a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801390e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013912:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8013916:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8013918:	f3c3 4306 	ubfx	r3, r3, #16, #7
 801391c:	ee07 3a10 	vmov	s14, r3
 8013920:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013924:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801392c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013930:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8013934:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8013936:	f3c3 6306 	ubfx	r3, r3, #24, #7
 801393a:	ee07 3a90 	vmov	s15, r3
 801393e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013942:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801394a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801394e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8013952:	4770      	bx	lr
 8013954:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013956:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801395a:	6082      	str	r2, [r0, #8]
}
 801395c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801395e:	6819      	ldr	r1, [r3, #0]
 8013960:	0689      	lsls	r1, r1, #26
 8013962:	d527      	bpl.n	80139b4 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013964:	681c      	ldr	r4, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013966:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801396a:	4919      	ldr	r1, [pc, #100]	; (80139d0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801396c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013972:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801397a:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80139cc <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 801397e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013982:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013984:	ee06 3a90 	vmov	s13, r3
 8013988:	ee05 1a90 	vmov	s11, r1
 801398c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013990:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013994:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013998:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 801399c:	eee7 6a05 	vfma.f32	s13, s14, s10
 80139a0:	ee66 6a26 	vmul.f32	s13, s12, s13
 80139a4:	e7a4      	b.n	80138f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80139a6:	ee07 2a90 	vmov	s15, r2
 80139aa:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80139d4 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 80139ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139b2:	e78a      	b.n	80138ca <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80139b4:	ee07 2a90 	vmov	s15, r2
 80139b8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80139d8 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 80139bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139c0:	e783      	b.n	80138ca <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 80139c2:	bf00      	nop
 80139c4:	58024400 	.word	0x58024400
 80139c8:	4a742400 	.word	0x4a742400
 80139cc:	39000000 	.word	0x39000000
 80139d0:	03d09000 	.word	0x03d09000
 80139d4:	4bbebc20 	.word	0x4bbebc20
 80139d8:	4c742400 	.word	0x4c742400

080139dc <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80139dc:	4b4f      	ldr	r3, [pc, #316]	; (8013b1c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 80139de:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80139e0:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80139e2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80139e4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 80139e6:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80139ea:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80139ee:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 80139f0:	d05c      	beq.n	8013aac <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80139f2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80139f6:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80139fa:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80139fe:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8013a02:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8013a04:	ee07 4a90 	vmov	s15, r4
 8013a08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8013a0c:	d003      	beq.n	8013a16 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8013a0e:	2902      	cmp	r1, #2
 8013a10:	d075      	beq.n	8013afe <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8013a12:	2900      	cmp	r1, #0
 8013a14:	d04f      	beq.n	8013ab6 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013a16:	ee07 2a90 	vmov	s15, r2
 8013a1a:	eddf 6a41 	vldr	s13, [pc, #260]	; 8013b20 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8013a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a24:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8013a28:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8013b24 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8013a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a30:	ee06 3a90 	vmov	s13, r3
 8013a34:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8013a38:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013a3c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013a40:	eee7 6a25 	vfma.f32	s13, s14, s11
 8013a44:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8013a48:	4a34      	ldr	r2, [pc, #208]	; (8013b1c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8013a4a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013a4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013a50:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8013a54:	ee07 3a10 	vmov	s14, r3
 8013a58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8013a5c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8013a5e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013a6a:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8013a6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013a70:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8013a74:	ee07 3a10 	vmov	s14, r3
 8013a78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013a7c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013a88:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8013a8c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013a8e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8013a92:	ee07 3a90 	vmov	s15, r3
 8013a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a9a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013aa2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013aa6:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8013aaa:	4770      	bx	lr
 8013aac:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8013aae:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8013ab2:	6082      	str	r2, [r0, #8]
}
 8013ab4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013ab6:	6819      	ldr	r1, [r3, #0]
 8013ab8:	0689      	lsls	r1, r1, #26
 8013aba:	d527      	bpl.n	8013b0c <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013abc:	681c      	ldr	r4, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013abe:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013ac2:	4919      	ldr	r1, [pc, #100]	; (8013b28 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013ac4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013aca:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ad2:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8013b24 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8013ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013ada:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013adc:	ee06 3a90 	vmov	s13, r3
 8013ae0:	ee05 1a90 	vmov	s11, r1
 8013ae4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013ae8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013aec:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013af0:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8013af4:	eee7 6a05 	vfma.f32	s13, s14, s10
 8013af8:	ee66 6a26 	vmul.f32	s13, s12, s13
 8013afc:	e7a4      	b.n	8013a48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013afe:	ee07 2a90 	vmov	s15, r2
 8013b02:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8013b2c <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8013b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b0a:	e78a      	b.n	8013a22 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013b0c:	ee07 2a90 	vmov	s15, r2
 8013b10:	eddf 6a07 	vldr	s13, [pc, #28]	; 8013b30 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8013b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b18:	e783      	b.n	8013a22 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8013b1a:	bf00      	nop
 8013b1c:	58024400 	.word	0x58024400
 8013b20:	4a742400 	.word	0x4a742400
 8013b24:	39000000 	.word	0x39000000
 8013b28:	03d09000 	.word	0x03d09000
 8013b2c:	4bbebc20 	.word	0x4bbebc20
 8013b30:	4c742400 	.word	0x4c742400

08013b34 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013b34:	4b4f      	ldr	r3, [pc, #316]	; (8013c74 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8013b36:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013b38:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8013b3a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8013b3c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8013b3e:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8013b42:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8013b46:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8013b48:	d05c      	beq.n	8013c04 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8013b4a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8013b4e:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013b52:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8013b56:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8013b5a:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8013b5c:	ee07 4a90 	vmov	s15, r4
 8013b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8013b64:	d003      	beq.n	8013b6e <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
 8013b66:	2902      	cmp	r1, #2
 8013b68:	d075      	beq.n	8013c56 <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8013b6a:	2900      	cmp	r1, #0
 8013b6c:	d04f      	beq.n	8013c0e <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013b6e:	ee07 2a90 	vmov	s15, r2
 8013b72:	eddf 6a41 	vldr	s13, [pc, #260]	; 8013c78 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8013b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b7c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8013b80:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8013c7c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8013b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b88:	ee06 3a90 	vmov	s13, r3
 8013b8c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8013b90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013b94:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013b98:	eee7 6a25 	vfma.f32	s13, s14, s11
 8013b9c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8013ba0:	4a34      	ldr	r2, [pc, #208]	; (8013c74 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8013ba2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013ba6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013ba8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8013bac:	ee07 3a10 	vmov	s14, r3
 8013bb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8013bb4:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8013bb6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013bc2:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8013bc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013bc8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8013bcc:	ee07 3a10 	vmov	s14, r3
 8013bd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013bd4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013be0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8013be4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013be6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8013bea:	ee07 3a90 	vmov	s15, r3
 8013bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bf2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013bfa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013bfe:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8013c02:	4770      	bx	lr
 8013c04:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8013c06:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8013c0a:	6082      	str	r2, [r0, #8]
}
 8013c0c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013c0e:	6819      	ldr	r1, [r3, #0]
 8013c10:	0689      	lsls	r1, r1, #26
 8013c12:	d527      	bpl.n	8013c64 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013c14:	681c      	ldr	r4, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013c16:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013c1a:	4919      	ldr	r1, [pc, #100]	; (8013c80 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013c1c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013c22:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c2a:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8013c7c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8013c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013c32:	40d1      	lsrs	r1, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013c34:	ee06 3a90 	vmov	s13, r3
 8013c38:	ee05 1a90 	vmov	s11, r1
 8013c3c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013c40:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013c44:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013c48:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8013c4c:	eee7 6a05 	vfma.f32	s13, s14, s10
 8013c50:	ee66 6a26 	vmul.f32	s13, s12, s13
 8013c54:	e7a4      	b.n	8013ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013c56:	ee07 2a90 	vmov	s15, r2
 8013c5a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8013c84 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8013c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c62:	e78a      	b.n	8013b7a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013c64:	ee07 2a90 	vmov	s15, r2
 8013c68:	eddf 6a07 	vldr	s13, [pc, #28]	; 8013c88 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8013c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c70:	e783      	b.n	8013b7a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8013c72:	bf00      	nop
 8013c74:	58024400 	.word	0x58024400
 8013c78:	4a742400 	.word	0x4a742400
 8013c7c:	39000000 	.word	0x39000000
 8013c80:	03d09000 	.word	0x03d09000
 8013c84:	4bbebc20 	.word	0x4bbebc20
 8013c88:	4c742400 	.word	0x4c742400

08013c8c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8013c8c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8013c90:	b500      	push	{lr}
 8013c92:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8013c94:	d050      	beq.n	8013d38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8013c96:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8013c9a:	d019      	beq.n	8013cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8013c9c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013ca0:	f000 808a 	beq.w	8013db8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8013ca4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8013ca8:	d05a      	beq.n	8013d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8013caa:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8013cae:	d034      	beq.n	8013d1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8013cb0:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8013cb4:	f000 80b1 	beq.w	8013e1a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8013cb8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8013cbc:	f000 80be 	beq.w	8013e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8013cc0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8013cc4:	f000 8096 	beq.w	8013df4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      frequency = 0;
 8013cc8:	2000      	movs	r0, #0
}
 8013cca:	b005      	add	sp, #20
 8013ccc:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8013cd0:	4a70      	ldr	r2, [pc, #448]	; (8013e94 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8013cd2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8013cd4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8013cd8:	2b80      	cmp	r3, #128	; 0x80
 8013cda:	d059      	beq.n	8013d90 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8013cdc:	d912      	bls.n	8013d04 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8013cde:	2bc0      	cmp	r3, #192	; 0xc0
 8013ce0:	d026      	beq.n	8013d30 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8013ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013ce6:	d1ef      	bne.n	8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8013ce8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8013cea:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8013cee:	d05b      	beq.n	8013da8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8013cf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013cf4:	f000 80a0 	beq.w	8013e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
            frequency = HSE_VALUE;
 8013cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013cfc:	4866      	ldr	r0, [pc, #408]	; (8013e98 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8013cfe:	bf18      	it	ne
 8013d00:	2000      	movne	r0, #0
 8013d02:	e7e2      	b.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (saiclocksource)
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d03c      	beq.n	8013d82 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8013d08:	2b40      	cmp	r3, #64	; 0x40
 8013d0a:	d1dd      	bne.n	8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013d0c:	a801      	add	r0, sp, #4
 8013d0e:	f7ff fdb9 	bl	8013884 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013d12:	9801      	ldr	r0, [sp, #4]
}
 8013d14:	b005      	add	sp, #20
 8013d16:	f85d fb04 	ldr.w	pc, [sp], #4
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8013d1a:	4a5e      	ldr	r2, [pc, #376]	; (8013e94 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8013d1c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8013d1e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8013d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013d26:	d033      	beq.n	8013d90 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8013d28:	d929      	bls.n	8013d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8013d2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013d2e:	d158      	bne.n	8013de2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
          frequency = EXTERNAL_CLOCK_VALUE;
 8013d30:	485a      	ldr	r0, [pc, #360]	; (8013e9c <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
}
 8013d32:	b005      	add	sp, #20
 8013d34:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8013d38:	4b56      	ldr	r3, [pc, #344]	; (8013e94 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8013d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d3c:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8013d40:	2b04      	cmp	r3, #4
 8013d42:	d8c1      	bhi.n	8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8013d44:	a201      	add	r2, pc, #4	; (adr r2, 8013d4c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8013d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d4a:	bf00      	nop
 8013d4c:	08013d83 	.word	0x08013d83
 8013d50:	08013d0d 	.word	0x08013d0d
 8013d54:	08013d91 	.word	0x08013d91
 8013d58:	08013d31 	.word	0x08013d31
 8013d5c:	08013d9f 	.word	0x08013d9f
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8013d60:	4a4c      	ldr	r2, [pc, #304]	; (8013e94 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8013d62:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8013d64:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8013d68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013d6c:	d010      	beq.n	8013d90 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8013d6e:	d91d      	bls.n	8013dac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8013d70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8013d74:	d0dc      	beq.n	8013d30 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8013d76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013d7a:	d0b5      	beq.n	8013ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8013d7c:	e7a4      	b.n	8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d134      	bne.n	8013dec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013d82:	a801      	add	r0, sp, #4
 8013d84:	f7ff fed6 	bl	8013b34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013d88:	9802      	ldr	r0, [sp, #8]
}
 8013d8a:	b005      	add	sp, #20
 8013d8c:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013d90:	a801      	add	r0, sp, #4
 8013d92:	f7ff fe23 	bl	80139dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013d96:	9801      	ldr	r0, [sp, #4]
}
 8013d98:	b005      	add	sp, #20
 8013d9a:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8013d9e:	4b3d      	ldr	r3, [pc, #244]	; (8013e94 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8013da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8013da2:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8013da6:	d1a3      	bne.n	8013cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSI_VALUE;
 8013da8:	483d      	ldr	r0, [pc, #244]	; (8013ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 8013daa:	e78e      	b.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (saiclocksource)
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d0e8      	beq.n	8013d82 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8013db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013db4:	d0aa      	beq.n	8013d0c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8013db6:	e787      	b.n	8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8013db8:	4a36      	ldr	r2, [pc, #216]	; (8013e94 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8013dba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8013dbc:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8013dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013dc4:	d0e4      	beq.n	8013d90 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8013dc6:	d805      	bhi.n	8013dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d0da      	beq.n	8013d82 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8013dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013dd0:	d09c      	beq.n	8013d0c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8013dd2:	e779      	b.n	8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8013dd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8013dd8:	d0aa      	beq.n	8013d30 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8013dda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013dde:	d083      	beq.n	8013ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8013de0:	e772      	b.n	8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8013de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013de6:	f43f af7f 	beq.w	8013ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8013dea:	e76d      	b.n	8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8013dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013df0:	d08c      	beq.n	8013d0c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8013df2:	e769      	b.n	8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8013df4:	4b27      	ldr	r3, [pc, #156]	; (8013e94 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8013df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013df8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8013dfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013e00:	d0d2      	beq.n	8013da8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8013e02:	d824      	bhi.n	8013e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8013e04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013e08:	d03e      	beq.n	8013e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8013e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013e0e:	d127      	bne.n	8013e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013e10:	a801      	add	r0, sp, #4
 8013e12:	f7ff fde3 	bl	80139dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013e16:	9802      	ldr	r0, [sp, #8]
          break;
 8013e18:	e757      	b.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8013e1a:	4a1e      	ldr	r2, [pc, #120]	; (8013e94 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8013e1c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8013e1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8013e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013e26:	d02a      	beq.n	8013e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8013e28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013e2c:	f43f af5c 	beq.w	8013ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	f47f af49 	bne.w	8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8013e36:	e769      	b.n	8013d0c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
      switch (srcclk)
 8013e38:	481a      	ldr	r0, [pc, #104]	; (8013ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 8013e3a:	e746      	b.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8013e3c:	4b15      	ldr	r3, [pc, #84]	; (8013e94 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8013e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8013e40:	03db      	lsls	r3, r3, #15
 8013e42:	d59e      	bpl.n	8013d82 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013e44:	a801      	add	r0, sp, #4
 8013e46:	f7ff fd1d 	bl	8013884 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8013e4a:	9803      	ldr	r0, [sp, #12]
          break;
 8013e4c:	e73d      	b.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (srcclk)
 8013e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013e52:	d0f1      	beq.n	8013e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          frequency = HSE_VALUE;
 8013e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013e58:	480f      	ldr	r0, [pc, #60]	; (8013e98 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8013e5a:	bf18      	it	ne
 8013e5c:	2000      	movne	r0, #0
 8013e5e:	e734      	b.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (srcclk)
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	f47f af31 	bne.w	8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013e66:	f7fe fd07 	bl	8012878 <HAL_RCC_GetHCLKFreq>
 8013e6a:	4b0a      	ldr	r3, [pc, #40]	; (8013e94 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8013e6c:	4a0e      	ldr	r2, [pc, #56]	; (8013ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>)
 8013e6e:	6a1b      	ldr	r3, [r3, #32]
 8013e70:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8013e74:	5cd3      	ldrb	r3, [r2, r3]
 8013e76:	f003 031f 	and.w	r3, r3, #31
 8013e7a:	40d8      	lsrs	r0, r3
          break;
 8013e7c:	e725      	b.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013e7e:	a801      	add	r0, sp, #4
 8013e80:	f7ff fdac 	bl	80139dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8013e84:	9803      	ldr	r0, [sp, #12]
          break;
 8013e86:	e720      	b.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013e88:	a801      	add	r0, sp, #4
 8013e8a:	f7ff fcfb 	bl	8013884 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013e8e:	9802      	ldr	r0, [sp, #8]
          break;
 8013e90:	e71b      	b.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8013e92:	bf00      	nop
 8013e94:	58024400 	.word	0x58024400
 8013e98:	017d7840 	.word	0x017d7840
 8013e9c:	00bb8000 	.word	0x00bb8000
 8013ea0:	03d09000 	.word	0x03d09000
 8013ea4:	003d0900 	.word	0x003d0900
 8013ea8:	080bf4ec 	.word	0x080bf4ec

08013eac <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8013eac:	2800      	cmp	r0, #0
 8013eae:	d036      	beq.n	8013f1e <HAL_RNG_Init+0x72>
{
 8013eb0:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8013eb2:	7a43      	ldrb	r3, [r0, #9]
 8013eb4:	4604      	mov	r4, r0
 8013eb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8013eba:	b333      	cbz	r3, 8013f0a <HAL_RNG_Init+0x5e>
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8013ebc:	6823      	ldr	r3, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8013ebe:	2202      	movs	r2, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8013ec0:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8013ec2:	7262      	strb	r2, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8013ec4:	681a      	ldr	r2, [r3, #0]
 8013ec6:	f022 0220 	bic.w	r2, r2, #32
 8013eca:	430a      	orrs	r2, r1
 8013ecc:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8013ece:	681a      	ldr	r2, [r3, #0]
 8013ed0:	f042 0204 	orr.w	r2, r2, #4
 8013ed4:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8013ed6:	685b      	ldr	r3, [r3, #4]
 8013ed8:	065b      	lsls	r3, r3, #25
 8013eda:	d503      	bpl.n	8013ee4 <HAL_RNG_Init+0x38>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8013edc:	2304      	movs	r3, #4
    return HAL_ERROR;
 8013ede:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8013ee0:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8013ee2:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8013ee4:	f7f9 fd98 	bl	800da18 <HAL_GetTick>
 8013ee8:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8013eea:	e004      	b.n	8013ef6 <HAL_RNG_Init+0x4a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8013eec:	f7f9 fd94 	bl	800da18 <HAL_GetTick>
 8013ef0:	1b43      	subs	r3, r0, r5
 8013ef2:	2b02      	cmp	r3, #2
 8013ef4:	d80d      	bhi.n	8013f12 <HAL_RNG_Init+0x66>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8013ef6:	6823      	ldr	r3, [r4, #0]
 8013ef8:	685b      	ldr	r3, [r3, #4]
 8013efa:	f013 0304 	ands.w	r3, r3, #4
 8013efe:	d1f5      	bne.n	8013eec <HAL_RNG_Init+0x40>
  hrng->State = HAL_RNG_STATE_READY;
 8013f00:	2201      	movs	r2, #1
  return HAL_OK;
 8013f02:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8013f04:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8013f06:	60e3      	str	r3, [r4, #12]
}
 8013f08:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8013f0a:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8013f0c:	f7f2 fd6a 	bl	80069e4 <HAL_RNG_MspInit>
 8013f10:	e7d4      	b.n	8013ebc <HAL_RNG_Init+0x10>
      hrng->State = HAL_RNG_STATE_ERROR;
 8013f12:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8013f14:	2302      	movs	r3, #2
      return HAL_ERROR;
 8013f16:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 8013f18:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8013f1a:	60e3      	str	r3, [r4, #12]
}
 8013f1c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8013f1e:	2001      	movs	r0, #1
}
 8013f20:	4770      	bx	lr
 8013f22:	bf00      	nop

08013f24 <HAL_RNG_DeInit>:
#if defined(RNG_CR_CONDRST)
  uint32_t tickstart;

#endif /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8013f24:	b1b0      	cbz	r0, 8013f54 <HAL_RNG_DeInit+0x30>
    }
  }

#else
  /* Clear Clock Error Detection bit */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 8013f26:	6803      	ldr	r3, [r0, #0]
 8013f28:	681a      	ldr	r2, [r3, #0]
 8013f2a:	f022 0220 	bic.w	r2, r2, #32
{
 8013f2e:	b510      	push	{r4, lr}
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 8013f30:	601a      	str	r2, [r3, #0]
 8013f32:	4604      	mov	r4, r0
#endif /* RNG_CR_CONDRST */
  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 8013f34:	681a      	ldr	r2, [r3, #0]
 8013f36:	f022 020c 	bic.w	r2, r2, #12
 8013f3a:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 8013f3c:	685a      	ldr	r2, [r3, #4]
 8013f3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8013f42:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 8013f44:	f7f2 fd6c 	bl	8006a20 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	7263      	strb	r3, [r4, #9]

  /* Release Lock */
  __HAL_UNLOCK(hrng);

  /* Return the function status */
  return HAL_OK;
 8013f4c:	4618      	mov	r0, r3
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8013f4e:	60e3      	str	r3, [r4, #12]
  __HAL_UNLOCK(hrng);
 8013f50:	7223      	strb	r3, [r4, #8]
}
 8013f52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8013f54:	2001      	movs	r0, #1
}
 8013f56:	4770      	bx	lr

08013f58 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8013f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8013f5c:	7a03      	ldrb	r3, [r0, #8]
 8013f5e:	2b01      	cmp	r3, #1
 8013f60:	d028      	beq.n	8013fb4 <HAL_RNG_GenerateRandomNumber+0x5c>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8013f62:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 8013f64:	2201      	movs	r2, #1
 8013f66:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 8013f68:	4293      	cmp	r3, r2
 8013f6a:	fa5f f883 	uxtb.w	r8, r3
  __HAL_LOCK(hrng);
 8013f6e:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8013f70:	d007      	beq.n	8013f82 <HAL_RNG_GenerateRandomNumber+0x2a>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8013f72:	2304      	movs	r3, #4
    status = HAL_ERROR;
 8013f74:	4690      	mov	r8, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8013f76:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8013f78:	2300      	movs	r3, #0
 8013f7a:	7223      	strb	r3, [r4, #8]

  return status;
}
 8013f7c:	4640      	mov	r0, r8
 8013f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8013f82:	2302      	movs	r3, #2
 8013f84:	460e      	mov	r6, r1
 8013f86:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8013f88:	f7f9 fd46 	bl	800da18 <HAL_GetTick>
 8013f8c:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8013f8e:	e004      	b.n	8013f9a <HAL_RNG_GenerateRandomNumber+0x42>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8013f90:	f7f9 fd42 	bl	800da18 <HAL_GetTick>
 8013f94:	1bc0      	subs	r0, r0, r7
 8013f96:	2802      	cmp	r0, #2
 8013f98:	d811      	bhi.n	8013fbe <HAL_RNG_GenerateRandomNumber+0x66>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8013f9a:	6822      	ldr	r2, [r4, #0]
 8013f9c:	6855      	ldr	r5, [r2, #4]
 8013f9e:	f015 0501 	ands.w	r5, r5, #1
 8013fa2:	d0f5      	beq.n	8013f90 <HAL_RNG_GenerateRandomNumber+0x38>
    hrng->RandomNumber = hrng->Instance->DR;
 8013fa4:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 8013fa6:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8013fa8:	f04f 0800 	mov.w	r8, #0
    hrng->RandomNumber = hrng->Instance->DR;
 8013fac:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8013fae:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8013fb0:	7262      	strb	r2, [r4, #9]
 8013fb2:	e7e1      	b.n	8013f78 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 8013fb4:	f04f 0802 	mov.w	r8, #2
}
 8013fb8:	4640      	mov	r0, r8
 8013fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hrng->State = HAL_RNG_STATE_READY;
 8013fbe:	2201      	movs	r2, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8013fc0:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 8013fc2:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 8013fc4:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8013fc6:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 8013fc8:	e7d8      	b.n	8013f7c <HAL_RNG_GenerateRandomNumber+0x24>
 8013fca:	bf00      	nop

08013fcc <HAL_SAI_MspInit>:
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 8013fcc:	4770      	bx	lr
 8013fce:	bf00      	nop

08013fd0 <HAL_SAI_Init.part.0>:
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 8013fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8013fd2:	6801      	ldr	r1, [r0, #0]
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 8013fd4:	4605      	mov	r5, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8013fd6:	4bab      	ldr	r3, [pc, #684]	; (8014284 <HAL_SAI_Init.part.0+0x2b4>)
 8013fd8:	4299      	cmp	r1, r3
 8013fda:	d01c      	beq.n	8014016 <HAL_SAI_Init.part.0+0x46>
 8013fdc:	3320      	adds	r3, #32
 8013fde:	4299      	cmp	r1, r3
 8013fe0:	d019      	beq.n	8014016 <HAL_SAI_Init.part.0+0x46>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8013fe2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8013fe6:	4299      	cmp	r1, r3
 8013fe8:	d04e      	beq.n	8014088 <HAL_SAI_Init.part.0+0xb8>
 8013fea:	3320      	adds	r3, #32
 8013fec:	4299      	cmp	r1, r3
 8013fee:	d04b      	beq.n	8014088 <HAL_SAI_Init.part.0+0xb8>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8013ff0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8013ff4:	4299      	cmp	r1, r3
 8013ff6:	f000 812e 	beq.w	8014256 <HAL_SAI_Init.part.0+0x286>
 8013ffa:	3320      	adds	r3, #32
 8013ffc:	4299      	cmp	r1, r3
 8013ffe:	f000 812a 	beq.w	8014256 <HAL_SAI_Init.part.0+0x286>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8014002:	4ba1      	ldr	r3, [pc, #644]	; (8014288 <HAL_SAI_Init.part.0+0x2b8>)
 8014004:	4299      	cmp	r1, r3
 8014006:	f000 8128 	beq.w	801425a <HAL_SAI_Init.part.0+0x28a>
 801400a:	3320      	adds	r3, #32
 801400c:	4299      	cmp	r1, r3
 801400e:	f000 8124 	beq.w	801425a <HAL_SAI_Init.part.0+0x28a>
    return HAL_ERROR;
 8014012:	2001      	movs	r0, #1
}
 8014014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 8014016:	4e9d      	ldr	r6, [pc, #628]	; (801428c <HAL_SAI_Init.part.0+0x2bc>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8014018:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
 801401c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8014020:	2b00      	cmp	r3, #0
 8014022:	d038      	beq.n	8014096 <HAL_SAI_Init.part.0+0xc6>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8014024:	4b9a      	ldr	r3, [pc, #616]	; (8014290 <HAL_SAI_Init.part.0+0x2c0>)
 8014026:	4a9b      	ldr	r2, [pc, #620]	; (8014294 <HAL_SAI_Init.part.0+0x2c4>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	fba2 2303 	umull	r2, r3, r2, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 801402e:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8014030:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8014032:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8014036:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8014038:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 801403a:	2b00      	cmp	r3, #0
 801403c:	d032      	beq.n	80140a4 <HAL_SAI_Init.part.0+0xd4>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 801403e:	680c      	ldr	r4, [r1, #0]
    count--;
 8014040:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8014042:	f414 3480 	ands.w	r4, r4, #65536	; 0x10000
 8014046:	d1f8      	bne.n	801403a <HAL_SAI_Init.part.0+0x6a>
  hsai->State = HAL_SAI_STATE_BUSY;
 8014048:	2302      	movs	r3, #2
 801404a:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 801404e:	68eb      	ldr	r3, [r5, #12]
 8014050:	2b01      	cmp	r3, #1
 8014052:	f000 8144 	beq.w	80142de <HAL_SAI_Init.part.0+0x30e>
 8014056:	2b02      	cmp	r3, #2
 8014058:	bf15      	itete	ne
 801405a:	2003      	movne	r0, #3
 801405c:	2023      	moveq	r0, #35	; 0x23
 801405e:	2702      	movne	r7, #2
 8014060:	2722      	moveq	r7, #34	; 0x22
 8014062:	bf15      	itete	ne
 8014064:	f04f 0c01 	movne.w	ip, #1
 8014068:	f04f 0c21 	moveq.w	ip, #33	; 0x21
 801406c:	2200      	movne	r2, #0
 801406e:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
 8014070:	68ab      	ldr	r3, [r5, #8]
 8014072:	3b01      	subs	r3, #1
 8014074:	2b04      	cmp	r3, #4
 8014076:	f200 8169 	bhi.w	801434c <HAL_SAI_Init.part.0+0x37c>
 801407a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801407e:	00e1      	.short	0x00e1
 8014080:	00e8001c 	.word	0x00e8001c
 8014084:	00e4001b 	.word	0x00e4001b
  if (hsai->State == HAL_SAI_STATE_RESET)
 8014088:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
    SaiBaseAddress = SAI2;
 801408c:	4e82      	ldr	r6, [pc, #520]	; (8014298 <HAL_SAI_Init.part.0+0x2c8>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 801408e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8014092:	2b00      	cmp	r3, #0
 8014094:	d1c6      	bne.n	8014024 <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
 8014096:	4628      	mov	r0, r5
    hsai->Lock = HAL_UNLOCKED;
 8014098:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 801409c:	f7ff ff96 	bl	8013fcc <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 80140a0:	6829      	ldr	r1, [r5, #0]
 80140a2:	e7bf      	b.n	8014024 <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80140a4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    return HAL_ERROR;
 80140a8:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80140aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140ae:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
 80140b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80140b4:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80140b6:	f44f 6700 	mov.w	r7, #2048	; 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80140ba:	6a2b      	ldr	r3, [r5, #32]
  SaiBaseAddress->GCR = tmpregisterGCR;
 80140bc:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d049      	beq.n	8014156 <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80140c2:	4b70      	ldr	r3, [pc, #448]	; (8014284 <HAL_SAI_Init.part.0+0x2b4>)
 80140c4:	4299      	cmp	r1, r3
 80140c6:	f000 811f 	beq.w	8014308 <HAL_SAI_Init.part.0+0x338>
 80140ca:	4874      	ldr	r0, [pc, #464]	; (801429c <HAL_SAI_Init.part.0+0x2cc>)
 80140cc:	1a08      	subs	r0, r1, r0
 80140ce:	fab0 f080 	clz	r0, r0
 80140d2:	0940      	lsrs	r0, r0, #5
 80140d4:	2800      	cmp	r0, #0
 80140d6:	f040 8117 	bne.w	8014308 <HAL_SAI_Init.part.0+0x338>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80140da:	4b71      	ldr	r3, [pc, #452]	; (80142a0 <HAL_SAI_Init.part.0+0x2d0>)
 80140dc:	4299      	cmp	r1, r3
 80140de:	f000 811f 	beq.w	8014320 <HAL_SAI_Init.part.0+0x350>
 80140e2:	3320      	adds	r3, #32
 80140e4:	4299      	cmp	r1, r3
 80140e6:	f000 811b 	beq.w	8014320 <HAL_SAI_Init.part.0+0x350>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80140ea:	4b6e      	ldr	r3, [pc, #440]	; (80142a4 <HAL_SAI_Init.part.0+0x2d4>)
 80140ec:	4299      	cmp	r1, r3
 80140ee:	f000 8111 	beq.w	8014314 <HAL_SAI_Init.part.0+0x344>
 80140f2:	3320      	adds	r3, #32
 80140f4:	4299      	cmp	r1, r3
 80140f6:	f000 810d 	beq.w	8014314 <HAL_SAI_Init.part.0+0x344>
    if (hsai->Instance == SAI4_Block_A)
 80140fa:	4b63      	ldr	r3, [pc, #396]	; (8014288 <HAL_SAI_Init.part.0+0x2b8>)
 80140fc:	4299      	cmp	r1, r3
 80140fe:	f000 811d 	beq.w	801433c <HAL_SAI_Init.part.0+0x36c>
    if (hsai->Instance == SAI4_Block_B)
 8014102:	4b69      	ldr	r3, [pc, #420]	; (80142a8 <HAL_SAI_Init.part.0+0x2d8>)
 8014104:	4299      	cmp	r1, r3
 8014106:	f000 8114 	beq.w	8014332 <HAL_SAI_Init.part.0+0x362>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 801410a:	69ab      	ldr	r3, [r5, #24]
 801410c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8014110:	f000 80eb 	beq.w	80142ea <HAL_SAI_Init.part.0+0x31a>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8014114:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8014116:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 801411a:	6c69      	ldr	r1, [r5, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 801411c:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8014120:	ea4f 0340 	mov.w	r3, r0, lsl #1
 8014124:	6a28      	ldr	r0, [r5, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8014126:	bf0c      	ite	eq
 8014128:	2202      	moveq	r2, #2
 801412a:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 801412c:	fb00 f202 	mul.w	r2, r0, r2
 8014130:	0212      	lsls	r2, r2, #8
 8014132:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 8014136:	4a5d      	ldr	r2, [pc, #372]	; (80142ac <HAL_SAI_Init.part.0+0x2dc>)
 8014138:	fba2 0203 	umull	r0, r2, r2, r3
 801413c:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 801413e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8014142:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8014146:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 8014148:	bf08      	it	eq
 801414a:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 801414c:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 801414e:	626a      	str	r2, [r5, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8014150:	d101      	bne.n	8014156 <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8014152:	0852      	lsrs	r2, r2, #1
 8014154:	626a      	str	r2, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8014156:	686b      	ldr	r3, [r5, #4]
 8014158:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 801415c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801415e:	f040 80b9 	bne.w	80142d4 <HAL_SAI_Init.part.0+0x304>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8014162:	2b01      	cmp	r3, #1
 8014164:	bf14      	ite	ne
 8014166:	f44f 7400 	movne.w	r4, #512	; 0x200
 801416a:	2400      	moveq	r4, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 801416c:	f7f9 fc6c 	bl	800da48 <HAL_GetREVID>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8014170:	6c69      	ldr	r1, [r5, #68]	; 0x44
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8014172:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8014176:	e9d5 3200 	ldrd	r3, r2, [r5]
 801417a:	ea42 0201 	orr.w	r2, r2, r1
 801417e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8014180:	ea42 0201 	orr.w	r2, r2, r1
 8014184:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8014186:	ea42 0201 	orr.w	r2, r2, r1
 801418a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 801418c:	ea42 0201 	orr.w	r2, r2, r1
 8014190:	6969      	ldr	r1, [r5, #20]
 8014192:	ea42 0201 	orr.w	r2, r2, r1
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8014196:	f0c0 8095 	bcc.w	80142c4 <HAL_SAI_Init.part.0+0x2f4>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801419a:	69a9      	ldr	r1, [r5, #24]
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 801419c:	6818      	ldr	r0, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801419e:	430a      	orrs	r2, r1
 80141a0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80141a2:	430a      	orrs	r2, r1
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80141a4:	4942      	ldr	r1, [pc, #264]	; (80142b0 <HAL_SAI_Init.part.0+0x2e0>)
 80141a6:	4001      	ands	r1, r0
 80141a8:	6019      	str	r1, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80141aa:	6929      	ldr	r1, [r5, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80141ac:	430a      	orrs	r2, r1
 80141ae:	6819      	ldr	r1, [r3, #0]
 80141b0:	430a      	orrs	r2, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80141b2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80141b4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80141b8:	493e      	ldr	r1, [pc, #248]	; (80142b4 <HAL_SAI_Init.part.0+0x2e4>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80141ba:	433a      	orrs	r2, r7
 80141bc:	4322      	orrs	r2, r4
 80141be:	601a      	str	r2, [r3, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80141c0:	685a      	ldr	r2, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80141c2:	6b28      	ldr	r0, [r5, #48]	; 0x30
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80141c4:	4011      	ands	r1, r2
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80141c6:	69ea      	ldr	r2, [r5, #28]
 80141c8:	4302      	orrs	r2, r0
 80141ca:	6b68      	ldr	r0, [r5, #52]	; 0x34
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80141cc:	6059      	str	r1, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80141ce:	4302      	orrs	r2, r0
 80141d0:	6859      	ldr	r1, [r3, #4]
 80141d2:	430a      	orrs	r2, r1
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80141d4:	4938      	ldr	r1, [pc, #224]	; (80142b8 <HAL_SAI_Init.part.0+0x2e8>)
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80141d6:	605a      	str	r2, [r3, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80141d8:	689a      	ldr	r2, [r3, #8]
 80141da:	4011      	ands	r1, r2
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80141dc:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80141de:	6099      	str	r1, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80141e0:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80141e2:	6898      	ldr	r0, [r3, #8]
 80141e4:	430a      	orrs	r2, r1
 80141e6:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80141e8:	430a      	orrs	r2, r1
 80141ea:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80141ec:	3901      	subs	r1, #1
 80141ee:	430a      	orrs	r2, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80141f0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80141f2:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80141f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80141f8:	4302      	orrs	r2, r0
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80141fa:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80141fe:	609a      	str	r2, [r3, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8014200:	68d9      	ldr	r1, [r3, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8014202:	6eaa      	ldr	r2, [r5, #104]	; 0x68
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8014204:	4001      	ands	r1, r0
 8014206:	60d9      	str	r1, [r3, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8014208:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 801420a:	68d8      	ldr	r0, [r3, #12]
 801420c:	430a      	orrs	r2, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 801420e:	6f69      	ldr	r1, [r5, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8014210:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8014214:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8014216:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8014218:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 801421c:	4919      	ldr	r1, [pc, #100]	; (8014284 <HAL_SAI_Init.part.0+0x2b4>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 801421e:	4302      	orrs	r2, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8014220:	428b      	cmp	r3, r1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8014222:	60da      	str	r2, [r3, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8014224:	d01b      	beq.n	801425e <HAL_SAI_Init.part.0+0x28e>
 8014226:	4a18      	ldr	r2, [pc, #96]	; (8014288 <HAL_SAI_Init.part.0+0x2b8>)
 8014228:	4293      	cmp	r3, r2
 801422a:	d018      	beq.n	801425e <HAL_SAI_Init.part.0+0x28e>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 801422c:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 801422e:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8014230:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return HAL_OK;
 8014234:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
 8014236:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 801423a:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
 801423e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 8014240:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8014244:	e739      	b.n	80140ba <HAL_SAI_Init.part.0+0xea>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8014246:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8014248:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 801424c:	e735      	b.n	80140ba <HAL_SAI_Init.part.0+0xea>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 801424e:	4662      	mov	r2, ip
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8014250:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8014254:	e731      	b.n	80140ba <HAL_SAI_Init.part.0+0xea>
    SaiBaseAddress = SAI3;
 8014256:	4e19      	ldr	r6, [pc, #100]	; (80142bc <HAL_SAI_Init.part.0+0x2ec>)
 8014258:	e6de      	b.n	8014018 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
 801425a:	4e19      	ldr	r6, [pc, #100]	; (80142c0 <HAL_SAI_Init.part.0+0x2f0>)
 801425c:	e6dc      	b.n	8014018 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 801425e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8014260:	f023 0301 	bic.w	r3, r3, #1
 8014264:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8014266:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 801426a:	2b01      	cmp	r3, #1
 801426c:	d1de      	bne.n	801422c <HAL_SAI_Init.part.0+0x25c>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 801426e:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8014272:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8014274:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8014278:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 801427a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801427c:	f043 0301 	orr.w	r3, r3, #1
 8014280:	6473      	str	r3, [r6, #68]	; 0x44
 8014282:	e7d3      	b.n	801422c <HAL_SAI_Init.part.0+0x25c>
 8014284:	40015804 	.word	0x40015804
 8014288:	58005404 	.word	0x58005404
 801428c:	40015800 	.word	0x40015800
 8014290:	2400737c 	.word	0x2400737c
 8014294:	95cbec1b 	.word	0x95cbec1b
 8014298:	40015c00 	.word	0x40015c00
 801429c:	40015824 	.word	0x40015824
 80142a0:	40015c04 	.word	0x40015c04
 80142a4:	40016004 	.word	0x40016004
 80142a8:	58005424 	.word	0x58005424
 80142ac:	cccccccd 	.word	0xcccccccd
 80142b0:	f005c010 	.word	0xf005c010
 80142b4:	ffff1ff0 	.word	0xffff1ff0
 80142b8:	fff88000 	.word	0xfff88000
 80142bc:	40016000 	.word	0x40016000
 80142c0:	58005400 	.word	0x58005400
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80142c4:	69a9      	ldr	r1, [r5, #24]
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80142c6:	6818      	ldr	r0, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80142c8:	430a      	orrs	r2, r1
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80142ca:	4921      	ldr	r1, [pc, #132]	; (8014350 <HAL_SAI_Init.part.0+0x380>)
 80142cc:	4001      	ands	r1, r0
 80142ce:	6019      	str	r1, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80142d0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80142d2:	e76b      	b.n	80141ac <HAL_SAI_Init.part.0+0x1dc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80142d4:	2b01      	cmp	r3, #1
 80142d6:	bf08      	it	eq
 80142d8:	f44f 7400 	moveq.w	r4, #512	; 0x200
 80142dc:	e746      	b.n	801416c <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
 80142de:	2013      	movs	r0, #19
 80142e0:	2712      	movs	r7, #18
 80142e2:	f04f 0c11 	mov.w	ip, #17
 80142e6:	2210      	movs	r2, #16
 80142e8:	e6c2      	b.n	8014070 <HAL_SAI_Init.part.0+0xa0>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80142ea:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80142ec:	2904      	cmp	r1, #4
 80142ee:	d02b      	beq.n	8014348 <HAL_SAI_Init.part.0+0x378>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80142f0:	2908      	cmp	r1, #8
 80142f2:	d01b      	beq.n	801432c <HAL_SAI_Init.part.0+0x35c>
        tmpframelength = hsai->FrameInit.FrameLength;
 80142f4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80142f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80142fa:	0043      	lsls	r3, r0, #1
 80142fc:	6a28      	ldr	r0, [r5, #32]
 80142fe:	fb00 f202 	mul.w	r2, r0, r2
 8014302:	fbb3 f3f2 	udiv	r3, r3, r2
 8014306:	e716      	b.n	8014136 <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8014308:	f44f 7080 	mov.w	r0, #256	; 0x100
 801430c:	f7ff fcbe 	bl	8013c8c <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8014310:	6829      	ldr	r1, [r5, #0]
 8014312:	e6e2      	b.n	80140da <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8014314:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014318:	f7ff fcb8 	bl	8013c8c <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 801431c:	6829      	ldr	r1, [r5, #0]
 801431e:	e6ec      	b.n	80140fa <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8014320:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014324:	f7ff fcb2 	bl	8013c8c <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8014328:	6829      	ldr	r1, [r5, #0]
 801432a:	e6de      	b.n	80140ea <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = 256U;
 801432c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014330:	e7e1      	b.n	80142f6 <HAL_SAI_Init.part.0+0x326>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8014332:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014336:	f7ff fca9 	bl	8013c8c <HAL_RCCEx_GetPeriphCLKFreq>
 801433a:	e6e6      	b.n	801410a <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 801433c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014340:	f7ff fca4 	bl	8013c8c <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 8014344:	6829      	ldr	r1, [r5, #0]
 8014346:	e6dc      	b.n	8014102 <HAL_SAI_Init.part.0+0x132>
        tmpframelength = 64U;
 8014348:	2240      	movs	r2, #64	; 0x40
 801434a:	e7d4      	b.n	80142f6 <HAL_SAI_Init.part.0+0x326>
      syncen_bits = 0;
 801434c:	2700      	movs	r7, #0
 801434e:	e6b4      	b.n	80140ba <HAL_SAI_Init.part.0+0xea>
 8014350:	f805c010 	.word	0xf805c010

08014354 <HAL_SAI_Init>:
  if (hsai == NULL)
 8014354:	b1f0      	cbz	r0, 8014394 <HAL_SAI_Init+0x40>
{
 8014356:	b510      	push	{r4, lr}
 8014358:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 801435a:	f7f9 fb75 	bl	800da48 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 801435e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014362:	2b01      	cmp	r3, #1
 8014364:	d004      	beq.n	8014370 <HAL_SAI_Init+0x1c>
 8014366:	4620      	mov	r0, r4
}
 8014368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801436c:	f7ff be30 	b.w	8013fd0 <HAL_SAI_Init.part.0>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8014370:	6823      	ldr	r3, [r4, #0]
 8014372:	4a09      	ldr	r2, [pc, #36]	; (8014398 <HAL_SAI_Init+0x44>)
 8014374:	4293      	cmp	r3, r2
 8014376:	d005      	beq.n	8014384 <HAL_SAI_Init+0x30>
 8014378:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 801437c:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8014380:	4293      	cmp	r3, r2
 8014382:	d105      	bne.n	8014390 <HAL_SAI_Init+0x3c>
 8014384:	6863      	ldr	r3, [r4, #4]
 8014386:	2b01      	cmp	r3, #1
 8014388:	d102      	bne.n	8014390 <HAL_SAI_Init+0x3c>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 801438a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801438c:	2b00      	cmp	r3, #0
 801438e:	d0ea      	beq.n	8014366 <HAL_SAI_Init+0x12>
}
 8014390:	2001      	movs	r0, #1
 8014392:	bd10      	pop	{r4, pc}
 8014394:	2001      	movs	r0, #1
 8014396:	4770      	bx	lr
 8014398:	40015804 	.word	0x40015804

0801439c <HAL_SAI_DMAStop>:
{
 801439c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 801439e:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 80143a2:	2b01      	cmp	r3, #1
 80143a4:	d05f      	beq.n	8014466 <HAL_SAI_DMAStop+0xca>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80143a6:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
 80143a8:	2501      	movs	r5, #1
 80143aa:	4604      	mov	r4, r0
 80143ac:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80143b0:	6813      	ldr	r3, [r2, #0]
 80143b2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80143b6:	6013      	str	r3, [r2, #0]
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80143b8:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 80143bc:	2b12      	cmp	r3, #18
 80143be:	d03e      	beq.n	801443e <HAL_SAI_DMAStop+0xa2>
  HAL_StatusTypeDef status = HAL_OK;
 80143c0:	2500      	movs	r5, #0
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80143c2:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80143c6:	2b22      	cmp	r3, #34	; 0x22
 80143c8:	d024      	beq.n	8014414 <HAL_SAI_DMAStop+0x78>
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80143ca:	4b28      	ldr	r3, [pc, #160]	; (801446c <HAL_SAI_DMAStop+0xd0>)
 80143cc:	4a28      	ldr	r2, [pc, #160]	; (8014470 <HAL_SAI_DMAStop+0xd4>)
 80143ce:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
 80143d0:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80143d2:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
 80143d6:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80143d8:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 80143da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80143de:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80143e0:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 80143e2:	b17b      	cbz	r3, 8014404 <HAL_SAI_DMAStop+0x68>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80143e4:	680a      	ldr	r2, [r1, #0]
    count--;
 80143e6:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80143e8:	03d2      	lsls	r2, r2, #15
 80143ea:	d4fa      	bmi.n	80143e2 <HAL_SAI_DMAStop+0x46>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80143ec:	684b      	ldr	r3, [r1, #4]
  hsai->State = HAL_SAI_STATE_READY;
 80143ee:	2201      	movs	r2, #1
}
 80143f0:	4628      	mov	r0, r5
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80143f2:	f043 0308 	orr.w	r3, r3, #8
 80143f6:	604b      	str	r3, [r1, #4]
  __HAL_UNLOCK(hsai);
 80143f8:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 80143fa:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 80143fe:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8014402:	bd38      	pop	{r3, r4, r5, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8014404:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    status = HAL_ERROR;
 8014408:	2501      	movs	r5, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801440a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801440e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    status = HAL_ERROR;
 8014412:	e7eb      	b.n	80143ec <HAL_SAI_DMAStop+0x50>
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8014414:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8014418:	2800      	cmp	r0, #0
 801441a:	d0d6      	beq.n	80143ca <HAL_SAI_DMAStop+0x2e>
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 801441c:	f7fa fbaa 	bl	800eb74 <HAL_DMA_Abort>
 8014420:	2800      	cmp	r0, #0
 8014422:	d0d2      	beq.n	80143ca <HAL_SAI_DMAStop+0x2e>
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8014424:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8014428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801442a:	2b80      	cmp	r3, #128	; 0x80
 801442c:	d0cd      	beq.n	80143ca <HAL_SAI_DMAStop+0x2e>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 801442e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        status = HAL_ERROR;
 8014432:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8014434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014438:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 801443c:	e7c5      	b.n	80143ca <HAL_SAI_DMAStop+0x2e>
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 801443e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8014442:	2800      	cmp	r0, #0
 8014444:	d0bc      	beq.n	80143c0 <HAL_SAI_DMAStop+0x24>
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8014446:	f7fa fb95 	bl	800eb74 <HAL_DMA_Abort>
 801444a:	2800      	cmp	r0, #0
 801444c:	d0b8      	beq.n	80143c0 <HAL_SAI_DMAStop+0x24>
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 801444e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8014452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014454:	2b80      	cmp	r3, #128	; 0x80
 8014456:	d0b3      	beq.n	80143c0 <HAL_SAI_DMAStop+0x24>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8014458:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801445c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014460:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8014464:	e7ad      	b.n	80143c2 <HAL_SAI_DMAStop+0x26>
  __HAL_LOCK(hsai);
 8014466:	2502      	movs	r5, #2
}
 8014468:	4628      	mov	r0, r5
 801446a:	bd38      	pop	{r3, r4, r5, pc}
 801446c:	2400737c 	.word	0x2400737c
 8014470:	95cbec1b 	.word	0x95cbec1b

08014474 <HAL_SAI_Transmit_DMA>:
{
 8014474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014478:	460f      	mov	r7, r1
 801447a:	4604      	mov	r4, r0
 801447c:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 801447e:	f7f9 facb 	bl	800da18 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8014482:	2f00      	cmp	r7, #0
 8014484:	d061      	beq.n	801454a <HAL_SAI_Transmit_DMA+0xd6>
 8014486:	fab5 f885 	clz	r8, r5
 801448a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801448e:	2d00      	cmp	r5, #0
 8014490:	d05b      	beq.n	801454a <HAL_SAI_Transmit_DMA+0xd6>
  if (hsai->State == HAL_SAI_STATE_READY)
 8014492:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8014496:	2b01      	cmp	r3, #1
 8014498:	fa5f f983 	uxtb.w	r9, r3
 801449c:	d150      	bne.n	8014540 <HAL_SAI_Transmit_DMA+0xcc>
    __HAL_LOCK(hsai);
 801449e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80144a2:	2b01      	cmp	r3, #1
 80144a4:	d04c      	beq.n	8014540 <HAL_SAI_Transmit_DMA+0xcc>
    hsai->XferSize = Size;
 80144a6:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80144a8:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
 80144ac:	4606      	mov	r6, r0
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80144ae:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    hsai->XferSize = Size;
 80144b2:	f365 030f 	bfi	r3, r5, #0, #16
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80144b6:	6822      	ldr	r2, [r4, #0]
    __HAL_LOCK(hsai);
 80144b8:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80144bc:	4639      	mov	r1, r7
    hsai->XferSize = Size;
 80144be:	f365 431f 	bfi	r3, r5, #16, #16
    hsai->pBuffPtr = pData;
 80144c2:	67a7      	str	r7, [r4, #120]	; 0x78
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80144c4:	321c      	adds	r2, #28
    hsai->XferSize = Size;
 80144c6:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80144c8:	462b      	mov	r3, r5
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80144ca:	2512      	movs	r5, #18
 80144cc:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80144d0:	4d2e      	ldr	r5, [pc, #184]	; (801458c <HAL_SAI_Transmit_DMA+0x118>)
    hsai->hdmatx->XferAbortCallback = NULL;
 80144d2:	f8c0 8050 	str.w	r8, [r0, #80]	; 0x50
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80144d6:	6405      	str	r5, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80144d8:	4d2d      	ldr	r5, [pc, #180]	; (8014590 <HAL_SAI_Transmit_DMA+0x11c>)
 80144da:	63c5      	str	r5, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80144dc:	4d2d      	ldr	r5, [pc, #180]	; (8014594 <HAL_SAI_Transmit_DMA+0x120>)
 80144de:	64c5      	str	r5, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80144e0:	f7fa f9b0 	bl	800e844 <HAL_DMA_Start_IT>
 80144e4:	2800      	cmp	r0, #0
 80144e6:	d13e      	bne.n	8014566 <HAL_SAI_Transmit_DMA+0xf2>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80144e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80144ea:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80144ec:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80144ee:	d031      	beq.n	8014554 <HAL_SAI_Transmit_DMA+0xe0>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80144f0:	2105      	movs	r1, #5
 80144f2:	2261      	movs	r2, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80144f4:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80144f6:	2b01      	cmp	r3, #1
 80144f8:	bf98      	it	ls
 80144fa:	4611      	movls	r1, r2
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80144fc:	6822      	ldr	r2, [r4, #0]
 80144fe:	6913      	ldr	r3, [r2, #16]
 8014500:	430b      	orrs	r3, r1
 8014502:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8014504:	6813      	ldr	r3, [r2, #0]
 8014506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801450a:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 801450c:	e006      	b.n	801451c <HAL_SAI_Transmit_DMA+0xa8>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 801450e:	f7f9 fa83 	bl	800da18 <HAL_GetTick>
 8014512:	1b83      	subs	r3, r0, r6
 8014514:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014518:	d82a      	bhi.n	8014570 <HAL_SAI_Transmit_DMA+0xfc>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 801451a:	6822      	ldr	r2, [r4, #0]
 801451c:	6955      	ldr	r5, [r2, #20]
 801451e:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8014522:	d0f4      	beq.n	801450e <HAL_SAI_Transmit_DMA+0x9a>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8014524:	6813      	ldr	r3, [r2, #0]
 8014526:	03db      	lsls	r3, r3, #15
 8014528:	d403      	bmi.n	8014532 <HAL_SAI_Transmit_DMA+0xbe>
      __HAL_SAI_ENABLE(hsai);
 801452a:	6813      	ldr	r3, [r2, #0]
 801452c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014530:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8014532:	2300      	movs	r3, #0
    return HAL_OK;
 8014534:	4699      	mov	r9, r3
    __HAL_UNLOCK(hsai);
 8014536:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 801453a:	4648      	mov	r0, r9
 801453c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8014540:	f04f 0902 	mov.w	r9, #2
}
 8014544:	4648      	mov	r0, r9
 8014546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 801454a:	f04f 0901 	mov.w	r9, #1
}
 801454e:	4648      	mov	r0, r9
 8014550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8014554:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8014558:	2a01      	cmp	r2, #1
 801455a:	bf0b      	itete	eq
 801455c:	2115      	moveq	r1, #21
 801455e:	2105      	movne	r1, #5
 8014560:	2271      	moveq	r2, #113	; 0x71
 8014562:	2261      	movne	r2, #97	; 0x61
 8014564:	e7c6      	b.n	80144f4 <HAL_SAI_Transmit_DMA+0x80>
}
 8014566:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
 8014568:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
 801456c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8014570:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8014574:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
 8014578:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801457c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8014580:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8014582:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8014586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801458a:	bf00      	nop
 801458c:	080145fd 	.word	0x080145fd
 8014590:	08014599 	.word	0x08014599
 8014594:	08014609 	.word	0x08014609

08014598 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8014598:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 801459a:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801459c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801459e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80145a2:	d01b      	beq.n	80145dc <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80145a4:	6803      	ldr	r3, [r0, #0]
    hsai->XferCount = 0;
 80145a6:	f04f 0c00 	mov.w	ip, #0
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80145aa:	6c41      	ldr	r1, [r0, #68]	; 0x44
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80145ac:	681a      	ldr	r2, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80145ae:	2908      	cmp	r1, #8
    hsai->XferCount = 0;
 80145b0:	f8a0 c07e 	strh.w	ip, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80145b4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80145b8:	601a      	str	r2, [r3, #0]
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80145ba:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80145bc:	d011      	beq.n	80145e2 <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80145be:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 80145c2:	f06f 0105 	mvn.w	r1, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80145c6:	3a02      	subs	r2, #2
 80145c8:	2a01      	cmp	r2, #1
 80145ca:	bf98      	it	ls
 80145cc:	4661      	movls	r1, ip

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80145ce:	691a      	ldr	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80145d0:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80145d4:	400a      	ands	r2, r1
 80145d6:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
 80145d8:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80145dc:	f7f7 f8c8 	bl	800b770 <HAL_SAI_TxCpltCallback>
#endif
}
 80145e0:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80145e2:	f022 0102 	bic.w	r1, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80145e6:	2901      	cmp	r1, #1
 80145e8:	bf0b      	itete	eq
 80145ea:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 80145ee:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 80145f2:	f06f 0115 	mvneq.w	r1, #21
 80145f6:	f06f 0105 	mvnne.w	r1, #5
 80145fa:	e7e4      	b.n	80145c6 <SAI_DMATxCplt+0x2e>

080145fc <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80145fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80145fe:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 8014600:	f7f7 f8bc 	bl	800b77c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8014604:	bd08      	pop	{r3, pc}
 8014606:	bf00      	nop

08014608 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8014608:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801460a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801460c:	f7fb f844 	bl	800f698 <HAL_DMA_GetError>
 8014610:	2802      	cmp	r0, #2
 8014612:	d023      	beq.n	801465c <SAI_DMAError+0x54>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8014614:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8014618:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 801461a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 801461e:	4b13      	ldr	r3, [pc, #76]	; (801466c <SAI_DMAError+0x64>)
 8014620:	4813      	ldr	r0, [pc, #76]	; (8014670 <SAI_DMAError+0x68>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8014622:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8014626:	681b      	ldr	r3, [r3, #0]
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8014628:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 801462a:	fba0 0303 	umull	r0, r3, r0, r3
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 801462e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8014632:	0b1b      	lsrs	r3, r3, #12
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8014634:	600a      	str	r2, [r1, #0]
  __HAL_SAI_DISABLE(hsai);
 8014636:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8014638:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 801463a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801463e:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 8014640:	b16b      	cbz	r3, 801465e <SAI_DMAError+0x56>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8014642:	680a      	ldr	r2, [r1, #0]
    count--;
 8014644:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8014646:	03d2      	lsls	r2, r2, #15
 8014648:	d4fa      	bmi.n	8014640 <SAI_DMAError+0x38>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 801464a:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 801464c:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 801464e:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 8014650:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 8014654:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 8014658:	f7f7 f898 	bl	800b78c <HAL_SAI_ErrorCallback>
#endif
  }
}
 801465c:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801465e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8014662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014666:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 801466a:	e7ee      	b.n	801464a <SAI_DMAError+0x42>
 801466c:	2400737c 	.word	0x2400737c
 8014670:	95cbec1b 	.word	0x95cbec1b

08014674 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8014674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014678:	4605      	mov	r5, r0
 801467a:	b086      	sub	sp, #24
 801467c:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801467e:	f7f9 f9cb 	bl	800da18 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8014682:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8014684:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8014686:	6828      	ldr	r0, [r5, #0]
 8014688:	f001 ffc2 	bl	8016610 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 801468c:	4604      	mov	r4, r0
 801468e:	b118      	cbz	r0, 8014698 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8014690:	4620      	mov	r0, r4
 8014692:	b006      	add	sp, #24
 8014694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8014698:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 801469a:	6828      	ldr	r0, [r5, #0]
 801469c:	0409      	lsls	r1, r1, #16
 801469e:	f002 fd11 	bl	80170c4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80146a2:	4604      	mov	r4, r0
 80146a4:	2800      	cmp	r0, #0
 80146a6:	d1f3      	bne.n	8014690 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80146a8:	f04f 32ff 	mov.w	r2, #4294967295
 80146ac:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80146ae:	4669      	mov	r1, sp
 80146b0:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80146b2:	e9cd 2300 	strd	r2, r3, [sp]
 80146b6:	2230      	movs	r2, #48	; 0x30
 80146b8:	2302      	movs	r3, #2
 80146ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80146be:	2200      	movs	r2, #0
 80146c0:	2301      	movs	r3, #1
 80146c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80146c6:	f001 ff8d 	bl	80165e4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80146ca:	6828      	ldr	r0, [r5, #0]
 80146cc:	f002 fe80 	bl	80173d0 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80146d0:	4604      	mov	r4, r0
 80146d2:	2800      	cmp	r0, #0
 80146d4:	d1dc      	bne.n	8014690 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 80146d6:	4682      	mov	sl, r0
 80146d8:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80146da:	f240 582a 	movw	r8, #1322	; 0x52a
 80146de:	e004      	b.n	80146ea <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80146e0:	f7f9 f99a 	bl	800da18 <HAL_GetTick>
 80146e4:	1b83      	subs	r3, r0, r6
 80146e6:	3301      	adds	r3, #1
 80146e8:	d024      	beq.n	8014734 <SD_FindSCR+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80146ea:	6828      	ldr	r0, [r5, #0]
 80146ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80146ee:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80146f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80146f4:	d10c      	bne.n	8014710 <SD_FindSCR+0x9c>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80146f6:	0319      	lsls	r1, r3, #12
 80146f8:	d4f2      	bmi.n	80146e0 <SD_FindSCR+0x6c>
 80146fa:	2c00      	cmp	r4, #0
 80146fc:	d1f0      	bne.n	80146e0 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80146fe:	f001 ff4f 	bl	80165a0 <SDMMC_ReadFIFO>
 8014702:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8014704:	6828      	ldr	r0, [r5, #0]
      index++;
 8014706:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8014708:	f001 ff4a 	bl	80165a0 <SDMMC_ReadFIFO>
 801470c:	4682      	mov	sl, r0
      index++;
 801470e:	e7e7      	b.n	80146e0 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8014710:	071a      	lsls	r2, r3, #28
 8014712:	d416      	bmi.n	8014742 <SD_FindSCR+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8014714:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014716:	079b      	lsls	r3, r3, #30
 8014718:	d40f      	bmi.n	801473a <SD_FindSCR+0xc6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801471a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801471c:	f014 0420 	ands.w	r4, r4, #32
 8014720:	d113      	bne.n	801474a <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014722:	fa9a f28a 	rev.w	r2, sl
 8014726:	fa99 f389 	rev.w	r3, r9
 801472a:	490a      	ldr	r1, [pc, #40]	; (8014754 <SD_FindSCR+0xe0>)
 801472c:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801472e:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8014732:	e7ad      	b.n	8014690 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8014734:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8014738:	e7aa      	b.n	8014690 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801473a:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801473c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801473e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8014740:	e7a6      	b.n	8014690 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8014742:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8014744:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8014746:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8014748:	e7a2      	b.n	8014690 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801474a:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 801474c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801474e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8014750:	e79e      	b.n	8014690 <SD_FindSCR+0x1c>
 8014752:	bf00      	nop
 8014754:	18000f3a 	.word	0x18000f3a

08014758 <SD_HighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SD_HighSpeed(SD_HandleTypeDef *hsd)
{
 8014758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801475c:	b096      	sub	sp, #88	; 0x58
 801475e:	4604      	mov	r4, r0
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8014760:	2240      	movs	r2, #64	; 0x40
 8014762:	2100      	movs	r1, #0
 8014764:	a806      	add	r0, sp, #24
 8014766:	f011 f803 	bl	8025770 <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 801476a:	f7f9 f955 	bl	800da18 <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 801476e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8014770:	b13b      	cbz	r3, 8014782 <SD_HighSpeed+0x2a>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8014772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014776:	d00a      	beq.n	801478e <SD_HighSpeed+0x36>
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;

    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);


    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 8014778:	2600      	movs	r6, #0
    }

  }

  return errorstate;
}
 801477a:	4630      	mov	r0, r6
 801477c:	b016      	add	sp, #88	; 0x58
 801477e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8014782:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
}
 8014786:	4630      	mov	r0, r6
 8014788:	b016      	add	sp, #88	; 0x58
 801478a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 801478e:	2300      	movs	r3, #0
 8014790:	4607      	mov	r7, r0
 8014792:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8014794:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 8014796:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8014798:	f001 ff3a 	bl	8016610 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 801479c:	4606      	mov	r6, r0
 801479e:	2800      	cmp	r0, #0
 80147a0:	d1eb      	bne.n	801477a <SD_HighSpeed+0x22>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80147a2:	f04f 32ff 	mov.w	r2, #4294967295
 80147a6:	2340      	movs	r3, #64	; 0x40
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 80147a8:	4669      	mov	r1, sp
 80147aa:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80147ac:	e9cd 2300 	strd	r2, r3, [sp]
 80147b0:	2260      	movs	r2, #96	; 0x60
 80147b2:	2302      	movs	r3, #2
 80147b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80147b8:	2200      	movs	r2, #0
 80147ba:	2301      	movs	r3, #1
 80147bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 80147c0:	f001 ff10 	bl	80165e4 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 80147c4:	4925      	ldr	r1, [pc, #148]	; (801485c <SD_HighSpeed+0x104>)
 80147c6:	6820      	ldr	r0, [r4, #0]
 80147c8:	f003 f8ce 	bl	8017968 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 80147cc:	4606      	mov	r6, r0
 80147ce:	2800      	cmp	r0, #0
 80147d0:	d1d3      	bne.n	801477a <SD_HighSpeed+0x22>
  uint32_t count, loop = 0 ;
 80147d2:	4681      	mov	r9, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80147d4:	f240 5a2a 	movw	sl, #1322	; 0x52a
 80147d8:	e004      	b.n	80147e4 <SD_HighSpeed+0x8c>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 80147da:	f7f9 f91d 	bl	800da18 <HAL_GetTick>
 80147de:	1bc0      	subs	r0, r0, r7
 80147e0:	3001      	adds	r0, #1
 80147e2:	d029      	beq.n	8014838 <SD_HighSpeed+0xe0>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80147e4:	6820      	ldr	r0, [r4, #0]
 80147e6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80147e8:	ea12 0f0a 	tst.w	r2, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80147ec:	6b42      	ldr	r2, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80147ee:	d112      	bne.n	8014816 <SD_HighSpeed+0xbe>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80147f0:	0415      	lsls	r5, r2, #16
 80147f2:	d5f2      	bpl.n	80147da <SD_HighSpeed+0x82>
 80147f4:	ab06      	add	r3, sp, #24
 80147f6:	eb03 1549 	add.w	r5, r3, r9, lsl #5
 80147fa:	ab0e      	add	r3, sp, #56	; 0x38
 80147fc:	eb03 1849 	add.w	r8, r3, r9, lsl #5
 8014800:	e000      	b.n	8014804 <SD_HighSpeed+0xac>
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8014802:	6820      	ldr	r0, [r4, #0]
 8014804:	f001 fecc 	bl	80165a0 <SDMMC_ReadFIFO>
 8014808:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 801480c:	4545      	cmp	r5, r8
 801480e:	d1f8      	bne.n	8014802 <SD_HighSpeed+0xaa>
        loop ++;
 8014810:	f109 0901 	add.w	r9, r9, #1
 8014814:	e7e1      	b.n	80147da <SD_HighSpeed+0x82>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8014816:	0714      	lsls	r4, r2, #28
 8014818:	d415      	bmi.n	8014846 <SD_HighSpeed+0xee>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801481a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801481c:	0791      	lsls	r1, r2, #30
 801481e:	d415      	bmi.n	801484c <SD_HighSpeed+0xf4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8014820:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014822:	0692      	lsls	r2, r2, #26
 8014824:	d416      	bmi.n	8014854 <SD_HighSpeed+0xfc>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8014826:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801482a:	490d      	ldr	r1, [pc, #52]	; (8014860 <SD_HighSpeed+0x108>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 801482c:	0793      	lsls	r3, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801482e:	6381      	str	r1, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8014830:	d4a2      	bmi.n	8014778 <SD_HighSpeed+0x20>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8014832:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8014836:	e7a0      	b.n	801477a <SD_HighSpeed+0x22>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8014838:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 801483c:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801483e:	63a6      	str	r6, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8014840:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8014844:	e799      	b.n	801477a <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8014846:	2208      	movs	r2, #8
 8014848:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 801484a:	e796      	b.n	801477a <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801484c:	2202      	movs	r2, #2
      return errorstate;
 801484e:	4616      	mov	r6, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8014850:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8014852:	e792      	b.n	801477a <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8014854:	2220      	movs	r2, #32
      return errorstate;
 8014856:	4616      	mov	r6, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8014858:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 801485a:	e78e      	b.n	801477a <SD_HighSpeed+0x22>
 801485c:	80ffff01 	.word	0x80ffff01
 8014860:	18000f3a 	.word	0x18000f3a

08014864 <HAL_SD_MspInit>:
 8014864:	4770      	bx	lr
 8014866:	bf00      	nop

08014868 <HAL_SD_MspDeInit>:
 8014868:	4770      	bx	lr
 801486a:	bf00      	nop

0801486c <HAL_SD_ReadBlocks>:
{
 801486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014870:	460d      	mov	r5, r1
 8014872:	b087      	sub	sp, #28
 8014874:	4680      	mov	r8, r0
 8014876:	4614      	mov	r4, r2
 8014878:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 801487a:	f7f9 f8cd 	bl	800da18 <HAL_GetTick>
  if(NULL == pData)
 801487e:	2d00      	cmp	r5, #0
 8014880:	f000 8099 	beq.w	80149b6 <HAL_SD_ReadBlocks+0x14a>
  if(hsd->State == HAL_SD_STATE_READY)
 8014884:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
 8014888:	2b01      	cmp	r3, #1
 801488a:	fa5f f983 	uxtb.w	r9, r3
 801488e:	d17f      	bne.n	8014990 <HAL_SD_ReadBlocks+0x124>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8014890:	19e3      	adds	r3, r4, r7
 8014892:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8014896:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8014898:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801489a:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801489e:	f200 8096 	bhi.w	80149ce <HAL_SD_ReadBlocks+0x162>
    hsd->State = HAL_SD_STATE_BUSY;
 80148a2:	2303      	movs	r3, #3
 80148a4:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 80148a6:	f8d8 0000 	ldr.w	r0, [r8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80148aa:	f04f 0a02 	mov.w	sl, #2
    hsd->State = HAL_SD_STATE_BUSY;
 80148ae:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80148b2:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 80148b6:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80148b8:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80148ba:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80148bc:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80148c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80148c4:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 80148c8:	bf18      	it	ne
 80148ca:	0264      	lslne	r4, r4, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80148cc:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80148ce:	027b      	lsls	r3, r7, #9
 80148d0:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80148d2:	2390      	movs	r3, #144	; 0x90
 80148d4:	e9cd 3a02 	strd	r3, sl, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80148d8:	f001 fe84 	bl	80165e4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80148dc:	f8d8 0000 	ldr.w	r0, [r8]
    if(NumberOfBlocks > 1U)
 80148e0:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80148e2:	68c3      	ldr	r3, [r0, #12]
 80148e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148e8:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 80148ea:	d95d      	bls.n	80149a8 <HAL_SD_ReadBlocks+0x13c>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80148ec:	4621      	mov	r1, r4
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80148ee:	f8c8 a030 	str.w	sl, [r8, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80148f2:	f001 ffd9 	bl	80168a8 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80148f6:	2800      	cmp	r0, #0
 80148f8:	d173      	bne.n	80149e2 <HAL_SD_ReadBlocks+0x176>
    dataremaining = config.DataLength;
 80148fa:	f8dd b004 	ldr.w	fp, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80148fe:	e005      	b.n	801490c <HAL_SD_ReadBlocks+0xa0>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8014900:	f7f9 f88a 	bl	800da18 <HAL_GetTick>
 8014904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014906:	1b80      	subs	r0, r0, r6
 8014908:	4298      	cmp	r0, r3
 801490a:	d22b      	bcs.n	8014964 <HAL_SD_ReadBlocks+0xf8>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801490c:	f8d8 0000 	ldr.w	r0, [r8]
 8014910:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014912:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8014916:	d174      	bne.n	8014a02 <HAL_SD_ReadBlocks+0x196>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8014918:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801491a:	041a      	lsls	r2, r3, #16
 801491c:	d5f0      	bpl.n	8014900 <HAL_SD_ReadBlocks+0x94>
 801491e:	f1bb 0f1f 	cmp.w	fp, #31
 8014922:	d9ed      	bls.n	8014900 <HAL_SD_ReadBlocks+0x94>
 8014924:	1d2c      	adds	r4, r5, #4
 8014926:	f105 0a24 	add.w	sl, r5, #36	; 0x24
 801492a:	e001      	b.n	8014930 <HAL_SD_ReadBlocks+0xc4>
          data = SDMMC_ReadFIFO(hsd->Instance);
 801492c:	f8d8 0000 	ldr.w	r0, [r8]
        for(count = 0U; count < 8U; count++)
 8014930:	3404      	adds	r4, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 8014932:	f001 fe35 	bl	80165a0 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8014936:	0a01      	lsrs	r1, r0, #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8014938:	0c02      	lsrs	r2, r0, #16
        for(count = 0U; count < 8U; count++)
 801493a:	4554      	cmp	r4, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 801493c:	ea4f 6310 	mov.w	r3, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
 8014940:	f804 0c08 	strb.w	r0, [r4, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8014944:	f804 1c07 	strb.w	r1, [r4, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8014948:	f804 2c06 	strb.w	r2, [r4, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 801494c:	f804 3c05 	strb.w	r3, [r4, #-5]
        for(count = 0U; count < 8U; count++)
 8014950:	d1ec      	bne.n	801492c <HAL_SD_ReadBlocks+0xc0>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8014952:	f7f9 f861 	bl	800da18 <HAL_GetTick>
 8014956:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014958:	1b80      	subs	r0, r0, r6
          tempbuff++;
 801495a:	3520      	adds	r5, #32
        dataremaining -= 32U;
 801495c:	f1ab 0b20 	sub.w	fp, fp, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8014960:	4298      	cmp	r0, r3
 8014962:	d3d3      	bcc.n	801490c <HAL_SD_ReadBlocks+0xa0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014964:	f8d8 3000 	ldr.w	r3, [r8]
        return HAL_TIMEOUT;
 8014968:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801496c:	484d      	ldr	r0, [pc, #308]	; (8014aa4 <HAL_SD_ReadBlocks+0x238>)
        hsd->State= HAL_SD_STATE_READY;
 801496e:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
 8014970:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014972:	6398      	str	r0, [r3, #56]	; 0x38
}
 8014974:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8014976:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 801497a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801497e:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8014982:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8014986:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
}
 801498a:	b007      	add	sp, #28
 801498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8014990:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    return HAL_ERROR;
 8014994:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8014998:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801499c:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
}
 80149a0:	4648      	mov	r0, r9
 80149a2:	b007      	add	sp, #28
 80149a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80149a8:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80149aa:	4621      	mov	r1, r4
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80149ac:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80149b0:	f001 fed4 	bl	801675c <SDMMC_CmdReadSingleBlock>
 80149b4:	e79f      	b.n	80148f6 <HAL_SD_ReadBlocks+0x8a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80149b6:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    return HAL_ERROR;
 80149ba:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80149be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 80149c2:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80149c4:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
}
 80149c8:	b007      	add	sp, #28
 80149ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80149ce:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
}
 80149d2:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80149d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80149d8:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
}
 80149dc:	b007      	add	sp, #28
 80149de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80149e2:	f8d8 3000 	ldr.w	r3, [r8]
 80149e6:	4a2f      	ldr	r2, [pc, #188]	; (8014aa4 <HAL_SD_ReadBlocks+0x238>)
 80149e8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80149ea:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 80149ec:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 80149f0:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 80149f2:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 80149f4:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80149f8:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80149fc:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
          return HAL_ERROR;
 8014a00:	e7ce      	b.n	80149a0 <HAL_SD_ReadBlocks+0x134>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8014a02:	68c3      	ldr	r3, [r0, #12]
 8014a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014a08:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8014a0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014a0c:	05db      	lsls	r3, r3, #23
 8014a0e:	d50b      	bpl.n	8014a28 <HAL_SD_ReadBlocks+0x1bc>
 8014a10:	2f01      	cmp	r7, #1
 8014a12:	d909      	bls.n	8014a28 <HAL_SD_ReadBlocks+0x1bc>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8014a14:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8014a18:	2b03      	cmp	r3, #3
 8014a1a:	d005      	beq.n	8014a28 <HAL_SD_ReadBlocks+0x1bc>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8014a1c:	f002 f936 	bl	8016c8c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8014a20:	2800      	cmp	r0, #0
 8014a22:	d1de      	bne.n	80149e2 <HAL_SD_ReadBlocks+0x176>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8014a24:	f8d8 0000 	ldr.w	r0, [r8]
 8014a28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014a2a:	f013 0308 	ands.w	r3, r3, #8
 8014a2e:	d115      	bne.n	8014a5c <HAL_SD_ReadBlocks+0x1f0>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8014a30:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014a32:	f012 0202 	ands.w	r2, r2, #2
 8014a36:	d120      	bne.n	8014a7a <HAL_SD_ReadBlocks+0x20e>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8014a38:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014a3a:	f013 0320 	ands.w	r3, r3, #32
 8014a3e:	d02a      	beq.n	8014a96 <HAL_SD_ReadBlocks+0x22a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014a40:	4b18      	ldr	r3, [pc, #96]	; (8014aa4 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
 8014a42:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014a44:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8014a46:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8014a4a:	f043 0320 	orr.w	r3, r3, #32
 8014a4e:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8014a52:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014a56:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
      return HAL_ERROR;
 8014a5a:	e7a1      	b.n	80149a0 <HAL_SD_ReadBlocks+0x134>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014a5c:	4b11      	ldr	r3, [pc, #68]	; (8014aa4 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
 8014a5e:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014a60:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8014a62:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8014a66:	f043 0308 	orr.w	r3, r3, #8
 8014a6a:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 8014a6e:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8014a70:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014a74:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      return HAL_ERROR;
 8014a78:	e792      	b.n	80149a0 <HAL_SD_ReadBlocks+0x134>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014a7a:	4a0a      	ldr	r2, [pc, #40]	; (8014aa4 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
 8014a7c:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014a7e:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8014a80:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8014a84:	f042 0202 	orr.w	r2, r2, #2
 8014a88:	f8c8 2038 	str.w	r2, [r8, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8014a8c:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014a90:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      return HAL_ERROR;
 8014a94:	e784      	b.n	80149a0 <HAL_SD_ReadBlocks+0x134>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014a96:	4904      	ldr	r1, [pc, #16]	; (8014aa8 <HAL_SD_ReadBlocks+0x23c>)
    hsd->State = HAL_SD_STATE_READY;
 8014a98:	2201      	movs	r2, #1
    return HAL_OK;
 8014a9a:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014a9c:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8014a9e:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
    return HAL_OK;
 8014aa2:	e77d      	b.n	80149a0 <HAL_SD_ReadBlocks+0x134>
 8014aa4:	1fe00fff 	.word	0x1fe00fff
 8014aa8:	18000f3a 	.word	0x18000f3a

08014aac <HAL_SD_WriteBlocks>:
{
 8014aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab0:	460d      	mov	r5, r1
 8014ab2:	b089      	sub	sp, #36	; 0x24
 8014ab4:	4604      	mov	r4, r0
 8014ab6:	4692      	mov	sl, r2
 8014ab8:	461f      	mov	r7, r3
 8014aba:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8014abe:	f7f8 ffab 	bl	800da18 <HAL_GetTick>
  if(NULL == pData)
 8014ac2:	2d00      	cmp	r5, #0
 8014ac4:	d079      	beq.n	8014bba <HAL_SD_WriteBlocks+0x10e>
  if(hsd->State == HAL_SD_STATE_READY)
 8014ac6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8014aca:	2b01      	cmp	r3, #1
 8014acc:	fa5f f983 	uxtb.w	r9, r3
 8014ad0:	d164      	bne.n	8014b9c <HAL_SD_WriteBlocks+0xf0>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8014ad2:	eb0a 0307 	add.w	r3, sl, r7
 8014ad6:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8014ad8:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8014ada:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8014adc:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8014ade:	d876      	bhi.n	8014bce <HAL_SD_WriteBlocks+0x122>
    hsd->State = HAL_SD_STATE_BUSY;
 8014ae0:	2303      	movs	r3, #3
 8014ae2:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 8014ae4:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8014ae6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8014aea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8014aec:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8014aee:	a902      	add	r1, sp, #8
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8014af0:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8014af2:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8014af6:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8014afa:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8014afc:	f04f 33ff 	mov.w	r3, #4294967295
      add *= 512U;
 8014b00:	bf18      	it	ne
 8014b02:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8014b06:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8014b08:	027b      	lsls	r3, r7, #9
 8014b0a:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8014b0c:	2390      	movs	r3, #144	; 0x90
 8014b0e:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8014b10:	f001 fd68 	bl	80165e4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8014b14:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 8014b16:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8014b18:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8014b1a:	68c3      	ldr	r3, [r0, #12]
 8014b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b20:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 8014b22:	d945      	bls.n	8014bb0 <HAL_SD_WriteBlocks+0x104>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8014b24:	2320      	movs	r3, #32
 8014b26:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8014b28:	f002 f80a 	bl	8016b40 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8014b2c:	2800      	cmp	r0, #0
 8014b2e:	d156      	bne.n	8014bde <HAL_SD_WriteBlocks+0x132>
    dataremaining = config.DataLength;
 8014b30:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8014b34:	e004      	b.n	8014b40 <HAL_SD_WriteBlocks+0x94>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8014b36:	f7f8 ff6f 	bl	800da18 <HAL_GetTick>
 8014b3a:	1b80      	subs	r0, r0, r6
 8014b3c:	4540      	cmp	r0, r8
 8014b3e:	d21d      	bcs.n	8014b7c <HAL_SD_WriteBlocks+0xd0>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8014b40:	6820      	ldr	r0, [r4, #0]
 8014b42:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014b44:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 8014b48:	d155      	bne.n	8014bf6 <HAL_SD_WriteBlocks+0x14a>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8014b4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014b4c:	045a      	lsls	r2, r3, #17
 8014b4e:	d5f2      	bpl.n	8014b36 <HAL_SD_WriteBlocks+0x8a>
 8014b50:	f1bb 0f1f 	cmp.w	fp, #31
 8014b54:	d9ef      	bls.n	8014b36 <HAL_SD_WriteBlocks+0x8a>
 8014b56:	f105 0a20 	add.w	sl, r5, #32
 8014b5a:	e000      	b.n	8014b5e <HAL_SD_WriteBlocks+0xb2>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8014b5c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8014b5e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8014b62:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8014b64:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8014b66:	f001 fd1f 	bl	80165a8 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8014b6a:	4555      	cmp	r5, sl
 8014b6c:	d1f6      	bne.n	8014b5c <HAL_SD_WriteBlocks+0xb0>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8014b6e:	f7f8 ff53 	bl	800da18 <HAL_GetTick>
 8014b72:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
 8014b74:	f1ab 0b20 	sub.w	fp, fp, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8014b78:	4540      	cmp	r0, r8
 8014b7a:	d3e1      	bcc.n	8014b40 <HAL_SD_WriteBlocks+0x94>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014b7c:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
 8014b7e:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014b82:	4840      	ldr	r0, [pc, #256]	; (8014c84 <HAL_SD_WriteBlocks+0x1d8>)
        hsd->State = HAL_SD_STATE_READY;
 8014b84:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 8014b86:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014b88:	6388      	str	r0, [r1, #56]	; 0x38
}
 8014b8a:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
 8014b8c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014b8e:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8014b90:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8014b94:	6323      	str	r3, [r4, #48]	; 0x30
}
 8014b96:	b009      	add	sp, #36	; 0x24
 8014b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8014b9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8014b9e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8014ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014ba6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8014ba8:	4648      	mov	r0, r9
 8014baa:	b009      	add	sp, #36	; 0x24
 8014bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8014bb0:	2310      	movs	r3, #16
 8014bb2:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8014bb4:	f001 ff1e 	bl	80169f4 <SDMMC_CmdWriteSingleBlock>
 8014bb8:	e7b8      	b.n	8014b2c <HAL_SD_WriteBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8014bba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8014bbc:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8014bc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8014bc4:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8014bc6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8014bc8:	b009      	add	sp, #36	; 0x24
 8014bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8014bce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8014bd0:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8014bd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014bd6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8014bd8:	b009      	add	sp, #36	; 0x24
 8014bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014bde:	6823      	ldr	r3, [r4, #0]
 8014be0:	4a28      	ldr	r2, [pc, #160]	; (8014c84 <HAL_SD_WriteBlocks+0x1d8>)
 8014be2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8014be4:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8014be6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014be8:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 8014bea:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 8014bec:	63a0      	str	r0, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8014bee:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8014bf2:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8014bf4:	e7d8      	b.n	8014ba8 <HAL_SD_WriteBlocks+0xfc>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8014bf6:	68c3      	ldr	r3, [r0, #12]
 8014bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014bfc:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8014bfe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014c00:	05db      	lsls	r3, r3, #23
 8014c02:	d509      	bpl.n	8014c18 <HAL_SD_WriteBlocks+0x16c>
 8014c04:	2f01      	cmp	r7, #1
 8014c06:	d907      	bls.n	8014c18 <HAL_SD_WriteBlocks+0x16c>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8014c08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014c0a:	2b03      	cmp	r3, #3
 8014c0c:	d004      	beq.n	8014c18 <HAL_SD_WriteBlocks+0x16c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8014c0e:	f002 f83d 	bl	8016c8c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8014c12:	2800      	cmp	r0, #0
 8014c14:	d1e3      	bne.n	8014bde <HAL_SD_WriteBlocks+0x132>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8014c16:	6820      	ldr	r0, [r4, #0]
 8014c18:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014c1a:	f013 0308 	ands.w	r3, r3, #8
 8014c1e:	d112      	bne.n	8014c46 <HAL_SD_WriteBlocks+0x19a>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8014c20:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014c22:	f012 0202 	ands.w	r2, r2, #2
 8014c26:	d11a      	bne.n	8014c5e <HAL_SD_WriteBlocks+0x1b2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8014c28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014c2a:	f013 0310 	ands.w	r3, r3, #16
 8014c2e:	d021      	beq.n	8014c74 <HAL_SD_WriteBlocks+0x1c8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014c30:	4b14      	ldr	r3, [pc, #80]	; (8014c84 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8014c32:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014c34:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8014c36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014c38:	f043 0310 	orr.w	r3, r3, #16
 8014c3c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8014c3e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014c42:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8014c44:	e7b0      	b.n	8014ba8 <HAL_SD_WriteBlocks+0xfc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014c46:	4b0f      	ldr	r3, [pc, #60]	; (8014c84 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8014c48:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014c4a:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8014c4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014c4e:	f043 0308 	orr.w	r3, r3, #8
 8014c52:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 8014c54:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8014c56:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014c5a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8014c5c:	e7a4      	b.n	8014ba8 <HAL_SD_WriteBlocks+0xfc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014c5e:	4a09      	ldr	r2, [pc, #36]	; (8014c84 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8014c60:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014c62:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8014c64:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014c66:	f042 0202 	orr.w	r2, r2, #2
 8014c6a:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8014c6c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014c70:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8014c72:	e799      	b.n	8014ba8 <HAL_SD_WriteBlocks+0xfc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014c74:	4904      	ldr	r1, [pc, #16]	; (8014c88 <HAL_SD_WriteBlocks+0x1dc>)
    hsd->State = HAL_SD_STATE_READY;
 8014c76:	2201      	movs	r2, #1
    return HAL_OK;
 8014c78:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014c7a:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8014c7c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8014c80:	e792      	b.n	8014ba8 <HAL_SD_WriteBlocks+0xfc>
 8014c82:	bf00      	nop
 8014c84:	1fe00fff 	.word	0x1fe00fff
 8014c88:	18000f3a 	.word	0x18000f3a

08014c8c <HAL_SD_DeInit>:
  if(hsd == NULL)
 8014c8c:	b198      	cbz	r0, 8014cb6 <HAL_SD_DeInit+0x2a>
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8014c8e:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 8014c90:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8014c92:	2b02      	cmp	r3, #2
{
 8014c94:	b510      	push	{r4, lr}
 8014c96:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 8014c98:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8014c9c:	d00d      	beq.n	8014cba <HAL_SD_DeInit+0x2e>
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 8014c9e:	6820      	ldr	r0, [r4, #0]
 8014ca0:	f001 fc90 	bl	80165c4 <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	f7ff fddf 	bl	8014868 <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8014caa:	2300      	movs	r3, #0
 8014cac:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 8014cae:	4618      	mov	r0, r3
  hsd->State = HAL_SD_STATE_RESET;
 8014cb0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8014cb4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8014cb6:	2001      	movs	r0, #1
}
 8014cb8:	4770      	bx	lr
    HAL_SD_DriveTransceiver_1_8V_Callback(RESET);
 8014cba:	2000      	movs	r0, #0
 8014cbc:	f7f8 fe48 	bl	800d950 <HAL_SD_DriveTransceiver_1_8V_Callback>
 8014cc0:	e7ed      	b.n	8014c9e <HAL_SD_DeInit+0x12>
 8014cc2:	bf00      	nop

08014cc4 <SD_UltraHighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SD_UltraHighSpeed(SD_HandleTypeDef *hsd)
{
 8014cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cc8:	b096      	sub	sp, #88	; 0x58
 8014cca:	4604      	mov	r4, r0
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8014ccc:	2240      	movs	r2, #64	; 0x40
 8014cce:	2100      	movs	r1, #0
 8014cd0:	a806      	add	r0, sp, #24
 8014cd2:	f010 fd4d 	bl	8025770 <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 8014cd6:	f7f8 fe9f 	bl	800da18 <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8014cda:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8014cdc:	b13b      	cbz	r3, 8014cee <SD_UltraHighSpeed+0x2a>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8014cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ce2:	d00a      	beq.n	8014cfa <SD_UltraHighSpeed+0x36>
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
    {
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
    }

    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 8014ce4:	2500      	movs	r5, #0
#endif /* (DLYB_SDMMC1) || (DLYB_SDMMC2) */
    }
  }

  return errorstate;
}
 8014ce6:	4628      	mov	r0, r5
 8014ce8:	b016      	add	sp, #88	; 0x58
 8014cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8014cee:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8014cf2:	4628      	mov	r0, r5
 8014cf4:	b016      	add	sp, #88	; 0x58
 8014cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	4606      	mov	r6, r0
 8014cfe:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8014d00:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 8014d02:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8014d04:	f001 fc84 	bl	8016610 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8014d08:	4605      	mov	r5, r0
 8014d0a:	2800      	cmp	r0, #0
 8014d0c:	d1eb      	bne.n	8014ce6 <SD_UltraHighSpeed+0x22>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8014d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8014d12:	2340      	movs	r3, #64	; 0x40
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8014d14:	4669      	mov	r1, sp
 8014d16:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8014d18:	e9cd 2300 	strd	r2, r3, [sp]
 8014d1c:	2260      	movs	r2, #96	; 0x60
 8014d1e:	2302      	movs	r3, #2
 8014d20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014d24:	2200      	movs	r2, #0
 8014d26:	2301      	movs	r3, #1
 8014d28:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8014d2c:	f001 fc5a 	bl	80165e4 <SDMMC_ConfigData>
 8014d30:	2800      	cmp	r0, #0
 8014d32:	d14a      	bne.n	8014dca <SD_UltraHighSpeed+0x106>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 8014d34:	4931      	ldr	r1, [pc, #196]	; (8014dfc <SD_UltraHighSpeed+0x138>)
 8014d36:	6820      	ldr	r0, [r4, #0]
 8014d38:	f002 fe16 	bl	8017968 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8014d3c:	4605      	mov	r5, r0
 8014d3e:	2800      	cmp	r0, #0
 8014d40:	d1d1      	bne.n	8014ce6 <SD_UltraHighSpeed+0x22>
  uint32_t count, loop = 0 ;
 8014d42:	4681      	mov	r9, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8014d44:	f240 5a2a 	movw	sl, #1322	; 0x52a
 8014d48:	e004      	b.n	8014d54 <SD_UltraHighSpeed+0x90>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8014d4a:	f7f8 fe65 	bl	800da18 <HAL_GetTick>
 8014d4e:	1b80      	subs	r0, r0, r6
 8014d50:	3001      	adds	r0, #1
 8014d52:	d03d      	beq.n	8014dd0 <SD_UltraHighSpeed+0x10c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8014d54:	6820      	ldr	r0, [r4, #0]
 8014d56:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014d58:	ea12 0f0a 	tst.w	r2, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8014d5c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8014d5e:	d112      	bne.n	8014d86 <SD_UltraHighSpeed+0xc2>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8014d60:	0417      	lsls	r7, r2, #16
 8014d62:	d5f2      	bpl.n	8014d4a <SD_UltraHighSpeed+0x86>
 8014d64:	ab06      	add	r3, sp, #24
 8014d66:	eb03 1749 	add.w	r7, r3, r9, lsl #5
 8014d6a:	ab0e      	add	r3, sp, #56	; 0x38
 8014d6c:	eb03 1849 	add.w	r8, r3, r9, lsl #5
 8014d70:	e000      	b.n	8014d74 <SD_UltraHighSpeed+0xb0>
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8014d72:	6820      	ldr	r0, [r4, #0]
 8014d74:	f001 fc14 	bl	80165a0 <SDMMC_ReadFIFO>
 8014d78:	f847 0b04 	str.w	r0, [r7], #4
        for (count = 0U; count < 8U; count++)
 8014d7c:	4547      	cmp	r7, r8
 8014d7e:	d1f8      	bne.n	8014d72 <SD_UltraHighSpeed+0xae>
        loop ++;
 8014d80:	f109 0901 	add.w	r9, r9, #1
 8014d84:	e7e1      	b.n	8014d4a <SD_UltraHighSpeed+0x86>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8014d86:	0716      	lsls	r6, r2, #28
 8014d88:	d429      	bmi.n	8014dde <SD_UltraHighSpeed+0x11a>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8014d8a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014d8c:	0791      	lsls	r1, r2, #30
 8014d8e:	d42c      	bmi.n	8014dea <SD_UltraHighSpeed+0x126>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8014d90:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014d92:	0692      	lsls	r2, r2, #26
 8014d94:	d42d      	bmi.n	8014df2 <SD_UltraHighSpeed+0x12e>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8014d96:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014d9a:	4919      	ldr	r1, [pc, #100]	; (8014e00 <SD_UltraHighSpeed+0x13c>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8014d9c:	0793      	lsls	r3, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014d9e:	6381      	str	r1, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8014da0:	d520      	bpl.n	8014de4 <SD_UltraHighSpeed+0x120>
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8014da2:	2001      	movs	r0, #1
 8014da4:	f7f8 fdd4 	bl	800d950 <HAL_SD_DriveTransceiver_1_8V_Callback>
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8014da8:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8014daa:	4816      	ldr	r0, [pc, #88]	; (8014e04 <SD_UltraHighSpeed+0x140>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8014dac:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8014dae:	4c16      	ldr	r4, [pc, #88]	; (8014e08 <SD_UltraHighSpeed+0x144>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8014db0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8014db4:	4915      	ldr	r1, [pc, #84]	; (8014e0c <SD_UltraHighSpeed+0x148>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8014db6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8014dba:	42a2      	cmp	r2, r4
 8014dbc:	bf18      	it	ne
 8014dbe:	4608      	movne	r0, r1
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8014dc0:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8014dc2:	f001 fb81 	bl	80164c8 <DelayBlock_Enable>
 8014dc6:	2800      	cmp	r0, #0
 8014dc8:	d08c      	beq.n	8014ce4 <SD_UltraHighSpeed+0x20>
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
 8014dca:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8014dce:	e78a      	b.n	8014ce6 <SD_UltraHighSpeed+0x22>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8014dd0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8014dd4:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8014dd6:	63a5      	str	r5, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8014dd8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8014ddc:	e783      	b.n	8014ce6 <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8014dde:	2208      	movs	r2, #8
 8014de0:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8014de2:	e780      	b.n	8014ce6 <SD_UltraHighSpeed+0x22>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8014de4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8014de8:	e77d      	b.n	8014ce6 <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8014dea:	2202      	movs	r2, #2
      return errorstate;
 8014dec:	4615      	mov	r5, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8014dee:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8014df0:	e779      	b.n	8014ce6 <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8014df2:	2220      	movs	r2, #32
      return errorstate;
 8014df4:	4615      	mov	r5, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8014df6:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8014df8:	e775      	b.n	8014ce6 <SD_UltraHighSpeed+0x22>
 8014dfa:	bf00      	nop
 8014dfc:	80ff1f03 	.word	0x80ff1f03
 8014e00:	18000f3a 	.word	0x18000f3a
 8014e04:	52008000 	.word	0x52008000
 8014e08:	52007000 	.word	0x52007000
 8014e0c:	48022800 	.word	0x48022800

08014e10 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8014e10:	6e02      	ldr	r2, [r0, #96]	; 0x60
{
 8014e12:	4603      	mov	r3, r0
 8014e14:	b410      	push	{r4}
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8014e16:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8014e1a:	0f94      	lsrs	r4, r2, #30
 8014e1c:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8014e1e:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8014e22:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8014e24:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8014e28:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8014e2a:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8014e2c:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8014e30:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8014e32:	7108      	strb	r0, [r1, #4]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8014e34:	2000      	movs	r0, #0
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8014e36:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8014e38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014e3a:	0d14      	lsrs	r4, r2, #20
 8014e3c:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8014e3e:	f3c2 4403 	ubfx	r4, r2, #16, #4
 8014e42:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8014e44:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 8014e48:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8014e4a:	f3c2 3480 	ubfx	r4, r2, #14, #1
 8014e4e:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8014e50:	f3c2 3440 	ubfx	r4, r2, #13, #1
 8014e54:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8014e56:	f3c2 3400 	ubfx	r4, r2, #12, #1
 8014e5a:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8014e5c:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8014e5e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8014e60:	2800      	cmp	r0, #0
 8014e62:	d170      	bne.n	8014f46 <HAL_SD_GetCardCSD+0x136>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8014e64:	f640 74fc 	movw	r4, #4092	; 0xffc
 8014e68:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8014e6a:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8014e6e:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8014e72:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8014e76:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8014e78:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8014e7c:	750c      	strb	r4, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8014e7e:	f3c0 6402 	ubfx	r4, r0, #24, #3
 8014e82:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8014e84:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8014e88:	758a      	strb	r2, [r1, #22]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8014e8a:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8014e8e:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8014e90:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8014e92:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8014e94:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8014e96:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8014e98:	f004 0407 	and.w	r4, r4, #7
 8014e9c:	3402      	adds	r4, #2
 8014e9e:	fa02 f404 	lsl.w	r4, r2, r4
 8014ea2:	64dc      	str	r4, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8014ea4:	7a0a      	ldrb	r2, [r1, #8]
 8014ea6:	f002 0c0f 	and.w	ip, r2, #15
 8014eaa:	2201      	movs	r2, #1
 8014eac:	fa02 f20c 	lsl.w	r2, r2, ip
 8014eb0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8014eb2:	0a52      	lsrs	r2, r2, #9
 8014eb4:	fb04 f202 	mul.w	r2, r4, r2
    hsd->SdCard.LogBlockSize = 512U;
 8014eb8:	f44f 7400 	mov.w	r4, #512	; 0x200
 8014ebc:	e9c3 2415 	strd	r2, r4, [r3, #84]	; 0x54
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8014ec0:	f3c0 14c6 	ubfx	r4, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8014ec4:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8014ec8:	f3c0 3c80 	ubfx	ip, r0, #14, #1
  pCSD->Reserved3 = 0;
 8014ecc:	2000      	movs	r0, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8014ece:	f881 c019 	strb.w	ip, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8014ed2:	768c      	strb	r4, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8014ed4:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8014ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ed8:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8014eda:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8014ede:	770c      	strb	r4, [r1, #28]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8014ee0:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8014ee4:	774a      	strb	r2, [r1, #29]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8014ee6:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8014eea:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8014eec:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8014ef0:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8014ef2:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8014ef6:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8014efa:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3 = 0;
 8014efe:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8014f02:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8014f06:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8014f0a:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8014f0e:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8014f12:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8014f16:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8014f1a:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8014f1e:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8014f22:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8014f26:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8014f2a:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8014f2e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8014f32:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->Reserved4 = 1;
 8014f36:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8014f38:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8014f3c:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
 8014f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f44:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8014f46:	2801      	cmp	r0, #1
 8014f48:	d110      	bne.n	8014f6c <HAL_SD_GetCardCSD+0x15c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8014f4a:	0412      	lsls	r2, r2, #16
 8014f4c:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = 512U;
 8014f4e:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8014f52:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8014f56:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 8014f5a:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8014f5c:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8014f5e:	651c      	str	r4, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8014f60:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8014f62:	659c      	str	r4, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8014f64:	0292      	lsls	r2, r2, #10
 8014f66:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8014f68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8014f6a:	e7a9      	b.n	8014ec0 <HAL_SD_GetCardCSD+0xb0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014f6c:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8014f6e:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014f70:	4805      	ldr	r0, [pc, #20]	; (8014f88 <HAL_SD_GetCardCSD+0x178>)
 8014f72:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 8014f74:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8014f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014f78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8014f7c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8014f7e:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 8014f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f86:	4770      	bx	lr
 8014f88:	1fe00fff 	.word	0x1fe00fff

08014f8c <HAL_SD_InitCard>:
{
 8014f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8014f90:	2200      	movs	r2, #0
 8014f92:	2300      	movs	r3, #0
{
 8014f94:	b098      	sub	sp, #96	; 0x60
 8014f96:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8014f98:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8014f9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014fa0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8014fa4:	f7fe fe72 	bl	8013c8c <HAL_RCCEx_GetPeriphCLKFreq>
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8014fa8:	4aa4      	ldr	r2, [pc, #656]	; (801523c <HAL_SD_InitCard+0x2b0>)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8014faa:	69a3      	ldr	r3, [r4, #24]
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8014fac:	0a05      	lsrs	r5, r0, #8
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8014fae:	4606      	mov	r6, r0
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8014fb0:	6827      	ldr	r7, [r4, #0]
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8014fb2:	fba2 2505 	umull	r2, r5, r2, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8014fb6:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8014fb8:	ea4f 1515 	mov.w	r5, r5, lsr #4
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8014fbc:	d103      	bne.n	8014fc6 <HAL_SD_InitCard+0x3a>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	f043 0310 	orr.w	r3, r3, #16
 8014fc4:	603b      	str	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 8014fc6:	aa09      	add	r2, sp, #36	; 0x24
 8014fc8:	950a      	str	r5, [sp, #40]	; 0x28
 8014fca:	ab06      	add	r3, sp, #24
 8014fcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8014fce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014fd2:	4638      	mov	r0, r7
 8014fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014fd6:	f001 fac7 	bl	8016568 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8014fda:	6820      	ldr	r0, [r4, #0]
 8014fdc:	f001 faea 	bl	80165b4 <SDMMC_PowerState_ON>
  if(sdmmc_clk != 0U)
 8014fe0:	ebb6 0f45 	cmp.w	r6, r5, lsl #1
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8014fe4:	ea4f 0045 	mov.w	r0, r5, lsl #1
  if(sdmmc_clk != 0U)
 8014fe8:	d31b      	bcc.n	8015022 <HAL_SD_InitCard+0x96>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8014fea:	4b95      	ldr	r3, [pc, #596]	; (8015240 <HAL_SD_InitCard+0x2b4>)
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8014fec:	fbb6 f0f0 	udiv	r0, r6, r0
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8014ff0:	fbb3 f0f0 	udiv	r0, r3, r0
 8014ff4:	3001      	adds	r0, #1
 8014ff6:	f7f8 fd15 	bl	800da24 <HAL_Delay>
  __IO uint32_t count = 0U;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	9305      	str	r3, [sp, #20]
  uint32_t tickstart = HAL_GetTick();
 8014ffe:	f7f8 fd0b 	bl	800da18 <HAL_GetTick>
 8015002:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8015004:	6820      	ldr	r0, [r4, #0]
 8015006:	f001 fff1 	bl	8016fec <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 801500a:	4605      	mov	r5, r0
 801500c:	b168      	cbz	r0, 801502a <HAL_SD_InitCard+0x9e>
    hsd->State = HAL_SD_STATE_READY;
 801500e:	2601      	movs	r6, #1
 8015010:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8015014:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015016:	432b      	orrs	r3, r5
 8015018:	63a3      	str	r3, [r4, #56]	; 0x38
}
 801501a:	4630      	mov	r0, r6
 801501c:	b018      	add	sp, #96	; 0x60
 801501e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 8015022:	2002      	movs	r0, #2
 8015024:	f7f8 fcfe 	bl	800da24 <HAL_Delay>
 8015028:	e7e7      	b.n	8014ffa <HAL_SD_InitCard+0x6e>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801502a:	6820      	ldr	r0, [r4, #0]
 801502c:	f002 f80a 	bl	8017044 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8015030:	2800      	cmp	r0, #0
 8015032:	f040 80c2 	bne.w	80151ba <HAL_SD_InitCard+0x22e>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8015036:	2301      	movs	r3, #1
 8015038:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801503a:	2100      	movs	r1, #0
 801503c:	6820      	ldr	r0, [r4, #0]
 801503e:	f002 f841 	bl	80170c4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8015042:	bb10      	cbnz	r0, 801508a <HAL_SD_InitCard+0xfe>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8015044:	9b05      	ldr	r3, [sp, #20]
 8015046:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 801504a:	42bb      	cmp	r3, r7
 801504c:	f200 80c5 	bhi.w	80151da <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8015050:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8015248 <HAL_SD_InitCard+0x2bc>
 8015054:	e00b      	b.n	801506e <HAL_SD_InitCard+0xe2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8015056:	6820      	ldr	r0, [r4, #0]
 8015058:	f001 fac0 	bl	80165dc <SDMMC_GetResponse>
    count++;
 801505c:	9b05      	ldr	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801505e:	2800      	cmp	r0, #0
    count++;
 8015060:	f103 0301 	add.w	r3, r3, #1
 8015064:	9305      	str	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8015066:	9b05      	ldr	r3, [sp, #20]
 8015068:	db12      	blt.n	8015090 <HAL_SD_InitCard+0x104>
 801506a:	42bb      	cmp	r3, r7
 801506c:	d810      	bhi.n	8015090 <HAL_SD_InitCard+0x104>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801506e:	2100      	movs	r1, #0
 8015070:	6820      	ldr	r0, [r4, #0]
 8015072:	f002 f827 	bl	80170c4 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8015076:	4641      	mov	r1, r8
    if(errorstate != HAL_SD_ERROR_NONE)
 8015078:	4605      	mov	r5, r0
 801507a:	2800      	cmp	r0, #0
 801507c:	d1c7      	bne.n	801500e <HAL_SD_InitCard+0x82>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 801507e:	6820      	ldr	r0, [r4, #0]
 8015080:	f002 f8c6 	bl	8017210 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8015084:	4601      	mov	r1, r0
 8015086:	2800      	cmp	r0, #0
 8015088:	d0e5      	beq.n	8015056 <HAL_SD_InitCard+0xca>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801508a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 801508e:	e7be      	b.n	801500e <HAL_SD_InitCard+0x82>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8015090:	9a05      	ldr	r2, [sp, #20]
 8015092:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8015096:	429a      	cmp	r2, r3
 8015098:	f200 80a3 	bhi.w	80151e2 <HAL_SD_InitCard+0x256>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 801509c:	0045      	lsls	r5, r0, #1
 801509e:	d505      	bpl.n	80150ac <HAL_SD_InitCard+0x120>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80150a0:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80150a2:	2201      	movs	r2, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80150a4:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80150a6:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80150a8:	f000 809e 	beq.w	80151e8 <HAL_SD_InitCard+0x25c>
 80150ac:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 80150ae:	2301      	movs	r3, #1
 80150b0:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80150b4:	f001 fa8e 	bl	80165d4 <SDMMC_GetPowerState>
 80150b8:	b348      	cbz	r0, 801510e <HAL_SD_InitCard+0x182>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80150ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80150bc:	2b03      	cmp	r3, #3
 80150be:	d132      	bne.n	8015126 <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80150c0:	2104      	movs	r1, #4
 80150c2:	6820      	ldr	r0, [r4, #0]
 80150c4:	f001 fa8a 	bl	80165dc <SDMMC_GetResponse>
 80150c8:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80150ca:	a90d      	add	r1, sp, #52	; 0x34
 80150cc:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80150ce:	0d1b      	lsrs	r3, r3, #20
 80150d0:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80150d2:	f7ff fe9d 	bl	8014e10 <HAL_SD_GetCardCSD>
 80150d6:	4606      	mov	r6, r0
 80150d8:	2800      	cmp	r0, #0
 80150da:	d17b      	bne.n	80151d4 <HAL_SD_InitCard+0x248>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80150dc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80150de:	4603      	mov	r3, r0
 80150e0:	6820      	ldr	r0, [r4, #0]
 80150e2:	0412      	lsls	r2, r2, #16
 80150e4:	f001 fedc 	bl	8016ea0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80150e8:	b998      	cbnz	r0, 8015112 <HAL_SD_InitCard+0x186>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80150ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80150ee:	6820      	ldr	r0, [r4, #0]
 80150f0:	f001 fa8e 	bl	8016610 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80150f4:	2800      	cmp	r0, #0
 80150f6:	d090      	beq.n	801501a <HAL_SD_InitCard+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80150f8:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 80150fa:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80150fc:	4951      	ldr	r1, [pc, #324]	; (8015244 <HAL_SD_InitCard+0x2b8>)
    return HAL_ERROR;
 80150fe:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015100:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8015102:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015104:	4318      	orrs	r0, r3
 8015106:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8015108:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 801510c:	e785      	b.n	801501a <HAL_SD_InitCard+0x8e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801510e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8015112:	2601      	movs	r6, #1
 8015114:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8015118:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801511a:	4318      	orrs	r0, r3
 801511c:	63a0      	str	r0, [r4, #56]	; 0x38
}
 801511e:	4630      	mov	r0, r6
 8015120:	b018      	add	sp, #96	; 0x60
 8015122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8015126:	6820      	ldr	r0, [r4, #0]
 8015128:	f002 f9fa 	bl	8017520 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 801512c:	2800      	cmp	r0, #0
 801512e:	d1f0      	bne.n	8015112 <HAL_SD_InitCard+0x186>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8015130:	4601      	mov	r1, r0
 8015132:	6820      	ldr	r0, [r4, #0]
 8015134:	f001 fa52 	bl	80165dc <SDMMC_GetResponse>
 8015138:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801513a:	2104      	movs	r1, #4
 801513c:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801513e:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8015140:	f001 fa4c 	bl	80165dc <SDMMC_GetResponse>
 8015144:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8015146:	2108      	movs	r1, #8
 8015148:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801514a:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801514c:	f001 fa46 	bl	80165dc <SDMMC_GetResponse>
 8015150:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8015152:	210c      	movs	r1, #12
 8015154:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8015156:	67a3      	str	r3, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8015158:	f001 fa40 	bl	80165dc <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 801515c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801515e:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8015160:	2b03      	cmp	r3, #3
 8015162:	d0ad      	beq.n	80150c0 <HAL_SD_InitCard+0x134>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8015164:	f10d 0112 	add.w	r1, sp, #18
 8015168:	6820      	ldr	r0, [r4, #0]
 801516a:	f002 fa57 	bl	801761c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 801516e:	2800      	cmp	r0, #0
 8015170:	d1cf      	bne.n	8015112 <HAL_SD_InitCard+0x186>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8015172:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015174:	2b03      	cmp	r3, #3
 8015176:	d0a3      	beq.n	80150c0 <HAL_SD_InitCard+0x134>
    hsd->SdCard.RelCardAdd = sd_rca;
 8015178:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801517c:	6820      	ldr	r0, [r4, #0]
 801517e:	0419      	lsls	r1, r3, #16
    hsd->SdCard.RelCardAdd = sd_rca;
 8015180:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015182:	f002 fa0b 	bl	801759c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8015186:	2800      	cmp	r0, #0
 8015188:	d1c3      	bne.n	8015112 <HAL_SD_InitCard+0x186>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801518a:	4601      	mov	r1, r0
 801518c:	6820      	ldr	r0, [r4, #0]
 801518e:	f001 fa25 	bl	80165dc <SDMMC_GetResponse>
 8015192:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8015194:	2104      	movs	r1, #4
 8015196:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8015198:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801519a:	f001 fa1f 	bl	80165dc <SDMMC_GetResponse>
 801519e:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80151a0:	2108      	movs	r1, #8
 80151a2:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80151a4:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80151a6:	f001 fa19 	bl	80165dc <SDMMC_GetResponse>
 80151aa:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80151ac:	210c      	movs	r1, #12
 80151ae:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80151b0:	66a3      	str	r3, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80151b2:	f001 fa13 	bl	80165dc <SDMMC_GetResponse>
 80151b6:	66e0      	str	r0, [r4, #108]	; 0x6c
 80151b8:	e782      	b.n	80150c0 <HAL_SD_InitCard+0x134>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80151ba:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80151bc:	6820      	ldr	r0, [r4, #0]
 80151be:	f001 ff15 	bl	8016fec <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80151c2:	4605      	mov	r5, r0
 80151c4:	2800      	cmp	r0, #0
 80151c6:	f47f af22 	bne.w	801500e <HAL_SD_InitCard+0x82>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80151ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80151cc:	2b01      	cmp	r3, #1
 80151ce:	f47f af39 	bne.w	8015044 <HAL_SD_InitCard+0xb8>
 80151d2:	e732      	b.n	801503a <HAL_SD_InitCard+0xae>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80151d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80151d8:	e79b      	b.n	8015112 <HAL_SD_InitCard+0x186>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80151da:	9b05      	ldr	r3, [sp, #20]
 80151dc:	42bb      	cmp	r3, r7
 80151de:	f67f af65 	bls.w	80150ac <HAL_SD_InitCard+0x120>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80151e2:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 80151e6:	e712      	b.n	801500e <HAL_SD_InitCard+0x82>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80151e8:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80151ec:	6820      	ldr	r0, [r4, #0]
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80151ee:	f43f af5e 	beq.w	80150ae <HAL_SD_InitCard+0x122>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80151f2:	6803      	ldr	r3, [r0, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80151f4:	f44f 7200 	mov.w	r2, #512	; 0x200
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80151f8:	f043 0308 	orr.w	r3, r3, #8
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80151fc:	65e2      	str	r2, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80151fe:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8015200:	f002 fc58 	bl	8017ab4 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8015204:	4605      	mov	r5, r0
 8015206:	b128      	cbz	r0, 8015214 <HAL_SD_InitCard+0x288>
 8015208:	e701      	b.n	801500e <HAL_SD_InitCard+0x82>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801520a:	f7f8 fc05 	bl	800da18 <HAL_GetTick>
 801520e:	1b80      	subs	r0, r0, r6
 8015210:	3001      	adds	r0, #1
 8015212:	d030      	beq.n	8015276 <HAL_SD_InitCard+0x2ea>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8015214:	6823      	ldr	r3, [r4, #0]
 8015216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015218:	0150      	lsls	r0, r2, #5
 801521a:	d5f6      	bpl.n	801520a <HAL_SD_InitCard+0x27e>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 801521c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8015220:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8015222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015224:	02d9      	lsls	r1, r3, #11
 8015226:	f57f af30 	bpl.w	801508a <HAL_SD_InitCard+0xfe>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 801522a:	2001      	movs	r0, #1
 801522c:	f7f8 fb90 	bl	800d950 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8015230:	6820      	ldr	r0, [r4, #0]
 8015232:	6803      	ldr	r3, [r0, #0]
 8015234:	f043 0304 	orr.w	r3, r3, #4
 8015238:	6003      	str	r3, [r0, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 801523a:	e00d      	b.n	8015258 <HAL_SD_InitCard+0x2cc>
 801523c:	014f8b59 	.word	0x014f8b59
 8015240:	00012110 	.word	0x00012110
 8015244:	1fe00fff 	.word	0x1fe00fff
 8015248:	c1100000 	.word	0xc1100000
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801524c:	f7f8 fbe4 	bl	800da18 <HAL_GetTick>
 8015250:	1b80      	subs	r0, r0, r6
 8015252:	3001      	adds	r0, #1
 8015254:	d00f      	beq.n	8015276 <HAL_SD_InitCard+0x2ea>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8015256:	6820      	ldr	r0, [r4, #0]
 8015258:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801525a:	019a      	lsls	r2, r3, #6
 801525c:	d5f6      	bpl.n	801524c <HAL_SD_InitCard+0x2c0>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 801525e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015262:	6383      	str	r3, [r0, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8015264:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015266:	02db      	lsls	r3, r3, #11
 8015268:	d4bb      	bmi.n	80151e2 <HAL_SD_InitCard+0x256>
          hsd->Instance->POWER = 0x13U;
 801526a:	2213      	movs	r2, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 801526c:	f04f 33ff 	mov.w	r3, #4294967295
          hsd->Instance->POWER = 0x13U;
 8015270:	6002      	str	r2, [r0, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8015272:	6383      	str	r3, [r0, #56]	; 0x38
  if(errorstate != HAL_SD_ERROR_NONE)
 8015274:	e71b      	b.n	80150ae <HAL_SD_InitCard+0x122>
            return HAL_SD_ERROR_TIMEOUT;
 8015276:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 801527a:	e6c8      	b.n	801500e <HAL_SD_InitCard+0x82>

0801527c <HAL_SD_GetCardStatus>:
{
 801527c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015280:	4604      	mov	r4, r0
 8015282:	b097      	sub	sp, #92	; 0x5c
 8015284:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8015286:	f7f8 fbc7 	bl	800da18 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801528a:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 801528c:	4607      	mov	r7, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801528e:	6820      	ldr	r0, [r4, #0]
 8015290:	f001 f9a4 	bl	80165dc <SDMMC_GetResponse>
 8015294:	0182      	lsls	r2, r0, #6
 8015296:	d45b      	bmi.n	8015350 <HAL_SD_GetCardStatus+0xd4>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8015298:	2140      	movs	r1, #64	; 0x40
 801529a:	6820      	ldr	r0, [r4, #0]
 801529c:	f001 f9b8 	bl	8016610 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80152a0:	4603      	mov	r3, r0
 80152a2:	b1e0      	cbz	r0, 80152de <HAL_SD_GetCardStatus+0x62>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80152a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80152a6:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80152a8:	6820      	ldr	r0, [r4, #0]
 80152aa:	4a5a      	ldr	r2, [pc, #360]	; (8015414 <HAL_SD_GetCardStatus+0x198>)
    hsd->State = HAL_SD_STATE_READY;
 80152ac:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80152ae:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80152b0:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 80152b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80152b4:	4313      	orrs	r3, r2
 80152b6:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80152b8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80152bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80152c0:	f001 f9a6 	bl	8016610 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80152c4:	b138      	cbz	r0, 80152d6 <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 80152c6:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80152c8:	6822      	ldr	r2, [r4, #0]
 80152ca:	4952      	ldr	r1, [pc, #328]	; (8015414 <HAL_SD_GetCardStatus+0x198>)
    status = HAL_ERROR;
 80152cc:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80152ce:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80152d0:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80152d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80152d6:	4630      	mov	r0, r6
 80152d8:	b017      	add	sp, #92	; 0x5c
 80152da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80152de:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80152e0:	6820      	ldr	r0, [r4, #0]
 80152e2:	0409      	lsls	r1, r1, #16
 80152e4:	f001 feee 	bl	80170c4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80152e8:	4603      	mov	r3, r0
 80152ea:	2800      	cmp	r0, #0
 80152ec:	d1da      	bne.n	80152a4 <HAL_SD_GetCardStatus+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80152ee:	f04f 32ff 	mov.w	r2, #4294967295
 80152f2:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80152f4:	4669      	mov	r1, sp
 80152f6:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80152f8:	e9cd 2300 	strd	r2, r3, [sp]
 80152fc:	2260      	movs	r2, #96	; 0x60
 80152fe:	2302      	movs	r3, #2
 8015300:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015304:	2301      	movs	r3, #1
 8015306:	2200      	movs	r2, #0
 8015308:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801530c:	f001 f96a 	bl	80165e4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8015310:	6820      	ldr	r0, [r4, #0]
 8015312:	f002 fa81 	bl	8017818 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 8015316:	4603      	mov	r3, r0
 8015318:	2800      	cmp	r0, #0
 801531a:	d1c3      	bne.n	80152a4 <HAL_SD_GetCardStatus+0x28>
  uint32_t *pData = pSDstatus;
 801531c:	ae06      	add	r6, sp, #24
 801531e:	e004      	b.n	801532a <HAL_SD_GetCardStatus+0xae>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8015320:	f7f8 fb7a 	bl	800da18 <HAL_GetTick>
 8015324:	1bc0      	subs	r0, r0, r7
 8015326:	3001      	adds	r0, #1
 8015328:	d016      	beq.n	8015358 <HAL_SD_GetCardStatus+0xdc>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801532a:	6820      	ldr	r0, [r4, #0]
 801532c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801532e:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8015332:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8015334:	d113      	bne.n	801535e <HAL_SD_GetCardStatus+0xe2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8015336:	041b      	lsls	r3, r3, #16
 8015338:	d5f2      	bpl.n	8015320 <HAL_SD_GetCardStatus+0xa4>
 801533a:	f106 0820 	add.w	r8, r6, #32
 801533e:	e000      	b.n	8015342 <HAL_SD_GetCardStatus+0xc6>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8015340:	6820      	ldr	r0, [r4, #0]
 8015342:	f001 f92d 	bl	80165a0 <SDMMC_ReadFIFO>
 8015346:	f846 0b04 	str.w	r0, [r6], #4
      for(count = 0U; count < 8U; count++)
 801534a:	4546      	cmp	r6, r8
 801534c:	d1f8      	bne.n	8015340 <HAL_SD_GetCardStatus+0xc4>
 801534e:	e7e7      	b.n	8015320 <HAL_SD_GetCardStatus+0xa4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015350:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8015352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015356:	e7a8      	b.n	80152aa <HAL_SD_GetCardStatus+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 8015358:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801535c:	e7a4      	b.n	80152a8 <HAL_SD_GetCardStatus+0x2c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801535e:	0719      	lsls	r1, r3, #28
 8015360:	d451      	bmi.n	8015406 <HAL_SD_GetCardStatus+0x18a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8015362:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015364:	079a      	lsls	r2, r3, #30
 8015366:	d450      	bmi.n	801540a <HAL_SD_GetCardStatus+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8015368:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801536a:	069b      	lsls	r3, r3, #26
 801536c:	d50a      	bpl.n	8015384 <HAL_SD_GetCardStatus+0x108>
 801536e:	e04e      	b.n	801540e <HAL_SD_GetCardStatus+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8015370:	f001 f916 	bl	80165a0 <SDMMC_ReadFIFO>
 8015374:	f846 0b04 	str.w	r0, [r6], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8015378:	f7f8 fb4e 	bl	800da18 <HAL_GetTick>
 801537c:	1bc0      	subs	r0, r0, r7
 801537e:	3001      	adds	r0, #1
 8015380:	d0ea      	beq.n	8015358 <HAL_SD_GetCardStatus+0xdc>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8015382:	6820      	ldr	r0, [r4, #0]
 8015384:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015386:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 801538a:	d1f1      	bne.n	8015370 <HAL_SD_GetCardStatus+0xf4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 801538c:	9906      	ldr	r1, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 801538e:	461e      	mov	r6, r3
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8015390:	4a21      	ldr	r2, [pc, #132]	; (8015418 <HAL_SD_GetCardStatus+0x19c>)
 8015392:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8015394:	0a0a      	lsrs	r2, r1, #8
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8015396:	e9dd c308 	ldrd	ip, r3, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 801539a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 801539e:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80153a2:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80153a6:	fa5f f883 	uxtb.w	r8, r3
 80153aa:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80153ae:	fa1f f982 	uxth.w	r9, r2
 80153b2:	9a07      	ldr	r2, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80153b4:	ea47 0708 	orr.w	r7, r7, r8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80153b8:	f3c1 1881 	ubfx	r8, r1, #6, #2
 80153bc:	fa92 fe82 	rev.w	lr, r2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80153c0:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80153c4:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80153c8:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80153cc:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80153ce:	f8a5 9002 	strh.w	r9, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80153d2:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80153d6:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80153d8:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80153dc:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80153de:	f3cc 5203 	ubfx	r2, ip, #20, #4
 80153e2:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80153e4:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80153e8:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80153ea:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80153ec:	f3c3 2201 	ubfx	r2, r3, #8, #2
 80153f0:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80153f2:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80153f6:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80153fa:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80153fc:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80153fe:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8015402:	74ab      	strb	r3, [r5, #18]
 8015404:	e75a      	b.n	80152bc <HAL_SD_GetCardStatus+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8015406:	2308      	movs	r3, #8
 8015408:	e74f      	b.n	80152aa <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801540a:	2302      	movs	r3, #2
 801540c:	e74d      	b.n	80152aa <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 801540e:	2320      	movs	r3, #32
 8015410:	e74b      	b.n	80152aa <HAL_SD_GetCardStatus+0x2e>
 8015412:	bf00      	nop
 8015414:	1fe00fff 	.word	0x1fe00fff
 8015418:	18000f3a 	.word	0x18000f3a

0801541c <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801541c:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
 801541e:	b4f0      	push	{r4, r5, r6, r7}
 8015420:	e9d0 c710 	ldrd	ip, r7, [r0, #64]	; 0x40
 8015424:	e9d0 6512 	ldrd	r6, r5, [r0, #72]	; 0x48
 8015428:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801542c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801542e:	61cb      	str	r3, [r1, #28]
 8015430:	6008      	str	r0, [r1, #0]
}
 8015432:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8015434:	e9c1 c701 	strd	ip, r7, [r1, #4]
 8015438:	e9c1 6503 	strd	r6, r5, [r1, #12]
 801543c:	e9c1 4205 	strd	r4, r2, [r1, #20]
}
 8015440:	bcf0      	pop	{r4, r5, r6, r7}
 8015442:	4770      	bx	lr

08015444 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8015444:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 8015446:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8015448:	4293      	cmp	r3, r2
{
 801544a:	b530      	push	{r4, r5, lr}
 801544c:	4604      	mov	r4, r0
 801544e:	b08b      	sub	sp, #44	; 0x2c
 8015450:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8015452:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8015456:	d025      	beq.n	80154a4 <HAL_SD_ConfigWideBusOperation+0x60>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8015458:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801545c:	d022      	beq.n	80154a4 <HAL_SD_ConfigWideBusOperation+0x60>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 801545e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8015462:	d064      	beq.n	801552e <HAL_SD_ConfigWideBusOperation+0xea>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8015464:	2900      	cmp	r1, #0
 8015466:	d043      	beq.n	80154f0 <HAL_SD_ConfigWideBusOperation+0xac>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8015468:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801546a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801546e:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8015470:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015472:	b9f3      	cbnz	r3, 80154b2 <HAL_SD_ConfigWideBusOperation+0x6e>
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8015474:	6922      	ldr	r2, [r4, #16]
    Init.BusWide             = WideMode;
 8015476:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8015478:	9207      	str	r2, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 801547a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 801547e:	e9cd 1304 	strd	r1, r3, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8015482:	6963      	ldr	r3, [r4, #20]
 8015484:	2b03      	cmp	r3, #3
 8015486:	d92a      	bls.n	80154de <HAL_SD_ConfigWideBusOperation+0x9a>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8015488:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 801548a:	ab0a      	add	r3, sp, #40	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 801548c:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 801548e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015492:	ab04      	add	r3, sp, #16
 8015494:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015498:	cb0e      	ldmia	r3, {r1, r2, r3}
 801549a:	6820      	ldr	r0, [r4, #0]
 801549c:	f001 f864 	bl	8016568 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80154a0:	6820      	ldr	r0, [r4, #0]
 80154a2:	e00a      	b.n	80154ba <HAL_SD_ConfigWideBusOperation+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80154a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80154a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80154aa:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80154ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d0e0      	beq.n	8015474 <HAL_SD_ConfigWideBusOperation+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80154b2:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 80154b4:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80154b6:	4b32      	ldr	r3, [pc, #200]	; (8015580 <HAL_SD_ConfigWideBusOperation+0x13c>)
 80154b8:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80154ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80154be:	f001 f8a7 	bl	8016610 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80154c2:	b130      	cbz	r0, 80154d2 <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80154c4:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 80154c6:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80154c8:	4a2d      	ldr	r2, [pc, #180]	; (8015580 <HAL_SD_ConfigWideBusOperation+0x13c>)
 80154ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80154cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80154ce:	4318      	orrs	r0, r3
 80154d0:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80154d2:	2301      	movs	r3, #1
}
 80154d4:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80154d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80154da:	b00b      	add	sp, #44	; 0x2c
 80154dc:	bd30      	pop	{r4, r5, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80154de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80154e0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80154e4:	d0d0      	beq.n	8015488 <HAL_SD_ConfigWideBusOperation+0x44>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80154e6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80154ea:	d042      	beq.n	8015572 <HAL_SD_ConfigWideBusOperation+0x12e>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80154ec:	2304      	movs	r3, #4
 80154ee:	e7cb      	b.n	8015488 <HAL_SD_ConfigWideBusOperation+0x44>
  uint32_t scr[2U] = {0UL, 0UL};
 80154f0:	2200      	movs	r2, #0
 80154f2:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80154f4:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 80154f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80154fa:	f001 f86f 	bl	80165dc <SDMMC_GetResponse>
 80154fe:	0182      	lsls	r2, r0, #6
 8015500:	d434      	bmi.n	801556c <HAL_SD_ConfigWideBusOperation+0x128>
  errorstate = SD_FindSCR(hsd, scr);
 8015502:	a904      	add	r1, sp, #16
 8015504:	4620      	mov	r0, r4
 8015506:	f7ff f8b5 	bl	8014674 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 801550a:	b960      	cbnz	r0, 8015526 <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801550c:	9b05      	ldr	r3, [sp, #20]
 801550e:	03db      	lsls	r3, r3, #15
 8015510:	d532      	bpl.n	8015578 <HAL_SD_ConfigWideBusOperation+0x134>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015512:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015514:	6820      	ldr	r0, [r4, #0]
 8015516:	0409      	lsls	r1, r1, #16
 8015518:	f001 fdd4 	bl	80170c4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 801551c:	b918      	cbnz	r0, 8015526 <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 801551e:	4601      	mov	r1, r0
 8015520:	6820      	ldr	r0, [r4, #0]
 8015522:	f001 feaf 	bl	8017284 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8015526:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015528:	4318      	orrs	r0, r3
 801552a:	63a0      	str	r0, [r4, #56]	; 0x38
 801552c:	e7be      	b.n	80154ac <HAL_SD_ConfigWideBusOperation+0x68>
  uint32_t scr[2U] = {0UL, 0UL};
 801552e:	2200      	movs	r2, #0
 8015530:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8015532:	2100      	movs	r1, #0
 8015534:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8015536:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801553a:	f001 f84f 	bl	80165dc <SDMMC_GetResponse>
 801553e:	0180      	lsls	r0, r0, #6
 8015540:	d414      	bmi.n	801556c <HAL_SD_ConfigWideBusOperation+0x128>
  errorstate = SD_FindSCR(hsd, scr);
 8015542:	a904      	add	r1, sp, #16
 8015544:	4620      	mov	r0, r4
 8015546:	f7ff f895 	bl	8014674 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 801554a:	2800      	cmp	r0, #0
 801554c:	d1eb      	bne.n	8015526 <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801554e:	9b05      	ldr	r3, [sp, #20]
 8015550:	0359      	lsls	r1, r3, #13
 8015552:	d511      	bpl.n	8015578 <HAL_SD_ConfigWideBusOperation+0x134>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015554:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015556:	6820      	ldr	r0, [r4, #0]
 8015558:	0409      	lsls	r1, r1, #16
 801555a:	f001 fdb3 	bl	80170c4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 801555e:	2800      	cmp	r0, #0
 8015560:	d1e1      	bne.n	8015526 <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8015562:	2102      	movs	r1, #2
 8015564:	6820      	ldr	r0, [r4, #0]
 8015566:	f001 fe8d 	bl	8017284 <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 801556a:	e7dc      	b.n	8015526 <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801556c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015570:	e7d9      	b.n	8015526 <HAL_SD_ConfigWideBusOperation+0xe2>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8015572:	2302      	movs	r3, #2
 8015574:	9308      	str	r3, [sp, #32]
 8015576:	e788      	b.n	801548a <HAL_SD_ConfigWideBusOperation+0x46>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8015578:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801557c:	e7d3      	b.n	8015526 <HAL_SD_ConfigWideBusOperation+0xe2>
 801557e:	bf00      	nop
 8015580:	1fe00fff 	.word	0x1fe00fff

08015584 <HAL_SD_Init>:
{
 8015584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015586:	b087      	sub	sp, #28
  if(hsd == NULL)
 8015588:	b1a0      	cbz	r0, 80155b4 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 801558a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 801558e:	4604      	mov	r4, r0
 8015590:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8015594:	b93b      	cbnz	r3, 80155a6 <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8015596:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 8015598:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 801559a:	b90b      	cbnz	r3, 80155a0 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 801559c:	2302      	movs	r3, #2
 801559e:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 80155a0:	4620      	mov	r0, r4
 80155a2:	f7ff f95f 	bl	8014864 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80155a6:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80155a8:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 80155aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80155ae:	f7ff fced 	bl	8014f8c <HAL_SD_InitCard>
 80155b2:	b118      	cbz	r0, 80155bc <HAL_SD_Init+0x38>
    return HAL_ERROR;
 80155b4:	2601      	movs	r6, #1
}
 80155b6:	4630      	mov	r0, r6
 80155b8:	b007      	add	sp, #28
 80155ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80155bc:	a901      	add	r1, sp, #4
 80155be:	4620      	mov	r0, r4
 80155c0:	f7ff fe5c 	bl	801527c <HAL_SD_GetCardStatus>
 80155c4:	2800      	cmp	r0, #0
 80155c6:	d1f5      	bne.n	80155b4 <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80155c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 80155ca:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80155ce:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 80155d0:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 80155d4:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 80155d6:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80155d8:	d024      	beq.n	8015624 <HAL_SD_Init+0xa0>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80155da:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80155dc:	68e1      	ldr	r1, [r4, #12]
 80155de:	4620      	mov	r0, r4
 80155e0:	f7ff ff30 	bl	8015444 <HAL_SD_ConfigWideBusOperation>
 80155e4:	4606      	mov	r6, r0
 80155e6:	2800      	cmp	r0, #0
 80155e8:	d1e4      	bne.n	80155b4 <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 80155ea:	f7f8 fa15 	bl	800da18 <HAL_GetTick>
 80155ee:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80155f0:	e00c      	b.n	801560c <HAL_SD_Init+0x88>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80155f2:	6820      	ldr	r0, [r4, #0]
 80155f4:	4629      	mov	r1, r5
 80155f6:	f000 fff1 	bl	80165dc <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 80155fa:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80155fe:	2804      	cmp	r0, #4
 8015600:	d018      	beq.n	8015634 <HAL_SD_Init+0xb0>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8015602:	f7f8 fa09 	bl	800da18 <HAL_GetTick>
 8015606:	1bc3      	subs	r3, r0, r7
 8015608:	3301      	adds	r3, #1
 801560a:	d019      	beq.n	8015640 <HAL_SD_Init+0xbc>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801560c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801560e:	6820      	ldr	r0, [r4, #0]
 8015610:	0409      	lsls	r1, r1, #16
 8015612:	f002 f85b 	bl	80176cc <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8015616:	4605      	mov	r5, r0
 8015618:	2800      	cmp	r0, #0
 801561a:	d0ea      	beq.n	80155f2 <HAL_SD_Init+0x6e>
    hsd->ErrorCode |= errorstate;
 801561c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801561e:	4303      	orrs	r3, r0
 8015620:	63a3      	str	r3, [r4, #56]	; 0x38
  return (HAL_SD_CardStateTypeDef)cardstate;
 8015622:	e7ee      	b.n	8015602 <HAL_SD_Init+0x7e>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8015624:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8015626:	bf14      	ite	ne
 8015628:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 801562c:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8015630:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015632:	e7d3      	b.n	80155dc <HAL_SD_Init+0x58>
  hsd->State = HAL_SD_STATE_READY;
 8015634:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8015636:	63a5      	str	r5, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8015638:	6325      	str	r5, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 801563a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 801563e:	e7ba      	b.n	80155b6 <HAL_SD_Init+0x32>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8015640:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 8015644:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8015646:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8015648:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 801564a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 801564e:	e7b2      	b.n	80155b6 <HAL_SD_Init+0x32>

08015650 <HAL_SD_ConfigSpeedBusOperation>:
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8015650:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 8015652:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8015654:	2b02      	cmp	r3, #2
{
 8015656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801565a:	4604      	mov	r4, r0
 801565c:	b096      	sub	sp, #88	; 0x58
  hsd->State = HAL_SD_STATE_BUSY;
 801565e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8015662:	d069      	beq.n	8015738 <HAL_SD_ConfigSpeedBusOperation+0xe8>
    switch (SpeedMode)
 8015664:	2901      	cmp	r1, #1
 8015666:	d027      	beq.n	80156b8 <HAL_SD_ConfigSpeedBusOperation+0x68>
 8015668:	2902      	cmp	r1, #2
 801566a:	d006      	beq.n	801567a <HAL_SD_ConfigSpeedBusOperation+0x2a>
 801566c:	b1a9      	cbz	r1, 801569a <HAL_SD_ConfigSpeedBusOperation+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801566e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      status = HAL_ERROR;
 8015670:	2601      	movs	r6, #1
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8015672:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015676:	63a3      	str	r3, [r4, #56]	; 0x38
      break;
 8015678:	e01f      	b.n	80156ba <HAL_SD_ConfigSpeedBusOperation+0x6a>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 801567a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801567c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015680:	d015      	beq.n	80156ae <HAL_SD_ConfigSpeedBusOperation+0x5e>
 8015682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015686:	d012      	beq.n	80156ae <HAL_SD_ConfigSpeedBusOperation+0x5e>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8015688:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801568a:	2b01      	cmp	r3, #1
 801568c:	d00f      	beq.n	80156ae <HAL_SD_ConfigSpeedBusOperation+0x5e>
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801568e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 8015690:	2601      	movs	r6, #1
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8015692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015696:	63a3      	str	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 8015698:	e00f      	b.n	80156ba <HAL_SD_ConfigSpeedBusOperation+0x6a>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 801569a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801569c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80156a0:	d005      	beq.n	80156ae <HAL_SD_ConfigSpeedBusOperation+0x5e>
 80156a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80156a6:	d002      	beq.n	80156ae <HAL_SD_ConfigSpeedBusOperation+0x5e>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 80156a8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80156aa:	2b01      	cmp	r3, #1
 80156ac:	d104      	bne.n	80156b8 <HAL_SD_ConfigSpeedBusOperation+0x68>
          if (SD_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 80156ae:	4620      	mov	r0, r4
 80156b0:	f7ff f852 	bl	8014758 <SD_HighSpeed>
 80156b4:	2800      	cmp	r0, #0
 80156b6:	d1ea      	bne.n	801568e <HAL_SD_ConfigSpeedBusOperation+0x3e>
    switch (SpeedMode)
 80156b8:	2600      	movs	r6, #0
  tickstart = HAL_GetTick();
 80156ba:	f7f8 f9ad 	bl	800da18 <HAL_GetTick>
 80156be:	4605      	mov	r5, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80156c0:	e00b      	b.n	80156da <HAL_SD_ConfigSpeedBusOperation+0x8a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80156c2:	6820      	ldr	r0, [r4, #0]
 80156c4:	f000 ff8a 	bl	80165dc <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 80156c8:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80156cc:	2804      	cmp	r0, #4
 80156ce:	d01f      	beq.n	8015710 <HAL_SD_ConfigSpeedBusOperation+0xc0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80156d0:	f7f8 f9a2 	bl	800da18 <HAL_GetTick>
 80156d4:	1b40      	subs	r0, r0, r5
 80156d6:	3001      	adds	r0, #1
 80156d8:	d00f      	beq.n	80156fa <HAL_SD_ConfigSpeedBusOperation+0xaa>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80156da:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80156dc:	6820      	ldr	r0, [r4, #0]
 80156de:	0409      	lsls	r1, r1, #16
 80156e0:	f001 fff4 	bl	80176cc <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80156e4:	4601      	mov	r1, r0
 80156e6:	2800      	cmp	r0, #0
 80156e8:	d0eb      	beq.n	80156c2 <HAL_SD_ConfigSpeedBusOperation+0x72>
    hsd->ErrorCode |= errorstate;
 80156ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80156ec:	4319      	orrs	r1, r3
 80156ee:	63a1      	str	r1, [r4, #56]	; 0x38
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80156f0:	f7f8 f992 	bl	800da18 <HAL_GetTick>
 80156f4:	1b40      	subs	r0, r0, r5
 80156f6:	3001      	adds	r0, #1
 80156f8:	d1ef      	bne.n	80156da <HAL_SD_ConfigSpeedBusOperation+0x8a>
      return HAL_TIMEOUT;
 80156fa:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80156fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 8015700:	2301      	movs	r3, #1
}
 8015702:	4630      	mov	r0, r6
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8015704:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8015706:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 801570a:	b016      	add	sp, #88	; 0x58
 801570c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8015710:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015714:	6820      	ldr	r0, [r4, #0]
 8015716:	f000 ff7b 	bl	8016610 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 801571a:	b130      	cbz	r0, 801572a <HAL_SD_ConfigSpeedBusOperation+0xda>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801571c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 801571e:	2601      	movs	r6, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015720:	4a74      	ldr	r2, [pc, #464]	; (80158f4 <HAL_SD_ConfigSpeedBusOperation+0x2a4>)
 8015722:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8015724:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015726:	4318      	orrs	r0, r3
 8015728:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 801572a:	2301      	movs	r3, #1
}
 801572c:	4630      	mov	r0, r6
  hsd->State = HAL_SD_STATE_READY;
 801572e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8015732:	b016      	add	sp, #88	; 0x58
 8015734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (SpeedMode)
 8015738:	2904      	cmp	r1, #4
 801573a:	d898      	bhi.n	801566e <HAL_SD_ConfigSpeedBusOperation+0x1e>
 801573c:	a301      	add	r3, pc, #4	; (adr r3, 8015744 <HAL_SD_ConfigSpeedBusOperation+0xf4>)
 801573e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8015742:	bf00      	nop
 8015744:	080157bf 	.word	0x080157bf
 8015748:	080156b9 	.word	0x080156b9
 801574c:	0801567b 	.word	0x0801567b
 8015750:	08015791 	.word	0x08015791
 8015754:	08015759 	.word	0x08015759
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8015758:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801575a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801575e:	d002      	beq.n	8015766 <HAL_SD_ConfigSpeedBusOperation+0x116>
 8015760:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8015762:	2b01      	cmp	r3, #1
 8015764:	d193      	bne.n	801568e <HAL_SD_ConfigSpeedBusOperation+0x3e>
  */
static uint32_t SD_DDR_Mode(SD_HandleTypeDef *hsd)
{
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8015766:	2240      	movs	r2, #64	; 0x40
 8015768:	2100      	movs	r1, #0
 801576a:	a806      	add	r0, sp, #24
 801576c:	f010 f800 	bl	8025770 <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 8015770:	f7f8 f952 	bl	800da18 <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8015774:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 8015776:	4607      	mov	r7, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8015778:	2b00      	cmp	r3, #0
 801577a:	d05e      	beq.n	801583a <HAL_SD_ConfigSpeedBusOperation+0x1ea>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 801577c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015780:	d062      	beq.n	8015848 <HAL_SD_ConfigSpeedBusOperation+0x1f8>
  HAL_StatusTypeDef status = HAL_OK;
 8015782:	2600      	movs	r6, #0
 8015784:	6823      	ldr	r3, [r4, #0]
          hsd->Instance->CLKCR |=  SDMMC_CLKCR_BUSSPEED | SDMMC_CLKCR_DDR;
 8015786:	685a      	ldr	r2, [r3, #4]
 8015788:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 801578c:	605a      	str	r2, [r3, #4]
 801578e:	e794      	b.n	80156ba <HAL_SD_ConfigSpeedBusOperation+0x6a>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8015790:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8015792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015796:	d003      	beq.n	80157a0 <HAL_SD_ConfigSpeedBusOperation+0x150>
 8015798:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801579a:	2b01      	cmp	r3, #1
 801579c:	f47f af77 	bne.w	801568e <HAL_SD_ConfigSpeedBusOperation+0x3e>
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 80157a0:	4620      	mov	r0, r4
 80157a2:	f7ff fa8f 	bl	8014cc4 <SD_UltraHighSpeed>
 80157a6:	b310      	cbz	r0, 80157ee <HAL_SD_ConfigSpeedBusOperation+0x19e>
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80157a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            status = HAL_ERROR;
 80157aa:	2601      	movs	r6, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80157ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80157b0:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 80157b2:	6822      	ldr	r2, [r4, #0]
 80157b4:	6853      	ldr	r3, [r2, #4]
 80157b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80157ba:	6053      	str	r3, [r2, #4]
 80157bc:	e77d      	b.n	80156ba <HAL_SD_ConfigSpeedBusOperation+0x6a>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80157be:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80157c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80157c4:	d007      	beq.n	80157d6 <HAL_SD_ConfigSpeedBusOperation+0x186>
 80157c6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80157c8:	2a01      	cmp	r2, #1
 80157ca:	d004      	beq.n	80157d6 <HAL_SD_ConfigSpeedBusOperation+0x186>
        else if (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED)
 80157cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80157d0:	f47f af72 	bne.w	80156b8 <HAL_SD_ConfigSpeedBusOperation+0x68>
 80157d4:	e76b      	b.n	80156ae <HAL_SD_ConfigSpeedBusOperation+0x5e>
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 80157d6:	6822      	ldr	r2, [r4, #0]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 80157d8:	4620      	mov	r0, r4
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 80157da:	6853      	ldr	r3, [r2, #4]
 80157dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80157e0:	6053      	str	r3, [r2, #4]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 80157e2:	f7ff fa6f 	bl	8014cc4 <SD_UltraHighSpeed>
 80157e6:	2800      	cmp	r0, #0
 80157e8:	f43f af66 	beq.w	80156b8 <HAL_SD_ConfigSpeedBusOperation+0x68>
 80157ec:	e75f      	b.n	80156ae <HAL_SD_ConfigSpeedBusOperation+0x5e>
  HAL_StatusTypeDef status = HAL_OK;
 80157ee:	4606      	mov	r6, r0
 80157f0:	e7df      	b.n	80157b2 <HAL_SD_ConfigSpeedBusOperation+0x162>
        hsd->State= HAL_SD_STATE_READY;
        return HAL_SD_ERROR_TIMEOUT;
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80157f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80157f4:	0715      	lsls	r5, r2, #28
 80157f6:	d479      	bmi.n	80158ec <HAL_SD_ConfigSpeedBusOperation+0x29c>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80157f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80157fa:	0790      	lsls	r0, r2, #30
 80157fc:	d473      	bmi.n	80158e6 <HAL_SD_ConfigSpeedBusOperation+0x296>

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80157fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015800:	0691      	lsls	r1, r2, #26
 8015802:	d46d      	bmi.n	80158e0 <HAL_SD_ConfigSpeedBusOperation+0x290>

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);

    /* Test if the switch mode  is ok */
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8015804:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8015808:	493b      	ldr	r1, [pc, #236]	; (80158f8 <HAL_SD_ConfigSpeedBusOperation+0x2a8>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 801580a:	0792      	lsls	r2, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801580c:	6399      	str	r1, [r3, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 801580e:	d515      	bpl.n	801583c <HAL_SD_ConfigSpeedBusOperation+0x1ec>
    else
    {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
      hsd->DriveTransceiver_1_8V_Callback(SET);
#else
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8015810:	2001      	movs	r0, #1
 8015812:	f7f8 f89d 	bl	800d950 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
#if defined (DLYB_SDMMC1) || defined (DLYB_SDMMC2)
      /* Enable DelayBlock Peripheral */
      /* SDMMC_CKin feedback clock selected as receive clock, for DDR50 */
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 8015816:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8015818:	4838      	ldr	r0, [pc, #224]	; (80158fc <HAL_SD_ConfigSpeedBusOperation+0x2ac>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 801581a:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 801581c:	4938      	ldr	r1, [pc, #224]	; (8015900 <HAL_SD_ConfigSpeedBusOperation+0x2b0>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 801581e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8015822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015826:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8015828:	4b36      	ldr	r3, [pc, #216]	; (8015904 <HAL_SD_ConfigSpeedBusOperation+0x2b4>)
 801582a:	4282      	cmp	r2, r0
 801582c:	bf0c      	ite	eq
 801582e:	4608      	moveq	r0, r1
 8015830:	4618      	movne	r0, r3
 8015832:	f000 fe49 	bl	80164c8 <DelayBlock_Enable>
 8015836:	2800      	cmp	r0, #0
 8015838:	d0a3      	beq.n	8015782 <HAL_SD_ConfigSpeedBusOperation+0x132>
 801583a:	6823      	ldr	r3, [r4, #0]
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801583c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            status = HAL_ERROR;
 801583e:	2601      	movs	r6, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8015840:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8015844:	63a2      	str	r2, [r4, #56]	; 0x38
            status = HAL_ERROR;
 8015846:	e79e      	b.n	8015786 <HAL_SD_ConfigSpeedBusOperation+0x136>
    hsd->Instance->DCTRL = 0;
 8015848:	6820      	ldr	r0, [r4, #0]
 801584a:	2300      	movs	r3, #0
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801584c:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 801584e:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8015850:	f000 fede 	bl	8016610 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8015854:	2800      	cmp	r0, #0
 8015856:	d1f0      	bne.n	801583a <HAL_SD_ConfigSpeedBusOperation+0x1ea>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8015858:	f04f 32ff 	mov.w	r2, #4294967295
 801585c:	2340      	movs	r3, #64	; 0x40
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 801585e:	4669      	mov	r1, sp
 8015860:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8015862:	e9cd 2300 	strd	r2, r3, [sp]
 8015866:	2260      	movs	r2, #96	; 0x60
 8015868:	2302      	movs	r3, #2
 801586a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801586e:	2200      	movs	r2, #0
 8015870:	2301      	movs	r3, #1
 8015872:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8015876:	f000 feb5 	bl	80165e4 <SDMMC_ConfigData>
 801587a:	4606      	mov	r6, r0
 801587c:	2800      	cmp	r0, #0
 801587e:	d1dc      	bne.n	801583a <HAL_SD_ConfigSpeedBusOperation+0x1ea>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_DDR50_SWITCH_PATTERN);
 8015880:	4921      	ldr	r1, [pc, #132]	; (8015908 <HAL_SD_ConfigSpeedBusOperation+0x2b8>)
 8015882:	6820      	ldr	r0, [r4, #0]
 8015884:	f002 f870 	bl	8017968 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8015888:	4605      	mov	r5, r0
 801588a:	2800      	cmp	r0, #0
 801588c:	d1d5      	bne.n	801583a <HAL_SD_ConfigSpeedBusOperation+0x1ea>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 801588e:	f240 582a 	movw	r8, #1322	; 0x52a
 8015892:	e004      	b.n	801589e <HAL_SD_ConfigSpeedBusOperation+0x24e>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8015894:	f7f8 f8c0 	bl	800da18 <HAL_GetTick>
 8015898:	1bc0      	subs	r0, r0, r7
 801589a:	3001      	adds	r0, #1
 801589c:	d018      	beq.n	80158d0 <HAL_SD_ConfigSpeedBusOperation+0x280>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 801589e:	6823      	ldr	r3, [r4, #0]
 80158a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80158a2:	4618      	mov	r0, r3
 80158a4:	ea12 0f08 	tst.w	r2, r8
 80158a8:	d1a3      	bne.n	80157f2 <HAL_SD_ConfigSpeedBusOperation+0x1a2>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80158aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80158ac:	041b      	lsls	r3, r3, #16
 80158ae:	d5f1      	bpl.n	8015894 <HAL_SD_ConfigSpeedBusOperation+0x244>
 80158b0:	ab06      	add	r3, sp, #24
 80158b2:	eb03 1945 	add.w	r9, r3, r5, lsl #5
 80158b6:	ab0e      	add	r3, sp, #56	; 0x38
 80158b8:	eb03 1a45 	add.w	sl, r3, r5, lsl #5
 80158bc:	e000      	b.n	80158c0 <HAL_SD_ConfigSpeedBusOperation+0x270>
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 80158be:	6820      	ldr	r0, [r4, #0]
 80158c0:	f000 fe6e 	bl	80165a0 <SDMMC_ReadFIFO>
 80158c4:	f849 0b04 	str.w	r0, [r9], #4
        for (count = 0U; count < 8U; count++)
 80158c8:	45d1      	cmp	r9, sl
 80158ca:	d1f8      	bne.n	80158be <HAL_SD_ConfigSpeedBusOperation+0x26e>
        loop ++;
 80158cc:	3501      	adds	r5, #1
 80158ce:	e7e1      	b.n	8015894 <HAL_SD_ConfigSpeedBusOperation+0x244>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80158d0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 80158d4:	2201      	movs	r2, #1
 80158d6:	6823      	ldr	r3, [r4, #0]
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80158d8:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80158da:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 80158de:	e7ad      	b.n	801583c <HAL_SD_ConfigSpeedBusOperation+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80158e0:	2220      	movs	r2, #32
 80158e2:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 80158e4:	e7aa      	b.n	801583c <HAL_SD_ConfigSpeedBusOperation+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80158e6:	2202      	movs	r2, #2
 80158e8:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 80158ea:	e7a7      	b.n	801583c <HAL_SD_ConfigSpeedBusOperation+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80158ec:	2208      	movs	r2, #8
 80158ee:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 80158f0:	e749      	b.n	8015786 <HAL_SD_ConfigSpeedBusOperation+0x136>
 80158f2:	bf00      	nop
 80158f4:	1fe00fff 	.word	0x1fe00fff
 80158f8:	18000f3a 	.word	0x18000f3a
 80158fc:	52007000 	.word	0x52007000
 8015900:	52008000 	.word	0x52008000
 8015904:	48022800 	.word	0x48022800
 8015908:	80ffff04 	.word	0x80ffff04

0801590c <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801590c:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 801590e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015910:	0409      	lsls	r1, r1, #16
{
 8015912:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015914:	6800      	ldr	r0, [r0, #0]
 8015916:	f001 fed9 	bl	80176cc <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 801591a:	4601      	mov	r1, r0
 801591c:	b120      	cbz	r0, 8015928 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 801591e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015920:	2000      	movs	r0, #0
 8015922:	4319      	orrs	r1, r3
 8015924:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8015926:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8015928:	6820      	ldr	r0, [r4, #0]
 801592a:	f000 fe57 	bl	80165dc <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 801592e:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8015932:	bd10      	pop	{r4, pc}

08015934 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015936:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
 801593a:	2f20      	cmp	r7, #32
 801593c:	d144      	bne.n	80159c8 <HAL_UART_Transmit_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 801593e:	2900      	cmp	r1, #0
 8015940:	d040      	beq.n	80159c4 <HAL_UART_Transmit_DMA+0x90>
 8015942:	fab2 f682 	clz	r6, r2
 8015946:	0976      	lsrs	r6, r6, #5
 8015948:	2a00      	cmp	r2, #0
 801594a:	d03b      	beq.n	80159c4 <HAL_UART_Transmit_DMA+0x90>
 801594c:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 801594e:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
 8015952:	2801      	cmp	r0, #1
 8015954:	d038      	beq.n	80159c8 <HAL_UART_Transmit_DMA+0x94>
 8015956:	2501      	movs	r5, #1
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015958:	2321      	movs	r3, #33	; 0x21

    if (huart->hdmatx != NULL)
 801595a:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->TxXferCount = Size;
 801595c:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->pTxBuffPtr  = pData;
 8015960:	6521      	str	r1, [r4, #80]	; 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015962:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    huart->TxXferSize  = Size;
 8015966:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 801596a:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801596e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->hdmatx != NULL)
 8015972:	b1d8      	cbz	r0, 80159ac <HAL_UART_Transmit_DMA+0x78>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8015974:	f8df c054 	ldr.w	ip, [pc, #84]	; 80159cc <HAL_UART_Transmit_DMA+0x98>

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8015978:	4613      	mov	r3, r2
 801597a:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801597c:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015980:	f8df c04c 	ldr.w	ip, [pc, #76]	; 80159d0 <HAL_UART_Transmit_DMA+0x9c>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8015984:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8015986:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015988:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801598c:	f8df c044 	ldr.w	ip, [pc, #68]	; 80159d4 <HAL_UART_Transmit_DMA+0xa0>
 8015990:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8015994:	f7f8 ff56 	bl	800e844 <HAL_DMA_Start_IT>
 8015998:	b140      	cbz	r0, 80159ac <HAL_UART_Transmit_DMA+0x78>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801599a:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 801599c:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 801599e:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80159a2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 80159a6:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  }
  else
  {
    return HAL_BUSY;
  }
}
 80159aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80159ac:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 80159ae:	2200      	movs	r2, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80159b0:	2140      	movs	r1, #64	; 0x40
    return HAL_OK;
 80159b2:	4610      	mov	r0, r2
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80159b4:	6219      	str	r1, [r3, #32]
    __HAL_UNLOCK(huart);
 80159b6:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80159ba:	689a      	ldr	r2, [r3, #8]
 80159bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80159c0:	609a      	str	r2, [r3, #8]
}
 80159c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80159c4:	2001      	movs	r0, #1
}
 80159c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80159c8:	2002      	movs	r0, #2
}
 80159ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159cc:	08015a89 	.word	0x08015a89
 80159d0:	08015ab9 	.word	0x08015ab9
 80159d4:	08015b11 	.word	0x08015b11

080159d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80159d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80159da:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
 80159de:	2f20      	cmp	r7, #32
 80159e0:	d148      	bne.n	8015a74 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80159e2:	2900      	cmp	r1, #0
 80159e4:	d044      	beq.n	8015a70 <HAL_UART_Receive_DMA+0x98>
 80159e6:	fab2 f682 	clz	r6, r2
 80159ea:	0976      	lsrs	r6, r6, #5
 80159ec:	2a00      	cmp	r2, #0
 80159ee:	d03f      	beq.n	8015a70 <HAL_UART_Receive_DMA+0x98>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 80159f0:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80159f4:	4604      	mov	r4, r0
 80159f6:	2b01      	cmp	r3, #1
 80159f8:	d03c      	beq.n	8015a74 <HAL_UART_Receive_DMA+0x9c>
 80159fa:	2501      	movs	r5, #1

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80159fc:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80159fe:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
    huart->pRxBuffPtr = pData;
 8015a02:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize = Size;
 8015a04:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    __HAL_LOCK(huart);
 8015a08:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015a0c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8015a10:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8015a12:	b1e0      	cbz	r0, 8015a4e <HAL_UART_Receive_DMA+0x76>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8015a14:	f8df c060 	ldr.w	ip, [pc, #96]	; 8015a78 <HAL_UART_Receive_DMA+0xa0>

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015a18:	4613      	mov	r3, r2
 8015a1a:	460a      	mov	r2, r1
 8015a1c:	6821      	ldr	r1, [r4, #0]
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8015a1e:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015a22:	f8df c058 	ldr.w	ip, [pc, #88]	; 8015a7c <HAL_UART_Receive_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015a26:	3124      	adds	r1, #36	; 0x24
      huart->hdmarx->XferAbortCallback = NULL;
 8015a28:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015a2a:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015a2e:	f8df c050 	ldr.w	ip, [pc, #80]	; 8015a80 <HAL_UART_Receive_DMA+0xa8>
 8015a32:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015a36:	f7f8 ff05 	bl	800e844 <HAL_DMA_Start_IT>
 8015a3a:	b140      	cbz	r0, 8015a4e <HAL_UART_Receive_DMA+0x76>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015a3c:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 8015a3e:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8015a40:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015a44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 8015a48:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  }
  else
  {
    return HAL_BUSY;
  }
}
 8015a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015a4e:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8015a50:	2000      	movs	r0, #0
 8015a52:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015a56:	681a      	ldr	r2, [r3, #0]
 8015a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015a5c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015a5e:	689a      	ldr	r2, [r3, #8]
 8015a60:	f042 0201 	orr.w	r2, r2, #1
 8015a64:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015a66:	689a      	ldr	r2, [r3, #8]
 8015a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015a6c:	609a      	str	r2, [r3, #8]
}
 8015a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8015a70:	2001      	movs	r0, #1
}
 8015a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8015a74:	2002      	movs	r0, #2
}
 8015a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a78:	08015ac9 	.word	0x08015ac9
 8015a7c:	08015b05 	.word	0x08015b05
 8015a80:	08015b11 	.word	0x08015b11

08015a84 <HAL_UART_TxCpltCallback>:
 8015a84:	4770      	bx	lr
 8015a86:	bf00      	nop

08015a88 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015a88:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8015a8a:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015a8c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8015a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a92:	d00c      	beq.n	8015aae <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015a94:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 8015a96:	2200      	movs	r2, #0
 8015a98:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015a9c:	689a      	ldr	r2, [r3, #8]
 8015a9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015aa2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015aa4:	681a      	ldr	r2, [r3, #0]
 8015aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015aaa:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015aac:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8015aae:	f7ff ffe9 	bl	8015a84 <HAL_UART_TxCpltCallback>
}
 8015ab2:	bd08      	pop	{r3, pc}

08015ab4 <HAL_UART_TxHalfCpltCallback>:
 8015ab4:	4770      	bx	lr
 8015ab6:	bf00      	nop

08015ab8 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8015ab8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8015aba:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8015abc:	f7ff fffa 	bl	8015ab4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015ac0:	bd08      	pop	{r3, pc}
 8015ac2:	bf00      	nop

08015ac4 <HAL_UART_RxCpltCallback>:
 8015ac4:	4770      	bx	lr
 8015ac6:	bf00      	nop

08015ac8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015ac8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8015aca:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015acc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8015ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ad2:	d012      	beq.n	8015afa <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015ad4:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 8015ad6:	2200      	movs	r2, #0
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015ad8:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 8015ada:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015ade:	681a      	ldr	r2, [r3, #0]
 8015ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015ae4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015ae6:	689a      	ldr	r2, [r3, #8]
 8015ae8:	f022 0201 	bic.w	r2, r2, #1
 8015aec:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015aee:	689a      	ldr	r2, [r3, #8]
 8015af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015af4:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8015af6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8015afa:	f7ff ffe3 	bl	8015ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015afe:	bd08      	pop	{r3, pc}

08015b00 <HAL_UART_RxHalfCpltCallback>:
 8015b00:	4770      	bx	lr
 8015b02:	bf00      	nop

08015b04 <UART_DMARxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8015b04:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8015b06:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8015b08:	f7ff fffa 	bl	8015b00 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015b0c:	bd08      	pop	{r3, pc}
 8015b0e:	bf00      	nop

08015b10 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015b10:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8015b12:	b538      	push	{r3, r4, r5, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015b14:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8015b16:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8015b1a:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015b1e:	689a      	ldr	r2, [r3, #8]
 8015b20:	0615      	lsls	r5, r2, #24
 8015b22:	d501      	bpl.n	8015b28 <UART_DMAError+0x18>
 8015b24:	2c21      	cmp	r4, #33	; 0x21
 8015b26:	d01d      	beq.n	8015b64 <UART_DMAError+0x54>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015b28:	689a      	ldr	r2, [r3, #8]
 8015b2a:	0652      	lsls	r2, r2, #25
 8015b2c:	d501      	bpl.n	8015b32 <UART_DMAError+0x22>
 8015b2e:	2922      	cmp	r1, #34	; 0x22
 8015b30:	d008      	beq.n	8015b44 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015b32:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8015b36:	f043 0310 	orr.w	r3, r3, #16
 8015b3a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015b3e:	f7ef f965 	bl	8004e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015b42:	bd38      	pop	{r3, r4, r5, pc}
    huart->RxXferCount = 0U;
 8015b44:	2400      	movs	r4, #0
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015b46:	4a0f      	ldr	r2, [pc, #60]	; (8015b84 <UART_DMAError+0x74>)
  huart->RxState = HAL_UART_STATE_READY;
 8015b48:	2520      	movs	r5, #32
    huart->RxXferCount = 0U;
 8015b4a:	f8a0 405e 	strh.w	r4, [r0, #94]	; 0x5e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015b4e:	6819      	ldr	r1, [r3, #0]
 8015b50:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8015b54:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015b56:	6899      	ldr	r1, [r3, #8]
 8015b58:	400a      	ands	r2, r1
 8015b5a:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8015b5c:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  huart->RxISR = NULL;
 8015b60:	66c4      	str	r4, [r0, #108]	; 0x6c
}
 8015b62:	e7e6      	b.n	8015b32 <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 8015b64:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8015b66:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 8015b68:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8015b6c:	681a      	ldr	r2, [r3, #0]
 8015b6e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8015b72:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8015b74:	689a      	ldr	r2, [r3, #8]
 8015b76:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8015b7a:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 8015b7c:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
}
 8015b80:	e7d2      	b.n	8015b28 <UART_DMAError+0x18>
 8015b82:	bf00      	nop
 8015b84:	effffffe 	.word	0xeffffffe

08015b88 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015b88:	6802      	ldr	r2, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8015b8a:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015b8e:	69d3      	ldr	r3, [r2, #28]
  if (errorflags == 0U)
 8015b90:	ea13 0f0c 	tst.w	r3, ip
{
 8015b94:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015b96:	6815      	ldr	r5, [r2, #0]
{
 8015b98:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015b9a:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8015b9c:	f000 8091 	beq.w	8015cc2 <HAL_UART_IRQHandler+0x13a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8015ba0:	4e73      	ldr	r6, [pc, #460]	; (8015d70 <HAL_UART_IRQHandler+0x1e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8015ba2:	4874      	ldr	r0, [pc, #464]	; (8015d74 <HAL_UART_IRQHandler+0x1ec>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8015ba4:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8015ba8:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8015baa:	ea5c 0600 	orrs.w	r6, ip, r0
 8015bae:	d11d      	bne.n	8015bec <HAL_UART_IRQHandler+0x64>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8015bb0:	02d8      	lsls	r0, r3, #11
 8015bb2:	d502      	bpl.n	8015bba <HAL_UART_IRQHandler+0x32>
 8015bb4:	024e      	lsls	r6, r1, #9
 8015bb6:	f100 80aa 	bmi.w	8015d0e <HAL_UART_IRQHandler+0x186>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8015bba:	0618      	lsls	r0, r3, #24
 8015bbc:	d506      	bpl.n	8015bcc <HAL_UART_IRQHandler+0x44>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8015bbe:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8015bc2:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8015bc6:	4301      	orrs	r1, r0
 8015bc8:	f040 8099 	bne.w	8015cfe <HAL_UART_IRQHandler+0x176>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8015bcc:	065e      	lsls	r6, r3, #25
 8015bce:	d502      	bpl.n	8015bd6 <HAL_UART_IRQHandler+0x4e>
 8015bd0:	0668      	lsls	r0, r5, #25
 8015bd2:	f100 80a8 	bmi.w	8015d26 <HAL_UART_IRQHandler+0x19e>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8015bd6:	0219      	lsls	r1, r3, #8
 8015bd8:	d502      	bpl.n	8015be0 <HAL_UART_IRQHandler+0x58>
 8015bda:	006a      	lsls	r2, r5, #1
 8015bdc:	f100 80b0 	bmi.w	8015d40 <HAL_UART_IRQHandler+0x1b8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8015be0:	01db      	lsls	r3, r3, #7
 8015be2:	d502      	bpl.n	8015bea <HAL_UART_IRQHandler+0x62>
 8015be4:	2d00      	cmp	r5, #0
 8015be6:	f2c0 80b7 	blt.w	8015d58 <HAL_UART_IRQHandler+0x1d0>
}
 8015bea:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015bec:	07de      	lsls	r6, r3, #31
 8015bee:	d509      	bpl.n	8015c04 <HAL_UART_IRQHandler+0x7c>
 8015bf0:	05ee      	lsls	r6, r5, #23
 8015bf2:	d507      	bpl.n	8015c04 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015bf4:	2601      	movs	r6, #1
 8015bf6:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015bf8:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8015bfc:	f046 0601 	orr.w	r6, r6, #1
 8015c00:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015c04:	079e      	lsls	r6, r3, #30
 8015c06:	d56d      	bpl.n	8015ce4 <HAL_UART_IRQHandler+0x15c>
 8015c08:	07ce      	lsls	r6, r1, #31
 8015c0a:	d509      	bpl.n	8015c20 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015c0c:	2602      	movs	r6, #2
 8015c0e:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015c10:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8015c14:	f046 0604 	orr.w	r6, r6, #4
 8015c18:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015c1c:	075e      	lsls	r6, r3, #29
 8015c1e:	d465      	bmi.n	8015cec <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8015c20:	071e      	lsls	r6, r3, #28
 8015c22:	d50b      	bpl.n	8015c3c <HAL_UART_IRQHandler+0xb4>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015c24:	f005 0620 	and.w	r6, r5, #32
 8015c28:	4330      	orrs	r0, r6
 8015c2a:	d007      	beq.n	8015c3c <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015c2c:	2008      	movs	r0, #8
 8015c2e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015c30:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8015c34:	f040 0008 	orr.w	r0, r0, #8
 8015c38:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8015c3c:	051e      	lsls	r6, r3, #20
 8015c3e:	d50a      	bpl.n	8015c56 <HAL_UART_IRQHandler+0xce>
 8015c40:	0168      	lsls	r0, r5, #5
 8015c42:	d508      	bpl.n	8015c56 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015c44:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015c48:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8015c4a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8015c4e:	f040 0020 	orr.w	r0, r0, #32
 8015c52:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015c56:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8015c5a:	2800      	cmp	r0, #0
 8015c5c:	d0c5      	beq.n	8015bea <HAL_UART_IRQHandler+0x62>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015c5e:	069e      	lsls	r6, r3, #26
 8015c60:	d506      	bpl.n	8015c70 <HAL_UART_IRQHandler+0xe8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015c62:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015c66:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8015c6a:	ea55 0301 	orrs.w	r3, r5, r1
 8015c6e:	d16c      	bne.n	8015d4a <HAL_UART_IRQHandler+0x1c2>
      errorcode = huart->ErrorCode;
 8015c70:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015c74:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8015c76:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c7e:	431d      	orrs	r5, r3
 8015c80:	d06f      	beq.n	8015d62 <HAL_UART_IRQHandler+0x1da>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015c82:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8015c84:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015c86:	4b3c      	ldr	r3, [pc, #240]	; (8015d78 <HAL_UART_IRQHandler+0x1f0>)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015c88:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8015c8c:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015c8e:	6891      	ldr	r1, [r2, #8]
 8015c90:	400b      	ands	r3, r1
  huart->RxISR = NULL;
 8015c92:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015c94:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8015c96:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015c9a:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 8015c9c:	66e1      	str	r1, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015c9e:	065d      	lsls	r5, r3, #25
 8015ca0:	d53d      	bpl.n	8015d1e <HAL_UART_IRQHandler+0x196>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015ca2:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8015ca4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015caa:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8015cac:	2800      	cmp	r0, #0
 8015cae:	d036      	beq.n	8015d1e <HAL_UART_IRQHandler+0x196>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015cb0:	4b32      	ldr	r3, [pc, #200]	; (8015d7c <HAL_UART_IRQHandler+0x1f4>)
 8015cb2:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015cb4:	f7f9 f8d6 	bl	800ee64 <HAL_DMA_Abort_IT>
 8015cb8:	2800      	cmp	r0, #0
 8015cba:	d096      	beq.n	8015bea <HAL_UART_IRQHandler+0x62>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015cbc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8015cbe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8015cc0:	e00d      	b.n	8015cde <HAL_UART_IRQHandler+0x156>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015cc2:	069e      	lsls	r6, r3, #26
 8015cc4:	f57f af74 	bpl.w	8015bb0 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015cc8:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015ccc:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 8015cd0:	ea56 060c 	orrs.w	r6, r6, ip
 8015cd4:	f43f af6c 	beq.w	8015bb0 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 8015cd8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d085      	beq.n	8015bea <HAL_UART_IRQHandler+0x62>
}
 8015cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015ce2:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015ce4:	075e      	lsls	r6, r3, #29
 8015ce6:	d59b      	bpl.n	8015c20 <HAL_UART_IRQHandler+0x98>
 8015ce8:	07ce      	lsls	r6, r1, #31
 8015cea:	d599      	bpl.n	8015c20 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015cec:	2604      	movs	r6, #4
 8015cee:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015cf0:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8015cf4:	f046 0602 	orr.w	r6, r6, #2
 8015cf8:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 8015cfc:	e790      	b.n	8015c20 <HAL_UART_IRQHandler+0x98>
    if (huart->TxISR != NULL)
 8015cfe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	f43f af72 	beq.w	8015bea <HAL_UART_IRQHandler+0x62>
      huart->TxISR(huart);
 8015d06:	4620      	mov	r0, r4
}
 8015d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8015d0c:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8015d0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8015d12:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8015d14:	6213      	str	r3, [r2, #32]
}
 8015d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8015d1a:	f000 bbcf 	b.w	80164bc <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8015d1e:	4620      	mov	r0, r4
 8015d20:	f7ef f874 	bl	8004e0c <HAL_UART_ErrorCallback>
}
 8015d24:	bd70      	pop	{r4, r5, r6, pc}
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015d26:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015d28:	2020      	movs	r0, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015d2a:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015d30:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8015d32:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015d36:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 8015d38:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8015d3a:	f7ff fea3 	bl	8015a84 <HAL_UART_TxCpltCallback>
}
 8015d3e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8015d40:	4620      	mov	r0, r4
}
 8015d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8015d46:	f000 bbbd 	b.w	80164c4 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 8015d4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d08f      	beq.n	8015c70 <HAL_UART_IRQHandler+0xe8>
          huart->RxISR(huart);
 8015d50:	4620      	mov	r0, r4
 8015d52:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015d54:	6822      	ldr	r2, [r4, #0]
 8015d56:	e78b      	b.n	8015c70 <HAL_UART_IRQHandler+0xe8>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8015d58:	4620      	mov	r0, r4
}
 8015d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8015d5e:	f000 bbaf 	b.w	80164c0 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8015d62:	4620      	mov	r0, r4
 8015d64:	f7ef f852 	bl	8004e0c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d68:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
}
 8015d6c:	bd70      	pop	{r4, r5, r6, pc}
 8015d6e:	bf00      	nop
 8015d70:	04000120 	.word	0x04000120
 8015d74:	10000001 	.word	0x10000001
 8015d78:	effffffe 	.word	0xeffffffe
 8015d7c:	08015d81 	.word	0x08015d81

08015d80 <UART_DMAAbortOnError>:
{
 8015d80:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015d82:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8015d84:	2300      	movs	r3, #0
 8015d86:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8015d8a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8015d8e:	f7ef f83d 	bl	8004e0c <HAL_UART_ErrorCallback>
}
 8015d92:	bd08      	pop	{r3, pc}

08015d94 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8015d94:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 8015d98:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 8015d9c:	4310      	orrs	r0, r2
 8015d9e:	4770      	bx	lr

08015da0 <UART_SetConfig>:
{
 8015da0:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015da2:	6882      	ldr	r2, [r0, #8]
{
 8015da4:	4604      	mov	r4, r0
 8015da6:	b087      	sub	sp, #28
  if (UART_INSTANCE_LOWPOWER(huart))
 8015da8:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015daa:	e9d0 1004 	ldrd	r1, r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015dae:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015db0:	430a      	orrs	r2, r1
  tmpreg |= (uint32_t)huart->FifoMode;
 8015db2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015db4:	4302      	orrs	r2, r0
 8015db6:	69e0      	ldr	r0, [r4, #28]
 8015db8:	4302      	orrs	r2, r0
  tmpreg |= (uint32_t)huart->FifoMode;
 8015dba:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015dbc:	49bc      	ldr	r1, [pc, #752]	; (80160b0 <UART_SetConfig+0x310>)
 8015dbe:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015dc0:	4dbc      	ldr	r5, [pc, #752]	; (80160b4 <UART_SetConfig+0x314>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015dc2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015dc4:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015dc6:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015dc8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015dca:	685a      	ldr	r2, [r3, #4]
 8015dcc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8015dd0:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015dd4:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015dd6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015dd8:	f000 80e0 	beq.w	8015f9c <UART_SetConfig+0x1fc>
    tmpreg |= huart->Init.OneBitSampling;
 8015ddc:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015dde:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8015de0:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015de2:	4ab5      	ldr	r2, [pc, #724]	; (80160b8 <UART_SetConfig+0x318>)
 8015de4:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015de6:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015de8:	4311      	orrs	r1, r2
 8015dea:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015dee:	f022 020f 	bic.w	r2, r2, #15
 8015df2:	432a      	orrs	r2, r5
 8015df4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015df6:	4ab1      	ldr	r2, [pc, #708]	; (80160bc <UART_SetConfig+0x31c>)
 8015df8:	4293      	cmp	r3, r2
 8015dfa:	d023      	beq.n	8015e44 <UART_SetConfig+0xa4>
 8015dfc:	4ab0      	ldr	r2, [pc, #704]	; (80160c0 <UART_SetConfig+0x320>)
 8015dfe:	4293      	cmp	r3, r2
 8015e00:	d076      	beq.n	8015ef0 <UART_SetConfig+0x150>
 8015e02:	4ab0      	ldr	r2, [pc, #704]	; (80160c4 <UART_SetConfig+0x324>)
 8015e04:	4293      	cmp	r3, r2
 8015e06:	f000 8190 	beq.w	801612a <UART_SetConfig+0x38a>
 8015e0a:	4aaf      	ldr	r2, [pc, #700]	; (80160c8 <UART_SetConfig+0x328>)
 8015e0c:	4293      	cmp	r3, r2
 8015e0e:	f000 81e3 	beq.w	80161d8 <UART_SetConfig+0x438>
 8015e12:	4aae      	ldr	r2, [pc, #696]	; (80160cc <UART_SetConfig+0x32c>)
 8015e14:	4293      	cmp	r3, r2
 8015e16:	f000 8121 	beq.w	801605c <UART_SetConfig+0x2bc>
 8015e1a:	4aad      	ldr	r2, [pc, #692]	; (80160d0 <UART_SetConfig+0x330>)
 8015e1c:	4293      	cmp	r3, r2
 8015e1e:	f000 81e5 	beq.w	80161ec <UART_SetConfig+0x44c>
 8015e22:	4aac      	ldr	r2, [pc, #688]	; (80160d4 <UART_SetConfig+0x334>)
 8015e24:	4293      	cmp	r3, r2
 8015e26:	f000 8236 	beq.w	8016296 <UART_SetConfig+0x4f6>
 8015e2a:	4aab      	ldr	r2, [pc, #684]	; (80160d8 <UART_SetConfig+0x338>)
 8015e2c:	4293      	cmp	r3, r2
 8015e2e:	f000 81e9 	beq.w	8016204 <UART_SetConfig+0x464>
        ret = HAL_ERROR;
 8015e32:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 8015e34:	2300      	movs	r3, #0
 8015e36:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8015e3a:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8015e3e:	6723      	str	r3, [r4, #112]	; 0x70
}
 8015e40:	b007      	add	sp, #28
 8015e42:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015e44:	4ba5      	ldr	r3, [pc, #660]	; (80160dc <UART_SetConfig+0x33c>)
 8015e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015e48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015e4c:	2b28      	cmp	r3, #40	; 0x28
 8015e4e:	d8f0      	bhi.n	8015e32 <UART_SetConfig+0x92>
 8015e50:	4aa3      	ldr	r2, [pc, #652]	; (80160e0 <UART_SetConfig+0x340>)
 8015e52:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015e54:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8015e58:	d055      	beq.n	8015f06 <UART_SetConfig+0x166>
    switch (clocksource)
 8015e5a:	2b20      	cmp	r3, #32
 8015e5c:	f200 814a 	bhi.w	80160f4 <UART_SetConfig+0x354>
 8015e60:	2b20      	cmp	r3, #32
 8015e62:	d8e6      	bhi.n	8015e32 <UART_SetConfig+0x92>
 8015e64:	a201      	add	r2, pc, #4	; (adr r2, 8015e6c <UART_SetConfig+0xcc>)
 8015e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e6a:	bf00      	nop
 8015e6c:	080160ab 	.word	0x080160ab
 8015e70:	080160a5 	.word	0x080160a5
 8015e74:	08015e33 	.word	0x08015e33
 8015e78:	08015e33 	.word	0x08015e33
 8015e7c:	08016095 	.word	0x08016095
 8015e80:	08015e33 	.word	0x08015e33
 8015e84:	08015e33 	.word	0x08015e33
 8015e88:	08015e33 	.word	0x08015e33
 8015e8c:	08016087 	.word	0x08016087
 8015e90:	08015e33 	.word	0x08015e33
 8015e94:	08015e33 	.word	0x08015e33
 8015e98:	08015e33 	.word	0x08015e33
 8015e9c:	08015e33 	.word	0x08015e33
 8015ea0:	08015e33 	.word	0x08015e33
 8015ea4:	08015e33 	.word	0x08015e33
 8015ea8:	08015e33 	.word	0x08015e33
 8015eac:	08016071 	.word	0x08016071
 8015eb0:	08015e33 	.word	0x08015e33
 8015eb4:	08015e33 	.word	0x08015e33
 8015eb8:	08015e33 	.word	0x08015e33
 8015ebc:	08015e33 	.word	0x08015e33
 8015ec0:	08015e33 	.word	0x08015e33
 8015ec4:	08015e33 	.word	0x08015e33
 8015ec8:	08015e33 	.word	0x08015e33
 8015ecc:	08015e33 	.word	0x08015e33
 8015ed0:	08015e33 	.word	0x08015e33
 8015ed4:	08015e33 	.word	0x08015e33
 8015ed8:	08015e33 	.word	0x08015e33
 8015edc:	08015e33 	.word	0x08015e33
 8015ee0:	08015e33 	.word	0x08015e33
 8015ee4:	08015e33 	.word	0x08015e33
 8015ee8:	08015e33 	.word	0x08015e33
 8015eec:	08016219 	.word	0x08016219
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015ef0:	4b7a      	ldr	r3, [pc, #488]	; (80160dc <UART_SetConfig+0x33c>)
 8015ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ef4:	f003 0307 	and.w	r3, r3, #7
 8015ef8:	2b05      	cmp	r3, #5
 8015efa:	d89a      	bhi.n	8015e32 <UART_SetConfig+0x92>
 8015efc:	4a79      	ldr	r2, [pc, #484]	; (80160e4 <UART_SetConfig+0x344>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015efe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8015f02:	5cd3      	ldrb	r3, [r2, r3]
 8015f04:	d1a9      	bne.n	8015e5a <UART_SetConfig+0xba>
    switch (clocksource)
 8015f06:	2b20      	cmp	r3, #32
 8015f08:	f200 8146 	bhi.w	8016198 <UART_SetConfig+0x3f8>
 8015f0c:	2b20      	cmp	r3, #32
 8015f0e:	d890      	bhi.n	8015e32 <UART_SetConfig+0x92>
 8015f10:	a201      	add	r2, pc, #4	; (adr r2, 8015f18 <UART_SetConfig+0x178>)
 8015f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f16:	bf00      	nop
 8015f18:	08016283 	.word	0x08016283
 8015f1c:	0801627d 	.word	0x0801627d
 8015f20:	08015e33 	.word	0x08015e33
 8015f24:	08015e33 	.word	0x08015e33
 8015f28:	08016289 	.word	0x08016289
 8015f2c:	08015e33 	.word	0x08015e33
 8015f30:	08015e33 	.word	0x08015e33
 8015f34:	08015e33 	.word	0x08015e33
 8015f38:	0801626b 	.word	0x0801626b
 8015f3c:	08015e33 	.word	0x08015e33
 8015f40:	08015e33 	.word	0x08015e33
 8015f44:	08015e33 	.word	0x08015e33
 8015f48:	08015e33 	.word	0x08015e33
 8015f4c:	08015e33 	.word	0x08015e33
 8015f50:	08015e33 	.word	0x08015e33
 8015f54:	08015e33 	.word	0x08015e33
 8015f58:	08016257 	.word	0x08016257
 8015f5c:	08015e33 	.word	0x08015e33
 8015f60:	08015e33 	.word	0x08015e33
 8015f64:	08015e33 	.word	0x08015e33
 8015f68:	08015e33 	.word	0x08015e33
 8015f6c:	08015e33 	.word	0x08015e33
 8015f70:	08015e33 	.word	0x08015e33
 8015f74:	08015e33 	.word	0x08015e33
 8015f78:	08015e33 	.word	0x08015e33
 8015f7c:	08015e33 	.word	0x08015e33
 8015f80:	08015e33 	.word	0x08015e33
 8015f84:	08015e33 	.word	0x08015e33
 8015f88:	08015e33 	.word	0x08015e33
 8015f8c:	08015e33 	.word	0x08015e33
 8015f90:	08015e33 	.word	0x08015e33
 8015f94:	08015e33 	.word	0x08015e33
 8015f98:	08016293 	.word	0x08016293
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015f9c:	6898      	ldr	r0, [r3, #8]
 8015f9e:	4a46      	ldr	r2, [pc, #280]	; (80160b8 <UART_SetConfig+0x318>)
 8015fa0:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015fa2:	484e      	ldr	r0, [pc, #312]	; (80160dc <UART_SetConfig+0x33c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015fa4:	430a      	orrs	r2, r1
 8015fa6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015faa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015fac:	f022 020f 	bic.w	r2, r2, #15
 8015fb0:	430a      	orrs	r2, r1
 8015fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015fb4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8015fb6:	f003 0307 	and.w	r3, r3, #7
 8015fba:	2b05      	cmp	r3, #5
 8015fbc:	f63f af39 	bhi.w	8015e32 <UART_SetConfig+0x92>
 8015fc0:	4a49      	ldr	r2, [pc, #292]	; (80160e8 <UART_SetConfig+0x348>)
 8015fc2:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 8015fc4:	2b20      	cmp	r3, #32
 8015fc6:	f200 80ba 	bhi.w	801613e <UART_SetConfig+0x39e>
 8015fca:	2b01      	cmp	r3, #1
 8015fcc:	f67f af31 	bls.w	8015e32 <UART_SetConfig+0x92>
 8015fd0:	3b02      	subs	r3, #2
 8015fd2:	2b1e      	cmp	r3, #30
 8015fd4:	f63f af2d 	bhi.w	8015e32 <UART_SetConfig+0x92>
 8015fd8:	a201      	add	r2, pc, #4	; (adr r2, 8015fe0 <UART_SetConfig+0x240>)
 8015fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fde:	bf00      	nop
 8015fe0:	0801624d 	.word	0x0801624d
 8015fe4:	08015e33 	.word	0x08015e33
 8015fe8:	08016243 	.word	0x08016243
 8015fec:	08015e33 	.word	0x08015e33
 8015ff0:	08015e33 	.word	0x08015e33
 8015ff4:	08015e33 	.word	0x08015e33
 8015ff8:	08016231 	.word	0x08016231
 8015ffc:	08015e33 	.word	0x08015e33
 8016000:	08015e33 	.word	0x08015e33
 8016004:	08015e33 	.word	0x08015e33
 8016008:	08015e33 	.word	0x08015e33
 801600c:	08015e33 	.word	0x08015e33
 8016010:	08015e33 	.word	0x08015e33
 8016014:	08015e33 	.word	0x08015e33
 8016018:	0801621d 	.word	0x0801621d
 801601c:	08015e33 	.word	0x08015e33
 8016020:	08015e33 	.word	0x08015e33
 8016024:	08015e33 	.word	0x08015e33
 8016028:	08015e33 	.word	0x08015e33
 801602c:	08015e33 	.word	0x08015e33
 8016030:	08015e33 	.word	0x08015e33
 8016034:	08015e33 	.word	0x08015e33
 8016038:	08015e33 	.word	0x08015e33
 801603c:	08015e33 	.word	0x08015e33
 8016040:	08015e33 	.word	0x08015e33
 8016044:	08015e33 	.word	0x08015e33
 8016048:	08015e33 	.word	0x08015e33
 801604c:	08015e33 	.word	0x08015e33
 8016050:	08015e33 	.word	0x08015e33
 8016054:	08015e33 	.word	0x08015e33
 8016058:	08016253 	.word	0x08016253
  UART_GETCLOCKSOURCE(huart, clocksource);
 801605c:	4b1f      	ldr	r3, [pc, #124]	; (80160dc <UART_SetConfig+0x33c>)
 801605e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016060:	f003 0307 	and.w	r3, r3, #7
 8016064:	2b05      	cmp	r3, #5
 8016066:	f63f aee4 	bhi.w	8015e32 <UART_SetConfig+0x92>
 801606a:	4a20      	ldr	r2, [pc, #128]	; (80160ec <UART_SetConfig+0x34c>)
 801606c:	5cd3      	ldrb	r3, [r2, r3]
 801606e:	e6f1      	b.n	8015e54 <UART_SetConfig+0xb4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016070:	4b1a      	ldr	r3, [pc, #104]	; (80160dc <UART_SetConfig+0x33c>)
 8016072:	681a      	ldr	r2, [r3, #0]
 8016074:	0692      	lsls	r2, r2, #26
 8016076:	f140 80c3 	bpl.w	8016200 <UART_SetConfig+0x460>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	481c      	ldr	r0, [pc, #112]	; (80160f0 <UART_SetConfig+0x350>)
 801607e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8016082:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8016084:	e03b      	b.n	80160fe <UART_SetConfig+0x35e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016086:	a803      	add	r0, sp, #12
 8016088:	f7fd fca8 	bl	80139dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801608c:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 801608e:	b938      	cbnz	r0, 80160a0 <UART_SetConfig+0x300>
          pclk = (uint32_t) HSI_VALUE;
 8016090:	2000      	movs	r0, #0
 8016092:	e6cf      	b.n	8015e34 <UART_SetConfig+0x94>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016094:	4668      	mov	r0, sp
 8016096:	f7fd fbf5 	bl	8013884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801609a:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 801609c:	2800      	cmp	r0, #0
 801609e:	d0f7      	beq.n	8016090 <UART_SetConfig+0x2f0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80160a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80160a2:	e02c      	b.n	80160fe <UART_SetConfig+0x35e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80160a4:	f7fc fc70 	bl	8012988 <HAL_RCC_GetPCLK2Freq>
        break;
 80160a8:	e7f1      	b.n	801608e <UART_SetConfig+0x2ee>
        pclk = HAL_RCC_GetPCLK1Freq();
 80160aa:	f7fc fc25 	bl	80128f8 <HAL_RCC_GetPCLK1Freq>
        break;
 80160ae:	e7ee      	b.n	801608e <UART_SetConfig+0x2ee>
 80160b0:	cfff69f3 	.word	0xcfff69f3
 80160b4:	58000c00 	.word	0x58000c00
 80160b8:	11fff4ff 	.word	0x11fff4ff
 80160bc:	40011000 	.word	0x40011000
 80160c0:	40004400 	.word	0x40004400
 80160c4:	40004800 	.word	0x40004800
 80160c8:	40004c00 	.word	0x40004c00
 80160cc:	40005000 	.word	0x40005000
 80160d0:	40011400 	.word	0x40011400
 80160d4:	40007800 	.word	0x40007800
 80160d8:	40007c00 	.word	0x40007c00
 80160dc:	58024400 	.word	0x58024400
 80160e0:	080bfe8c 	.word	0x080bfe8c
 80160e4:	080bfeb8 	.word	0x080bfeb8
 80160e8:	080bfec0 	.word	0x080bfec0
 80160ec:	080bfeb8 	.word	0x080bfeb8
 80160f0:	03d09000 	.word	0x03d09000
    switch (clocksource)
 80160f4:	2b40      	cmp	r3, #64	; 0x40
 80160f6:	f47f ae9c 	bne.w	8015e32 <UART_SetConfig+0x92>
 80160fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80160fe:	4b6d      	ldr	r3, [pc, #436]	; (80162b4 <UART_SetConfig+0x514>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016100:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016104:	6862      	ldr	r2, [r4, #4]
 8016106:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 801610a:	fbb0 f3f3 	udiv	r3, r0, r3
 801610e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8016112:	fbb3 f3f2 	udiv	r3, r3, r2
 8016116:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016118:	f1a3 0210 	sub.w	r2, r3, #16
 801611c:	428a      	cmp	r2, r1
 801611e:	f63f ae88 	bhi.w	8015e32 <UART_SetConfig+0x92>
        huart->Instance->BRR = usartdiv;
 8016122:	6822      	ldr	r2, [r4, #0]
 8016124:	2000      	movs	r0, #0
 8016126:	60d3      	str	r3, [r2, #12]
 8016128:	e684      	b.n	8015e34 <UART_SetConfig+0x94>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801612a:	4b63      	ldr	r3, [pc, #396]	; (80162b8 <UART_SetConfig+0x518>)
 801612c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801612e:	f003 0307 	and.w	r3, r3, #7
 8016132:	2b05      	cmp	r3, #5
 8016134:	f63f ae7d 	bhi.w	8015e32 <UART_SetConfig+0x92>
 8016138:	4a60      	ldr	r2, [pc, #384]	; (80162bc <UART_SetConfig+0x51c>)
 801613a:	5cd3      	ldrb	r3, [r2, r3]
 801613c:	e68a      	b.n	8015e54 <UART_SetConfig+0xb4>
    switch (clocksource)
 801613e:	2b40      	cmp	r3, #64	; 0x40
 8016140:	f47f ae77 	bne.w	8015e32 <UART_SetConfig+0x92>
 8016144:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8016148:	4b5a      	ldr	r3, [pc, #360]	; (80162b4 <UART_SetConfig+0x514>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801614a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801614c:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016150:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8016154:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016158:	4299      	cmp	r1, r3
 801615a:	f63f ae6a 	bhi.w	8015e32 <UART_SetConfig+0x92>
 801615e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8016162:	f63f ae66 	bhi.w	8015e32 <UART_SetConfig+0x92>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016166:	2300      	movs	r3, #0
 8016168:	4619      	mov	r1, r3
 801616a:	f7ea f921 	bl	80003b0 <__aeabi_uldivmod>
 801616e:	462a      	mov	r2, r5
 8016170:	0209      	lsls	r1, r1, #8
 8016172:	0203      	lsls	r3, r0, #8
 8016174:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8016178:	0868      	lsrs	r0, r5, #1
 801617a:	1818      	adds	r0, r3, r0
 801617c:	f04f 0300 	mov.w	r3, #0
 8016180:	f141 0100 	adc.w	r1, r1, #0
 8016184:	f7ea f914 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016188:	4a4d      	ldr	r2, [pc, #308]	; (80162c0 <UART_SetConfig+0x520>)
 801618a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801618e:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016190:	4291      	cmp	r1, r2
 8016192:	f63f ae4e 	bhi.w	8015e32 <UART_SetConfig+0x92>
 8016196:	e7c4      	b.n	8016122 <UART_SetConfig+0x382>
    switch (clocksource)
 8016198:	2b40      	cmp	r3, #64	; 0x40
 801619a:	f47f ae4a 	bne.w	8015e32 <UART_SetConfig+0x92>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801619e:	4b45      	ldr	r3, [pc, #276]	; (80162b4 <UART_SetConfig+0x514>)
 80161a0:	6862      	ldr	r2, [r4, #4]
 80161a2:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80161a6:	0853      	lsrs	r3, r2, #1
 80161a8:	fbb0 f0f1 	udiv	r0, r0, r1
 80161ac:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80161b0:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80161b4:	fbb0 f0f2 	udiv	r0, r0, r2
 80161b8:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80161ba:	f1a2 0110 	sub.w	r1, r2, #16
 80161be:	4299      	cmp	r1, r3
 80161c0:	f63f ae37 	bhi.w	8015e32 <UART_SetConfig+0x92>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80161c4:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80161c8:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 80161cc:	6821      	ldr	r1, [r4, #0]
 80161ce:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80161d0:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 80161d2:	4313      	orrs	r3, r2
 80161d4:	60cb      	str	r3, [r1, #12]
 80161d6:	e62d      	b.n	8015e34 <UART_SetConfig+0x94>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80161d8:	4b37      	ldr	r3, [pc, #220]	; (80162b8 <UART_SetConfig+0x518>)
 80161da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80161dc:	f003 0307 	and.w	r3, r3, #7
 80161e0:	2b05      	cmp	r3, #5
 80161e2:	f63f ae26 	bhi.w	8015e32 <UART_SetConfig+0x92>
 80161e6:	4a37      	ldr	r2, [pc, #220]	; (80162c4 <UART_SetConfig+0x524>)
 80161e8:	5cd3      	ldrb	r3, [r2, r3]
 80161ea:	e633      	b.n	8015e54 <UART_SetConfig+0xb4>
 80161ec:	4b32      	ldr	r3, [pc, #200]	; (80162b8 <UART_SetConfig+0x518>)
 80161ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80161f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80161f4:	2b28      	cmp	r3, #40	; 0x28
 80161f6:	f63f ae1c 	bhi.w	8015e32 <UART_SetConfig+0x92>
 80161fa:	4a33      	ldr	r2, [pc, #204]	; (80162c8 <UART_SetConfig+0x528>)
 80161fc:	5cd3      	ldrb	r3, [r2, r3]
 80161fe:	e629      	b.n	8015e54 <UART_SetConfig+0xb4>
          pclk = (uint32_t) HSI_VALUE;
 8016200:	4832      	ldr	r0, [pc, #200]	; (80162cc <UART_SetConfig+0x52c>)
 8016202:	e77c      	b.n	80160fe <UART_SetConfig+0x35e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016204:	4b2c      	ldr	r3, [pc, #176]	; (80162b8 <UART_SetConfig+0x518>)
 8016206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016208:	f003 0307 	and.w	r3, r3, #7
 801620c:	2b05      	cmp	r3, #5
 801620e:	f63f ae10 	bhi.w	8015e32 <UART_SetConfig+0x92>
 8016212:	4a2f      	ldr	r2, [pc, #188]	; (80162d0 <UART_SetConfig+0x530>)
 8016214:	5cd3      	ldrb	r3, [r2, r3]
 8016216:	e61d      	b.n	8015e54 <UART_SetConfig+0xb4>
        pclk = (uint32_t) CSI_VALUE;
 8016218:	482e      	ldr	r0, [pc, #184]	; (80162d4 <UART_SetConfig+0x534>)
 801621a:	e770      	b.n	80160fe <UART_SetConfig+0x35e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801621c:	4b26      	ldr	r3, [pc, #152]	; (80162b8 <UART_SetConfig+0x518>)
 801621e:	681a      	ldr	r2, [r3, #0]
 8016220:	0690      	lsls	r0, r2, #26
 8016222:	d542      	bpl.n	80162aa <UART_SetConfig+0x50a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	4829      	ldr	r0, [pc, #164]	; (80162cc <UART_SetConfig+0x52c>)
 8016228:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801622c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 801622e:	e78b      	b.n	8016148 <UART_SetConfig+0x3a8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016230:	a803      	add	r0, sp, #12
 8016232:	f7fd fbd3 	bl	80139dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016236:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8016238:	2800      	cmp	r0, #0
 801623a:	f43f af29 	beq.w	8016090 <UART_SetConfig+0x2f0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801623e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016240:	e782      	b.n	8016148 <UART_SetConfig+0x3a8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016242:	4668      	mov	r0, sp
 8016244:	f7fd fb1e 	bl	8013884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016248:	9801      	ldr	r0, [sp, #4]
        break;
 801624a:	e7f5      	b.n	8016238 <UART_SetConfig+0x498>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801624c:	f7fd fb08 	bl	8013860 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8016250:	e7f2      	b.n	8016238 <UART_SetConfig+0x498>
        pclk = (uint32_t) CSI_VALUE;
 8016252:	4820      	ldr	r0, [pc, #128]	; (80162d4 <UART_SetConfig+0x534>)
 8016254:	e778      	b.n	8016148 <UART_SetConfig+0x3a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016256:	4b18      	ldr	r3, [pc, #96]	; (80162b8 <UART_SetConfig+0x518>)
 8016258:	681a      	ldr	r2, [r3, #0]
 801625a:	0691      	lsls	r1, r2, #26
 801625c:	d527      	bpl.n	80162ae <UART_SetConfig+0x50e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	481a      	ldr	r0, [pc, #104]	; (80162cc <UART_SetConfig+0x52c>)
 8016262:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8016266:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8016268:	e799      	b.n	801619e <UART_SetConfig+0x3fe>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801626a:	a803      	add	r0, sp, #12
 801626c:	f7fd fbb6 	bl	80139dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016270:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8016272:	2800      	cmp	r0, #0
 8016274:	f43f af0c 	beq.w	8016090 <UART_SetConfig+0x2f0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016278:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801627a:	e790      	b.n	801619e <UART_SetConfig+0x3fe>
        pclk = HAL_RCC_GetPCLK2Freq();
 801627c:	f7fc fb84 	bl	8012988 <HAL_RCC_GetPCLK2Freq>
        break;
 8016280:	e7f7      	b.n	8016272 <UART_SetConfig+0x4d2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8016282:	f7fc fb39 	bl	80128f8 <HAL_RCC_GetPCLK1Freq>
        break;
 8016286:	e7f4      	b.n	8016272 <UART_SetConfig+0x4d2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016288:	4668      	mov	r0, sp
 801628a:	f7fd fafb 	bl	8013884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801628e:	9801      	ldr	r0, [sp, #4]
        break;
 8016290:	e7ef      	b.n	8016272 <UART_SetConfig+0x4d2>
        pclk = (uint32_t) CSI_VALUE;
 8016292:	4810      	ldr	r0, [pc, #64]	; (80162d4 <UART_SetConfig+0x534>)
 8016294:	e783      	b.n	801619e <UART_SetConfig+0x3fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016296:	4b08      	ldr	r3, [pc, #32]	; (80162b8 <UART_SetConfig+0x518>)
 8016298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801629a:	f003 0307 	and.w	r3, r3, #7
 801629e:	2b05      	cmp	r3, #5
 80162a0:	f63f adc7 	bhi.w	8015e32 <UART_SetConfig+0x92>
 80162a4:	4a0c      	ldr	r2, [pc, #48]	; (80162d8 <UART_SetConfig+0x538>)
 80162a6:	5cd3      	ldrb	r3, [r2, r3]
 80162a8:	e5d4      	b.n	8015e54 <UART_SetConfig+0xb4>
          pclk = (uint32_t) HSI_VALUE;
 80162aa:	4808      	ldr	r0, [pc, #32]	; (80162cc <UART_SetConfig+0x52c>)
 80162ac:	e74c      	b.n	8016148 <UART_SetConfig+0x3a8>
          pclk = (uint32_t) HSI_VALUE;
 80162ae:	4807      	ldr	r0, [pc, #28]	; (80162cc <UART_SetConfig+0x52c>)
 80162b0:	e775      	b.n	801619e <UART_SetConfig+0x3fe>
 80162b2:	bf00      	nop
 80162b4:	080bfec8 	.word	0x080bfec8
 80162b8:	58024400 	.word	0x58024400
 80162bc:	080bfeb8 	.word	0x080bfeb8
 80162c0:	000ffcff 	.word	0x000ffcff
 80162c4:	080bfeb8 	.word	0x080bfeb8
 80162c8:	080bfe8c 	.word	0x080bfe8c
 80162cc:	03d09000 	.word	0x03d09000
 80162d0:	080bfeb8 	.word	0x080bfeb8
 80162d4:	003d0900 	.word	0x003d0900
 80162d8:	080bfeb8 	.word	0x080bfeb8

080162dc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80162dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80162de:	07da      	lsls	r2, r3, #31
{
 80162e0:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80162e2:	d506      	bpl.n	80162f2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80162e4:	6801      	ldr	r1, [r0, #0]
 80162e6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80162e8:	684a      	ldr	r2, [r1, #4]
 80162ea:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80162ee:	4322      	orrs	r2, r4
 80162f0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80162f2:	079c      	lsls	r4, r3, #30
 80162f4:	d506      	bpl.n	8016304 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80162f6:	6801      	ldr	r1, [r0, #0]
 80162f8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80162fa:	684a      	ldr	r2, [r1, #4]
 80162fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8016300:	4322      	orrs	r2, r4
 8016302:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016304:	0759      	lsls	r1, r3, #29
 8016306:	d506      	bpl.n	8016316 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016308:	6801      	ldr	r1, [r0, #0]
 801630a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801630c:	684a      	ldr	r2, [r1, #4]
 801630e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8016312:	4322      	orrs	r2, r4
 8016314:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016316:	071a      	lsls	r2, r3, #28
 8016318:	d506      	bpl.n	8016328 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801631a:	6801      	ldr	r1, [r0, #0]
 801631c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801631e:	684a      	ldr	r2, [r1, #4]
 8016320:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016324:	4322      	orrs	r2, r4
 8016326:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016328:	06dc      	lsls	r4, r3, #27
 801632a:	d506      	bpl.n	801633a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801632c:	6801      	ldr	r1, [r0, #0]
 801632e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8016330:	688a      	ldr	r2, [r1, #8]
 8016332:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8016336:	4322      	orrs	r2, r4
 8016338:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801633a:	0699      	lsls	r1, r3, #26
 801633c:	d506      	bpl.n	801634c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801633e:	6801      	ldr	r1, [r0, #0]
 8016340:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8016342:	688a      	ldr	r2, [r1, #8]
 8016344:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016348:	4322      	orrs	r2, r4
 801634a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801634c:	065a      	lsls	r2, r3, #25
 801634e:	d50a      	bpl.n	8016366 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016350:	6801      	ldr	r1, [r0, #0]
 8016352:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8016354:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016356:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801635a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 801635e:	ea42 0204 	orr.w	r2, r2, r4
 8016362:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016364:	d00b      	beq.n	801637e <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016366:	061b      	lsls	r3, r3, #24
 8016368:	d506      	bpl.n	8016378 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801636a:	6802      	ldr	r2, [r0, #0]
 801636c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801636e:	6853      	ldr	r3, [r2, #4]
 8016370:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8016374:	430b      	orrs	r3, r1
 8016376:	6053      	str	r3, [r2, #4]
}
 8016378:	f85d 4b04 	ldr.w	r4, [sp], #4
 801637c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801637e:	684a      	ldr	r2, [r1, #4]
 8016380:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8016382:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8016386:	4322      	orrs	r2, r4
 8016388:	604a      	str	r2, [r1, #4]
 801638a:	e7ec      	b.n	8016366 <UART_AdvFeatureConfig+0x8a>

0801638c <UART_CheckIdleState>:
{
 801638c:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801638e:	2300      	movs	r3, #0
{
 8016390:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016392:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8016396:	f7f7 fb3f 	bl	800da18 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801639a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 801639c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801639e:	681a      	ldr	r2, [r3, #0]
 80163a0:	0711      	lsls	r1, r2, #28
 80163a2:	d40c      	bmi.n	80163be <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80163a4:	681a      	ldr	r2, [r3, #0]
 80163a6:	0752      	lsls	r2, r2, #29
 80163a8:	d430      	bmi.n	801640c <UART_CheckIdleState+0x80>
  huart->gState = HAL_UART_STATE_READY;
 80163aa:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80163ac:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80163ae:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  return HAL_OK;
 80163b2:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80163b4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80163b8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 80163bc:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80163be:	69da      	ldr	r2, [r3, #28]
 80163c0:	0292      	lsls	r2, r2, #10
 80163c2:	d4ef      	bmi.n	80163a4 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80163c4:	f7f7 fb28 	bl	800da18 <HAL_GetTick>
 80163c8:	1b43      	subs	r3, r0, r5
 80163ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80163ce:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80163d0:	d22d      	bcs.n	801642e <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80163d2:	681a      	ldr	r2, [r3, #0]
 80163d4:	0750      	lsls	r0, r2, #29
 80163d6:	d5f2      	bpl.n	80163be <UART_CheckIdleState+0x32>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80163d8:	69da      	ldr	r2, [r3, #28]
 80163da:	0511      	lsls	r1, r2, #20
 80163dc:	d5ef      	bpl.n	80163be <UART_CheckIdleState+0x32>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80163de:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 80163e2:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 80163e4:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 80163e6:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80163e8:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80163ea:	6819      	ldr	r1, [r3, #0]
 80163ec:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 80163f0:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80163f2:	6899      	ldr	r1, [r3, #8]
 80163f4:	f021 0101 	bic.w	r1, r1, #1
 80163f8:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80163fa:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 80163fe:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8016402:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016406:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 801640a:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801640c:	69db      	ldr	r3, [r3, #28]
 801640e:	0258      	lsls	r0, r3, #9
 8016410:	d4cb      	bmi.n	80163aa <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016412:	f7f7 fb01 	bl	800da18 <HAL_GetTick>
 8016416:	1b43      	subs	r3, r0, r5
 8016418:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801641c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801641e:	d206      	bcs.n	801642e <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8016420:	681a      	ldr	r2, [r3, #0]
 8016422:	0751      	lsls	r1, r2, #29
 8016424:	d5f2      	bpl.n	801640c <UART_CheckIdleState+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016426:	69da      	ldr	r2, [r3, #28]
 8016428:	0512      	lsls	r2, r2, #20
 801642a:	d5ef      	bpl.n	801640c <UART_CheckIdleState+0x80>
 801642c:	e7d7      	b.n	80163de <UART_CheckIdleState+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801642e:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8016430:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8016432:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8016434:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8016436:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801643a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801643c:	689a      	ldr	r2, [r3, #8]
 801643e:	f022 0201 	bic.w	r2, r2, #1
 8016442:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8016444:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8016448:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801644c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
}
 8016450:	bd38      	pop	{r3, r4, r5, pc}
 8016452:	bf00      	nop

08016454 <HAL_UART_Init>:
  if (huart == NULL)
 8016454:	b380      	cbz	r0, 80164b8 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8016456:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 801645a:	b510      	push	{r4, lr}
 801645c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 801645e:	b333      	cbz	r3, 80164ae <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8016460:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8016462:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016464:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8016466:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 801646a:	6813      	ldr	r3, [r2, #0]
 801646c:	f023 0301 	bic.w	r3, r3, #1
 8016470:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016472:	f7ff fc95 	bl	8015da0 <UART_SetConfig>
 8016476:	2801      	cmp	r0, #1
 8016478:	d017      	beq.n	80164aa <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801647a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801647c:	b98b      	cbnz	r3, 80164a2 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801647e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8016480:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016482:	685a      	ldr	r2, [r3, #4]
 8016484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016488:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801648a:	689a      	ldr	r2, [r3, #8]
 801648c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8016490:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8016492:	681a      	ldr	r2, [r3, #0]
 8016494:	f042 0201 	orr.w	r2, r2, #1
}
 8016498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 801649c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801649e:	f7ff bf75 	b.w	801638c <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80164a2:	4620      	mov	r0, r4
 80164a4:	f7ff ff1a 	bl	80162dc <UART_AdvFeatureConfig>
 80164a8:	e7e9      	b.n	801647e <HAL_UART_Init+0x2a>
}
 80164aa:	2001      	movs	r0, #1
 80164ac:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80164ae:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80164b2:	f7f0 fac5 	bl	8006a40 <HAL_UART_MspInit>
 80164b6:	e7d3      	b.n	8016460 <HAL_UART_Init+0xc>
}
 80164b8:	2001      	movs	r0, #1
 80164ba:	4770      	bx	lr

080164bc <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80164bc:	4770      	bx	lr
 80164be:	bf00      	nop

080164c0 <HAL_UARTEx_RxFifoFullCallback>:
 80164c0:	4770      	bx	lr
 80164c2:	bf00      	nop

080164c4 <HAL_UARTEx_TxFifoEmptyCallback>:
 80164c4:	4770      	bx	lr
 80164c6:	bf00      	nop

080164c8 <DelayBlock_Enable>:
  * @brief  Enable the Delay Block instance.
  * @param  DLYBx: Pointer to DLYB instance.
  * @retval HAL status
  */
HAL_StatusTypeDef DelayBlock_Enable(DLYB_TypeDef *DLYBx)
{
 80164c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t unit_current;
  uint32_t tuning;
  uint32_t lng_mask;
  uint32_t tickstart;

  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 80164cc:	2303      	movs	r3, #3
{
 80164ce:	b083      	sub	sp, #12
  uint32_t sel = 0U;
 80164d0:	f04f 0900 	mov.w	r9, #0
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 80164d4:	f04f 0a01 	mov.w	sl, #1
{
 80164d8:	4604      	mov	r4, r0

  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
  {
    /* lng_mask is the mask bit for the LNG field to check the output of the UNITx*/
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 80164da:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  uint32_t unit = 0U;
 80164de:	f8cd 9004 	str.w	r9, [sp, #4]
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 80164e2:	6003      	str	r3, [r0, #0]
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 80164e4:	f10a 37ff 	add.w	r7, sl, #4294967295
    tuning = 0U;
 80164e8:	f04f 0800 	mov.w	r8, #0
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 80164ec:	fa0b f707 	lsl.w	r7, fp, r7
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 80164f0:	4646      	mov	r6, r8
    {
      /* Set the Delay of the UNIT(s)*/
      DLYBx->CFGR = DLYB_MAX_SELECT | (unit_current << DLYB_CFGR_UNIT_Pos);
 80164f2:	0233      	lsls	r3, r6, #8
 80164f4:	f043 030c 	orr.w	r3, r3, #12
 80164f8:	6063      	str	r3, [r4, #4]

      /* Waiting for a LNG valid value */
      tickstart =  HAL_GetTick();
 80164fa:	f7f7 fa8d 	bl	800da18 <HAL_GetTick>
 80164fe:	4605      	mov	r5, r0
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8016500:	e004      	b.n	801650c <DelayBlock_Enable+0x44>
      {
        if((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8016502:	f7f7 fa89 	bl	800da18 <HAL_GetTick>
 8016506:	1b40      	subs	r0, r0, r5
 8016508:	28fe      	cmp	r0, #254	; 0xfe
 801650a:	d81b      	bhi.n	8016544 <DelayBlock_Enable+0x7c>
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 801650c:	6863      	ldr	r3, [r4, #4]
 801650e:	2b00      	cmp	r3, #0
 8016510:	daf7      	bge.n	8016502 <DelayBlock_Enable+0x3a>
          return HAL_TIMEOUT;
        }
      }
      if (tuning == 0U)
      {
        if ((DLYBx->CFGR & lng_mask) != 0U)
 8016512:	6863      	ldr	r3, [r4, #4]
      if (tuning == 0U)
 8016514:	f1b8 0f00 	cmp.w	r8, #0
 8016518:	d018      	beq.n	801654c <DelayBlock_Enable+0x84>
        }
      }
      else
      {
        /* 1/2 period LOW detected after the HIGH 1/2 period => FULL PERIOD passed*/
        if((DLYBx->CFGR & lng_mask ) == 0U)
 801651a:	423b      	tst	r3, r7
 801651c:	d01d      	beq.n	801655a <DelayBlock_Enable+0x92>
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 801651e:	3601      	adds	r6, #1
 8016520:	2e80      	cmp	r6, #128	; 0x80
 8016522:	d1e6      	bne.n	80164f2 <DelayBlock_Enable+0x2a>
  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
 8016524:	f10a 0a01 	add.w	sl, sl, #1
 8016528:	f1ba 0f0d 	cmp.w	sl, #13
 801652c:	d1da      	bne.n	80164e4 <DelayBlock_Enable+0x1c>
  }

  /* Apply the Tuning settings */
  DLYBx->CR   = 0U;
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 801652e:	9b01      	ldr	r3, [sp, #4]
  DLYBx->CR   = 0U;
 8016530:	2000      	movs	r0, #0
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 8016532:	2103      	movs	r1, #3
  DLYBx->CR   = DLYB_CR_DEN;
 8016534:	2201      	movs	r2, #1
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8016536:	ea49 2303 	orr.w	r3, r9, r3, lsl #8
  DLYBx->CR   = 0U;
 801653a:	6020      	str	r0, [r4, #0]
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 801653c:	6021      	str	r1, [r4, #0]
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 801653e:	6063      	str	r3, [r4, #4]
  DLYBx->CR   = DLYB_CR_DEN;
 8016540:	6022      	str	r2, [r4, #0]

  return HAL_OK;
 8016542:	e000      	b.n	8016546 <DelayBlock_Enable+0x7e>
          return HAL_TIMEOUT;
 8016544:	2003      	movs	r0, #3
}
 8016546:	b003      	add	sp, #12
 8016548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((DLYBx->CFGR & lng_mask) != 0U)
 801654c:	423b      	tst	r3, r7
 801654e:	bf14      	ite	ne
 8016550:	f04f 0801 	movne.w	r8, #1
 8016554:	f04f 0800 	moveq.w	r8, #0
 8016558:	e7e1      	b.n	801651e <DelayBlock_Enable+0x56>
          if( unit == 0U )
 801655a:	9b01      	ldr	r3, [sp, #4]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d1e1      	bne.n	8016524 <DelayBlock_Enable+0x5c>
            sel  = sel_current + 1U;
 8016560:	46d1      	mov	r9, sl
 8016562:	9601      	str	r6, [sp, #4]
 8016564:	e7de      	b.n	8016524 <DelayBlock_Enable+0x5c>
 8016566:	bf00      	nop

08016568 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8016568:	b084      	sub	sp, #16
 801656a:	b410      	push	{r4}
 801656c:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8016570:	4614      	mov	r4, r2
{
 8016572:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8016576:	460b      	mov	r3, r1
             Init.ClockPowerSave      |\
 8016578:	9904      	ldr	r1, [sp, #16]
{
 801657a:	4602      	mov	r2, r0
             Init.BusWide             |\
 801657c:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 801657e:	4323      	orrs	r3, r4
             Init.HardwareFlowControl |\
             Init.ClockDiv
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8016580:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      |\
 8016582:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8016584:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             |\
 8016586:	4303      	orrs	r3, r0

  return HAL_OK;
}
 8016588:	2000      	movs	r0, #0
             Init.HardwareFlowControl |\
 801658a:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801658c:	4903      	ldr	r1, [pc, #12]	; (801659c <SDMMC_Init+0x34>)
 801658e:	4021      	ands	r1, r4
}
 8016590:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8016594:	430b      	orrs	r3, r1
}
 8016596:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8016598:	6053      	str	r3, [r2, #4]
}
 801659a:	4770      	bx	lr
 801659c:	ffc02c00 	.word	0xffc02c00

080165a0 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80165a0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80165a4:	4770      	bx	lr
 80165a6:	bf00      	nop

080165a8 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80165a8:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80165aa:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 80165ac:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 80165ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80165b2:	4770      	bx	lr

080165b4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80165b4:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 80165b6:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80165b8:	681a      	ldr	r2, [r3, #0]
 80165ba:	f042 0203 	orr.w	r2, r2, #3
 80165be:	601a      	str	r2, [r3, #0]
}
 80165c0:	4770      	bx	lr
 80165c2:	bf00      	nop

080165c4 <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 80165c4:	4603      	mov	r3, r0
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);

  return HAL_OK;
}
 80165c6:	2000      	movs	r0, #0
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 80165c8:	681a      	ldr	r2, [r3, #0]
 80165ca:	f022 0203 	bic.w	r2, r2, #3
 80165ce:	601a      	str	r2, [r3, #0]
}
 80165d0:	4770      	bx	lr
 80165d2:	bf00      	nop

080165d4 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80165d4:	6800      	ldr	r0, [r0, #0]
}
 80165d6:	f000 0003 	and.w	r0, r0, #3
 80165da:	4770      	bx	lr

080165dc <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80165dc:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 80165de:	5840      	ldr	r0, [r0, r1]
}
 80165e0:	4770      	bx	lr
 80165e2:	bf00      	nop

080165e4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80165e4:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80165e6:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   |\
 80165ea:	690d      	ldr	r5, [r1, #16]
{
 80165ec:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80165ee:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
 80165f0:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 80165f2:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 80165f4:	6250      	str	r0, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 80165f6:	432b      	orrs	r3, r5
                       Data->TransferMode  |\
 80165f8:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
 80165fa:	6294      	str	r4, [r2, #40]	; 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80165fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 80165fe:	4303      	orrs	r3, r0

  return HAL_OK;

}
 8016600:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8016602:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8016606:	430b      	orrs	r3, r1
}
 8016608:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801660a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 801660c:	4770      	bx	lr
 801660e:	bf00      	nop

08016610 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016610:	4a4c      	ldr	r2, [pc, #304]	; (8016744 <SDMMC_CmdBlockLength+0x134>)
 8016612:	4b4d      	ldr	r3, [pc, #308]	; (8016748 <SDMMC_CmdBlockLength+0x138>)
 8016614:	6812      	ldr	r2, [r2, #0]
{
 8016616:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016618:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801661c:	4c4b      	ldr	r4, [pc, #300]	; (801674c <SDMMC_CmdBlockLength+0x13c>)
  SDMMCx->ARG = Command->Argument;
 801661e:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016620:	f241 1310 	movw	r3, #4368	; 0x1110
 8016624:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016626:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016628:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801662a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801662e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016630:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016634:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
 8016636:	b14a      	cbz	r2, 801664c <SDMMC_CmdBlockLength+0x3c>
 8016638:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801663a:	4945      	ldr	r1, [pc, #276]	; (8016750 <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
 801663c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 801663e:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016640:	420a      	tst	r2, r1
 8016642:	d001      	beq.n	8016648 <SDMMC_CmdBlockLength+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016644:	0492      	lsls	r2, r2, #18
 8016646:	d507      	bpl.n	8016658 <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
 8016648:	1c5c      	adds	r4, r3, #1
 801664a:	d1f7      	bne.n	801663c <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 801664c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8016650:	4618      	mov	r0, r3
 8016652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016656:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016658:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801665a:	075c      	lsls	r4, r3, #29
 801665c:	d43d      	bmi.n	80166da <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801665e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016660:	f013 0301 	ands.w	r3, r3, #1
 8016664:	d134      	bne.n	80166d0 <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016666:	4b3b      	ldr	r3, [pc, #236]	; (8016754 <SDMMC_CmdBlockLength+0x144>)
 8016668:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801666a:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801666c:	b2db      	uxtb	r3, r3
 801666e:	2b10      	cmp	r3, #16
 8016670:	d131      	bne.n	80166d6 <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
 8016672:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8016674:	4b38      	ldr	r3, [pc, #224]	; (8016758 <SDMMC_CmdBlockLength+0x148>)
 8016676:	4013      	ands	r3, r2
 8016678:	2b00      	cmp	r3, #0
 801667a:	d0e9      	beq.n	8016650 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801667c:	2a00      	cmp	r2, #0
 801667e:	db30      	blt.n	80166e2 <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8016680:	0051      	lsls	r1, r2, #1
 8016682:	d431      	bmi.n	80166e8 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8016684:	0094      	lsls	r4, r2, #2
 8016686:	d431      	bmi.n	80166ec <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8016688:	00d0      	lsls	r0, r2, #3
 801668a:	d431      	bmi.n	80166f0 <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801668c:	0111      	lsls	r1, r2, #4
 801668e:	d432      	bmi.n	80166f6 <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8016690:	0154      	lsls	r4, r2, #5
 8016692:	d433      	bmi.n	80166fc <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8016694:	01d0      	lsls	r0, r2, #7
 8016696:	d434      	bmi.n	8016702 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8016698:	0211      	lsls	r1, r2, #8
 801669a:	d435      	bmi.n	8016708 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801669c:	0254      	lsls	r4, r2, #9
 801669e:	d436      	bmi.n	801670e <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80166a0:	0290      	lsls	r0, r2, #10
 80166a2:	d440      	bmi.n	8016726 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80166a4:	02d1      	lsls	r1, r2, #11
 80166a6:	d43b      	bmi.n	8016720 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80166a8:	0354      	lsls	r4, r2, #13
 80166aa:	d436      	bmi.n	801671a <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80166ac:	0390      	lsls	r0, r2, #14
 80166ae:	d431      	bmi.n	8016714 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80166b0:	03d1      	lsls	r1, r2, #15
 80166b2:	d444      	bmi.n	801673e <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80166b4:	0414      	lsls	r4, r2, #16
 80166b6:	d43f      	bmi.n	8016738 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80166b8:	0450      	lsls	r0, r2, #17
 80166ba:	d43a      	bmi.n	8016732 <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80166bc:	0491      	lsls	r1, r2, #18
 80166be:	d435      	bmi.n	801672c <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80166c0:	f012 0f08 	tst.w	r2, #8
 80166c4:	bf14      	ite	ne
 80166c6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80166ca:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80166ce:	e7bf      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80166d0:	2201      	movs	r2, #1
 80166d2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80166d4:	e7bc      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80166d6:	2301      	movs	r3, #1
 80166d8:	e7ba      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80166da:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80166dc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80166de:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80166e0:	e7b6      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80166e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80166e6:	e7b3      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80166e8:	2340      	movs	r3, #64	; 0x40
 80166ea:	e7b1      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80166ec:	2380      	movs	r3, #128	; 0x80
 80166ee:	e7af      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80166f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80166f4:	e7ac      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80166f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80166fa:	e7a9      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80166fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016700:	e7a6      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8016702:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016706:	e7a3      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8016708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801670c:	e7a0      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801670e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016712:	e79d      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8016714:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016718:	e79a      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801671a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801671e:	e797      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
 8016720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016724:	e794      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8016726:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801672a:	e791      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 801672c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016730:	e78e      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8016732:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8016736:	e78b      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8016738:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801673c:	e788      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801673e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016742:	e785      	b.n	8016650 <SDMMC_CmdBlockLength+0x40>
 8016744:	2400737c 	.word	0x2400737c
 8016748:	10624dd3 	.word	0x10624dd3
 801674c:	fffee0c0 	.word	0xfffee0c0
 8016750:	00200045 	.word	0x00200045
 8016754:	002000c5 	.word	0x002000c5
 8016758:	fdffe008 	.word	0xfdffe008

0801675c <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801675c:	4a4c      	ldr	r2, [pc, #304]	; (8016890 <SDMMC_CmdReadSingleBlock+0x134>)
 801675e:	4b4d      	ldr	r3, [pc, #308]	; (8016894 <SDMMC_CmdReadSingleBlock+0x138>)
 8016760:	6812      	ldr	r2, [r2, #0]
{
 8016762:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016764:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016768:	4c4b      	ldr	r4, [pc, #300]	; (8016898 <SDMMC_CmdReadSingleBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
 801676a:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801676c:	f241 1311 	movw	r3, #4369	; 0x1111
 8016770:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016772:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016774:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016776:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801677a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801677c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016780:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8016782:	b14a      	cbz	r2, 8016798 <SDMMC_CmdReadSingleBlock+0x3c>
 8016784:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016786:	4945      	ldr	r1, [pc, #276]	; (801689c <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 8016788:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 801678a:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801678c:	420a      	tst	r2, r1
 801678e:	d001      	beq.n	8016794 <SDMMC_CmdReadSingleBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016790:	0492      	lsls	r2, r2, #18
 8016792:	d507      	bpl.n	80167a4 <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
 8016794:	1c5c      	adds	r4, r3, #1
 8016796:	d1f7      	bne.n	8016788 <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8016798:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801679c:	4618      	mov	r0, r3
 801679e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167a2:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80167a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80167a6:	075c      	lsls	r4, r3, #29
 80167a8:	d43d      	bmi.n	8016826 <SDMMC_CmdReadSingleBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80167aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80167ac:	f013 0301 	ands.w	r3, r3, #1
 80167b0:	d134      	bne.n	801681c <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80167b2:	4b3b      	ldr	r3, [pc, #236]	; (80168a0 <SDMMC_CmdReadSingleBlock+0x144>)
 80167b4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80167b6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80167b8:	b2db      	uxtb	r3, r3
 80167ba:	2b11      	cmp	r3, #17
 80167bc:	d131      	bne.n	8016822 <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 80167be:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80167c0:	4b38      	ldr	r3, [pc, #224]	; (80168a4 <SDMMC_CmdReadSingleBlock+0x148>)
 80167c2:	4013      	ands	r3, r2
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d0e9      	beq.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80167c8:	2a00      	cmp	r2, #0
 80167ca:	db30      	blt.n	801682e <SDMMC_CmdReadSingleBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80167cc:	0051      	lsls	r1, r2, #1
 80167ce:	d431      	bmi.n	8016834 <SDMMC_CmdReadSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80167d0:	0094      	lsls	r4, r2, #2
 80167d2:	d431      	bmi.n	8016838 <SDMMC_CmdReadSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80167d4:	00d0      	lsls	r0, r2, #3
 80167d6:	d431      	bmi.n	801683c <SDMMC_CmdReadSingleBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80167d8:	0111      	lsls	r1, r2, #4
 80167da:	d432      	bmi.n	8016842 <SDMMC_CmdReadSingleBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80167dc:	0154      	lsls	r4, r2, #5
 80167de:	d433      	bmi.n	8016848 <SDMMC_CmdReadSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80167e0:	01d0      	lsls	r0, r2, #7
 80167e2:	d434      	bmi.n	801684e <SDMMC_CmdReadSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80167e4:	0211      	lsls	r1, r2, #8
 80167e6:	d435      	bmi.n	8016854 <SDMMC_CmdReadSingleBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80167e8:	0254      	lsls	r4, r2, #9
 80167ea:	d436      	bmi.n	801685a <SDMMC_CmdReadSingleBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80167ec:	0290      	lsls	r0, r2, #10
 80167ee:	d440      	bmi.n	8016872 <SDMMC_CmdReadSingleBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80167f0:	02d1      	lsls	r1, r2, #11
 80167f2:	d43b      	bmi.n	801686c <SDMMC_CmdReadSingleBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80167f4:	0354      	lsls	r4, r2, #13
 80167f6:	d436      	bmi.n	8016866 <SDMMC_CmdReadSingleBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80167f8:	0390      	lsls	r0, r2, #14
 80167fa:	d431      	bmi.n	8016860 <SDMMC_CmdReadSingleBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80167fc:	03d1      	lsls	r1, r2, #15
 80167fe:	d444      	bmi.n	801688a <SDMMC_CmdReadSingleBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8016800:	0414      	lsls	r4, r2, #16
 8016802:	d43f      	bmi.n	8016884 <SDMMC_CmdReadSingleBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8016804:	0450      	lsls	r0, r2, #17
 8016806:	d43a      	bmi.n	801687e <SDMMC_CmdReadSingleBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8016808:	0491      	lsls	r1, r2, #18
 801680a:	d435      	bmi.n	8016878 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801680c:	f012 0f08 	tst.w	r2, #8
 8016810:	bf14      	ite	ne
 8016812:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8016816:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 801681a:	e7bf      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801681c:	2201      	movs	r2, #1
 801681e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016820:	e7bc      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016822:	2301      	movs	r3, #1
 8016824:	e7ba      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016826:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016828:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801682a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801682c:	e7b6      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801682e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016832:	e7b3      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8016834:	2340      	movs	r3, #64	; 0x40
 8016836:	e7b1      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8016838:	2380      	movs	r3, #128	; 0x80
 801683a:	e7af      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801683c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016840:	e7ac      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8016842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016846:	e7a9      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8016848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801684c:	e7a6      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801684e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016852:	e7a3      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8016854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016858:	e7a0      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801685a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801685e:	e79d      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8016860:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016864:	e79a      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8016866:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801686a:	e797      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 801686c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016870:	e794      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8016872:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016876:	e791      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8016878:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801687c:	e78e      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801687e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8016882:	e78b      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8016884:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8016888:	e788      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801688a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801688e:	e785      	b.n	801679c <SDMMC_CmdReadSingleBlock+0x40>
 8016890:	2400737c 	.word	0x2400737c
 8016894:	10624dd3 	.word	0x10624dd3
 8016898:	fffee0c0 	.word	0xfffee0c0
 801689c:	00200045 	.word	0x00200045
 80168a0:	002000c5 	.word	0x002000c5
 80168a4:	fdffe008 	.word	0xfdffe008

080168a8 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80168a8:	4a4c      	ldr	r2, [pc, #304]	; (80169dc <SDMMC_CmdReadMultiBlock+0x134>)
 80168aa:	4b4d      	ldr	r3, [pc, #308]	; (80169e0 <SDMMC_CmdReadMultiBlock+0x138>)
 80168ac:	6812      	ldr	r2, [r2, #0]
{
 80168ae:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80168b0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80168b4:	4c4b      	ldr	r4, [pc, #300]	; (80169e4 <SDMMC_CmdReadMultiBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
 80168b6:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80168b8:	f241 1312 	movw	r3, #4370	; 0x1112
 80168bc:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80168be:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80168c0:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80168c2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80168c6:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80168c8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80168cc:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80168ce:	b14a      	cbz	r2, 80168e4 <SDMMC_CmdReadMultiBlock+0x3c>
 80168d0:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80168d2:	4945      	ldr	r1, [pc, #276]	; (80169e8 <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 80168d4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80168d6:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80168d8:	420a      	tst	r2, r1
 80168da:	d001      	beq.n	80168e0 <SDMMC_CmdReadMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80168dc:	0492      	lsls	r2, r2, #18
 80168de:	d507      	bpl.n	80168f0 <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
 80168e0:	1c5c      	adds	r4, r3, #1
 80168e2:	d1f7      	bne.n	80168d4 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80168e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80168e8:	4618      	mov	r0, r3
 80168ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168ee:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80168f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80168f2:	075c      	lsls	r4, r3, #29
 80168f4:	d43d      	bmi.n	8016972 <SDMMC_CmdReadMultiBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80168f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80168f8:	f013 0301 	ands.w	r3, r3, #1
 80168fc:	d134      	bne.n	8016968 <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80168fe:	4b3b      	ldr	r3, [pc, #236]	; (80169ec <SDMMC_CmdReadMultiBlock+0x144>)
 8016900:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8016902:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016904:	b2db      	uxtb	r3, r3
 8016906:	2b12      	cmp	r3, #18
 8016908:	d131      	bne.n	801696e <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 801690a:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801690c:	4b38      	ldr	r3, [pc, #224]	; (80169f0 <SDMMC_CmdReadMultiBlock+0x148>)
 801690e:	4013      	ands	r3, r2
 8016910:	2b00      	cmp	r3, #0
 8016912:	d0e9      	beq.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8016914:	2a00      	cmp	r2, #0
 8016916:	db30      	blt.n	801697a <SDMMC_CmdReadMultiBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8016918:	0051      	lsls	r1, r2, #1
 801691a:	d431      	bmi.n	8016980 <SDMMC_CmdReadMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801691c:	0094      	lsls	r4, r2, #2
 801691e:	d431      	bmi.n	8016984 <SDMMC_CmdReadMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8016920:	00d0      	lsls	r0, r2, #3
 8016922:	d431      	bmi.n	8016988 <SDMMC_CmdReadMultiBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8016924:	0111      	lsls	r1, r2, #4
 8016926:	d432      	bmi.n	801698e <SDMMC_CmdReadMultiBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8016928:	0154      	lsls	r4, r2, #5
 801692a:	d433      	bmi.n	8016994 <SDMMC_CmdReadMultiBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801692c:	01d0      	lsls	r0, r2, #7
 801692e:	d434      	bmi.n	801699a <SDMMC_CmdReadMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8016930:	0211      	lsls	r1, r2, #8
 8016932:	d435      	bmi.n	80169a0 <SDMMC_CmdReadMultiBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8016934:	0254      	lsls	r4, r2, #9
 8016936:	d436      	bmi.n	80169a6 <SDMMC_CmdReadMultiBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8016938:	0290      	lsls	r0, r2, #10
 801693a:	d440      	bmi.n	80169be <SDMMC_CmdReadMultiBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801693c:	02d1      	lsls	r1, r2, #11
 801693e:	d43b      	bmi.n	80169b8 <SDMMC_CmdReadMultiBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8016940:	0354      	lsls	r4, r2, #13
 8016942:	d436      	bmi.n	80169b2 <SDMMC_CmdReadMultiBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8016944:	0390      	lsls	r0, r2, #14
 8016946:	d431      	bmi.n	80169ac <SDMMC_CmdReadMultiBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8016948:	03d1      	lsls	r1, r2, #15
 801694a:	d444      	bmi.n	80169d6 <SDMMC_CmdReadMultiBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801694c:	0414      	lsls	r4, r2, #16
 801694e:	d43f      	bmi.n	80169d0 <SDMMC_CmdReadMultiBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8016950:	0450      	lsls	r0, r2, #17
 8016952:	d43a      	bmi.n	80169ca <SDMMC_CmdReadMultiBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8016954:	0491      	lsls	r1, r2, #18
 8016956:	d435      	bmi.n	80169c4 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8016958:	f012 0f08 	tst.w	r2, #8
 801695c:	bf14      	ite	ne
 801695e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8016962:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8016966:	e7bf      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016968:	2201      	movs	r2, #1
 801696a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801696c:	e7bc      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801696e:	2301      	movs	r3, #1
 8016970:	e7ba      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016972:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016974:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016976:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016978:	e7b6      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801697a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801697e:	e7b3      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8016980:	2340      	movs	r3, #64	; 0x40
 8016982:	e7b1      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8016984:	2380      	movs	r3, #128	; 0x80
 8016986:	e7af      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8016988:	f44f 7380 	mov.w	r3, #256	; 0x100
 801698c:	e7ac      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801698e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016992:	e7a9      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8016994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016998:	e7a6      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801699a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801699e:	e7a3      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80169a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80169a4:	e7a0      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80169a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80169aa:	e79d      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80169ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80169b0:	e79a      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80169b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80169b6:	e797      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 80169b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80169bc:	e794      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80169be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80169c2:	e791      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80169c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80169c8:	e78e      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80169ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80169ce:	e78b      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80169d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80169d4:	e788      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80169d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80169da:	e785      	b.n	80168e8 <SDMMC_CmdReadMultiBlock+0x40>
 80169dc:	2400737c 	.word	0x2400737c
 80169e0:	10624dd3 	.word	0x10624dd3
 80169e4:	fffee0c0 	.word	0xfffee0c0
 80169e8:	00200045 	.word	0x00200045
 80169ec:	002000c5 	.word	0x002000c5
 80169f0:	fdffe008 	.word	0xfdffe008

080169f4 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80169f4:	4a4c      	ldr	r2, [pc, #304]	; (8016b28 <SDMMC_CmdWriteSingleBlock+0x134>)
 80169f6:	4b4d      	ldr	r3, [pc, #308]	; (8016b2c <SDMMC_CmdWriteSingleBlock+0x138>)
 80169f8:	6812      	ldr	r2, [r2, #0]
{
 80169fa:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80169fc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016a00:	4c4b      	ldr	r4, [pc, #300]	; (8016b30 <SDMMC_CmdWriteSingleBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8016a02:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016a04:	f241 1318 	movw	r3, #4376	; 0x1118
 8016a08:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016a0a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016a0c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016a0e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016a12:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016a14:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016a18:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8016a1a:	b14a      	cbz	r2, 8016a30 <SDMMC_CmdWriteSingleBlock+0x3c>
 8016a1c:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016a1e:	4945      	ldr	r1, [pc, #276]	; (8016b34 <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 8016a20:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8016a22:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016a24:	420a      	tst	r2, r1
 8016a26:	d001      	beq.n	8016a2c <SDMMC_CmdWriteSingleBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016a28:	0492      	lsls	r2, r2, #18
 8016a2a:	d507      	bpl.n	8016a3c <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
 8016a2c:	1c5c      	adds	r4, r3, #1
 8016a2e:	d1f7      	bne.n	8016a20 <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8016a30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8016a34:	4618      	mov	r0, r3
 8016a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a3a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016a3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016a3e:	075c      	lsls	r4, r3, #29
 8016a40:	d43d      	bmi.n	8016abe <SDMMC_CmdWriteSingleBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016a42:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016a44:	f013 0301 	ands.w	r3, r3, #1
 8016a48:	d134      	bne.n	8016ab4 <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016a4a:	4b3b      	ldr	r3, [pc, #236]	; (8016b38 <SDMMC_CmdWriteSingleBlock+0x144>)
 8016a4c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8016a4e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016a50:	b2db      	uxtb	r3, r3
 8016a52:	2b18      	cmp	r3, #24
 8016a54:	d131      	bne.n	8016aba <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 8016a56:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8016a58:	4b38      	ldr	r3, [pc, #224]	; (8016b3c <SDMMC_CmdWriteSingleBlock+0x148>)
 8016a5a:	4013      	ands	r3, r2
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d0e9      	beq.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8016a60:	2a00      	cmp	r2, #0
 8016a62:	db30      	blt.n	8016ac6 <SDMMC_CmdWriteSingleBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8016a64:	0051      	lsls	r1, r2, #1
 8016a66:	d431      	bmi.n	8016acc <SDMMC_CmdWriteSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8016a68:	0094      	lsls	r4, r2, #2
 8016a6a:	d431      	bmi.n	8016ad0 <SDMMC_CmdWriteSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8016a6c:	00d0      	lsls	r0, r2, #3
 8016a6e:	d431      	bmi.n	8016ad4 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8016a70:	0111      	lsls	r1, r2, #4
 8016a72:	d432      	bmi.n	8016ada <SDMMC_CmdWriteSingleBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8016a74:	0154      	lsls	r4, r2, #5
 8016a76:	d433      	bmi.n	8016ae0 <SDMMC_CmdWriteSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8016a78:	01d0      	lsls	r0, r2, #7
 8016a7a:	d434      	bmi.n	8016ae6 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8016a7c:	0211      	lsls	r1, r2, #8
 8016a7e:	d435      	bmi.n	8016aec <SDMMC_CmdWriteSingleBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8016a80:	0254      	lsls	r4, r2, #9
 8016a82:	d436      	bmi.n	8016af2 <SDMMC_CmdWriteSingleBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8016a84:	0290      	lsls	r0, r2, #10
 8016a86:	d440      	bmi.n	8016b0a <SDMMC_CmdWriteSingleBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8016a88:	02d1      	lsls	r1, r2, #11
 8016a8a:	d43b      	bmi.n	8016b04 <SDMMC_CmdWriteSingleBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8016a8c:	0354      	lsls	r4, r2, #13
 8016a8e:	d436      	bmi.n	8016afe <SDMMC_CmdWriteSingleBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8016a90:	0390      	lsls	r0, r2, #14
 8016a92:	d431      	bmi.n	8016af8 <SDMMC_CmdWriteSingleBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8016a94:	03d1      	lsls	r1, r2, #15
 8016a96:	d444      	bmi.n	8016b22 <SDMMC_CmdWriteSingleBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8016a98:	0414      	lsls	r4, r2, #16
 8016a9a:	d43f      	bmi.n	8016b1c <SDMMC_CmdWriteSingleBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8016a9c:	0450      	lsls	r0, r2, #17
 8016a9e:	d43a      	bmi.n	8016b16 <SDMMC_CmdWriteSingleBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8016aa0:	0491      	lsls	r1, r2, #18
 8016aa2:	d435      	bmi.n	8016b10 <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8016aa4:	f012 0f08 	tst.w	r2, #8
 8016aa8:	bf14      	ite	ne
 8016aaa:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8016aae:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8016ab2:	e7bf      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016ab4:	2201      	movs	r2, #1
 8016ab6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016ab8:	e7bc      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016aba:	2301      	movs	r3, #1
 8016abc:	e7ba      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016abe:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016ac0:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016ac2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016ac4:	e7b6      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8016ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016aca:	e7b3      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8016acc:	2340      	movs	r3, #64	; 0x40
 8016ace:	e7b1      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8016ad0:	2380      	movs	r3, #128	; 0x80
 8016ad2:	e7af      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8016ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016ad8:	e7ac      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8016ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016ade:	e7a9      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8016ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016ae4:	e7a6      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8016ae6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016aea:	e7a3      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8016aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016af0:	e7a0      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8016af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016af6:	e79d      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8016af8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016afc:	e79a      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8016afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016b02:	e797      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8016b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016b08:	e794      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8016b0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016b0e:	e791      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8016b10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016b14:	e78e      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8016b16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8016b1a:	e78b      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8016b1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8016b20:	e788      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8016b22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016b26:	e785      	b.n	8016a34 <SDMMC_CmdWriteSingleBlock+0x40>
 8016b28:	2400737c 	.word	0x2400737c
 8016b2c:	10624dd3 	.word	0x10624dd3
 8016b30:	fffee0c0 	.word	0xfffee0c0
 8016b34:	00200045 	.word	0x00200045
 8016b38:	002000c5 	.word	0x002000c5
 8016b3c:	fdffe008 	.word	0xfdffe008

08016b40 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016b40:	4a4c      	ldr	r2, [pc, #304]	; (8016c74 <SDMMC_CmdWriteMultiBlock+0x134>)
 8016b42:	4b4d      	ldr	r3, [pc, #308]	; (8016c78 <SDMMC_CmdWriteMultiBlock+0x138>)
 8016b44:	6812      	ldr	r2, [r2, #0]
{
 8016b46:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016b48:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016b4c:	4c4b      	ldr	r4, [pc, #300]	; (8016c7c <SDMMC_CmdWriteMultiBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8016b4e:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016b50:	f241 1319 	movw	r3, #4377	; 0x1119
 8016b54:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016b56:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016b58:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016b5a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016b5e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016b60:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016b64:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8016b66:	b14a      	cbz	r2, 8016b7c <SDMMC_CmdWriteMultiBlock+0x3c>
 8016b68:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016b6a:	4945      	ldr	r1, [pc, #276]	; (8016c80 <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 8016b6c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8016b6e:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016b70:	420a      	tst	r2, r1
 8016b72:	d001      	beq.n	8016b78 <SDMMC_CmdWriteMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016b74:	0492      	lsls	r2, r2, #18
 8016b76:	d507      	bpl.n	8016b88 <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
 8016b78:	1c5c      	adds	r4, r3, #1
 8016b7a:	d1f7      	bne.n	8016b6c <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8016b7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8016b80:	4618      	mov	r0, r3
 8016b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b86:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016b88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016b8a:	075c      	lsls	r4, r3, #29
 8016b8c:	d43d      	bmi.n	8016c0a <SDMMC_CmdWriteMultiBlock+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016b8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016b90:	f013 0301 	ands.w	r3, r3, #1
 8016b94:	d134      	bne.n	8016c00 <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016b96:	4b3b      	ldr	r3, [pc, #236]	; (8016c84 <SDMMC_CmdWriteMultiBlock+0x144>)
 8016b98:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8016b9a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016b9c:	b2db      	uxtb	r3, r3
 8016b9e:	2b19      	cmp	r3, #25
 8016ba0:	d131      	bne.n	8016c06 <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 8016ba2:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8016ba4:	4b38      	ldr	r3, [pc, #224]	; (8016c88 <SDMMC_CmdWriteMultiBlock+0x148>)
 8016ba6:	4013      	ands	r3, r2
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d0e9      	beq.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8016bac:	2a00      	cmp	r2, #0
 8016bae:	db30      	blt.n	8016c12 <SDMMC_CmdWriteMultiBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8016bb0:	0051      	lsls	r1, r2, #1
 8016bb2:	d431      	bmi.n	8016c18 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8016bb4:	0094      	lsls	r4, r2, #2
 8016bb6:	d431      	bmi.n	8016c1c <SDMMC_CmdWriteMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8016bb8:	00d0      	lsls	r0, r2, #3
 8016bba:	d431      	bmi.n	8016c20 <SDMMC_CmdWriteMultiBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8016bbc:	0111      	lsls	r1, r2, #4
 8016bbe:	d432      	bmi.n	8016c26 <SDMMC_CmdWriteMultiBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8016bc0:	0154      	lsls	r4, r2, #5
 8016bc2:	d433      	bmi.n	8016c2c <SDMMC_CmdWriteMultiBlock+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8016bc4:	01d0      	lsls	r0, r2, #7
 8016bc6:	d434      	bmi.n	8016c32 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8016bc8:	0211      	lsls	r1, r2, #8
 8016bca:	d435      	bmi.n	8016c38 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8016bcc:	0254      	lsls	r4, r2, #9
 8016bce:	d436      	bmi.n	8016c3e <SDMMC_CmdWriteMultiBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8016bd0:	0290      	lsls	r0, r2, #10
 8016bd2:	d440      	bmi.n	8016c56 <SDMMC_CmdWriteMultiBlock+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8016bd4:	02d1      	lsls	r1, r2, #11
 8016bd6:	d43b      	bmi.n	8016c50 <SDMMC_CmdWriteMultiBlock+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8016bd8:	0354      	lsls	r4, r2, #13
 8016bda:	d436      	bmi.n	8016c4a <SDMMC_CmdWriteMultiBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8016bdc:	0390      	lsls	r0, r2, #14
 8016bde:	d431      	bmi.n	8016c44 <SDMMC_CmdWriteMultiBlock+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8016be0:	03d1      	lsls	r1, r2, #15
 8016be2:	d444      	bmi.n	8016c6e <SDMMC_CmdWriteMultiBlock+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8016be4:	0414      	lsls	r4, r2, #16
 8016be6:	d43f      	bmi.n	8016c68 <SDMMC_CmdWriteMultiBlock+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8016be8:	0450      	lsls	r0, r2, #17
 8016bea:	d43a      	bmi.n	8016c62 <SDMMC_CmdWriteMultiBlock+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8016bec:	0491      	lsls	r1, r2, #18
 8016bee:	d435      	bmi.n	8016c5c <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8016bf0:	f012 0f08 	tst.w	r2, #8
 8016bf4:	bf14      	ite	ne
 8016bf6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8016bfa:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8016bfe:	e7bf      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016c00:	2201      	movs	r2, #1
 8016c02:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016c04:	e7bc      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016c06:	2301      	movs	r3, #1
 8016c08:	e7ba      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016c0a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016c0c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016c0e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016c10:	e7b6      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8016c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016c16:	e7b3      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8016c18:	2340      	movs	r3, #64	; 0x40
 8016c1a:	e7b1      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8016c1c:	2380      	movs	r3, #128	; 0x80
 8016c1e:	e7af      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8016c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016c24:	e7ac      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8016c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016c2a:	e7a9      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8016c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016c30:	e7a6      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8016c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016c36:	e7a3      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8016c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016c3c:	e7a0      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8016c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016c42:	e79d      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8016c44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016c48:	e79a      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8016c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016c4e:	e797      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8016c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016c54:	e794      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8016c56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016c5a:	e791      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8016c5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016c60:	e78e      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8016c62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8016c66:	e78b      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8016c68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8016c6c:	e788      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8016c6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016c72:	e785      	b.n	8016b80 <SDMMC_CmdWriteMultiBlock+0x40>
 8016c74:	2400737c 	.word	0x2400737c
 8016c78:	10624dd3 	.word	0x10624dd3
 8016c7c:	fffee0c0 	.word	0xfffee0c0
 8016c80:	00200045 	.word	0x00200045
 8016c84:	002000c5 	.word	0x002000c5
 8016c88:	fdffe008 	.word	0xfdffe008

08016c8c <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016c8c:	4b7d      	ldr	r3, [pc, #500]	; (8016e84 <SDMMC_CmdStopTransfer+0x1f8>)
 8016c8e:	497e      	ldr	r1, [pc, #504]	; (8016e88 <SDMMC_CmdStopTransfer+0x1fc>)
 8016c90:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016c92:	4b7e      	ldr	r3, [pc, #504]	; (8016e8c <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016c94:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8016c98:	68c1      	ldr	r1, [r0, #12]
 8016c9a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016c9e:	0a52      	lsrs	r2, r2, #9
{
 8016ca0:	b430      	push	{r4, r5}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8016ca2:	60c1      	str	r1, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8016ca4:	2400      	movs	r4, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8016ca6:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016ca8:	4d79      	ldr	r5, [pc, #484]	; (8016e90 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8016caa:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016cae:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8016cb2:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016cb4:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 8016cb8:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016cba:	68c4      	ldr	r4, [r0, #12]
 8016cbc:	4023      	ands	r3, r4
 8016cbe:	4319      	orrs	r1, r3
 8016cc0:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8016cc2:	b14a      	cbz	r2, 8016cd8 <SDMMC_CmdStopTransfer+0x4c>
 8016cc4:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016cc6:	4973      	ldr	r1, [pc, #460]	; (8016e94 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
 8016cc8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8016cca:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016ccc:	420a      	tst	r2, r1
 8016cce:	d001      	beq.n	8016cd4 <SDMMC_CmdStopTransfer+0x48>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016cd0:	0492      	lsls	r2, r2, #18
 8016cd2:	d50a      	bpl.n	8016cea <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8016cd4:	1c5c      	adds	r4, r3, #1
 8016cd6:	d1f7      	bne.n	8016cc8 <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016cd8:	68c2      	ldr	r2, [r0, #12]
 8016cda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016cde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016ce2:	60c2      	str	r2, [r0, #12]
}
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	bc30      	pop	{r4, r5}
 8016ce8:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016cea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016cec:	075b      	lsls	r3, r3, #29
 8016cee:	d454      	bmi.n	8016d9a <SDMMC_CmdStopTransfer+0x10e>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016cf0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016cf2:	f013 0301 	ands.w	r3, r3, #1
 8016cf6:	d13c      	bne.n	8016d72 <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016cf8:	4a67      	ldr	r2, [pc, #412]	; (8016e98 <SDMMC_CmdStopTransfer+0x20c>)
 8016cfa:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8016cfc:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016cfe:	b2d2      	uxtb	r2, r2
 8016d00:	2a0c      	cmp	r2, #12
 8016d02:	d144      	bne.n	8016d8e <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
 8016d04:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8016d06:	4965      	ldr	r1, [pc, #404]	; (8016e9c <SDMMC_CmdStopTransfer+0x210>)
 8016d08:	4011      	ands	r1, r2
 8016d0a:	2900      	cmp	r1, #0
 8016d0c:	d038      	beq.n	8016d80 <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8016d0e:	2a00      	cmp	r2, #0
 8016d10:	db36      	blt.n	8016d80 <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8016d12:	0055      	lsls	r5, r2, #1
 8016d14:	d448      	bmi.n	8016da8 <SDMMC_CmdStopTransfer+0x11c>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8016d16:	0094      	lsls	r4, r2, #2
 8016d18:	d44c      	bmi.n	8016db4 <SDMMC_CmdStopTransfer+0x128>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8016d1a:	00d1      	lsls	r1, r2, #3
 8016d1c:	d450      	bmi.n	8016dc0 <SDMMC_CmdStopTransfer+0x134>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8016d1e:	0113      	lsls	r3, r2, #4
 8016d20:	d455      	bmi.n	8016dce <SDMMC_CmdStopTransfer+0x142>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8016d22:	0155      	lsls	r5, r2, #5
 8016d24:	d45a      	bmi.n	8016ddc <SDMMC_CmdStopTransfer+0x150>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8016d26:	01d4      	lsls	r4, r2, #7
 8016d28:	d466      	bmi.n	8016df8 <SDMMC_CmdStopTransfer+0x16c>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8016d2a:	0211      	lsls	r1, r2, #8
 8016d2c:	d45d      	bmi.n	8016dea <SDMMC_CmdStopTransfer+0x15e>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8016d2e:	0253      	lsls	r3, r2, #9
 8016d30:	d470      	bmi.n	8016e14 <SDMMC_CmdStopTransfer+0x188>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8016d32:	0295      	lsls	r5, r2, #10
 8016d34:	d467      	bmi.n	8016e06 <SDMMC_CmdStopTransfer+0x17a>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8016d36:	02d4      	lsls	r4, r2, #11
 8016d38:	f100 8081 	bmi.w	8016e3e <SDMMC_CmdStopTransfer+0x1b2>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8016d3c:	0351      	lsls	r1, r2, #13
 8016d3e:	d477      	bmi.n	8016e30 <SDMMC_CmdStopTransfer+0x1a4>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8016d40:	0393      	lsls	r3, r2, #14
 8016d42:	d46e      	bmi.n	8016e22 <SDMMC_CmdStopTransfer+0x196>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8016d44:	03d5      	lsls	r5, r2, #15
 8016d46:	f100 8096 	bmi.w	8016e76 <SDMMC_CmdStopTransfer+0x1ea>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8016d4a:	0414      	lsls	r4, r2, #16
 8016d4c:	f100 8085 	bmi.w	8016e5a <SDMMC_CmdStopTransfer+0x1ce>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8016d50:	0451      	lsls	r1, r2, #17
 8016d52:	d47b      	bmi.n	8016e4c <SDMMC_CmdStopTransfer+0x1c0>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8016d54:	0493      	lsls	r3, r2, #18
 8016d56:	f100 8087 	bmi.w	8016e68 <SDMMC_CmdStopTransfer+0x1dc>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8016d5a:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016d5e:	68c2      	ldr	r2, [r0, #12]
 8016d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8016d64:	bf14      	ite	ne
 8016d66:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8016d6a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016d6e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016d70:	e7b8      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016d72:	2201      	movs	r2, #1
 8016d74:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016d76:	68c2      	ldr	r2, [r0, #12]
 8016d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016d7c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016d7e:	e7b1      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016d80:	68c2      	ldr	r2, [r0, #12]
 8016d82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
}
 8016d86:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016d88:	60c2      	str	r2, [r0, #12]
}
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016d8e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016d90:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016d96:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016d98:	e7a4      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016d9a:	2304      	movs	r3, #4
 8016d9c:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016d9e:	68c2      	ldr	r2, [r0, #12]
 8016da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016da4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016da6:	e79d      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016da8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8016daa:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016db0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016db2:	e797      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016db4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8016db6:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016dbc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016dbe:	e791      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016dc0:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8016dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016dca:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016dcc:	e78a      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016dce:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8016dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016dd8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016dda:	e783      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016ddc:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8016dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016de6:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016de8:	e77c      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016dea:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 8016dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016df4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016df6:	e775      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016df8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8016dfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016dfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016e02:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016e04:	e76e      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e06:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8016e08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016e10:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016e12:	e767      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e14:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 8016e16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016e1e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016e20:	e760      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e22:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8016e24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016e2c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016e2e:	e759      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e30:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8016e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016e3a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016e3c:	e752      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e3e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
 8016e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016e48:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016e4a:	e74b      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e4c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8016e4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016e56:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016e58:	e744      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e5a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8016e5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016e64:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016e66:	e73d      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e68:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
 8016e6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016e72:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016e74:	e736      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e76:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8016e78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016e80:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016e82:	e72f      	b.n	8016ce4 <SDMMC_CmdStopTransfer+0x58>
 8016e84:	2400737c 	.word	0x2400737c
 8016e88:	10624dd3 	.word	0x10624dd3
 8016e8c:	fffee0c0 	.word	0xfffee0c0
 8016e90:	05f5e100 	.word	0x05f5e100
 8016e94:	00200045 	.word	0x00200045
 8016e98:	002000c5 	.word	0x002000c5
 8016e9c:	fdffe008 	.word	0xfdffe008

08016ea0 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016ea0:	4b4c      	ldr	r3, [pc, #304]	; (8016fd4 <SDMMC_CmdSelDesel+0x134>)
 8016ea2:	494d      	ldr	r1, [pc, #308]	; (8016fd8 <SDMMC_CmdSelDesel+0x138>)
 8016ea4:	681b      	ldr	r3, [r3, #0]
{
 8016ea6:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016ea8:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016eac:	4c4b      	ldr	r4, [pc, #300]	; (8016fdc <SDMMC_CmdSelDesel+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8016eae:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016eb0:	f241 1107 	movw	r1, #4359	; 0x1107
 8016eb4:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016eb6:	0a5a      	lsrs	r2, r3, #9
 8016eb8:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016ebc:	402c      	ands	r4, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016ebe:	fb03 f202 	mul.w	r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016ec2:	4321      	orrs	r1, r4
 8016ec4:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8016ec6:	b14a      	cbz	r2, 8016edc <SDMMC_CmdSelDesel+0x3c>
 8016ec8:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016eca:	4945      	ldr	r1, [pc, #276]	; (8016fe0 <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
 8016ecc:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8016ece:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016ed0:	420a      	tst	r2, r1
 8016ed2:	d001      	beq.n	8016ed8 <SDMMC_CmdSelDesel+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016ed4:	0492      	lsls	r2, r2, #18
 8016ed6:	d506      	bpl.n	8016ee6 <SDMMC_CmdSelDesel+0x46>
    if (count-- == 0U)
 8016ed8:	1c5c      	adds	r4, r3, #1
 8016eda:	d1f7      	bne.n	8016ecc <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8016edc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	bc30      	pop	{r4, r5}
 8016ee4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016ee6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016ee8:	075b      	lsls	r3, r3, #29
 8016eea:	d43d      	bmi.n	8016f68 <SDMMC_CmdSelDesel+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016eec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016eee:	f013 0301 	ands.w	r3, r3, #1
 8016ef2:	d134      	bne.n	8016f5e <SDMMC_CmdSelDesel+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016ef4:	4b3b      	ldr	r3, [pc, #236]	; (8016fe4 <SDMMC_CmdSelDesel+0x144>)
 8016ef6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8016ef8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016efa:	b2db      	uxtb	r3, r3
 8016efc:	2b07      	cmp	r3, #7
 8016efe:	d131      	bne.n	8016f64 <SDMMC_CmdSelDesel+0xc4>
  return (*(__IO uint32_t *) tmp);
 8016f00:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8016f02:	4b39      	ldr	r3, [pc, #228]	; (8016fe8 <SDMMC_CmdSelDesel+0x148>)
 8016f04:	4013      	ands	r3, r2
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d0ea      	beq.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8016f0a:	2a00      	cmp	r2, #0
 8016f0c:	db30      	blt.n	8016f70 <SDMMC_CmdSelDesel+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8016f0e:	0055      	lsls	r5, r2, #1
 8016f10:	d431      	bmi.n	8016f76 <SDMMC_CmdSelDesel+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8016f12:	0094      	lsls	r4, r2, #2
 8016f14:	d431      	bmi.n	8016f7a <SDMMC_CmdSelDesel+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8016f16:	00d0      	lsls	r0, r2, #3
 8016f18:	d431      	bmi.n	8016f7e <SDMMC_CmdSelDesel+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8016f1a:	0111      	lsls	r1, r2, #4
 8016f1c:	d432      	bmi.n	8016f84 <SDMMC_CmdSelDesel+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8016f1e:	0155      	lsls	r5, r2, #5
 8016f20:	d433      	bmi.n	8016f8a <SDMMC_CmdSelDesel+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8016f22:	01d4      	lsls	r4, r2, #7
 8016f24:	d434      	bmi.n	8016f90 <SDMMC_CmdSelDesel+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8016f26:	0210      	lsls	r0, r2, #8
 8016f28:	d435      	bmi.n	8016f96 <SDMMC_CmdSelDesel+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8016f2a:	0251      	lsls	r1, r2, #9
 8016f2c:	d436      	bmi.n	8016f9c <SDMMC_CmdSelDesel+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8016f2e:	0295      	lsls	r5, r2, #10
 8016f30:	d440      	bmi.n	8016fb4 <SDMMC_CmdSelDesel+0x114>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8016f32:	02d4      	lsls	r4, r2, #11
 8016f34:	d43b      	bmi.n	8016fae <SDMMC_CmdSelDesel+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8016f36:	0350      	lsls	r0, r2, #13
 8016f38:	d436      	bmi.n	8016fa8 <SDMMC_CmdSelDesel+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8016f3a:	0391      	lsls	r1, r2, #14
 8016f3c:	d431      	bmi.n	8016fa2 <SDMMC_CmdSelDesel+0x102>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8016f3e:	03d5      	lsls	r5, r2, #15
 8016f40:	d444      	bmi.n	8016fcc <SDMMC_CmdSelDesel+0x12c>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8016f42:	0414      	lsls	r4, r2, #16
 8016f44:	d43f      	bmi.n	8016fc6 <SDMMC_CmdSelDesel+0x126>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8016f46:	0450      	lsls	r0, r2, #17
 8016f48:	d43a      	bmi.n	8016fc0 <SDMMC_CmdSelDesel+0x120>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8016f4a:	0491      	lsls	r1, r2, #18
 8016f4c:	d435      	bmi.n	8016fba <SDMMC_CmdSelDesel+0x11a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8016f4e:	f012 0f08 	tst.w	r2, #8
 8016f52:	bf14      	ite	ne
 8016f54:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8016f58:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8016f5c:	e7c0      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016f5e:	2201      	movs	r2, #1
 8016f60:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016f62:	e7bd      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016f64:	2301      	movs	r3, #1
 8016f66:	e7bb      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016f68:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016f6a:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016f6c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016f6e:	e7b7      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8016f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016f74:	e7b4      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8016f76:	2340      	movs	r3, #64	; 0x40
 8016f78:	e7b2      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8016f7a:	2380      	movs	r3, #128	; 0x80
 8016f7c:	e7b0      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8016f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016f82:	e7ad      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8016f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016f88:	e7aa      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8016f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f8e:	e7a7      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8016f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016f94:	e7a4      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8016f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016f9a:	e7a1      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8016f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016fa0:	e79e      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8016fa2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016fa6:	e79b      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8016fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016fac:	e798      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 8016fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016fb2:	e795      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8016fb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016fb8:	e792      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8016fba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016fbe:	e78f      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8016fc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8016fc4:	e78c      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8016fc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8016fca:	e789      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8016fcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016fd0:	e786      	b.n	8016ee0 <SDMMC_CmdSelDesel+0x40>
 8016fd2:	bf00      	nop
 8016fd4:	2400737c 	.word	0x2400737c
 8016fd8:	10624dd3 	.word	0x10624dd3
 8016fdc:	fffee0c0 	.word	0xfffee0c0
 8016fe0:	00200045 	.word	0x00200045
 8016fe4:	002000c5 	.word	0x002000c5
 8016fe8:	fdffe008 	.word	0xfdffe008

08016fec <SDMMC_CmdGoIdleState>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016fec:	4b11      	ldr	r3, [pc, #68]	; (8017034 <SDMMC_CmdGoIdleState+0x48>)
{
 8016fee:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016ff0:	4a11      	ldr	r2, [pc, #68]	; (8017038 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016ff2:	681b      	ldr	r3, [r3, #0]
{
 8016ff4:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016ff6:	4c11      	ldr	r4, [pc, #68]	; (801703c <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 8016ff8:	2500      	movs	r5, #0
 8016ffa:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016ffc:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017000:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017002:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017006:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017008:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801700a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801700e:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017012:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017014:	e002      	b.n	801701c <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8017016:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8017018:	0612      	lsls	r2, r2, #24
 801701a:	d405      	bmi.n	8017028 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 801701c:	3b01      	subs	r3, #1
 801701e:	d2fa      	bcs.n	8017016 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8017020:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8017024:	bc30      	pop	{r4, r5}
 8017026:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8017028:	4b05      	ldr	r3, [pc, #20]	; (8017040 <SDMMC_CmdGoIdleState+0x54>)
  return SDMMC_ERROR_NONE;
 801702a:	2000      	movs	r0, #0
}
 801702c:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801702e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8017030:	4770      	bx	lr
 8017032:	bf00      	nop
 8017034:	2400737c 	.word	0x2400737c
 8017038:	fffee0c0 	.word	0xfffee0c0
 801703c:	10624dd3 	.word	0x10624dd3
 8017040:	002000c5 	.word	0x002000c5

08017044 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017044:	4a1c      	ldr	r2, [pc, #112]	; (80170b8 <SDMMC_CmdOperCond+0x74>)
{
 8017046:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8017048:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801704c:	481b      	ldr	r0, [pc, #108]	; (80170bc <SDMMC_CmdOperCond+0x78>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801704e:	6812      	ldr	r2, [r2, #0]
{
 8017050:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017052:	4c1b      	ldr	r4, [pc, #108]	; (80170c0 <SDMMC_CmdOperCond+0x7c>)
  SDMMCx->ARG = Command->Argument;
 8017054:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017056:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801705a:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801705e:	68cc      	ldr	r4, [r1, #12]
 8017060:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017062:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017064:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017066:	f241 3088 	movw	r0, #5000	; 0x1388
 801706a:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801706e:	60cb      	str	r3, [r1, #12]

  do
  {
    if (count-- == 0U)
 8017070:	b14a      	cbz	r2, 8017086 <SDMMC_CmdOperCond+0x42>
 8017072:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8017074:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8017076:	3b01      	subs	r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8017078:	f012 0f45 	tst.w	r2, #69	; 0x45
 801707c:	d001      	beq.n	8017082 <SDMMC_CmdOperCond+0x3e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801707e:	0490      	lsls	r0, r2, #18
 8017080:	d506      	bpl.n	8017090 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 8017082:	1c5c      	adds	r4, r3, #1
 8017084:	d1f6      	bne.n	8017074 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8017086:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 801708a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801708e:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8017090:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8017092:	075a      	lsls	r2, r3, #29
 8017094:	d40c      	bmi.n	80170b0 <SDMMC_CmdOperCond+0x6c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8017096:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8017098:	f010 0001 	ands.w	r0, r0, #1
 801709c:	d105      	bne.n	80170aa <SDMMC_CmdOperCond+0x66>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801709e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80170a0:	065b      	lsls	r3, r3, #25
 80170a2:	d5f2      	bpl.n	801708a <SDMMC_CmdOperCond+0x46>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80170a4:	2340      	movs	r3, #64	; 0x40
 80170a6:	638b      	str	r3, [r1, #56]	; 0x38
 80170a8:	e7ef      	b.n	801708a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80170aa:	2301      	movs	r3, #1
 80170ac:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80170ae:	e7ec      	b.n	801708a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80170b0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80170b2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80170b4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80170b6:	e7e8      	b.n	801708a <SDMMC_CmdOperCond+0x46>
 80170b8:	2400737c 	.word	0x2400737c
 80170bc:	fffee0c0 	.word	0xfffee0c0
 80170c0:	10624dd3 	.word	0x10624dd3

080170c4 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80170c4:	4a4c      	ldr	r2, [pc, #304]	; (80171f8 <SDMMC_CmdAppCommand+0x134>)
 80170c6:	4b4d      	ldr	r3, [pc, #308]	; (80171fc <SDMMC_CmdAppCommand+0x138>)
 80170c8:	6812      	ldr	r2, [r2, #0]
{
 80170ca:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80170cc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80170d0:	4c4b      	ldr	r4, [pc, #300]	; (8017200 <SDMMC_CmdAppCommand+0x13c>)
  SDMMCx->ARG = Command->Argument;
 80170d2:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80170d4:	f241 1337 	movw	r3, #4407	; 0x1137
 80170d8:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80170da:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80170dc:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80170de:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80170e2:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80170e4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80170e8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80170ea:	b14a      	cbz	r2, 8017100 <SDMMC_CmdAppCommand+0x3c>
 80170ec:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80170ee:	4945      	ldr	r1, [pc, #276]	; (8017204 <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
 80170f0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80170f2:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80170f4:	420a      	tst	r2, r1
 80170f6:	d001      	beq.n	80170fc <SDMMC_CmdAppCommand+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80170f8:	0492      	lsls	r2, r2, #18
 80170fa:	d507      	bpl.n	801710c <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
 80170fc:	1c5c      	adds	r4, r3, #1
 80170fe:	d1f7      	bne.n	80170f0 <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8017100:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8017104:	4618      	mov	r0, r3
 8017106:	f85d 4b04 	ldr.w	r4, [sp], #4
 801710a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801710c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801710e:	075c      	lsls	r4, r3, #29
 8017110:	d43d      	bmi.n	801718e <SDMMC_CmdAppCommand+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8017112:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017114:	f013 0301 	ands.w	r3, r3, #1
 8017118:	d134      	bne.n	8017184 <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801711a:	4b3b      	ldr	r3, [pc, #236]	; (8017208 <SDMMC_CmdAppCommand+0x144>)
 801711c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801711e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8017120:	b2db      	uxtb	r3, r3
 8017122:	2b37      	cmp	r3, #55	; 0x37
 8017124:	d131      	bne.n	801718a <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
 8017126:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8017128:	4b38      	ldr	r3, [pc, #224]	; (801720c <SDMMC_CmdAppCommand+0x148>)
 801712a:	4013      	ands	r3, r2
 801712c:	2b00      	cmp	r3, #0
 801712e:	d0e9      	beq.n	8017104 <SDMMC_CmdAppCommand+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8017130:	2a00      	cmp	r2, #0
 8017132:	db30      	blt.n	8017196 <SDMMC_CmdAppCommand+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8017134:	0051      	lsls	r1, r2, #1
 8017136:	d431      	bmi.n	801719c <SDMMC_CmdAppCommand+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8017138:	0094      	lsls	r4, r2, #2
 801713a:	d431      	bmi.n	80171a0 <SDMMC_CmdAppCommand+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801713c:	00d0      	lsls	r0, r2, #3
 801713e:	d431      	bmi.n	80171a4 <SDMMC_CmdAppCommand+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8017140:	0111      	lsls	r1, r2, #4
 8017142:	d432      	bmi.n	80171aa <SDMMC_CmdAppCommand+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8017144:	0154      	lsls	r4, r2, #5
 8017146:	d433      	bmi.n	80171b0 <SDMMC_CmdAppCommand+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8017148:	01d0      	lsls	r0, r2, #7
 801714a:	d434      	bmi.n	80171b6 <SDMMC_CmdAppCommand+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801714c:	0211      	lsls	r1, r2, #8
 801714e:	d435      	bmi.n	80171bc <SDMMC_CmdAppCommand+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8017150:	0254      	lsls	r4, r2, #9
 8017152:	d436      	bmi.n	80171c2 <SDMMC_CmdAppCommand+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8017154:	0290      	lsls	r0, r2, #10
 8017156:	d440      	bmi.n	80171da <SDMMC_CmdAppCommand+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8017158:	02d1      	lsls	r1, r2, #11
 801715a:	d43b      	bmi.n	80171d4 <SDMMC_CmdAppCommand+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801715c:	0354      	lsls	r4, r2, #13
 801715e:	d436      	bmi.n	80171ce <SDMMC_CmdAppCommand+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8017160:	0390      	lsls	r0, r2, #14
 8017162:	d431      	bmi.n	80171c8 <SDMMC_CmdAppCommand+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8017164:	03d1      	lsls	r1, r2, #15
 8017166:	d444      	bmi.n	80171f2 <SDMMC_CmdAppCommand+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8017168:	0414      	lsls	r4, r2, #16
 801716a:	d43f      	bmi.n	80171ec <SDMMC_CmdAppCommand+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801716c:	0450      	lsls	r0, r2, #17
 801716e:	d43a      	bmi.n	80171e6 <SDMMC_CmdAppCommand+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8017170:	0491      	lsls	r1, r2, #18
 8017172:	d435      	bmi.n	80171e0 <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8017174:	f012 0f08 	tst.w	r2, #8
 8017178:	bf14      	ite	ne
 801717a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 801717e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8017182:	e7bf      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8017184:	2201      	movs	r2, #1
 8017186:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017188:	e7bc      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801718a:	2301      	movs	r3, #1
 801718c:	e7ba      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801718e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017190:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017192:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017194:	e7b6      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8017196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801719a:	e7b3      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801719c:	2340      	movs	r3, #64	; 0x40
 801719e:	e7b1      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80171a0:	2380      	movs	r3, #128	; 0x80
 80171a2:	e7af      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80171a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80171a8:	e7ac      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80171aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80171ae:	e7a9      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80171b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171b4:	e7a6      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80171b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80171ba:	e7a3      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80171bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80171c0:	e7a0      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80171c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80171c6:	e79d      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80171c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80171cc:	e79a      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80171ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80171d2:	e797      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 80171d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80171d8:	e794      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80171da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80171de:	e791      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80171e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80171e4:	e78e      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80171e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80171ea:	e78b      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80171ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80171f0:	e788      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80171f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80171f6:	e785      	b.n	8017104 <SDMMC_CmdAppCommand+0x40>
 80171f8:	2400737c 	.word	0x2400737c
 80171fc:	10624dd3 	.word	0x10624dd3
 8017200:	fffee0c0 	.word	0xfffee0c0
 8017204:	00200045 	.word	0x00200045
 8017208:	002000c5 	.word	0x002000c5
 801720c:	fdffe008 	.word	0xfdffe008

08017210 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017210:	4a18      	ldr	r2, [pc, #96]	; (8017274 <SDMMC_CmdAppOperCommand+0x64>)
 8017212:	4b19      	ldr	r3, [pc, #100]	; (8017278 <SDMMC_CmdAppOperCommand+0x68>)
 8017214:	6812      	ldr	r2, [r2, #0]
{
 8017216:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017218:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801721c:	4c17      	ldr	r4, [pc, #92]	; (801727c <SDMMC_CmdAppOperCommand+0x6c>)
  SDMMCx->ARG = Command->Argument;
 801721e:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017220:	f241 1329 	movw	r3, #4393	; 0x1129
 8017224:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017226:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017228:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801722a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801722e:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017230:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017234:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8017236:	b14a      	cbz	r2, 801724c <SDMMC_CmdAppOperCommand+0x3c>
 8017238:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 801723a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 801723c:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801723e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8017242:	d001      	beq.n	8017248 <SDMMC_CmdAppOperCommand+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8017244:	0492      	lsls	r2, r2, #18
 8017246:	d507      	bpl.n	8017258 <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
 8017248:	1c59      	adds	r1, r3, #1
 801724a:	d1f6      	bne.n	801723a <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 801724c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8017250:	4618      	mov	r0, r3
 8017252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017256:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8017258:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801725a:	f013 0304 	ands.w	r3, r3, #4
 801725e:	d105      	bne.n	801726c <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8017260:	4a07      	ldr	r2, [pc, #28]	; (8017280 <SDMMC_CmdAppOperCommand+0x70>)
}
 8017262:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8017266:	6382      	str	r2, [r0, #56]	; 0x38
}
 8017268:	4618      	mov	r0, r3
 801726a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801726c:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801726e:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017270:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017272:	e7ed      	b.n	8017250 <SDMMC_CmdAppOperCommand+0x40>
 8017274:	2400737c 	.word	0x2400737c
 8017278:	10624dd3 	.word	0x10624dd3
 801727c:	fffee0c0 	.word	0xfffee0c0
 8017280:	002000c5 	.word	0x002000c5

08017284 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017284:	4a4c      	ldr	r2, [pc, #304]	; (80173b8 <SDMMC_CmdBusWidth+0x134>)
 8017286:	4b4d      	ldr	r3, [pc, #308]	; (80173bc <SDMMC_CmdBusWidth+0x138>)
 8017288:	6812      	ldr	r2, [r2, #0]
{
 801728a:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801728c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017290:	4c4b      	ldr	r4, [pc, #300]	; (80173c0 <SDMMC_CmdBusWidth+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8017292:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017294:	f241 1306 	movw	r3, #4358	; 0x1106
 8017298:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801729a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801729c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801729e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80172a2:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80172a4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80172a8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80172aa:	b14a      	cbz	r2, 80172c0 <SDMMC_CmdBusWidth+0x3c>
 80172ac:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80172ae:	4945      	ldr	r1, [pc, #276]	; (80173c4 <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
 80172b0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80172b2:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80172b4:	420a      	tst	r2, r1
 80172b6:	d001      	beq.n	80172bc <SDMMC_CmdBusWidth+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80172b8:	0492      	lsls	r2, r2, #18
 80172ba:	d507      	bpl.n	80172cc <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
 80172bc:	1c5c      	adds	r4, r3, #1
 80172be:	d1f7      	bne.n	80172b0 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80172c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80172c4:	4618      	mov	r0, r3
 80172c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172ca:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80172cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80172ce:	075c      	lsls	r4, r3, #29
 80172d0:	d43d      	bmi.n	801734e <SDMMC_CmdBusWidth+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80172d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80172d4:	f013 0301 	ands.w	r3, r3, #1
 80172d8:	d134      	bne.n	8017344 <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80172da:	4b3b      	ldr	r3, [pc, #236]	; (80173c8 <SDMMC_CmdBusWidth+0x144>)
 80172dc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80172de:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80172e0:	b2db      	uxtb	r3, r3
 80172e2:	2b06      	cmp	r3, #6
 80172e4:	d131      	bne.n	801734a <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
 80172e6:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80172e8:	4b38      	ldr	r3, [pc, #224]	; (80173cc <SDMMC_CmdBusWidth+0x148>)
 80172ea:	4013      	ands	r3, r2
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d0e9      	beq.n	80172c4 <SDMMC_CmdBusWidth+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80172f0:	2a00      	cmp	r2, #0
 80172f2:	db30      	blt.n	8017356 <SDMMC_CmdBusWidth+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80172f4:	0051      	lsls	r1, r2, #1
 80172f6:	d431      	bmi.n	801735c <SDMMC_CmdBusWidth+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80172f8:	0094      	lsls	r4, r2, #2
 80172fa:	d431      	bmi.n	8017360 <SDMMC_CmdBusWidth+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80172fc:	00d0      	lsls	r0, r2, #3
 80172fe:	d431      	bmi.n	8017364 <SDMMC_CmdBusWidth+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8017300:	0111      	lsls	r1, r2, #4
 8017302:	d432      	bmi.n	801736a <SDMMC_CmdBusWidth+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8017304:	0154      	lsls	r4, r2, #5
 8017306:	d433      	bmi.n	8017370 <SDMMC_CmdBusWidth+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8017308:	01d0      	lsls	r0, r2, #7
 801730a:	d434      	bmi.n	8017376 <SDMMC_CmdBusWidth+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801730c:	0211      	lsls	r1, r2, #8
 801730e:	d435      	bmi.n	801737c <SDMMC_CmdBusWidth+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8017310:	0254      	lsls	r4, r2, #9
 8017312:	d436      	bmi.n	8017382 <SDMMC_CmdBusWidth+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8017314:	0290      	lsls	r0, r2, #10
 8017316:	d440      	bmi.n	801739a <SDMMC_CmdBusWidth+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8017318:	02d1      	lsls	r1, r2, #11
 801731a:	d43b      	bmi.n	8017394 <SDMMC_CmdBusWidth+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801731c:	0354      	lsls	r4, r2, #13
 801731e:	d436      	bmi.n	801738e <SDMMC_CmdBusWidth+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8017320:	0390      	lsls	r0, r2, #14
 8017322:	d431      	bmi.n	8017388 <SDMMC_CmdBusWidth+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8017324:	03d1      	lsls	r1, r2, #15
 8017326:	d444      	bmi.n	80173b2 <SDMMC_CmdBusWidth+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8017328:	0414      	lsls	r4, r2, #16
 801732a:	d43f      	bmi.n	80173ac <SDMMC_CmdBusWidth+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801732c:	0450      	lsls	r0, r2, #17
 801732e:	d43a      	bmi.n	80173a6 <SDMMC_CmdBusWidth+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8017330:	0491      	lsls	r1, r2, #18
 8017332:	d435      	bmi.n	80173a0 <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8017334:	f012 0f08 	tst.w	r2, #8
 8017338:	bf14      	ite	ne
 801733a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 801733e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8017342:	e7bf      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8017344:	2201      	movs	r2, #1
 8017346:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017348:	e7bc      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801734a:	2301      	movs	r3, #1
 801734c:	e7ba      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801734e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017350:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017352:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017354:	e7b6      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8017356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801735a:	e7b3      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801735c:	2340      	movs	r3, #64	; 0x40
 801735e:	e7b1      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8017360:	2380      	movs	r3, #128	; 0x80
 8017362:	e7af      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8017364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017368:	e7ac      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801736a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801736e:	e7a9      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8017370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017374:	e7a6      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8017376:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801737a:	e7a3      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 801737c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017380:	e7a0      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8017382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017386:	e79d      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8017388:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801738c:	e79a      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801738e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8017392:	e797      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 8017394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017398:	e794      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801739a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801739e:	e791      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80173a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80173a4:	e78e      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80173a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80173aa:	e78b      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80173ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80173b0:	e788      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80173b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80173b6:	e785      	b.n	80172c4 <SDMMC_CmdBusWidth+0x40>
 80173b8:	2400737c 	.word	0x2400737c
 80173bc:	10624dd3 	.word	0x10624dd3
 80173c0:	fffee0c0 	.word	0xfffee0c0
 80173c4:	00200045 	.word	0x00200045
 80173c8:	002000c5 	.word	0x002000c5
 80173cc:	fdffe008 	.word	0xfdffe008

080173d0 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80173d0:	4a4d      	ldr	r2, [pc, #308]	; (8017508 <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
 80173d2:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80173d4:	494d      	ldr	r1, [pc, #308]	; (801750c <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80173d6:	6812      	ldr	r2, [r2, #0]
{
 80173d8:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80173da:	4c4d      	ldr	r4, [pc, #308]	; (8017510 <SDMMC_CmdSendSCR+0x140>)
  SDMMCx->ARG = Command->Argument;
 80173dc:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80173de:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80173e2:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80173e6:	68c4      	ldr	r4, [r0, #12]
 80173e8:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80173ea:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80173ec:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80173ee:	f241 3188 	movw	r1, #5000	; 0x1388
 80173f2:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80173f6:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80173f8:	b14a      	cbz	r2, 801740e <SDMMC_CmdSendSCR+0x3e>
 80173fa:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80173fc:	4945      	ldr	r1, [pc, #276]	; (8017514 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 80173fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8017400:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8017402:	420a      	tst	r2, r1
 8017404:	d001      	beq.n	801740a <SDMMC_CmdSendSCR+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8017406:	0492      	lsls	r2, r2, #18
 8017408:	d507      	bpl.n	801741a <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 801740a:	1c5c      	adds	r4, r3, #1
 801740c:	d1f7      	bne.n	80173fe <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 801740e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8017412:	4618      	mov	r0, r3
 8017414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017418:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801741a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801741c:	075c      	lsls	r4, r3, #29
 801741e:	d43d      	bmi.n	801749c <SDMMC_CmdSendSCR+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8017420:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017422:	f013 0301 	ands.w	r3, r3, #1
 8017426:	d134      	bne.n	8017492 <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8017428:	4b3b      	ldr	r3, [pc, #236]	; (8017518 <SDMMC_CmdSendSCR+0x148>)
 801742a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801742c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801742e:	b2db      	uxtb	r3, r3
 8017430:	2b33      	cmp	r3, #51	; 0x33
 8017432:	d131      	bne.n	8017498 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 8017434:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8017436:	4b39      	ldr	r3, [pc, #228]	; (801751c <SDMMC_CmdSendSCR+0x14c>)
 8017438:	4013      	ands	r3, r2
 801743a:	2b00      	cmp	r3, #0
 801743c:	d0e9      	beq.n	8017412 <SDMMC_CmdSendSCR+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801743e:	2a00      	cmp	r2, #0
 8017440:	db30      	blt.n	80174a4 <SDMMC_CmdSendSCR+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8017442:	0051      	lsls	r1, r2, #1
 8017444:	d431      	bmi.n	80174aa <SDMMC_CmdSendSCR+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8017446:	0094      	lsls	r4, r2, #2
 8017448:	d431      	bmi.n	80174ae <SDMMC_CmdSendSCR+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801744a:	00d0      	lsls	r0, r2, #3
 801744c:	d431      	bmi.n	80174b2 <SDMMC_CmdSendSCR+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801744e:	0111      	lsls	r1, r2, #4
 8017450:	d432      	bmi.n	80174b8 <SDMMC_CmdSendSCR+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8017452:	0154      	lsls	r4, r2, #5
 8017454:	d433      	bmi.n	80174be <SDMMC_CmdSendSCR+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8017456:	01d0      	lsls	r0, r2, #7
 8017458:	d434      	bmi.n	80174c4 <SDMMC_CmdSendSCR+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801745a:	0211      	lsls	r1, r2, #8
 801745c:	d435      	bmi.n	80174ca <SDMMC_CmdSendSCR+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801745e:	0254      	lsls	r4, r2, #9
 8017460:	d436      	bmi.n	80174d0 <SDMMC_CmdSendSCR+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8017462:	0290      	lsls	r0, r2, #10
 8017464:	d440      	bmi.n	80174e8 <SDMMC_CmdSendSCR+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8017466:	02d1      	lsls	r1, r2, #11
 8017468:	d43b      	bmi.n	80174e2 <SDMMC_CmdSendSCR+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801746a:	0354      	lsls	r4, r2, #13
 801746c:	d436      	bmi.n	80174dc <SDMMC_CmdSendSCR+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801746e:	0390      	lsls	r0, r2, #14
 8017470:	d431      	bmi.n	80174d6 <SDMMC_CmdSendSCR+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8017472:	03d1      	lsls	r1, r2, #15
 8017474:	d444      	bmi.n	8017500 <SDMMC_CmdSendSCR+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8017476:	0414      	lsls	r4, r2, #16
 8017478:	d43f      	bmi.n	80174fa <SDMMC_CmdSendSCR+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801747a:	0450      	lsls	r0, r2, #17
 801747c:	d43a      	bmi.n	80174f4 <SDMMC_CmdSendSCR+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801747e:	0491      	lsls	r1, r2, #18
 8017480:	d435      	bmi.n	80174ee <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8017482:	f012 0f08 	tst.w	r2, #8
 8017486:	bf14      	ite	ne
 8017488:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 801748c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8017490:	e7bf      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8017492:	2201      	movs	r2, #1
 8017494:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017496:	e7bc      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017498:	2301      	movs	r3, #1
 801749a:	e7ba      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801749c:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801749e:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80174a0:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80174a2:	e7b6      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80174a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80174a8:	e7b3      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80174aa:	2340      	movs	r3, #64	; 0x40
 80174ac:	e7b1      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80174ae:	2380      	movs	r3, #128	; 0x80
 80174b0:	e7af      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80174b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80174b6:	e7ac      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80174b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80174bc:	e7a9      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80174be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80174c2:	e7a6      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80174c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80174c8:	e7a3      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80174ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80174ce:	e7a0      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80174d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80174d4:	e79d      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80174d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80174da:	e79a      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80174dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80174e0:	e797      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 80174e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80174e6:	e794      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80174e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80174ec:	e791      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 80174ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80174f2:	e78e      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80174f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80174f8:	e78b      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80174fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80174fe:	e788      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8017500:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8017504:	e785      	b.n	8017412 <SDMMC_CmdSendSCR+0x42>
 8017506:	bf00      	nop
 8017508:	2400737c 	.word	0x2400737c
 801750c:	fffee0c0 	.word	0xfffee0c0
 8017510:	10624dd3 	.word	0x10624dd3
 8017514:	00200045 	.word	0x00200045
 8017518:	002000c5 	.word	0x002000c5
 801751c:	fdffe008 	.word	0xfdffe008

08017520 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017520:	4a1a      	ldr	r2, [pc, #104]	; (801758c <SDMMC_CmdSendCID+0x6c>)
{
 8017522:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8017524:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017526:	481a      	ldr	r0, [pc, #104]	; (8017590 <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017528:	6812      	ldr	r2, [r2, #0]
{
 801752a:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801752c:	4c19      	ldr	r4, [pc, #100]	; (8017594 <SDMMC_CmdSendCID+0x74>)
  SDMMCx->ARG = Command->Argument;
 801752e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017530:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017534:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017538:	68cc      	ldr	r4, [r1, #12]
 801753a:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801753c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801753e:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017540:	f241 3088 	movw	r0, #5000	; 0x1388
 8017544:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017548:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 801754a:	b14a      	cbz	r2, 8017560 <SDMMC_CmdSendCID+0x40>
 801754c:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 801754e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8017550:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8017552:	f012 0f45 	tst.w	r2, #69	; 0x45
 8017556:	d001      	beq.n	801755c <SDMMC_CmdSendCID+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8017558:	0492      	lsls	r2, r2, #18
 801755a:	d506      	bpl.n	801756a <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 801755c:	1c58      	adds	r0, r3, #1
 801755e:	d1f6      	bne.n	801754e <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8017560:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8017564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017568:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801756a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801756c:	075b      	lsls	r3, r3, #29
 801756e:	d409      	bmi.n	8017584 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8017570:	6b48      	ldr	r0, [r1, #52]	; 0x34
}
 8017572:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8017576:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801757a:	bf14      	ite	ne
 801757c:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801757e:	4b06      	ldreq	r3, [pc, #24]	; (8017598 <SDMMC_CmdSendCID+0x78>)
 8017580:	638b      	str	r3, [r1, #56]	; 0x38
}
 8017582:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017584:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017586:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017588:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801758a:	e7eb      	b.n	8017564 <SDMMC_CmdSendCID+0x44>
 801758c:	2400737c 	.word	0x2400737c
 8017590:	fffee0c0 	.word	0xfffee0c0
 8017594:	10624dd3 	.word	0x10624dd3
 8017598:	002000c5 	.word	0x002000c5

0801759c <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801759c:	4a1b      	ldr	r2, [pc, #108]	; (801760c <SDMMC_CmdSendCSD+0x70>)
{
 801759e:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80175a0:	4b1b      	ldr	r3, [pc, #108]	; (8017610 <SDMMC_CmdSendCSD+0x74>)
 80175a2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80175a4:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80175a8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80175ac:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80175b0:	4818      	ldr	r0, [pc, #96]	; (8017614 <SDMMC_CmdSendCSD+0x78>)
 80175b2:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80175b6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80175b8:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80175ba:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80175be:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80175c0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80175c4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 80175c8:	1e53      	subs	r3, r2, #1
 80175ca:	b14a      	cbz	r2, 80175e0 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 80175cc:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 80175d0:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80175d2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80175d6:	d001      	beq.n	80175dc <SDMMC_CmdSendCSD+0x40>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80175d8:	0492      	lsls	r2, r2, #18
 80175da:	d504      	bpl.n	80175e6 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 80175dc:	1c59      	adds	r1, r3, #1
 80175de:	d1f5      	bne.n	80175cc <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80175e0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80175e4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80175e6:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 80175ea:	075b      	lsls	r3, r3, #29
 80175ec:	d409      	bmi.n	8017602 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80175ee:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 80175f2:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80175f6:	bf14      	ite	ne
 80175f8:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80175fa:	4b07      	ldreq	r3, [pc, #28]	; (8017618 <SDMMC_CmdSendCSD+0x7c>)
 80175fc:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8017600:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017602:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017604:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017606:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801760a:	4770      	bx	lr
 801760c:	2400737c 	.word	0x2400737c
 8017610:	10624dd3 	.word	0x10624dd3
 8017614:	fffee0c0 	.word	0xfffee0c0
 8017618:	002000c5 	.word	0x002000c5

0801761c <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 801761c:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801761e:	4a27      	ldr	r2, [pc, #156]	; (80176bc <SDMMC_CmdSetRelAdd+0xa0>)
{
 8017620:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8017622:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017624:	4c26      	ldr	r4, [pc, #152]	; (80176c0 <SDMMC_CmdSetRelAdd+0xa4>)
 8017626:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017628:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801762a:	401c      	ands	r4, r3
 801762c:	f241 1303 	movw	r3, #4355	; 0x1103
 8017630:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017632:	4c24      	ldr	r4, [pc, #144]	; (80176c4 <SDMMC_CmdSetRelAdd+0xa8>)
 8017634:	fba4 4202 	umull	r4, r2, r4, r2
 8017638:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801763c:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801763e:	0a52      	lsrs	r2, r2, #9
 8017640:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
 8017644:	b14a      	cbz	r2, 801765a <SDMMC_CmdSetRelAdd+0x3e>
 8017646:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 8017648:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 801764a:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801764c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8017650:	d001      	beq.n	8017656 <SDMMC_CmdSetRelAdd+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8017652:	0492      	lsls	r2, r2, #18
 8017654:	d507      	bpl.n	8017666 <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
 8017656:	1c5c      	adds	r4, r3, #1
 8017658:	d1f6      	bne.n	8017648 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 801765a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801765e:	4618      	mov	r0, r3
 8017660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017664:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8017666:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017668:	075c      	lsls	r4, r3, #29
 801766a:	d41c      	bmi.n	80176a6 <SDMMC_CmdSetRelAdd+0x8a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801766c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801766e:	f013 0301 	ands.w	r3, r3, #1
 8017672:	d113      	bne.n	801769c <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
 8017674:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8017676:	b2db      	uxtb	r3, r3
 8017678:	2b03      	cmp	r3, #3
 801767a:	d112      	bne.n	80176a2 <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801767c:	4b12      	ldr	r3, [pc, #72]	; (80176c8 <SDMMC_CmdSetRelAdd+0xac>)
 801767e:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8017680:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8017682:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 8017686:	d015      	beq.n	80176b4 <SDMMC_CmdSetRelAdd+0x98>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8017688:	0451      	lsls	r1, r2, #17
 801768a:	d410      	bmi.n	80176ae <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801768c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8017690:	bf14      	ite	ne
 8017692:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 8017696:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 801769a:	e7e0      	b.n	801765e <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801769c:	2201      	movs	r2, #1
 801769e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80176a0:	e7dd      	b.n	801765e <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80176a2:	2301      	movs	r3, #1
 80176a4:	e7db      	b.n	801765e <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80176a6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80176a8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80176aa:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80176ac:	e7d7      	b.n	801765e <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80176ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80176b2:	e7d4      	b.n	801765e <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80176b4:	0c12      	lsrs	r2, r2, #16
 80176b6:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 80176b8:	e7d1      	b.n	801765e <SDMMC_CmdSetRelAdd+0x42>
 80176ba:	bf00      	nop
 80176bc:	2400737c 	.word	0x2400737c
 80176c0:	fffee0c0 	.word	0xfffee0c0
 80176c4:	10624dd3 	.word	0x10624dd3
 80176c8:	002000c5 	.word	0x002000c5

080176cc <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80176cc:	4a4c      	ldr	r2, [pc, #304]	; (8017800 <SDMMC_CmdSendStatus+0x134>)
 80176ce:	4b4d      	ldr	r3, [pc, #308]	; (8017804 <SDMMC_CmdSendStatus+0x138>)
 80176d0:	6812      	ldr	r2, [r2, #0]
{
 80176d2:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80176d4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80176d8:	4c4b      	ldr	r4, [pc, #300]	; (8017808 <SDMMC_CmdSendStatus+0x13c>)
  SDMMCx->ARG = Command->Argument;
 80176da:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80176dc:	f241 130d 	movw	r3, #4365	; 0x110d
 80176e0:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80176e2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80176e4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80176e6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80176ea:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80176ec:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80176f0:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80176f2:	b14a      	cbz	r2, 8017708 <SDMMC_CmdSendStatus+0x3c>
 80176f4:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80176f6:	4945      	ldr	r1, [pc, #276]	; (801780c <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
 80176f8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80176fa:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80176fc:	420a      	tst	r2, r1
 80176fe:	d001      	beq.n	8017704 <SDMMC_CmdSendStatus+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8017700:	0492      	lsls	r2, r2, #18
 8017702:	d507      	bpl.n	8017714 <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
 8017704:	1c5c      	adds	r4, r3, #1
 8017706:	d1f7      	bne.n	80176f8 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8017708:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801770c:	4618      	mov	r0, r3
 801770e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017712:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8017714:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017716:	075c      	lsls	r4, r3, #29
 8017718:	d43d      	bmi.n	8017796 <SDMMC_CmdSendStatus+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801771a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801771c:	f013 0301 	ands.w	r3, r3, #1
 8017720:	d134      	bne.n	801778c <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8017722:	4b3b      	ldr	r3, [pc, #236]	; (8017810 <SDMMC_CmdSendStatus+0x144>)
 8017724:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8017726:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8017728:	b2db      	uxtb	r3, r3
 801772a:	2b0d      	cmp	r3, #13
 801772c:	d131      	bne.n	8017792 <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
 801772e:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8017730:	4b38      	ldr	r3, [pc, #224]	; (8017814 <SDMMC_CmdSendStatus+0x148>)
 8017732:	4013      	ands	r3, r2
 8017734:	2b00      	cmp	r3, #0
 8017736:	d0e9      	beq.n	801770c <SDMMC_CmdSendStatus+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8017738:	2a00      	cmp	r2, #0
 801773a:	db30      	blt.n	801779e <SDMMC_CmdSendStatus+0xd2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801773c:	0051      	lsls	r1, r2, #1
 801773e:	d431      	bmi.n	80177a4 <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8017740:	0094      	lsls	r4, r2, #2
 8017742:	d431      	bmi.n	80177a8 <SDMMC_CmdSendStatus+0xdc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8017744:	00d0      	lsls	r0, r2, #3
 8017746:	d431      	bmi.n	80177ac <SDMMC_CmdSendStatus+0xe0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8017748:	0111      	lsls	r1, r2, #4
 801774a:	d432      	bmi.n	80177b2 <SDMMC_CmdSendStatus+0xe6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801774c:	0154      	lsls	r4, r2, #5
 801774e:	d433      	bmi.n	80177b8 <SDMMC_CmdSendStatus+0xec>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8017750:	01d0      	lsls	r0, r2, #7
 8017752:	d434      	bmi.n	80177be <SDMMC_CmdSendStatus+0xf2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8017754:	0211      	lsls	r1, r2, #8
 8017756:	d435      	bmi.n	80177c4 <SDMMC_CmdSendStatus+0xf8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8017758:	0254      	lsls	r4, r2, #9
 801775a:	d436      	bmi.n	80177ca <SDMMC_CmdSendStatus+0xfe>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801775c:	0290      	lsls	r0, r2, #10
 801775e:	d440      	bmi.n	80177e2 <SDMMC_CmdSendStatus+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8017760:	02d1      	lsls	r1, r2, #11
 8017762:	d43b      	bmi.n	80177dc <SDMMC_CmdSendStatus+0x110>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8017764:	0354      	lsls	r4, r2, #13
 8017766:	d436      	bmi.n	80177d6 <SDMMC_CmdSendStatus+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8017768:	0390      	lsls	r0, r2, #14
 801776a:	d431      	bmi.n	80177d0 <SDMMC_CmdSendStatus+0x104>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801776c:	03d1      	lsls	r1, r2, #15
 801776e:	d444      	bmi.n	80177fa <SDMMC_CmdSendStatus+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8017770:	0414      	lsls	r4, r2, #16
 8017772:	d43f      	bmi.n	80177f4 <SDMMC_CmdSendStatus+0x128>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8017774:	0450      	lsls	r0, r2, #17
 8017776:	d43a      	bmi.n	80177ee <SDMMC_CmdSendStatus+0x122>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8017778:	0491      	lsls	r1, r2, #18
 801777a:	d435      	bmi.n	80177e8 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801777c:	f012 0f08 	tst.w	r2, #8
 8017780:	bf14      	ite	ne
 8017782:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8017786:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 801778a:	e7bf      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801778c:	2201      	movs	r2, #1
 801778e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017790:	e7bc      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017792:	2301      	movs	r3, #1
 8017794:	e7ba      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017796:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017798:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801779a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801779c:	e7b6      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801779e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80177a2:	e7b3      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80177a4:	2340      	movs	r3, #64	; 0x40
 80177a6:	e7b1      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80177a8:	2380      	movs	r3, #128	; 0x80
 80177aa:	e7af      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80177ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80177b0:	e7ac      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80177b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80177b6:	e7a9      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80177b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80177bc:	e7a6      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80177be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80177c2:	e7a3      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80177c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80177c8:	e7a0      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80177ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80177ce:	e79d      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80177d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80177d4:	e79a      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80177d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80177da:	e797      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 80177dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80177e0:	e794      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80177e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80177e6:	e791      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80177e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80177ec:	e78e      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80177ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80177f2:	e78b      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80177f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80177f8:	e788      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80177fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80177fe:	e785      	b.n	801770c <SDMMC_CmdSendStatus+0x40>
 8017800:	2400737c 	.word	0x2400737c
 8017804:	10624dd3 	.word	0x10624dd3
 8017808:	fffee0c0 	.word	0xfffee0c0
 801780c:	00200045 	.word	0x00200045
 8017810:	002000c5 	.word	0x002000c5
 8017814:	fdffe008 	.word	0xfdffe008

08017818 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017818:	4a4d      	ldr	r2, [pc, #308]	; (8017950 <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
 801781a:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801781c:	494d      	ldr	r1, [pc, #308]	; (8017954 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801781e:	6812      	ldr	r2, [r2, #0]
{
 8017820:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017822:	4c4d      	ldr	r4, [pc, #308]	; (8017958 <SDMMC_CmdStatusRegister+0x140>)
  SDMMCx->ARG = Command->Argument;
 8017824:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017826:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801782a:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801782e:	68c4      	ldr	r4, [r0, #12]
 8017830:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017832:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017834:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017836:	f241 3188 	movw	r1, #5000	; 0x1388
 801783a:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801783e:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8017840:	b14a      	cbz	r2, 8017856 <SDMMC_CmdStatusRegister+0x3e>
 8017842:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8017844:	4945      	ldr	r1, [pc, #276]	; (801795c <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 8017846:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8017848:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801784a:	420a      	tst	r2, r1
 801784c:	d001      	beq.n	8017852 <SDMMC_CmdStatusRegister+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801784e:	0492      	lsls	r2, r2, #18
 8017850:	d507      	bpl.n	8017862 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 8017852:	1c5c      	adds	r4, r3, #1
 8017854:	d1f7      	bne.n	8017846 <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8017856:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801785a:	4618      	mov	r0, r3
 801785c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017860:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8017862:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017864:	075c      	lsls	r4, r3, #29
 8017866:	d43d      	bmi.n	80178e4 <SDMMC_CmdStatusRegister+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8017868:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801786a:	f013 0301 	ands.w	r3, r3, #1
 801786e:	d134      	bne.n	80178da <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8017870:	4b3b      	ldr	r3, [pc, #236]	; (8017960 <SDMMC_CmdStatusRegister+0x148>)
 8017872:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8017874:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8017876:	b2db      	uxtb	r3, r3
 8017878:	2b0d      	cmp	r3, #13
 801787a:	d131      	bne.n	80178e0 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 801787c:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801787e:	4b39      	ldr	r3, [pc, #228]	; (8017964 <SDMMC_CmdStatusRegister+0x14c>)
 8017880:	4013      	ands	r3, r2
 8017882:	2b00      	cmp	r3, #0
 8017884:	d0e9      	beq.n	801785a <SDMMC_CmdStatusRegister+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8017886:	2a00      	cmp	r2, #0
 8017888:	db30      	blt.n	80178ec <SDMMC_CmdStatusRegister+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801788a:	0051      	lsls	r1, r2, #1
 801788c:	d431      	bmi.n	80178f2 <SDMMC_CmdStatusRegister+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801788e:	0094      	lsls	r4, r2, #2
 8017890:	d431      	bmi.n	80178f6 <SDMMC_CmdStatusRegister+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8017892:	00d0      	lsls	r0, r2, #3
 8017894:	d431      	bmi.n	80178fa <SDMMC_CmdStatusRegister+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8017896:	0111      	lsls	r1, r2, #4
 8017898:	d432      	bmi.n	8017900 <SDMMC_CmdStatusRegister+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801789a:	0154      	lsls	r4, r2, #5
 801789c:	d433      	bmi.n	8017906 <SDMMC_CmdStatusRegister+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801789e:	01d0      	lsls	r0, r2, #7
 80178a0:	d434      	bmi.n	801790c <SDMMC_CmdStatusRegister+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80178a2:	0211      	lsls	r1, r2, #8
 80178a4:	d435      	bmi.n	8017912 <SDMMC_CmdStatusRegister+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80178a6:	0254      	lsls	r4, r2, #9
 80178a8:	d436      	bmi.n	8017918 <SDMMC_CmdStatusRegister+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80178aa:	0290      	lsls	r0, r2, #10
 80178ac:	d440      	bmi.n	8017930 <SDMMC_CmdStatusRegister+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80178ae:	02d1      	lsls	r1, r2, #11
 80178b0:	d43b      	bmi.n	801792a <SDMMC_CmdStatusRegister+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80178b2:	0354      	lsls	r4, r2, #13
 80178b4:	d436      	bmi.n	8017924 <SDMMC_CmdStatusRegister+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80178b6:	0390      	lsls	r0, r2, #14
 80178b8:	d431      	bmi.n	801791e <SDMMC_CmdStatusRegister+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80178ba:	03d1      	lsls	r1, r2, #15
 80178bc:	d444      	bmi.n	8017948 <SDMMC_CmdStatusRegister+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80178be:	0414      	lsls	r4, r2, #16
 80178c0:	d43f      	bmi.n	8017942 <SDMMC_CmdStatusRegister+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80178c2:	0450      	lsls	r0, r2, #17
 80178c4:	d43a      	bmi.n	801793c <SDMMC_CmdStatusRegister+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80178c6:	0491      	lsls	r1, r2, #18
 80178c8:	d435      	bmi.n	8017936 <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80178ca:	f012 0f08 	tst.w	r2, #8
 80178ce:	bf14      	ite	ne
 80178d0:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80178d4:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80178d8:	e7bf      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80178da:	2201      	movs	r2, #1
 80178dc:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80178de:	e7bc      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80178e0:	2301      	movs	r3, #1
 80178e2:	e7ba      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80178e4:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80178e6:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80178e8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80178ea:	e7b6      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80178ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80178f0:	e7b3      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80178f2:	2340      	movs	r3, #64	; 0x40
 80178f4:	e7b1      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80178f6:	2380      	movs	r3, #128	; 0x80
 80178f8:	e7af      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80178fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80178fe:	e7ac      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8017900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017904:	e7a9      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8017906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801790a:	e7a6      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801790c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017910:	e7a3      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8017912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017916:	e7a0      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8017918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801791c:	e79d      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801791e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017922:	e79a      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8017924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8017928:	e797      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
 801792a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801792e:	e794      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8017930:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017934:	e791      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8017936:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801793a:	e78e      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801793c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8017940:	e78b      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8017942:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8017946:	e788      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8017948:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801794c:	e785      	b.n	801785a <SDMMC_CmdStatusRegister+0x42>
 801794e:	bf00      	nop
 8017950:	2400737c 	.word	0x2400737c
 8017954:	fffee0c0 	.word	0xfffee0c0
 8017958:	10624dd3 	.word	0x10624dd3
 801795c:	00200045 	.word	0x00200045
 8017960:	002000c5 	.word	0x002000c5
 8017964:	fdffe008 	.word	0xfdffe008

08017968 <SDMMC_CmdSwitch>:
 8017968:	4a4c      	ldr	r2, [pc, #304]	; (8017a9c <SDMMC_CmdSwitch+0x134>)
 801796a:	4b4d      	ldr	r3, [pc, #308]	; (8017aa0 <SDMMC_CmdSwitch+0x138>)
 801796c:	6812      	ldr	r2, [r2, #0]
 801796e:	b410      	push	{r4}
 8017970:	fba3 3202 	umull	r3, r2, r3, r2
 8017974:	4c4b      	ldr	r4, [pc, #300]	; (8017aa4 <SDMMC_CmdSwitch+0x13c>)
 8017976:	6081      	str	r1, [r0, #8]
 8017978:	f241 1306 	movw	r3, #4358	; 0x1106
 801797c:	68c1      	ldr	r1, [r0, #12]
 801797e:	0a52      	lsrs	r2, r2, #9
 8017980:	400c      	ands	r4, r1
 8017982:	f241 3188 	movw	r1, #5000	; 0x1388
 8017986:	4323      	orrs	r3, r4
 8017988:	fb01 f202 	mul.w	r2, r1, r2
 801798c:	60c3      	str	r3, [r0, #12]
 801798e:	b14a      	cbz	r2, 80179a4 <SDMMC_CmdSwitch+0x3c>
 8017990:	1e53      	subs	r3, r2, #1
 8017992:	4945      	ldr	r1, [pc, #276]	; (8017aa8 <SDMMC_CmdSwitch+0x140>)
 8017994:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8017996:	3b01      	subs	r3, #1
 8017998:	420a      	tst	r2, r1
 801799a:	d001      	beq.n	80179a0 <SDMMC_CmdSwitch+0x38>
 801799c:	0492      	lsls	r2, r2, #18
 801799e:	d507      	bpl.n	80179b0 <SDMMC_CmdSwitch+0x48>
 80179a0:	1c5c      	adds	r4, r3, #1
 80179a2:	d1f7      	bne.n	8017994 <SDMMC_CmdSwitch+0x2c>
 80179a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80179a8:	4618      	mov	r0, r3
 80179aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179ae:	4770      	bx	lr
 80179b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80179b2:	075c      	lsls	r4, r3, #29
 80179b4:	d43d      	bmi.n	8017a32 <SDMMC_CmdSwitch+0xca>
 80179b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80179b8:	f013 0301 	ands.w	r3, r3, #1
 80179bc:	d134      	bne.n	8017a28 <SDMMC_CmdSwitch+0xc0>
 80179be:	4b3b      	ldr	r3, [pc, #236]	; (8017aac <SDMMC_CmdSwitch+0x144>)
 80179c0:	6383      	str	r3, [r0, #56]	; 0x38
 80179c2:	6903      	ldr	r3, [r0, #16]
 80179c4:	b2db      	uxtb	r3, r3
 80179c6:	2b06      	cmp	r3, #6
 80179c8:	d131      	bne.n	8017a2e <SDMMC_CmdSwitch+0xc6>
 80179ca:	6942      	ldr	r2, [r0, #20]
 80179cc:	4b38      	ldr	r3, [pc, #224]	; (8017ab0 <SDMMC_CmdSwitch+0x148>)
 80179ce:	4013      	ands	r3, r2
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d0e9      	beq.n	80179a8 <SDMMC_CmdSwitch+0x40>
 80179d4:	2a00      	cmp	r2, #0
 80179d6:	db30      	blt.n	8017a3a <SDMMC_CmdSwitch+0xd2>
 80179d8:	0051      	lsls	r1, r2, #1
 80179da:	d431      	bmi.n	8017a40 <SDMMC_CmdSwitch+0xd8>
 80179dc:	0094      	lsls	r4, r2, #2
 80179de:	d431      	bmi.n	8017a44 <SDMMC_CmdSwitch+0xdc>
 80179e0:	00d0      	lsls	r0, r2, #3
 80179e2:	d431      	bmi.n	8017a48 <SDMMC_CmdSwitch+0xe0>
 80179e4:	0111      	lsls	r1, r2, #4
 80179e6:	d432      	bmi.n	8017a4e <SDMMC_CmdSwitch+0xe6>
 80179e8:	0154      	lsls	r4, r2, #5
 80179ea:	d433      	bmi.n	8017a54 <SDMMC_CmdSwitch+0xec>
 80179ec:	01d0      	lsls	r0, r2, #7
 80179ee:	d434      	bmi.n	8017a5a <SDMMC_CmdSwitch+0xf2>
 80179f0:	0211      	lsls	r1, r2, #8
 80179f2:	d435      	bmi.n	8017a60 <SDMMC_CmdSwitch+0xf8>
 80179f4:	0254      	lsls	r4, r2, #9
 80179f6:	d436      	bmi.n	8017a66 <SDMMC_CmdSwitch+0xfe>
 80179f8:	0290      	lsls	r0, r2, #10
 80179fa:	d440      	bmi.n	8017a7e <SDMMC_CmdSwitch+0x116>
 80179fc:	02d1      	lsls	r1, r2, #11
 80179fe:	d43b      	bmi.n	8017a78 <SDMMC_CmdSwitch+0x110>
 8017a00:	0354      	lsls	r4, r2, #13
 8017a02:	d436      	bmi.n	8017a72 <SDMMC_CmdSwitch+0x10a>
 8017a04:	0390      	lsls	r0, r2, #14
 8017a06:	d431      	bmi.n	8017a6c <SDMMC_CmdSwitch+0x104>
 8017a08:	03d1      	lsls	r1, r2, #15
 8017a0a:	d444      	bmi.n	8017a96 <SDMMC_CmdSwitch+0x12e>
 8017a0c:	0414      	lsls	r4, r2, #16
 8017a0e:	d43f      	bmi.n	8017a90 <SDMMC_CmdSwitch+0x128>
 8017a10:	0450      	lsls	r0, r2, #17
 8017a12:	d43a      	bmi.n	8017a8a <SDMMC_CmdSwitch+0x122>
 8017a14:	0491      	lsls	r1, r2, #18
 8017a16:	d435      	bmi.n	8017a84 <SDMMC_CmdSwitch+0x11c>
 8017a18:	f012 0f08 	tst.w	r2, #8
 8017a1c:	bf14      	ite	ne
 8017a1e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8017a22:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8017a26:	e7bf      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a28:	2201      	movs	r2, #1
 8017a2a:	6382      	str	r2, [r0, #56]	; 0x38
 8017a2c:	e7bc      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a2e:	2301      	movs	r3, #1
 8017a30:	e7ba      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a32:	2204      	movs	r2, #4
 8017a34:	4613      	mov	r3, r2
 8017a36:	6382      	str	r2, [r0, #56]	; 0x38
 8017a38:	e7b6      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8017a3e:	e7b3      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a40:	2340      	movs	r3, #64	; 0x40
 8017a42:	e7b1      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a44:	2380      	movs	r3, #128	; 0x80
 8017a46:	e7af      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017a4c:	e7ac      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017a52:	e7a9      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017a58:	e7a6      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017a5e:	e7a3      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017a64:	e7a0      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017a6a:	e79d      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017a70:	e79a      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8017a76:	e797      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017a7c:	e794      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017a82:	e791      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017a88:	e78e      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8017a8e:	e78b      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8017a94:	e788      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8017a9a:	e785      	b.n	80179a8 <SDMMC_CmdSwitch+0x40>
 8017a9c:	2400737c 	.word	0x2400737c
 8017aa0:	10624dd3 	.word	0x10624dd3
 8017aa4:	fffee0c0 	.word	0xfffee0c0
 8017aa8:	00200045 	.word	0x00200045
 8017aac:	002000c5 	.word	0x002000c5
 8017ab0:	fdffe008 	.word	0xfdffe008

08017ab4 <SDMMC_CmdVoltageSwitch>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017ab4:	4a4d      	ldr	r2, [pc, #308]	; (8017bec <SDMMC_CmdVoltageSwitch+0x138>)
  SDMMCx->ARG = Command->Argument;
 8017ab6:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017ab8:	494d      	ldr	r1, [pc, #308]	; (8017bf0 <SDMMC_CmdVoltageSwitch+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017aba:	6812      	ldr	r2, [r2, #0]
{
 8017abc:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017abe:	4c4d      	ldr	r4, [pc, #308]	; (8017bf4 <SDMMC_CmdVoltageSwitch+0x140>)
  SDMMCx->ARG = Command->Argument;
 8017ac0:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017ac2:	f241 130b 	movw	r3, #4363	; 0x110b
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017ac6:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017aca:	68c4      	ldr	r4, [r0, #12]
 8017acc:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017ace:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017ad0:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017ad2:	f241 3188 	movw	r1, #5000	; 0x1388
 8017ad6:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017ada:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8017adc:	b14a      	cbz	r2, 8017af2 <SDMMC_CmdVoltageSwitch+0x3e>
 8017ade:	1e53      	subs	r3, r2, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8017ae0:	4945      	ldr	r1, [pc, #276]	; (8017bf8 <SDMMC_CmdVoltageSwitch+0x144>)
    sta_reg = SDMMCx->STA;
 8017ae2:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8017ae4:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8017ae6:	420a      	tst	r2, r1
 8017ae8:	d001      	beq.n	8017aee <SDMMC_CmdVoltageSwitch+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8017aea:	0492      	lsls	r2, r2, #18
 8017aec:	d507      	bpl.n	8017afe <SDMMC_CmdVoltageSwitch+0x4a>
    if (count-- == 0U)
 8017aee:	1c5c      	adds	r4, r3, #1
 8017af0:	d1f7      	bne.n	8017ae2 <SDMMC_CmdVoltageSwitch+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8017af2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8017af6:	4618      	mov	r0, r3
 8017af8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017afc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8017afe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017b00:	075c      	lsls	r4, r3, #29
 8017b02:	d43d      	bmi.n	8017b80 <SDMMC_CmdVoltageSwitch+0xcc>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8017b04:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017b06:	f013 0301 	ands.w	r3, r3, #1
 8017b0a:	d134      	bne.n	8017b76 <SDMMC_CmdVoltageSwitch+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8017b0c:	4b3b      	ldr	r3, [pc, #236]	; (8017bfc <SDMMC_CmdVoltageSwitch+0x148>)
 8017b0e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8017b10:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8017b12:	b2db      	uxtb	r3, r3
 8017b14:	2b0b      	cmp	r3, #11
 8017b16:	d131      	bne.n	8017b7c <SDMMC_CmdVoltageSwitch+0xc8>
  return (*(__IO uint32_t *) tmp);
 8017b18:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8017b1a:	4b39      	ldr	r3, [pc, #228]	; (8017c00 <SDMMC_CmdVoltageSwitch+0x14c>)
 8017b1c:	4013      	ands	r3, r2
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d0e9      	beq.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8017b22:	2a00      	cmp	r2, #0
 8017b24:	db30      	blt.n	8017b88 <SDMMC_CmdVoltageSwitch+0xd4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8017b26:	0051      	lsls	r1, r2, #1
 8017b28:	d431      	bmi.n	8017b8e <SDMMC_CmdVoltageSwitch+0xda>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8017b2a:	0094      	lsls	r4, r2, #2
 8017b2c:	d431      	bmi.n	8017b92 <SDMMC_CmdVoltageSwitch+0xde>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8017b2e:	00d0      	lsls	r0, r2, #3
 8017b30:	d431      	bmi.n	8017b96 <SDMMC_CmdVoltageSwitch+0xe2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8017b32:	0111      	lsls	r1, r2, #4
 8017b34:	d432      	bmi.n	8017b9c <SDMMC_CmdVoltageSwitch+0xe8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8017b36:	0154      	lsls	r4, r2, #5
 8017b38:	d433      	bmi.n	8017ba2 <SDMMC_CmdVoltageSwitch+0xee>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8017b3a:	01d0      	lsls	r0, r2, #7
 8017b3c:	d434      	bmi.n	8017ba8 <SDMMC_CmdVoltageSwitch+0xf4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8017b3e:	0211      	lsls	r1, r2, #8
 8017b40:	d435      	bmi.n	8017bae <SDMMC_CmdVoltageSwitch+0xfa>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8017b42:	0254      	lsls	r4, r2, #9
 8017b44:	d436      	bmi.n	8017bb4 <SDMMC_CmdVoltageSwitch+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8017b46:	0290      	lsls	r0, r2, #10
 8017b48:	d440      	bmi.n	8017bcc <SDMMC_CmdVoltageSwitch+0x118>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8017b4a:	02d1      	lsls	r1, r2, #11
 8017b4c:	d43b      	bmi.n	8017bc6 <SDMMC_CmdVoltageSwitch+0x112>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8017b4e:	0354      	lsls	r4, r2, #13
 8017b50:	d436      	bmi.n	8017bc0 <SDMMC_CmdVoltageSwitch+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8017b52:	0390      	lsls	r0, r2, #14
 8017b54:	d431      	bmi.n	8017bba <SDMMC_CmdVoltageSwitch+0x106>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8017b56:	03d1      	lsls	r1, r2, #15
 8017b58:	d444      	bmi.n	8017be4 <SDMMC_CmdVoltageSwitch+0x130>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8017b5a:	0414      	lsls	r4, r2, #16
 8017b5c:	d43f      	bmi.n	8017bde <SDMMC_CmdVoltageSwitch+0x12a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8017b5e:	0450      	lsls	r0, r2, #17
 8017b60:	d43a      	bmi.n	8017bd8 <SDMMC_CmdVoltageSwitch+0x124>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8017b62:	0491      	lsls	r1, r2, #18
 8017b64:	d435      	bmi.n	8017bd2 <SDMMC_CmdVoltageSwitch+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8017b66:	f012 0f08 	tst.w	r2, #8
 8017b6a:	bf14      	ite	ne
 8017b6c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8017b70:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8017b74:	e7bf      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8017b76:	2201      	movs	r2, #1
 8017b78:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017b7a:	e7bc      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017b7c:	2301      	movs	r3, #1
 8017b7e:	e7ba      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017b80:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017b82:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017b84:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017b86:	e7b6      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8017b88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8017b8c:	e7b3      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8017b8e:	2340      	movs	r3, #64	; 0x40
 8017b90:	e7b1      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8017b92:	2380      	movs	r3, #128	; 0x80
 8017b94:	e7af      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8017b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017b9a:	e7ac      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8017b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017ba0:	e7a9      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8017ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017ba6:	e7a6      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8017ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017bac:	e7a3      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8017bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017bb2:	e7a0      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8017bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017bb8:	e79d      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8017bba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017bbe:	e79a      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8017bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8017bc4:	e797      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CC_ERR;
 8017bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017bca:	e794      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8017bcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017bd0:	e791      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8017bd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017bd6:	e78e      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8017bd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8017bdc:	e78b      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8017bde:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8017be2:	e788      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8017be4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8017be8:	e785      	b.n	8017af6 <SDMMC_CmdVoltageSwitch+0x42>
 8017bea:	bf00      	nop
 8017bec:	2400737c 	.word	0x2400737c
 8017bf0:	fffee0c0 	.word	0xfffee0c0
 8017bf4:	10624dd3 	.word	0x10624dd3
 8017bf8:	00200045 	.word	0x00200045
 8017bfc:	002000c5 	.word	0x002000c5
 8017c00:	fdffe008 	.word	0xfdffe008

08017c04 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8017c04:	287f      	cmp	r0, #127	; 0x7f
 8017c06:	d912      	bls.n	8017c2e <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8017c08:	b971      	cbnz	r1, 8017c28 <ff_convert+0x24>
 8017c0a:	4b0c      	ldr	r3, [pc, #48]	; (8017c3c <ff_convert+0x38>)
 8017c0c:	e001      	b.n	8017c12 <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8017c0e:	2980      	cmp	r1, #128	; 0x80
 8017c10:	d00c      	beq.n	8017c2c <ff_convert+0x28>
				if (chr == Tbl[c]) break;
 8017c12:	f833 2b02 	ldrh.w	r2, [r3], #2
 8017c16:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 8017c1a:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
 8017c1c:	4282      	cmp	r2, r0
 8017c1e:	d1f6      	bne.n	8017c0e <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 8017c20:	f10c 0080 	add.w	r0, ip, #128	; 0x80
 8017c24:	b280      	uxth	r0, r0
 8017c26:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8017c28:	28ff      	cmp	r0, #255	; 0xff
 8017c2a:	d901      	bls.n	8017c30 <ff_convert+0x2c>
 8017c2c:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8017c2e:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8017c30:	4b02      	ldr	r3, [pc, #8]	; (8017c3c <ff_convert+0x38>)
 8017c32:	3880      	subs	r0, #128	; 0x80
 8017c34:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8017c38:	4770      	bx	lr
 8017c3a:	bf00      	nop
 8017c3c:	080bfee0 	.word	0x080bfee0

08017c40 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8017c40:	4b22      	ldr	r3, [pc, #136]	; (8017ccc <ff_wtoupper+0x8c>)
 8017c42:	4a23      	ldr	r2, [pc, #140]	; (8017cd0 <ff_wtoupper+0x90>)
 8017c44:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8017c48:	bf28      	it	cs
 8017c4a:	4613      	movcs	r3, r2
{
 8017c4c:	b510      	push	{r4, lr}
 8017c4e:	3304      	adds	r3, #4
 8017c50:	e001      	b.n	8017c56 <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8017c52:	3304      	adds	r3, #4
 8017c54:	b1da      	cbz	r2, 8017c8e <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
 8017c56:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 8017c5a:	461c      	mov	r4, r3
 8017c5c:	b1b1      	cbz	r1, 8017c8c <ff_wtoupper+0x4c>
 8017c5e:	4288      	cmp	r0, r1
 8017c60:	d314      	bcc.n	8017c8c <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8017c62:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8017c66:	fa5f fc82 	uxtb.w	ip, r2
 8017c6a:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 8017c6c:	eb0c 0e01 	add.w	lr, ip, r1
 8017c70:	4570      	cmp	r0, lr
 8017c72:	daee      	bge.n	8017c52 <ff_wtoupper+0x12>
			switch (cmd) {
 8017c74:	2a08      	cmp	r2, #8
 8017c76:	d809      	bhi.n	8017c8c <ff_wtoupper+0x4c>
 8017c78:	e8df f002 	tbb	[pc, r2]
 8017c7c:	19161005 	.word	0x19161005
 8017c80:	25221f1c 	.word	0x25221f1c
 8017c84:	0c          	.byte	0x0c
 8017c85:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8017c86:	1a41      	subs	r1, r0, r1
 8017c88:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
 8017c8c:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
 8017c8e:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 8017c92:	e7dc      	b.n	8017c4e <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8017c94:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8017c98:	b280      	uxth	r0, r0
}
 8017c9a:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8017c9c:	1a43      	subs	r3, r0, r1
 8017c9e:	f003 0301 	and.w	r3, r3, #1
 8017ca2:	1ac0      	subs	r0, r0, r3
 8017ca4:	b280      	uxth	r0, r0
}
 8017ca6:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 8017ca8:	3810      	subs	r0, #16
 8017caa:	b280      	uxth	r0, r0
}
 8017cac:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 8017cae:	3820      	subs	r0, #32
 8017cb0:	b280      	uxth	r0, r0
}
 8017cb2:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 8017cb4:	3830      	subs	r0, #48	; 0x30
 8017cb6:	b280      	uxth	r0, r0
}
 8017cb8:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 8017cba:	381a      	subs	r0, #26
 8017cbc:	b280      	uxth	r0, r0
}
 8017cbe:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 8017cc0:	3008      	adds	r0, #8
 8017cc2:	b280      	uxth	r0, r0
}
 8017cc4:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 8017cc6:	3850      	subs	r0, #80	; 0x50
 8017cc8:	b280      	uxth	r0, r0
}
 8017cca:	bd10      	pop	{r4, pc}
 8017ccc:	080bffe0 	.word	0x080bffe0
 8017cd0:	080c01d4 	.word	0x080c01d4

08017cd4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8017cd4:	4b03      	ldr	r3, [pc, #12]	; (8017ce4 <disk_status+0x10>)
 8017cd6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8017cda:	4403      	add	r3, r0
 8017cdc:	6852      	ldr	r2, [r2, #4]
 8017cde:	7b18      	ldrb	r0, [r3, #12]
 8017ce0:	6853      	ldr	r3, [r2, #4]
 8017ce2:	4718      	bx	r3
 8017ce4:	2400a164 	.word	0x2400a164

08017ce8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8017ce8:	4b07      	ldr	r3, [pc, #28]	; (8017d08 <disk_initialize+0x20>)
 8017cea:	5c1a      	ldrb	r2, [r3, r0]
 8017cec:	b952      	cbnz	r2, 8017d04 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017cee:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8017cf2:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 8017cf4:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017cf8:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 8017cfa:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017cfe:	7b08      	ldrb	r0, [r1, #12]
 8017d00:	6813      	ldr	r3, [r2, #0]
 8017d02:	4718      	bx	r3
  }
  return stat;
}
 8017d04:	2000      	movs	r0, #0
 8017d06:	4770      	bx	lr
 8017d08:	2400a164 	.word	0x2400a164

08017d0c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8017d0c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017d0e:	4c05      	ldr	r4, [pc, #20]	; (8017d24 <disk_read+0x18>)
 8017d10:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8017d14:	4404      	add	r4, r0
 8017d16:	686d      	ldr	r5, [r5, #4]
 8017d18:	7b20      	ldrb	r0, [r4, #12]
 8017d1a:	68ac      	ldr	r4, [r5, #8]
 8017d1c:	46a4      	mov	ip, r4
  return res;
}
 8017d1e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017d20:	4760      	bx	ip
 8017d22:	bf00      	nop
 8017d24:	2400a164 	.word	0x2400a164

08017d28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8017d28:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017d2a:	4c05      	ldr	r4, [pc, #20]	; (8017d40 <disk_write+0x18>)
 8017d2c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8017d30:	4404      	add	r4, r0
 8017d32:	686d      	ldr	r5, [r5, #4]
 8017d34:	7b20      	ldrb	r0, [r4, #12]
 8017d36:	68ec      	ldr	r4, [r5, #12]
 8017d38:	46a4      	mov	ip, r4
  return res;
}
 8017d3a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017d3c:	4760      	bx	ip
 8017d3e:	bf00      	nop
 8017d40:	2400a164 	.word	0x2400a164

08017d44 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8017d44:	4b04      	ldr	r3, [pc, #16]	; (8017d58 <disk_ioctl+0x14>)
 8017d46:	eb03 0c00 	add.w	ip, r3, r0
 8017d4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8017d4e:	685b      	ldr	r3, [r3, #4]
 8017d50:	f89c 000c 	ldrb.w	r0, [ip, #12]
 8017d54:	691b      	ldr	r3, [r3, #16]
 8017d56:	4718      	bx	r3
 8017d58:	2400a164 	.word	0x2400a164

08017d5c <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8017d5c:	2000      	movs	r0, #0
 8017d5e:	4770      	bx	lr

08017d60 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8017d60:	4a36      	ldr	r2, [pc, #216]	; (8017e3c <inc_lock+0xdc>)
{
 8017d62:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8017d64:	6813      	ldr	r3, [r2, #0]
{
 8017d66:	468e      	mov	lr, r1
		if (Files[i].fs == dp->obj.fs &&
 8017d68:	6801      	ldr	r1, [r0, #0]
 8017d6a:	4299      	cmp	r1, r3
 8017d6c:	d029      	beq.n	8017dc2 <inc_lock+0x62>
 8017d6e:	6914      	ldr	r4, [r2, #16]
 8017d70:	42a1      	cmp	r1, r4
 8017d72:	d030      	beq.n	8017dd6 <inc_lock+0x76>
 8017d74:	6a15      	ldr	r5, [r2, #32]
 8017d76:	42a9      	cmp	r1, r5
 8017d78:	d037      	beq.n	8017dea <inc_lock+0x8a>
 8017d7a:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
 8017d7e:	458c      	cmp	ip, r1
 8017d80:	d00a      	beq.n	8017d98 <inc_lock+0x38>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d03c      	beq.n	8017e00 <inc_lock+0xa0>
 8017d86:	2c00      	cmp	r4, #0
 8017d88:	d039      	beq.n	8017dfe <inc_lock+0x9e>
 8017d8a:	2d00      	cmp	r5, #0
 8017d8c:	d052      	beq.n	8017e34 <inc_lock+0xd4>
 8017d8e:	f1bc 0f00 	cmp.w	ip, #0
 8017d92:	d051      	beq.n	8017e38 <inc_lock+0xd8>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017d94:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 8017d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (Files[i].fs == dp->obj.fs &&
 8017d98:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8017d9a:	6887      	ldr	r7, [r0, #8]
 8017d9c:	42be      	cmp	r6, r7
 8017d9e:	d1f0      	bne.n	8017d82 <inc_lock+0x22>
			Files[i].clu == dp->obj.sclust &&
 8017da0:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8017da2:	6947      	ldr	r7, [r0, #20]
 8017da4:	42be      	cmp	r6, r7
 8017da6:	d1ec      	bne.n	8017d82 <inc_lock+0x22>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017da8:	2303      	movs	r3, #3
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017daa:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8017dae:	0118      	lsls	r0, r3, #4
 8017db0:	f1be 0f00 	cmp.w	lr, #0
 8017db4:	d03a      	beq.n	8017e2c <inc_lock+0xcc>
 8017db6:	8989      	ldrh	r1, [r1, #12]
 8017db8:	2900      	cmp	r1, #0
 8017dba:	d1eb      	bne.n	8017d94 <inc_lock+0x34>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017dbc:	f44f 7480 	mov.w	r4, #256	; 0x100
 8017dc0:	e030      	b.n	8017e24 <inc_lock+0xc4>
		if (Files[i].fs == dp->obj.fs &&
 8017dc2:	6855      	ldr	r5, [r2, #4]
 8017dc4:	6884      	ldr	r4, [r0, #8]
 8017dc6:	42a5      	cmp	r5, r4
 8017dc8:	d1d1      	bne.n	8017d6e <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 8017dca:	6895      	ldr	r5, [r2, #8]
 8017dcc:	6944      	ldr	r4, [r0, #20]
 8017dce:	42a5      	cmp	r5, r4
 8017dd0:	d1cd      	bne.n	8017d6e <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	e7e9      	b.n	8017daa <inc_lock+0x4a>
		if (Files[i].fs == dp->obj.fs &&
 8017dd6:	6957      	ldr	r7, [r2, #20]
 8017dd8:	6885      	ldr	r5, [r0, #8]
 8017dda:	42af      	cmp	r7, r5
 8017ddc:	d1ca      	bne.n	8017d74 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 8017dde:	6997      	ldr	r7, [r2, #24]
 8017de0:	6945      	ldr	r5, [r0, #20]
 8017de2:	42af      	cmp	r7, r5
 8017de4:	d1c6      	bne.n	8017d74 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017de6:	2301      	movs	r3, #1
 8017de8:	e7df      	b.n	8017daa <inc_lock+0x4a>
		if (Files[i].fs == dp->obj.fs &&
 8017dea:	6a57      	ldr	r7, [r2, #36]	; 0x24
 8017dec:	6886      	ldr	r6, [r0, #8]
 8017dee:	42b7      	cmp	r7, r6
 8017df0:	d1c3      	bne.n	8017d7a <inc_lock+0x1a>
			Files[i].clu == dp->obj.sclust &&
 8017df2:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8017df4:	6947      	ldr	r7, [r0, #20]
 8017df6:	42be      	cmp	r6, r7
 8017df8:	d1bf      	bne.n	8017d7a <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017dfa:	2302      	movs	r3, #2
 8017dfc:	e7d5      	b.n	8017daa <inc_lock+0x4a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017dfe:	2301      	movs	r3, #1
		Files[i].clu = dp->obj.sclust;
 8017e00:	6946      	ldr	r6, [r0, #20]
		Files[i].fs = dp->obj.fs;
 8017e02:	eb02 1503 	add.w	r5, r2, r3, lsl #4
		Files[i].clu = dp->obj.sclust;
 8017e06:	6887      	ldr	r7, [r0, #8]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017e08:	f1be 0f00 	cmp.w	lr, #0
		Files[i].fs = dp->obj.fs;
 8017e0c:	ea4f 1003 	mov.w	r0, r3, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017e10:	bf14      	ite	ne
 8017e12:	f44f 7480 	movne.w	r4, #256	; 0x100
 8017e16:	2401      	moveq	r4, #1
		Files[i].fs = dp->obj.fs;
 8017e18:	5011      	str	r1, [r2, r0]
		Files[i].clu = dp->obj.sclust;
 8017e1a:	4629      	mov	r1, r5
 8017e1c:	e9c5 7601 	strd	r7, r6, [r5, #4]
		Files[i].ctr = 0;
 8017e20:	2500      	movs	r5, #0
 8017e22:	818d      	strh	r5, [r1, #12]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017e24:	4402      	add	r2, r0
	return i + 1;
 8017e26:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017e28:	8194      	strh	r4, [r2, #12]
}
 8017e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017e2c:	898c      	ldrh	r4, [r1, #12]
 8017e2e:	3401      	adds	r4, #1
 8017e30:	b2a4      	uxth	r4, r4
 8017e32:	e7f7      	b.n	8017e24 <inc_lock+0xc4>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017e34:	2302      	movs	r3, #2
 8017e36:	e7e3      	b.n	8017e00 <inc_lock+0xa0>
 8017e38:	2303      	movs	r3, #3
 8017e3a:	e7e1      	b.n	8017e00 <inc_lock+0xa0>
 8017e3c:	2400a120 	.word	0x2400a120

08017e40 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8017e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8017e44:	2600      	movs	r6, #0
{
 8017e46:	b082      	sub	sp, #8
	FATFS *fs = dp->obj.fs;
 8017e48:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8017e4c:	758e      	strb	r6, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8017e4e:	69c3      	ldr	r3, [r0, #28]
{
 8017e50:	e9cd 0100 	strd	r0, r1, [sp]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d05b      	beq.n	8017f10 <get_fileinfo+0xd0>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8017e58:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017e5a:	4607      	mov	r7, r0
 8017e5c:	460d      	mov	r5, r1
 8017e5e:	3301      	adds	r3, #1
 8017e60:	d01f      	beq.n	8017ea2 <get_fileinfo+0x62>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8017e62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017e66:	8818      	ldrh	r0, [r3, #0]
 8017e68:	2800      	cmp	r0, #0
 8017e6a:	d063      	beq.n	8017f34 <get_fileinfo+0xf4>
 8017e6c:	f101 0615 	add.w	r6, r1, #21
 8017e70:	2401      	movs	r4, #1
 8017e72:	e000      	b.n	8017e76 <get_fileinfo+0x36>
 8017e74:	4614      	mov	r4, r2
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8017e76:	2100      	movs	r1, #0
 8017e78:	f7ff fec4 	bl	8017c04 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8017e7c:	1c62      	adds	r2, r4, #1
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8017e7e:	9000      	str	r0, [sp, #0]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8017e80:	2800      	cmp	r0, #0
 8017e82:	d057      	beq.n	8017f34 <get_fileinfo+0xf4>
 8017e84:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8017e88:	d054      	beq.n	8017f34 <get_fileinfo+0xf4>
				fno->fname[i++] = (TCHAR)w;
 8017e8a:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8017e8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017e92:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8017e96:	2800      	cmp	r0, #0
 8017e98:	d1ec      	bne.n	8017e74 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8017e9a:	442c      	add	r4, r5
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	75a3      	strb	r3, [r4, #22]
		}
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8017ea0:	7dae      	ldrb	r6, [r5, #22]
 8017ea2:	f8d7 c020 	ldr.w	ip, [r7, #32]
	i = j = 0;
 8017ea6:	2100      	movs	r1, #0
		c = (TCHAR)dp->dir[i++];
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) {						/* Insert a . if extension is exist */
			if (!lfv) fno->fname[j] = '.';
			fno->altname[j++] = '.';
 8017ea8:	f04f 082e 	mov.w	r8, #46	; 0x2e
 8017eac:	f10c 34ff 	add.w	r4, ip, #4294967295
	i = j = 0;
 8017eb0:	460a      	mov	r2, r1
		c = (TCHAR)dp->dir[i++];
 8017eb2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017eb6:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 8017eb8:	2b20      	cmp	r3, #32
 8017eba:	d018      	beq.n	8017eee <get_fileinfo+0xae>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8017ebc:	2b05      	cmp	r3, #5
 8017ebe:	bf08      	it	eq
 8017ec0:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 8017ec2:	2a09      	cmp	r2, #9
 8017ec4:	d027      	beq.n	8017f16 <get_fileinfo+0xd6>
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8017ec6:	1868      	adds	r0, r5, r1
 8017ec8:	7243      	strb	r3, [r0, #9]
		if (!lfv) {
 8017eca:	b97e      	cbnz	r6, 8017eec <get_fileinfo+0xac>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8017ecc:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 8017ed0:	2f19      	cmp	r7, #25
 8017ed2:	d80a      	bhi.n	8017eea <get_fileinfo+0xaa>
 8017ed4:	2a08      	cmp	r2, #8
 8017ed6:	f89c e00c 	ldrb.w	lr, [ip, #12]
 8017eda:	bf8c      	ite	hi
 8017edc:	2710      	movhi	r7, #16
 8017ede:	2708      	movls	r7, #8
 8017ee0:	ea1e 0f07 	tst.w	lr, r7
 8017ee4:	d001      	beq.n	8017eea <get_fileinfo+0xaa>
				c += 0x20;			/* To lower */
 8017ee6:	3320      	adds	r3, #32
 8017ee8:	b2db      	uxtb	r3, r3
			}
			fno->fname[j] = c;
 8017eea:	7583      	strb	r3, [r0, #22]
		}
		j++;
 8017eec:	3101      	adds	r1, #1
	while (i < 11) {		/* Copy name body and extension */
 8017eee:	2a0b      	cmp	r2, #11
 8017ef0:	d1df      	bne.n	8017eb2 <get_fileinfo+0x72>
	}
	if (!lfv) {
		fno->fname[j] = 0;
 8017ef2:	1868      	adds	r0, r5, r1
	if (!lfv) {
 8017ef4:	b1be      	cbz	r6, 8017f26 <get_fileinfo+0xe6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	7243      	strb	r3, [r0, #9]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8017efa:	f89c 300b 	ldrb.w	r3, [ip, #11]
 8017efe:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 8017f00:	f8dc 301c 	ldr.w	r3, [ip, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8017f04:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 8017f06:	f8dc 3016 	ldr.w	r3, [ip, #22]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8017f0a:	0c1a      	lsrs	r2, r3, #16
 8017f0c:	80eb      	strh	r3, [r5, #6]
 8017f0e:	80aa      	strh	r2, [r5, #4]
}
 8017f10:	b002      	add	sp, #8
 8017f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 8017f16:	1868      	adds	r0, r5, r1
 8017f18:	b90e      	cbnz	r6, 8017f1e <get_fileinfo+0xde>
 8017f1a:	f880 8016 	strb.w	r8, [r0, #22]
			fno->altname[j++] = '.';
 8017f1e:	3101      	adds	r1, #1
 8017f20:	f880 8009 	strb.w	r8, [r0, #9]
 8017f24:	e7cf      	b.n	8017ec6 <get_fileinfo+0x86>
		fno->fname[j] = 0;
 8017f26:	7586      	strb	r6, [r0, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8017f28:	f89c 300c 	ldrb.w	r3, [ip, #12]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	bf08      	it	eq
 8017f30:	4628      	moveq	r0, r5
 8017f32:	e7e0      	b.n	8017ef6 <get_fileinfo+0xb6>
			i = j = 0;
 8017f34:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 8017f36:	2300      	movs	r3, #0
 8017f38:	442c      	add	r4, r5
 8017f3a:	75a3      	strb	r3, [r4, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8017f3c:	7dae      	ldrb	r6, [r5, #22]
 8017f3e:	e7b0      	b.n	8017ea2 <get_fileinfo+0x62>

08017f40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8017f40:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8017f42:	f04f 36ff 	mov.w	r6, #4294967295
 8017f46:	2300      	movs	r3, #0
{
 8017f48:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017f4a:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8017f4c:	70c3      	strb	r3, [r0, #3]
 8017f4e:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017f50:	d00c      	beq.n	8017f6c <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017f52:	460d      	mov	r5, r1
 8017f54:	460a      	mov	r2, r1
 8017f56:	2301      	movs	r3, #1
 8017f58:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8017f5c:	7840      	ldrb	r0, [r0, #1]
 8017f5e:	f7ff fed5 	bl	8017d0c <disk_read>
 8017f62:	b110      	cbz	r0, 8017f6a <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8017f64:	2004      	movs	r0, #4
			fs->winsect = sector;
 8017f66:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8017f68:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 8017f6a:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8017f6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017f70:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 8017f74:	429a      	cmp	r2, r3
 8017f76:	d11a      	bne.n	8017fae <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017f78:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8017f7c:	2be9      	cmp	r3, #233	; 0xe9
 8017f7e:	d007      	beq.n	8017f90 <check_fs+0x50>
 8017f80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017f82:	4a0d      	ldr	r2, [pc, #52]	; (8017fb8 <check_fs+0x78>)
 8017f84:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017f88:	4293      	cmp	r3, r2
 8017f8a:	d001      	beq.n	8017f90 <check_fs+0x50>
	return 2;
 8017f8c:	2002      	movs	r0, #2
}
 8017f8e:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 8017f90:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017f94:	4a09      	ldr	r2, [pc, #36]	; (8017fbc <check_fs+0x7c>)
 8017f96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017f9a:	4293      	cmp	r3, r2
 8017f9c:	d009      	beq.n	8017fb2 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 8017f9e:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8017fa2:	4b07      	ldr	r3, [pc, #28]	; (8017fc0 <check_fs+0x80>)
 8017fa4:	4298      	cmp	r0, r3
 8017fa6:	bf14      	ite	ne
 8017fa8:	2002      	movne	r0, #2
 8017faa:	2000      	moveq	r0, #0
}
 8017fac:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8017fae:	2003      	movs	r0, #3
}
 8017fb0:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8017fb2:	2000      	movs	r0, #0
}
 8017fb4:	bd70      	pop	{r4, r5, r6, pc}
 8017fb6:	bf00      	nop
 8017fb8:	009000eb 	.word	0x009000eb
 8017fbc:	00544146 	.word	0x00544146
 8017fc0:	33544146 	.word	0x33544146

08017fc4 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8017fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017fc6:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8017fc8:	b083      	sub	sp, #12
 8017fca:	4604      	mov	r4, r0
 8017fcc:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017fce:	b973      	cbnz	r3, 8017fee <move_window.part.0+0x2a>
 8017fd0:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017fd4:	2301      	movs	r3, #1
 8017fd6:	462a      	mov	r2, r5
 8017fd8:	7860      	ldrb	r0, [r4, #1]
 8017fda:	f7ff fe97 	bl	8017d0c <disk_read>
 8017fde:	b910      	cbnz	r0, 8017fe6 <move_window.part.0+0x22>
			fs->winsect = sector;
 8017fe0:	6325      	str	r5, [r4, #48]	; 0x30
}
 8017fe2:	b003      	add	sp, #12
 8017fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 8017fe6:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017fe8:	f04f 35ff 	mov.w	r5, #4294967295
 8017fec:	e7f8      	b.n	8017fe0 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
 8017fee:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017ff0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8017ff4:	2301      	movs	r3, #1
 8017ff6:	7840      	ldrb	r0, [r0, #1]
 8017ff8:	4632      	mov	r2, r6
 8017ffa:	9101      	str	r1, [sp, #4]
 8017ffc:	f7ff fe94 	bl	8017d28 <disk_write>
 8018000:	b9b8      	cbnz	r0, 8018032 <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018002:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018004:	69e3      	ldr	r3, [r4, #28]
 8018006:	1ab2      	subs	r2, r6, r2
 8018008:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 801800a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801800c:	429a      	cmp	r2, r3
 801800e:	d2e1      	bcs.n	8017fd4 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018010:	78a7      	ldrb	r7, [r4, #2]
 8018012:	2f01      	cmp	r7, #1
 8018014:	d801      	bhi.n	801801a <move_window.part.0+0x56>
 8018016:	e7dd      	b.n	8017fd4 <move_window.part.0+0x10>
					wsect += fs->fsize;
 8018018:	69e3      	ldr	r3, [r4, #28]
 801801a:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801801c:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801801e:	2301      	movs	r3, #1
 8018020:	7860      	ldrb	r0, [r4, #1]
 8018022:	4632      	mov	r2, r6
 8018024:	9101      	str	r1, [sp, #4]
 8018026:	f7ff fe7f 	bl	8017d28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801802a:	2f01      	cmp	r7, #1
 801802c:	9901      	ldr	r1, [sp, #4]
 801802e:	d1f3      	bne.n	8018018 <move_window.part.0+0x54>
 8018030:	e7d0      	b.n	8017fd4 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 8018032:	2001      	movs	r0, #1
}
 8018034:	b003      	add	sp, #12
 8018036:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018038 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8018038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801803c:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 801803e:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
 8018040:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8018042:	b19c      	cbz	r4, 801806c <find_volume+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018044:	7825      	ldrb	r5, [r4, #0]
 8018046:	2d1f      	cmp	r5, #31
 8018048:	d914      	bls.n	8018074 <find_volume+0x3c>
 801804a:	2d3a      	cmp	r5, #58	; 0x3a
 801804c:	d012      	beq.n	8018074 <find_volume+0x3c>
 801804e:	46a4      	mov	ip, r4
 8018050:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8018054:	2b1f      	cmp	r3, #31
 8018056:	d90f      	bls.n	8018078 <find_volume+0x40>
 8018058:	2b3a      	cmp	r3, #58	; 0x3a
 801805a:	d1f9      	bne.n	8018050 <find_volume+0x18>
			i = *tp++ - '0';
 801805c:	3401      	adds	r4, #1
 801805e:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8018062:	45a4      	cmp	ip, r4
 8018064:	d102      	bne.n	801806c <find_volume+0x34>
 8018066:	2e01      	cmp	r6, #1
 8018068:	f240 80fc 	bls.w	8018264 <find_volume+0x22c>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 801806c:	250b      	movs	r5, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 801806e:	4628      	mov	r0, r5
 8018070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018074:	462b      	mov	r3, r5
 8018076:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8018078:	2b3a      	cmp	r3, #58	; 0x3a
 801807a:	d0ef      	beq.n	801805c <find_volume+0x24>
		vol = 0;		/* Drive 0 */
 801807c:	2600      	movs	r6, #0
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801807e:	4ba9      	ldr	r3, [pc, #676]	; (8018324 <find_volume+0x2ec>)
 8018080:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8018084:	2c00      	cmp	r4, #0
 8018086:	f000 80cf 	beq.w	8018228 <find_volume+0x1f0>
	*rfs = fs;							/* Return pointer to the file system object */
 801808a:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801808c:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8018090:	7823      	ldrb	r3, [r4, #0]
 8018092:	b17b      	cbz	r3, 80180b4 <find_volume+0x7c>
		stat = disk_status(fs->drv);
 8018094:	7860      	ldrb	r0, [r4, #1]
 8018096:	f7ff fe1d 	bl	8017cd4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801809a:	07c7      	lsls	r7, r0, #31
 801809c:	d40a      	bmi.n	80180b4 <find_volume+0x7c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801809e:	2d00      	cmp	r5, #0
 80180a0:	f000 80b1 	beq.w	8018206 <find_volume+0x1ce>
 80180a4:	f010 0504 	ands.w	r5, r0, #4
 80180a8:	f000 80ad 	beq.w	8018206 <find_volume+0x1ce>
				return FR_WRITE_PROTECTED;
 80180ac:	250a      	movs	r5, #10
}
 80180ae:	4628      	mov	r0, r5
 80180b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80180b4:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80180b6:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80180b8:	7060      	strb	r0, [r4, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 80180ba:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80180bc:	f7ff fe14 	bl	8017ce8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80180c0:	07c6      	lsls	r6, r0, #31
 80180c2:	f100 80a3 	bmi.w	801820c <find_volume+0x1d4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80180c6:	b10d      	cbz	r5, 80180cc <find_volume+0x94>
 80180c8:	0745      	lsls	r5, r0, #29
 80180ca:	d4ef      	bmi.n	80180ac <find_volume+0x74>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80180cc:	2100      	movs	r1, #0
 80180ce:	4620      	mov	r0, r4
 80180d0:	f7ff ff36 	bl	8017f40 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80180d4:	2802      	cmp	r0, #2
 80180d6:	d07b      	beq.n	80181d0 <find_volume+0x198>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80180d8:	2804      	cmp	r0, #4
 80180da:	f000 80a3 	beq.w	8018224 <find_volume+0x1ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80180de:	2801      	cmp	r0, #1
 80180e0:	f200 8090 	bhi.w	8018204 <find_volume+0x1cc>
	bsect = 0;
 80180e4:	2500      	movs	r5, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80180e6:	f8b4 303f 	ldrh.w	r3, [r4, #63]	; 0x3f
 80180ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80180ee:	f040 8089 	bne.w	8018204 <find_volume+0x1cc>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80180f2:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80180f6:	b902      	cbnz	r2, 80180fa <find_volume+0xc2>
	rv = rv << 8 | ptr[0];
 80180f8:	6da2      	ldr	r2, [r4, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80180fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
		fs->fsize = fasize;
 80180fe:	61e2      	str	r2, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8018100:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8018102:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8018104:	2901      	cmp	r1, #1
 8018106:	d87d      	bhi.n	8018204 <find_volume+0x1cc>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8018108:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 801810c:	b288      	uxth	r0, r1
 801810e:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8018110:	2800      	cmp	r0, #0
 8018112:	d077      	beq.n	8018204 <find_volume+0x1cc>
 8018114:	1e48      	subs	r0, r1, #1
 8018116:	4208      	tst	r0, r1
 8018118:	d174      	bne.n	8018204 <find_volume+0x1cc>
	rv = ptr[1];
 801811a:	f8b4 7045 	ldrh.w	r7, [r4, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801811e:	0738      	lsls	r0, r7, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8018120:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8018122:	d16f      	bne.n	8018204 <find_volume+0x1cc>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8018124:	f8b4 0047 	ldrh.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8018128:	b900      	cbnz	r0, 801812c <find_volume+0xf4>
	rv = rv << 8 | ptr[0];
 801812a:	6d60      	ldr	r0, [r4, #84]	; 0x54
	rv = ptr[1];
 801812c:	f8b4 6042 	ldrh.w	r6, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8018130:	2e00      	cmp	r6, #0
 8018132:	d067      	beq.n	8018204 <find_volume+0x1cc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8018134:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018138:	eb06 1c17 	add.w	ip, r6, r7, lsr #4
 801813c:	449c      	add	ip, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801813e:	4560      	cmp	r0, ip
 8018140:	d360      	bcc.n	8018204 <find_volume+0x1cc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8018142:	eba0 0e0c 	sub.w	lr, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8018146:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8018148:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801814c:	d35a      	bcc.n	8018204 <find_volume+0x1cc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801814e:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8018152:	4288      	cmp	r0, r1
 8018154:	f200 808a 	bhi.w	801826c <find_volume+0x234>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8018158:	f640 71f5 	movw	r1, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801815c:	442e      	add	r6, r5
		fs->volbase = bsect;							/* Volume start sector */
 801815e:	6225      	str	r5, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8018160:	4288      	cmp	r0, r1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8018162:	f100 0002 	add.w	r0, r0, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8018166:	eb0c 0105 	add.w	r1, ip, r5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801816a:	6266      	str	r6, [r4, #36]	; 0x24
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801816c:	61a0      	str	r0, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 801816e:	62e1      	str	r1, [r4, #44]	; 0x2c
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8018170:	f200 80a2 	bhi.w	80182b8 <find_volume+0x280>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8018174:	2f00      	cmp	r7, #0
 8018176:	d045      	beq.n	8018204 <find_volume+0x1cc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8018178:	441e      	add	r6, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801817a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801817e:	f000 0001 	and.w	r0, r0, #1
 8018182:	2101      	movs	r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8018184:	62a6      	str	r6, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8018186:	eb00 0353 	add.w	r3, r0, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801818a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801818e:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 8018192:	d337      	bcc.n	8018204 <find_volume+0x1cc>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018194:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 8018198:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801819a:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 801819e:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 80181a0:	4861      	ldr	r0, [pc, #388]	; (8018328 <find_volume+0x2f0>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 80181a2:	4b62      	ldr	r3, [pc, #392]	; (801832c <find_volume+0x2f4>)
	fs->id = ++Fsid;		/* File system mount ID */
 80181a4:	8802      	ldrh	r2, [r0, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 80181a6:	7021      	strb	r1, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80181a8:	3201      	adds	r2, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 80181aa:	6819      	ldr	r1, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80181ac:	b292      	uxth	r2, r2
		if (Files[i].fs == fs) Files[i].fs = 0;
 80181ae:	428c      	cmp	r4, r1
	fs->id = ++Fsid;		/* File system mount ID */
 80181b0:	8002      	strh	r2, [r0, #0]
 80181b2:	80e2      	strh	r2, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80181b4:	f000 808a 	beq.w	80182cc <find_volume+0x294>
 80181b8:	691a      	ldr	r2, [r3, #16]
 80181ba:	4294      	cmp	r4, r2
 80181bc:	f000 8083 	beq.w	80182c6 <find_volume+0x28e>
 80181c0:	6a1a      	ldr	r2, [r3, #32]
 80181c2:	4294      	cmp	r4, r2
 80181c4:	d075      	beq.n	80182b2 <find_volume+0x27a>
 80181c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80181c8:	4294      	cmp	r4, r2
 80181ca:	d06f      	beq.n	80182ac <find_volume+0x274>
	return FR_OK;
 80181cc:	2500      	movs	r5, #0
 80181ce:	e01a      	b.n	8018206 <find_volume+0x1ce>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80181d0:	f894 61f6 	ldrb.w	r6, [r4, #502]	; 0x1f6
 80181d4:	b10e      	cbz	r6, 80181da <find_volume+0x1a2>
	rv = rv << 8 | ptr[0];
 80181d6:	f8d4 61fa 	ldr.w	r6, [r4, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80181da:	f894 5206 	ldrb.w	r5, [r4, #518]	; 0x206
 80181de:	b10d      	cbz	r5, 80181e4 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
 80181e0:	f8d4 520a 	ldr.w	r5, [r4, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80181e4:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
 80181e8:	b303      	cbz	r3, 801822c <find_volume+0x1f4>
	rv = rv << 8 | ptr[0];
 80181ea:	f8d4 821a 	ldr.w	r8, [r4, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80181ee:	f894 7226 	ldrb.w	r7, [r4, #550]	; 0x226
 80181f2:	b10f      	cbz	r7, 80181f8 <find_volume+0x1c0>
	rv = rv << 8 | ptr[0];
 80181f4:	f8d4 722a 	ldr.w	r7, [r4, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80181f8:	b9d6      	cbnz	r6, 8018230 <find_volume+0x1f8>
 80181fa:	bb0d      	cbnz	r5, 8018240 <find_volume+0x208>
 80181fc:	f1b8 0f00 	cmp.w	r8, #0
 8018200:	d128      	bne.n	8018254 <find_volume+0x21c>
 8018202:	b93f      	cbnz	r7, 8018214 <find_volume+0x1dc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8018204:	250d      	movs	r5, #13
}
 8018206:	4628      	mov	r0, r5
 8018208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801820c:	2503      	movs	r5, #3
}
 801820e:	4628      	mov	r0, r5
 8018210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018214:	4639      	mov	r1, r7
 8018216:	4620      	mov	r0, r4
 8018218:	f7ff fe92 	bl	8017f40 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801821c:	2801      	cmp	r0, #1
 801821e:	d97e      	bls.n	801831e <find_volume+0x2e6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018220:	2804      	cmp	r0, #4
 8018222:	d1ef      	bne.n	8018204 <find_volume+0x1cc>
 8018224:	2501      	movs	r5, #1
 8018226:	e7ee      	b.n	8018206 <find_volume+0x1ce>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8018228:	250c      	movs	r5, #12
 801822a:	e7ec      	b.n	8018206 <find_volume+0x1ce>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801822c:	4698      	mov	r8, r3
 801822e:	e7de      	b.n	80181ee <find_volume+0x1b6>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018230:	4631      	mov	r1, r6
 8018232:	4620      	mov	r0, r4
 8018234:	f7ff fe84 	bl	8017f40 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8018238:	2801      	cmp	r0, #1
 801823a:	d8de      	bhi.n	80181fa <find_volume+0x1c2>
 801823c:	4635      	mov	r5, r6
 801823e:	e752      	b.n	80180e6 <find_volume+0xae>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018240:	4629      	mov	r1, r5
 8018242:	4620      	mov	r0, r4
 8018244:	f7ff fe7c 	bl	8017f40 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8018248:	2801      	cmp	r0, #1
 801824a:	f67f af4c 	bls.w	80180e6 <find_volume+0xae>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801824e:	f1b8 0f00 	cmp.w	r8, #0
 8018252:	d0d6      	beq.n	8018202 <find_volume+0x1ca>
 8018254:	4641      	mov	r1, r8
 8018256:	4620      	mov	r0, r4
 8018258:	f7ff fe72 	bl	8017f40 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801825c:	2801      	cmp	r0, #1
 801825e:	d8d0      	bhi.n	8018202 <find_volume+0x1ca>
 8018260:	4645      	mov	r5, r8
 8018262:	e740      	b.n	80180e6 <find_volume+0xae>
					*path = ++tt;
 8018264:	f10c 0301 	add.w	r3, ip, #1
 8018268:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 801826a:	e708      	b.n	801807e <find_volume+0x46>
		fs->database = bsect + sysect;					/* Data start sector */
 801826c:	eb0c 0305 	add.w	r3, ip, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8018270:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8018272:	442e      	add	r6, r5
		fs->volbase = bsect;							/* Volume start sector */
 8018274:	6225      	str	r5, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8018276:	62e3      	str	r3, [r4, #44]	; 0x2c
	rv = rv << 8 | ptr[0];
 8018278:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801827c:	6266      	str	r6, [r4, #36]	; 0x24
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801827e:	433b      	orrs	r3, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8018280:	61a0      	str	r0, [r4, #24]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8018282:	d1bf      	bne.n	8018204 <find_volume+0x1cc>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8018284:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
 8018286:	6e21      	ldr	r1, [r4, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8018288:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801828c:	62a1      	str	r1, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801828e:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 8018292:	d3b7      	bcc.n	8018204 <find_volume+0x1cc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8018294:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018298:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 801829c:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801829e:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 80182a0:	7121      	strb	r1, [r4, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80182a2:	e9c4 3304 	strd	r3, r3, [r4, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80182a6:	d014      	beq.n	80182d2 <find_volume+0x29a>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80182a8:	2103      	movs	r1, #3
 80182aa:	e779      	b.n	80181a0 <find_volume+0x168>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80182ac:	2200      	movs	r2, #0
 80182ae:	631a      	str	r2, [r3, #48]	; 0x30
 80182b0:	e78c      	b.n	80181cc <find_volume+0x194>
 80182b2:	2200      	movs	r2, #0
 80182b4:	621a      	str	r2, [r3, #32]
 80182b6:	e786      	b.n	80181c6 <find_volume+0x18e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80182b8:	2f00      	cmp	r7, #0
 80182ba:	d0a3      	beq.n	8018204 <find_volume+0x1cc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80182bc:	441e      	add	r6, r3
 80182be:	2102      	movs	r1, #2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80182c0:	0043      	lsls	r3, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80182c2:	62a6      	str	r6, [r4, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80182c4:	e761      	b.n	801818a <find_volume+0x152>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80182c6:	2200      	movs	r2, #0
 80182c8:	611a      	str	r2, [r3, #16]
 80182ca:	e779      	b.n	80181c0 <find_volume+0x188>
 80182cc:	2200      	movs	r2, #0
 80182ce:	601a      	str	r2, [r3, #0]
 80182d0:	e772      	b.n	80181b8 <find_volume+0x180>
			&& move_window(fs, bsect + 1) == FR_OK)
 80182d2:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80182d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80182d6:	4299      	cmp	r1, r3
 80182d8:	d004      	beq.n	80182e4 <find_volume+0x2ac>
 80182da:	4620      	mov	r0, r4
 80182dc:	f7ff fe72 	bl	8017fc4 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 80182e0:	2800      	cmp	r0, #0
 80182e2:	d1e1      	bne.n	80182a8 <find_volume+0x270>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80182e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80182e8:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 80182ec:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80182ee:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
 80182f0:	7121      	strb	r1, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80182f2:	d1d9      	bne.n	80182a8 <find_volume+0x270>
	rv = rv << 8 | ptr[0];
 80182f4:	6b62      	ldr	r2, [r4, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80182f6:	4b0e      	ldr	r3, [pc, #56]	; (8018330 <find_volume+0x2f8>)
 80182f8:	429a      	cmp	r2, r3
 80182fa:	d1d5      	bne.n	80182a8 <find_volume+0x270>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80182fc:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 8018300:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8018304:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018308:	3320      	adds	r3, #32
 801830a:	429a      	cmp	r2, r3
 801830c:	d1cc      	bne.n	80182a8 <find_volume+0x270>
	rv = rv << 8 | ptr[0];
 801830e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8018312:	2103      	movs	r1, #3
 8018314:	f8d4 2220 	ldr.w	r2, [r4, #544]	; 0x220
 8018318:	e9c4 2304 	strd	r2, r3, [r4, #16]
 801831c:	e740      	b.n	80181a0 <find_volume+0x168>
 801831e:	463d      	mov	r5, r7
 8018320:	e6e1      	b.n	80180e6 <find_volume+0xae>
 8018322:	bf00      	nop
 8018324:	2400a118 	.word	0x2400a118
 8018328:	2400a160 	.word	0x2400a160
 801832c:	2400a120 	.word	0x2400a120
 8018330:	41615252 	.word	0x41615252

08018334 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8018334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 8018338:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 801833a:	4604      	mov	r4, r0
 801833c:	460d      	mov	r5, r1
 801833e:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8018340:	2b02      	cmp	r3, #2
 8018342:	d006      	beq.n	8018352 <put_fat.part.0+0x1e>
 8018344:	2b03      	cmp	r3, #3
 8018346:	d052      	beq.n	80183ee <put_fat.part.0+0xba>
 8018348:	2b01      	cmp	r3, #1
 801834a:	d01b      	beq.n	8018384 <put_fat.part.0+0x50>
 801834c:	2002      	movs	r0, #2
}
 801834e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8018352:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018354:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8018356:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801835a:	4299      	cmp	r1, r3
 801835c:	d003      	beq.n	8018366 <put_fat.part.0+0x32>
 801835e:	f7ff fe31 	bl	8017fc4 <move_window.part.0>
			if (res != FR_OK) break;
 8018362:	2800      	cmp	r0, #0
 8018364:	d1f3      	bne.n	801834e <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8018366:	006d      	lsls	r5, r5, #1
 8018368:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 801836c:	f3c6 2207 	ubfx	r2, r6, #8, #8
			break;
 8018370:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8018372:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8018376:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8018378:	1959      	adds	r1, r3, r5
			fs->wflag = 1;
 801837a:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 801837c:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 801837e:	70e3      	strb	r3, [r4, #3]
}
 8018380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
 8018384:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018388:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801838a:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801838c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018390:	4299      	cmp	r1, r3
 8018392:	d003      	beq.n	801839c <put_fat.part.0+0x68>
 8018394:	f7ff fe16 	bl	8017fc4 <move_window.part.0>
			if (res != FR_OK) break;
 8018398:	2800      	cmp	r0, #0
 801839a:	d1d8      	bne.n	801834e <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801839c:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 801839e:	f107 0801 	add.w	r8, r7, #1
 80183a2:	f104 0934 	add.w	r9, r4, #52	; 0x34
 80183a6:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80183aa:	d542      	bpl.n	8018432 <put_fat.part.0+0xfe>
 80183ac:	f819 3007 	ldrb.w	r3, [r9, r7]
 80183b0:	f003 030f 	and.w	r3, r3, #15
 80183b4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 80183b8:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
 80183bc:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80183be:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 80183c0:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80183c2:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80183c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80183c8:	4299      	cmp	r1, r3
 80183ca:	d004      	beq.n	80183d6 <put_fat.part.0+0xa2>
 80183cc:	4620      	mov	r0, r4
 80183ce:	f7ff fdf9 	bl	8017fc4 <move_window.part.0>
			if (res != FR_OK) break;
 80183d2:	2800      	cmp	r0, #0
 80183d4:	d1bb      	bne.n	801834e <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 80183d6:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80183da:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
 80183de:	44c8      	add	r8, r9
			fs->wflag = 1;
 80183e0:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80183e2:	f888 2000 	strb.w	r2, [r8]
			break;
 80183e6:	2000      	movs	r0, #0
			fs->wflag = 1;
 80183e8:	70e3      	strb	r3, [r4, #3]
}
 80183ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80183ee:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80183f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80183f2:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80183f6:	4299      	cmp	r1, r3
 80183f8:	d003      	beq.n	8018402 <put_fat.part.0+0xce>
 80183fa:	f7ff fde3 	bl	8017fc4 <move_window.part.0>
			if (res != FR_OK) break;
 80183fe:	2800      	cmp	r0, #0
 8018400:	d1a5      	bne.n	801834e <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8018402:	00ad      	lsls	r5, r5, #2
 8018404:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8018408:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
 801840c:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8018410:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8018412:	1941      	adds	r1, r0, r5
 8018414:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8018418:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
 801841a:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801841c:	5542      	strb	r2, [r0, r5]
 801841e:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8018420:	708b      	strb	r3, [r1, #2]
 8018422:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
 8018424:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8018426:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
 8018428:	70ca      	strb	r2, [r1, #3]
			break;
 801842a:	2000      	movs	r0, #0
			fs->wflag = 1;
 801842c:	70e3      	strb	r3, [r4, #3]
}
 801842e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8018432:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
 8018436:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8018438:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 801843a:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801843c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018440:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018442:	4299      	cmp	r1, r3
 8018444:	d005      	beq.n	8018452 <put_fat.part.0+0x11e>
 8018446:	4620      	mov	r0, r4
 8018448:	f7ff fdbc 	bl	8017fc4 <move_window.part.0>
			if (res != FR_OK) break;
 801844c:	2800      	cmp	r0, #0
 801844e:	f47f af7e 	bne.w	801834e <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8018452:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8018456:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
 801845a:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801845c:	f898 3000 	ldrb.w	r3, [r8]
 8018460:	f023 060f 	bic.w	r6, r3, #15
 8018464:	4332      	orrs	r2, r6
 8018466:	e7bb      	b.n	80183e0 <put_fat.part.0+0xac>

08018468 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8018468:	2901      	cmp	r1, #1
 801846a:	d90e      	bls.n	801848a <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 801846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801846e:	6983      	ldr	r3, [r0, #24]
 8018470:	460c      	mov	r4, r1
 8018472:	4605      	mov	r5, r0
 8018474:	4299      	cmp	r1, r3
 8018476:	d206      	bcs.n	8018486 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 8018478:	7803      	ldrb	r3, [r0, #0]
 801847a:	2b02      	cmp	r3, #2
 801847c:	d03e      	beq.n	80184fc <get_fat.isra.0+0x94>
 801847e:	2b03      	cmp	r3, #3
 8018480:	d02b      	beq.n	80184da <get_fat.isra.0+0x72>
 8018482:	2b01      	cmp	r3, #1
 8018484:	d003      	beq.n	801848e <get_fat.isra.0+0x26>
 8018486:	2001      	movs	r0, #1
}
 8018488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 801848a:	2001      	movs	r0, #1
}
 801848c:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
 801848e:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018492:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018494:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018496:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 801849a:	4291      	cmp	r1, r2
 801849c:	d004      	beq.n	80184a8 <get_fat.isra.0+0x40>
 801849e:	f7ff fd91 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80184a2:	bba0      	cbnz	r0, 801850e <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80184a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80184a6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80184a8:	1c77      	adds	r7, r6, #1
 80184aa:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80184ae:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80184b2:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 80184b4:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 80184b6:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80184ba:	d003      	beq.n	80184c4 <get_fat.isra.0+0x5c>
 80184bc:	4628      	mov	r0, r5
 80184be:	f7ff fd81 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80184c2:	bb20      	cbnz	r0, 801850e <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
 80184c4:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80184c8:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80184ca:	443d      	add	r5, r7
 80184cc:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 80184d0:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80184d4:	d524      	bpl.n	8018520 <get_fat.isra.0+0xb8>
 80184d6:	0900      	lsrs	r0, r0, #4
}
 80184d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80184da:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80184dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80184de:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80184e2:	4299      	cmp	r1, r3
 80184e4:	d002      	beq.n	80184ec <get_fat.isra.0+0x84>
 80184e6:	f7ff fd6d 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80184ea:	b980      	cbnz	r0, 801850e <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80184ec:	00a4      	lsls	r4, r4, #2
 80184ee:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 80184f2:	4425      	add	r5, r4
 80184f4:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80184f6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 80184fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80184fc:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80184fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018500:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018504:	4299      	cmp	r1, r3
 8018506:	d005      	beq.n	8018514 <get_fat.isra.0+0xac>
 8018508:	f7ff fd5c 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801850c:	b110      	cbz	r0, 8018514 <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801850e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8018512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8018514:	0064      	lsls	r4, r4, #1
 8018516:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 801851a:	4425      	add	r5, r4
 801851c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
 801851e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8018520:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 8018524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018526:	bf00      	nop

08018528 <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 8018528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801852c:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801852e:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018530:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018532:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8018536:	d22c      	bcs.n	8018592 <dir_next.constprop.0+0x6a>
 8018538:	b35b      	cbz	r3, 8018592 <dir_next.constprop.0+0x6a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801853a:	f3c5 0708 	ubfx	r7, r5, #0, #9
 801853e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8018540:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8018542:	b137      	cbz	r7, 8018552 <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018544:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
 8018546:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8018548:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801854a:	443e      	add	r6, r7
 801854c:	6226      	str	r6, [r4, #32]
}
 801854e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
 8018552:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8018554:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8018556:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8018558:	b1f1      	cbz	r1, 8018598 <dir_next.constprop.0+0x70>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801855a:	8973      	ldrh	r3, [r6, #10]
 801855c:	3b01      	subs	r3, #1
 801855e:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 8018562:	d1ef      	bne.n	8018544 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8018564:	4630      	mov	r0, r6
 8018566:	f7ff ff7f 	bl	8018468 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801856a:	2801      	cmp	r0, #1
 801856c:	d91c      	bls.n	80185a8 <dir_next.constprop.0+0x80>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801856e:	1c43      	adds	r3, r0, #1
 8018570:	d01c      	beq.n	80185ac <dir_next.constprop.0+0x84>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8018572:	69b3      	ldr	r3, [r6, #24]
 8018574:	4298      	cmp	r0, r3
 8018576:	d213      	bcs.n	80185a0 <dir_next.constprop.0+0x78>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018578:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 801857a:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 801857c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801857e:	4298      	cmp	r0, r3
 8018580:	d204      	bcs.n	801858c <dir_next.constprop.0+0x64>
	return clst * fs->csize + fs->database;
 8018582:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 8018586:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8018588:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
 801858c:	f8c4 801c 	str.w	r8, [r4, #28]
 8018590:	e7d8      	b.n	8018544 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018592:	2004      	movs	r0, #4
}
 8018594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8018598:	8933      	ldrh	r3, [r6, #8]
 801859a:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 801859e:	d8d1      	bhi.n	8018544 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
 80185a0:	2300      	movs	r3, #0
 80185a2:	2004      	movs	r0, #4
 80185a4:	61e3      	str	r3, [r4, #28]
 80185a6:	e7d2      	b.n	801854e <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80185a8:	2002      	movs	r0, #2
 80185aa:	e7d0      	b.n	801854e <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80185ac:	2001      	movs	r0, #1
 80185ae:	e7ce      	b.n	801854e <dir_next.constprop.0+0x26>

080185b0 <dir_read.constprop.0>:
FRESULT dir_read (
 80185b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 80185b4:	f8d0 a01c 	ldr.w	sl, [r0, #28]
FRESULT dir_read (
 80185b8:	b083      	sub	sp, #12
 80185ba:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80185bc:	6806      	ldr	r6, [r0, #0]
	while (dp->sect) {
 80185be:	f1ba 0f00 	cmp.w	sl, #0
 80185c2:	d064      	beq.n	801868e <dir_read.constprop.0+0xde>
	BYTE ord = 0xFF, sum = 0xFF;
 80185c4:	f04f 09ff 	mov.w	r9, #255	; 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80185c8:	f106 0834 	add.w	r8, r6, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
 80185cc:	464f      	mov	r7, r9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80185ce:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80185d0:	4555      	cmp	r5, sl
 80185d2:	d015      	beq.n	8018600 <dir_read.constprop.0+0x50>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80185d4:	78f3      	ldrb	r3, [r6, #3]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	f040 80d6 	bne.w	8018788 <dir_read.constprop.0+0x1d8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80185dc:	2301      	movs	r3, #1
 80185de:	4652      	mov	r2, sl
 80185e0:	4641      	mov	r1, r8
 80185e2:	7870      	ldrb	r0, [r6, #1]
 80185e4:	f7ff fb92 	bl	8017d0c <disk_read>
 80185e8:	b140      	cbz	r0, 80185fc <dir_read.constprop.0+0x4c>
			fs->winsect = sector;
 80185ea:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 80185ee:	2001      	movs	r0, #1
			fs->winsect = sector;
 80185f0:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80185f2:	2300      	movs	r3, #0
 80185f4:	61e3      	str	r3, [r4, #28]
}
 80185f6:	b003      	add	sp, #12
 80185f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80185fc:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8018600:	6a21      	ldr	r1, [r4, #32]
 8018602:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 8018604:	2a00      	cmp	r2, #0
 8018606:	d042      	beq.n	801868e <dir_read.constprop.0+0xde>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8018608:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801860a:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801860c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018610:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8018612:	d005      	beq.n	8018620 <dir_read.constprop.0+0x70>
 8018614:	2a2e      	cmp	r2, #46	; 0x2e
 8018616:	d003      	beq.n	8018620 <dir_read.constprop.0+0x70>
 8018618:	f023 0020 	bic.w	r0, r3, #32
 801861c:	2808      	cmp	r0, #8
 801861e:	d13d      	bne.n	801869c <dir_read.constprop.0+0xec>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018620:	6965      	ldr	r5, [r4, #20]
				ord = 0xFF;
 8018622:	27ff      	movs	r7, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018624:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018626:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 801862a:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 801862e:	d22e      	bcs.n	801868e <dir_read.constprop.0+0xde>
 8018630:	f1ba 0f00 	cmp.w	sl, #0
 8018634:	d02b      	beq.n	801868e <dir_read.constprop.0+0xde>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8018636:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 801863a:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801863c:	bb4a      	cbnz	r2, 8018692 <dir_read.constprop.0+0xe2>
		dp->sect++;				/* Next sector */
 801863e:	f10a 0a01 	add.w	sl, sl, #1
		if (!dp->clust) {		/* Static table */
 8018642:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8018644:	f8c4 a01c 	str.w	sl, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8018648:	b969      	cbnz	r1, 8018666 <dir_read.constprop.0+0xb6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801864a:	891a      	ldrh	r2, [r3, #8]
 801864c:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8018650:	d91d      	bls.n	801868e <dir_read.constprop.0+0xde>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018652:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8018654:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018656:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 8018658:	f1ba 0f00 	cmp.w	sl, #0
 801865c:	d1b7      	bne.n	80185ce <dir_read.constprop.0+0x1e>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801865e:	2000      	movs	r0, #0
}
 8018660:	b003      	add	sp, #12
 8018662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8018666:	895a      	ldrh	r2, [r3, #10]
 8018668:	3a01      	subs	r2, #1
 801866a:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 801866e:	d1f0      	bne.n	8018652 <dir_read.constprop.0+0xa2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8018670:	4618      	mov	r0, r3
 8018672:	9301      	str	r3, [sp, #4]
 8018674:	f7ff fef8 	bl	8018468 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018678:	2801      	cmp	r0, #1
 801867a:	f240 80ba 	bls.w	80187f2 <dir_read.constprop.0+0x242>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801867e:	1c43      	adds	r3, r0, #1
 8018680:	f000 8089 	beq.w	8018796 <dir_read.constprop.0+0x1e6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8018684:	9b01      	ldr	r3, [sp, #4]
 8018686:	699a      	ldr	r2, [r3, #24]
 8018688:	4290      	cmp	r0, r2
 801868a:	f0c0 80a5 	bcc.w	80187d8 <dir_read.constprop.0+0x228>
	FRESULT res = FR_NO_FILE;
 801868e:	2004      	movs	r0, #4
 8018690:	e7af      	b.n	80185f2 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018692:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8018694:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018696:	441a      	add	r2, r3
 8018698:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
 801869a:	e798      	b.n	80185ce <dir_read.constprop.0+0x1e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 801869c:	2b0f      	cmp	r3, #15
 801869e:	f040 80b0 	bne.w	8018802 <dir_read.constprop.0+0x252>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80186a2:	0650      	lsls	r0, r2, #25
						dp->blk_ofs = dp->dptr;
 80186a4:	6965      	ldr	r5, [r4, #20]
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80186a6:	d578      	bpl.n	801879a <dir_read.constprop.0+0x1ea>
						c &= (BYTE)~LLEF; ord = c;
 80186a8:	f002 07bf 	and.w	r7, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 80186ac:	f891 900d 	ldrb.w	r9, [r1, #13]
						dp->blk_ofs = dp->dptr;
 80186b0:	6325      	str	r5, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80186b2:	7b4b      	ldrb	r3, [r1, #13]
 80186b4:	454b      	cmp	r3, r9
 80186b6:	d1b4      	bne.n	8018622 <dir_read.constprop.0+0x72>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80186b8:	8b4b      	ldrh	r3, [r1, #26]
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d1b1      	bne.n	8018622 <dir_read.constprop.0+0x72>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80186be:	780b      	ldrb	r3, [r1, #0]
 80186c0:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 80186c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80186c8:	3b01      	subs	r3, #1
 80186ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80186ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80186d2:	2bfe      	cmp	r3, #254	; 0xfe
 80186d4:	d8a5      	bhi.n	8018622 <dir_read.constprop.0+0x72>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80186d6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 80186da:	1c5a      	adds	r2, r3, #1
 80186dc:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
 80186e0:	f8b1 e003 	ldrh.w	lr, [r1, #3]
		if (wc) {
 80186e4:	2800      	cmp	r0, #0
 80186e6:	f040 8094 	bne.w	8018812 <dir_read.constprop.0+0x262>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80186ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186ee:	459e      	cmp	lr, r3
 80186f0:	d197      	bne.n	8018622 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 80186f2:	f8b1 b005 	ldrh.w	fp, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80186f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186fa:	459b      	cmp	fp, r3
 80186fc:	d191      	bne.n	8018622 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 80186fe:	f8b1 a007 	ldrh.w	sl, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018702:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018706:	459a      	cmp	sl, r3
 8018708:	d18b      	bne.n	8018622 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 801870a:	f8b1 e009 	ldrh.w	lr, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801870e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018712:	459e      	cmp	lr, r3
 8018714:	d185      	bne.n	8018622 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 8018716:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801871a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801871e:	459a      	cmp	sl, r3
 8018720:	f47f af7f 	bne.w	8018622 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 8018724:	f8b1 b010 	ldrh.w	fp, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801872c:	459b      	cmp	fp, r3
 801872e:	f47f af78 	bne.w	8018622 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 8018732:	f8b1 e012 	ldrh.w	lr, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801873a:	459e      	cmp	lr, r3
 801873c:	f47f af71 	bne.w	8018622 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 8018740:	f8b1 a014 	ldrh.w	sl, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018748:	459a      	cmp	sl, r3
 801874a:	f47f af6a 	bne.w	8018622 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 801874e:	f8b1 e016 	ldrh.w	lr, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018756:	459e      	cmp	lr, r3
 8018758:	f47f af63 	bne.w	8018622 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 801875c:	f8b1 a018 	ldrh.w	sl, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018764:	459a      	cmp	sl, r3
 8018766:	f47f af5c 	bne.w	8018622 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 801876a:	f8b1 e01c 	ldrh.w	lr, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801876e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018772:	459e      	cmp	lr, r3
 8018774:	f47f af55 	bne.w	8018622 <dir_read.constprop.0+0x72>
	rv = ptr[1];
 8018778:	f8b1 a01e 	ldrh.w	sl, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801877c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018780:	459a      	cmp	sl, r3
 8018782:	f000 80d5 	beq.w	8018930 <dir_read.constprop.0+0x380>
 8018786:	e74c      	b.n	8018622 <dir_read.constprop.0+0x72>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018788:	2301      	movs	r3, #1
 801878a:	462a      	mov	r2, r5
 801878c:	4641      	mov	r1, r8
 801878e:	7870      	ldrb	r0, [r6, #1]
 8018790:	f7ff faca 	bl	8017d28 <disk_write>
 8018794:	b128      	cbz	r0, 80187a2 <dir_read.constprop.0+0x1f2>
	FRESULT res = FR_NO_FILE;
 8018796:	2001      	movs	r0, #1
 8018798:	e72b      	b.n	80185f2 <dir_read.constprop.0+0x42>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801879a:	42ba      	cmp	r2, r7
 801879c:	f47f af41 	bne.w	8018622 <dir_read.constprop.0+0x72>
 80187a0:	e787      	b.n	80186b2 <dir_read.constprop.0+0x102>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80187a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
 80187a4:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80187a6:	1aea      	subs	r2, r5, r3
 80187a8:	69f3      	ldr	r3, [r6, #28]
 80187aa:	429a      	cmp	r2, r3
 80187ac:	f4bf af16 	bcs.w	80185dc <dir_read.constprop.0+0x2c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80187b0:	f896 b002 	ldrb.w	fp, [r6, #2]
 80187b4:	f1bb 0f01 	cmp.w	fp, #1
 80187b8:	d801      	bhi.n	80187be <dir_read.constprop.0+0x20e>
 80187ba:	e70f      	b.n	80185dc <dir_read.constprop.0+0x2c>
					wsect += fs->fsize;
 80187bc:	69f3      	ldr	r3, [r6, #28]
 80187be:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80187c0:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80187c4:	2301      	movs	r3, #1
 80187c6:	4641      	mov	r1, r8
 80187c8:	462a      	mov	r2, r5
 80187ca:	7870      	ldrb	r0, [r6, #1]
 80187cc:	f7ff faac 	bl	8017d28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80187d0:	f1bb 0f01 	cmp.w	fp, #1
 80187d4:	d1f2      	bne.n	80187bc <dir_read.constprop.0+0x20c>
 80187d6:	e701      	b.n	80185dc <dir_read.constprop.0+0x2c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80187d8:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80187da:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 80187dc:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80187de:	4290      	cmp	r0, r2
 80187e0:	d209      	bcs.n	80187f6 <dir_read.constprop.0+0x246>
	return clst * fs->csize + fs->database;
 80187e2:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
 80187e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187e8:	fb00 2a0a 	mla	sl, r0, sl, r2
				dp->sect = clust2sect(fs, clst);
 80187ec:	f8c4 a01c 	str.w	sl, [r4, #28]
 80187f0:	e72f      	b.n	8018652 <dir_read.constprop.0+0xa2>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80187f2:	2002      	movs	r0, #2
 80187f4:	e6fd      	b.n	80185f2 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80187f6:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 80187f8:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 80187fc:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80187fe:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 8018800:	e72d      	b.n	801865e <dir_read.constprop.0+0xae>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8018802:	2f00      	cmp	r7, #0
 8018804:	f000 809f 	beq.w	8018946 <dir_read.constprop.0+0x396>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8018808:	f04f 33ff 	mov.w	r3, #4294967295
 801880c:	2000      	movs	r0, #0
 801880e:	6323      	str	r3, [r4, #48]	; 0x30
 8018810:	e6f1      	b.n	80185f6 <dir_read.constprop.0+0x46>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018812:	2aff      	cmp	r2, #255	; 0xff
 8018814:	f000 80e1 	beq.w	80189da <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018818:	f82c e012 	strh.w	lr, [ip, r2, lsl #1]
 801881c:	0050      	lsls	r0, r2, #1
 801881e:	f8b1 b005 	ldrh.w	fp, [r1, #5]
 8018822:	1c9a      	adds	r2, r3, #2
		if (wc) {
 8018824:	f1be 0f00 	cmp.w	lr, #0
 8018828:	f43f af65 	beq.w	80186f6 <dir_read.constprop.0+0x146>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801882c:	2aff      	cmp	r2, #255	; 0xff
 801882e:	f000 80d4 	beq.w	80189da <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018832:	4460      	add	r0, ip
 8018834:	1cda      	adds	r2, r3, #3
 8018836:	f8a0 b002 	strh.w	fp, [r0, #2]
 801883a:	f8b1 a007 	ldrh.w	sl, [r1, #7]
		if (wc) {
 801883e:	f1bb 0f00 	cmp.w	fp, #0
 8018842:	f43f af5e 	beq.w	8018702 <dir_read.constprop.0+0x152>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018846:	2aff      	cmp	r2, #255	; 0xff
 8018848:	f000 80c7 	beq.w	80189da <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801884c:	f8a0 a004 	strh.w	sl, [r0, #4]
 8018850:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
 8018852:	f8b1 e009 	ldrh.w	lr, [r1, #9]
		if (wc) {
 8018856:	f1ba 0f00 	cmp.w	sl, #0
 801885a:	f43f af58 	beq.w	801870e <dir_read.constprop.0+0x15e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801885e:	2aff      	cmp	r2, #255	; 0xff
 8018860:	f000 80bb 	beq.w	80189da <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018864:	f8a0 e006 	strh.w	lr, [r0, #6]
 8018868:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
 801886a:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
		if (wc) {
 801886e:	f1be 0f00 	cmp.w	lr, #0
 8018872:	f43f af52 	beq.w	801871a <dir_read.constprop.0+0x16a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018876:	2aff      	cmp	r2, #255	; 0xff
 8018878:	f000 80af 	beq.w	80189da <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801887c:	f8a0 a008 	strh.w	sl, [r0, #8]
 8018880:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
 8018882:	f8b1 b010 	ldrh.w	fp, [r1, #16]
		if (wc) {
 8018886:	f1ba 0f00 	cmp.w	sl, #0
 801888a:	f43f af4d 	beq.w	8018728 <dir_read.constprop.0+0x178>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801888e:	2aff      	cmp	r2, #255	; 0xff
 8018890:	f000 80a3 	beq.w	80189da <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018894:	f8a0 b00a 	strh.w	fp, [r0, #10]
 8018898:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
 801889a:	f8b1 e012 	ldrh.w	lr, [r1, #18]
		if (wc) {
 801889e:	f1bb 0f00 	cmp.w	fp, #0
 80188a2:	f43f af48 	beq.w	8018736 <dir_read.constprop.0+0x186>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80188a6:	2aff      	cmp	r2, #255	; 0xff
 80188a8:	f000 8097 	beq.w	80189da <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80188ac:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80188b0:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
 80188b4:	f8b1 a014 	ldrh.w	sl, [r1, #20]
		if (wc) {
 80188b8:	f1be 0f00 	cmp.w	lr, #0
 80188bc:	f43f af42 	beq.w	8018744 <dir_read.constprop.0+0x194>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80188c0:	2aff      	cmp	r2, #255	; 0xff
 80188c2:	f000 808a 	beq.w	80189da <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80188c6:	f8a0 a00e 	strh.w	sl, [r0, #14]
 80188ca:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
 80188ce:	f8b1 e016 	ldrh.w	lr, [r1, #22]
		if (wc) {
 80188d2:	f1ba 0f00 	cmp.w	sl, #0
 80188d6:	f43f af3c 	beq.w	8018752 <dir_read.constprop.0+0x1a2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80188da:	2aff      	cmp	r2, #255	; 0xff
 80188dc:	f43f aea1 	beq.w	8018622 <dir_read.constprop.0+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80188e0:	f8a0 e010 	strh.w	lr, [r0, #16]
 80188e4:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
 80188e8:	f8b1 a018 	ldrh.w	sl, [r1, #24]
		if (wc) {
 80188ec:	f1be 0f00 	cmp.w	lr, #0
 80188f0:	f43f af36 	beq.w	8018760 <dir_read.constprop.0+0x1b0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80188f4:	2aff      	cmp	r2, #255	; 0xff
 80188f6:	d070      	beq.n	80189da <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80188f8:	f8a0 a012 	strh.w	sl, [r0, #18]
 80188fc:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
 8018900:	f8b1 e01c 	ldrh.w	lr, [r1, #28]
		if (wc) {
 8018904:	f1ba 0f00 	cmp.w	sl, #0
 8018908:	f43f af31 	beq.w	801876e <dir_read.constprop.0+0x1be>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801890c:	2aff      	cmp	r2, #255	; 0xff
 801890e:	d064      	beq.n	80189da <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018910:	f8a0 e014 	strh.w	lr, [r0, #20]
 8018914:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
 8018918:	f8b1 a01e 	ldrh.w	sl, [r1, #30]
		if (wc) {
 801891c:	f1be 0f00 	cmp.w	lr, #0
 8018920:	f43f af2c 	beq.w	801877c <dir_read.constprop.0+0x1cc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018924:	2aff      	cmp	r2, #255	; 0xff
 8018926:	d058      	beq.n	80189da <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018928:	f103 020d 	add.w	r2, r3, #13
 801892c:	f8a0 a016 	strh.w	sl, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8018930:	780b      	ldrb	r3, [r1, #0]
 8018932:	0659      	lsls	r1, r3, #25
 8018934:	d504      	bpl.n	8018940 <dir_read.constprop.0+0x390>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8018936:	2aff      	cmp	r2, #255	; 0xff
 8018938:	d04f      	beq.n	80189da <dir_read.constprop.0+0x42a>
		lfnbuf[i] = 0;
 801893a:	2300      	movs	r3, #0
 801893c:	f82c 3012 	strh.w	r3, [ip, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018940:	3f01      	subs	r7, #1
 8018942:	b2ff      	uxtb	r7, r7
 8018944:	e66e      	b.n	8018624 <dir_read.constprop.0+0x74>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018946:	780a      	ldrb	r2, [r1, #0]
 8018948:	01d3      	lsls	r3, r2, #7
 801894a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 801894e:	784a      	ldrb	r2, [r1, #1]
 8018950:	441a      	add	r2, r3
 8018952:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8018956:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801895a:	788a      	ldrb	r2, [r1, #2]
 801895c:	fa52 f283 	uxtab	r2, r2, r3
 8018960:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8018964:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8018968:	78ca      	ldrb	r2, [r1, #3]
 801896a:	fa52 f283 	uxtab	r2, r2, r3
 801896e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8018972:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8018976:	790a      	ldrb	r2, [r1, #4]
 8018978:	fa52 f283 	uxtab	r2, r2, r3
 801897c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8018980:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8018984:	794a      	ldrb	r2, [r1, #5]
 8018986:	fa52 f283 	uxtab	r2, r2, r3
 801898a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801898e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8018992:	798a      	ldrb	r2, [r1, #6]
 8018994:	fa52 f283 	uxtab	r2, r2, r3
 8018998:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801899c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80189a0:	79ca      	ldrb	r2, [r1, #7]
 80189a2:	fa52 f283 	uxtab	r2, r2, r3
 80189a6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80189aa:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80189ae:	7a0a      	ldrb	r2, [r1, #8]
 80189b0:	fa52 f283 	uxtab	r2, r2, r3
 80189b4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80189b8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80189bc:	7a4a      	ldrb	r2, [r1, #9]
 80189be:	7a89      	ldrb	r1, [r1, #10]
 80189c0:	fa52 f283 	uxtab	r2, r2, r3
 80189c4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80189c8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80189cc:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80189d0:	b2db      	uxtb	r3, r3
 80189d2:	4599      	cmp	r9, r3
 80189d4:	f47f af18 	bne.w	8018808 <dir_read.constprop.0+0x258>
 80189d8:	e641      	b.n	801865e <dir_read.constprop.0+0xae>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80189da:	4617      	mov	r7, r2
 80189dc:	e622      	b.n	8018624 <dir_read.constprop.0+0x74>
 80189de:	bf00      	nop

080189e0 <sync_fs>:
{
 80189e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80189e2:	78c3      	ldrb	r3, [r0, #3]
{
 80189e4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80189e6:	b95b      	cbnz	r3, 8018a00 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80189e8:	7823      	ldrb	r3, [r4, #0]
 80189ea:	2b03      	cmp	r3, #3
 80189ec:	d029      	beq.n	8018a42 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80189ee:	2200      	movs	r2, #0
 80189f0:	7860      	ldrb	r0, [r4, #1]
 80189f2:	4611      	mov	r1, r2
 80189f4:	f7ff f9a6 	bl	8017d44 <disk_ioctl>
			res = FR_DISK_ERR;
 80189f8:	3800      	subs	r0, #0
 80189fa:	bf18      	it	ne
 80189fc:	2001      	movne	r0, #1
}
 80189fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8018a00:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018a02:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8018a06:	2301      	movs	r3, #1
 8018a08:	7840      	ldrb	r0, [r0, #1]
 8018a0a:	462a      	mov	r2, r5
 8018a0c:	4639      	mov	r1, r7
 8018a0e:	f7ff f98b 	bl	8017d28 <disk_write>
 8018a12:	2800      	cmp	r0, #0
 8018a14:	d150      	bne.n	8018ab8 <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018a16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018a18:	69e3      	ldr	r3, [r4, #28]
 8018a1a:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8018a1c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018a1e:	429a      	cmp	r2, r3
 8018a20:	d2e2      	bcs.n	80189e8 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018a22:	78a6      	ldrb	r6, [r4, #2]
 8018a24:	2e01      	cmp	r6, #1
 8018a26:	d801      	bhi.n	8018a2c <sync_fs+0x4c>
 8018a28:	e7de      	b.n	80189e8 <sync_fs+0x8>
					wsect += fs->fsize;
 8018a2a:	69e3      	ldr	r3, [r4, #28]
 8018a2c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018a2e:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8018a30:	2301      	movs	r3, #1
 8018a32:	4639      	mov	r1, r7
 8018a34:	462a      	mov	r2, r5
 8018a36:	7860      	ldrb	r0, [r4, #1]
 8018a38:	f7ff f976 	bl	8017d28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018a3c:	2e01      	cmp	r6, #1
 8018a3e:	d1f4      	bne.n	8018a2a <sync_fs+0x4a>
 8018a40:	e7d2      	b.n	80189e8 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8018a42:	7925      	ldrb	r5, [r4, #4]
 8018a44:	2d01      	cmp	r5, #1
 8018a46:	d1d2      	bne.n	80189ee <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8018a48:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 8018a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018a50:	2100      	movs	r1, #0
 8018a52:	4630      	mov	r0, r6
 8018a54:	f00c fe8c 	bl	8025770 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8018a58:	f64a 2055 	movw	r0, #43605	; 0xaa55
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8018a5c:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8018a5e:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8018a60:	f8a4 0232 	strh.w	r0, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8018a64:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
 8018a66:	4815      	ldr	r0, [pc, #84]	; (8018abc <sync_fs+0xdc>)
 8018a68:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
 8018a6c:	6360      	str	r0, [r4, #52]	; 0x34
 8018a6e:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
 8018a72:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 8018a76:	3020      	adds	r0, #32
 8018a78:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 8018a7c:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8018a7e:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
 8018a82:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8018a84:	0e12      	lsrs	r2, r2, #24
 8018a86:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8018a8a:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val;
 8018a8c:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 8018a90:	0a05      	lsrs	r5, r0, #8
			fs->winsect = fs->volbase + 1;
 8018a92:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8018a94:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
 8018a98:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8018a9a:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
 8018a9e:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8018aa0:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
 8018aa2:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8018aa4:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 8018aa8:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8018aac:	7860      	ldrb	r0, [r4, #1]
 8018aae:	f7ff f93b 	bl	8017d28 <disk_write>
			fs->fsi_flag = 0;
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	7123      	strb	r3, [r4, #4]
 8018ab6:	e79a      	b.n	80189ee <sync_fs+0xe>
			res = FR_DISK_ERR;
 8018ab8:	2001      	movs	r0, #1
}
 8018aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018abc:	41615252 	.word	0x41615252

08018ac0 <create_chain>:
{
 8018ac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ac4:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
 8018ac6:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
 8018ac8:	f8d0 9000 	ldr.w	r9, [r0]
	if (clst == 0) {	/* Create a new chain */
 8018acc:	2900      	cmp	r1, #0
 8018ace:	f040 80b4 	bne.w	8018c3a <create_chain+0x17a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8018ad2:	f8d9 6010 	ldr.w	r6, [r9, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8018ad6:	f8d9 3018 	ldr.w	r3, [r9, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8018ada:	b9ce      	cbnz	r6, 8018b10 <create_chain+0x50>
 8018adc:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 8018ade:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8018ae0:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8018ae2:	429c      	cmp	r4, r3
 8018ae4:	d318      	bcc.n	8018b18 <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
 8018ae6:	2e01      	cmp	r6, #1
 8018ae8:	f000 80a3 	beq.w	8018c32 <create_chain+0x172>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8018aec:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
 8018af0:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8018af2:	69ab      	ldr	r3, [r5, #24]
 8018af4:	42a3      	cmp	r3, r4
 8018af6:	d907      	bls.n	8018b08 <create_chain+0x48>
		switch (fs->fs_type) {
 8018af8:	782b      	ldrb	r3, [r5, #0]
 8018afa:	2b02      	cmp	r3, #2
 8018afc:	f000 8088 	beq.w	8018c10 <create_chain+0x150>
 8018b00:	2b03      	cmp	r3, #3
 8018b02:	d044      	beq.n	8018b8e <create_chain+0xce>
 8018b04:	2b01      	cmp	r3, #1
 8018b06:	d00c      	beq.n	8018b22 <create_chain+0x62>
 8018b08:	2401      	movs	r4, #1
}
 8018b0a:	4620      	mov	r0, r4
 8018b0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8018b10:	42b3      	cmp	r3, r6
 8018b12:	bf98      	it	ls
 8018b14:	2601      	movls	r6, #1
 8018b16:	e7e2      	b.n	8018ade <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8018b18:	2c01      	cmp	r4, #1
 8018b1a:	f8da 5000 	ldr.w	r5, [sl]
 8018b1e:	d9f3      	bls.n	8018b08 <create_chain+0x48>
 8018b20:	e7e7      	b.n	8018af2 <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
 8018b22:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018b26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018b28:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018b2a:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018b2e:	4291      	cmp	r1, r2
 8018b30:	d005      	beq.n	8018b3e <create_chain+0x7e>
 8018b32:	4628      	mov	r0, r5
 8018b34:	f7ff fa46 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018b38:	bb20      	cbnz	r0, 8018b84 <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018b3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018b3c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8018b3e:	f107 0b01 	add.w	fp, r7, #1
 8018b42:	f3c7 0708 	ubfx	r7, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018b46:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8018b4a:	442f      	add	r7, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018b4c:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8018b4e:	f897 7034 	ldrb.w	r7, [r7, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018b52:	d003      	beq.n	8018b5c <create_chain+0x9c>
 8018b54:	4628      	mov	r0, r5
 8018b56:	f7ff fa35 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018b5a:	b998      	cbnz	r0, 8018b84 <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
 8018b5c:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8018b60:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8018b62:	445d      	add	r5, fp
 8018b64:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8018b68:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8018b6c:	d575      	bpl.n	8018c5a <create_chain+0x19a>
 8018b6e:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
 8018b70:	b30b      	cbz	r3, 8018bb6 <create_chain+0xf6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8018b72:	2b01      	cmp	r3, #1
 8018b74:	d0c8      	beq.n	8018b08 <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
 8018b76:	42a6      	cmp	r6, r4
 8018b78:	d05b      	beq.n	8018c32 <create_chain+0x172>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8018b7a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8018b7e:	e7af      	b.n	8018ae0 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8018b80:	2801      	cmp	r0, #1
 8018b82:	d1c1      	bne.n	8018b08 <create_chain+0x48>
 8018b84:	f04f 34ff 	mov.w	r4, #4294967295
}
 8018b88:	4620      	mov	r0, r4
 8018b8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018b8e:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018b90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018b92:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018b96:	4299      	cmp	r1, r3
 8018b98:	d004      	beq.n	8018ba4 <create_chain+0xe4>
 8018b9a:	4628      	mov	r0, r5
 8018b9c:	f7ff fa12 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018ba0:	2800      	cmp	r0, #0
 8018ba2:	d1ef      	bne.n	8018b84 <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8018ba4:	00a3      	lsls	r3, r4, #2
 8018ba6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8018baa:	441d      	add	r5, r3
 8018bac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8018bae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d1dd      	bne.n	8018b72 <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8018bb6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8018bba:	42a3      	cmp	r3, r4
 8018bbc:	d9a4      	bls.n	8018b08 <create_chain+0x48>
 8018bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8018bc2:	4621      	mov	r1, r4
 8018bc4:	4648      	mov	r0, r9
 8018bc6:	f7ff fbb5 	bl	8018334 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 8018bca:	b970      	cbnz	r0, 8018bea <create_chain+0x12a>
 8018bcc:	f1b8 0f00 	cmp.w	r8, #0
 8018bd0:	d00b      	beq.n	8018bea <create_chain+0x12a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8018bd2:	f1b8 0f01 	cmp.w	r8, #1
 8018bd6:	d097      	beq.n	8018b08 <create_chain+0x48>
 8018bd8:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8018bdc:	4598      	cmp	r8, r3
 8018bde:	d293      	bcs.n	8018b08 <create_chain+0x48>
 8018be0:	4622      	mov	r2, r4
 8018be2:	4641      	mov	r1, r8
 8018be4:	4648      	mov	r0, r9
 8018be6:	f7ff fba5 	bl	8018334 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8018bea:	2800      	cmp	r0, #0
 8018bec:	d1c8      	bne.n	8018b80 <create_chain+0xc0>
		fs->last_clst = ncl;
 8018bee:	f8c9 4010 	str.w	r4, [r9, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8018bf2:	e9d9 2305 	ldrd	r2, r3, [r9, #20]
 8018bf6:	3b02      	subs	r3, #2
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	d802      	bhi.n	8018c02 <create_chain+0x142>
 8018bfc:	3a01      	subs	r2, #1
 8018bfe:	f8c9 2014 	str.w	r2, [r9, #20]
		fs->fsi_flag |= 1;
 8018c02:	f899 3004 	ldrb.w	r3, [r9, #4]
 8018c06:	f043 0301 	orr.w	r3, r3, #1
 8018c0a:	f889 3004 	strb.w	r3, [r9, #4]
 8018c0e:	e77c      	b.n	8018b0a <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018c10:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018c12:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018c14:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018c18:	4299      	cmp	r1, r3
 8018c1a:	d004      	beq.n	8018c26 <create_chain+0x166>
 8018c1c:	4628      	mov	r0, r5
 8018c1e:	f7ff f9d1 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018c22:	2800      	cmp	r0, #0
 8018c24:	d1ae      	bne.n	8018b84 <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8018c26:	0063      	lsls	r3, r4, #1
 8018c28:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8018c2c:	441d      	add	r5, r3
 8018c2e:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
 8018c30:	e79e      	b.n	8018b70 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
 8018c32:	2400      	movs	r4, #0
}
 8018c34:	4620      	mov	r0, r4
 8018c36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8018c3a:	4648      	mov	r0, r9
 8018c3c:	f7ff fc14 	bl	8018468 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8018c40:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8018c42:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8018c44:	f67f af60 	bls.w	8018b08 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8018c48:	1c41      	adds	r1, r0, #1
 8018c4a:	d09b      	beq.n	8018b84 <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8018c4c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8018c50:	4283      	cmp	r3, r0
 8018c52:	f63f af5a 	bhi.w	8018b0a <create_chain+0x4a>
 8018c56:	4646      	mov	r6, r8
 8018c58:	e741      	b.n	8018ade <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8018c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018c5e:	e787      	b.n	8018b70 <create_chain+0xb0>

08018c60 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8018c60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8018c64:	d274      	bcs.n	8018d50 <dir_sdi+0xf0>
 8018c66:	06ca      	lsls	r2, r1, #27
{
 8018c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c6c:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8018c6e:	d151      	bne.n	8018d14 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8018c70:	6885      	ldr	r5, [r0, #8]
 8018c72:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 8018c74:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 8018c78:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8018c7a:	2d00      	cmp	r5, #0
 8018c7c:	d04d      	beq.n	8018d1a <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8018c7e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018c82:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8018c86:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8018c8a:	f0c0 808e 	bcc.w	8018daa <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8018c8e:	2d01      	cmp	r5, #1
 8018c90:	d040      	beq.n	8018d14 <dir_sdi+0xb4>
 8018c92:	4647      	mov	r7, r8
 8018c94:	e03b      	b.n	8018d0e <dir_sdi+0xae>
		switch (fs->fs_type) {
 8018c96:	783b      	ldrb	r3, [r7, #0]
 8018c98:	2b02      	cmp	r3, #2
 8018c9a:	d073      	beq.n	8018d84 <dir_sdi+0x124>
 8018c9c:	2b03      	cmp	r3, #3
 8018c9e:	d05f      	beq.n	8018d60 <dir_sdi+0x100>
 8018ca0:	2b01      	cmp	r3, #1
 8018ca2:	d137      	bne.n	8018d14 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
 8018ca4:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018cac:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018cb0:	4291      	cmp	r1, r2
 8018cb2:	d006      	beq.n	8018cc2 <dir_sdi+0x62>
 8018cb4:	4638      	mov	r0, r7
 8018cb6:	f7ff f985 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018cba:	2800      	cmp	r0, #0
 8018cbc:	d172      	bne.n	8018da4 <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8018cc2:	f10a 0b01 	add.w	fp, sl, #1
 8018cc6:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018cca:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8018cce:	44ba      	add	sl, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018cd0:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8018cd2:	f89a a034 	ldrb.w	sl, [sl, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018cd6:	d004      	beq.n	8018ce2 <dir_sdi+0x82>
 8018cd8:	4638      	mov	r0, r7
 8018cda:	f7ff f973 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018cde:	2800      	cmp	r0, #0
 8018ce0:	d160      	bne.n	8018da4 <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
 8018ce2:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 8018ce6:	445f      	add	r7, fp
 8018ce8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8018cec:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8018cf0:	07eb      	lsls	r3, r5, #31
 8018cf2:	d568      	bpl.n	8018dc6 <dir_sdi+0x166>
 8018cf4:	ea4f 151a 	mov.w	r5, sl, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8018cf8:	2d01      	cmp	r5, #1
 8018cfa:	d90b      	bls.n	8018d14 <dir_sdi+0xb4>
 8018cfc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8018d00:	42ab      	cmp	r3, r5
 8018d02:	d907      	bls.n	8018d14 <dir_sdi+0xb4>
			ofs -= csz;
 8018d04:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 8018d08:	45a1      	cmp	r9, r4
 8018d0a:	d850      	bhi.n	8018dae <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8018d0c:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8018d0e:	69bb      	ldr	r3, [r7, #24]
 8018d10:	42ab      	cmp	r3, r5
 8018d12:	d8c0      	bhi.n	8018c96 <dir_sdi+0x36>
		switch (fs->fs_type) {
 8018d14:	2002      	movs	r0, #2
}
 8018d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8018d1a:	f898 3000 	ldrb.w	r3, [r8]
 8018d1e:	2b02      	cmp	r3, #2
 8018d20:	d818      	bhi.n	8018d54 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8018d22:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8018d26:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8018d2a:	d9f3      	bls.n	8018d14 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
 8018d2c:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 8018d30:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8018d32:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8018d34:	2a00      	cmp	r2, #0
 8018d36:	d0ed      	beq.n	8018d14 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8018d38:	f108 0834 	add.w	r8, r8, #52	; 0x34
 8018d3c:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8018d40:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
 8018d44:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8018d46:	4443      	add	r3, r8
 8018d48:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8018d4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 8018d50:	2002      	movs	r0, #2
}
 8018d52:	4770      	bx	lr
		clst = fs->dirbase;
 8018d54:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d0e2      	beq.n	8018d22 <dir_sdi+0xc2>
 8018d5c:	461d      	mov	r5, r3
 8018d5e:	e78e      	b.n	8018c7e <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018d64:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018d68:	4299      	cmp	r1, r3
 8018d6a:	d003      	beq.n	8018d74 <dir_sdi+0x114>
 8018d6c:	4638      	mov	r0, r7
 8018d6e:	f7ff f929 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018d72:	b9b8      	cbnz	r0, 8018da4 <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8018d74:	00ad      	lsls	r5, r5, #2
 8018d76:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8018d7a:	442f      	add	r7, r5
 8018d7c:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8018d7e:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 8018d82:	e7b9      	b.n	8018cf8 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018d88:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018d8c:	4299      	cmp	r1, r3
 8018d8e:	d003      	beq.n	8018d98 <dir_sdi+0x138>
 8018d90:	4638      	mov	r0, r7
 8018d92:	f7ff f917 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018d96:	b928      	cbnz	r0, 8018da4 <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8018d98:	006d      	lsls	r5, r5, #1
 8018d9a:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 8018d9e:	442f      	add	r7, r5
 8018da0:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
 8018da2:	e7a9      	b.n	8018cf8 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018da4:	2001      	movs	r0, #1
}
 8018da6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018daa:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8018dae:	3b02      	subs	r3, #2
	clst -= 2;
 8018db0:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018db2:	4299      	cmp	r1, r3
 8018db4:	d20a      	bcs.n	8018dcc <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
 8018db6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8018dba:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8018dbe:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
 8018dc2:	61f2      	str	r2, [r6, #28]
 8018dc4:	e7b5      	b.n	8018d32 <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8018dc6:	f3ca 050b 	ubfx	r5, sl, #0, #12
 8018dca:	e795      	b.n	8018cf8 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
 8018dcc:	2300      	movs	r3, #0
 8018dce:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8018dd2:	e79f      	b.n	8018d14 <dir_sdi+0xb4>

08018dd4 <dir_find>:
{
 8018dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8018dd8:	2100      	movs	r1, #0
{
 8018dda:	b085      	sub	sp, #20
 8018ddc:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8018dde:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8018de2:	f7ff ff3d 	bl	8018c60 <dir_sdi>
	if (res != FR_OK) return res;
 8018de6:	4607      	mov	r7, r0
 8018de8:	b9e8      	cbnz	r0, 8018e26 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018dea:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8018dee:	f04f 33ff 	mov.w	r3, #4294967295
		res = move_window(fs, dp->sect);
 8018df2:	69e6      	ldr	r6, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018df4:	46ca      	mov	sl, r9
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018df6:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018df8:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 8018dfc:	42b5      	cmp	r5, r6
 8018dfe:	d018      	beq.n	8018e32 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8018e00:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018e04:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	f040 8088 	bne.w	8018f1e <dir_find+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8018e0e:	2301      	movs	r3, #1
 8018e10:	4632      	mov	r2, r6
 8018e12:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018e16:	f7fe ff79 	bl	8017d0c <disk_read>
 8018e1a:	b140      	cbz	r0, 8018e2e <dir_find+0x5a>
			fs->winsect = sector;
 8018e1c:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8018e20:	2701      	movs	r7, #1
			fs->winsect = sector;
 8018e22:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 8018e26:	4638      	mov	r0, r7
 8018e28:	b005      	add	sp, #20
 8018e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8018e2e:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
 8018e32:	6a26      	ldr	r6, [r4, #32]
 8018e34:	7835      	ldrb	r5, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018e36:	b34d      	cbz	r5, 8018e8c <dir_find+0xb8>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018e38:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018e3a:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018e3c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8018e40:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018e42:	d004      	beq.n	8018e4e <dir_find+0x7a>
 8018e44:	0717      	lsls	r7, r2, #28
 8018e46:	d526      	bpl.n	8018e96 <dir_find+0xc2>
 8018e48:	2b0f      	cmp	r3, #15
 8018e4a:	f000 8093 	beq.w	8018f74 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8018e52:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8018e56:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018e58:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018e5a:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018e5c:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018e5e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8018e62:	d213      	bcs.n	8018e8c <dir_find+0xb8>
 8018e64:	b196      	cbz	r6, 8018e8c <dir_find+0xb8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8018e66:	f3c5 0308 	ubfx	r3, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8018e6a:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8018e6c:	b94b      	cbnz	r3, 8018e82 <dir_find+0xae>
		dp->sect++;				/* Next sector */
 8018e6e:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 8018e70:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8018e72:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8018e74:	2900      	cmp	r1, #0
 8018e76:	d15e      	bne.n	8018f36 <dir_find+0x162>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8018e78:	893a      	ldrh	r2, [r7, #8]
 8018e7a:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8018e7e:	f240 8133 	bls.w	80190e8 <dir_find+0x314>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018e82:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8018e84:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018e86:	443b      	add	r3, r7
 8018e88:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8018e8a:	e7b5      	b.n	8018df8 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018e8c:	2704      	movs	r7, #4
}
 8018e8e:	4638      	mov	r0, r7
 8018e90:	b005      	add	sp, #20
 8018e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8018e96:	2b0f      	cmp	r3, #15
 8018e98:	d06c      	beq.n	8018f74 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018e9a:	f1ba 0f00 	cmp.w	sl, #0
 8018e9e:	f000 80d5 	beq.w	801904c <dir_find+0x278>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018ea2:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
 8018ea6:	f01a 0a01 	ands.w	sl, sl, #1
 8018eaa:	d1d0      	bne.n	8018e4e <dir_find+0x7a>
	} while (--cnt && r == 0);
 8018eac:	7832      	ldrb	r2, [r6, #0]
 8018eae:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8018eb2:	429a      	cmp	r2, r3
 8018eb4:	d1cb      	bne.n	8018e4e <dir_find+0x7a>
 8018eb6:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8018eba:	7873      	ldrb	r3, [r6, #1]
 8018ebc:	429a      	cmp	r2, r3
 8018ebe:	d1c6      	bne.n	8018e4e <dir_find+0x7a>
 8018ec0:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8018ec4:	78b3      	ldrb	r3, [r6, #2]
 8018ec6:	429a      	cmp	r2, r3
 8018ec8:	d1c1      	bne.n	8018e4e <dir_find+0x7a>
 8018eca:	78f2      	ldrb	r2, [r6, #3]
 8018ecc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8018ed0:	429a      	cmp	r2, r3
 8018ed2:	d1bc      	bne.n	8018e4e <dir_find+0x7a>
 8018ed4:	7932      	ldrb	r2, [r6, #4]
 8018ed6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8018eda:	429a      	cmp	r2, r3
 8018edc:	d1b7      	bne.n	8018e4e <dir_find+0x7a>
 8018ede:	7972      	ldrb	r2, [r6, #5]
 8018ee0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8018ee4:	429a      	cmp	r2, r3
 8018ee6:	d1b2      	bne.n	8018e4e <dir_find+0x7a>
 8018ee8:	79b2      	ldrb	r2, [r6, #6]
 8018eea:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8018eee:	429a      	cmp	r2, r3
 8018ef0:	d1ad      	bne.n	8018e4e <dir_find+0x7a>
 8018ef2:	79f2      	ldrb	r2, [r6, #7]
 8018ef4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8018ef8:	429a      	cmp	r2, r3
 8018efa:	d1a8      	bne.n	8018e4e <dir_find+0x7a>
 8018efc:	7a32      	ldrb	r2, [r6, #8]
 8018efe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8018f02:	429a      	cmp	r2, r3
 8018f04:	d1a3      	bne.n	8018e4e <dir_find+0x7a>
 8018f06:	7a72      	ldrb	r2, [r6, #9]
 8018f08:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8018f0c:	429a      	cmp	r2, r3
 8018f0e:	d19e      	bne.n	8018e4e <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018f10:	7ab2      	ldrb	r2, [r6, #10]
 8018f12:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8018f16:	429a      	cmp	r2, r3
 8018f18:	d199      	bne.n	8018e4e <dir_find+0x7a>
 8018f1a:	4657      	mov	r7, sl
 8018f1c:	e783      	b.n	8018e26 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018f1e:	2301      	movs	r3, #1
 8018f20:	462a      	mov	r2, r5
 8018f22:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018f26:	9100      	str	r1, [sp, #0]
 8018f28:	f7fe fefe 	bl	8017d28 <disk_write>
 8018f2c:	9900      	ldr	r1, [sp, #0]
 8018f2e:	2800      	cmp	r0, #0
 8018f30:	d06c      	beq.n	801900c <dir_find+0x238>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018f32:	2701      	movs	r7, #1
 8018f34:	e777      	b.n	8018e26 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8018f36:	897a      	ldrh	r2, [r7, #10]
 8018f38:	3a01      	subs	r2, #1
 8018f3a:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 8018f3e:	d1a0      	bne.n	8018e82 <dir_find+0xae>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8018f40:	4638      	mov	r0, r7
 8018f42:	9300      	str	r3, [sp, #0]
 8018f44:	f7ff fa90 	bl	8018468 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018f48:	2801      	cmp	r0, #1
 8018f4a:	f240 80d1 	bls.w	80190f0 <dir_find+0x31c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8018f4e:	1c43      	adds	r3, r0, #1
 8018f50:	d0ef      	beq.n	8018f32 <dir_find+0x15e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8018f52:	69ba      	ldr	r2, [r7, #24]
 8018f54:	4290      	cmp	r0, r2
 8018f56:	f080 80c7 	bcs.w	80190e8 <dir_find+0x314>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018f5a:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8018f5c:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8018f5e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018f60:	9b00      	ldr	r3, [sp, #0]
 8018f62:	4290      	cmp	r0, r2
 8018f64:	f080 80c6 	bcs.w	80190f4 <dir_find+0x320>
	return clst * fs->csize + fs->database;
 8018f68:	897a      	ldrh	r2, [r7, #10]
 8018f6a:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8018f6c:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 8018f70:	61e6      	str	r6, [r4, #28]
 8018f72:	e786      	b.n	8018e82 <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018f74:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8018f78:	0658      	lsls	r0, r3, #25
 8018f7a:	f53f af6d 	bmi.w	8018e58 <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018f7e:	0669      	lsls	r1, r5, #25
 8018f80:	d53f      	bpl.n	8019002 <dir_find+0x22e>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018f82:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018f84:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8018f88:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018f8c:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018f8e:	7b73      	ldrb	r3, [r6, #13]
 8018f90:	454b      	cmp	r3, r9
 8018f92:	d138      	bne.n	8019006 <dir_find+0x232>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8018f94:	8b73      	ldrh	r3, [r6, #26]
 8018f96:	bbb3      	cbnz	r3, 8019006 <dir_find+0x232>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8018f98:	7837      	ldrb	r7, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018f9a:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018f9c:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8018fa0:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 8018fa4:	f8df a174 	ldr.w	sl, [pc, #372]	; 801911c <dir_find+0x348>
 8018fa8:	9502      	str	r5, [sp, #8]
 8018faa:	4615      	mov	r5, r2
 8018fac:	3f01      	subs	r7, #1
 8018fae:	f10a 0b0d 	add.w	fp, sl, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018fb2:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8018fb4:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8018fb8:	f8cd 8000 	str.w	r8, [sp]
 8018fbc:	9401      	str	r4, [sp, #4]
 8018fbe:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018fc2:	e010      	b.n	8018fe6 <dir_find+0x212>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018fc4:	2ffe      	cmp	r7, #254	; 0xfe
 8018fc6:	4620      	mov	r0, r4
 8018fc8:	d816      	bhi.n	8018ff8 <dir_find+0x224>
 8018fca:	f7fe fe39 	bl	8017c40 <ff_wtoupper>
 8018fce:	4680      	mov	r8, r0
 8018fd0:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 8018fd4:	3701      	adds	r7, #1
 8018fd6:	f7fe fe33 	bl	8017c40 <ff_wtoupper>
 8018fda:	4580      	cmp	r8, r0
 8018fdc:	4621      	mov	r1, r4
 8018fde:	d10b      	bne.n	8018ff8 <dir_find+0x224>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018fe0:	45d3      	cmp	fp, sl
 8018fe2:	f000 8089 	beq.w	80190f8 <dir_find+0x324>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8018fe6:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
 8018fea:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
 8018fec:	2900      	cmp	r1, #0
 8018fee:	d1e9      	bne.n	8018fc4 <dir_find+0x1f0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ff4:	429c      	cmp	r4, r3
 8018ff6:	d0f3      	beq.n	8018fe0 <dir_find+0x20c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018ff8:	e9dd 8400 	ldrd	r8, r4, [sp]
 8018ffc:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8019000:	e72a      	b.n	8018e58 <dir_find+0x84>
 8019002:	45aa      	cmp	sl, r5
 8019004:	d0c3      	beq.n	8018f8e <dir_find+0x1ba>
 8019006:	f04f 0aff 	mov.w	sl, #255	; 0xff
 801900a:	e725      	b.n	8018e58 <dir_find+0x84>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801900c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8019010:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019014:	1aea      	subs	r2, r5, r3
 8019016:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801901a:	429a      	cmp	r2, r3
 801901c:	f4bf aef7 	bcs.w	8018e0e <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019020:	f898 7002 	ldrb.w	r7, [r8, #2]
 8019024:	2f01      	cmp	r7, #1
 8019026:	f67f aef2 	bls.w	8018e0e <dir_find+0x3a>
 801902a:	468b      	mov	fp, r1
 801902c:	e001      	b.n	8019032 <dir_find+0x25e>
					wsect += fs->fsize;
 801902e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8019032:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019034:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8019036:	2301      	movs	r3, #1
 8019038:	4659      	mov	r1, fp
 801903a:	462a      	mov	r2, r5
 801903c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8019040:	f7fe fe72 	bl	8017d28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019044:	2f01      	cmp	r7, #1
 8019046:	d1f2      	bne.n	801902e <dir_find+0x25a>
 8019048:	4659      	mov	r1, fp
 801904a:	e6e0      	b.n	8018e0e <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801904c:	7830      	ldrb	r0, [r6, #0]
 801904e:	7872      	ldrb	r2, [r6, #1]
 8019050:	01c1      	lsls	r1, r0, #7
 8019052:	78b3      	ldrb	r3, [r6, #2]
 8019054:	f896 b003 	ldrb.w	fp, [r6, #3]
 8019058:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 801905c:	7937      	ldrb	r7, [r6, #4]
 801905e:	f896 e005 	ldrb.w	lr, [r6, #5]
 8019062:	4411      	add	r1, r2
 8019064:	f896 c006 	ldrb.w	ip, [r6, #6]
 8019068:	7a32      	ldrb	r2, [r6, #8]
 801906a:	f3c1 0046 	ubfx	r0, r1, #1, #7
 801906e:	7a75      	ldrb	r5, [r6, #9]
 8019070:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 8019074:	fa53 f180 	uxtab	r1, r3, r0
 8019078:	79f3      	ldrb	r3, [r6, #7]
 801907a:	f3c1 0046 	ubfx	r0, r1, #1, #7
 801907e:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 8019082:	7ab1      	ldrb	r1, [r6, #10]
 8019084:	fa5b fb80 	uxtab	fp, fp, r0
 8019088:	f3cb 0046 	ubfx	r0, fp, #1, #7
 801908c:	ea40 10cb 	orr.w	r0, r0, fp, lsl #7
 8019090:	fa57 f780 	uxtab	r7, r7, r0
 8019094:	f3c7 0046 	ubfx	r0, r7, #1, #7
 8019098:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 801909c:	fa5e f080 	uxtab	r0, lr, r0
 80190a0:	f3c0 0746 	ubfx	r7, r0, #1, #7
 80190a4:	ea47 10c0 	orr.w	r0, r7, r0, lsl #7
 80190a8:	fa5c f780 	uxtab	r7, ip, r0
 80190ac:	f3c7 0046 	ubfx	r0, r7, #1, #7
 80190b0:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 80190b4:	fa53 f080 	uxtab	r0, r3, r0
 80190b8:	f3c0 0346 	ubfx	r3, r0, #1, #7
 80190bc:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 80190c0:	fa52 f383 	uxtab	r3, r2, r3
 80190c4:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80190c8:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 80190cc:	fa55 f283 	uxtab	r2, r5, r3
 80190d0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80190d4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80190d8:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80190dc:	b2db      	uxtb	r3, r3
 80190de:	4599      	cmp	r9, r3
 80190e0:	f47f aedf 	bne.w	8018ea2 <dir_find+0xce>
 80190e4:	4657      	mov	r7, sl
 80190e6:	e69e      	b.n	8018e26 <dir_find+0x52>
				dp->sect = 0; return FR_NO_FILE;
 80190e8:	2300      	movs	r3, #0
 80190ea:	2704      	movs	r7, #4
 80190ec:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 80190ee:	e69a      	b.n	8018e26 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80190f0:	2702      	movs	r7, #2
 80190f2:	e698      	b.n	8018e26 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80190f4:	461e      	mov	r6, r3
 80190f6:	e73b      	b.n	8018f70 <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80190f8:	7833      	ldrb	r3, [r6, #0]
 80190fa:	f8dd 8000 	ldr.w	r8, [sp]
 80190fe:	065a      	lsls	r2, r3, #25
 8019100:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 8019104:	d500      	bpl.n	8019108 <dir_find+0x334>
 8019106:	b919      	cbnz	r1, 8019110 <dir_find+0x33c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8019108:	3d01      	subs	r5, #1
 801910a:	fa5f fa85 	uxtb.w	sl, r5
 801910e:	e6a3      	b.n	8018e58 <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8019110:	9b03      	ldr	r3, [sp, #12]
 8019112:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d0f6      	beq.n	8019108 <dir_find+0x334>
 801911a:	e774      	b.n	8019006 <dir_find+0x232>
 801911c:	080c0324 	.word	0x080c0324

08019120 <follow_path>:
{
 8019120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8019124:	780b      	ldrb	r3, [r1, #0]
{
 8019126:	b083      	sub	sp, #12
 8019128:	4688      	mov	r8, r1
 801912a:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801912c:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 801912e:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8019132:	d103      	bne.n	801913c <follow_path+0x1c>
 8019134:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 8019138:	2b2f      	cmp	r3, #47	; 0x2f
 801913a:	d0fb      	beq.n	8019134 <follow_path+0x14>
 801913c:	2b5c      	cmp	r3, #92	; 0x5c
 801913e:	d0f9      	beq.n	8019134 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 8019140:	2100      	movs	r1, #0
 8019142:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8019144:	f898 3000 	ldrb.w	r3, [r8]
 8019148:	2b1f      	cmp	r3, #31
 801914a:	f240 8148 	bls.w	80193de <follow_path+0x2be>
 801914e:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 8019150:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8019152:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 8019154:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 8019156:	d929      	bls.n	80191ac <follow_path+0x8c>
 8019158:	f1a5 0902 	sub.w	r9, r5, #2
 801915c:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 801915e:	2401      	movs	r4, #1
 8019160:	e008      	b.n	8019174 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
 8019162:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 8019166:	1c63      	adds	r3, r4, #1
 8019168:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 801916c:	281f      	cmp	r0, #31
 801916e:	f240 80f7 	bls.w	8019360 <follow_path+0x240>
		w = p[si++];					/* Get a character */
 8019172:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8019174:	282f      	cmp	r0, #47	; 0x2f
 8019176:	f104 3aff 	add.w	sl, r4, #4294967295
 801917a:	d01d      	beq.n	80191b8 <follow_path+0x98>
 801917c:	285c      	cmp	r0, #92	; 0x5c
 801917e:	d01b      	beq.n	80191b8 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8019180:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8019184:	d00e      	beq.n	80191a4 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8019186:	2101      	movs	r1, #1
 8019188:	f7fe fd3c 	bl	8017c04 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801918c:	b150      	cbz	r0, 80191a4 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801918e:	287f      	cmp	r0, #127	; 0x7f
 8019190:	d8e7      	bhi.n	8019162 <follow_path+0x42>
	while (*str && *str != chr) str++;
 8019192:	2322      	movs	r3, #34	; 0x22
 8019194:	4aa5      	ldr	r2, [pc, #660]	; (801942c <follow_path+0x30c>)
 8019196:	e003      	b.n	80191a0 <follow_path+0x80>
 8019198:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801919c:	2b00      	cmp	r3, #0
 801919e:	d0e0      	beq.n	8019162 <follow_path+0x42>
 80191a0:	4298      	cmp	r0, r3
 80191a2:	d1f9      	bne.n	8019198 <follow_path+0x78>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80191a4:	2006      	movs	r0, #6
}
 80191a6:	b003      	add	sp, #12
 80191a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 80191ac:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80191ae:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 80191b0:	802b      	strh	r3, [r5, #0]
}
 80191b2:	b003      	add	sp, #12
 80191b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80191b8:	f818 3004 	ldrb.w	r3, [r8, r4]
 80191bc:	eb08 0204 	add.w	r2, r8, r4
 80191c0:	2b5c      	cmp	r3, #92	; 0x5c
 80191c2:	d002      	beq.n	80191ca <follow_path+0xaa>
 80191c4:	2b2f      	cmp	r3, #47	; 0x2f
 80191c6:	f040 811f 	bne.w	8019408 <follow_path+0x2e8>
 80191ca:	1c63      	adds	r3, r4, #1
 80191cc:	4443      	add	r3, r8
 80191ce:	4698      	mov	r8, r3
 80191d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80191d4:	2a2f      	cmp	r2, #47	; 0x2f
 80191d6:	d0fa      	beq.n	80191ce <follow_path+0xae>
 80191d8:	2a5c      	cmp	r2, #92	; 0x5c
 80191da:	d0f8      	beq.n	80191ce <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80191dc:	f1ba 0f00 	cmp.w	sl, #0
 80191e0:	d0e4      	beq.n	80191ac <follow_path+0x8c>
 80191e2:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80191e4:	2400      	movs	r4, #0
 80191e6:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 80191ea:	e002      	b.n	80191f2 <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80191ec:	f1ba 0a01 	subs.w	sl, sl, #1
 80191f0:	d0dc      	beq.n	80191ac <follow_path+0x8c>
		w = lfn[di - 1];
 80191f2:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 80191f6:	2b20      	cmp	r3, #32
 80191f8:	d0f8      	beq.n	80191ec <follow_path+0xcc>
 80191fa:	2b2e      	cmp	r3, #46	; 0x2e
 80191fc:	d0f6      	beq.n	80191ec <follow_path+0xcc>
		*d++ = (BYTE)val;
 80191fe:	2320      	movs	r3, #32
 8019200:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8019204:	2100      	movs	r1, #0
 8019206:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 801920a:	627a      	str	r2, [r7, #36]	; 0x24
 801920c:	62ba      	str	r2, [r7, #40]	; 0x28
 801920e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8019212:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8019216:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801921a:	8828      	ldrh	r0, [r5, #0]
 801921c:	282e      	cmp	r0, #46	; 0x2e
 801921e:	d002      	beq.n	8019226 <follow_path+0x106>
 8019220:	4298      	cmp	r0, r3
 8019222:	f040 80e5 	bne.w	80193f0 <follow_path+0x2d0>
 8019226:	462a      	mov	r2, r5
 8019228:	2300      	movs	r3, #0
 801922a:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 801922e:	461c      	mov	r4, r3
 8019230:	3301      	adds	r3, #1
 8019232:	2820      	cmp	r0, #32
 8019234:	d0f9      	beq.n	801922a <follow_path+0x10a>
 8019236:	282e      	cmp	r0, #46	; 0x2e
 8019238:	d0f7      	beq.n	801922a <follow_path+0x10a>
		w = lfn[si++];					/* Get an LFN character */
 801923a:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801923c:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 8019240:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 8019244:	2a2e      	cmp	r2, #46	; 0x2e
 8019246:	d002      	beq.n	801924e <follow_path+0x12e>
 8019248:	f1ba 0a01 	subs.w	sl, sl, #1
 801924c:	d1f8      	bne.n	8019240 <follow_path+0x120>
		if (!w) break;					/* Break on end of the LFN */
 801924e:	b3b0      	cbz	r0, 80192be <follow_path+0x19e>
 8019250:	2208      	movs	r2, #8
 8019252:	4641      	mov	r1, r8
 8019254:	2300      	movs	r3, #0
 8019256:	46b8      	mov	r8, r7
 8019258:	462f      	mov	r7, r5
 801925a:	4615      	mov	r5, r2
 801925c:	4699      	mov	r9, r3
 801925e:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8019260:	2820      	cmp	r0, #32
 8019262:	d003      	beq.n	801926c <follow_path+0x14c>
 8019264:	282e      	cmp	r0, #46	; 0x2e
 8019266:	d14d      	bne.n	8019304 <follow_path+0x1e4>
 8019268:	45a2      	cmp	sl, r4
 801926a:	d04b      	beq.n	8019304 <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
 801926c:	f046 0603 	orr.w	r6, r6, #3
 8019270:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 8019272:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8019276:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 8019278:	2800      	cmp	r0, #0
 801927a:	d1f1      	bne.n	8019260 <follow_path+0x140>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801927c:	4647      	mov	r7, r8
 801927e:	4690      	mov	r8, r2
 8019280:	462a      	mov	r2, r5
 8019282:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8019286:	29e5      	cmp	r1, #229	; 0xe5
 8019288:	d102      	bne.n	8019290 <follow_path+0x170>
 801928a:	2105      	movs	r1, #5
 801928c:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8019290:	2a08      	cmp	r2, #8
 8019292:	f000 8093 	beq.w	80193bc <follow_path+0x29c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8019296:	f003 020c 	and.w	r2, r3, #12
 801929a:	2a0c      	cmp	r2, #12
 801929c:	d065      	beq.n	801936a <follow_path+0x24a>
 801929e:	f003 0303 	and.w	r3, r3, #3
 80192a2:	2b03      	cmp	r3, #3
 80192a4:	d061      	beq.n	801936a <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80192a6:	07b1      	lsls	r1, r6, #30
 80192a8:	d409      	bmi.n	80192be <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80192aa:	2b01      	cmp	r3, #1
 80192ac:	d102      	bne.n	80192b4 <follow_path+0x194>
 80192ae:	f046 0610 	orr.w	r6, r6, #16
 80192b2:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80192b4:	2a04      	cmp	r2, #4
 80192b6:	d102      	bne.n	80192be <follow_path+0x19e>
 80192b8:	f046 0608 	orr.w	r6, r6, #8
 80192bc:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 80192be:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80192c0:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80192c4:	f7ff fd86 	bl	8018dd4 <dir_find>
			ns = dp->fn[NSFLAG];
 80192c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80192cc:	2800      	cmp	r0, #0
 80192ce:	d158      	bne.n	8019382 <follow_path+0x262>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80192d0:	075a      	lsls	r2, r3, #29
 80192d2:	f53f af68 	bmi.w	80191a6 <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80192d6:	79bb      	ldrb	r3, [r7, #6]
 80192d8:	06db      	lsls	r3, r3, #27
 80192da:	f140 8097 	bpl.w	801940c <follow_path+0x2ec>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80192de:	697a      	ldr	r2, [r7, #20]
 80192e0:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 80192e4:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80192e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 80192ec:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80192ee:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 80192f0:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 80192f2:	d102      	bne.n	80192fa <follow_path+0x1da>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80192f4:	8a9b      	ldrh	r3, [r3, #20]
 80192f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80192fa:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80192fc:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
 80192fe:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8019302:	e725      	b.n	8019150 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8019304:	454d      	cmp	r5, r9
 8019306:	d91c      	bls.n	8019342 <follow_path+0x222>
 8019308:	ebaa 0104 	sub.w	r1, sl, r4
 801930c:	fab1 f181 	clz	r1, r1
 8019310:	0949      	lsrs	r1, r1, #5
 8019312:	b9b1      	cbnz	r1, 8019342 <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
 8019314:	287f      	cmp	r0, #127	; 0x7f
 8019316:	d83c      	bhi.n	8019392 <follow_path+0x272>
	while (*str && *str != chr) str++;
 8019318:	212b      	movs	r1, #43	; 0x2b
 801931a:	f8df c118 	ldr.w	ip, [pc, #280]	; 8019434 <follow_path+0x314>
 801931e:	e003      	b.n	8019328 <follow_path+0x208>
 8019320:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8019324:	2900      	cmp	r1, #0
 8019326:	d052      	beq.n	80193ce <follow_path+0x2ae>
 8019328:	4281      	cmp	r1, r0
 801932a:	d1f9      	bne.n	8019320 <follow_path+0x200>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801932c:	f046 0603 	orr.w	r6, r6, #3
 8019330:	205f      	movs	r0, #95	; 0x5f
 8019332:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 8019334:	eb08 0109 	add.w	r1, r8, r9
 8019338:	f109 0901 	add.w	r9, r9, #1
 801933c:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8019340:	e797      	b.n	8019272 <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
 8019342:	2d0b      	cmp	r5, #11
 8019344:	d064      	beq.n	8019410 <follow_path+0x2f0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8019346:	45a2      	cmp	sl, r4
 8019348:	d003      	beq.n	8019352 <follow_path+0x232>
 801934a:	f046 0603 	orr.w	r6, r6, #3
 801934e:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 8019350:	d394      	bcc.n	801927c <follow_path+0x15c>
			b <<= 2; continue;
 8019352:	009b      	lsls	r3, r3, #2
 8019354:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8019356:	250b      	movs	r5, #11
 8019358:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 801935c:	b2db      	uxtb	r3, r3
 801935e:	e788      	b.n	8019272 <follow_path+0x152>
	*path = &p[si];						/* Return pointer to the next segment */
 8019360:	46a2      	mov	sl, r4
 8019362:	4498      	add	r8, r3
 8019364:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8019366:	2404      	movs	r4, #4
 8019368:	e73d      	b.n	80191e6 <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801936a:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 801936e:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8019370:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8019372:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8019376:	f7ff fd2d 	bl	8018dd4 <dir_find>
			ns = dp->fn[NSFLAG];
 801937a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 801937e:	2800      	cmp	r0, #0
 8019380:	d0a6      	beq.n	80192d0 <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8019382:	2804      	cmp	r0, #4
 8019384:	f47f af0f 	bne.w	80191a6 <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8019388:	f013 0f04 	tst.w	r3, #4
 801938c:	bf08      	it	eq
 801938e:	2005      	moveq	r0, #5
 8019390:	e709      	b.n	80191a6 <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8019392:	e9cd 3200 	strd	r3, r2, [sp]
 8019396:	f7fe fc35 	bl	8017c04 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801939a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801939e:	b918      	cbnz	r0, 80193a8 <follow_path+0x288>
			cf |= NS_LFN;				/* Force create LFN entry */
 80193a0:	f046 0602 	orr.w	r6, r6, #2
 80193a4:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80193a6:	e7c1      	b.n	801932c <follow_path+0x20c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80193a8:	4921      	ldr	r1, [pc, #132]	; (8019430 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
 80193aa:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80193ae:	4401      	add	r1, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 80193b0:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80193b2:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80193b6:	2800      	cmp	r0, #0
 80193b8:	d0b8      	beq.n	801932c <follow_path+0x20c>
 80193ba:	e7ad      	b.n	8019318 <follow_path+0x1f8>
	if (ni == 8) b <<= 2;
 80193bc:	009b      	lsls	r3, r3, #2
 80193be:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80193c2:	2a0c      	cmp	r2, #12
 80193c4:	d0d1      	beq.n	801936a <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80193c6:	07b0      	lsls	r0, r6, #30
 80193c8:	f57f af74 	bpl.w	80192b4 <follow_path+0x194>
 80193cc:	e777      	b.n	80192be <follow_path+0x19e>
				if (IsUpper(w)) {		/* ASCII large capital */
 80193ce:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 80193d2:	2919      	cmp	r1, #25
 80193d4:	d80f      	bhi.n	80193f6 <follow_path+0x2d6>
					b |= 2;
 80193d6:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 80193da:	b2c0      	uxtb	r0, r0
 80193dc:	e7aa      	b.n	8019334 <follow_path+0x214>
		dp->fn[NSFLAG] = NS_NONAME;
 80193de:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80193e0:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 80193e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 80193e6:	b003      	add	sp, #12
 80193e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 80193ec:	f7ff bc38 	b.w	8018c60 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80193f0:	4626      	mov	r6, r4
 80193f2:	2401      	movs	r4, #1
 80193f4:	e722      	b.n	801923c <follow_path+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
 80193f6:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 80193fa:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 80193fc:	bf9c      	itt	ls
 80193fe:	3820      	subls	r0, #32
 8019400:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 8019404:	b2c0      	uxtb	r0, r0
 8019406:	e795      	b.n	8019334 <follow_path+0x214>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8019408:	4690      	mov	r8, r2
 801940a:	e6e7      	b.n	80191dc <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801940c:	2005      	movs	r0, #5
 801940e:	e6ca      	b.n	80191a6 <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
 8019410:	4647      	mov	r7, r8
 8019412:	4690      	mov	r8, r2
 8019414:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8019418:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 801941c:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801941e:	2ae5      	cmp	r2, #229	; 0xe5
 8019420:	f47f af39 	bne.w	8019296 <follow_path+0x176>
 8019424:	2205      	movs	r2, #5
 8019426:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 801942a:	e734      	b.n	8019296 <follow_path+0x176>
 801942c:	080c0290 	.word	0x080c0290
 8019430:	080c02a4 	.word	0x080c02a4
 8019434:	080c029c 	.word	0x080c029c

08019438 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8019438:	2901      	cmp	r1, #1
{
 801943a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801943e:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8019440:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8019442:	d90f      	bls.n	8019464 <remove_chain+0x2c>
 8019444:	69ab      	ldr	r3, [r5, #24]
 8019446:	428b      	cmp	r3, r1
 8019448:	d90c      	bls.n	8019464 <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801944a:	4606      	mov	r6, r0
 801944c:	4611      	mov	r1, r2
 801944e:	b962      	cbnz	r2, 801946a <remove_chain+0x32>
 8019450:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019452:	429c      	cmp	r4, r3
 8019454:	d206      	bcs.n	8019464 <remove_chain+0x2c>
		switch (fs->fs_type) {
 8019456:	783b      	ldrb	r3, [r7, #0]
 8019458:	2b02      	cmp	r3, #2
 801945a:	d072      	beq.n	8019542 <remove_chain+0x10a>
 801945c:	2b03      	cmp	r3, #3
 801945e:	d05d      	beq.n	801951c <remove_chain+0xe4>
 8019460:	2b01      	cmp	r3, #1
 8019462:	d010      	beq.n	8019486 <remove_chain+0x4e>
 8019464:	2002      	movs	r0, #2
}
 8019466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801946a:	4293      	cmp	r3, r2
 801946c:	d9fa      	bls.n	8019464 <remove_chain+0x2c>
 801946e:	2a01      	cmp	r2, #1
 8019470:	d0f8      	beq.n	8019464 <remove_chain+0x2c>
 8019472:	f04f 32ff 	mov.w	r2, #4294967295
 8019476:	4628      	mov	r0, r5
 8019478:	f7fe ff5c 	bl	8018334 <put_fat.part.0>
		if (res != FR_OK) return res;
 801947c:	2800      	cmp	r0, #0
 801947e:	d1f2      	bne.n	8019466 <remove_chain+0x2e>
 8019480:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019482:	69bb      	ldr	r3, [r7, #24]
 8019484:	e7e5      	b.n	8019452 <remove_chain+0x1a>
			bc = (UINT)clst; bc += bc / 2;
 8019486:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801948c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801948e:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019492:	4291      	cmp	r1, r2
 8019494:	d006      	beq.n	80194a4 <remove_chain+0x6c>
 8019496:	4638      	mov	r0, r7
 8019498:	f7fe fd94 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801949c:	2800      	cmp	r0, #0
 801949e:	d161      	bne.n	8019564 <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80194a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80194a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80194a4:	f108 0901 	add.w	r9, r8, #1
 80194a8:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80194ac:	eb03 2159 	add.w	r1, r3, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80194b0:	44b8      	add	r8, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80194b2:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 80194b4:	f898 8034 	ldrb.w	r8, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80194b8:	d004      	beq.n	80194c4 <remove_chain+0x8c>
 80194ba:	4638      	mov	r0, r7
 80194bc:	f7fe fd82 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80194c0:	2800      	cmp	r0, #0
 80194c2:	d14f      	bne.n	8019564 <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80194c4:	f3c9 0908 	ubfx	r9, r9, #0, #9
 80194c8:	444f      	add	r7, r9
 80194ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80194ce:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80194d2:	07e3      	lsls	r3, r4, #31
 80194d4:	d548      	bpl.n	8019568 <remove_chain+0x130>
 80194d6:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
 80194da:	f1b8 0f00 	cmp.w	r8, #0
 80194de:	d046      	beq.n	801956e <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80194e0:	f1b8 0f01 	cmp.w	r8, #1
 80194e4:	d0be      	beq.n	8019464 <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80194e6:	69ab      	ldr	r3, [r5, #24]
 80194e8:	42a3      	cmp	r3, r4
 80194ea:	d9bb      	bls.n	8019464 <remove_chain+0x2c>
 80194ec:	2200      	movs	r2, #0
 80194ee:	4621      	mov	r1, r4
 80194f0:	4628      	mov	r0, r5
 80194f2:	f7fe ff1f 	bl	8018334 <put_fat.part.0>
			if (res != FR_OK) return res;
 80194f6:	2800      	cmp	r0, #0
 80194f8:	d1b5      	bne.n	8019466 <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80194fa:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 80194fe:	1e91      	subs	r1, r2, #2
 8019500:	428b      	cmp	r3, r1
 8019502:	d205      	bcs.n	8019510 <remove_chain+0xd8>
			fs->free_clst++;
 8019504:	3301      	adds	r3, #1
 8019506:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8019508:	792b      	ldrb	r3, [r5, #4]
 801950a:	f043 0301 	orr.w	r3, r3, #1
 801950e:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8019510:	4542      	cmp	r2, r8
 8019512:	d92c      	bls.n	801956e <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019514:	6837      	ldr	r7, [r6, #0]
 8019516:	4644      	mov	r4, r8
 8019518:	69bb      	ldr	r3, [r7, #24]
 801951a:	e79a      	b.n	8019452 <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801951c:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019520:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019524:	4299      	cmp	r1, r3
 8019526:	d003      	beq.n	8019530 <remove_chain+0xf8>
 8019528:	4638      	mov	r0, r7
 801952a:	f7fe fd4b 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801952e:	b9c8      	cbnz	r0, 8019564 <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8019530:	00a3      	lsls	r3, r4, #2
 8019532:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8019536:	441f      	add	r7, r3
 8019538:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801953c:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 8019540:	e7cb      	b.n	80194da <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019542:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019546:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801954a:	4299      	cmp	r1, r3
 801954c:	d003      	beq.n	8019556 <remove_chain+0x11e>
 801954e:	4638      	mov	r0, r7
 8019550:	f7fe fd38 	bl	8017fc4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019554:	b930      	cbnz	r0, 8019564 <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019556:	0063      	lsls	r3, r4, #1
 8019558:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801955c:	441f      	add	r7, r3
 801955e:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
 8019562:	e7ba      	b.n	80194da <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8019564:	2001      	movs	r0, #1
 8019566:	e77e      	b.n	8019466 <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8019568:	f3c8 080b 	ubfx	r8, r8, #0, #12
 801956c:	e7b5      	b.n	80194da <remove_chain+0xa2>
	return FR_OK;
 801956e:	2000      	movs	r0, #0
 8019570:	e779      	b.n	8019466 <remove_chain+0x2e>
 8019572:	bf00      	nop

08019574 <dir_register>:
{
 8019574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8019578:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 801957c:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801957e:	930a      	str	r3, [sp, #40]	; 0x28
 8019580:	f013 03a0 	ands.w	r3, r3, #160	; 0xa0
 8019584:	f040 835a 	bne.w	8019c3c <dir_register+0x6c8>
	FATFS *fs = dp->obj.fs;
 8019588:	6802      	ldr	r2, [r0, #0]
 801958a:	4682      	mov	sl, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801958c:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	FATFS *fs = dp->obj.fs;
 8019590:	9201      	str	r2, [sp, #4]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8019592:	f8bc 7000 	ldrh.w	r7, [ip]
 8019596:	b137      	cbz	r7, 80195a6 <dir_register+0x32>
 8019598:	461f      	mov	r7, r3
 801959a:	4663      	mov	r3, ip
 801959c:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 80195a0:	3701      	adds	r7, #1
 80195a2:	2a00      	cmp	r2, #0
 80195a4:	d1fa      	bne.n	801959c <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
 80195a6:	f10a 0524 	add.w	r5, sl, #36	; 0x24
			*d++ = *s++;
 80195aa:	ab12      	add	r3, sp, #72	; 0x48
 80195ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80195b0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80195b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195b6:	07d8      	lsls	r0, r3, #31
 80195b8:	f100 8097 	bmi.w	80196ea <dir_register+0x176>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80195bc:	f013 0302 	ands.w	r3, r3, #2
 80195c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80195c4:	f000 829b 	beq.w	8019afe <dir_register+0x58a>
 80195c8:	4a76      	ldr	r2, [pc, #472]	; (80197a4 <dir_register+0x230>)
 80195ca:	f107 030c 	add.w	r3, r7, #12
	res = dir_sdi(dp, 0);
 80195ce:	2100      	movs	r1, #0
 80195d0:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80195d2:	fba2 2303 	umull	r2, r3, r2, r3
 80195d6:	089b      	lsrs	r3, r3, #2
 80195d8:	9302      	str	r3, [sp, #8]
 80195da:	3301      	adds	r3, #1
 80195dc:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 80195de:	f7ff fb3f 	bl	8018c60 <dir_sdi>
	if (res == FR_OK) {
 80195e2:	4683      	mov	fp, r0
 80195e4:	2800      	cmp	r0, #0
 80195e6:	f040 8295 	bne.w	8019b14 <dir_register+0x5a0>
			res = move_window(fs, dp->sect);
 80195ea:	f8da 101c 	ldr.w	r1, [sl, #28]
		n = 0;
 80195ee:	4680      	mov	r8, r0
						fs->wflag = 1;
 80195f0:	9006      	str	r0, [sp, #24]
 80195f2:	e029      	b.n	8019648 <dir_register+0xd4>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80195f4:	fab3 f283 	clz	r2, r3
 80195f8:	0952      	lsrs	r2, r2, #5
 80195fa:	b3a3      	cbz	r3, 8019666 <dir_register+0xf2>
				n = 0;					/* Not a blank entry. Restart to search */
 80195fc:	4690      	mov	r8, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80195fe:	f8da 5014 	ldr.w	r5, [sl, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8019602:	f8da 101c 	ldr.w	r1, [sl, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8019606:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8019608:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 801960c:	f080 8285 	bcs.w	8019b1a <dir_register+0x5a6>
 8019610:	2900      	cmp	r1, #0
 8019612:	f000 8282 	beq.w	8019b1a <dir_register+0x5a6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8019616:	f3c5 0708 	ubfx	r7, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 801961a:	f8da 4000 	ldr.w	r4, [sl]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801961e:	b967      	cbnz	r7, 801963a <dir_register+0xc6>
		dp->sect++;				/* Next sector */
 8019620:	3101      	adds	r1, #1
		if (!dp->clust) {		/* Static table */
 8019622:	f8da 3018 	ldr.w	r3, [sl, #24]
		dp->sect++;				/* Next sector */
 8019626:	f8ca 101c 	str.w	r1, [sl, #28]
		if (!dp->clust) {		/* Static table */
 801962a:	2b00      	cmp	r3, #0
 801962c:	f040 82cd 	bne.w	8019bca <dir_register+0x656>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8019630:	8922      	ldrh	r2, [r4, #8]
 8019632:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8019636:	f240 83bb 	bls.w	8019db0 <dir_register+0x83c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801963a:	f104 0634 	add.w	r6, r4, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801963e:	443e      	add	r6, r7
	dp->dptr = ofs;						/* Current entry */
 8019640:	f8ca 5014 	str.w	r5, [sl, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8019644:	f8ca 6020 	str.w	r6, [sl, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019648:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 801964c:	428b      	cmp	r3, r1
 801964e:	d005      	beq.n	801965c <dir_register+0xe8>
 8019650:	4648      	mov	r0, r9
 8019652:	f7fe fcb7 	bl	8017fc4 <move_window.part.0>
			if (res != FR_OK) break;
 8019656:	2800      	cmp	r0, #0
 8019658:	f040 83b2 	bne.w	8019dc0 <dir_register+0x84c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801965c:	f8da 3020 	ldr.w	r3, [sl, #32]
 8019660:	781b      	ldrb	r3, [r3, #0]
 8019662:	2be5      	cmp	r3, #229	; 0xe5
 8019664:	d1c6      	bne.n	80195f4 <dir_register+0x80>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8019666:	f108 0801 	add.w	r8, r8, #1
 801966a:	9b03      	ldr	r3, [sp, #12]
 801966c:	4543      	cmp	r3, r8
 801966e:	d1c6      	bne.n	80195fe <dir_register+0x8a>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8019670:	9b02      	ldr	r3, [sp, #8]
 8019672:	f8dd b018 	ldr.w	fp, [sp, #24]
 8019676:	2b00      	cmp	r3, #0
 8019678:	f040 82eb 	bne.w	8019c52 <dir_register+0x6de>
	if (sector != fs->winsect) {	/* Window offset changed? */
 801967c:	9b01      	ldr	r3, [sp, #4]
		res = move_window(fs, dp->sect);
 801967e:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019684:	4299      	cmp	r1, r3
 8019686:	d005      	beq.n	8019694 <dir_register+0x120>
 8019688:	9801      	ldr	r0, [sp, #4]
 801968a:	f7fe fc9b 	bl	8017fc4 <move_window.part.0>
		if (res == FR_OK) {
 801968e:	2800      	cmp	r0, #0
 8019690:	f040 82da 	bne.w	8019c48 <dir_register+0x6d4>
		*d++ = (BYTE)val;
 8019694:	2220      	movs	r2, #32
 8019696:	2100      	movs	r1, #0
 8019698:	f8da 0020 	ldr.w	r0, [sl, #32]
 801969c:	f00c f868 	bl	8025770 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80196a0:	f8da 3020 	ldr.w	r3, [sl, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80196a4:	f10a 0225 	add.w	r2, sl, #37	; 0x25
 80196a8:	1a9a      	subs	r2, r3, r2
 80196aa:	2a02      	cmp	r2, #2
 80196ac:	f240 8486 	bls.w	8019fbc <dir_register+0xa48>
			*d++ = *s++;
 80196b0:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 80196b4:	601a      	str	r2, [r3, #0]
 80196b6:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
 80196ba:	605a      	str	r2, [r3, #4]
 80196bc:	f89a 202c 	ldrb.w	r2, [sl, #44]	; 0x2c
}
 80196c0:	4658      	mov	r0, fp
			*d++ = *s++;
 80196c2:	721a      	strb	r2, [r3, #8]
 80196c4:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
 80196c8:	725a      	strb	r2, [r3, #9]
 80196ca:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
 80196ce:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 80196d0:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80196d2:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
 80196d6:	f8da 1020 	ldr.w	r1, [sl, #32]
 80196da:	f003 0318 	and.w	r3, r3, #24
 80196de:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 80196e0:	9b01      	ldr	r3, [sp, #4]
 80196e2:	70da      	strb	r2, [r3, #3]
}
 80196e4:	b013      	add	sp, #76	; 0x4c
 80196e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80196ea:	2340      	movs	r3, #64	; 0x40
			*d++ = *s++;
 80196ec:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80196f0:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
		for (n = 1; n < 100; n++) {
 80196f4:	2601      	movs	r6, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80196f6:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80196fa:	f04f 0920 	mov.w	r9, #32
			*d++ = *s++;
 80196fe:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8019702:	9208      	str	r2, [sp, #32]
 8019704:	9302      	str	r3, [sp, #8]
 8019706:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 801970a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 801970e:	9303      	str	r3, [sp, #12]
 8019710:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8019714:	9207      	str	r2, [sp, #28]
 8019716:	9306      	str	r3, [sp, #24]
 8019718:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 801971c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8019720:	9305      	str	r3, [sp, #20]
 8019722:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019726:	4693      	mov	fp, r2
			*d++ = *s++;
 8019728:	9109      	str	r1, [sp, #36]	; 0x24
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801972a:	4661      	mov	r1, ip
			*d++ = *s++;
 801972c:	9304      	str	r3, [sp, #16]
 801972e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019732:	970b      	str	r7, [sp, #44]	; 0x2c
			*d++ = *s++;
 8019734:	f89d 8046 	ldrb.w	r8, [sp, #70]	; 0x46
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019738:	461f      	mov	r7, r3
				if (sr & 0x10000) sr ^= 0x11021;
 801973a:	4c1b      	ldr	r4, [pc, #108]	; (80197a8 <dir_register+0x234>)
			*d++ = *s++;
 801973c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801973e:	2200      	movs	r2, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8019740:	2e05      	cmp	r6, #5
			*d++ = *s++;
 8019742:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
 8019746:	f88a 302d 	strb.w	r3, [sl, #45]	; 0x2d
 801974a:	9b02      	ldr	r3, [sp, #8]
 801974c:	f88a 802e 	strb.w	r8, [sl, #46]	; 0x2e
 8019750:	f363 0207 	bfi	r2, r3, #0, #8
 8019754:	9b03      	ldr	r3, [sp, #12]
 8019756:	f363 220f 	bfi	r2, r3, #8, #8
 801975a:	9b06      	ldr	r3, [sp, #24]
 801975c:	f363 4217 	bfi	r2, r3, #16, #8
 8019760:	9b05      	ldr	r3, [sp, #20]
 8019762:	f363 621f 	bfi	r2, r3, #24, #8
 8019766:	9b04      	ldr	r3, [sp, #16]
 8019768:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 801976c:	f04f 0200 	mov.w	r2, #0
 8019770:	f363 0207 	bfi	r2, r3, #0, #8
 8019774:	9b08      	ldr	r3, [sp, #32]
 8019776:	f367 220f 	bfi	r2, r7, #8, #8
 801977a:	f363 4217 	bfi	r2, r3, #16, #8
 801977e:	9b07      	ldr	r3, [sp, #28]
 8019780:	f363 621f 	bfi	r2, r3, #24, #8
 8019784:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8019788:	f240 8135 	bls.w	80199f6 <dir_register+0x482>
		while (*lfn) {	/* Create a CRC */
 801978c:	880a      	ldrh	r2, [r1, #0]
 801978e:	2a00      	cmp	r2, #0
 8019790:	f000 8131 	beq.w	80199f6 <dir_register+0x482>
				sr = (sr << 1) + (wc & 1);
 8019794:	468c      	mov	ip, r1
 8019796:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
 801979a:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 801979c:	eb01 0146 	add.w	r1, r1, r6, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80197a0:	e00e      	b.n	80197c0 <dir_register+0x24c>
 80197a2:	bf00      	nop
 80197a4:	4ec4ec4f 	.word	0x4ec4ec4f
 80197a8:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
 80197ac:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80197b0:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
 80197b4:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
 80197b8:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80197bc:	bf18      	it	ne
 80197be:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 80197c0:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
 80197c4:	0893      	lsrs	r3, r2, #2
 80197c6:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
 80197c8:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80197cc:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 80197ce:	f003 0301 	and.w	r3, r3, #1
 80197d2:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80197d6:	bf48      	it	mi
 80197d8:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
 80197dc:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
 80197de:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80197e2:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
 80197e6:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80197ea:	bf18      	it	ne
 80197ec:	4063      	eorne	r3, r4
				sr = (sr << 1) + (wc & 1);
 80197ee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80197f2:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 80197f4:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 80197f8:	bf48      	it	mi
 80197fa:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 80197fc:	f003 0301 	and.w	r3, r3, #1
 8019800:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8019804:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8019806:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 801980a:	bf48      	it	mi
 801980c:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 801980e:	f000 0001 	and.w	r0, r0, #1
 8019812:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8019816:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8019818:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 801981c:	bf48      	it	mi
 801981e:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8019820:	f001 0101 	and.w	r1, r1, #1
 8019824:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8019828:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 801982a:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 801982e:	bf48      	it	mi
 8019830:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8019832:	f003 0301 	and.w	r3, r3, #1
 8019836:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801983a:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 801983c:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 8019840:	bf48      	it	mi
 8019842:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8019844:	f000 0001 	and.w	r0, r0, #1
 8019848:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801984c:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 801984e:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 8019852:	bf48      	it	mi
 8019854:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8019856:	f001 0101 	and.w	r1, r1, #1
 801985a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801985e:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8019860:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 8019864:	bf48      	it	mi
 8019866:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8019868:	f003 0301 	and.w	r3, r3, #1
 801986c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8019870:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8019872:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 8019876:	bf48      	it	mi
 8019878:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 801987a:	f000 0001 	and.w	r0, r0, #1
 801987e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8019882:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8019884:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 8019888:	bf48      	it	mi
 801988a:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 801988c:	f001 0101 	and.w	r1, r1, #1
 8019890:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8019894:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8019896:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 801989a:	bf48      	it	mi
 801989c:	4060      	eormi	r0, r4
				wc >>= 1;
 801989e:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
 80198a0:	f003 0301 	and.w	r3, r3, #1
 80198a4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80198a8:	0400      	lsls	r0, r0, #16
 80198aa:	bf48      	it	mi
 80198ac:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 80198ae:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80198b2:	0408      	lsls	r0, r1, #16
 80198b4:	bf48      	it	mi
 80198b6:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 80198b8:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80198bc:	0419      	lsls	r1, r3, #16
		while (*lfn) {	/* Create a CRC */
 80198be:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 80198c2:	bf48      	it	mi
 80198c4:	ea8e 0e04 	eormi.w	lr, lr, r4
		while (*lfn) {	/* Create a CRC */
 80198c8:	2a00      	cmp	r2, #0
 80198ca:	f47f af6f 	bne.w	80197ac <dir_register+0x238>
		c = (BYTE)((seq % 16) + '0');
 80198ce:	f00e 010f 	and.w	r1, lr, #15
 80198d2:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 80198d6:	2a39      	cmp	r2, #57	; 0x39
 80198d8:	bf88      	it	hi
 80198da:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 80198de:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
 80198e2:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
 80198e6:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
 80198ea:	f240 8153 	bls.w	8019b94 <dir_register+0x620>
		c = (BYTE)((seq % 16) + '0');
 80198ee:	f001 000f 	and.w	r0, r1, #15
 80198f2:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 80198f6:	2a39      	cmp	r2, #57	; 0x39
 80198f8:	bf88      	it	hi
 80198fa:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 80198fe:	290f      	cmp	r1, #15
		seq /= 16;
 8019900:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
 8019904:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	} while (seq);
 8019908:	f240 814a 	bls.w	8019ba0 <dir_register+0x62c>
		c = (BYTE)((seq % 16) + '0');
 801990c:	f000 010f 	and.w	r1, r0, #15
 8019910:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8019914:	2a39      	cmp	r2, #57	; 0x39
 8019916:	bf88      	it	hi
 8019918:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 801991c:	280f      	cmp	r0, #15
		seq /= 16;
 801991e:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
 8019922:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	} while (seq);
 8019926:	f240 814a 	bls.w	8019bbe <dir_register+0x64a>
		c = (BYTE)((seq % 16) + '0');
 801992a:	f001 000f 	and.w	r0, r1, #15
 801992e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8019932:	2a39      	cmp	r2, #57	; 0x39
 8019934:	bf88      	it	hi
 8019936:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 801993a:	290f      	cmp	r1, #15
		seq /= 16;
 801993c:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
 8019940:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	} while (seq);
 8019944:	f240 8168 	bls.w	8019c18 <dir_register+0x6a4>
		c = (BYTE)((seq % 16) + '0');
 8019948:	f000 010f 	and.w	r1, r0, #15
 801994c:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8019950:	2a39      	cmp	r2, #57	; 0x39
 8019952:	bf88      	it	hi
 8019954:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8019958:	280f      	cmp	r0, #15
		seq /= 16;
 801995a:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
 801995e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	} while (seq);
 8019962:	f240 815f 	bls.w	8019c24 <dir_register+0x6b0>
		c = (BYTE)((seq % 16) + '0');
 8019966:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
 801996a:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
 801996e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8019972:	2a39      	cmp	r2, #57	; 0x39
 8019974:	bf88      	it	hi
 8019976:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 801997a:	290f      	cmp	r1, #15
		ns[i--] = c;
 801997c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	} while (seq);
 8019980:	f240 8156 	bls.w	8019c30 <dir_register+0x6bc>
		c = (BYTE)((seq % 16) + '0');
 8019984:	f00e 010f 	and.w	r1, lr, #15
 8019988:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 801998c:	2a39      	cmp	r2, #57	; 0x39
 801998e:	bf88      	it	hi
 8019990:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8019994:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
 8019998:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
 801999c:	f240 8106 	bls.w	8019bac <dir_register+0x638>
		ns[i--] = c;
 80199a0:	f04f 3cff 	mov.w	ip, #4294967295
 80199a4:	f10a 0123 	add.w	r1, sl, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80199a8:	2200      	movs	r2, #0
 80199aa:	e002      	b.n	80199b2 <dir_register+0x43e>
 80199ac:	3201      	adds	r2, #1
 80199ae:	4562      	cmp	r2, ip
 80199b0:	d003      	beq.n	80199ba <dir_register+0x446>
 80199b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80199b6:	2b20      	cmp	r3, #32
 80199b8:	d1f8      	bne.n	80199ac <dir_register+0x438>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80199ba:	f1bc 0f07 	cmp.w	ip, #7
 80199be:	d91c      	bls.n	80199fa <dir_register+0x486>
 80199c0:	1c50      	adds	r0, r2, #1
 80199c2:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
 80199c6:	2807      	cmp	r0, #7
 80199c8:	d809      	bhi.n	80199de <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80199ca:	1c42      	adds	r2, r0, #1
 80199cc:	2120      	movs	r1, #32
 80199ce:	2a08      	cmp	r2, #8
 80199d0:	f1c0 0208 	rsb	r2, r0, #8
 80199d4:	4428      	add	r0, r5
 80199d6:	bf88      	it	hi
 80199d8:	2201      	movhi	r2, #1
 80199da:	f00b fec9 	bl	8025770 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80199de:	4650      	mov	r0, sl
 80199e0:	f7ff f9f8 	bl	8018dd4 <dir_find>
			if (res != FR_OK) break;
 80199e4:	2800      	cmp	r0, #0
 80199e6:	d17d      	bne.n	8019ae4 <dir_register+0x570>
		for (n = 1; n < 100; n++) {
 80199e8:	3601      	adds	r6, #1
 80199ea:	2e64      	cmp	r6, #100	; 0x64
 80199ec:	f000 8095 	beq.w	8019b1a <dir_register+0x5a6>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80199f0:	9b01      	ldr	r3, [sp, #4]
 80199f2:	68d9      	ldr	r1, [r3, #12]
 80199f4:	e6a2      	b.n	801973c <dir_register+0x1c8>
 80199f6:	46b6      	mov	lr, r6
 80199f8:	e769      	b.n	80198ce <dir_register+0x35a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80199fa:	f10c 0348 	add.w	r3, ip, #72	; 0x48
 80199fe:	f10c 0c01 	add.w	ip, ip, #1
 8019a02:	eb0d 0103 	add.w	r1, sp, r3
 8019a06:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8019a0a:	54a9      	strb	r1, [r5, r2]
 8019a0c:	3201      	adds	r2, #1
	} while (j < 8);
 8019a0e:	2a07      	cmp	r2, #7
 8019a10:	d8e5      	bhi.n	80199de <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019a12:	f1bc 0f08 	cmp.w	ip, #8
 8019a16:	f000 8086 	beq.w	8019b26 <dir_register+0x5b2>
 8019a1a:	f10c 0348 	add.w	r3, ip, #72	; 0x48
	} while (j < 8);
 8019a1e:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019a20:	f102 0001 	add.w	r0, r2, #1
 8019a24:	eb0d 0103 	add.w	r1, sp, r3
 8019a28:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8019a2c:	54a9      	strb	r1, [r5, r2]
 8019a2e:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 8019a32:	d0d4      	beq.n	80199de <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019a34:	2908      	cmp	r1, #8
 8019a36:	d07e      	beq.n	8019b36 <dir_register+0x5c2>
 8019a38:	f10c 0349 	add.w	r3, ip, #73	; 0x49
	} while (j < 8);
 8019a3c:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019a3e:	eb0d 0103 	add.w	r1, sp, r3
 8019a42:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8019a46:	5429      	strb	r1, [r5, r0]
 8019a48:	f10c 0102 	add.w	r1, ip, #2
 8019a4c:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8019a50:	d0c5      	beq.n	80199de <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019a52:	2908      	cmp	r1, #8
 8019a54:	d077      	beq.n	8019b46 <dir_register+0x5d2>
 8019a56:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
	} while (j < 8);
 8019a5a:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019a5c:	eb0d 0103 	add.w	r1, sp, r3
 8019a60:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8019a64:	5429      	strb	r1, [r5, r0]
 8019a66:	f10c 0103 	add.w	r1, ip, #3
 8019a6a:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8019a6e:	d0b6      	beq.n	80199de <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019a70:	2908      	cmp	r1, #8
 8019a72:	d070      	beq.n	8019b56 <dir_register+0x5e2>
 8019a74:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
	} while (j < 8);
 8019a78:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019a7a:	eb0d 0103 	add.w	r1, sp, r3
 8019a7e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8019a82:	5429      	strb	r1, [r5, r0]
 8019a84:	f10c 0104 	add.w	r1, ip, #4
 8019a88:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8019a8c:	d0a7      	beq.n	80199de <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019a8e:	2908      	cmp	r1, #8
 8019a90:	d069      	beq.n	8019b66 <dir_register+0x5f2>
 8019a92:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
	} while (j < 8);
 8019a96:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019a98:	eb0d 0103 	add.w	r1, sp, r3
 8019a9c:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8019aa0:	5429      	strb	r1, [r5, r0]
 8019aa2:	f10c 0105 	add.w	r1, ip, #5
 8019aa6:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 8019aaa:	d098      	beq.n	80199de <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019aac:	2908      	cmp	r1, #8
 8019aae:	d062      	beq.n	8019b76 <dir_register+0x602>
 8019ab0:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
	} while (j < 8);
 8019ab4:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019ab6:	eb0d 0103 	add.w	r1, sp, r3
 8019aba:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8019abe:	5429      	strb	r1, [r5, r0]
 8019ac0:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 8019ac4:	d08b      	beq.n	80199de <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019ac6:	f1bc 0f01 	cmp.w	ip, #1
 8019aca:	d15c      	bne.n	8019b86 <dir_register+0x612>
 8019acc:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	} while (j < 8);
 8019ad0:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019ad2:	546a      	strb	r2, [r5, r1]
	} while (j < 8);
 8019ad4:	d183      	bne.n	80199de <dir_register+0x46a>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8019ad6:	4650      	mov	r0, sl
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019ad8:	f88a 902b 	strb.w	r9, [sl, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8019adc:	f7ff f97a 	bl	8018dd4 <dir_find>
			if (res != FR_OK) break;
 8019ae0:	2800      	cmp	r0, #0
 8019ae2:	d081      	beq.n	80199e8 <dir_register+0x474>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8019ae4:	2804      	cmp	r0, #4
 8019ae6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8019ae8:	4683      	mov	fp, r0
 8019aea:	d118      	bne.n	8019b1e <dir_register+0x5aa>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8019aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	FATFS *fs = dp->obj.fs;
 8019aee:	f8da 9000 	ldr.w	r9, [sl]
		dp->fn[NSFLAG] = sn[NSFLAG];
 8019af2:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8019af6:	f013 0302 	ands.w	r3, r3, #2
 8019afa:	f47f ad65 	bne.w	80195c8 <dir_register+0x54>
 8019afe:	9302      	str	r3, [sp, #8]
 8019b00:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
 8019b02:	2100      	movs	r1, #0
 8019b04:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8019b06:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 8019b08:	f7ff f8aa 	bl	8018c60 <dir_sdi>
	if (res == FR_OK) {
 8019b0c:	4683      	mov	fp, r0
 8019b0e:	2800      	cmp	r0, #0
 8019b10:	f43f ad6b 	beq.w	80195ea <dir_register+0x76>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8019b14:	f1bb 0f04 	cmp.w	fp, #4
 8019b18:	d101      	bne.n	8019b1e <dir_register+0x5aa>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8019b1a:	f04f 0b07 	mov.w	fp, #7
}
 8019b1e:	4658      	mov	r0, fp
 8019b20:	b013      	add	sp, #76	; 0x4c
 8019b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
 8019b26:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019b28:	f102 0001 	add.w	r0, r2, #1
 8019b2c:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
 8019b30:	f47f af4b 	bne.w	80199ca <dir_register+0x456>
 8019b34:	e753      	b.n	80199de <dir_register+0x46a>
 8019b36:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019b38:	f805 9000 	strb.w	r9, [r5, r0]
 8019b3c:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8019b40:	f47f af43 	bne.w	80199ca <dir_register+0x456>
 8019b44:	e74b      	b.n	80199de <dir_register+0x46a>
 8019b46:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019b48:	f805 9000 	strb.w	r9, [r5, r0]
 8019b4c:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8019b50:	f47f af3b 	bne.w	80199ca <dir_register+0x456>
 8019b54:	e743      	b.n	80199de <dir_register+0x46a>
 8019b56:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019b58:	f805 9000 	strb.w	r9, [r5, r0]
 8019b5c:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8019b60:	f47f af33 	bne.w	80199ca <dir_register+0x456>
 8019b64:	e73b      	b.n	80199de <dir_register+0x46a>
 8019b66:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019b68:	f805 9000 	strb.w	r9, [r5, r0]
 8019b6c:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 8019b70:	f47f af2b 	bne.w	80199ca <dir_register+0x456>
 8019b74:	e733      	b.n	80199de <dir_register+0x46a>
 8019b76:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019b78:	f805 9000 	strb.w	r9, [r5, r0]
 8019b7c:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 8019b80:	f47f af23 	bne.w	80199ca <dir_register+0x456>
 8019b84:	e72b      	b.n	80199de <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019b86:	f805 9001 	strb.w	r9, [r5, r1]
	} while (j < 8);
 8019b8a:	2a00      	cmp	r2, #0
 8019b8c:	f47f af27 	bne.w	80199de <dir_register+0x46a>
 8019b90:	2007      	movs	r0, #7
 8019b92:	e71a      	b.n	80199ca <dir_register+0x456>
	ns[i] = '~';
 8019b94:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8019b96:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 8019b9a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8019b9e:	e701      	b.n	80199a4 <dir_register+0x430>
	ns[i] = '~';
 8019ba0:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8019ba2:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 8019ba6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8019baa:	e6fb      	b.n	80199a4 <dir_register+0x430>
	ns[i] = '~';
 8019bac:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019bae:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 8019bb2:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019bb6:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
 8019bba:	4662      	mov	r2, ip
 8019bbc:	e72d      	b.n	8019a1a <dir_register+0x4a6>
	ns[i] = '~';
 8019bbe:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8019bc0:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 8019bc4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8019bc8:	e6ec      	b.n	80199a4 <dir_register+0x430>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8019bca:	8962      	ldrh	r2, [r4, #10]
 8019bcc:	3a01      	subs	r2, #1
 8019bce:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 8019bd2:	f47f ad32 	bne.w	801963a <dir_register+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8019bd6:	4619      	mov	r1, r3
 8019bd8:	4620      	mov	r0, r4
 8019bda:	f7fe fc45 	bl	8018468 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8019bde:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8019be0:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8019be2:	f240 8205 	bls.w	8019ff0 <dir_register+0xa7c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8019be6:	1c42      	adds	r2, r0, #1
 8019be8:	f000 80dc 	beq.w	8019da4 <dir_register+0x830>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8019bec:	69a3      	ldr	r3, [r4, #24]
 8019bee:	4602      	mov	r2, r0
 8019bf0:	4298      	cmp	r0, r3
 8019bf2:	f080 80e7 	bcs.w	8019dc4 <dir_register+0x850>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019bf6:	3b02      	subs	r3, #2
	clst -= 2;
 8019bf8:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019bfc:	f104 0634 	add.w	r6, r4, #52	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019c00:	455b      	cmp	r3, fp
				dp->clust = clst;		/* Initialize data for new cluster */
 8019c02:	f8ca 2018 	str.w	r2, [sl, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019c06:	f240 813b 	bls.w	8019e80 <dir_register+0x90c>
	return clst * fs->csize + fs->database;
 8019c0a:	8963      	ldrh	r3, [r4, #10]
 8019c0c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8019c0e:	fb0b 1103 	mla	r1, fp, r3, r1
				dp->sect = clust2sect(fs, clst);
 8019c12:	f8ca 101c 	str.w	r1, [sl, #28]
 8019c16:	e512      	b.n	801963e <dir_register+0xca>
	ns[i] = '~';
 8019c18:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8019c1a:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 8019c1e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8019c22:	e6bf      	b.n	80199a4 <dir_register+0x430>
	ns[i] = '~';
 8019c24:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8019c26:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 8019c2a:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8019c2e:	e6b9      	b.n	80199a4 <dir_register+0x430>
	ns[i] = '~';
 8019c30:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8019c32:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 8019c36:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8019c3a:	e6b3      	b.n	80199a4 <dir_register+0x430>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8019c3c:	f04f 0b06 	mov.w	fp, #6
}
 8019c40:	4658      	mov	r0, fp
 8019c42:	b013      	add	sp, #76	; 0x4c
 8019c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c48:	4683      	mov	fp, r0
 8019c4a:	4658      	mov	r0, fp
 8019c4c:	b013      	add	sp, #76	; 0x4c
 8019c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8019c52:	f8da 1014 	ldr.w	r1, [sl, #20]
 8019c56:	4650      	mov	r0, sl
 8019c58:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 8019c5c:	f7ff f800 	bl	8018c60 <dir_sdi>
		if (res == FR_OK) {
 8019c60:	4605      	mov	r5, r0
 8019c62:	2800      	cmp	r0, #0
 8019c64:	f040 810a 	bne.w	8019e7c <dir_register+0x908>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8019c68:	f89a 1024 	ldrb.w	r1, [sl, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8019c6c:	f04f 090f 	mov.w	r9, #15
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8019c70:	f89a 4025 	ldrb.w	r4, [sl, #37]	; 0x25
 8019c74:	01cb      	lsls	r3, r1, #7
 8019c76:	f89a 0026 	ldrb.w	r0, [sl, #38]	; 0x26
 8019c7a:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
 8019c7e:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
 8019c82:	f89a 8028 	ldrb.w	r8, [sl, #40]	; 0x28
 8019c86:	f89a e029 	ldrb.w	lr, [sl, #41]	; 0x29
 8019c8a:	1919      	adds	r1, r3, r4
 8019c8c:	f89a c02a 	ldrb.w	ip, [sl, #42]	; 0x2a
 8019c90:	f89a 702b 	ldrb.w	r7, [sl, #43]	; 0x2b
	*ptr++ = (BYTE)val; val >>= 8;
 8019c94:	f64f 74ff 	movw	r4, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8019c98:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8019c9c:	f89a 602c 	ldrb.w	r6, [sl, #44]	; 0x2c
 8019ca0:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8019ca4:	fa50 f383 	uxtab	r3, r0, r3
 8019ca8:	f89a 002d 	ldrb.w	r0, [sl, #45]	; 0x2d
 8019cac:	f3c3 0146 	ubfx	r1, r3, #1, #7
 8019cb0:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
 8019cb4:	f89a 102e 	ldrb.w	r1, [sl, #46]	; 0x2e
 8019cb8:	fa52 f283 	uxtab	r2, r2, r3
 8019cbc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8019cc0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8019cc4:	fa58 f883 	uxtab	r8, r8, r3
 8019cc8:	f3c8 0346 	ubfx	r3, r8, #1, #7
 8019ccc:	ea43 13c8 	orr.w	r3, r3, r8, lsl #7
 8019cd0:	fa5e fe83 	uxtab	lr, lr, r3
 8019cd4:	f3ce 0346 	ubfx	r3, lr, #1, #7
 8019cd8:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
 8019cdc:	fa5c fc83 	uxtab	ip, ip, r3
 8019ce0:	f3cc 0346 	ubfx	r3, ip, #1, #7
 8019ce4:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
 8019ce8:	fa57 f783 	uxtab	r7, r7, r3
 8019cec:	f3c7 0346 	ubfx	r3, r7, #1, #7
 8019cf0:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 8019cf4:	fa56 f683 	uxtab	r6, r6, r3
 8019cf8:	f3c6 0346 	ubfx	r3, r6, #1, #7
 8019cfc:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
 8019d00:	9e01      	ldr	r6, [sp, #4]
 8019d02:	fa50 f083 	uxtab	r0, r0, r3
 8019d06:	f3c0 0346 	ubfx	r3, r0, #1, #7
 8019d0a:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8019d0e:	fa51 f180 	uxtab	r1, r1, r0
 8019d12:	fa5f f881 	uxtb.w	r8, r1
				res = move_window(fs, dp->sect);
 8019d16:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019d1a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8019d1c:	4299      	cmp	r1, r3
 8019d1e:	d004      	beq.n	8019d2a <dir_register+0x7b6>
 8019d20:	4630      	mov	r0, r6
 8019d22:	f7fe f94f 	bl	8017fc4 <move_window.part.0>
				if (res != FR_OK) break;
 8019d26:	2800      	cmp	r0, #0
 8019d28:	d18e      	bne.n	8019c48 <dir_register+0x6d4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8019d2a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8019d2e:	68f1      	ldr	r1, [r6, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8019d30:	1e42      	subs	r2, r0, #1
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8019d32:	f8da 3020 	ldr.w	r3, [sl, #32]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8019d36:	eb02 0742 	add.w	r7, r2, r2, lsl #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8019d3a:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8019d3e:	f883 900b 	strb.w	r9, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8019d42:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	dir[LDIR_Type] = 0;
 8019d46:	731d      	strb	r5, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8019d48:	769d      	strb	r5, [r3, #26]
	*ptr++ = (BYTE)val;
 8019d4a:	76dd      	strb	r5, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019d4c:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8019d50:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019d54:	705f      	strb	r7, [r3, #1]
	*ptr++ = (BYTE)val;
 8019d56:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019d5a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019d5e:	2f00      	cmp	r7, #0
 8019d60:	f040 8090 	bne.w	8019e84 <dir_register+0x910>
	*ptr++ = (BYTE)val; val >>= 8;
 8019d64:	f8a3 4003 	strh.w	r4, [r3, #3]
 8019d68:	f8a3 4005 	strh.w	r4, [r3, #5]
 8019d6c:	f8a3 4007 	strh.w	r4, [r3, #7]
 8019d70:	f8a3 4009 	strh.w	r4, [r3, #9]
 8019d74:	81dc      	strh	r4, [r3, #14]
 8019d76:	821c      	strh	r4, [r3, #16]
 8019d78:	825c      	strh	r4, [r3, #18]
 8019d7a:	829c      	strh	r4, [r3, #20]
 8019d7c:	82dc      	strh	r4, [r3, #22]
 8019d7e:	831c      	strh	r4, [r3, #24]
 8019d80:	839c      	strh	r4, [r3, #28]
 8019d82:	83dc      	strh	r4, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8019d84:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8019d88:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
 8019d8a:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8019d8c:	4650      	mov	r0, sl
				fs->wflag = 1;
 8019d8e:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8019d90:	f7fe fbca 	bl	8018528 <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 8019d94:	2800      	cmp	r0, #0
 8019d96:	f47f af57 	bne.w	8019c48 <dir_register+0x6d4>
 8019d9a:	9b02      	ldr	r3, [sp, #8]
 8019d9c:	3b01      	subs	r3, #1
 8019d9e:	9302      	str	r3, [sp, #8]
 8019da0:	d1b9      	bne.n	8019d16 <dir_register+0x7a2>
 8019da2:	e46b      	b.n	801967c <dir_register+0x108>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8019da4:	f04f 0b01 	mov.w	fp, #1
}
 8019da8:	4658      	mov	r0, fp
 8019daa:	b013      	add	sp, #76	; 0x4c
 8019dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8019db0:	f04f 0b07 	mov.w	fp, #7
				dp->sect = 0; return FR_NO_FILE;
 8019db4:	f8ca 301c 	str.w	r3, [sl, #28]
}
 8019db8:	4658      	mov	r0, fp
 8019dba:	b013      	add	sp, #76	; 0x4c
 8019dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dc0:	4683      	mov	fp, r0
 8019dc2:	e6a7      	b.n	8019b14 <dir_register+0x5a0>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8019dc4:	f8da 1018 	ldr.w	r1, [sl, #24]
 8019dc8:	4650      	mov	r0, sl
 8019dca:	f7fe fe79 	bl	8018ac0 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8019dce:	4603      	mov	r3, r0
 8019dd0:	9004      	str	r0, [sp, #16]
 8019dd2:	2800      	cmp	r0, #0
 8019dd4:	f43f aea1 	beq.w	8019b1a <dir_register+0x5a6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8019dd8:	2801      	cmp	r0, #1
 8019dda:	f000 8109 	beq.w	8019ff0 <dir_register+0xa7c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019dde:	3301      	adds	r3, #1
 8019de0:	d0e0      	beq.n	8019da4 <dir_register+0x830>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019de2:	78e3      	ldrb	r3, [r4, #3]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	f040 8111 	bne.w	801a00c <dir_register+0xa98>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019dea:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 8019dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019df2:	2100      	movs	r1, #0
 8019df4:	4630      	mov	r0, r6
 8019df6:	f00b fcbb 	bl	8025770 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019dfa:	69a3      	ldr	r3, [r4, #24]
	clst -= 2;
 8019dfc:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019dfe:	3b02      	subs	r3, #2
	return clst * fs->csize + fs->database;
 8019e00:	8961      	ldrh	r1, [r4, #10]
	clst -= 2;
 8019e02:	f1a2 0b02 	sub.w	fp, r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019e06:	459b      	cmp	fp, r3
 8019e08:	f080 80fe 	bcs.w	801a008 <dir_register+0xa94>
	return clst * fs->csize + fs->database;
 8019e0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019e0e:	fb0b 2201 	mla	r2, fp, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8019e12:	6322      	str	r2, [r4, #48]	; 0x30
 8019e14:	2900      	cmp	r1, #0
 8019e16:	f000 80f4 	beq.w	801a002 <dir_register+0xa8e>
 8019e1a:	2300      	movs	r3, #0
 8019e1c:	e9cd 5707 	strd	r5, r7, [sp, #28]
 8019e20:	4637      	mov	r7, r6
 8019e22:	4616      	mov	r6, r2
 8019e24:	9305      	str	r3, [sp, #20]
						fs->wflag = 1;
 8019e26:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019e2a:	4632      	mov	r2, r6
 8019e2c:	4639      	mov	r1, r7
 8019e2e:	7860      	ldrb	r0, [r4, #1]
						fs->wflag = 1;
 8019e30:	70e3      	strb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019e32:	2301      	movs	r3, #1
 8019e34:	f7fd ff78 	bl	8017d28 <disk_write>
 8019e38:	2800      	cmp	r0, #0
 8019e3a:	d1b3      	bne.n	8019da4 <dir_register+0x830>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
			fs->wflag = 0;
 8019e3e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019e40:	1af0      	subs	r0, r6, r3
 8019e42:	69e3      	ldr	r3, [r4, #28]
 8019e44:	4298      	cmp	r0, r3
 8019e46:	d20e      	bcs.n	8019e66 <dir_register+0x8f2>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019e48:	78a5      	ldrb	r5, [r4, #2]
 8019e4a:	2d01      	cmp	r5, #1
 8019e4c:	d801      	bhi.n	8019e52 <dir_register+0x8de>
 8019e4e:	e00a      	b.n	8019e66 <dir_register+0x8f2>
					wsect += fs->fsize;
 8019e50:	69e3      	ldr	r3, [r4, #28]
 8019e52:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019e54:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8019e56:	2301      	movs	r3, #1
 8019e58:	4639      	mov	r1, r7
 8019e5a:	4632      	mov	r2, r6
 8019e5c:	7860      	ldrb	r0, [r4, #1]
 8019e5e:	f7fd ff63 	bl	8017d28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019e62:	2d01      	cmp	r5, #1
 8019e64:	d1f4      	bne.n	8019e50 <dir_register+0x8dc>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8019e66:	9a05      	ldr	r2, [sp, #20]
 8019e68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019e6a:	1c50      	adds	r0, r2, #1
 8019e6c:	8965      	ldrh	r5, [r4, #10]
 8019e6e:	1c5e      	adds	r6, r3, #1
 8019e70:	42a8      	cmp	r0, r5
 8019e72:	6326      	str	r6, [r4, #48]	; 0x30
 8019e74:	f080 80bf 	bcs.w	8019ff6 <dir_register+0xa82>
 8019e78:	9005      	str	r0, [sp, #20]
 8019e7a:	e7d4      	b.n	8019e26 <dir_register+0x8b2>
 8019e7c:	4683      	mov	fp, r0
 8019e7e:	e64e      	b.n	8019b1e <dir_register+0x5aa>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019e80:	2100      	movs	r1, #0
 8019e82:	e6c6      	b.n	8019c12 <dir_register+0x69e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019e84:	42a7      	cmp	r7, r4
 8019e86:	f43f af6d 	beq.w	8019d64 <dir_register+0x7f0>
 8019e8a:	3201      	adds	r2, #1
 8019e8c:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
 8019e90:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8019e92:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8019e96:	70df      	strb	r7, [r3, #3]
	*ptr++ = (BYTE)val;
 8019e98:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019e9c:	2f00      	cmp	r7, #0
 8019e9e:	f43f af63 	beq.w	8019d68 <dir_register+0x7f4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019ea2:	42a7      	cmp	r7, r4
 8019ea4:	f43f af60 	beq.w	8019d68 <dir_register+0x7f4>
 8019ea8:	440a      	add	r2, r1
 8019eaa:	8857      	ldrh	r7, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8019eac:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8019eb0:	715f      	strb	r7, [r3, #5]
	*ptr++ = (BYTE)val;
 8019eb2:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019eb6:	2f00      	cmp	r7, #0
 8019eb8:	f43f af58 	beq.w	8019d6c <dir_register+0x7f8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019ebc:	42a7      	cmp	r7, r4
 8019ebe:	f43f af55 	beq.w	8019d6c <dir_register+0x7f8>
 8019ec2:	8897      	ldrh	r7, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8019ec4:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8019ec8:	71df      	strb	r7, [r3, #7]
	*ptr++ = (BYTE)val;
 8019eca:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019ece:	2f00      	cmp	r7, #0
 8019ed0:	f43f af4e 	beq.w	8019d70 <dir_register+0x7fc>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019ed4:	42a7      	cmp	r7, r4
 8019ed6:	f43f af4b 	beq.w	8019d70 <dir_register+0x7fc>
 8019eda:	88d7      	ldrh	r7, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8019edc:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8019ee0:	725f      	strb	r7, [r3, #9]
	*ptr++ = (BYTE)val;
 8019ee2:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019ee6:	2f00      	cmp	r7, #0
 8019ee8:	f43f af44 	beq.w	8019d74 <dir_register+0x800>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019eec:	42a7      	cmp	r7, r4
 8019eee:	f43f af41 	beq.w	8019d74 <dir_register+0x800>
 8019ef2:	8917      	ldrh	r7, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8019ef4:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8019ef8:	739f      	strb	r7, [r3, #14]
	*ptr++ = (BYTE)val;
 8019efa:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019efe:	2f00      	cmp	r7, #0
 8019f00:	f43f af39 	beq.w	8019d76 <dir_register+0x802>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019f04:	42a7      	cmp	r7, r4
 8019f06:	f43f af36 	beq.w	8019d76 <dir_register+0x802>
 8019f0a:	8957      	ldrh	r7, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8019f0c:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8019f10:	741f      	strb	r7, [r3, #16]
	*ptr++ = (BYTE)val;
 8019f12:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019f16:	2f00      	cmp	r7, #0
 8019f18:	f43f af2e 	beq.w	8019d78 <dir_register+0x804>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019f1c:	42a7      	cmp	r7, r4
 8019f1e:	f43f af2b 	beq.w	8019d78 <dir_register+0x804>
 8019f22:	8997      	ldrh	r7, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8019f24:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8019f28:	749f      	strb	r7, [r3, #18]
	*ptr++ = (BYTE)val;
 8019f2a:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019f2e:	2f00      	cmp	r7, #0
 8019f30:	f43f af23 	beq.w	8019d7a <dir_register+0x806>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019f34:	42a7      	cmp	r7, r4
 8019f36:	f43f af20 	beq.w	8019d7a <dir_register+0x806>
 8019f3a:	89d7      	ldrh	r7, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8019f3c:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8019f40:	751f      	strb	r7, [r3, #20]
	*ptr++ = (BYTE)val;
 8019f42:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019f46:	2f00      	cmp	r7, #0
 8019f48:	f43f af18 	beq.w	8019d7c <dir_register+0x808>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019f4c:	42a7      	cmp	r7, r4
 8019f4e:	f43f af15 	beq.w	8019d7c <dir_register+0x808>
 8019f52:	8a17      	ldrh	r7, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8019f54:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8019f58:	759f      	strb	r7, [r3, #22]
	*ptr++ = (BYTE)val;
 8019f5a:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019f5e:	2f00      	cmp	r7, #0
 8019f60:	f43f af0d 	beq.w	8019d7e <dir_register+0x80a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019f64:	42a7      	cmp	r7, r4
 8019f66:	f43f af0a 	beq.w	8019d7e <dir_register+0x80a>
 8019f6a:	8a57      	ldrh	r7, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8019f6c:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8019f70:	761f      	strb	r7, [r3, #24]
	*ptr++ = (BYTE)val;
 8019f72:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019f76:	2f00      	cmp	r7, #0
 8019f78:	f43f af02 	beq.w	8019d80 <dir_register+0x80c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019f7c:	42a7      	cmp	r7, r4
 8019f7e:	f43f aeff 	beq.w	8019d80 <dir_register+0x80c>
 8019f82:	8a97      	ldrh	r7, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8019f84:	ea4f 2e17 	mov.w	lr, r7, lsr #8
 8019f88:	771f      	strb	r7, [r3, #28]
	*ptr++ = (BYTE)val;
 8019f8a:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019f8e:	2f00      	cmp	r7, #0
 8019f90:	f43f aef7 	beq.w	8019d82 <dir_register+0x80e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019f94:	42a7      	cmp	r7, r4
 8019f96:	f43f aef4 	beq.w	8019d82 <dir_register+0x80e>
 8019f9a:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019f9c:	1e57      	subs	r7, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8019f9e:	779a      	strb	r2, [r3, #30]
 8019fa0:	0a12      	lsrs	r2, r2, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019fa2:	b2bf      	uxth	r7, r7
	*ptr++ = (BYTE)val;
 8019fa4:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019fa6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8019faa:	4297      	cmp	r7, r2
 8019fac:	f63f aeea 	bhi.w	8019d84 <dir_register+0x810>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8019fb0:	4461      	add	r1, ip
 8019fb2:	8b4a      	ldrh	r2, [r1, #26]
 8019fb4:	2a00      	cmp	r2, #0
 8019fb6:	f47f aee7 	bne.w	8019d88 <dir_register+0x814>
 8019fba:	e6e3      	b.n	8019d84 <dir_register+0x810>
			*d++ = *s++;
 8019fbc:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
 8019fc0:	701a      	strb	r2, [r3, #0]
 8019fc2:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
 8019fc6:	705a      	strb	r2, [r3, #1]
 8019fc8:	f89a 2026 	ldrb.w	r2, [sl, #38]	; 0x26
 8019fcc:	709a      	strb	r2, [r3, #2]
 8019fce:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
 8019fd2:	70da      	strb	r2, [r3, #3]
 8019fd4:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8019fd8:	711a      	strb	r2, [r3, #4]
 8019fda:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8019fde:	715a      	strb	r2, [r3, #5]
 8019fe0:	f89a 202a 	ldrb.w	r2, [sl, #42]	; 0x2a
 8019fe4:	719a      	strb	r2, [r3, #6]
 8019fe6:	f89a 202b 	ldrb.w	r2, [sl, #43]	; 0x2b
 8019fea:	71da      	strb	r2, [r3, #7]
 8019fec:	f7ff bb66 	b.w	80196bc <dir_register+0x148>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8019ff0:	f04f 0b02 	mov.w	fp, #2
 8019ff4:	e593      	b.n	8019b1e <dir_register+0x5aa>
					fs->winsect -= n;							/* Restore window offset */
 8019ff6:	1a9a      	subs	r2, r3, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019ff8:	69a3      	ldr	r3, [r4, #24]
					fs->winsect -= n;							/* Restore window offset */
 8019ffa:	463e      	mov	r6, r7
 8019ffc:	9d07      	ldr	r5, [sp, #28]
 8019ffe:	9f08      	ldr	r7, [sp, #32]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a000:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 801a002:	6322      	str	r2, [r4, #48]	; 0x30
 801a004:	9a04      	ldr	r2, [sp, #16]
 801a006:	e5fb      	b.n	8019c00 <dir_register+0x68c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a008:	2200      	movs	r2, #0
 801a00a:	e702      	b.n	8019e12 <dir_register+0x89e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801a00c:	f104 0634 	add.w	r6, r4, #52	; 0x34
		wsect = fs->winsect;	/* Current sector number */
 801a010:	6b22      	ldr	r2, [r4, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801a012:	2301      	movs	r3, #1
 801a014:	7860      	ldrb	r0, [r4, #1]
 801a016:	4631      	mov	r1, r6
 801a018:	9205      	str	r2, [sp, #20]
 801a01a:	f7fd fe85 	bl	8017d28 <disk_write>
 801a01e:	2800      	cmp	r0, #0
 801a020:	f47f aec0 	bne.w	8019da4 <dir_register+0x830>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a026:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
 801a028:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801a02a:	1ad1      	subs	r1, r2, r3
 801a02c:	69e3      	ldr	r3, [r4, #28]
 801a02e:	4299      	cmp	r1, r3
 801a030:	f4bf aedd 	bcs.w	8019dee <dir_register+0x87a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a034:	f894 b002 	ldrb.w	fp, [r4, #2]
 801a038:	f1bb 0f01 	cmp.w	fp, #1
 801a03c:	f67f aed7 	bls.w	8019dee <dir_register+0x87a>
 801a040:	4631      	mov	r1, r6
 801a042:	462e      	mov	r6, r5
 801a044:	4625      	mov	r5, r4
 801a046:	4614      	mov	r4, r2
 801a048:	e000      	b.n	801a04c <dir_register+0xad8>
					wsect += fs->fsize;
 801a04a:	69eb      	ldr	r3, [r5, #28]
 801a04c:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a04e:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 801a052:	2301      	movs	r3, #1
 801a054:	7868      	ldrb	r0, [r5, #1]
 801a056:	4622      	mov	r2, r4
 801a058:	9105      	str	r1, [sp, #20]
 801a05a:	f7fd fe65 	bl	8017d28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801a05e:	f1bb 0f01 	cmp.w	fp, #1
 801a062:	9905      	ldr	r1, [sp, #20]
 801a064:	d1f1      	bne.n	801a04a <dir_register+0xad6>
 801a066:	462c      	mov	r4, r5
 801a068:	4635      	mov	r5, r6
 801a06a:	460e      	mov	r6, r1
 801a06c:	e6bf      	b.n	8019dee <dir_register+0x87a>
 801a06e:	bf00      	nop

0801a070 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801a070:	b510      	push	{r4, lr}
 801a072:	b082      	sub	sp, #8
 801a074:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 801a078:	b1b1      	cbz	r1, 801a0a8 <f_mount+0x38>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801a07a:	f891 c000 	ldrb.w	ip, [r1]
 801a07e:	f1bc 0f1f 	cmp.w	ip, #31
 801a082:	d914      	bls.n	801a0ae <f_mount+0x3e>
 801a084:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 801a088:	d011      	beq.n	801a0ae <f_mount+0x3e>
 801a08a:	4608      	mov	r0, r1
 801a08c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801a090:	2b1f      	cmp	r3, #31
 801a092:	d90e      	bls.n	801a0b2 <f_mount+0x42>
 801a094:	2b3a      	cmp	r3, #58	; 0x3a
 801a096:	d1f9      	bne.n	801a08c <f_mount+0x1c>
			i = *tp++ - '0';
 801a098:	3101      	adds	r1, #1
 801a09a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801a09e:	4288      	cmp	r0, r1
 801a0a0:	d102      	bne.n	801a0a8 <f_mount+0x38>
 801a0a2:	f1bc 0f01 	cmp.w	ip, #1
 801a0a6:	d908      	bls.n	801a0ba <f_mount+0x4a>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 801a0a8:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 801a0aa:	b002      	add	sp, #8
 801a0ac:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801a0ae:	4663      	mov	r3, ip
 801a0b0:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801a0b2:	2b3a      	cmp	r3, #58	; 0x3a
 801a0b4:	d0f0      	beq.n	801a098 <f_mount+0x28>
		vol = 0;		/* Drive 0 */
 801a0b6:	f04f 0c00 	mov.w	ip, #0
	cfs = FatFs[vol];					/* Pointer to fs object */
 801a0ba:	4c1d      	ldr	r4, [pc, #116]	; (801a130 <f_mount+0xc0>)
 801a0bc:	f854 302c 	ldr.w	r3, [r4, ip, lsl #2]
	if (cfs) {
 801a0c0:	b173      	cbz	r3, 801a0e0 <f_mount+0x70>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801a0c2:	491c      	ldr	r1, [pc, #112]	; (801a134 <f_mount+0xc4>)
 801a0c4:	6808      	ldr	r0, [r1, #0]
 801a0c6:	4283      	cmp	r3, r0
 801a0c8:	d021      	beq.n	801a10e <f_mount+0x9e>
 801a0ca:	6908      	ldr	r0, [r1, #16]
 801a0cc:	4298      	cmp	r0, r3
 801a0ce:	d023      	beq.n	801a118 <f_mount+0xa8>
 801a0d0:	6a08      	ldr	r0, [r1, #32]
 801a0d2:	4283      	cmp	r3, r0
 801a0d4:	d025      	beq.n	801a122 <f_mount+0xb2>
 801a0d6:	6b08      	ldr	r0, [r1, #48]	; 0x30
 801a0d8:	4298      	cmp	r0, r3
 801a0da:	d015      	beq.n	801a108 <f_mount+0x98>
		cfs->fs_type = 0;				/* Clear old fs object */
 801a0dc:	2100      	movs	r1, #0
 801a0de:	7019      	strb	r1, [r3, #0]
	if (fs) {
 801a0e0:	9b01      	ldr	r3, [sp, #4]
 801a0e2:	b163      	cbz	r3, 801a0fe <f_mount+0x8e>
		fs->fs_type = 0;				/* Clear new fs object */
 801a0e4:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801a0e6:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 801a0e8:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 801a0ec:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801a0ee:	d1dc      	bne.n	801a0aa <f_mount+0x3a>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801a0f0:	4602      	mov	r2, r0
 801a0f2:	a901      	add	r1, sp, #4
 801a0f4:	4668      	mov	r0, sp
 801a0f6:	f7fd ff9f 	bl	8018038 <find_volume>
}
 801a0fa:	b002      	add	sp, #8
 801a0fc:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801a0fe:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 801a100:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
}
 801a104:	b002      	add	sp, #8
 801a106:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 801a108:	2000      	movs	r0, #0
 801a10a:	6308      	str	r0, [r1, #48]	; 0x30
 801a10c:	e7e6      	b.n	801a0dc <f_mount+0x6c>
 801a10e:	2000      	movs	r0, #0
 801a110:	6008      	str	r0, [r1, #0]
 801a112:	6908      	ldr	r0, [r1, #16]
 801a114:	4298      	cmp	r0, r3
 801a116:	d1db      	bne.n	801a0d0 <f_mount+0x60>
 801a118:	2000      	movs	r0, #0
 801a11a:	6108      	str	r0, [r1, #16]
 801a11c:	6a08      	ldr	r0, [r1, #32]
 801a11e:	4283      	cmp	r3, r0
 801a120:	d1d9      	bne.n	801a0d6 <f_mount+0x66>
 801a122:	2000      	movs	r0, #0
 801a124:	6208      	str	r0, [r1, #32]
 801a126:	6b08      	ldr	r0, [r1, #48]	; 0x30
 801a128:	4298      	cmp	r0, r3
 801a12a:	d1d7      	bne.n	801a0dc <f_mount+0x6c>
 801a12c:	e7ec      	b.n	801a108 <f_mount+0x98>
 801a12e:	bf00      	nop
 801a130:	2400a118 	.word	0x2400a118
 801a134:	2400a120 	.word	0x2400a120

0801a138 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a13c:	b091      	sub	sp, #68	; 0x44
 801a13e:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801a140:	2800      	cmp	r0, #0
 801a142:	f000 80c8 	beq.w	801a2d6 <f_open+0x19e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801a146:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 801a14a:	4616      	mov	r6, r2
 801a14c:	4604      	mov	r4, r0
 801a14e:	a902      	add	r1, sp, #8
 801a150:	a801      	add	r0, sp, #4
 801a152:	463a      	mov	r2, r7
 801a154:	f7fd ff70 	bl	8018038 <find_volume>
	if (res == FR_OK) {
 801a158:	4605      	mov	r5, r0
 801a15a:	b128      	cbz	r0, 801a168 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a15c:	2300      	movs	r3, #0
 801a15e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 801a160:	4628      	mov	r0, r5
 801a162:	b011      	add	sp, #68	; 0x44
 801a164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 801a168:	9b02      	ldr	r3, [sp, #8]
		INIT_NAMBUF(fs);
 801a16a:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
 801a16e:	9303      	str	r3, [sp, #12]
		INIT_NAMBUF(fs);
 801a170:	f001 f9c6 	bl	801b500 <ff_memalloc>
 801a174:	4680      	mov	r8, r0
 801a176:	2800      	cmp	r0, #0
 801a178:	f000 80b2 	beq.w	801a2e0 <f_open+0x1a8>
 801a17c:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 801a17e:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 801a180:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801a182:	a803      	add	r0, sp, #12
 801a184:	f7fe ffcc 	bl	8019120 <follow_path>
		if (res == FR_OK) {
 801a188:	bba0      	cbnz	r0, 801a1f4 <f_open+0xbc>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801a18a:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 801a18e:	2b00      	cmp	r3, #0
 801a190:	f2c0 8125 	blt.w	801a3de <f_open+0x2a6>
		if (Files[i].fs) {	/* Existing entry */
 801a194:	4bac      	ldr	r3, [pc, #688]	; (801a448 <f_open+0x310>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a196:	f027 0c01 	bic.w	ip, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a19a:	9a03      	ldr	r2, [sp, #12]
		if (Files[i].fs) {	/* Existing entry */
 801a19c:	6818      	ldr	r0, [r3, #0]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a19e:	4661      	mov	r1, ip
				Files[i].clu == dp->obj.sclust &&
 801a1a0:	f8dd e014 	ldr.w	lr, [sp, #20]
				Files[i].ofs == dp->dptr) break;
 801a1a4:	f8dd a020 	ldr.w	sl, [sp, #32]
		if (Files[i].fs) {	/* Existing entry */
 801a1a8:	2800      	cmp	r0, #0
 801a1aa:	f000 809b 	beq.w	801a2e4 <f_open+0x1ac>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a1ae:	4290      	cmp	r0, r2
 801a1b0:	f000 809b 	beq.w	801a2ea <f_open+0x1b2>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a1b4:	46a9      	mov	r9, r5
		if (Files[i].fs) {	/* Existing entry */
 801a1b6:	6918      	ldr	r0, [r3, #16]
 801a1b8:	2800      	cmp	r0, #0
 801a1ba:	f000 812a 	beq.w	801a412 <f_open+0x2da>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a1be:	4290      	cmp	r0, r2
 801a1c0:	f000 814e 	beq.w	801a460 <f_open+0x328>
		if (Files[i].fs) {	/* Existing entry */
 801a1c4:	6a18      	ldr	r0, [r3, #32]
 801a1c6:	2800      	cmp	r0, #0
 801a1c8:	f000 8126 	beq.w	801a418 <f_open+0x2e0>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a1cc:	4290      	cmp	r0, r2
 801a1ce:	f000 813d 	beq.w	801a44c <f_open+0x314>
		if (Files[i].fs) {	/* Existing entry */
 801a1d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801a1d4:	2800      	cmp	r0, #0
 801a1d6:	f000 809a 	beq.w	801a30e <f_open+0x1d6>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a1da:	4290      	cmp	r0, r2
 801a1dc:	f000 80a4 	beq.w	801a328 <f_open+0x1f0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801a1e0:	f1b9 0f00 	cmp.w	r9, #0
 801a1e4:	f040 8093 	bne.w	801a30e <f_open+0x1d6>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801a1e8:	2012      	movs	r0, #18
		FREE_NAMBUF();
 801a1ea:	4605      	mov	r5, r0
 801a1ec:	4640      	mov	r0, r8
 801a1ee:	f001 f989 	bl	801b504 <ff_memfree>
 801a1f2:	e7b3      	b.n	801a15c <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801a1f4:	f016 0f1c 	tst.w	r6, #28
 801a1f8:	d0f7      	beq.n	801a1ea <f_open+0xb2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801a1fa:	2804      	cmp	r0, #4
 801a1fc:	d1f5      	bne.n	801a1ea <f_open+0xb2>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801a1fe:	4b92      	ldr	r3, [pc, #584]	; (801a448 <f_open+0x310>)
 801a200:	681a      	ldr	r2, [r3, #0]
 801a202:	b132      	cbz	r2, 801a212 <f_open+0xda>
 801a204:	691a      	ldr	r2, [r3, #16]
 801a206:	b122      	cbz	r2, 801a212 <f_open+0xda>
 801a208:	6a1a      	ldr	r2, [r3, #32]
 801a20a:	b112      	cbz	r2, 801a212 <f_open+0xda>
 801a20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d1ea      	bne.n	801a1e8 <f_open+0xb0>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801a212:	a803      	add	r0, sp, #12
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801a214:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801a218:	f7ff f9ac 	bl	8019574 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801a21c:	2800      	cmp	r0, #0
 801a21e:	d1e4      	bne.n	801a1ea <f_open+0xb2>
				dw = GET_FATTIME();
 801a220:	f7fd fd9c 	bl	8017d5c <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801a224:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 801a226:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801a22a:	f3c0 4107 	ubfx	r1, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801a22e:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801a232:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
 801a236:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 801a238:	73d6      	strb	r6, [r2, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 801a23a:	f882 c00e 	strb.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 801a23e:	7411      	strb	r1, [r2, #16]
	*ptr++ = (BYTE)val;
 801a240:	7450      	strb	r0, [r2, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801a242:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801a244:	9b02      	ldr	r3, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 801a246:	75d6      	strb	r6, [r2, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 801a248:	f882 c016 	strb.w	ip, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 801a24c:	7611      	strb	r1, [r2, #24]
	*ptr++ = (BYTE)val;
 801a24e:	7650      	strb	r0, [r2, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801a250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a252:	f882 e00b 	strb.w	lr, [r2, #11]
	if (fs->fs_type == FS_FAT32) {
 801a256:	7819      	ldrb	r1, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801a258:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 801a25a:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 801a25c:	8b56      	ldrh	r6, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 801a25e:	d102      	bne.n	801a266 <f_open+0x12e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801a260:	8a91      	ldrh	r1, [r2, #20]
 801a262:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 801a266:	2100      	movs	r1, #0
 801a268:	8351      	strh	r1, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 801a26a:	7818      	ldrb	r0, [r3, #0]
 801a26c:	2803      	cmp	r0, #3
 801a26e:	d100      	bne.n	801a272 <f_open+0x13a>
	*ptr++ = (BYTE)val; val >>= 8;
 801a270:	8291      	strh	r1, [r2, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 801a272:	990b      	ldr	r1, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 801a274:	2200      	movs	r2, #0
 801a276:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 801a278:	2101      	movs	r1, #1
 801a27a:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 801a27c:	b1ae      	cbz	r6, 801a2aa <f_open+0x172>
						res = remove_chain(&dj.obj, cl, 0);
 801a27e:	4631      	mov	r1, r6
 801a280:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 801a282:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 801a286:	f7ff f8d7 	bl	8019438 <remove_chain>
						if (res == FR_OK) {
 801a28a:	2800      	cmp	r0, #0
 801a28c:	d1ad      	bne.n	801a1ea <f_open+0xb2>
							res = move_window(fs, dw);
 801a28e:	9b02      	ldr	r3, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a292:	4591      	cmp	r9, r2
 801a294:	f000 8111 	beq.w	801a4ba <f_open+0x382>
 801a298:	4618      	mov	r0, r3
 801a29a:	4649      	mov	r1, r9
 801a29c:	f7fd fe92 	bl	8017fc4 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801a2a0:	3e01      	subs	r6, #1
 801a2a2:	9b02      	ldr	r3, [sp, #8]
 801a2a4:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 801a2a6:	2800      	cmp	r0, #0
 801a2a8:	d19f      	bne.n	801a1ea <f_open+0xb2>
				mode |= FA_MODIFIED;
 801a2aa:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a2ae:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801a2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a2b4:	3900      	subs	r1, #0
 801a2b6:	a803      	add	r0, sp, #12
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801a2b8:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a2ba:	bf18      	it	ne
 801a2bc:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
 801a2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a2c0:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a2c2:	f7fd fd4d 	bl	8017d60 <inc_lock>
 801a2c6:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801a2c8:	2800      	cmp	r0, #0
 801a2ca:	d137      	bne.n	801a33c <f_open+0x204>
		FREE_NAMBUF();
 801a2cc:	4640      	mov	r0, r8
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801a2ce:	2502      	movs	r5, #2
		FREE_NAMBUF();
 801a2d0:	f001 f918 	bl	801b504 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a2d4:	e742      	b.n	801a15c <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 801a2d6:	2509      	movs	r5, #9
}
 801a2d8:	4628      	mov	r0, r5
 801a2da:	b011      	add	sp, #68	; 0x44
 801a2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 801a2e0:	2511      	movs	r5, #17
 801a2e2:	e73d      	b.n	801a160 <f_open+0x28>
			be = 1;
 801a2e4:	f04f 0901 	mov.w	r9, #1
 801a2e8:	e765      	b.n	801a1b6 <f_open+0x7e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a2ea:	6858      	ldr	r0, [r3, #4]
 801a2ec:	4570      	cmp	r0, lr
 801a2ee:	f47f af61 	bne.w	801a1b4 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 801a2f2:	6898      	ldr	r0, [r3, #8]
 801a2f4:	4550      	cmp	r0, sl
 801a2f6:	f47f af5d 	bne.w	801a1b4 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a2fa:	462a      	mov	r2, r5
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801a2fc:	f1bc 0f00 	cmp.w	ip, #0
 801a300:	d178      	bne.n	801a3f4 <f_open+0x2bc>
 801a302:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801a306:	899b      	ldrh	r3, [r3, #12]
 801a308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a30c:	d072      	beq.n	801a3f4 <f_open+0x2bc>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801a30e:	f016 0f1c 	tst.w	r6, #28
 801a312:	d057      	beq.n	801a3c4 <f_open+0x28c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801a314:	f89d 3012 	ldrb.w	r3, [sp, #18]
 801a318:	f013 0f11 	tst.w	r3, #17
 801a31c:	f040 8091 	bne.w	801a442 <f_open+0x30a>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801a320:	0773      	lsls	r3, r6, #29
 801a322:	d569      	bpl.n	801a3f8 <f_open+0x2c0>
 801a324:	2008      	movs	r0, #8
 801a326:	e760      	b.n	801a1ea <f_open+0xb2>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a32a:	4572      	cmp	r2, lr
 801a32c:	f47f af58 	bne.w	801a1e0 <f_open+0xa8>
				Files[i].clu == dp->obj.sclust &&
 801a330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a332:	4552      	cmp	r2, sl
 801a334:	f47f af54 	bne.w	801a1e0 <f_open+0xa8>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a338:	2203      	movs	r2, #3
 801a33a:	e7df      	b.n	801a2fc <f_open+0x1c4>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801a33c:	f8dd b008 	ldr.w	fp, [sp, #8]
 801a340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (fs->fs_type == FS_FAT32) {
 801a342:	f89b 2000 	ldrb.w	r2, [fp]
	cl = ld_word(dir + DIR_FstClusLO);
 801a346:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 801a348:	2a03      	cmp	r2, #3
 801a34a:	d102      	bne.n	801a352 <f_open+0x21a>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801a34c:	8a9a      	ldrh	r2, [r3, #20]
 801a34e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 801a352:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801a354:	60a6      	str	r6, [r4, #8]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801a356:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	rv = rv << 8 | ptr[0];
 801a35a:	f8d3 901c 	ldr.w	r9, [r3, #28]
			fp->obj.id = fs->id;
 801a35e:	f8bb 3006 	ldrh.w	r3, [fp, #6]
		*d++ = (BYTE)val;
 801a362:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->flag = mode;		/* Set file access mode */
 801a366:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 801a368:	4650      	mov	r0, sl
			fp->obj.fs = fs;	 	/* Validate the file object */
 801a36a:	f8c4 b000 	str.w	fp, [r4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801a36e:	f8c4 900c 	str.w	r9, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 801a372:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.id = fs->id;
 801a374:	80a3      	strh	r3, [r4, #4]
			fp->err = 0;			/* Clear error flag */
 801a376:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801a378:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801a37a:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 801a37c:	f00b f9f8 	bl	8025770 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801a380:	f017 0720 	ands.w	r7, r7, #32
 801a384:	d02d      	beq.n	801a3e2 <f_open+0x2aa>
 801a386:	f1b9 0f00 	cmp.w	r9, #0
 801a38a:	d02f      	beq.n	801a3ec <f_open+0x2b4>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801a38c:	f8bb 300a 	ldrh.w	r3, [fp, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801a390:	f8c4 9018 	str.w	r9, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801a394:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801a398:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801a39c:	d806      	bhi.n	801a3ac <f_open+0x274>
 801a39e:	e069      	b.n	801a474 <f_open+0x33c>
 801a3a0:	1c43      	adds	r3, r0, #1
 801a3a2:	f000 808d 	beq.w	801a4c0 <f_open+0x388>
 801a3a6:	454f      	cmp	r7, r9
 801a3a8:	f080 808a 	bcs.w	801a4c0 <f_open+0x388>
					clst = get_fat(&fp->obj, clst);
 801a3ac:	4631      	mov	r1, r6
 801a3ae:	6820      	ldr	r0, [r4, #0]
 801a3b0:	f7fe f85a 	bl	8018468 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 801a3b4:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801a3b6:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
 801a3ba:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 801a3bc:	d8f0      	bhi.n	801a3a0 <f_open+0x268>
 801a3be:	2002      	movs	r0, #2
				fp->clust = clst;
 801a3c0:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801a3c2:	e712      	b.n	801a1ea <f_open+0xb2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801a3c4:	f89d 3012 	ldrb.w	r3, [sp, #18]
 801a3c8:	06da      	lsls	r2, r3, #27
 801a3ca:	d435      	bmi.n	801a438 <f_open+0x300>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801a3cc:	07b1      	lsls	r1, r6, #30
 801a3ce:	d518      	bpl.n	801a402 <f_open+0x2ca>
 801a3d0:	07da      	lsls	r2, r3, #31
 801a3d2:	d516      	bpl.n	801a402 <f_open+0x2ca>
		FREE_NAMBUF();
 801a3d4:	4640      	mov	r0, r8
						res = FR_DENIED;
 801a3d6:	2507      	movs	r5, #7
		FREE_NAMBUF();
 801a3d8:	f001 f894 	bl	801b504 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a3dc:	e6be      	b.n	801a15c <f_open+0x24>
				res = FR_INVALID_NAME;
 801a3de:	2006      	movs	r0, #6
 801a3e0:	e703      	b.n	801a1ea <f_open+0xb2>
		FREE_NAMBUF();
 801a3e2:	4640      	mov	r0, r8
 801a3e4:	463d      	mov	r5, r7
 801a3e6:	f001 f88d 	bl	801b504 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a3ea:	e6b9      	b.n	801a160 <f_open+0x28>
		FREE_NAMBUF();
 801a3ec:	4640      	mov	r0, r8
 801a3ee:	f001 f889 	bl	801b504 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a3f2:	e6b5      	b.n	801a160 <f_open+0x28>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801a3f4:	2010      	movs	r0, #16
 801a3f6:	e6f8      	b.n	801a1ea <f_open+0xb2>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801a3f8:	0730      	lsls	r0, r6, #28
 801a3fa:	f53f af11 	bmi.w	801a220 <f_open+0xe8>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801a3fe:	9b02      	ldr	r3, [sp, #8]
 801a400:	e757      	b.n	801a2b2 <f_open+0x17a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801a402:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801a406:	9b02      	ldr	r3, [sp, #8]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801a408:	2e00      	cmp	r6, #0
 801a40a:	f47f af4e 	bne.w	801a2aa <f_open+0x172>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a40e:	4661      	mov	r1, ip
 801a410:	e74f      	b.n	801a2b2 <f_open+0x17a>
			be = 1;
 801a412:	f04f 0901 	mov.w	r9, #1
 801a416:	e6d5      	b.n	801a1c4 <f_open+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 801a418:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801a41a:	2800      	cmp	r0, #0
 801a41c:	f43f af77 	beq.w	801a30e <f_open+0x1d6>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a420:	4290      	cmp	r0, r2
 801a422:	f47f af74 	bne.w	801a30e <f_open+0x1d6>
 801a426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a428:	4596      	cmp	lr, r2
 801a42a:	f47f af70 	bne.w	801a30e <f_open+0x1d6>
				Files[i].clu == dp->obj.sclust &&
 801a42e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a430:	4552      	cmp	r2, sl
 801a432:	f47f af6c 	bne.w	801a30e <f_open+0x1d6>
 801a436:	e77f      	b.n	801a338 <f_open+0x200>
		FREE_NAMBUF();
 801a438:	4640      	mov	r0, r8
					res = FR_NO_FILE;
 801a43a:	2504      	movs	r5, #4
		FREE_NAMBUF();
 801a43c:	f001 f862 	bl	801b504 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a440:	e68c      	b.n	801a15c <f_open+0x24>
					res = FR_DENIED;
 801a442:	2007      	movs	r0, #7
 801a444:	e6d1      	b.n	801a1ea <f_open+0xb2>
 801a446:	bf00      	nop
 801a448:	2400a120 	.word	0x2400a120
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a44c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801a44e:	4570      	cmp	r0, lr
 801a450:	f47f aebf 	bne.w	801a1d2 <f_open+0x9a>
				Files[i].clu == dp->obj.sclust &&
 801a454:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801a456:	4550      	cmp	r0, sl
 801a458:	f47f aebb 	bne.w	801a1d2 <f_open+0x9a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a45c:	2202      	movs	r2, #2
 801a45e:	e74d      	b.n	801a2fc <f_open+0x1c4>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a460:	6958      	ldr	r0, [r3, #20]
 801a462:	4570      	cmp	r0, lr
 801a464:	f47f aeae 	bne.w	801a1c4 <f_open+0x8c>
				Files[i].clu == dp->obj.sclust &&
 801a468:	6998      	ldr	r0, [r3, #24]
 801a46a:	4582      	cmp	sl, r0
 801a46c:	f47f aeaa 	bne.w	801a1c4 <f_open+0x8c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a470:	2201      	movs	r2, #1
 801a472:	e743      	b.n	801a2fc <f_open+0x1c4>
				fp->clust = clst;
 801a474:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801a476:	f3c9 0308 	ubfx	r3, r9, #0, #9
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d0b6      	beq.n	801a3ec <f_open+0x2b4>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801a47e:	9802      	ldr	r0, [sp, #8]
	clst -= 2;
 801a480:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a482:	6983      	ldr	r3, [r0, #24]
 801a484:	3b02      	subs	r3, #2
 801a486:	429e      	cmp	r6, r3
 801a488:	f4bf af20 	bcs.w	801a2cc <f_open+0x194>
	return clst * fs->csize + fs->database;
 801a48c:	8942      	ldrh	r2, [r0, #10]
 801a48e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801a490:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 801a494:	2a00      	cmp	r2, #0
 801a496:	f43f af19 	beq.w	801a2cc <f_open+0x194>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801a49a:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801a49e:	4651      	mov	r1, sl
 801a4a0:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801a4a2:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801a4a4:	7840      	ldrb	r0, [r0, #1]
 801a4a6:	f7fd fc31 	bl	8017d0c <disk_read>
 801a4aa:	4605      	mov	r5, r0
		FREE_NAMBUF();
 801a4ac:	4640      	mov	r0, r8
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801a4ae:	2d00      	cmp	r5, #0
 801a4b0:	d09d      	beq.n	801a3ee <f_open+0x2b6>
 801a4b2:	2501      	movs	r5, #1
		FREE_NAMBUF();
 801a4b4:	f001 f826 	bl	801b504 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a4b8:	e650      	b.n	801a15c <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801a4ba:	3e01      	subs	r6, #1
 801a4bc:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 801a4be:	e6f4      	b.n	801a2aa <f_open+0x172>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801a4c0:	1c71      	adds	r1, r6, #1
				fp->clust = clst;
 801a4c2:	61e6      	str	r6, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801a4c4:	bf0c      	ite	eq
 801a4c6:	2001      	moveq	r0, #1
 801a4c8:	2000      	movne	r0, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801a4ca:	f43f ae8e 	beq.w	801a1ea <f_open+0xb2>
 801a4ce:	e7d2      	b.n	801a476 <f_open+0x33e>

0801a4d0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4d4:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 801a4d6:	2300      	movs	r3, #0
{
 801a4d8:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 801a4da:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801a4dc:	b150      	cbz	r0, 801a4f4 <f_read+0x24>
 801a4de:	6803      	ldr	r3, [r0, #0]
 801a4e0:	4604      	mov	r4, r0
 801a4e2:	b13b      	cbz	r3, 801a4f4 <f_read+0x24>
 801a4e4:	4617      	mov	r7, r2
 801a4e6:	781a      	ldrb	r2, [r3, #0]
 801a4e8:	b122      	cbz	r2, 801a4f4 <f_read+0x24>
 801a4ea:	460d      	mov	r5, r1
 801a4ec:	88da      	ldrh	r2, [r3, #6]
 801a4ee:	8881      	ldrh	r1, [r0, #4]
 801a4f0:	4291      	cmp	r1, r2
 801a4f2:	d005      	beq.n	801a500 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 801a4f4:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 801a4f8:	4640      	mov	r0, r8
 801a4fa:	b005      	add	sp, #20
 801a4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801a500:	7858      	ldrb	r0, [r3, #1]
 801a502:	f7fd fbe7 	bl	8017cd4 <disk_status>
 801a506:	07c2      	lsls	r2, r0, #31
 801a508:	d4f4      	bmi.n	801a4f4 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801a50a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801a50e:	f1b8 0f00 	cmp.w	r8, #0
 801a512:	d1f1      	bne.n	801a4f8 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801a514:	7d23      	ldrb	r3, [r4, #20]
 801a516:	f013 0301 	ands.w	r3, r3, #1
 801a51a:	9300      	str	r3, [sp, #0]
 801a51c:	f000 80d8 	beq.w	801a6d0 <f_read+0x200>
	remain = fp->obj.objsize - fp->fptr;
 801a520:	69a0      	ldr	r0, [r4, #24]
 801a522:	68e3      	ldr	r3, [r4, #12]
 801a524:	1a1b      	subs	r3, r3, r0
 801a526:	429f      	cmp	r7, r3
 801a528:	bf28      	it	cs
 801a52a:	461f      	movcs	r7, r3
	for ( ;  btr;								/* Repeat until all data read */
 801a52c:	2f00      	cmp	r7, #0
 801a52e:	d0e3      	beq.n	801a4f8 <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801a530:	46a2      	mov	sl, r4
 801a532:	f104 0331 	add.w	r3, r4, #49	; 0x31
 801a536:	f8cd 8008 	str.w	r8, [sp, #8]
 801a53a:	f85a 9b30 	ldr.w	r9, [sl], #48
 801a53e:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801a540:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801a544:	2b00      	cmp	r3, #0
 801a546:	d158      	bne.n	801a5fa <f_read+0x12a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801a548:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 801a54c:	0a43      	lsrs	r3, r0, #9
 801a54e:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 801a550:	ea12 2250 	ands.w	r2, r2, r0, lsr #9
 801a554:	f000 8081 	beq.w	801a65a <f_read+0x18a>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801a558:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a55a:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 801a55e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a560:	3b02      	subs	r3, #2
 801a562:	4298      	cmp	r0, r3
 801a564:	f080 8087 	bcs.w	801a676 <f_read+0x1a6>
	return clst * fs->csize + fs->database;
 801a568:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 801a56c:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 801a570:	fb01 3000 	mla	r0, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 801a574:	2800      	cmp	r0, #0
 801a576:	d07e      	beq.n	801a676 <f_read+0x1a6>
			if (cc) {							/* Read maximum contiguous sectors directly */
 801a578:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 801a57c:	eb02 0b00 	add.w	fp, r2, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 801a580:	d325      	bcc.n	801a5ce <f_read+0xfe>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801a582:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801a586:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801a58a:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a58c:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 801a590:	bf88      	it	hi
 801a592:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a596:	465a      	mov	r2, fp
 801a598:	4629      	mov	r1, r5
 801a59a:	4643      	mov	r3, r8
 801a59c:	f7fd fbb6 	bl	8017d0c <disk_read>
 801a5a0:	2800      	cmp	r0, #0
 801a5a2:	f040 8083 	bne.w	801a6ac <f_read+0x1dc>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801a5a6:	f994 2014 	ldrsb.w	r2, [r4, #20]
 801a5aa:	2a00      	cmp	r2, #0
 801a5ac:	f2c0 80a7 	blt.w	801a6fe <f_read+0x22e>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801a5b0:	ea4f 2c48 	mov.w	ip, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801a5b4:	69a0      	ldr	r0, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 801a5b6:	ebb7 070c 	subs.w	r7, r7, ip
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801a5ba:	6833      	ldr	r3, [r6, #0]
 801a5bc:	4465      	add	r5, ip
 801a5be:	4460      	add	r0, ip
 801a5c0:	4463      	add	r3, ip
 801a5c2:	61a0      	str	r0, [r4, #24]
 801a5c4:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 801a5c6:	d1bb      	bne.n	801a540 <f_read+0x70>
 801a5c8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801a5cc:	e794      	b.n	801a4f8 <f_read+0x28>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801a5ce:	6a22      	ldr	r2, [r4, #32]
 801a5d0:	455a      	cmp	r2, fp
 801a5d2:	d00d      	beq.n	801a5f0 <f_read+0x120>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801a5d4:	f994 3014 	ldrsb.w	r3, [r4, #20]
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	f2c0 8083 	blt.w	801a6e4 <f_read+0x214>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801a5de:	2301      	movs	r3, #1
 801a5e0:	465a      	mov	r2, fp
 801a5e2:	4651      	mov	r1, sl
 801a5e4:	f899 0001 	ldrb.w	r0, [r9, #1]
 801a5e8:	f7fd fb90 	bl	8017d0c <disk_read>
 801a5ec:	2800      	cmp	r0, #0
 801a5ee:	d15d      	bne.n	801a6ac <f_read+0x1dc>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801a5f0:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 801a5f2:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801a5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a5fa:	1c59      	adds	r1, r3, #1
 801a5fc:	f5c3 7c00 	rsb	ip, r3, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801a600:	4453      	add	r3, sl
 801a602:	4451      	add	r1, sl
 801a604:	45bc      	cmp	ip, r7
 801a606:	eba5 0101 	sub.w	r1, r5, r1
 801a60a:	bf28      	it	cs
 801a60c:	46bc      	movcs	ip, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801a60e:	2902      	cmp	r1, #2
 801a610:	f10c 3bff 	add.w	fp, ip, #4294967295
 801a614:	d952      	bls.n	801a6bc <f_read+0x1ec>
 801a616:	f1bb 0f07 	cmp.w	fp, #7
 801a61a:	d94f      	bls.n	801a6bc <f_read+0x1ec>
 801a61c:	f02c 0e03 	bic.w	lr, ip, #3
 801a620:	462a      	mov	r2, r5
 801a622:	4619      	mov	r1, r3
 801a624:	44ae      	add	lr, r5
			*d++ = *s++;
 801a626:	f851 0b04 	ldr.w	r0, [r1], #4
 801a62a:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 801a62e:	4596      	cmp	lr, r2
 801a630:	d1f9      	bne.n	801a626 <f_read+0x156>
 801a632:	f02c 0203 	bic.w	r2, ip, #3
 801a636:	4594      	cmp	ip, r2
 801a638:	eb05 0102 	add.w	r1, r5, r2
 801a63c:	eb03 0002 	add.w	r0, r3, r2
 801a640:	d0b8      	beq.n	801a5b4 <f_read+0xe4>
			*d++ = *s++;
 801a642:	5c9b      	ldrb	r3, [r3, r2]
 801a644:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
 801a646:	ebbb 0202 	subs.w	r2, fp, r2
 801a64a:	d0b3      	beq.n	801a5b4 <f_read+0xe4>
			*d++ = *s++;
 801a64c:	7843      	ldrb	r3, [r0, #1]
		} while (--cnt);
 801a64e:	2a01      	cmp	r2, #1
			*d++ = *s++;
 801a650:	704b      	strb	r3, [r1, #1]
		} while (--cnt);
 801a652:	d0af      	beq.n	801a5b4 <f_read+0xe4>
			*d++ = *s++;
 801a654:	7883      	ldrb	r3, [r0, #2]
 801a656:	708b      	strb	r3, [r1, #2]
		} while (--cnt);
 801a658:	e7ac      	b.n	801a5b4 <f_read+0xe4>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801a65a:	b998      	cbnz	r0, 801a684 <f_read+0x1b4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801a65c:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801a65e:	2801      	cmp	r0, #1
 801a660:	d909      	bls.n	801a676 <f_read+0x1a6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a662:	1c43      	adds	r3, r0, #1
 801a664:	d022      	beq.n	801a6ac <f_read+0x1dc>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a666:	f8d9 3018 	ldr.w	r3, [r9, #24]
				fp->clust = clst;				/* Update current cluster */
 801a66a:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 801a66c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a66e:	3b02      	subs	r3, #2
 801a670:	4298      	cmp	r0, r3
 801a672:	f4ff af79 	bcc.w	801a568 <f_read+0x98>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801a676:	2302      	movs	r3, #2
 801a678:	4698      	mov	r8, r3
 801a67a:	7563      	strb	r3, [r4, #21]
}
 801a67c:	4640      	mov	r0, r8
 801a67e:	b005      	add	sp, #20
 801a680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 801a684:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801a686:	b330      	cbz	r0, 801a6d6 <f_read+0x206>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801a688:	6821      	ldr	r1, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801a68a:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801a68c:	8949      	ldrh	r1, [r1, #10]
 801a68e:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801a692:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801a694:	b929      	cbnz	r1, 801a6a2 <f_read+0x1d2>
 801a696:	e7ee      	b.n	801a676 <f_read+0x1a6>
		cl -= ncl; tbl++;		/* Next fragment */
 801a698:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801a69a:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 801a69e:	2900      	cmp	r1, #0
 801a6a0:	d0e9      	beq.n	801a676 <f_read+0x1a6>
		if (cl < ncl) break;	/* In this fragment? */
 801a6a2:	4299      	cmp	r1, r3
 801a6a4:	d9f8      	bls.n	801a698 <f_read+0x1c8>
	return cl + *tbl;	/* Return the cluster number */
 801a6a6:	6840      	ldr	r0, [r0, #4]
 801a6a8:	4418      	add	r0, r3
 801a6aa:	e7d8      	b.n	801a65e <f_read+0x18e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a6ac:	f8dd 8000 	ldr.w	r8, [sp]
 801a6b0:	2301      	movs	r3, #1
}
 801a6b2:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a6b4:	7563      	strb	r3, [r4, #21]
}
 801a6b6:	b005      	add	sp, #20
 801a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6bc:	1e6a      	subs	r2, r5, #1
 801a6be:	eb03 000c 	add.w	r0, r3, ip
			*d++ = *s++;
 801a6c2:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
 801a6c6:	4283      	cmp	r3, r0
			*d++ = *s++;
 801a6c8:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 801a6cc:	d1f9      	bne.n	801a6c2 <f_read+0x1f2>
 801a6ce:	e771      	b.n	801a5b4 <f_read+0xe4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801a6d0:	f04f 0807 	mov.w	r8, #7
 801a6d4:	e710      	b.n	801a4f8 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801a6d6:	69e1      	ldr	r1, [r4, #28]
 801a6d8:	6820      	ldr	r0, [r4, #0]
 801a6da:	9203      	str	r2, [sp, #12]
 801a6dc:	f7fd fec4 	bl	8018468 <get_fat.isra.0>
 801a6e0:	9a03      	ldr	r2, [sp, #12]
 801a6e2:	e7bc      	b.n	801a65e <f_read+0x18e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a6e4:	2301      	movs	r3, #1
 801a6e6:	4651      	mov	r1, sl
 801a6e8:	f899 0001 	ldrb.w	r0, [r9, #1]
 801a6ec:	f7fd fb1c 	bl	8017d28 <disk_write>
 801a6f0:	2800      	cmp	r0, #0
 801a6f2:	d1db      	bne.n	801a6ac <f_read+0x1dc>
					fp->flag &= (BYTE)~FA_DIRTY;
 801a6f4:	7d23      	ldrb	r3, [r4, #20]
 801a6f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a6fa:	7523      	strb	r3, [r4, #20]
 801a6fc:	e76f      	b.n	801a5de <f_read+0x10e>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801a6fe:	6a22      	ldr	r2, [r4, #32]
 801a700:	eba2 0b0b 	sub.w	fp, r2, fp
 801a704:	45c3      	cmp	fp, r8
 801a706:	f4bf af53 	bcs.w	801a5b0 <f_read+0xe0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801a70a:	eb05 224b 	add.w	r2, r5, fp, lsl #9
 801a70e:	9b01      	ldr	r3, [sp, #4]
 801a710:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801a712:	1ad0      	subs	r0, r2, r3
 801a714:	2802      	cmp	r0, #2
 801a716:	d908      	bls.n	801a72a <f_read+0x25a>
 801a718:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 801a71c:	f851 3b04 	ldr.w	r3, [r1], #4
 801a720:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 801a724:	4562      	cmp	r2, ip
 801a726:	d1f9      	bne.n	801a71c <f_read+0x24c>
 801a728:	e742      	b.n	801a5b0 <f_read+0xe0>
 801a72a:	3a01      	subs	r2, #1
 801a72c:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
			*d++ = *s++;
 801a730:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 801a734:	458c      	cmp	ip, r1
			*d++ = *s++;
 801a736:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 801a73a:	d1f9      	bne.n	801a730 <f_read+0x260>
 801a73c:	e738      	b.n	801a5b0 <f_read+0xe0>
 801a73e:	bf00      	nop

0801a740 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a744:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 801a746:	2300      	movs	r3, #0
{
 801a748:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 801a74a:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801a74c:	b150      	cbz	r0, 801a764 <f_write+0x24>
 801a74e:	6803      	ldr	r3, [r0, #0]
 801a750:	4604      	mov	r4, r0
 801a752:	b13b      	cbz	r3, 801a764 <f_write+0x24>
 801a754:	4616      	mov	r6, r2
 801a756:	781a      	ldrb	r2, [r3, #0]
 801a758:	b122      	cbz	r2, 801a764 <f_write+0x24>
 801a75a:	460d      	mov	r5, r1
 801a75c:	88da      	ldrh	r2, [r3, #6]
 801a75e:	8881      	ldrh	r1, [r0, #4]
 801a760:	4291      	cmp	r1, r2
 801a762:	d005      	beq.n	801a770 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 801a764:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 801a768:	4640      	mov	r0, r8
 801a76a:	b005      	add	sp, #20
 801a76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801a770:	7858      	ldrb	r0, [r3, #1]
 801a772:	f7fd faaf 	bl	8017cd4 <disk_status>
 801a776:	07c0      	lsls	r0, r0, #31
 801a778:	d4f4      	bmi.n	801a764 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801a77a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801a77e:	f1b8 0f00 	cmp.w	r8, #0
 801a782:	d1f1      	bne.n	801a768 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801a784:	7d22      	ldrb	r2, [r4, #20]
 801a786:	0791      	lsls	r1, r2, #30
 801a788:	f140 80f0 	bpl.w	801a96c <f_write+0x22c>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801a78c:	69a3      	ldr	r3, [r4, #24]
 801a78e:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801a790:	bf28      	it	cs
 801a792:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
 801a794:	2e00      	cmp	r6, #0
 801a796:	d066      	beq.n	801a866 <f_write+0x126>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801a798:	46a2      	mov	sl, r4
 801a79a:	f504 720c 	add.w	r2, r4, #560	; 0x230
 801a79e:	f85a 9b30 	ldr.w	r9, [sl], #48
 801a7a2:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801a7a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801a7a8:	2a00      	cmp	r2, #0
 801a7aa:	d16b      	bne.n	801a884 <f_write+0x144>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801a7ac:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 801a7b0:	0a5a      	lsrs	r2, r3, #9
 801a7b2:	f10b 3bff 	add.w	fp, fp, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 801a7b6:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
 801a7ba:	d110      	bne.n	801a7de <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	f040 80a0 	bne.w	801a902 <f_write+0x1c2>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801a7c2:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 801a7c4:	2800      	cmp	r0, #0
 801a7c6:	f000 80dc 	beq.w	801a982 <f_write+0x242>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801a7ca:	2801      	cmp	r0, #1
 801a7cc:	f000 8092 	beq.w	801a8f4 <f_write+0x1b4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a7d0:	1c43      	adds	r3, r0, #1
 801a7d2:	f000 80ba 	beq.w	801a94a <f_write+0x20a>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801a7d6:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 801a7d8:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801a7da:	b903      	cbnz	r3, 801a7de <f_write+0x9e>
 801a7dc:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801a7de:	f994 3014 	ldrsb.w	r3, [r4, #20]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	f2c0 80a4 	blt.w	801a930 <f_write+0x1f0>
	clst -= 2;
 801a7e8:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a7ea:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 801a7ee:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801a7f0:	3b02      	subs	r3, #2
 801a7f2:	429a      	cmp	r2, r3
 801a7f4:	d27e      	bcs.n	801a8f4 <f_write+0x1b4>
	return clst * fs->csize + fs->database;
 801a7f6:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 801a7fa:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 801a7fe:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 801a802:	2a00      	cmp	r2, #0
 801a804:	d076      	beq.n	801a8f4 <f_write+0x1b4>
			if (cc) {						/* Write maximum contiguous sectors directly */
 801a806:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 801a80a:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 801a80c:	d32f      	bcc.n	801a86e <f_write+0x12e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801a80e:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801a812:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801a814:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a816:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 801a81a:	bf88      	it	hi
 801a81c:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a820:	4629      	mov	r1, r5
 801a822:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a826:	f7fd fa7f 	bl	8017d28 <disk_write>
 801a82a:	2800      	cmp	r0, #0
 801a82c:	f040 808d 	bne.w	801a94a <f_write+0x20a>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801a830:	6a21      	ldr	r1, [r4, #32]
 801a832:	9a02      	ldr	r2, [sp, #8]
 801a834:	9b03      	ldr	r3, [sp, #12]
 801a836:	1a8a      	subs	r2, r1, r2
 801a838:	429a      	cmp	r2, r3
 801a83a:	f0c0 80b6 	bcc.w	801a9aa <f_write+0x26a>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801a83e:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 801a842:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801a846:	69a3      	ldr	r3, [r4, #24]
 801a848:	4615      	mov	r5, r2
 801a84a:	68e2      	ldr	r2, [r4, #12]
 801a84c:	4463      	add	r3, ip
 801a84e:	429a      	cmp	r2, r3
 801a850:	61a3      	str	r3, [r4, #24]
 801a852:	bf38      	it	cc
 801a854:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 801a856:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801a85a:	60e2      	str	r2, [r4, #12]
 801a85c:	683a      	ldr	r2, [r7, #0]
 801a85e:	4462      	add	r2, ip
 801a860:	603a      	str	r2, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 801a862:	d19f      	bne.n	801a7a4 <f_write+0x64>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801a864:	7d22      	ldrb	r2, [r4, #20]
 801a866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a86a:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 801a86c:	e77c      	b.n	801a768 <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a86e:	6a23      	ldr	r3, [r4, #32]
 801a870:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 801a872:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801a874:	d003      	beq.n	801a87e <f_write+0x13e>
 801a876:	68e1      	ldr	r1, [r4, #12]
 801a878:	428b      	cmp	r3, r1
 801a87a:	f0c0 808a 	bcc.w	801a992 <f_write+0x252>
			fp->sect = sect;
 801a87e:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801a880:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801a884:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801a888:	eb0a 0302 	add.w	r3, sl, r2
 801a88c:	1c6a      	adds	r2, r5, #1
 801a88e:	45b4      	cmp	ip, r6
 801a890:	eba3 0202 	sub.w	r2, r3, r2
 801a894:	bf28      	it	cs
 801a896:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801a898:	2a02      	cmp	r2, #2
 801a89a:	f10c 3bff 	add.w	fp, ip, #4294967295
 801a89e:	d95b      	bls.n	801a958 <f_write+0x218>
 801a8a0:	f1bb 0f07 	cmp.w	fp, #7
 801a8a4:	d958      	bls.n	801a958 <f_write+0x218>
 801a8a6:	f02c 0e03 	bic.w	lr, ip, #3
 801a8aa:	461a      	mov	r2, r3
 801a8ac:	4629      	mov	r1, r5
 801a8ae:	449e      	add	lr, r3
			*d++ = *s++;
 801a8b0:	f851 0b04 	ldr.w	r0, [r1], #4
 801a8b4:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 801a8b8:	4572      	cmp	r2, lr
 801a8ba:	d1f9      	bne.n	801a8b0 <f_write+0x170>
 801a8bc:	f02c 0103 	bic.w	r1, ip, #3
 801a8c0:	458c      	cmp	ip, r1
 801a8c2:	eb03 0001 	add.w	r0, r3, r1
 801a8c6:	eb05 0201 	add.w	r2, r5, r1
 801a8ca:	d00e      	beq.n	801a8ea <f_write+0x1aa>
			*d++ = *s++;
 801a8cc:	f815 e001 	ldrb.w	lr, [r5, r1]
 801a8d0:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 801a8d4:	ebbb 0101 	subs.w	r1, fp, r1
 801a8d8:	d005      	beq.n	801a8e6 <f_write+0x1a6>
			*d++ = *s++;
 801a8da:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
 801a8dc:	2901      	cmp	r1, #1
			*d++ = *s++;
 801a8de:	7043      	strb	r3, [r0, #1]
 801a8e0:	bf1c      	itt	ne
 801a8e2:	7893      	ldrbne	r3, [r2, #2]
 801a8e4:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 801a8e6:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 801a8ea:	7d23      	ldrb	r3, [r4, #20]
 801a8ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a8f0:	7523      	strb	r3, [r4, #20]
 801a8f2:	e7a8      	b.n	801a846 <f_write+0x106>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801a8f4:	2302      	movs	r3, #2
 801a8f6:	4698      	mov	r8, r3
 801a8f8:	7563      	strb	r3, [r4, #21]
}
 801a8fa:	4640      	mov	r0, r8
 801a8fc:	b005      	add	sp, #20
 801a8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 801a902:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801a904:	b3a9      	cbz	r1, 801a972 <f_write+0x232>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801a906:	6823      	ldr	r3, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801a908:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801a90a:	895b      	ldrh	r3, [r3, #10]
 801a90c:	fbb2 f3f3 	udiv	r3, r2, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801a910:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801a912:	b92a      	cbnz	r2, 801a920 <f_write+0x1e0>
 801a914:	e7a6      	b.n	801a864 <f_write+0x124>
		cl -= ncl; tbl++;		/* Next fragment */
 801a916:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801a918:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 801a91c:	2a00      	cmp	r2, #0
 801a91e:	d0a1      	beq.n	801a864 <f_write+0x124>
		if (cl < ncl) break;	/* In this fragment? */
 801a920:	4293      	cmp	r3, r2
 801a922:	d2f8      	bcs.n	801a916 <f_write+0x1d6>
	return cl + *tbl;	/* Return the cluster number */
 801a924:	6848      	ldr	r0, [r1, #4]
 801a926:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a928:	2800      	cmp	r0, #0
 801a92a:	f47f af4e 	bne.w	801a7ca <f_write+0x8a>
 801a92e:	e799      	b.n	801a864 <f_write+0x124>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801a930:	2301      	movs	r3, #1
 801a932:	6a22      	ldr	r2, [r4, #32]
 801a934:	4651      	mov	r1, sl
 801a936:	f899 0001 	ldrb.w	r0, [r9, #1]
 801a93a:	f7fd f9f5 	bl	8017d28 <disk_write>
 801a93e:	b920      	cbnz	r0, 801a94a <f_write+0x20a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801a940:	7d23      	ldrb	r3, [r4, #20]
 801a942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a946:	7523      	strb	r3, [r4, #20]
 801a948:	e74e      	b.n	801a7e8 <f_write+0xa8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801a94a:	2301      	movs	r3, #1
 801a94c:	4698      	mov	r8, r3
 801a94e:	7563      	strb	r3, [r4, #21]
}
 801a950:	4640      	mov	r0, r8
 801a952:	b005      	add	sp, #20
 801a954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a958:	3b01      	subs	r3, #1
 801a95a:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 801a95e:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
 801a962:	4295      	cmp	r5, r2
			*d++ = *s++;
 801a964:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 801a968:	d1f9      	bne.n	801a95e <f_write+0x21e>
 801a96a:	e7be      	b.n	801a8ea <f_write+0x1aa>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801a96c:	f04f 0807 	mov.w	r8, #7
 801a970:	e6fa      	b.n	801a768 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801a972:	69e1      	ldr	r1, [r4, #28]
 801a974:	4620      	mov	r0, r4
 801a976:	f7fe f8a3 	bl	8018ac0 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a97a:	2800      	cmp	r0, #0
 801a97c:	f47f af25 	bne.w	801a7ca <f_write+0x8a>
 801a980:	e770      	b.n	801a864 <f_write+0x124>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801a982:	4659      	mov	r1, fp
 801a984:	4620      	mov	r0, r4
 801a986:	f7fe f89b 	bl	8018ac0 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801a98a:	2800      	cmp	r0, #0
 801a98c:	f47f af1d 	bne.w	801a7ca <f_write+0x8a>
 801a990:	e768      	b.n	801a864 <f_write+0x124>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801a992:	2301      	movs	r3, #1
 801a994:	4651      	mov	r1, sl
 801a996:	f899 0001 	ldrb.w	r0, [r9, #1]
 801a99a:	9202      	str	r2, [sp, #8]
 801a99c:	f7fd f9b6 	bl	8017d0c <disk_read>
				fp->fptr < fp->obj.objsize &&
 801a9a0:	2800      	cmp	r0, #0
 801a9a2:	d1d2      	bne.n	801a94a <f_write+0x20a>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801a9a4:	69a3      	ldr	r3, [r4, #24]
 801a9a6:	9a02      	ldr	r2, [sp, #8]
 801a9a8:	e769      	b.n	801a87e <f_write+0x13e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801a9aa:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 801a9ae:	1c42      	adds	r2, r0, #1
 801a9b0:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801a9b2:	ebaa 0202 	sub.w	r2, sl, r2
 801a9b6:	2a02      	cmp	r2, #2
 801a9b8:	d90d      	bls.n	801a9d6 <f_write+0x296>
 801a9ba:	4652      	mov	r2, sl
 801a9bc:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 801a9c0:	f851 0b04 	ldr.w	r0, [r1], #4
 801a9c4:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 801a9c8:	4562      	cmp	r2, ip
 801a9ca:	d1f9      	bne.n	801a9c0 <f_write+0x280>
					fp->flag &= (BYTE)~FA_DIRTY;
 801a9cc:	7d22      	ldrb	r2, [r4, #20]
 801a9ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801a9d2:	7522      	strb	r2, [r4, #20]
 801a9d4:	e733      	b.n	801a83e <f_write+0xfe>
 801a9d6:	f104 022f 	add.w	r2, r4, #47	; 0x2f
 801a9da:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
 801a9de:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 801a9e2:	458c      	cmp	ip, r1
			*d++ = *s++;
 801a9e4:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 801a9e8:	d1f9      	bne.n	801a9de <f_write+0x29e>
 801a9ea:	e7ef      	b.n	801a9cc <f_write+0x28c>

0801a9ec <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801a9ec:	b158      	cbz	r0, 801aa06 <f_close+0x1a>
 801a9ee:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801a9f0:	b570      	push	{r4, r5, r6, lr}
 801a9f2:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801a9f4:	b12b      	cbz	r3, 801aa02 <f_close+0x16>
 801a9f6:	781a      	ldrb	r2, [r3, #0]
 801a9f8:	b11a      	cbz	r2, 801aa02 <f_close+0x16>
 801a9fa:	8881      	ldrh	r1, [r0, #4]
 801a9fc:	88da      	ldrh	r2, [r3, #6]
 801a9fe:	4291      	cmp	r1, r2
 801aa00:	d003      	beq.n	801aa0a <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 801aa02:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 801aa04:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 801aa06:	2009      	movs	r0, #9
}
 801aa08:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801aa0a:	7858      	ldrb	r0, [r3, #1]
 801aa0c:	f7fd f962 	bl	8017cd4 <disk_status>
 801aa10:	07c1      	lsls	r1, r0, #31
 801aa12:	d4f6      	bmi.n	801aa02 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801aa14:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801aa16:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801aa18:	065a      	lsls	r2, r3, #25
 801aa1a:	d53c      	bpl.n	801aa96 <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801aa1c:	061b      	lsls	r3, r3, #24
 801aa1e:	d45d      	bmi.n	801aadc <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
 801aa20:	f7fd f99c 	bl	8017d5c <get_fattime>
				res = move_window(fs, fp->dir_sect);
 801aa24:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801aa26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
 801aa28:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801aa2a:	4299      	cmp	r1, r3
 801aa2c:	d004      	beq.n	801aa38 <f_close+0x4c>
 801aa2e:	4628      	mov	r0, r5
 801aa30:	f7fd fac8 	bl	8017fc4 <move_window.part.0>
				if (res == FR_OK) {
 801aa34:	2800      	cmp	r0, #0
 801aa36:	d1e5      	bne.n	801aa04 <f_close+0x18>
					dir = fp->dir_ptr;
 801aa38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801aa3a:	7ad3      	ldrb	r3, [r2, #11]
 801aa3c:	f043 0320 	orr.w	r3, r3, #32
 801aa40:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801aa42:	68a3      	ldr	r3, [r4, #8]
 801aa44:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801aa46:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801aa4a:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
 801aa4c:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 801aa4e:	7809      	ldrb	r1, [r1, #0]
 801aa50:	2903      	cmp	r1, #3
 801aa52:	d103      	bne.n	801aa5c <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801aa54:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801aa56:	7513      	strb	r3, [r2, #20]
 801aa58:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 801aa5a:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801aa5c:	68e3      	ldr	r3, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
 801aa5e:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 801aa60:	7596      	strb	r6, [r2, #22]
 801aa62:	0a19      	lsrs	r1, r3, #8
 801aa64:	7713      	strb	r3, [r2, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 801aa66:	7751      	strb	r1, [r2, #29]
 801aa68:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801aa6a:	0e1b      	lsrs	r3, r3, #24
 801aa6c:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
 801aa6e:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 801aa70:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801aa72:	75d3      	strb	r3, [r2, #23]
 801aa74:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801aa76:	0e36      	lsrs	r6, r6, #24
 801aa78:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 801aa7a:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 801aa7c:	7656      	strb	r6, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 801aa7e:	8253      	strh	r3, [r2, #18]
					fs->wflag = 1;
 801aa80:	2301      	movs	r3, #1
 801aa82:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801aa84:	f7fd ffac 	bl	80189e0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 801aa88:	7d23      	ldrb	r3, [r4, #20]
 801aa8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801aa8e:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 801aa90:	2800      	cmp	r0, #0
 801aa92:	d1b7      	bne.n	801aa04 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801aa94:	6825      	ldr	r5, [r4, #0]
 801aa96:	2d00      	cmp	r5, #0
 801aa98:	d0b3      	beq.n	801aa02 <f_close+0x16>
 801aa9a:	782b      	ldrb	r3, [r5, #0]
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d0b0      	beq.n	801aa02 <f_close+0x16>
 801aaa0:	88a2      	ldrh	r2, [r4, #4]
 801aaa2:	88eb      	ldrh	r3, [r5, #6]
 801aaa4:	429a      	cmp	r2, r3
 801aaa6:	d1ac      	bne.n	801aa02 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801aaa8:	7868      	ldrb	r0, [r5, #1]
 801aaaa:	f7fd f913 	bl	8017cd4 <disk_status>
 801aaae:	f010 0001 	ands.w	r0, r0, #1
 801aab2:	d1a6      	bne.n	801aa02 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801aab4:	6923      	ldr	r3, [r4, #16]
 801aab6:	3b01      	subs	r3, #1
 801aab8:	2b03      	cmp	r3, #3
 801aaba:	d820      	bhi.n	801aafe <f_close+0x112>
		n = Files[i].ctr;
 801aabc:	4912      	ldr	r1, [pc, #72]	; (801ab08 <f_close+0x11c>)
 801aabe:	011d      	lsls	r5, r3, #4
 801aac0:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 801aac4:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801aac6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801aaca:	d014      	beq.n	801aaf6 <f_close+0x10a>
		if (n > 0) n--;				/* Decrement read mode open count */
 801aacc:	b1a2      	cbz	r2, 801aaf8 <f_close+0x10c>
 801aace:	3a01      	subs	r2, #1
 801aad0:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 801aad2:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801aad4:	b182      	cbz	r2, 801aaf8 <f_close+0x10c>
				fp->obj.fs = 0;			/* Invalidate file object */
 801aad6:	2300      	movs	r3, #0
 801aad8:	6023      	str	r3, [r4, #0]
}
 801aada:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801aadc:	2301      	movs	r3, #1
 801aade:	6a22      	ldr	r2, [r4, #32]
 801aae0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801aae4:	7868      	ldrb	r0, [r5, #1]
 801aae6:	f7fd f91f 	bl	8017d28 <disk_write>
 801aaea:	b950      	cbnz	r0, 801ab02 <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
 801aaec:	7d23      	ldrb	r3, [r4, #20]
 801aaee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801aaf2:	7523      	strb	r3, [r4, #20]
 801aaf4:	e794      	b.n	801aa20 <f_close+0x34>
		Files[i].ctr = n;
 801aaf6:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801aaf8:	2300      	movs	r3, #0
 801aafa:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 801aafc:	e7eb      	b.n	801aad6 <f_close+0xea>
		res = FR_INT_ERR;			/* Invalid index nunber */
 801aafe:	2002      	movs	r0, #2
}
 801ab00:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801ab02:	2001      	movs	r0, #1
}
 801ab04:	bd70      	pop	{r4, r5, r6, pc}
 801ab06:	bf00      	nop
 801ab08:	2400a120 	.word	0x2400a120

0801ab0c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801ab0c:	b570      	push	{r4, r5, r6, lr}
 801ab0e:	b084      	sub	sp, #16
 801ab10:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801ab12:	2800      	cmp	r0, #0
 801ab14:	d044      	beq.n	801aba0 <f_opendir+0x94>

	/* Get logical drive */
	obj = &dp->obj;
 801ab16:	4605      	mov	r5, r0
	res = find_volume(&path, &fs, 0);
 801ab18:	2200      	movs	r2, #0
 801ab1a:	a903      	add	r1, sp, #12
 801ab1c:	a801      	add	r0, sp, #4
 801ab1e:	f7fd fa8b 	bl	8018038 <find_volume>
	if (res == FR_OK) {
 801ab22:	4604      	mov	r4, r0
 801ab24:	b120      	cbz	r0, 801ab30 <f_opendir+0x24>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801ab26:	2300      	movs	r3, #0
 801ab28:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 801ab2a:	4620      	mov	r0, r4
 801ab2c:	b004      	add	sp, #16
 801ab2e:	bd70      	pop	{r4, r5, r6, pc}
		obj->fs = fs;
 801ab30:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 801ab32:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
 801ab36:	602b      	str	r3, [r5, #0]
		INIT_NAMBUF(fs);
 801ab38:	f000 fce2 	bl	801b500 <ff_memalloc>
 801ab3c:	4606      	mov	r6, r0
 801ab3e:	2800      	cmp	r0, #0
 801ab40:	d032      	beq.n	801aba8 <f_opendir+0x9c>
 801ab42:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801ab44:	4628      	mov	r0, r5
 801ab46:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 801ab48:	60de      	str	r6, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801ab4a:	f7fe fae9 	bl	8019120 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 801ab4e:	4604      	mov	r4, r0
 801ab50:	b9f8      	cbnz	r0, 801ab92 <f_opendir+0x86>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801ab52:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	db2d      	blt.n	801abb6 <f_opendir+0xaa>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801ab5a:	79ab      	ldrb	r3, [r5, #6]
 801ab5c:	06db      	lsls	r3, r3, #27
 801ab5e:	d525      	bpl.n	801abac <f_opendir+0xa0>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801ab60:	9b03      	ldr	r3, [sp, #12]
 801ab62:	6a29      	ldr	r1, [r5, #32]
	if (fs->fs_type == FS_FAT32) {
 801ab64:	7818      	ldrb	r0, [r3, #0]
	cl = ld_word(dir + DIR_FstClusLO);
 801ab66:	8b4a      	ldrh	r2, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 801ab68:	2803      	cmp	r0, #3
 801ab6a:	d102      	bne.n	801ab72 <f_opendir+0x66>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801ab6c:	8a89      	ldrh	r1, [r1, #20]
 801ab6e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801ab72:	60aa      	str	r2, [r5, #8]
				obj->id = fs->id;
 801ab74:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801ab76:	2100      	movs	r1, #0
 801ab78:	4628      	mov	r0, r5
				obj->id = fs->id;
 801ab7a:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801ab7c:	f7fe f870 	bl	8018c60 <dir_sdi>
				if (res == FR_OK) {
 801ab80:	4604      	mov	r4, r0
 801ab82:	b930      	cbnz	r0, 801ab92 <f_opendir+0x86>
					if (obj->sclust) {
 801ab84:	68ab      	ldr	r3, [r5, #8]
 801ab86:	b9c3      	cbnz	r3, 801abba <f_opendir+0xae>
		FREE_NAMBUF();
 801ab88:	4630      	mov	r0, r6
						obj->lockid = 0;	/* Root directory need not to be locked */
 801ab8a:	612c      	str	r4, [r5, #16]
		FREE_NAMBUF();
 801ab8c:	f000 fcba 	bl	801b504 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801ab90:	e7cb      	b.n	801ab2a <f_opendir+0x1e>
		FREE_NAMBUF();
 801ab92:	4630      	mov	r0, r6
 801ab94:	f000 fcb6 	bl	801b504 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801ab98:	2c04      	cmp	r4, #4
 801ab9a:	bf08      	it	eq
 801ab9c:	2405      	moveq	r4, #5
 801ab9e:	e7c2      	b.n	801ab26 <f_opendir+0x1a>
	if (!dp) return FR_INVALID_OBJECT;
 801aba0:	2409      	movs	r4, #9
}
 801aba2:	4620      	mov	r0, r4
 801aba4:	b004      	add	sp, #16
 801aba6:	bd70      	pop	{r4, r5, r6, pc}
		INIT_NAMBUF(fs);
 801aba8:	2411      	movs	r4, #17
 801abaa:	e7be      	b.n	801ab2a <f_opendir+0x1e>
		FREE_NAMBUF();
 801abac:	4630      	mov	r0, r6
					res = FR_NO_PATH;
 801abae:	2405      	movs	r4, #5
		FREE_NAMBUF();
 801abb0:	f000 fca8 	bl	801b504 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801abb4:	e7b7      	b.n	801ab26 <f_opendir+0x1a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801abb6:	9b03      	ldr	r3, [sp, #12]
 801abb8:	e7dc      	b.n	801ab74 <f_opendir+0x68>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801abba:	4601      	mov	r1, r0
 801abbc:	4628      	mov	r0, r5
 801abbe:	f7fd f8cf 	bl	8017d60 <inc_lock>
 801abc2:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801abc4:	b920      	cbnz	r0, 801abd0 <f_opendir+0xc4>
		FREE_NAMBUF();
 801abc6:	4630      	mov	r0, r6
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801abc8:	2412      	movs	r4, #18
		FREE_NAMBUF();
 801abca:	f000 fc9b 	bl	801b504 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801abce:	e7aa      	b.n	801ab26 <f_opendir+0x1a>
		FREE_NAMBUF();
 801abd0:	4630      	mov	r0, r6
 801abd2:	f000 fc97 	bl	801b504 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801abd6:	e7a8      	b.n	801ab2a <f_opendir+0x1e>

0801abd8 <f_closedir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801abd8:	b338      	cbz	r0, 801ac2a <f_closedir+0x52>
 801abda:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801abdc:	b510      	push	{r4, lr}
 801abde:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801abe0:	b12b      	cbz	r3, 801abee <f_closedir+0x16>
 801abe2:	781a      	ldrb	r2, [r3, #0]
 801abe4:	b11a      	cbz	r2, 801abee <f_closedir+0x16>
 801abe6:	8881      	ldrh	r1, [r0, #4]
 801abe8:	88da      	ldrh	r2, [r3, #6]
 801abea:	4291      	cmp	r1, r2
 801abec:	d001      	beq.n	801abf2 <f_closedir+0x1a>
	FRESULT res = FR_INVALID_OBJECT;
 801abee:	2009      	movs	r0, #9
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 801abf0:	bd10      	pop	{r4, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801abf2:	7858      	ldrb	r0, [r3, #1]
 801abf4:	f7fd f86e 	bl	8017cd4 <disk_status>
 801abf8:	f010 0001 	ands.w	r0, r0, #1
 801abfc:	d1f7      	bne.n	801abee <f_closedir+0x16>
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801abfe:	6923      	ldr	r3, [r4, #16]
 801ac00:	b183      	cbz	r3, 801ac24 <f_closedir+0x4c>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801ac02:	3b01      	subs	r3, #1
 801ac04:	2b03      	cmp	r3, #3
 801ac06:	d817      	bhi.n	801ac38 <f_closedir+0x60>
		n = Files[i].ctr;
 801ac08:	490c      	ldr	r1, [pc, #48]	; (801ac3c <f_closedir+0x64>)
 801ac0a:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 801ac0e:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 801ac12:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801ac14:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801ac18:	d009      	beq.n	801ac2e <f_closedir+0x56>
		if (n > 0) n--;				/* Decrement read mode open count */
 801ac1a:	b14a      	cbz	r2, 801ac30 <f_closedir+0x58>
 801ac1c:	3a01      	subs	r2, #1
 801ac1e:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 801ac20:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801ac22:	b12a      	cbz	r2, 801ac30 <f_closedir+0x58>
			dp->obj.fs = 0;			/* Invalidate directory object */
 801ac24:	2300      	movs	r3, #0
 801ac26:	6023      	str	r3, [r4, #0]
}
 801ac28:	bd10      	pop	{r4, pc}
	FRESULT res = FR_INVALID_OBJECT;
 801ac2a:	2009      	movs	r0, #9
}
 801ac2c:	4770      	bx	lr
		Files[i].ctr = n;
 801ac2e:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801ac30:	2300      	movs	r3, #0
 801ac32:	f841 300c 	str.w	r3, [r1, ip]
		if (res == FR_OK)
 801ac36:	e7f5      	b.n	801ac24 <f_closedir+0x4c>
		res = FR_INT_ERR;			/* Invalid index nunber */
 801ac38:	2002      	movs	r0, #2
}
 801ac3a:	bd10      	pop	{r4, pc}
 801ac3c:	2400a120 	.word	0x2400a120

0801ac40 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801ac42:	b148      	cbz	r0, 801ac58 <f_readdir+0x18>
 801ac44:	6803      	ldr	r3, [r0, #0]
 801ac46:	4604      	mov	r4, r0
 801ac48:	b133      	cbz	r3, 801ac58 <f_readdir+0x18>
 801ac4a:	781a      	ldrb	r2, [r3, #0]
 801ac4c:	b122      	cbz	r2, 801ac58 <f_readdir+0x18>
 801ac4e:	460e      	mov	r6, r1
 801ac50:	88da      	ldrh	r2, [r3, #6]
 801ac52:	8881      	ldrh	r1, [r0, #4]
 801ac54:	4291      	cmp	r1, r2
 801ac56:	d002      	beq.n	801ac5e <f_readdir+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 801ac58:	2509      	movs	r5, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 801ac5a:	4628      	mov	r0, r5
 801ac5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801ac5e:	7858      	ldrb	r0, [r3, #1]
 801ac60:	f7fd f838 	bl	8017cd4 <disk_status>
 801ac64:	07c3      	lsls	r3, r0, #31
 801ac66:	d4f7      	bmi.n	801ac58 <f_readdir+0x18>
		if (!fno) {
 801ac68:	b1f6      	cbz	r6, 801aca8 <f_readdir+0x68>
			INIT_NAMBUF(fs);
 801ac6a:	f44f 7000 	mov.w	r0, #512	; 0x200
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801ac6e:	6825      	ldr	r5, [r4, #0]
			INIT_NAMBUF(fs);
 801ac70:	f000 fc46 	bl	801b500 <ff_memalloc>
 801ac74:	4607      	mov	r7, r0
 801ac76:	b1e8      	cbz	r0, 801acb4 <f_readdir+0x74>
 801ac78:	60ef      	str	r7, [r5, #12]
			res = dir_read(dp, 0);			/* Read an item */
 801ac7a:	4620      	mov	r0, r4
 801ac7c:	f7fd fc98 	bl	80185b0 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 801ac80:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 801ac84:	4605      	mov	r5, r0
			if (res == FR_OK) {				/* A valid entry is found */
 801ac86:	d10a      	bne.n	801ac9e <f_readdir+0x5e>
				get_fileinfo(dp, fno);		/* Get the object information */
 801ac88:	4631      	mov	r1, r6
 801ac8a:	4620      	mov	r0, r4
 801ac8c:	f7fd f8d8 	bl	8017e40 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801ac90:	4620      	mov	r0, r4
 801ac92:	f7fd fc49 	bl	8018528 <dir_next.constprop.0>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801ac96:	2804      	cmp	r0, #4
				res = dir_next(dp, 0);		/* Increment index for next */
 801ac98:	4605      	mov	r5, r0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801ac9a:	bf08      	it	eq
 801ac9c:	2500      	moveq	r5, #0
			FREE_NAMBUF();
 801ac9e:	4638      	mov	r0, r7
 801aca0:	f000 fc30 	bl	801b504 <ff_memfree>
}
 801aca4:	4628      	mov	r0, r5
 801aca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801aca8:	4631      	mov	r1, r6
 801acaa:	4620      	mov	r0, r4
}
 801acac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801acb0:	f7fd bfd6 	b.w	8018c60 <dir_sdi>
			INIT_NAMBUF(fs);
 801acb4:	2511      	movs	r5, #17
 801acb6:	e7d0      	b.n	801ac5a <f_readdir+0x1a>

0801acb8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801acb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acbc:	b097      	sub	sp, #92	; 0x5c
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801acbe:	2202      	movs	r2, #2
{
 801acc0:	9007      	str	r0, [sp, #28]
	res = find_volume(&path, &fs, FA_WRITE);
 801acc2:	a908      	add	r1, sp, #32
 801acc4:	a807      	add	r0, sp, #28
 801acc6:	f7fd f9b7 	bl	8018038 <find_volume>
	dj.obj.fs = fs;
 801acca:	9b08      	ldr	r3, [sp, #32]
	if (res == FR_OK) {
 801accc:	4606      	mov	r6, r0
	dj.obj.fs = fs;
 801acce:	9309      	str	r3, [sp, #36]	; 0x24
	if (res == FR_OK) {
 801acd0:	b118      	cbz	r0, 801acda <f_mkdir+0x22>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 801acd2:	4630      	mov	r0, r6
 801acd4:	b017      	add	sp, #92	; 0x5c
 801acd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 801acda:	f44f 7000 	mov.w	r0, #512	; 0x200
 801acde:	f000 fc0f 	bl	801b500 <ff_memalloc>
 801ace2:	4604      	mov	r4, r0
 801ace4:	b190      	cbz	r0, 801ad0c <f_mkdir+0x54>
		res = follow_path(&dj, path);			/* Follow the file path */
 801ace6:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
		INIT_NAMBUF(fs);
 801acea:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 801acec:	a809      	add	r0, sp, #36	; 0x24
 801acee:	f7fe fa17 	bl	8019120 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801acf2:	b148      	cbz	r0, 801ad08 <f_mkdir+0x50>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801acf4:	2804      	cmp	r0, #4
 801acf6:	d00b      	beq.n	801ad10 <f_mkdir+0x58>
 801acf8:	4606      	mov	r6, r0
		FREE_NAMBUF();
 801acfa:	4620      	mov	r0, r4
 801acfc:	f000 fc02 	bl	801b504 <ff_memfree>
}
 801ad00:	4630      	mov	r0, r6
 801ad02:	b017      	add	sp, #92	; 0x5c
 801ad04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801ad08:	2608      	movs	r6, #8
 801ad0a:	e7f6      	b.n	801acfa <f_mkdir+0x42>
		INIT_NAMBUF(fs);
 801ad0c:	2611      	movs	r6, #17
 801ad0e:	e7e0      	b.n	801acd2 <f_mkdir+0x1a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801ad10:	4631      	mov	r1, r6
 801ad12:	a809      	add	r0, sp, #36	; 0x24
 801ad14:	f7fd fed4 	bl	8018ac0 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801ad18:	9d08      	ldr	r5, [sp, #32]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801ad1a:	4680      	mov	r8, r0
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801ad1c:	896b      	ldrh	r3, [r5, #10]
 801ad1e:	025b      	lsls	r3, r3, #9
 801ad20:	930c      	str	r3, [sp, #48]	; 0x30
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801ad22:	2800      	cmp	r0, #0
 801ad24:	f000 80fe 	beq.w	801af24 <f_mkdir+0x26c>
			if (dcl == 1) res = FR_INT_ERR;
 801ad28:	2801      	cmp	r0, #1
 801ad2a:	f000 80ff 	beq.w	801af2c <f_mkdir+0x274>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801ad2e:	f1b0 3fff 	cmp.w	r0, #4294967295
 801ad32:	f000 8106 	beq.w	801af42 <f_mkdir+0x28a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801ad36:	78eb      	ldrb	r3, [r5, #3]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	f040 8104 	bne.w	801af46 <f_mkdir+0x28e>
			tm = GET_FATTIME();
 801ad3e:	f7fd f80d 	bl	8017d5c <get_fattime>
				dsc = clust2sect(fs, dcl);
 801ad42:	f8dd 9020 	ldr.w	r9, [sp, #32]
	clst -= 2;
 801ad46:	f1a8 0202 	sub.w	r2, r8, #2
			tm = GET_FATTIME();
 801ad4a:	4605      	mov	r5, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801ad4c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801ad50:	3b02      	subs	r3, #2
 801ad52:	429a      	cmp	r2, r3
 801ad54:	f080 80f3 	bcs.w	801af3e <f_mkdir+0x286>
	return clst * fs->csize + fs->database;
 801ad58:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 801ad5c:	f8d9 702c 	ldr.w	r7, [r9, #44]	; 0x2c
 801ad60:	fb02 7703 	mla	r7, r2, r3, r7
				dir = fs->win;
 801ad64:	f109 0a34 	add.w	sl, r9, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 801ad68:	b2eb      	uxtb	r3, r5
		*d++ = (BYTE)val;
 801ad6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ad6e:	2100      	movs	r1, #0
 801ad70:	4650      	mov	r0, sl
	*ptr++ = (BYTE)val; val >>= 8;
 801ad72:	9301      	str	r3, [sp, #4]
		*d++ = (BYTE)val;
 801ad74:	f00a fcfc 	bl	8025770 <memset>
 801ad78:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	*ptr++ = (BYTE)val;
 801ad7c:	0e2a      	lsrs	r2, r5, #24
		*d++ = (BYTE)val;
 801ad7e:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 801ad82:	f8ca 3004 	str.w	r3, [sl, #4]
 801ad86:	f8ca 3007 	str.w	r3, [sl, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 801ad8a:	9b01      	ldr	r3, [sp, #4]
	*ptr++ = (BYTE)val;
 801ad8c:	9206      	str	r2, [sp, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 801ad8e:	f889 304a 	strb.w	r3, [r9, #74]	; 0x4a
					dir[DIR_Name] = '.';
 801ad92:	232e      	movs	r3, #46	; 0x2e
	*ptr++ = (BYTE)val;
 801ad94:	f889 204d 	strb.w	r2, [r9, #77]	; 0x4d
					dir[DIR_Name] = '.';
 801ad98:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
					dir[DIR_Attr] = AM_DIR;
 801ad9c:	2310      	movs	r3, #16
 801ad9e:	f889 303f 	strb.w	r3, [r9, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 801ada2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801ada6:	9304      	str	r3, [sp, #16]
 801ada8:	f889 304b 	strb.w	r3, [r9, #75]	; 0x4b
	*ptr++ = (BYTE)val; val >>= 8;
 801adac:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801adb0:	9305      	str	r3, [sp, #20]
 801adb2:	f889 304c 	strb.w	r3, [r9, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 801adb6:	fa5f f388 	uxtb.w	r3, r8
 801adba:	9302      	str	r3, [sp, #8]
 801adbc:	f889 304e 	strb.w	r3, [r9, #78]	; 0x4e
	*ptr++ = (BYTE)val;
 801adc0:	f3c8 2307 	ubfx	r3, r8, #8, #8
 801adc4:	9303      	str	r3, [sp, #12]
 801adc6:	f889 304f 	strb.w	r3, [r9, #79]	; 0x4f
	if (fs->fs_type == FS_FAT32) {
 801adca:	f899 3000 	ldrb.w	r3, [r9]
 801adce:	2b03      	cmp	r3, #3
 801add0:	d106      	bne.n	801ade0 <f_mkdir+0x128>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801add2:	ea4f 4318 	mov.w	r3, r8, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 801add6:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
 801adda:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 801addc:	f889 3049 	strb.w	r3, [r9, #73]	; 0x49
			*d++ = *s++;
 801ade0:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801ade4:	9d08      	ldr	r5, [sp, #32]
			*d++ = *s++;
 801ade6:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
 801adea:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 801adee:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
 801adf2:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 801adf6:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
 801adfa:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 801adfe:	f8c9 3060 	str.w	r3, [r9, #96]	; 0x60
 801ae02:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 801ae06:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 801ae0a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 801ae0e:	f8c9 3068 	str.w	r3, [r9, #104]	; 0x68
 801ae12:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 801ae16:	f8c9 306c 	str.w	r3, [r9, #108]	; 0x6c
 801ae1a:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 801ae1e:	f8c9 3070 	str.w	r3, [r9, #112]	; 0x70
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801ae22:	232e      	movs	r3, #46	; 0x2e
 801ae24:	f889 3055 	strb.w	r3, [r9, #85]	; 0x55
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801ae28:	782a      	ldrb	r2, [r5, #0]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801ae2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801ae2c:	2a03      	cmp	r2, #3
 801ae2e:	d07f      	beq.n	801af30 <f_mkdir+0x278>
	*ptr++ = (BYTE)val; val >>= 8;
 801ae30:	b2de      	uxtb	r6, r3
	*ptr++ = (BYTE)val;
 801ae32:	f3c3 2207 	ubfx	r2, r3, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801ae36:	f889 606e 	strb.w	r6, [r9, #110]	; 0x6e
	*ptr++ = (BYTE)val;
 801ae3a:	f889 206f 	strb.w	r2, [r9, #111]	; 0x6f
	if (fs->fs_type == FS_FAT32) {
 801ae3e:	782a      	ldrb	r2, [r5, #0]
 801ae40:	2a03      	cmp	r2, #3
 801ae42:	d105      	bne.n	801ae50 <f_mkdir+0x198>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801ae44:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801ae46:	f889 3068 	strb.w	r3, [r9, #104]	; 0x68
 801ae4a:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 801ae4c:	f889 3069 	strb.w	r3, [r9, #105]	; 0x69
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801ae50:	896b      	ldrh	r3, [r5, #10]
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d03a      	beq.n	801aecc <f_mkdir+0x214>
 801ae56:	3b01      	subs	r3, #1
					fs->wflag = 1;
 801ae58:	9400      	str	r4, [sp, #0]
 801ae5a:	443b      	add	r3, r7
 801ae5c:	469b      	mov	fp, r3
 801ae5e:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801ae62:	f105 0434 	add.w	r4, r5, #52	; 0x34
 801ae66:	463a      	mov	r2, r7
 801ae68:	7868      	ldrb	r0, [r5, #1]
					fs->wflag = 1;
 801ae6a:	70eb      	strb	r3, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801ae6c:	4621      	mov	r1, r4
 801ae6e:	2301      	movs	r3, #1
					fs->winsect = dsc++;
 801ae70:	632f      	str	r7, [r5, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801ae72:	f7fc ff59 	bl	8017d28 <disk_write>
 801ae76:	bb00      	cbnz	r0, 801aeba <f_mkdir+0x202>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801ae78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
			fs->wflag = 0;
 801ae7a:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801ae7c:	1afa      	subs	r2, r7, r3
 801ae7e:	69eb      	ldr	r3, [r5, #28]
 801ae80:	429a      	cmp	r2, r3
 801ae82:	d20f      	bcs.n	801aea4 <f_mkdir+0x1ec>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801ae84:	78ae      	ldrb	r6, [r5, #2]
 801ae86:	2e01      	cmp	r6, #1
 801ae88:	d90c      	bls.n	801aea4 <f_mkdir+0x1ec>
 801ae8a:	46b9      	mov	r9, r7
 801ae8c:	e000      	b.n	801ae90 <f_mkdir+0x1d8>
					wsect += fs->fsize;
 801ae8e:	69eb      	ldr	r3, [r5, #28]
 801ae90:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801ae92:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801ae94:	2301      	movs	r3, #1
 801ae96:	4621      	mov	r1, r4
 801ae98:	464a      	mov	r2, r9
 801ae9a:	7868      	ldrb	r0, [r5, #1]
 801ae9c:	f7fc ff44 	bl	8017d28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801aea0:	2e01      	cmp	r6, #1
 801aea2:	d1f4      	bne.n	801ae8e <f_mkdir+0x1d6>
		*d++ = (BYTE)val;
 801aea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801aea8:	2100      	movs	r1, #0
 801aeaa:	4650      	mov	r0, sl
 801aeac:	f00a fc60 	bl	8025770 <memset>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801aeb0:	45bb      	cmp	fp, r7
 801aeb2:	d00a      	beq.n	801aeca <f_mkdir+0x212>
 801aeb4:	3701      	adds	r7, #1
					fs->winsect = dsc++;
 801aeb6:	9d08      	ldr	r5, [sp, #32]
 801aeb8:	e7d1      	b.n	801ae5e <f_mkdir+0x1a6>
			res = FR_DISK_ERR;
 801aeba:	9c00      	ldr	r4, [sp, #0]
 801aebc:	2601      	movs	r6, #1
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801aebe:	2200      	movs	r2, #0
 801aec0:	4641      	mov	r1, r8
 801aec2:	a809      	add	r0, sp, #36	; 0x24
 801aec4:	f7fe fab8 	bl	8019438 <remove_chain>
 801aec8:	e717      	b.n	801acfa <f_mkdir+0x42>
 801aeca:	9c00      	ldr	r4, [sp, #0]
				res = dir_register(&dj);	/* Register the object to the directoy */
 801aecc:	a809      	add	r0, sp, #36	; 0x24
 801aece:	f7fe fb51 	bl	8019574 <dir_register>
			if (res == FR_OK) {
 801aed2:	4606      	mov	r6, r0
 801aed4:	2800      	cmp	r0, #0
 801aed6:	d1f2      	bne.n	801aebe <f_mkdir+0x206>
	*ptr++ = (BYTE)val; val >>= 8;
 801aed8:	9b01      	ldr	r3, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 801aeda:	9a02      	ldr	r2, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 801aedc:	f363 0607 	bfi	r6, r3, #0, #8
 801aee0:	9b04      	ldr	r3, [sp, #16]
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801aee2:	9808      	ldr	r0, [sp, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 801aee4:	f363 260f 	bfi	r6, r3, #8, #8
 801aee8:	9b05      	ldr	r3, [sp, #20]
 801aeea:	f363 4617 	bfi	r6, r3, #16, #8
 801aeee:	9b06      	ldr	r3, [sp, #24]
 801aef0:	f363 661f 	bfi	r6, r3, #24, #8
					dir = dj.dir;
 801aef4:	9b11      	ldr	r3, [sp, #68]	; 0x44
	*ptr++ = (BYTE)val; val >>= 8;
 801aef6:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 801aef8:	9a03      	ldr	r2, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 801aefa:	f8c3 6016 	str.w	r6, [r3, #22]
	*ptr++ = (BYTE)val;
 801aefe:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 801af00:	7802      	ldrb	r2, [r0, #0]
 801af02:	2a03      	cmp	r2, #3
 801af04:	d106      	bne.n	801af14 <f_mkdir+0x25c>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801af06:	ea4f 4818 	mov.w	r8, r8, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 801af0a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 801af0e:	f883 8014 	strb.w	r8, [r3, #20]
	*ptr++ = (BYTE)val;
 801af12:	755a      	strb	r2, [r3, #21]
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801af14:	2110      	movs	r1, #16
					fs->wflag = 1;
 801af16:	2201      	movs	r2, #1
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801af18:	72d9      	strb	r1, [r3, #11]
					fs->wflag = 1;
 801af1a:	70c2      	strb	r2, [r0, #3]
					res = sync_fs(fs);
 801af1c:	f7fd fd60 	bl	80189e0 <sync_fs>
 801af20:	4606      	mov	r6, r0
 801af22:	e6ea      	b.n	801acfa <f_mkdir+0x42>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801af24:	2607      	movs	r6, #7
			tm = GET_FATTIME();
 801af26:	f7fc ff19 	bl	8017d5c <get_fattime>
			if (res == FR_OK) {					/* Initialize the new directory table */
 801af2a:	e7c8      	b.n	801aebe <f_mkdir+0x206>
			if (dcl == 1) res = FR_INT_ERR;
 801af2c:	2602      	movs	r6, #2
 801af2e:	e7fa      	b.n	801af26 <f_mkdir+0x26e>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801af30:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801af32:	429a      	cmp	r2, r3
 801af34:	f47f af7c 	bne.w	801ae30 <f_mkdir+0x178>
 801af38:	2200      	movs	r2, #0
 801af3a:	4613      	mov	r3, r2
 801af3c:	e77b      	b.n	801ae36 <f_mkdir+0x17e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801af3e:	2700      	movs	r7, #0
 801af40:	e710      	b.n	801ad64 <f_mkdir+0xac>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801af42:	2601      	movs	r6, #1
 801af44:	e7ef      	b.n	801af26 <f_mkdir+0x26e>
		wsect = fs->winsect;	/* Current sector number */
 801af46:	6b2f      	ldr	r7, [r5, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801af48:	f105 0a34 	add.w	sl, r5, #52	; 0x34
 801af4c:	2301      	movs	r3, #1
 801af4e:	7868      	ldrb	r0, [r5, #1]
 801af50:	463a      	mov	r2, r7
 801af52:	4651      	mov	r1, sl
 801af54:	f7fc fee8 	bl	8017d28 <disk_write>
 801af58:	2800      	cmp	r0, #0
 801af5a:	d1f2      	bne.n	801af42 <f_mkdir+0x28a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801af5c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
			fs->wflag = 0;
 801af5e:	70ee      	strb	r6, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801af60:	1afa      	subs	r2, r7, r3
 801af62:	69eb      	ldr	r3, [r5, #28]
 801af64:	429a      	cmp	r2, r3
 801af66:	f4bf aeea 	bcs.w	801ad3e <f_mkdir+0x86>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801af6a:	f895 9002 	ldrb.w	r9, [r5, #2]
 801af6e:	f1b9 0f01 	cmp.w	r9, #1
 801af72:	d801      	bhi.n	801af78 <f_mkdir+0x2c0>
 801af74:	e6e3      	b.n	801ad3e <f_mkdir+0x86>
 801af76:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 801af78:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801af7a:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 801af7e:	2301      	movs	r3, #1
 801af80:	4651      	mov	r1, sl
 801af82:	463a      	mov	r2, r7
 801af84:	7868      	ldrb	r0, [r5, #1]
 801af86:	f7fc fecf 	bl	8017d28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801af8a:	f1b9 0f01 	cmp.w	r9, #1
 801af8e:	d1f2      	bne.n	801af76 <f_mkdir+0x2be>
 801af90:	e6d5      	b.n	801ad3e <f_mkdir+0x86>
 801af92:	bf00      	nop

0801af94 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 801af94:	b40e      	push	{r1, r2, r3}
 801af96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af9a:	b0a0      	sub	sp, #128	; 0x80
	pb->nchr = pb->idx = 0;
 801af9c:	2100      	movs	r1, #0
{
 801af9e:	ab29      	add	r3, sp, #164	; 0xa4
	pb->nchr = pb->idx = 0;
 801afa0:	910f      	str	r1, [sp, #60]	; 0x3c
{
 801afa2:	f853 6b04 	ldr.w	r6, [r3], #4
	putc_init(&pb, fp);

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
 801afa6:	4634      	mov	r4, r6
	va_start(arp, fmt);
 801afa8:	9303      	str	r3, [sp, #12]
		c = *fmt++;
 801afaa:	f814 3b01 	ldrb.w	r3, [r4], #1
	pb->fp = fp;
 801afae:	e9cd 010d 	strd	r0, r1, [sp, #52]	; 0x34
		if (c == 0) break;			/* End of string */
 801afb2:	b9bb      	cbnz	r3, 801afe4 <f_printf+0x50>
 801afb4:	e26d      	b.n	801b492 <f_printf+0x4fe>
	if (i < 0) return;
 801afb6:	2900      	cmp	r1, #0
 801afb8:	f2c0 81cd 	blt.w	801b356 <f_printf+0x3c2>
	pb->buf[i++] = (BYTE)c;
 801afbc:	f101 0280 	add.w	r2, r1, #128	; 0x80
 801afc0:	1c4d      	adds	r5, r1, #1
 801afc2:	446a      	add	r2, sp
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801afc4:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801afc6:	f802 3c40 	strb.w	r3, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801afca:	f300 81c6 	bgt.w	801b35a <f_printf+0x3c6>
	pb->nchr++;
 801afce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801afd0:	4629      	mov	r1, r5
 801afd2:	4626      	mov	r6, r4
	pb->idx = i;
 801afd4:	950e      	str	r5, [sp, #56]	; 0x38
	pb->nchr++;
 801afd6:	3301      	adds	r3, #1
 801afd8:	930f      	str	r3, [sp, #60]	; 0x3c
		c = *fmt++;
 801afda:	4634      	mov	r4, r6
 801afdc:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (c == 0) break;			/* End of string */
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d063      	beq.n	801b0ac <f_printf+0x118>
		if (c != '%') {				/* Non escape character */
 801afe4:	2b25      	cmp	r3, #37	; 0x25
 801afe6:	d1e6      	bne.n	801afb6 <f_printf+0x22>
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
 801afe8:	7873      	ldrb	r3, [r6, #1]
		if (c == '0') {				/* Flag: '0' padding */
 801afea:	2b30      	cmp	r3, #48	; 0x30
 801afec:	f000 81ab 	beq.w	801b346 <f_printf+0x3b2>
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 801aff0:	2b2d      	cmp	r3, #45	; 0x2d
 801aff2:	f000 81be 	beq.w	801b372 <f_printf+0x3de>
		c = *fmt++;
 801aff6:	f04f 0b00 	mov.w	fp, #0
 801affa:	3602      	adds	r6, #2
 801affc:	2004      	movs	r0, #4
		w = f = 0;
 801affe:	46da      	mov	sl, fp
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801b000:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801b004:	2400      	movs	r4, #0
 801b006:	2a09      	cmp	r2, #9
 801b008:	d80a      	bhi.n	801b020 <f_printf+0x8c>
			w = w * 10 + c - '0';
 801b00a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801b00e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
			c = *fmt++;
 801b012:	f816 3b01 	ldrb.w	r3, [r6], #1
		while (IsDigit(c)) {		/* Precision */
 801b016:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
			w = w * 10 + c - '0';
 801b01a:	3c30      	subs	r4, #48	; 0x30
		while (IsDigit(c)) {		/* Precision */
 801b01c:	2a09      	cmp	r2, #9
 801b01e:	d9f4      	bls.n	801b00a <f_printf+0x76>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801b020:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 801b024:	2a4c      	cmp	r2, #76	; 0x4c
 801b026:	f040 818a 	bne.w	801b33e <f_printf+0x3aa>
			f |= 4; c = *fmt++;
 801b02a:	4682      	mov	sl, r0
 801b02c:	2704      	movs	r7, #4
 801b02e:	f816 3b01 	ldrb.w	r3, [r6], #1
		}
		if (!c) break;
 801b032:	2b00      	cmp	r3, #0
 801b034:	d03a      	beq.n	801b0ac <f_printf+0x118>
		d = c;
		if (IsLower(d)) d -= 0x20;
 801b036:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b03a:	2a19      	cmp	r2, #25
 801b03c:	f200 8181 	bhi.w	801b342 <f_printf+0x3ae>
 801b040:	f1a3 0520 	sub.w	r5, r3, #32
 801b044:	b2ed      	uxtb	r5, r5
		switch (d) {				/* Type is... */
 801b046:	f1a5 0242 	sub.w	r2, r5, #66	; 0x42
 801b04a:	2a16      	cmp	r2, #22
 801b04c:	d818      	bhi.n	801b080 <f_printf+0xec>
 801b04e:	e8df f012 	tbh	[pc, r2, lsl #1]
 801b052:	019f      	.short	0x019f
 801b054:	00440057 	.word	0x00440057
 801b058:	00170017 	.word	0x00170017
 801b05c:	00170017 	.word	0x00170017
 801b060:	00170017 	.word	0x00170017
 801b064:	00170017 	.word	0x00170017
 801b068:	00170017 	.word	0x00170017
 801b06c:	001700ae 	.word	0x001700ae
 801b070:	00170017 	.word	0x00170017
 801b074:	00170060 	.word	0x00170060
 801b078:	00170044 	.word	0x00170044
 801b07c:	01a10017 	.word	0x01a10017
	if (i < 0) return;
 801b080:	2900      	cmp	r1, #0
 801b082:	dbaa      	blt.n	801afda <f_printf+0x46>
	pb->buf[i++] = (BYTE)c;
 801b084:	1c4c      	adds	r4, r1, #1
 801b086:	f101 0280 	add.w	r2, r1, #128	; 0x80
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801b08a:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801b08c:	eb0d 0102 	add.w	r1, sp, r2
 801b090:	f801 3c40 	strb.w	r3, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801b094:	f300 81a4 	bgt.w	801b3e0 <f_printf+0x44c>
	pb->nchr++;
 801b098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b09a:	4621      	mov	r1, r4
	pb->idx = i;
 801b09c:	940e      	str	r4, [sp, #56]	; 0x38
		c = *fmt++;
 801b09e:	4634      	mov	r4, r6
	pb->nchr++;
 801b0a0:	3301      	adds	r3, #1
 801b0a2:	930f      	str	r3, [sp, #60]	; 0x3c
		c = *fmt++;
 801b0a4:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (c == 0) break;			/* End of string */
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d19b      	bne.n	801afe4 <f_printf+0x50>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801b0ac:	2900      	cmp	r1, #0
 801b0ae:	f2c0 81e2 	blt.w	801b476 <f_printf+0x4e2>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801b0b2:	460a      	mov	r2, r1
 801b0b4:	ab04      	add	r3, sp, #16
 801b0b6:	a910      	add	r1, sp, #64	; 0x40
 801b0b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b0ba:	f7ff fb41 	bl	801a740 <f_write>
 801b0be:	2800      	cmp	r0, #0
 801b0c0:	f040 81d9 	bne.w	801b476 <f_printf+0x4e2>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801b0c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b0c6:	9b04      	ldr	r3, [sp, #16]
 801b0c8:	429a      	cmp	r2, r3
 801b0ca:	f040 81d4 	bne.w	801b476 <f_printf+0x4e2>
 801b0ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
	}

	va_end(arp);

	return putc_flush(&pb);
}
 801b0d0:	b020      	add	sp, #128	; 0x80
 801b0d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0d6:	b003      	add	sp, #12
 801b0d8:	4770      	bx	lr
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801b0da:	2f00      	cmp	r7, #0
 801b0dc:	f040 815c 	bne.w	801b398 <f_printf+0x404>
 801b0e0:	2d44      	cmp	r5, #68	; 0x44
 801b0e2:	f040 814d 	bne.w	801b380 <f_printf+0x3ec>
 801b0e6:	9a03      	ldr	r2, [sp, #12]
		if (d == 'D' && (v & 0x80000000)) {
 801b0e8:	2d44      	cmp	r5, #68	; 0x44
 801b0ea:	f04f 000a 	mov.w	r0, #10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801b0ee:	f102 0704 	add.w	r7, r2, #4
 801b0f2:	9703      	str	r7, [sp, #12]
 801b0f4:	6817      	ldr	r7, [r2, #0]
 801b0f6:	463a      	mov	r2, r7
		if (d == 'D' && (v & 0x80000000)) {
 801b0f8:	d065      	beq.n	801b1c6 <f_printf+0x232>
 801b0fa:	2500      	movs	r5, #0
 801b0fc:	9501      	str	r5, [sp, #4]
 801b0fe:	e06d      	b.n	801b1dc <f_printf+0x248>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801b100:	9b03      	ldr	r3, [sp, #12]
	if (i < 0) return;
 801b102:	2900      	cmp	r1, #0
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801b104:	f103 0204 	add.w	r2, r3, #4
 801b108:	9203      	str	r2, [sp, #12]
	if (i < 0) return;
 801b10a:	f6ff af66 	blt.w	801afda <f_printf+0x46>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	e7b8      	b.n	801b084 <f_printf+0xf0>
			p = va_arg(arp, TCHAR*);
 801b112:	9b03      	ldr	r3, [sp, #12]
 801b114:	681d      	ldr	r5, [r3, #0]
 801b116:	3304      	adds	r3, #4
			for (j = 0; p[j]; j++) ;
 801b118:	782a      	ldrb	r2, [r5, #0]
			p = va_arg(arp, TCHAR*);
 801b11a:	9303      	str	r3, [sp, #12]
			for (j = 0; p[j]; j++) ;
 801b11c:	2a00      	cmp	r2, #0
 801b11e:	f000 81b1 	beq.w	801b484 <f_printf+0x4f0>
 801b122:	462b      	mov	r3, r5
 801b124:	f1c5 0c01 	rsb	ip, r5, #1
 801b128:	eb0c 0703 	add.w	r7, ip, r3
 801b12c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 801b130:	2800      	cmp	r0, #0
 801b132:	d1f9      	bne.n	801b128 <f_printf+0x194>
			if (!(f & 2)) {
 801b134:	f1bb 0f00 	cmp.w	fp, #0
 801b138:	f000 815e 	beq.w	801b3f8 <f_printf+0x464>
			while (j++ < w) putc_bfd(&pb, ' ');
 801b13c:	f107 0801 	add.w	r8, r7, #1
 801b140:	3501      	adds	r5, #1
	pb->buf[i++] = (BYTE)c;
 801b142:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 801b146:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 801b148:	f101 0901 	add.w	r9, r1, #1
 801b14c:	eb0d 0003 	add.w	r0, sp, r3
			while (*p) putc_bfd(&pb, *p++);
 801b150:	462b      	mov	r3, r5
	if (i < 0) return;
 801b152:	f2c0 8123 	blt.w	801b39c <f_printf+0x408>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801b156:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
 801b15a:	4649      	mov	r1, r9
	pb->buf[i++] = (BYTE)c;
 801b15c:	f800 2c40 	strb.w	r2, [r0, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801b160:	f300 8125 	bgt.w	801b3ae <f_printf+0x41a>
	pb->nchr++;
 801b164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	pb->idx = i;
 801b166:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 801b168:	3301      	adds	r3, #1
 801b16a:	930f      	str	r3, [sp, #60]	; 0x3c
			while (*p) putc_bfd(&pb, *p++);
 801b16c:	f815 2b01 	ldrb.w	r2, [r5], #1
 801b170:	2a00      	cmp	r2, #0
 801b172:	d1e6      	bne.n	801b142 <f_printf+0x1ae>
			while (j++ < w) putc_bfd(&pb, ' ');
 801b174:	42a7      	cmp	r7, r4
 801b176:	f4bf af30 	bcs.w	801afda <f_printf+0x46>
	pb->buf[i++] = (BYTE)c;
 801b17a:	2720      	movs	r7, #32
 801b17c:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 801b180:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 801b182:	f101 0501 	add.w	r5, r1, #1
 801b186:	446b      	add	r3, sp
	if (i < 0) return;
 801b188:	f6ff af27 	blt.w	801afda <f_printf+0x46>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801b18c:	2d3c      	cmp	r5, #60	; 0x3c
 801b18e:	4629      	mov	r1, r5
	pb->buf[i++] = (BYTE)c;
 801b190:	f803 7c40 	strb.w	r7, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801b194:	f300 8118 	bgt.w	801b3c8 <f_printf+0x434>
	pb->nchr++;
 801b198:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
			while (j++ < w) putc_bfd(&pb, ' ');
 801b19a:	f108 0201 	add.w	r2, r8, #1
 801b19e:	4544      	cmp	r4, r8
	pb->idx = i;
 801b1a0:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 801b1a2:	f103 0301 	add.w	r3, r3, #1
			while (j++ < w) putc_bfd(&pb, ' ');
 801b1a6:	4690      	mov	r8, r2
	pb->nchr++;
 801b1a8:	930f      	str	r3, [sp, #60]	; 0x3c
			while (j++ < w) putc_bfd(&pb, ' ');
 801b1aa:	d8e7      	bhi.n	801b17c <f_printf+0x1e8>
 801b1ac:	e715      	b.n	801afda <f_printf+0x46>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801b1ae:	2008      	movs	r0, #8
 801b1b0:	2f00      	cmp	r7, #0
 801b1b2:	f000 80e6 	beq.w	801b382 <f_printf+0x3ee>
 801b1b6:	9a03      	ldr	r2, [sp, #12]
		if (d == 'D' && (v & 0x80000000)) {
 801b1b8:	2d44      	cmp	r5, #68	; 0x44
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801b1ba:	f102 0704 	add.w	r7, r2, #4
 801b1be:	9703      	str	r7, [sp, #12]
 801b1c0:	6817      	ldr	r7, [r2, #0]
 801b1c2:	463a      	mov	r2, r7
		if (d == 'D' && (v & 0x80000000)) {
 801b1c4:	d199      	bne.n	801b0fa <f_printf+0x166>
 801b1c6:	2f00      	cmp	r7, #0
 801b1c8:	da97      	bge.n	801b0fa <f_printf+0x166>
			f |= 8;
 801b1ca:	f04a 0508 	orr.w	r5, sl, #8
 801b1ce:	f00a 0b02 	and.w	fp, sl, #2
			v = 0 - v;
 801b1d2:	427a      	negs	r2, r7
			f |= 8;
 801b1d4:	fa5f fa85 	uxtb.w	sl, r5
 801b1d8:	2508      	movs	r5, #8
 801b1da:	9501      	str	r5, [sp, #4]
		i = 0;
 801b1dc:	2b78      	cmp	r3, #120	; 0x78
 801b1de:	f10d 0c14 	add.w	ip, sp, #20
 801b1e2:	f04f 0e00 	mov.w	lr, #0
 801b1e6:	bf0c      	ite	eq
 801b1e8:	f04f 0927 	moveq.w	r9, #39	; 0x27
 801b1ec:	f04f 0907 	movne.w	r9, #7
 801b1f0:	e000      	b.n	801b1f4 <f_printf+0x260>
		} while (v && i < sizeof str / sizeof str[0]);
 801b1f2:	46ae      	mov	lr, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801b1f4:	4617      	mov	r7, r2
			str[i++] = d + '0';
 801b1f6:	f10e 0501 	add.w	r5, lr, #1
			d = (TCHAR)(v % r); v /= r;
 801b1fa:	fbb2 f3f0 	udiv	r3, r2, r0
 801b1fe:	fb00 2813 	mls	r8, r0, r3, r2
 801b202:	461a      	mov	r2, r3
 801b204:	fa5f f388 	uxtb.w	r3, r8
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801b208:	f1b8 0f09 	cmp.w	r8, #9
 801b20c:	eb09 0803 	add.w	r8, r9, r3
 801b210:	bf88      	it	hi
 801b212:	fa5f f388 	uxtbhi.w	r3, r8
		} while (v && i < sizeof str / sizeof str[0]);
 801b216:	4287      	cmp	r7, r0
			str[i++] = d + '0';
 801b218:	f103 0330 	add.w	r3, r3, #48	; 0x30
 801b21c:	f80c 3b01 	strb.w	r3, [ip], #1
		} while (v && i < sizeof str / sizeof str[0]);
 801b220:	d301      	bcc.n	801b226 <f_printf+0x292>
 801b222:	2d1f      	cmp	r5, #31
 801b224:	d9e5      	bls.n	801b1f2 <f_printf+0x25e>
		if (f & 8) str[i++] = '-';
 801b226:	9b01      	ldr	r3, [sp, #4]
 801b228:	b13b      	cbz	r3, 801b23a <f_printf+0x2a6>
 801b22a:	f105 0380 	add.w	r3, r5, #128	; 0x80
 801b22e:	222d      	movs	r2, #45	; 0x2d
 801b230:	f10e 0502 	add.w	r5, lr, #2
 801b234:	446b      	add	r3, sp
 801b236:	f803 2c6c 	strb.w	r2, [r3, #-108]
		j = i; d = (f & 1) ? '0' : ' ';
 801b23a:	f01a 0f01 	tst.w	sl, #1
 801b23e:	bf0c      	ite	eq
 801b240:	f04f 0820 	moveq.w	r8, #32
 801b244:	f04f 0830 	movne.w	r8, #48	; 0x30
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801b248:	f1bb 0f00 	cmp.w	fp, #0
 801b24c:	f040 810f 	bne.w	801b46e <f_printf+0x4da>
 801b250:	42a5      	cmp	r5, r4
 801b252:	f105 0a01 	add.w	sl, r5, #1
 801b256:	f080 810c 	bcs.w	801b472 <f_printf+0x4de>
 801b25a:	f104 0901 	add.w	r9, r4, #1
	pb->buf[i++] = (BYTE)c;
 801b25e:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 801b262:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 801b264:	f101 0701 	add.w	r7, r1, #1
 801b268:	446b      	add	r3, sp
	if (i < 0) return;
 801b26a:	db0e      	blt.n	801b28a <f_printf+0x2f6>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801b26c:	2f3c      	cmp	r7, #60	; 0x3c
 801b26e:	4639      	mov	r1, r7
	pb->buf[i++] = (BYTE)c;
 801b270:	f803 8c40 	strb.w	r8, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801b274:	dc4c      	bgt.n	801b310 <f_printf+0x37c>
	pb->nchr++;
 801b276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801b278:	f10a 0201 	add.w	r2, sl, #1
 801b27c:	4554      	cmp	r4, sl
	pb->idx = i;
 801b27e:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 801b280:	f103 0301 	add.w	r3, r3, #1
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801b284:	4692      	mov	sl, r2
	pb->nchr++;
 801b286:	930f      	str	r3, [sp, #60]	; 0x3c
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801b288:	d1e9      	bne.n	801b25e <f_printf+0x2ca>
 801b28a:	3d01      	subs	r5, #1
 801b28c:	ab05      	add	r3, sp, #20
 801b28e:	eb03 0a05 	add.w	sl, r3, r5
 801b292:	e00e      	b.n	801b2b2 <f_printf+0x31e>
	pb->buf[i++] = (BYTE)c;
 801b294:	f89a 2000 	ldrb.w	r2, [sl]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801b298:	2f3c      	cmp	r7, #60	; 0x3c
 801b29a:	f10a 3aff 	add.w	sl, sl, #4294967295
	pb->buf[i++] = (BYTE)c;
 801b29e:	f803 2c40 	strb.w	r2, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801b2a2:	dc29      	bgt.n	801b2f8 <f_printf+0x364>
	pb->nchr++;
 801b2a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		} while (i);
 801b2a6:	4639      	mov	r1, r7
	pb->idx = i;
 801b2a8:	970e      	str	r7, [sp, #56]	; 0x38
	pb->nchr++;
 801b2aa:	3301      	adds	r3, #1
 801b2ac:	930f      	str	r3, [sp, #60]	; 0x3c
		} while (i);
 801b2ae:	b13d      	cbz	r5, 801b2c0 <f_printf+0x32c>
 801b2b0:	3d01      	subs	r5, #1
	pb->buf[i++] = (BYTE)c;
 801b2b2:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 801b2b6:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 801b2b8:	f101 0701 	add.w	r7, r1, #1
 801b2bc:	446b      	add	r3, sp
	if (i < 0) return;
 801b2be:	dae9      	bge.n	801b294 <f_printf+0x300>
		while (j++ < w) putc_bfd(&pb, d);
 801b2c0:	454c      	cmp	r4, r9
 801b2c2:	f109 0501 	add.w	r5, r9, #1
 801b2c6:	f67f ae88 	bls.w	801afda <f_printf+0x46>
	pb->buf[i++] = (BYTE)c;
 801b2ca:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 801b2ce:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 801b2d0:	f101 0201 	add.w	r2, r1, #1
 801b2d4:	446b      	add	r3, sp
	if (i < 0) return;
 801b2d6:	f6ff ae80 	blt.w	801afda <f_printf+0x46>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801b2da:	293c      	cmp	r1, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801b2dc:	f803 8c40 	strb.w	r8, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801b2e0:	4611      	mov	r1, r2
 801b2e2:	d021      	beq.n	801b328 <f_printf+0x394>
	pb->nchr++;
 801b2e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		while (j++ < w) putc_bfd(&pb, d);
 801b2e6:	1c6a      	adds	r2, r5, #1
 801b2e8:	42ac      	cmp	r4, r5
	pb->idx = i;
 801b2ea:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 801b2ec:	f103 0301 	add.w	r3, r3, #1
		while (j++ < w) putc_bfd(&pb, d);
 801b2f0:	4615      	mov	r5, r2
	pb->nchr++;
 801b2f2:	930f      	str	r3, [sp, #60]	; 0x3c
		while (j++ < w) putc_bfd(&pb, d);
 801b2f4:	d1e9      	bne.n	801b2ca <f_printf+0x336>
 801b2f6:	e670      	b.n	801afda <f_printf+0x46>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801b2f8:	463a      	mov	r2, r7
 801b2fa:	ab04      	add	r3, sp, #16
 801b2fc:	a910      	add	r1, sp, #64	; 0x40
 801b2fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b300:	f7ff fa1e 	bl	801a740 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801b304:	9b04      	ldr	r3, [sp, #16]
 801b306:	1bdf      	subs	r7, r3, r7
 801b308:	bf18      	it	ne
 801b30a:	f04f 37ff 	movne.w	r7, #4294967295
 801b30e:	e7c9      	b.n	801b2a4 <f_printf+0x310>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801b310:	a910      	add	r1, sp, #64	; 0x40
 801b312:	ab04      	add	r3, sp, #16
 801b314:	463a      	mov	r2, r7
 801b316:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b318:	f7ff fa12 	bl	801a740 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801b31c:	9904      	ldr	r1, [sp, #16]
 801b31e:	1bc9      	subs	r1, r1, r7
 801b320:	bf18      	it	ne
 801b322:	f04f 31ff 	movne.w	r1, #4294967295
 801b326:	e7a6      	b.n	801b276 <f_printf+0x2e2>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801b328:	a910      	add	r1, sp, #64	; 0x40
 801b32a:	ab04      	add	r3, sp, #16
 801b32c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b32e:	f7ff fa07 	bl	801a740 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801b332:	9904      	ldr	r1, [sp, #16]
 801b334:	393d      	subs	r1, #61	; 0x3d
 801b336:	bf18      	it	ne
 801b338:	f04f 31ff 	movne.w	r1, #4294967295
 801b33c:	e7d2      	b.n	801b2e4 <f_printf+0x350>
 801b33e:	2700      	movs	r7, #0
 801b340:	e677      	b.n	801b032 <f_printf+0x9e>
 801b342:	461d      	mov	r5, r3
 801b344:	e67f      	b.n	801b046 <f_printf+0xb2>
			f = 1; c = *fmt++;
 801b346:	78b3      	ldrb	r3, [r6, #2]
 801b348:	f04f 0b00 	mov.w	fp, #0
 801b34c:	3603      	adds	r6, #3
 801b34e:	2005      	movs	r0, #5
 801b350:	f04f 0a01 	mov.w	sl, #1
 801b354:	e654      	b.n	801b000 <f_printf+0x6c>
	if (i < 0) return;
 801b356:	4626      	mov	r6, r4
 801b358:	e63f      	b.n	801afda <f_printf+0x46>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801b35a:	462a      	mov	r2, r5
 801b35c:	ab04      	add	r3, sp, #16
 801b35e:	a910      	add	r1, sp, #64	; 0x40
 801b360:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b362:	f7ff f9ed 	bl	801a740 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801b366:	9b04      	ldr	r3, [sp, #16]
 801b368:	1b5d      	subs	r5, r3, r5
 801b36a:	bf18      	it	ne
 801b36c:	f04f 35ff 	movne.w	r5, #4294967295
 801b370:	e62d      	b.n	801afce <f_printf+0x3a>
				f = 2; c = *fmt++;
 801b372:	f04f 0b02 	mov.w	fp, #2
 801b376:	78b3      	ldrb	r3, [r6, #2]
 801b378:	2006      	movs	r0, #6
 801b37a:	3603      	adds	r6, #3
 801b37c:	46da      	mov	sl, fp
 801b37e:	e63f      	b.n	801b000 <f_printf+0x6c>
 801b380:	200a      	movs	r0, #10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801b382:	9a03      	ldr	r2, [sp, #12]
 801b384:	2500      	movs	r5, #0
 801b386:	9501      	str	r5, [sp, #4]
 801b388:	1d15      	adds	r5, r2, #4
 801b38a:	6812      	ldr	r2, [r2, #0]
 801b38c:	9503      	str	r5, [sp, #12]
 801b38e:	e725      	b.n	801b1dc <f_printf+0x248>
		switch (d) {				/* Type is... */
 801b390:	2002      	movs	r0, #2
 801b392:	e70d      	b.n	801b1b0 <f_printf+0x21c>
 801b394:	2010      	movs	r0, #16
 801b396:	e70b      	b.n	801b1b0 <f_printf+0x21c>
 801b398:	200a      	movs	r0, #10
 801b39a:	e70c      	b.n	801b1b6 <f_printf+0x222>
			while (*p) putc_bfd(&pb, *p++);
 801b39c:	782a      	ldrb	r2, [r5, #0]
 801b39e:	2a00      	cmp	r2, #0
 801b3a0:	f43f aee8 	beq.w	801b174 <f_printf+0x1e0>
 801b3a4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801b3a8:	2a00      	cmp	r2, #0
 801b3aa:	d1fb      	bne.n	801b3a4 <f_printf+0x410>
 801b3ac:	e6e2      	b.n	801b174 <f_printf+0x1e0>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801b3ae:	a910      	add	r1, sp, #64	; 0x40
 801b3b0:	ab04      	add	r3, sp, #16
 801b3b2:	464a      	mov	r2, r9
 801b3b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b3b6:	f7ff f9c3 	bl	801a740 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801b3ba:	9904      	ldr	r1, [sp, #16]
 801b3bc:	ebb1 0109 	subs.w	r1, r1, r9
 801b3c0:	bf18      	it	ne
 801b3c2:	f04f 31ff 	movne.w	r1, #4294967295
 801b3c6:	e6cd      	b.n	801b164 <f_printf+0x1d0>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801b3c8:	a910      	add	r1, sp, #64	; 0x40
 801b3ca:	ab04      	add	r3, sp, #16
 801b3cc:	462a      	mov	r2, r5
 801b3ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b3d0:	f7ff f9b6 	bl	801a740 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801b3d4:	9904      	ldr	r1, [sp, #16]
 801b3d6:	1b49      	subs	r1, r1, r5
 801b3d8:	bf18      	it	ne
 801b3da:	f04f 31ff 	movne.w	r1, #4294967295
 801b3de:	e6db      	b.n	801b198 <f_printf+0x204>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801b3e0:	4622      	mov	r2, r4
 801b3e2:	ab04      	add	r3, sp, #16
 801b3e4:	a910      	add	r1, sp, #64	; 0x40
 801b3e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b3e8:	f7ff f9aa 	bl	801a740 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801b3ec:	9b04      	ldr	r3, [sp, #16]
 801b3ee:	1b1c      	subs	r4, r3, r4
 801b3f0:	bf18      	it	ne
 801b3f2:	f04f 34ff 	movne.w	r4, #4294967295
 801b3f6:	e64f      	b.n	801b098 <f_printf+0x104>
				while (j++ < w) putc_bfd(&pb, ' ');
 801b3f8:	42bc      	cmp	r4, r7
 801b3fa:	f107 0901 	add.w	r9, r7, #1
 801b3fe:	f107 0802 	add.w	r8, r7, #2
 801b402:	d948      	bls.n	801b496 <f_printf+0x502>
 801b404:	464f      	mov	r7, r9
	pb->buf[i++] = (BYTE)c;
 801b406:	f04f 0820 	mov.w	r8, #32
 801b40a:	f101 0380 	add.w	r3, r1, #128	; 0x80
	if (i < 0) return;
 801b40e:	2900      	cmp	r1, #0
	pb->buf[i++] = (BYTE)c;
 801b410:	f101 0a01 	add.w	sl, r1, #1
 801b414:	446b      	add	r3, sp
	if (i < 0) return;
 801b416:	db0e      	blt.n	801b436 <f_printf+0x4a2>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801b418:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
 801b41c:	4651      	mov	r1, sl
	pb->buf[i++] = (BYTE)c;
 801b41e:	f803 8c40 	strb.w	r8, [r3, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801b422:	dc17      	bgt.n	801b454 <f_printf+0x4c0>
	pb->nchr++;
 801b424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
				while (j++ < w) putc_bfd(&pb, ' ');
 801b426:	1c7a      	adds	r2, r7, #1
 801b428:	42bc      	cmp	r4, r7
	pb->idx = i;
 801b42a:	910e      	str	r1, [sp, #56]	; 0x38
	pb->nchr++;
 801b42c:	f103 0301 	add.w	r3, r3, #1
				while (j++ < w) putc_bfd(&pb, ' ');
 801b430:	4617      	mov	r7, r2
	pb->nchr++;
 801b432:	930f      	str	r3, [sp, #60]	; 0x3c
				while (j++ < w) putc_bfd(&pb, ' ');
 801b434:	d8e9      	bhi.n	801b40a <f_printf+0x476>
 801b436:	eba4 0709 	sub.w	r7, r4, r9
			while (*p) putc_bfd(&pb, *p++);
 801b43a:	782a      	ldrb	r2, [r5, #0]
				while (j++ < w) putc_bfd(&pb, ' ');
 801b43c:	454c      	cmp	r4, r9
 801b43e:	bf38      	it	cc
 801b440:	2700      	movcc	r7, #0
 801b442:	f109 0901 	add.w	r9, r9, #1
 801b446:	444f      	add	r7, r9
			while (j++ < w) putc_bfd(&pb, ' ');
 801b448:	f107 0801 	add.w	r8, r7, #1
			while (*p) putc_bfd(&pb, *p++);
 801b44c:	2a00      	cmp	r2, #0
 801b44e:	f47f ae77 	bne.w	801b140 <f_printf+0x1ac>
 801b452:	e68f      	b.n	801b174 <f_printf+0x1e0>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801b454:	a910      	add	r1, sp, #64	; 0x40
 801b456:	ab04      	add	r3, sp, #16
 801b458:	4652      	mov	r2, sl
 801b45a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b45c:	f7ff f970 	bl	801a740 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801b460:	9904      	ldr	r1, [sp, #16]
 801b462:	ebb1 010a 	subs.w	r1, r1, sl
 801b466:	bf18      	it	ne
 801b468:	f04f 31ff 	movne.w	r1, #4294967295
 801b46c:	e7da      	b.n	801b424 <f_printf+0x490>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801b46e:	46a9      	mov	r9, r5
 801b470:	e70b      	b.n	801b28a <f_printf+0x2f6>
 801b472:	46d1      	mov	r9, sl
 801b474:	e709      	b.n	801b28a <f_printf+0x2f6>
	return EOF;
 801b476:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b47a:	b020      	add	sp, #128	; 0x80
 801b47c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b480:	b003      	add	sp, #12
 801b482:	4770      	bx	lr
			if (!(f & 2)) {
 801b484:	f1bb 0f00 	cmp.w	fp, #0
 801b488:	d007      	beq.n	801b49a <f_printf+0x506>
			for (j = 0; p[j]; j++) ;
 801b48a:	4617      	mov	r7, r2
			if (!(f & 2)) {
 801b48c:	f04f 0801 	mov.w	r8, #1
 801b490:	e670      	b.n	801b174 <f_printf+0x1e0>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801b492:	4619      	mov	r1, r3
 801b494:	e60d      	b.n	801b0b2 <f_printf+0x11e>
				while (j++ < w) putc_bfd(&pb, ' ');
 801b496:	464f      	mov	r7, r9
 801b498:	e652      	b.n	801b140 <f_printf+0x1ac>
 801b49a:	2c00      	cmp	r4, #0
 801b49c:	f43f ad9d 	beq.w	801afda <f_printf+0x46>
 801b4a0:	f04f 0901 	mov.w	r9, #1
 801b4a4:	e7ae      	b.n	801b404 <f_printf+0x470>
 801b4a6:	bf00      	nop

0801b4a8 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 801b4a8:	4b14      	ldr	r3, [pc, #80]	; (801b4fc <FATFS_LinkDriver+0x54>)
 801b4aa:	7b9a      	ldrb	r2, [r3, #14]
 801b4ac:	2a01      	cmp	r2, #1
 801b4ae:	d901      	bls.n	801b4b4 <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 801b4b0:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 801b4b2:	4770      	bx	lr
    disk.is_initialized[disk.nbr] = 0;
 801b4b4:	f893 c00e 	ldrb.w	ip, [r3, #14]
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	fa5f fc8c 	uxtb.w	ip, ip
 801b4be:	f803 200c 	strb.w	r2, [r3, ip]
    disk.drv[disk.nbr] = drv;
 801b4c2:	f893 c00e 	ldrb.w	ip, [r3, #14]
 801b4c6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801b4ca:	f8cc 0004 	str.w	r0, [ip, #4]
    disk.lun[disk.nbr] = lun;
 801b4ce:	f893 c00e 	ldrb.w	ip, [r3, #14]
    DiskNum = disk.nbr++;
 801b4d2:	7b98      	ldrb	r0, [r3, #14]
    disk.lun[disk.nbr] = lun;
 801b4d4:	449c      	add	ip, r3
 801b4d6:	f88c 200c 	strb.w	r2, [ip, #12]
    DiskNum = disk.nbr++;
 801b4da:	f100 0c01 	add.w	ip, r0, #1
    path[0] = DiskNum + '0';
 801b4de:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
 801b4e0:	fa5f fc8c 	uxtb.w	ip, ip
 801b4e4:	f883 c00e 	strb.w	ip, [r3, #14]
    path[1] = ':';
 801b4e8:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    path[2] = '/';
 801b4ec:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 801b4ee:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 801b4f0:	f881 c001 	strb.w	ip, [r1, #1]
    path[3] = 0;
 801b4f4:	4610      	mov	r0, r2
    path[2] = '/';
 801b4f6:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 801b4f8:	70ca      	strb	r2, [r1, #3]
  return ret;
 801b4fa:	4770      	bx	lr
 801b4fc:	2400a164 	.word	0x2400a164

0801b500 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 801b500:	f00a b918 	b.w	8025734 <malloc>

0801b504 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 801b504:	f00a b91e 	b.w	8025744 <free>

0801b508 <Init_DataMemoryLayout>:
/**
* @brief Initializes the application data memory layout
* @param  Pointer to Application context
*/
void Init_DataMemoryLayout(AppContext_TypeDef *App_Context_Ptr)
{  
 801b508:	b430      	push	{r4, r5}
   App_Context_Ptr->Ai_ContextPtr->nn_input_buffer = NULL;
  #else
   App_Context_Ptr->Ai_ContextPtr->nn_input_buffer = ai_fp_global_memory + AI_ACTIVATION_BUFFER_SIZE;
  #endif
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer = ai_fp_global_memory;
 801b50a:	4d08      	ldr	r5, [pc, #32]	; (801b52c <Init_DataMemoryLayout+0x24>)
 801b50c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 801b50e:	f505 23e1 	add.w	r3, r5, #460800	; 0x70800
   App_Context_Ptr->Ai_ContextPtr->nn_input_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
  #endif
 #else /*MEMORY_SCHEME == FULL_EXTERNAL*/
  /*Offset so to "bottom" align camera_frame_buff buffer and resize_output_buff buffer*/
  #define  RESIZE_OUTPUT_BUFFER_OFFSET (CAM_FRAME_BUFFER_SIZE - RESIZE_OUTPUT_BUFFER_SIZE) 
  App_Context_Ptr->Ai_ContextPtr->activation_buffer  = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 801b512:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 801b514:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
  #ifdef AI_NETWORK_INPUTS_IN_ACTIVATIONS
   /*Initialized to NULL since input buffer is allocated within activation buffer ==> its size does not need to be taken into account*/  
   App_Context_Ptr->Ai_ContextPtr->nn_input_buffer = NULL;
  #else
   App_Context_Ptr->Ai_ContextPtr->nn_input_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + AI_ACTIVATION_BUFFER_SIZE;
 801b516:	4806      	ldr	r0, [pc, #24]	; (801b530 <Init_DataMemoryLayout+0x28>)
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 801b518:	e9c4 5300 	strd	r5, r3, [r4]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
 801b51c:	f503 24b0 	add.w	r4, r3, #360448	; 0x58000
  App_Context_Ptr->Ai_ContextPtr->activation_buffer  = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 801b520:	6093      	str	r3, [r2, #8]
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 801b522:	634b      	str	r3, [r1, #52]	; 0x34
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
 801b524:	654c      	str	r4, [r1, #84]	; 0x54
   App_Context_Ptr->Ai_ContextPtr->nn_input_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + AI_ACTIVATION_BUFFER_SIZE;
 801b526:	6050      	str	r0, [r2, #4]
  #endif
 #endif
#else
 #error Please check definition of MEMORY_SCHEME define
#endif
}
 801b528:	bc30      	pop	{r4, r5}
 801b52a:	4770      	bx	lr
 801b52c:	d0000000 	.word	0xd0000000
 801b530:	d01059e0 	.word	0xd01059e0

0801b534 <Run_Preprocessing>:
    /*********************************************************************************************/
    UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer), CAM_FRAME_BUFFER_SIZE, INVALIDATE);
  }
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 801b534:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 801b536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 801b53a:	685a      	ldr	r2, [r3, #4]
{
 801b53c:	4605      	mov	r5, r0
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 801b53e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
  TestRunCtxt_Ptr->PerformCapture=1;
  TestRunCtxt_Ptr->DumpFormat=BMP565;
  TestRunCtxt_Ptr->rb_swap=0;
 801b540:	2700      	movs	r7, #0
  TestRunCtxt_Ptr->PerformCapture=1;
 801b542:	f04f 0801 	mov.w	r8, #1
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 801b546:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 801b54a:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 801b704 <Run_Preprocessing+0x1d0>
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 801b54e:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
  PreprocContext_TypeDef* PreprocCtxt_Ptr=App_Context_Ptr->Preproc_ContextPtr;
 801b552:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
{
 801b554:	b083      	sub	sp, #12
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 801b556:	f8c4 25c8 	str.w	r2, [r4, #1480]	; 0x5c8
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801b55a:	4620      	mov	r0, r4
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 801b55c:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 801b560:	f8c4 a5cc 	str.w	sl, [r4, #1484]	; 0x5cc
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 801b564:	f8c4 95d0 	str.w	r9, [r4, #1488]	; 0x5d0
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
 801b568:	f8c4 95d4 	str.w	r9, [r4, #1492]	; 0x5d4
  TestRunCtxt_Ptr->PerformCapture=1;
 801b56c:	f8c4 85dc 	str.w	r8, [r4, #1500]	; 0x5dc
  TestRunCtxt_Ptr->DumpFormat=BMP565;
 801b570:	f884 85e0 	strb.w	r8, [r4, #1504]	; 0x5e0
  TestRunCtxt_Ptr->rb_swap=0;
 801b574:	f8c4 75e4 	str.w	r7, [r4, #1508]	; 0x5e4
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801b578:	7829      	ldrb	r1, [r5, #0]
 801b57a:	f7e8 fc15 	bl	8003da8 <TEST_Run>
  
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801b57e:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801b580:	f7e9 fc6a 	bl	8004e58 <UTILS_GetTimeStamp>
  
  /**********************/
  /****Image resizing****/
  /**********************/
  PreprocCtxt_Ptr->Resize_Src_Img.pData=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 801b584:	6aab      	ldr	r3, [r5, #40]	; 0x28
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801b586:	4683      	mov	fp, r0
  PreprocCtxt_Ptr->Resize_Src_Img.pData=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 801b588:	685b      	ldr	r3, [r3, #4]
  PreprocCtxt_Ptr->Resize_Src_Img.width=CAM_RES_WIDTH;
  PreprocCtxt_Ptr->Resize_Src_Img.height=CAM_RES_HEIGHT;
  PreprocCtxt_Ptr->Resize_Src_Img.format=PXFMT_RGB565;
 801b58a:	f886 8048 	strb.w	r8, [r6, #72]	; 0x48
  PreprocCtxt_Ptr->Resize_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 801b58e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  PreprocCtxt_Ptr->Resize_Src_Img.pData=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 801b590:	6473      	str	r3, [r6, #68]	; 0x44
  PreprocCtxt_Ptr->Resize_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 801b592:	6d42      	ldr	r2, [r0, #84]	; 0x54
  PreprocCtxt_Ptr->Resize_Dst_Img.width=App_Context_Ptr->Ai_ContextPtr->nn_width;
 801b594:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  PreprocCtxt_Ptr->Resize_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 801b596:	6572      	str	r2, [r6, #84]	; 0x54
  PreprocCtxt_Ptr->Resize_Dst_Img.width=App_Context_Ptr->Ai_ContextPtr->nn_width;
 801b598:	691a      	ldr	r2, [r3, #16]
  PreprocCtxt_Ptr->Resize_Dst_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 801b59a:	695b      	ldr	r3, [r3, #20]
  PreprocCtxt_Ptr->Resize_Dst_Img.width=App_Context_Ptr->Ai_ContextPtr->nn_width;
 801b59c:	64f2      	str	r2, [r6, #76]	; 0x4c
  PreprocCtxt_Ptr->Resize_Dst_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 801b59e:	6533      	str	r3, [r6, #80]	; 0x50
  PreprocCtxt_Ptr->Resize_Dst_Img.format=PXFMT_RGB565;
 801b5a0:	f886 8058 	strb.w	r8, [r6, #88]	; 0x58
  PreprocCtxt_Ptr->Resize_Src_Img.height=CAM_RES_HEIGHT;
 801b5a4:	e9c6 990f 	strd	r9, r9, [r6, #60]	; 0x3c
  PreprocCtxt_Ptr->Roi.x0=0;
  PreprocCtxt_Ptr->Roi.y0=0;
 801b5a8:	e9c6 7703 	strd	r7, r7, [r6, #12]
  PreprocCtxt_Ptr->Roi.width=0;
  PreprocCtxt_Ptr->Roi.height=0;
 801b5ac:	e9c6 7705 	strd	r7, r7, [r6, #20]
  PREPROC_ImageResize(App_Context_Ptr->Preproc_ContextPtr);
 801b5b0:	f7e6 fb7e 	bl	8001cb0 <PREPROC_ImageResize>
  
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801b5b4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801b5b6:	f7e9 fc4f 	bl	8004e58 <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC
  /******************************************************************************************/
  /****Coherency purpose: clean the source buffer area in L1 D-Cache before DMA2D reading****/
  /******************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 801b5ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801b5bc:	2202      	movs	r2, #2
 801b5be:	f44f 31c4 	mov.w	r1, #100352	; 0x18800
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801b5c2:	4681      	mov	r9, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 801b5c4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801b5c6:	f7e9 fcf5 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData);
 801b5ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801b5cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b5ce:	f8c4 35c8 	str.w	r3, [r4, #1480]	; 0x5c8
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 801b5d2:	f10a 0320 	add.w	r3, sl, #32
 801b5d6:	f8c4 35cc 	str.w	r3, [r4, #1484]	; 0x5cc
  TestRunCtxt_Ptr->src_width_size=ai_get_input_width();
 801b5da:	f7e5 f8d1 	bl	8000780 <ai_get_input_width>
 801b5de:	f8c4 05d0 	str.w	r0, [r4, #1488]	; 0x5d0
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 801b5e2:	f7e5 f8c7 	bl	8000774 <ai_get_input_height>
 * @param img pointer to image object
 * @return DataFormat_TypeDef image dump format
 */
static DataFormat_TypeDef get_dump_format(Image_TypeDef *img)
{
  switch (img->format)
 801b5e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 801b5e8:	f44f 32c4 	mov.w	r2, #100352	; 0x18800
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 801b5ec:	f8c4 05d4 	str.w	r0, [r4, #1492]	; 0x5d4
  TestRunCtxt_Ptr->PerformCapture=0;
 801b5f0:	f8c4 75dc 	str.w	r7, [r4, #1500]	; 0x5dc
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 801b5f4:	f8c4 25d8 	str.w	r2, [r4, #1496]	; 0x5d8
  switch (img->format)
 801b5f8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
  TestRunCtxt_Ptr->rb_swap=0;
 801b5fc:	f8c4 75e4 	str.w	r7, [r4, #1508]	; 0x5e4
  switch (img->format)
 801b600:	2b03      	cmp	r3, #3
 801b602:	bf28      	it	cs
 801b604:	2303      	movcs	r3, #3
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img);
 801b606:	f884 35e0 	strb.w	r3, [r4, #1504]	; 0x5e0
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801b60a:	7829      	ldrb	r1, [r5, #0]
 801b60c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801b60e:	f7e8 fbcb 	bl	8003da8 <TEST_Run>
  tpfc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801b612:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801b614:	f7e9 fc20 	bl	8004e58 <UTILS_GetTimeStamp>
 801b618:	9001      	str	r0, [sp, #4]
  PreprocCtxt_Ptr->Pfc_Src_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 801b61a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  PreprocCtxt_Ptr->Pfc_Src_Img.width=App_Context_Ptr->Ai_ContextPtr->nn_width;
 801b61c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
  PreprocCtxt_Ptr->Pfc_Src_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 801b61e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801b620:	6272      	str	r2, [r6, #36]	; 0x24
  PreprocCtxt_Ptr->Pfc_Src_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 801b622:	e9d1 2104 	ldrd	r2, r1, [r1, #16]
  PreprocCtxt_Ptr->Pfc_Src_Img.format=PXFMT_RGB565;
 801b626:	f886 8028 	strb.w	r8, [r6, #40]	; 0x28
  PreprocCtxt_Ptr->Pfc_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData;
 801b62a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  PreprocCtxt_Ptr->Pfc_Dst_Img.width=App_Context_Ptr->Ai_ContextPtr->nn_width;
 801b62c:	62f2      	str	r2, [r6, #44]	; 0x2c
  PreprocCtxt_Ptr->red_blue_swap=1;
 801b62e:	f8c6 8008 	str.w	r8, [r6, #8]
  PreprocCtxt_Ptr->Pfc_Dst_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 801b632:	e9c6 130c 	strd	r1, r3, [r6, #48]	; 0x30
  PreprocCtxt_Ptr->Pfc_Src_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 801b636:	e9c6 2107 	strd	r2, r1, [r6, #28]
  PreprocCtxt_Ptr->Dma2dcfg.x=0;
 801b63a:	e9c6 7200 	strd	r7, r2, [r6]
  PREPROC_PixelFormatConversion(App_Context_Ptr->Preproc_ContextPtr);
 801b63e:	f7e6 fb3f 	bl	8001cc0 <PREPROC_PixelFormatConversion>
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801b642:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801b644:	f7e9 fc08 	bl	8004e58 <UTILS_GetTimeStamp>
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData), 
 801b648:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801b64a:	4606      	mov	r6, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData), 
 801b64c:	f44f 3113 	mov.w	r1, #150528	; 0x24c00
 801b650:	6b50      	ldr	r0, [r2, #52]	; 0x34
 801b652:	4642      	mov	r2, r8
 801b654:	f7e9 fcae 	bl	8004fb4 <UTILS_DCache_Coherency_Maintenance>
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData);
 801b658:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 801b65a:	f10a 0240 	add.w	r2, sl, #64	; 0x40
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData);
 801b65e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 801b660:	f8c4 25cc 	str.w	r2, [r4, #1484]	; 0x5cc
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData);
 801b664:	f8c4 15c8 	str.w	r1, [r4, #1480]	; 0x5c8
  TestRunCtxt_Ptr->src_width_size=ai_get_input_width();
 801b668:	f7e5 f88a 	bl	8000780 <ai_get_input_width>
 801b66c:	f8c4 05d0 	str.w	r0, [r4, #1488]	; 0x5d0
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 801b670:	f7e5 f880 	bl	8000774 <ai_get_input_height>
  switch (img->format)
 801b674:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 801b676:	f44f 3113 	mov.w	r1, #150528	; 0x24c00
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 801b67a:	f8c4 05d4 	str.w	r0, [r4, #1492]	; 0x5d4
  TestRunCtxt_Ptr->PerformCapture=0;
 801b67e:	f8c4 75dc 	str.w	r7, [r4, #1500]	; 0x5dc
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 801b682:	f8c4 15d8 	str.w	r1, [r4, #1496]	; 0x5d8
  switch (img->format)
 801b686:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
  TestRunCtxt_Ptr->rb_swap=1;
 801b68a:	f8c4 85e4 	str.w	r8, [r4, #1508]	; 0x5e4
  switch (img->format)
 801b68e:	2a03      	cmp	r2, #3
 801b690:	bf28      	it	cs
 801b692:	2203      	movcs	r2, #3
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img);
 801b694:	f884 25e0 	strb.w	r2, [r4, #1504]	; 0x5e0
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801b698:	7829      	ldrb	r1, [r5, #0]
 801b69a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801b69c:	f7e8 fb84 	bl	8003da8 <TEST_Run>
  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801b6a0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801b6a2:	f7e9 fbd9 	bl	8004e58 <UTILS_GetTimeStamp>
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr, 
 801b6a6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801b6a8:	4682      	mov	sl, r0
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr, 
 801b6aa:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 801b6ac:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801b6ae:	f7e5 fbdd 	bl	8000e6c <AI_PixelValueConversion>
  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801b6b2:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801b6b4:	f7e9 fbd0 	bl	8004e58 <UTILS_GetTimeStamp>
  TestRunCtxt_Ptr->src_buff_name="";
 801b6b8:	4a11      	ldr	r2, [pc, #68]	; (801b700 <Run_Preprocessing+0x1cc>)
  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801b6ba:	4680      	mov	r8, r0
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
 801b6bc:	f8c4 75c8 	str.w	r7, [r4, #1480]	; 0x5c8
  TestRunCtxt_Ptr->src_buff_name="";
 801b6c0:	f8c4 25cc 	str.w	r2, [r4, #1484]	; 0x5cc
  TestRunCtxt_Ptr->DumpFormat=RAW;
 801b6c4:	2203      	movs	r2, #3
  TestRunCtxt_Ptr->src_width_size=0;
 801b6c6:	f8c4 75d0 	str.w	r7, [r4, #1488]	; 0x5d0
  TestRunCtxt_Ptr->DumpFormat=RAW;
 801b6ca:	f884 25e0 	strb.w	r2, [r4, #1504]	; 0x5e0
  TestRunCtxt_Ptr->src_height_size=0;
 801b6ce:	f8c4 75d4 	str.w	r7, [r4, #1492]	; 0x5d4
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801b6d2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  TestRunCtxt_Ptr->src_size=0;
 801b6d4:	f8c4 75d8 	str.w	r7, [r4, #1496]	; 0x5d8
  TestRunCtxt_Ptr->PerformCapture=0;
 801b6d8:	f8c4 75dc 	str.w	r7, [r4, #1500]	; 0x5dc
  TestRunCtxt_Ptr->rb_swap=0;
 801b6dc:	f8c4 75e4 	str.w	r7, [r4, #1508]	; 0x5e4
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801b6e0:	7829      	ldrb	r1, [r5, #0]
 801b6e2:	f7e8 fb61 	bl	8003da8 <TEST_Run>
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 801b6e6:	9b01      	ldr	r3, [sp, #4]
 801b6e8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 801b6ea:	eba9 010b 	sub.w	r1, r9, fp
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 801b6ee:	1af3      	subs	r3, r6, r3
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PVC]=tpvc_stop-tpvc_start;
 801b6f0:	eba8 000a 	sub.w	r0, r8, sl
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 801b6f4:	6051      	str	r1, [r2, #4]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 801b6f6:	6093      	str	r3, [r2, #8]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PVC]=tpvc_stop-tpvc_start;
 801b6f8:	60d0      	str	r0, [r2, #12]
}
 801b6fa:	b003      	add	sp, #12
 801b6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b700:	0802925c 	.word	0x0802925c
 801b704:	24000024 	.word	0x24000024

0801b708 <Resize_Frame>:
  int x_ratio = (int)(((roi->width ? roi->width : srcImage->width)<<16)/dstImage->width)+1;
 801b708:	6893      	ldr	r3, [r2, #8]
{
 801b70a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b70e:	4617      	mov	r7, r2
 801b710:	b087      	sub	sp, #28
 801b712:	4606      	mov	r6, r0
 801b714:	4689      	mov	r9, r1
  int x_ratio = (int)(((roi->width ? roi->width : srcImage->width)<<16)/dstImage->width)+1;
 801b716:	b903      	cbnz	r3, 801b71a <Resize_Frame+0x12>
 801b718:	6803      	ldr	r3, [r0, #0]
 801b71a:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 801b71e:	f8d9 3000 	ldr.w	r3, [r9]
 801b722:	fbba faf3 	udiv	sl, sl, r3
  int y_ratio = (int)(((roi->height ? roi->height : srcImage->height)<<16)/dstImage->height)+1;
 801b726:	68fb      	ldr	r3, [r7, #12]
  int x_ratio = (int)(((roi->width ? roi->width : srcImage->width)<<16)/dstImage->width)+1;
 801b728:	f10a 0a01 	add.w	sl, sl, #1
  int y_ratio = (int)(((roi->height ? roi->height : srcImage->height)<<16)/dstImage->height)+1;
 801b72c:	b903      	cbnz	r3, 801b730 <Resize_Frame+0x28>
 801b72e:	6873      	ldr	r3, [r6, #4]
 801b730:	041b      	lsls	r3, r3, #16
 801b732:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801b736:	fbb3 f3f2 	udiv	r3, r3, r2
 801b73a:	3301      	adds	r3, #1
 801b73c:	9304      	str	r3, [sp, #16]
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 801b73e:	7b33      	ldrb	r3, [r6, #12]
 801b740:	b1b3      	cbz	r3, 801b770 <Resize_Frame+0x68>
 801b742:	2b01      	cmp	r3, #1
 801b744:	f000 80a9 	beq.w	801b89a <Resize_Frame+0x192>
 801b748:	2b02      	cmp	r3, #2
 801b74a:	f000 811d 	beq.w	801b988 <Resize_Frame+0x280>
 801b74e:	2b03      	cmp	r3, #3
  Top2Bottom=Image_CheckResizeMemoryLayout(srcImage, dstImage);
 801b750:	4649      	mov	r1, r9
 801b752:	4630      	mov	r0, r6
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 801b754:	bf0c      	ite	eq
 801b756:	f04f 0804 	moveq.w	r8, #4
 801b75a:	f04f 0800 	movne.w	r8, #0
  Top2Bottom=Image_CheckResizeMemoryLayout(srcImage, dstImage);
 801b75e:	f001 f8eb 	bl	801c938 <Image_CheckResizeMemoryLayout>
  if(Top2Bottom == 0)
 801b762:	b168      	cbz	r0, 801b780 <Resize_Frame+0x78>
  else if(Top2Bottom == 1)
 801b764:	2801      	cmp	r0, #1
 801b766:	f000 809b 	beq.w	801b8a0 <Resize_Frame+0x198>
}
 801b76a:	b007      	add	sp, #28
 801b76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 801b770:	f04f 0801 	mov.w	r8, #1
  Top2Bottom=Image_CheckResizeMemoryLayout(srcImage, dstImage);
 801b774:	4649      	mov	r1, r9
 801b776:	4630      	mov	r0, r6
 801b778:	f001 f8de 	bl	801c938 <Image_CheckResizeMemoryLayout>
  if(Top2Bottom == 0)
 801b77c:	2800      	cmp	r0, #0
 801b77e:	d1f1      	bne.n	801b764 <Resize_Frame+0x5c>
    for (int y=dstImage->height-1, i=(dstImage->width*dstImage->height*pixelSize -2  ); y>=0; y--)
 801b780:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b784:	9201      	str	r2, [sp, #4]
 801b786:	f1b3 0b01 	subs.w	fp, r3, #1
 801b78a:	fb02 f203 	mul.w	r2, r2, r3
 801b78e:	fb08 f202 	mul.w	r2, r8, r2
 801b792:	f1a2 0202 	sub.w	r2, r2, #2
 801b796:	9202      	str	r2, [sp, #8]
 801b798:	d4e7      	bmi.n	801b76a <Resize_Frame+0x62>
 801b79a:	9b04      	ldr	r3, [sp, #16]
 801b79c:	4642      	mov	r2, r8
 801b79e:	465d      	mov	r5, fp
 801b7a0:	fb0b f303 	mul.w	r3, fp, r3
 801b7a4:	9300      	str	r3, [sp, #0]
 801b7a6:	f1c8 0300 	rsb	r3, r8, #0
 801b7aa:	9305      	str	r3, [sp, #20]
      int sy = (y*y_ratio)>>16;
 801b7ac:	9b00      	ldr	r3, [sp, #0]
 801b7ae:	ea4f 4823 	mov.w	r8, r3, asr #16
      for (int x=dstImage->width-1; x>=0; x--, i-=pixelSize)
 801b7b2:	9b01      	ldr	r3, [sp, #4]
 801b7b4:	f1b3 0b01 	subs.w	fp, r3, #1
 801b7b8:	d463      	bmi.n	801b882 <Resize_Frame+0x17a>
 801b7ba:	fb0b fc0a 	mul.w	ip, fp, sl
 801b7be:	46de      	mov	lr, fp
 801b7c0:	f8cd b00c 	str.w	fp, [sp, #12]
 801b7c4:	46ab      	mov	fp, r5
 801b7c6:	9802      	ldr	r0, [sp, #8]
        int sx = (x*x_ratio)>>16;
 801b7c8:	ea4f 412c 	mov.w	r1, ip, asr #16
      for (int x=dstImage->width-1; x>=0; x--, i-=pixelSize)
 801b7cc:	f10e 3eff 	add.w	lr, lr, #4294967295
        for(int j=0; j<pixelSize; j++)
 801b7d0:	ebac 0c0a 	sub.w	ip, ip, sl
 801b7d4:	2a00      	cmp	r2, #0
 801b7d6:	d040      	beq.n	801b85a <Resize_Frame+0x152>
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801b7d8:	6835      	ldr	r5, [r6, #0]
        for(int j=0; j<pixelSize; j++)
 801b7da:	2a01      	cmp	r2, #1
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801b7dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 801b7e0:	4444      	add	r4, r8
 801b7e2:	fb05 3404 	mla	r4, r5, r4, r3
 801b7e6:	68b3      	ldr	r3, [r6, #8]
 801b7e8:	440c      	add	r4, r1
 801b7ea:	fb02 f404 	mul.w	r4, r2, r4
 801b7ee:	5d1b      	ldrb	r3, [r3, r4]
 801b7f0:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801b7f4:	5423      	strb	r3, [r4, r0]
        for(int j=0; j<pixelSize; j++)
 801b7f6:	d030      	beq.n	801b85a <Resize_Frame+0x152>
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801b7f8:	6835      	ldr	r5, [r6, #0]
        for(int j=0; j<pixelSize; j++)
 801b7fa:	2a02      	cmp	r2, #2
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801b7fc:	e9d7 3400 	ldrd	r3, r4, [r7]
 801b800:	4444      	add	r4, r8
 801b802:	fb05 3404 	mla	r4, r5, r4, r3
 801b806:	68b5      	ldr	r5, [r6, #8]
 801b808:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801b80c:	440c      	add	r4, r1
 801b80e:	4403      	add	r3, r0
 801b810:	fb02 5404 	mla	r4, r2, r4, r5
 801b814:	7864      	ldrb	r4, [r4, #1]
 801b816:	705c      	strb	r4, [r3, #1]
        for(int j=0; j<pixelSize; j++)
 801b818:	d01f      	beq.n	801b85a <Resize_Frame+0x152>
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801b81a:	6835      	ldr	r5, [r6, #0]
        for(int j=0; j<pixelSize; j++)
 801b81c:	2a04      	cmp	r2, #4
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801b81e:	e9d7 3400 	ldrd	r3, r4, [r7]
 801b822:	4444      	add	r4, r8
 801b824:	fb05 3404 	mla	r4, r5, r4, r3
 801b828:	68b5      	ldr	r5, [r6, #8]
 801b82a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801b82e:	440c      	add	r4, r1
 801b830:	4403      	add	r3, r0
 801b832:	fb02 5404 	mla	r4, r2, r4, r5
 801b836:	78a4      	ldrb	r4, [r4, #2]
 801b838:	709c      	strb	r4, [r3, #2]
        for(int j=0; j<pixelSize; j++)
 801b83a:	d10e      	bne.n	801b85a <Resize_Frame+0x152>
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801b83c:	6835      	ldr	r5, [r6, #0]
 801b83e:	e9d7 4300 	ldrd	r4, r3, [r7]
 801b842:	4443      	add	r3, r8
 801b844:	fb05 1303 	mla	r3, r5, r3, r1
 801b848:	68b1      	ldr	r1, [r6, #8]
 801b84a:	441c      	add	r4, r3
 801b84c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801b850:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801b854:	4403      	add	r3, r0
 801b856:	78e1      	ldrb	r1, [r4, #3]
 801b858:	70d9      	strb	r1, [r3, #3]
      for (int x=dstImage->width-1; x>=0; x--, i-=pixelSize)
 801b85a:	f1be 3fff 	cmp.w	lr, #4294967295
 801b85e:	eba0 0002 	sub.w	r0, r0, r2
 801b862:	d1b1      	bne.n	801b7c8 <Resize_Frame+0xc0>
 801b864:	9b01      	ldr	r3, [sp, #4]
 801b866:	465d      	mov	r5, fp
 801b868:	9905      	ldr	r1, [sp, #20]
 801b86a:	3b02      	subs	r3, #2
 801b86c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801b870:	3301      	adds	r3, #1
 801b872:	9b02      	ldr	r3, [sp, #8]
 801b874:	bfb8      	it	lt
 801b876:	f04f 0b00 	movlt.w	fp, #0
 801b87a:	1a9b      	subs	r3, r3, r2
 801b87c:	fb01 330b 	mla	r3, r1, fp, r3
 801b880:	9302      	str	r3, [sp, #8]
    for (int y=dstImage->height-1, i=(dstImage->width*dstImage->height*pixelSize -2  ); y>=0; y--)
 801b882:	9b00      	ldr	r3, [sp, #0]
 801b884:	3d01      	subs	r5, #1
 801b886:	9904      	ldr	r1, [sp, #16]
 801b888:	1a5b      	subs	r3, r3, r1
 801b88a:	9300      	str	r3, [sp, #0]
 801b88c:	1c6b      	adds	r3, r5, #1
 801b88e:	f43f af6c 	beq.w	801b76a <Resize_Frame+0x62>
      for (int x=dstImage->width-1; x>=0; x--, i-=pixelSize)
 801b892:	f8d9 3000 	ldr.w	r3, [r9]
 801b896:	9301      	str	r3, [sp, #4]
 801b898:	e788      	b.n	801b7ac <Resize_Frame+0xa4>
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 801b89a:	f04f 0802 	mov.w	r8, #2
 801b89e:	e769      	b.n	801b774 <Resize_Frame+0x6c>
    for (int y=0, i=0; y<dstImage->height; y++)
 801b8a0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	f43f af60 	beq.w	801b76a <Resize_Frame+0x62>
      for (int x=0; x<dstImage->width; x++, i+=pixelSize)
 801b8aa:	f04f 0b00 	mov.w	fp, #0
 801b8ae:	f8d9 0000 	ldr.w	r0, [r9]
    for (int y=0, i=0; y<dstImage->height; y++)
 801b8b2:	4642      	mov	r2, r8
 801b8b4:	46de      	mov	lr, fp
 801b8b6:	465d      	mov	r5, fp
 801b8b8:	f8cd b000 	str.w	fp, [sp]
 801b8bc:	46d3      	mov	fp, sl
      int sy = (y*y_ratio)>>16;
 801b8be:	ea4f 4a25 	mov.w	sl, r5, asr #16
      for (int x=0; x<dstImage->width; x++, i+=pixelSize)
 801b8c2:	2800      	cmp	r0, #0
 801b8c4:	f43f af51 	beq.w	801b76a <Resize_Frame+0x62>
 801b8c8:	f04f 0c00 	mov.w	ip, #0
 801b8cc:	46e0      	mov	r8, ip
        int sx = (x*x_ratio)>>16;
 801b8ce:	ea4f 412c 	mov.w	r1, ip, asr #16
      for (int x=0; x<dstImage->width; x++, i+=pixelSize)
 801b8d2:	f108 0801 	add.w	r8, r8, #1
 801b8d6:	44dc      	add	ip, fp
        for(int j=0; j<pixelSize; j++)
 801b8d8:	2a00      	cmp	r2, #0
 801b8da:	d046      	beq.n	801b96a <Resize_Frame+0x262>
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801b8dc:	6878      	ldr	r0, [r7, #4]
        for(int j=0; j<pixelSize; j++)
 801b8de:	2a01      	cmp	r2, #1
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801b8e0:	6834      	ldr	r4, [r6, #0]
 801b8e2:	683b      	ldr	r3, [r7, #0]
 801b8e4:	4450      	add	r0, sl
 801b8e6:	fb04 3300 	mla	r3, r4, r0, r3
 801b8ea:	68b4      	ldr	r4, [r6, #8]
 801b8ec:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801b8f0:	440b      	add	r3, r1
 801b8f2:	fb02 f303 	mul.w	r3, r2, r3
 801b8f6:	5ce3      	ldrb	r3, [r4, r3]
 801b8f8:	f800 300e 	strb.w	r3, [r0, lr]
        for(int j=0; j<pixelSize; j++)
 801b8fc:	d033      	beq.n	801b966 <Resize_Frame+0x25e>
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801b8fe:	687b      	ldr	r3, [r7, #4]
        for(int j=0; j<pixelSize; j++)
 801b900:	2a02      	cmp	r2, #2
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801b902:	6830      	ldr	r0, [r6, #0]
 801b904:	eb0a 0403 	add.w	r4, sl, r3
 801b908:	683b      	ldr	r3, [r7, #0]
 801b90a:	fb00 3304 	mla	r3, r0, r4, r3
 801b90e:	68b0      	ldr	r0, [r6, #8]
 801b910:	440b      	add	r3, r1
 801b912:	fb02 0003 	mla	r0, r2, r3, r0
 801b916:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801b91a:	7840      	ldrb	r0, [r0, #1]
 801b91c:	4473      	add	r3, lr
 801b91e:	7058      	strb	r0, [r3, #1]
        for(int j=0; j<pixelSize; j++)
 801b920:	d021      	beq.n	801b966 <Resize_Frame+0x25e>
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801b922:	687b      	ldr	r3, [r7, #4]
        for(int j=0; j<pixelSize; j++)
 801b924:	2a04      	cmp	r2, #4
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801b926:	6830      	ldr	r0, [r6, #0]
 801b928:	eb0a 0403 	add.w	r4, sl, r3
 801b92c:	683b      	ldr	r3, [r7, #0]
 801b92e:	fb00 3304 	mla	r3, r0, r4, r3
 801b932:	68b0      	ldr	r0, [r6, #8]
 801b934:	440b      	add	r3, r1
 801b936:	fb02 0003 	mla	r0, r2, r3, r0
 801b93a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801b93e:	7880      	ldrb	r0, [r0, #2]
 801b940:	4473      	add	r3, lr
 801b942:	7098      	strb	r0, [r3, #2]
        for(int j=0; j<pixelSize; j++)
 801b944:	d10f      	bne.n	801b966 <Resize_Frame+0x25e>
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	6830      	ldr	r0, [r6, #0]
 801b94a:	eb0a 0403 	add.w	r4, sl, r3
 801b94e:	68b3      	ldr	r3, [r6, #8]
 801b950:	fb00 1104 	mla	r1, r0, r4, r1
 801b954:	683c      	ldr	r4, [r7, #0]
 801b956:	440c      	add	r4, r1
 801b958:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801b95c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b960:	4471      	add	r1, lr
 801b962:	78e3      	ldrb	r3, [r4, #3]
 801b964:	70cb      	strb	r3, [r1, #3]
      for (int x=0; x<dstImage->width; x++, i+=pixelSize)
 801b966:	f8d9 0000 	ldr.w	r0, [r9]
 801b96a:	4580      	cmp	r8, r0
 801b96c:	4496      	add	lr, r2
 801b96e:	d3ae      	bcc.n	801b8ce <Resize_Frame+0x1c6>
    for (int y=0, i=0; y<dstImage->height; y++)
 801b970:	9b00      	ldr	r3, [sp, #0]
 801b972:	3301      	adds	r3, #1
 801b974:	4619      	mov	r1, r3
 801b976:	9300      	str	r3, [sp, #0]
 801b978:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b97c:	428b      	cmp	r3, r1
 801b97e:	f67f aef4 	bls.w	801b76a <Resize_Frame+0x62>
 801b982:	9b04      	ldr	r3, [sp, #16]
 801b984:	441d      	add	r5, r3
 801b986:	e79a      	b.n	801b8be <Resize_Frame+0x1b6>
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 801b988:	f04f 0803 	mov.w	r8, #3
 801b98c:	e6f2      	b.n	801b774 <Resize_Frame+0x6c>
 801b98e:	bf00      	nop

0801b990 <GetImageInfoBMP.part.0>:
 * @param height[in,out] pointer to the variable containing image height
 * @param bpp[in,out] pointer to the variable containing image number of bytes per pixel
 * @param rs[in,out] pointer to the bmp setting structure
 * @return stm32fs_err_t
 */
static stm32fs_err_t GetImageInfoBMP(FIL *File, uint32_t* width, uint32_t* height, uint32_t* bpp, bmp_read_settings_t *rs)
 801b990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b994:	b089      	sub	sp, #36	; 0x24
 801b996:	460f      	mov	r7, r1
 801b998:	4616      	mov	r6, r2
 801b99a:	461d      	mov	r5, r3
  {
    return STM32FS_ERROR_FILE_NOT_SUPPORTED;
  }

  uint32_t file_size;
  F_READ_SAFE(File, &file_size, sizeof(file_size));
 801b99c:	2204      	movs	r2, #4
 801b99e:	a904      	add	r1, sp, #16
 801b9a0:	ab07      	add	r3, sp, #28
static stm32fs_err_t GetImageInfoBMP(FIL *File, uint32_t* width, uint32_t* height, uint32_t* bpp, bmp_read_settings_t *rs)
 801b9a2:	4680      	mov	r8, r0
  F_READ_SAFE(File, &file_size, sizeof(file_size));
 801b9a4:	f7fe fd94 	bl	801a4d0 <f_read>
 801b9a8:	9c07      	ldr	r4, [sp, #28]
 801b9aa:	2c04      	cmp	r4, #4
 801b9ac:	d003      	beq.n	801b9b6 <GetImageInfoBMP.part.0+0x26>
    }
    if (header_type >= 108) { // Skip past the remaining BITMAPV4HEADER bytes.
      for (int i = 0; i < 13; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
    }
    if (header_type >= 124) { // Skip past the remaining BITMAPV5HEADER bytes.
      for (int i = 0; i < 4; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801b9ae:	2006      	movs	r0, #6
  if (data_size != (rs->bmp_row_bytes * (*height))) {
    return STM32FS_ERROR_FILE_NOT_SUPPORTED;
  }

  return STM32FS_ERROR_NONE;
}
 801b9b0:	b009      	add	sp, #36	; 0x24
 801b9b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  F_READ_SAFE(File, &ignore_16, sizeof(ignore_16));
 801b9b6:	2202      	movs	r2, #2
 801b9b8:	ab07      	add	r3, sp, #28
 801b9ba:	4640      	mov	r0, r8
 801b9bc:	a901      	add	r1, sp, #4
 801b9be:	f7fe fd87 	bl	801a4d0 <f_read>
 801b9c2:	9a07      	ldr	r2, [sp, #28]
 801b9c4:	2a02      	cmp	r2, #2
 801b9c6:	d1f2      	bne.n	801b9ae <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &ignore_16, sizeof(ignore_16));
 801b9c8:	ab07      	add	r3, sp, #28
 801b9ca:	a901      	add	r1, sp, #4
 801b9cc:	4640      	mov	r0, r8
 801b9ce:	f7fe fd7f 	bl	801a4d0 <f_read>
 801b9d2:	9b07      	ldr	r3, [sp, #28]
 801b9d4:	2b02      	cmp	r3, #2
 801b9d6:	d1ea      	bne.n	801b9ae <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &header_size, sizeof(header_size));
 801b9d8:	4622      	mov	r2, r4
 801b9da:	ab07      	add	r3, sp, #28
 801b9dc:	a905      	add	r1, sp, #20
 801b9de:	4640      	mov	r0, r8
 801b9e0:	f7fe fd76 	bl	801a4d0 <f_read>
 801b9e4:	9a07      	ldr	r2, [sp, #28]
 801b9e6:	2a04      	cmp	r2, #4
 801b9e8:	d1e1      	bne.n	801b9ae <GetImageInfoBMP.part.0+0x1e>
  if (file_size <= header_size){
 801b9ea:	e9dd 1404 	ldrd	r1, r4, [sp, #16]
 801b9ee:	42a1      	cmp	r1, r4
 801b9f0:	d969      	bls.n	801bac6 <GetImageInfoBMP.part.0+0x136>
  uint32_t data_size = file_size - header_size;
 801b9f2:	1b0c      	subs	r4, r1, r4
  if (data_size % 4) {
 801b9f4:	07a3      	lsls	r3, r4, #30
 801b9f6:	d166      	bne.n	801bac6 <GetImageInfoBMP.part.0+0x136>
  F_READ_SAFE(File, &header_type, sizeof(header_type));
 801b9f8:	ab07      	add	r3, sp, #28
 801b9fa:	a906      	add	r1, sp, #24
 801b9fc:	4640      	mov	r0, r8
 801b9fe:	f7fe fd67 	bl	801a4d0 <f_read>
 801ba02:	9b07      	ldr	r3, [sp, #28]
 801ba04:	2b04      	cmp	r3, #4
 801ba06:	d1d2      	bne.n	801b9ae <GetImageInfoBMP.part.0+0x1e>
      && (header_type != 52) // BITMAPV2INFOHEADER
 801ba08:	9a06      	ldr	r2, [sp, #24]
 801ba0a:	f022 0310 	bic.w	r3, r2, #16
      && (header_type != 124)) {
 801ba0e:	2b6c      	cmp	r3, #108	; 0x6c
 801ba10:	bf18      	it	ne
 801ba12:	2b28      	cmpne	r3, #40	; 0x28
 801ba14:	d001      	beq.n	801ba1a <GetImageInfoBMP.part.0+0x8a>
 801ba16:	2a34      	cmp	r2, #52	; 0x34
 801ba18:	d155      	bne.n	801bac6 <GetImageInfoBMP.part.0+0x136>
  F_READ_SAFE(File, &rs->bmp_w, sizeof(rs->bmp_w));
 801ba1a:	2204      	movs	r2, #4
 801ba1c:	ab07      	add	r3, sp, #28
 801ba1e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ba20:	4640      	mov	r0, r8
 801ba22:	f7fe fd55 	bl	801a4d0 <f_read>
 801ba26:	9a07      	ldr	r2, [sp, #28]
 801ba28:	2a04      	cmp	r2, #4
 801ba2a:	d1c0      	bne.n	801b9ae <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &rs->bmp_h, sizeof(rs->bmp_w));
 801ba2c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ba2e:	ab07      	add	r3, sp, #28
 801ba30:	4640      	mov	r0, r8
 801ba32:	3104      	adds	r1, #4
 801ba34:	f7fe fd4c 	bl	801a4d0 <f_read>
 801ba38:	9b07      	ldr	r3, [sp, #28]
 801ba3a:	2b04      	cmp	r3, #4
 801ba3c:	d1b7      	bne.n	801b9ae <GetImageInfoBMP.part.0+0x1e>
  if ((rs->bmp_w == 0) || (rs->bmp_h == 0)){
 801ba3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d03f      	beq.n	801bac6 <GetImageInfoBMP.part.0+0x136>
 801ba46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ba48:	6852      	ldr	r2, [r2, #4]
 801ba4a:	2a00      	cmp	r2, #0
 801ba4c:	d03b      	beq.n	801bac6 <GetImageInfoBMP.part.0+0x136>
  *width = abs(rs->bmp_w);
 801ba4e:	2b00      	cmp	r3, #0
  F_READ_SAFE(File, &tmp_16, sizeof(tmp_16));
 801ba50:	f04f 0202 	mov.w	r2, #2
 801ba54:	f10d 0106 	add.w	r1, sp, #6
 801ba58:	4640      	mov	r0, r8
  *width = abs(rs->bmp_w);
 801ba5a:	bfb8      	it	lt
 801ba5c:	425b      	neglt	r3, r3
 801ba5e:	603b      	str	r3, [r7, #0]
  *height = abs(rs->bmp_h);
 801ba60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba62:	685b      	ldr	r3, [r3, #4]
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	bfb8      	it	lt
 801ba68:	425b      	neglt	r3, r3
 801ba6a:	6033      	str	r3, [r6, #0]
  F_READ_SAFE(File, &tmp_16, sizeof(tmp_16));
 801ba6c:	ab07      	add	r3, sp, #28
 801ba6e:	f7fe fd2f 	bl	801a4d0 <f_read>
 801ba72:	9a07      	ldr	r2, [sp, #28]
 801ba74:	2a02      	cmp	r2, #2
 801ba76:	d19a      	bne.n	801b9ae <GetImageInfoBMP.part.0+0x1e>
  if (tmp_16 != 1){
 801ba78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801ba7c:	2b01      	cmp	r3, #1
 801ba7e:	d122      	bne.n	801bac6 <GetImageInfoBMP.part.0+0x136>
  F_READ_SAFE(File, &rs->bmp_bpp, sizeof(rs->bmp_bpp));
 801ba80:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ba82:	ab07      	add	r3, sp, #28
 801ba84:	4640      	mov	r0, r8
 801ba86:	3108      	adds	r1, #8
 801ba88:	f7fe fd22 	bl	801a4d0 <f_read>
 801ba8c:	9b07      	ldr	r3, [sp, #28]
 801ba8e:	2b02      	cmp	r3, #2
 801ba90:	d18d      	bne.n	801b9ae <GetImageInfoBMP.part.0+0x1e>
  if ((rs->bmp_bpp != 8) && (rs->bmp_bpp != 16) && (rs->bmp_bpp != 24)){
 801ba92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ba94:	8912      	ldrh	r2, [r2, #8]
 801ba96:	2a08      	cmp	r2, #8
 801ba98:	d066      	beq.n	801bb68 <GetImageInfoBMP.part.0+0x1d8>
 801ba9a:	2a10      	cmp	r2, #16
 801ba9c:	d05e      	beq.n	801bb5c <GetImageInfoBMP.part.0+0x1cc>
 801ba9e:	2a18      	cmp	r2, #24
 801baa0:	d111      	bne.n	801bac6 <GetImageInfoBMP.part.0+0x136>
  *bpp = (rs->bmp_bpp == 8)  ? 1 :
 801baa2:	2303      	movs	r3, #3
  F_READ_SAFE(File, &rs->bmp_fmt, sizeof(rs->bmp_fmt));
 801baa4:	9910      	ldr	r1, [sp, #64]	; 0x40
 801baa6:	2204      	movs	r2, #4
  *bpp = (rs->bmp_bpp == 8)  ? 1 :
 801baa8:	602b      	str	r3, [r5, #0]
  F_READ_SAFE(File, &rs->bmp_fmt, sizeof(rs->bmp_fmt));
 801baaa:	4640      	mov	r0, r8
 801baac:	ab07      	add	r3, sp, #28
 801baae:	310c      	adds	r1, #12
 801bab0:	f7fe fd0e 	bl	801a4d0 <f_read>
 801bab4:	9b07      	ldr	r3, [sp, #28]
 801bab6:	2b04      	cmp	r3, #4
 801bab8:	f47f af79 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
  if ((rs->bmp_fmt != 0) && (rs->bmp_fmt != 3)){
 801babc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801babe:	68db      	ldr	r3, [r3, #12]
 801bac0:	b11b      	cbz	r3, 801baca <GetImageInfoBMP.part.0+0x13a>
 801bac2:	2b03      	cmp	r3, #3
 801bac4:	d001      	beq.n	801baca <GetImageInfoBMP.part.0+0x13a>
    return STM32FS_ERROR_FILE_NOT_SUPPORTED;
 801bac6:	2005      	movs	r0, #5
 801bac8:	e772      	b.n	801b9b0 <GetImageInfoBMP.part.0+0x20>
  F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801baca:	2204      	movs	r2, #4
 801bacc:	ab07      	add	r3, sp, #28
 801bace:	4640      	mov	r0, r8
 801bad0:	a903      	add	r1, sp, #12
 801bad2:	f7fe fcfd 	bl	801a4d0 <f_read>
 801bad6:	9a07      	ldr	r2, [sp, #28]
 801bad8:	2a04      	cmp	r2, #4
 801bada:	f47f af68 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
  if (tmp_32 != data_size){
 801bade:	9b03      	ldr	r3, [sp, #12]
 801bae0:	429c      	cmp	r4, r3
 801bae2:	d1f0      	bne.n	801bac6 <GetImageInfoBMP.part.0+0x136>
  F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801bae4:	ab07      	add	r3, sp, #28
 801bae6:	4640      	mov	r0, r8
 801bae8:	a902      	add	r1, sp, #8
 801baea:	f7fe fcf1 	bl	801a4d0 <f_read>
 801baee:	9a07      	ldr	r2, [sp, #28]
 801baf0:	2a04      	cmp	r2, #4
 801baf2:	f47f af5c 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801baf6:	ab07      	add	r3, sp, #28
 801baf8:	a902      	add	r1, sp, #8
 801bafa:	4640      	mov	r0, r8
 801bafc:	f7fe fce8 	bl	801a4d0 <f_read>
 801bb00:	9a07      	ldr	r2, [sp, #28]
 801bb02:	2a04      	cmp	r2, #4
 801bb04:	f47f af53 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801bb08:	ab07      	add	r3, sp, #28
 801bb0a:	a902      	add	r1, sp, #8
 801bb0c:	4640      	mov	r0, r8
 801bb0e:	f7fe fcdf 	bl	801a4d0 <f_read>
 801bb12:	9a07      	ldr	r2, [sp, #28]
 801bb14:	2a04      	cmp	r2, #4
 801bb16:	f47f af4a 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801bb1a:	ab07      	add	r3, sp, #28
 801bb1c:	a902      	add	r1, sp, #8
 801bb1e:	4640      	mov	r0, r8
 801bb20:	f7fe fcd6 	bl	801a4d0 <f_read>
 801bb24:	9d07      	ldr	r5, [sp, #28]
 801bb26:	2d04      	cmp	r5, #4
 801bb28:	f47f af41 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
  if (rs->bmp_bpp == 8) {
 801bb2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb2e:	891b      	ldrh	r3, [r3, #8]
 801bb30:	2b08      	cmp	r3, #8
 801bb32:	f000 80ad 	beq.w	801bc90 <GetImageInfoBMP.part.0+0x300>
  } else if (rs->bmp_bpp == 16) {
 801bb36:	2b10      	cmp	r3, #16
 801bb38:	d04b      	beq.n	801bbd2 <GetImageInfoBMP.part.0+0x242>
  } else if (rs->bmp_bpp == 24) {
 801bb3a:	2b18      	cmp	r3, #24
 801bb3c:	d016      	beq.n	801bb6c <GetImageInfoBMP.part.0+0x1dc>
  rs->bmp_row_bytes = ((( (*width) * rs->bmp_bpp) + 31) / 32) * 4;
 801bb3e:	683a      	ldr	r2, [r7, #0]
 801bb40:	fb02 f303 	mul.w	r3, r2, r3
 801bb44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bb46:	331f      	adds	r3, #31
 801bb48:	095b      	lsrs	r3, r3, #5
 801bb4a:	009b      	lsls	r3, r3, #2
 801bb4c:	6113      	str	r3, [r2, #16]
  if (data_size != (rs->bmp_row_bytes * (*height))) {
 801bb4e:	6832      	ldr	r2, [r6, #0]
 801bb50:	fb02 f303 	mul.w	r3, r2, r3
 801bb54:	429c      	cmp	r4, r3
 801bb56:	d1b6      	bne.n	801bac6 <GetImageInfoBMP.part.0+0x136>
  return STM32FS_ERROR_NONE;
 801bb58:	2000      	movs	r0, #0
 801bb5a:	e729      	b.n	801b9b0 <GetImageInfoBMP.part.0+0x20>
  *bpp = (rs->bmp_bpp == 8)  ? 1 :
 801bb5c:	2a08      	cmp	r2, #8
 801bb5e:	d003      	beq.n	801bb68 <GetImageInfoBMP.part.0+0x1d8>
 801bb60:	2a10      	cmp	r2, #16
 801bb62:	bf18      	it	ne
 801bb64:	2303      	movne	r3, #3
 801bb66:	e79d      	b.n	801baa4 <GetImageInfoBMP.part.0+0x114>
 801bb68:	2301      	movs	r3, #1
 801bb6a:	e79b      	b.n	801baa4 <GetImageInfoBMP.part.0+0x114>
    if (rs->bmp_fmt == 3) {
 801bb6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb6e:	68db      	ldr	r3, [r3, #12]
 801bb70:	2b03      	cmp	r3, #3
 801bb72:	f000 80d7 	beq.w	801bd24 <GetImageInfoBMP.part.0+0x394>
    } else if (header_type >= 52) { // Skip past the remaining BITMAPV2INFOHEADER bytes.
 801bb76:	9b06      	ldr	r3, [sp, #24]
 801bb78:	2b33      	cmp	r3, #51	; 0x33
 801bb7a:	d90f      	bls.n	801bb9c <GetImageInfoBMP.part.0+0x20c>
 801bb7c:	f04f 0903 	mov.w	r9, #3
      for (int i = 0; i < 3; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801bb80:	ab07      	add	r3, sp, #28
 801bb82:	2204      	movs	r2, #4
 801bb84:	a902      	add	r1, sp, #8
 801bb86:	4640      	mov	r0, r8
 801bb88:	f7fe fca2 	bl	801a4d0 <f_read>
 801bb8c:	9b07      	ldr	r3, [sp, #28]
 801bb8e:	2b04      	cmp	r3, #4
 801bb90:	f47f af0d 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
 801bb94:	f1b9 0901 	subs.w	r9, r9, #1
 801bb98:	d1f2      	bne.n	801bb80 <GetImageInfoBMP.part.0+0x1f0>
 801bb9a:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 56) { // Skip past the remaining BITMAPV3INFOHEADER bytes.
 801bb9c:	2b37      	cmp	r3, #55	; 0x37
 801bb9e:	f200 80ec 	bhi.w	801bd7a <GetImageInfoBMP.part.0+0x3ea>
    if (header_type >= 108) { // Skip past the remaining BITMAPV4HEADER bytes.
 801bba2:	2b6b      	cmp	r3, #107	; 0x6b
 801bba4:	d90f      	bls.n	801bbc6 <GetImageInfoBMP.part.0+0x236>
 801bba6:	f04f 090d 	mov.w	r9, #13
      for (int i = 0; i < 13; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801bbaa:	ab07      	add	r3, sp, #28
 801bbac:	2204      	movs	r2, #4
 801bbae:	a902      	add	r1, sp, #8
 801bbb0:	4640      	mov	r0, r8
 801bbb2:	f7fe fc8d 	bl	801a4d0 <f_read>
 801bbb6:	9b07      	ldr	r3, [sp, #28]
 801bbb8:	2b04      	cmp	r3, #4
 801bbba:	f47f aef8 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
 801bbbe:	f1b9 0901 	subs.w	r9, r9, #1
 801bbc2:	d1f2      	bne.n	801bbaa <GetImageInfoBMP.part.0+0x21a>
 801bbc4:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 124) { // Skip past the remaining BITMAPV5HEADER bytes.
 801bbc6:	2b7b      	cmp	r3, #123	; 0x7b
 801bbc8:	f200 80e3 	bhi.w	801bd92 <GetImageInfoBMP.part.0+0x402>
 801bbcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bbce:	891b      	ldrh	r3, [r3, #8]
 801bbd0:	e7b5      	b.n	801bb3e <GetImageInfoBMP.part.0+0x1ae>
    if (rs->bmp_fmt != 3) return STM32FS_ERROR_FILE_NOT_SUPPORTED;
 801bbd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bbd4:	68db      	ldr	r3, [r3, #12]
 801bbd6:	2b03      	cmp	r3, #3
 801bbd8:	f47f af75 	bne.w	801bac6 <GetImageInfoBMP.part.0+0x136>
    F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801bbdc:	ab07      	add	r3, sp, #28
 801bbde:	462a      	mov	r2, r5
 801bbe0:	a903      	add	r1, sp, #12
 801bbe2:	4640      	mov	r0, r8
 801bbe4:	f7fe fc74 	bl	801a4d0 <f_read>
 801bbe8:	9b07      	ldr	r3, [sp, #28]
 801bbea:	2b04      	cmp	r3, #4
 801bbec:	f47f aedf 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
    if( tmp_32 != expect ) {
 801bbf0:	9b03      	ldr	r3, [sp, #12]
 801bbf2:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 801bbf6:	f47f af66 	bne.w	801bac6 <GetImageInfoBMP.part.0+0x136>
    F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801bbfa:	2204      	movs	r2, #4
 801bbfc:	ab07      	add	r3, sp, #28
 801bbfe:	a903      	add	r1, sp, #12
 801bc00:	4640      	mov	r0, r8
 801bc02:	f7fe fc65 	bl	801a4d0 <f_read>
 801bc06:	9a07      	ldr	r2, [sp, #28]
 801bc08:	2a04      	cmp	r2, #4
 801bc0a:	f47f aed0 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
    if( tmp_32 != expect ) {
 801bc0e:	9b03      	ldr	r3, [sp, #12]
 801bc10:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 801bc14:	f47f af57 	bne.w	801bac6 <GetImageInfoBMP.part.0+0x136>
    F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801bc18:	a903      	add	r1, sp, #12
 801bc1a:	ab07      	add	r3, sp, #28
 801bc1c:	4640      	mov	r0, r8
 801bc1e:	f7fe fc57 	bl	801a4d0 <f_read>
 801bc22:	9d07      	ldr	r5, [sp, #28]
 801bc24:	2d04      	cmp	r5, #4
 801bc26:	f47f aec2 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
    if( tmp_32 != expect ) {
 801bc2a:	9b03      	ldr	r3, [sp, #12]
 801bc2c:	2b1f      	cmp	r3, #31
 801bc2e:	f47f af4a 	bne.w	801bac6 <GetImageInfoBMP.part.0+0x136>
    if (header_type >= 56) { // Skip past the remaining BITMAPV3INFOHEADER bytes.
 801bc32:	9b06      	ldr	r3, [sp, #24]
 801bc34:	2b37      	cmp	r3, #55	; 0x37
 801bc36:	d90a      	bls.n	801bc4e <GetImageInfoBMP.part.0+0x2be>
      for (int i = 0; i < 1; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801bc38:	ab07      	add	r3, sp, #28
 801bc3a:	462a      	mov	r2, r5
 801bc3c:	a902      	add	r1, sp, #8
 801bc3e:	4640      	mov	r0, r8
 801bc40:	f7fe fc46 	bl	801a4d0 <f_read>
 801bc44:	9b07      	ldr	r3, [sp, #28]
 801bc46:	2b04      	cmp	r3, #4
 801bc48:	f47f aeb1 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
 801bc4c:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 108) { // Skip past the remaining BITMAPV4HEADER bytes.
 801bc4e:	2b6b      	cmp	r3, #107	; 0x6b
 801bc50:	d90f      	bls.n	801bc72 <GetImageInfoBMP.part.0+0x2e2>
 801bc52:	f04f 090d 	mov.w	r9, #13
      for (int i = 0; i < 13; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801bc56:	ab07      	add	r3, sp, #28
 801bc58:	2204      	movs	r2, #4
 801bc5a:	a902      	add	r1, sp, #8
 801bc5c:	4640      	mov	r0, r8
 801bc5e:	f7fe fc37 	bl	801a4d0 <f_read>
 801bc62:	9b07      	ldr	r3, [sp, #28]
 801bc64:	2b04      	cmp	r3, #4
 801bc66:	f47f aea2 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
 801bc6a:	f1b9 0901 	subs.w	r9, r9, #1
 801bc6e:	d1f2      	bne.n	801bc56 <GetImageInfoBMP.part.0+0x2c6>
 801bc70:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 124) { // Skip past the remaining BITMAPV5HEADER bytes.
 801bc72:	2b7b      	cmp	r3, #123	; 0x7b
 801bc74:	d9aa      	bls.n	801bbcc <GetImageInfoBMP.part.0+0x23c>
      for (int i = 0; i < 4; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801bc76:	ab07      	add	r3, sp, #28
 801bc78:	2204      	movs	r2, #4
 801bc7a:	a902      	add	r1, sp, #8
 801bc7c:	4640      	mov	r0, r8
 801bc7e:	f7fe fc27 	bl	801a4d0 <f_read>
 801bc82:	9b07      	ldr	r3, [sp, #28]
 801bc84:	2b04      	cmp	r3, #4
 801bc86:	f47f ae92 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
 801bc8a:	3d01      	subs	r5, #1
 801bc8c:	d1f3      	bne.n	801bc76 <GetImageInfoBMP.part.0+0x2e6>
 801bc8e:	e79d      	b.n	801bbcc <GetImageInfoBMP.part.0+0x23c>
    if (rs->bmp_fmt != 0) return STM32FS_ERROR_FILE_NOT_SUPPORTED;
 801bc90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc92:	68db      	ldr	r3, [r3, #12]
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	f47f af16 	bne.w	801bac6 <GetImageInfoBMP.part.0+0x136>
    if (header_type >= 52) { // Skip past the remaining BITMAPV2INFOHEADER bytes.
 801bc9a:	9b06      	ldr	r3, [sp, #24]
 801bc9c:	2b33      	cmp	r3, #51	; 0x33
 801bc9e:	d90f      	bls.n	801bcc0 <GetImageInfoBMP.part.0+0x330>
 801bca0:	f04f 0903 	mov.w	r9, #3
      for (int i = 0; i < 3; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801bca4:	ab07      	add	r3, sp, #28
 801bca6:	2204      	movs	r2, #4
 801bca8:	a902      	add	r1, sp, #8
 801bcaa:	4640      	mov	r0, r8
 801bcac:	f7fe fc10 	bl	801a4d0 <f_read>
 801bcb0:	9b07      	ldr	r3, [sp, #28]
 801bcb2:	2b04      	cmp	r3, #4
 801bcb4:	f47f ae7b 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
 801bcb8:	f1b9 0901 	subs.w	r9, r9, #1
 801bcbc:	d1f2      	bne.n	801bca4 <GetImageInfoBMP.part.0+0x314>
 801bcbe:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 56) { // Skip past the remaining BITMAPV3INFOHEADER bytes.
 801bcc0:	2b37      	cmp	r3, #55	; 0x37
 801bcc2:	d873      	bhi.n	801bdac <GetImageInfoBMP.part.0+0x41c>
    if (header_type >= 108) { // Skip past the remaining BITMAPV4HEADER bytes.
 801bcc4:	2b6b      	cmp	r3, #107	; 0x6b
 801bcc6:	d90f      	bls.n	801bce8 <GetImageInfoBMP.part.0+0x358>
 801bcc8:	f04f 090d 	mov.w	r9, #13
      for (int i = 0; i < 13; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801bccc:	ab07      	add	r3, sp, #28
 801bcce:	2204      	movs	r2, #4
 801bcd0:	a902      	add	r1, sp, #8
 801bcd2:	4640      	mov	r0, r8
 801bcd4:	f7fe fbfc 	bl	801a4d0 <f_read>
 801bcd8:	9b07      	ldr	r3, [sp, #28]
 801bcda:	2b04      	cmp	r3, #4
 801bcdc:	f47f ae67 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
 801bce0:	f1b9 0901 	subs.w	r9, r9, #1
 801bce4:	d1f2      	bne.n	801bccc <GetImageInfoBMP.part.0+0x33c>
 801bce6:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 124) { // Skip past the remaining BITMAPV5HEADER bytes.
 801bce8:	2b7b      	cmp	r3, #123	; 0x7b
 801bcea:	d86b      	bhi.n	801bdc4 <GetImageInfoBMP.part.0+0x434>
 801bcec:	2500      	movs	r5, #0
 801bcee:	e007      	b.n	801bd00 <GetImageInfoBMP.part.0+0x370>
      if( tmp_32 != expect ) {
 801bcf0:	9b03      	ldr	r3, [sp, #12]
 801bcf2:	4599      	cmp	r9, r3
 801bcf4:	f47f aee7 	bne.w	801bac6 <GetImageInfoBMP.part.0+0x136>
    for (int i = 0; i < 256; i++) {
 801bcf8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801bcfc:	f43f af66 	beq.w	801bbcc <GetImageInfoBMP.part.0+0x23c>
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801bd00:	ab07      	add	r3, sp, #28
 801bd02:	2204      	movs	r2, #4
 801bd04:	a903      	add	r1, sp, #12
 801bd06:	4640      	mov	r0, r8
      expect = ((i) << 16) | ((i) << 8) | i;
 801bd08:	ea4f 2905 	mov.w	r9, r5, lsl #8
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801bd0c:	f7fe fbe0 	bl	801a4d0 <f_read>
 801bd10:	9b07      	ldr	r3, [sp, #28]
      expect = ((i) << 16) | ((i) << 8) | i;
 801bd12:	ea49 4905 	orr.w	r9, r9, r5, lsl #16
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801bd16:	2b04      	cmp	r3, #4
      expect = ((i) << 16) | ((i) << 8) | i;
 801bd18:	ea49 0905 	orr.w	r9, r9, r5
    for (int i = 0; i < 256; i++) {
 801bd1c:	f105 0501 	add.w	r5, r5, #1
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801bd20:	d0e6      	beq.n	801bcf0 <GetImageInfoBMP.part.0+0x360>
 801bd22:	e644      	b.n	801b9ae <GetImageInfoBMP.part.0+0x1e>
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801bd24:	2204      	movs	r2, #4
 801bd26:	ab07      	add	r3, sp, #28
 801bd28:	a903      	add	r1, sp, #12
 801bd2a:	4640      	mov	r0, r8
 801bd2c:	f7fe fbd0 	bl	801a4d0 <f_read>
 801bd30:	9a07      	ldr	r2, [sp, #28]
 801bd32:	2a04      	cmp	r2, #4
 801bd34:	f47f ae3b 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
      if( tmp_32 != expect ) {
 801bd38:	9b03      	ldr	r3, [sp, #12]
 801bd3a:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 801bd3e:	f47f aec2 	bne.w	801bac6 <GetImageInfoBMP.part.0+0x136>
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801bd42:	ab07      	add	r3, sp, #28
 801bd44:	a903      	add	r1, sp, #12
 801bd46:	4640      	mov	r0, r8
 801bd48:	f7fe fbc2 	bl	801a4d0 <f_read>
 801bd4c:	9a07      	ldr	r2, [sp, #28]
 801bd4e:	2a04      	cmp	r2, #4
 801bd50:	f47f ae2d 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
      if( tmp_32 != expect ) {
 801bd54:	9b03      	ldr	r3, [sp, #12]
 801bd56:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 801bd5a:	f47f aeb4 	bne.w	801bac6 <GetImageInfoBMP.part.0+0x136>
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801bd5e:	ab07      	add	r3, sp, #28
 801bd60:	a903      	add	r1, sp, #12
 801bd62:	4640      	mov	r0, r8
 801bd64:	f7fe fbb4 	bl	801a4d0 <f_read>
 801bd68:	9b07      	ldr	r3, [sp, #28]
 801bd6a:	2b04      	cmp	r3, #4
 801bd6c:	f47f ae1f 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
      if( tmp_32 != expect ) {
 801bd70:	9b03      	ldr	r3, [sp, #12]
 801bd72:	2bff      	cmp	r3, #255	; 0xff
 801bd74:	f43f af11 	beq.w	801bb9a <GetImageInfoBMP.part.0+0x20a>
 801bd78:	e6a5      	b.n	801bac6 <GetImageInfoBMP.part.0+0x136>
      for (int i = 0; i < 1; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801bd7a:	ab07      	add	r3, sp, #28
 801bd7c:	2204      	movs	r2, #4
 801bd7e:	a902      	add	r1, sp, #8
 801bd80:	4640      	mov	r0, r8
 801bd82:	f7fe fba5 	bl	801a4d0 <f_read>
 801bd86:	9b07      	ldr	r3, [sp, #28]
 801bd88:	2b04      	cmp	r3, #4
 801bd8a:	f47f ae10 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
 801bd8e:	9b06      	ldr	r3, [sp, #24]
 801bd90:	e707      	b.n	801bba2 <GetImageInfoBMP.part.0+0x212>
      for (int i = 0; i < 4; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801bd92:	ab07      	add	r3, sp, #28
 801bd94:	2204      	movs	r2, #4
 801bd96:	a902      	add	r1, sp, #8
 801bd98:	4640      	mov	r0, r8
 801bd9a:	f7fe fb99 	bl	801a4d0 <f_read>
 801bd9e:	9b07      	ldr	r3, [sp, #28]
 801bda0:	2b04      	cmp	r3, #4
 801bda2:	f47f ae04 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
 801bda6:	3d01      	subs	r5, #1
 801bda8:	d1f3      	bne.n	801bd92 <GetImageInfoBMP.part.0+0x402>
 801bdaa:	e70f      	b.n	801bbcc <GetImageInfoBMP.part.0+0x23c>
      for (int i = 0; i < 1; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801bdac:	ab07      	add	r3, sp, #28
 801bdae:	2204      	movs	r2, #4
 801bdb0:	a902      	add	r1, sp, #8
 801bdb2:	4640      	mov	r0, r8
 801bdb4:	f7fe fb8c 	bl	801a4d0 <f_read>
 801bdb8:	9b07      	ldr	r3, [sp, #28]
 801bdba:	2b04      	cmp	r3, #4
 801bdbc:	f47f adf7 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
 801bdc0:	9b06      	ldr	r3, [sp, #24]
 801bdc2:	e77f      	b.n	801bcc4 <GetImageInfoBMP.part.0+0x334>
      for (int i = 0; i < 4; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801bdc4:	ab07      	add	r3, sp, #28
 801bdc6:	2204      	movs	r2, #4
 801bdc8:	a902      	add	r1, sp, #8
 801bdca:	4640      	mov	r0, r8
 801bdcc:	f7fe fb80 	bl	801a4d0 <f_read>
 801bdd0:	9b07      	ldr	r3, [sp, #28]
 801bdd2:	2b04      	cmp	r3, #4
 801bdd4:	f47f adeb 	bne.w	801b9ae <GetImageInfoBMP.part.0+0x1e>
 801bdd8:	3d01      	subs	r5, #1
 801bdda:	d1f3      	bne.n	801bdc4 <GetImageInfoBMP.part.0+0x434>
 801bddc:	e786      	b.n	801bcec <GetImageInfoBMP.part.0+0x35c>
 801bdde:	bf00      	nop

0801bde0 <STM32Fs_Init>:
{
 801bde0:	b510      	push	{r4, lr}
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 801bde2:	4909      	ldr	r1, [pc, #36]	; (801be08 <STM32Fs_Init+0x28>)
 801bde4:	4809      	ldr	r0, [pc, #36]	; (801be0c <STM32Fs_Init+0x2c>)
 801bde6:	f7ff fb5f 	bl	801b4a8 <FATFS_LinkDriver>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 801bdea:	2200      	movs	r2, #0
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 801bdec:	4604      	mov	r4, r0
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 801bdee:	4906      	ldr	r1, [pc, #24]	; (801be08 <STM32Fs_Init+0x28>)
 801bdf0:	4807      	ldr	r0, [pc, #28]	; (801be10 <STM32Fs_Init+0x30>)
  stm32fs_err_t ret = STM32FS_ERROR_NONE;
 801bdf2:	1aa4      	subs	r4, r4, r2
 801bdf4:	bf18      	it	ne
 801bdf6:	2401      	movne	r4, #1
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 801bdf8:	f7fe f93a 	bl	801a070 <f_mount>
    return STM32FS_ERROR_MOUNT_FS_FAIL;
 801bdfc:	2800      	cmp	r0, #0
}
 801bdfe:	bf0c      	ite	eq
 801be00:	4620      	moveq	r0, r4
 801be02:	2002      	movne	r0, #2
 801be04:	bd10      	pop	{r4, pc}
 801be06:	bf00      	nop
 801be08:	2400a5d8 	.word	0x2400a5d8
 801be0c:	080bf4d8 	.word	0x080bf4d8
 801be10:	2400a3a4 	.word	0x2400a3a4

0801be14 <STM32Fs_GetNumberFiles>:
{
 801be14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be18:	b08e      	sub	sp, #56	; 0x38
 801be1a:	460f      	mov	r7, r1
  res = f_opendir(&dir, path); /* Open the directory */
 801be1c:	4601      	mov	r1, r0
{
 801be1e:	4690      	mov	r8, r2
  res = f_opendir(&dir, path); /* Open the directory */
 801be20:	a801      	add	r0, sp, #4
 801be22:	f7fe fe73 	bl	801ab0c <f_opendir>
  if (res == FR_OK)
 801be26:	bb20      	cbnz	r0, 801be72 <STM32Fs_GetNumberFiles+0x5e>
  uint32_t file_counter = 0;
 801be28:	4605      	mov	r5, r0
  uint32_t dir_counter = 0;
 801be2a:	4606      	mov	r6, r0
 801be2c:	4c13      	ldr	r4, [pc, #76]	; (801be7c <STM32Fs_GetNumberFiles+0x68>)
 801be2e:	e006      	b.n	801be3e <STM32Fs_GetNumberFiles+0x2a>
      if (res != FR_OK || fno.fname[0] == 0) break; /* Break on error or end of dir */
 801be30:	7da3      	ldrb	r3, [r4, #22]
 801be32:	b153      	cbz	r3, 801be4a <STM32Fs_GetNumberFiles+0x36>
      if (fno.fattrib & AM_DIR)
 801be34:	7a23      	ldrb	r3, [r4, #8]
 801be36:	06db      	lsls	r3, r3, #27
        dir_counter++;
 801be38:	bf4c      	ite	mi
 801be3a:	3601      	addmi	r6, #1
        file_counter++;
 801be3c:	3501      	addpl	r5, #1
      res = f_readdir(&dir, &fno);                  /* Read a directory item */
 801be3e:	4621      	mov	r1, r4
 801be40:	a801      	add	r0, sp, #4
 801be42:	f7fe fefd 	bl	801ac40 <f_readdir>
      if (res != FR_OK || fno.fname[0] == 0) break; /* Break on error or end of dir */
 801be46:	2800      	cmp	r0, #0
 801be48:	d0f2      	beq.n	801be30 <STM32Fs_GetNumberFiles+0x1c>
    f_closedir(&dir);
 801be4a:	a801      	add	r0, sp, #4
 801be4c:	f7fe fec4 	bl	801abd8 <f_closedir>
    *nbr += dir_counter;
 801be50:	f018 0f02 	tst.w	r8, #2
 801be54:	bf08      	it	eq
 801be56:	2600      	moveq	r6, #0
  if (mode & STM32FS_COUNT_FILES)
 801be58:	f018 0001 	ands.w	r0, r8, #1
 801be5c:	d103      	bne.n	801be66 <STM32Fs_GetNumberFiles+0x52>
 801be5e:	603e      	str	r6, [r7, #0]
}
 801be60:	b00e      	add	sp, #56	; 0x38
 801be62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *nbr += file_counter;
 801be66:	4435      	add	r5, r6
  return STM32FS_ERROR_NONE;
 801be68:	2000      	movs	r0, #0
    *nbr += file_counter;
 801be6a:	603d      	str	r5, [r7, #0]
}
 801be6c:	b00e      	add	sp, #56	; 0x38
 801be6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return STM32FS_ERROR_DIR_NOT_FOUND;
 801be72:	2009      	movs	r0, #9
}
 801be74:	b00e      	add	sp, #56	; 0x38
 801be76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be7a:	bf00      	nop
 801be7c:	2400a5dc 	.word	0x2400a5dc

0801be80 <STM32Fs_OpenDir>:
{
 801be80:	b508      	push	{r3, lr}
 801be82:	460b      	mov	r3, r1
  res = f_opendir(dir, path);
 801be84:	4601      	mov	r1, r0
 801be86:	4618      	mov	r0, r3
 801be88:	f7fe fe40 	bl	801ab0c <f_opendir>
    return STM32FS_ERROR_DIR_NOT_FOUND;
 801be8c:	2800      	cmp	r0, #0
}
 801be8e:	bf18      	it	ne
 801be90:	2009      	movne	r0, #9
 801be92:	bd08      	pop	{r3, pc}

0801be94 <STM32Fs_CreateDir>:
{
 801be94:	b508      	push	{r3, lr}
  res = f_mkdir(path);
 801be96:	f7fe ff0f 	bl	801acb8 <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 801be9a:	f010 00f7 	ands.w	r0, r0, #247	; 0xf7
 801be9e:	d100      	bne.n	801bea2 <STM32Fs_CreateDir+0xe>
}
 801bea0:	bd08      	pop	{r3, pc}
    while(1);
 801bea2:	e7fe      	b.n	801bea2 <STM32Fs_CreateDir+0xe>

0801bea4 <STM32Fs_GetNextDir>:
{
 801bea4:	b510      	push	{r4, lr}
 801bea6:	460c      	mov	r4, r1
  res = f_readdir(dir, fno);                                                  /* Read a directory item */
 801bea8:	f7fe feca 	bl	801ac40 <f_readdir>
  if (res != FR_OK || fno->fname[0] == 0) return STM32FS_ERROR_DIR_NOT_FOUND; /* Break on error or end of dir */
 801beac:	b938      	cbnz	r0, 801bebe <STM32Fs_GetNextDir+0x1a>
 801beae:	7da3      	ldrb	r3, [r4, #22]
 801beb0:	b12b      	cbz	r3, 801bebe <STM32Fs_GetNextDir+0x1a>
  if (fno->fattrib & AM_DIR)
 801beb2:	7a23      	ldrb	r3, [r4, #8]
  if (res != FR_OK || fno->fname[0] == 0) return STM32FS_ERROR_DIR_NOT_FOUND; /* Break on error or end of dir */
 801beb4:	f013 0f10 	tst.w	r3, #16
 801beb8:	bf08      	it	eq
 801beba:	2009      	moveq	r0, #9
}
 801bebc:	bd10      	pop	{r4, pc}
  if (res != FR_OK || fno->fname[0] == 0) return STM32FS_ERROR_DIR_NOT_FOUND; /* Break on error or end of dir */
 801bebe:	2009      	movs	r0, #9
}
 801bec0:	bd10      	pop	{r4, pc}
 801bec2:	bf00      	nop

0801bec4 <STM32Fs_GetNextFile>:
{
 801bec4:	b510      	push	{r4, lr}
 801bec6:	460c      	mov	r4, r1
  res = f_readdir(dir, fno);                                                  /* Read a directory item */
 801bec8:	f7fe feba 	bl	801ac40 <f_readdir>
  if (res != FR_OK || fno->fname[0] == 0) return STM32FS_ERROR_DIR_NOT_FOUND; /* Break on error or end of dir */
 801becc:	b938      	cbnz	r0, 801bede <STM32Fs_GetNextFile+0x1a>
 801bece:	7da3      	ldrb	r3, [r4, #22]
 801bed0:	b12b      	cbz	r3, 801bede <STM32Fs_GetNextFile+0x1a>
  if (!(fno->fattrib & AM_DIR))
 801bed2:	7a20      	ldrb	r0, [r4, #8]
  if (res != FR_OK || fno->fname[0] == 0) return STM32FS_ERROR_DIR_NOT_FOUND; /* Break on error or end of dir */
 801bed4:	f010 0010 	ands.w	r0, r0, #16
 801bed8:	bf18      	it	ne
 801beda:	2009      	movne	r0, #9
}
 801bedc:	bd10      	pop	{r4, pc}
  if (res != FR_OK || fno->fname[0] == 0) return STM32FS_ERROR_DIR_NOT_FOUND; /* Break on error or end of dir */
 801bede:	2009      	movs	r0, #9
}
 801bee0:	bd10      	pop	{r4, pc}
 801bee2:	bf00      	nop

0801bee4 <STM32Fs_WriteRaw>:
{
 801bee4:	b570      	push	{r4, r5, r6, lr}
 801bee6:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 801beea:	460e      	mov	r6, r1
 801beec:	4615      	mov	r5, r2
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801beee:	4601      	mov	r1, r0
 801bef0:	220a      	movs	r2, #10
 801bef2:	a802      	add	r0, sp, #8
 801bef4:	f7fe f920 	bl	801a138 <f_open>
 801bef8:	b998      	cbnz	r0, 801bf22 <STM32Fs_WriteRaw+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 801befa:	4604      	mov	r4, r0
 801befc:	b672      	cpsid	i
  f_write(&File, buffer, length, (void *)&byteswritten);
 801befe:	4631      	mov	r1, r6
 801bf00:	462a      	mov	r2, r5
 801bf02:	a802      	add	r0, sp, #8
 801bf04:	ab01      	add	r3, sp, #4
 801bf06:	f7fe fc1b 	bl	801a740 <f_write>
  __ASM volatile ("cpsie i" : : : "memory");
 801bf0a:	b662      	cpsie	i
  f_close(&File);
 801bf0c:	a802      	add	r0, sp, #8
 801bf0e:	f7fe fd6d 	bl	801a9ec <f_close>
  if (byteswritten != length)
 801bf12:	9b01      	ldr	r3, [sp, #4]
    return STM32FS_ERROR_FILE_WRITE_UNDERFLOW;
 801bf14:	42ab      	cmp	r3, r5
 801bf16:	bf18      	it	ne
 801bf18:	2408      	movne	r4, #8
}
 801bf1a:	4620      	mov	r0, r4
 801bf1c:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 801bf20:	bd70      	pop	{r4, r5, r6, pc}
    return STM32FS_ERROR_FOPEN_FAIL;
 801bf22:	2403      	movs	r4, #3
}
 801bf24:	4620      	mov	r0, r4
 801bf26:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 801bf2a:	bd70      	pop	{r4, r5, r6, pc}

0801bf2c <STM32Fs_WriteImageBMP>:
{
 801bf2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf30:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 801bf34:	460c      	mov	r4, r1
 801bf36:	4615      	mov	r5, r2
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801bf38:	4601      	mov	r1, r0
 801bf3a:	220a      	movs	r2, #10
 801bf3c:	a802      	add	r0, sp, #8
{
 801bf3e:	461f      	mov	r7, r3
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801bf40:	f7fe f8fa 	bl	801a138 <f_open>
 801bf44:	2800      	cmp	r0, #0
 801bf46:	d142      	bne.n	801bfce <STM32Fs_WriteImageBMP+0xa2>
  unsigned int pixelBytesPerRow = width * 3;
 801bf48:	eb05 0645 	add.w	r6, r5, r5, lsl #1
  *sizeOfFileEntry = 54 + (pixelBytesPerRow + paddingBytesPerRow) * height;
 801bf4c:	4923      	ldr	r1, [pc, #140]	; (801bfdc <STM32Fs_WriteImageBMP+0xb0>)
  *heightEntry = -height; /* '-' required so to avoid having to rotate the image when opening .bmp file*/
 801bf4e:	427b      	negs	r3, r7
 801bf50:	4680      	mov	r8, r0
  unsigned int paddingBytesPerRow = (4 - (pixelBytesPerRow % 4)) % 4;
 801bf52:	f1c6 0900 	rsb	r9, r6, #0
  *widthEntry = width;
 801bf56:	f8c1 5012 	str.w	r5, [r1, #18]
  *heightEntry = -height; /* '-' required so to avoid having to rotate the image when opening .bmp file*/
 801bf5a:	f8c1 3016 	str.w	r3, [r1, #22]
  unsigned int paddingBytesPerRow = (4 - (pixelBytesPerRow % 4)) % 4;
 801bf5e:	f009 0903 	and.w	r9, r9, #3
  *sizeOfFileEntry = 54 + (pixelBytesPerRow + paddingBytesPerRow) * height;
 801bf62:	eb06 0309 	add.w	r3, r6, r9
 801bf66:	fb07 f303 	mul.w	r3, r7, r3
 801bf6a:	3336      	adds	r3, #54	; 0x36
 801bf6c:	f8c1 3002 	str.w	r3, [r1, #2]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf70:	b672      	cpsid	i
  f_write(&File, header, 54, (void *)&byteswritten);
 801bf72:	2236      	movs	r2, #54	; 0x36
 801bf74:	ab01      	add	r3, sp, #4
 801bf76:	a802      	add	r0, sp, #8
 801bf78:	f7fe fbe2 	bl	801a740 <f_write>
  if (width % 4 == 0)
 801bf7c:	07ab      	lsls	r3, r5, #30
 801bf7e:	d01c      	beq.n	801bfba <STM32Fs_WriteImageBMP+0x8e>
    for (int row = 0; row < height; row++)
 801bf80:	b197      	cbz	r7, 801bfa8 <STM32Fs_WriteImageBMP+0x7c>
 801bf82:	4645      	mov	r5, r8
      f_write(&File, zeroes, paddingBytesPerRow, (void *)&byteswritten);
 801bf84:	f8df a058 	ldr.w	sl, [pc, #88]	; 801bfe0 <STM32Fs_WriteImageBMP+0xb4>
      f_write(&File, buffer + 3 * width * row, pixelBytesPerRow, (void *)&byteswritten);
 801bf88:	4621      	mov	r1, r4
 801bf8a:	ab01      	add	r3, sp, #4
 801bf8c:	4632      	mov	r2, r6
    for (int row = 0; row < height; row++)
 801bf8e:	3501      	adds	r5, #1
      f_write(&File, buffer + 3 * width * row, pixelBytesPerRow, (void *)&byteswritten);
 801bf90:	a802      	add	r0, sp, #8
    for (int row = 0; row < height; row++)
 801bf92:	4434      	add	r4, r6
      f_write(&File, buffer + 3 * width * row, pixelBytesPerRow, (void *)&byteswritten);
 801bf94:	f7fe fbd4 	bl	801a740 <f_write>
      f_write(&File, zeroes, paddingBytesPerRow, (void *)&byteswritten);
 801bf98:	ab01      	add	r3, sp, #4
 801bf9a:	464a      	mov	r2, r9
 801bf9c:	4651      	mov	r1, sl
 801bf9e:	a802      	add	r0, sp, #8
 801bfa0:	f7fe fbce 	bl	801a740 <f_write>
    for (int row = 0; row < height; row++)
 801bfa4:	42bd      	cmp	r5, r7
 801bfa6:	d1ef      	bne.n	801bf88 <STM32Fs_WriteImageBMP+0x5c>
  __ASM volatile ("cpsie i" : : : "memory");
 801bfa8:	b662      	cpsie	i
  f_close(&File);
 801bfaa:	a802      	add	r0, sp, #8
 801bfac:	f7fe fd1e 	bl	801a9ec <f_close>
}
 801bfb0:	4640      	mov	r0, r8
 801bfb2:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 801bfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f_write(&File, buffer, width * height * 3, (void *)&byteswritten);
 801bfba:	fb07 f205 	mul.w	r2, r7, r5
 801bfbe:	ab01      	add	r3, sp, #4
 801bfc0:	4621      	mov	r1, r4
 801bfc2:	a802      	add	r0, sp, #8
 801bfc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bfc8:	f7fe fbba 	bl	801a740 <f_write>
 801bfcc:	e7ec      	b.n	801bfa8 <STM32Fs_WriteImageBMP+0x7c>
    return STM32FS_ERROR_FOPEN_FAIL;
 801bfce:	f04f 0803 	mov.w	r8, #3
}
 801bfd2:	4640      	mov	r0, r8
 801bfd4:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 801bfd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfdc:	240074ac 	.word	0x240074ac
 801bfe0:	2400a6f4 	.word	0x2400a6f4

0801bfe4 <STM32Fs_WriteImageBMP16>:
{
 801bfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfe8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801bfec:	460e      	mov	r6, r1
 801bfee:	4614      	mov	r4, r2
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801bff0:	4601      	mov	r1, r0
 801bff2:	220a      	movs	r2, #10
 801bff4:	a806      	add	r0, sp, #24
{
 801bff6:	461d      	mov	r5, r3
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801bff8:	f7fe f89e 	bl	801a138 <f_open>
 801bffc:	b970      	cbnz	r0, 801c01c <STM32Fs_WriteImageBMP16+0x38>
  write_byte(&File, 'B');
 801bffe:	2342      	movs	r3, #66	; 0x42
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c000:	2201      	movs	r2, #1
 801c002:	a904      	add	r1, sp, #16
 801c004:	a806      	add	r0, sp, #24
 801c006:	f88d 3010 	strb.w	r3, [sp, #16]
 801c00a:	ab05      	add	r3, sp, #20
 801c00c:	f7fe fb98 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c010:	b100      	cbz	r0, 801c014 <STM32Fs_WriteImageBMP16+0x30>
 801c012:	e7fe      	b.n	801c012 <STM32Fs_WriteImageBMP16+0x2e>
  if (bytes != sizeof(value)) while(1);
 801c014:	9a05      	ldr	r2, [sp, #20]
 801c016:	2a01      	cmp	r2, #1
 801c018:	d006      	beq.n	801c028 <STM32Fs_WriteImageBMP16+0x44>
 801c01a:	e7fe      	b.n	801c01a <STM32Fs_WriteImageBMP16+0x36>
    return STM32FS_ERROR_FOPEN_FAIL;
 801c01c:	2703      	movs	r7, #3
}
 801c01e:	4638      	mov	r0, r7
 801c020:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801c024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  write_byte(&File, 'M');
 801c028:	234d      	movs	r3, #77	; 0x4d
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c02a:	a904      	add	r1, sp, #16
 801c02c:	a806      	add	r0, sp, #24
 801c02e:	f88d 3010 	strb.w	r3, [sp, #16]
 801c032:	ab05      	add	r3, sp, #20
 801c034:	f7fe fb84 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c038:	b918      	cbnz	r0, 801c042 <STM32Fs_WriteImageBMP16+0x5e>
  if (bytes != sizeof(value)) while(1);
 801c03a:	9b05      	ldr	r3, [sp, #20]
 801c03c:	2b01      	cmp	r3, #1
 801c03e:	d001      	beq.n	801c044 <STM32Fs_WriteImageBMP16+0x60>
 801c040:	e7fe      	b.n	801c040 <STM32Fs_WriteImageBMP16+0x5c>
  if (res != FR_OK) while(1);
 801c042:	e7fe      	b.n	801c042 <STM32Fs_WriteImageBMP16+0x5e>
  const int row_bytes = (((width * 16) + 31) / 32) * 4;
 801c044:	ea4f 1804 	mov.w	r8, r4, lsl #4
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c048:	ab05      	add	r3, sp, #20
 801c04a:	2204      	movs	r2, #4
 801c04c:	a904      	add	r1, sp, #16
  const int row_bytes = (((width * 16) + 31) / 32) * 4;
 801c04e:	f108 081f 	add.w	r8, r8, #31
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c052:	a806      	add	r0, sp, #24
  const int row_bytes = (((width * 16) + 31) / 32) * 4;
 801c054:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c058:	ea4f 0888 	mov.w	r8, r8, lsl #2
  const int data_size = (row_bytes * height);
 801c05c:	fb05 f708 	mul.w	r7, r5, r8
  write_long(&File, 14 + 40 + 12 + data_size);
 801c060:	f107 0c42 	add.w	ip, r7, #66	; 0x42
 801c064:	f8cd c010 	str.w	ip, [sp, #16]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c068:	f7fe fb6a 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c06c:	b918      	cbnz	r0, 801c076 <STM32Fs_WriteImageBMP16+0x92>
  if (bytes != sizeof(value)) while(1);
 801c06e:	9b05      	ldr	r3, [sp, #20]
 801c070:	2b04      	cmp	r3, #4
 801c072:	d001      	beq.n	801c078 <STM32Fs_WriteImageBMP16+0x94>
 801c074:	e7fe      	b.n	801c074 <STM32Fs_WriteImageBMP16+0x90>
  if (res != FR_OK) while(1);
 801c076:	e7fe      	b.n	801c076 <STM32Fs_WriteImageBMP16+0x92>
void write_word(FIL *fp, uint16_t value)
 801c078:	f8ad 000c 	strh.w	r0, [sp, #12]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c07c:	a903      	add	r1, sp, #12
 801c07e:	ab05      	add	r3, sp, #20
 801c080:	2202      	movs	r2, #2
 801c082:	a806      	add	r0, sp, #24
 801c084:	f7fe fb5c 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c088:	b918      	cbnz	r0, 801c092 <STM32Fs_WriteImageBMP16+0xae>
  if (bytes != sizeof(value)) while(1);
 801c08a:	9a05      	ldr	r2, [sp, #20]
 801c08c:	2a02      	cmp	r2, #2
 801c08e:	d001      	beq.n	801c094 <STM32Fs_WriteImageBMP16+0xb0>
 801c090:	e7fe      	b.n	801c090 <STM32Fs_WriteImageBMP16+0xac>
  if (res != FR_OK) while(1);
 801c092:	e7fe      	b.n	801c092 <STM32Fs_WriteImageBMP16+0xae>
void write_word(FIL *fp, uint16_t value)
 801c094:	f8ad 000a 	strh.w	r0, [sp, #10]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c098:	f10d 010a 	add.w	r1, sp, #10
 801c09c:	ab05      	add	r3, sp, #20
 801c09e:	a806      	add	r0, sp, #24
 801c0a0:	f7fe fb4e 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c0a4:	b928      	cbnz	r0, 801c0b2 <STM32Fs_WriteImageBMP16+0xce>
  if (bytes != sizeof(value)) while(1);
 801c0a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801c0aa:	f1b9 0f02 	cmp.w	r9, #2
 801c0ae:	d001      	beq.n	801c0b4 <STM32Fs_WriteImageBMP16+0xd0>
 801c0b0:	e7fe      	b.n	801c0b0 <STM32Fs_WriteImageBMP16+0xcc>
  if (res != FR_OK) while(1);
 801c0b2:	e7fe      	b.n	801c0b2 <STM32Fs_WriteImageBMP16+0xce>
  write_long(&File, 14 + 40 + 12);
 801c0b4:	2342      	movs	r3, #66	; 0x42
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c0b6:	2204      	movs	r2, #4
 801c0b8:	a904      	add	r1, sp, #16
 801c0ba:	a806      	add	r0, sp, #24
 801c0bc:	9304      	str	r3, [sp, #16]
 801c0be:	ab05      	add	r3, sp, #20
 801c0c0:	f7fe fb3e 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c0c4:	b918      	cbnz	r0, 801c0ce <STM32Fs_WriteImageBMP16+0xea>
  if (bytes != sizeof(value)) while(1);
 801c0c6:	9a05      	ldr	r2, [sp, #20]
 801c0c8:	2a04      	cmp	r2, #4
 801c0ca:	d001      	beq.n	801c0d0 <STM32Fs_WriteImageBMP16+0xec>
 801c0cc:	e7fe      	b.n	801c0cc <STM32Fs_WriteImageBMP16+0xe8>
  if (res != FR_OK) while(1);
 801c0ce:	e7fe      	b.n	801c0ce <STM32Fs_WriteImageBMP16+0xea>
  write_long(&File, 40);
 801c0d0:	2328      	movs	r3, #40	; 0x28
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c0d2:	a904      	add	r1, sp, #16
 801c0d4:	a806      	add	r0, sp, #24
 801c0d6:	9304      	str	r3, [sp, #16]
 801c0d8:	ab05      	add	r3, sp, #20
 801c0da:	f7fe fb31 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c0de:	b918      	cbnz	r0, 801c0e8 <STM32Fs_WriteImageBMP16+0x104>
  if (bytes != sizeof(value)) while(1);
 801c0e0:	9a05      	ldr	r2, [sp, #20]
 801c0e2:	2a04      	cmp	r2, #4
 801c0e4:	d001      	beq.n	801c0ea <STM32Fs_WriteImageBMP16+0x106>
 801c0e6:	e7fe      	b.n	801c0e6 <STM32Fs_WriteImageBMP16+0x102>
  if (res != FR_OK) while(1);
 801c0e8:	e7fe      	b.n	801c0e8 <STM32Fs_WriteImageBMP16+0x104>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c0ea:	ab05      	add	r3, sp, #20
 801c0ec:	a904      	add	r1, sp, #16
 801c0ee:	a806      	add	r0, sp, #24
 801c0f0:	9404      	str	r4, [sp, #16]
 801c0f2:	f7fe fb25 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c0f6:	b978      	cbnz	r0, 801c118 <STM32Fs_WriteImageBMP16+0x134>
  if (bytes != sizeof(value)) while(1);
 801c0f8:	9a05      	ldr	r2, [sp, #20]
 801c0fa:	2a04      	cmp	r2, #4
 801c0fc:	d000      	beq.n	801c100 <STM32Fs_WriteImageBMP16+0x11c>
 801c0fe:	e7fe      	b.n	801c0fe <STM32Fs_WriteImageBMP16+0x11a>
  write_long(&File, -height); // store the image flipped (correctly)
 801c100:	426b      	negs	r3, r5
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c102:	a904      	add	r1, sp, #16
 801c104:	a806      	add	r0, sp, #24
 801c106:	9304      	str	r3, [sp, #16]
 801c108:	ab05      	add	r3, sp, #20
 801c10a:	f7fe fb19 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c10e:	b990      	cbnz	r0, 801c136 <STM32Fs_WriteImageBMP16+0x152>
  if (bytes != sizeof(value)) while(1);
 801c110:	9b05      	ldr	r3, [sp, #20]
 801c112:	2b04      	cmp	r3, #4
 801c114:	d001      	beq.n	801c11a <STM32Fs_WriteImageBMP16+0x136>
 801c116:	e7fe      	b.n	801c116 <STM32Fs_WriteImageBMP16+0x132>
  if (res != FR_OK) while(1);
 801c118:	e7fe      	b.n	801c118 <STM32Fs_WriteImageBMP16+0x134>
  write_word(&File, 1);
 801c11a:	2301      	movs	r3, #1
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c11c:	464a      	mov	r2, r9
 801c11e:	a904      	add	r1, sp, #16
 801c120:	a806      	add	r0, sp, #24
 801c122:	f8ad 3010 	strh.w	r3, [sp, #16]
 801c126:	ab05      	add	r3, sp, #20
 801c128:	f7fe fb0a 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c12c:	b988      	cbnz	r0, 801c152 <STM32Fs_WriteImageBMP16+0x16e>
  if (bytes != sizeof(value)) while(1);
 801c12e:	9a05      	ldr	r2, [sp, #20]
 801c130:	2a02      	cmp	r2, #2
 801c132:	d001      	beq.n	801c138 <STM32Fs_WriteImageBMP16+0x154>
 801c134:	e7fe      	b.n	801c134 <STM32Fs_WriteImageBMP16+0x150>
  if (res != FR_OK) while(1);
 801c136:	e7fe      	b.n	801c136 <STM32Fs_WriteImageBMP16+0x152>
  write_word(&File, 16);
 801c138:	2310      	movs	r3, #16
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c13a:	a904      	add	r1, sp, #16
 801c13c:	a806      	add	r0, sp, #24
 801c13e:	f8ad 3010 	strh.w	r3, [sp, #16]
 801c142:	ab05      	add	r3, sp, #20
 801c144:	f7fe fafc 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c148:	b988      	cbnz	r0, 801c16e <STM32Fs_WriteImageBMP16+0x18a>
  if (bytes != sizeof(value)) while(1);
 801c14a:	9b05      	ldr	r3, [sp, #20]
 801c14c:	2b02      	cmp	r3, #2
 801c14e:	d001      	beq.n	801c154 <STM32Fs_WriteImageBMP16+0x170>
 801c150:	e7fe      	b.n	801c150 <STM32Fs_WriteImageBMP16+0x16c>
  if (res != FR_OK) while(1);
 801c152:	e7fe      	b.n	801c152 <STM32Fs_WriteImageBMP16+0x16e>
  write_long(&File, 3);
 801c154:	2303      	movs	r3, #3
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c156:	2204      	movs	r2, #4
 801c158:	a904      	add	r1, sp, #16
 801c15a:	a806      	add	r0, sp, #24
 801c15c:	9304      	str	r3, [sp, #16]
 801c15e:	ab05      	add	r3, sp, #20
 801c160:	f7fe faee 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c164:	b978      	cbnz	r0, 801c186 <STM32Fs_WriteImageBMP16+0x1a2>
  if (bytes != sizeof(value)) while(1);
 801c166:	9a05      	ldr	r2, [sp, #20]
 801c168:	2a04      	cmp	r2, #4
 801c16a:	d001      	beq.n	801c170 <STM32Fs_WriteImageBMP16+0x18c>
 801c16c:	e7fe      	b.n	801c16c <STM32Fs_WriteImageBMP16+0x188>
  if (res != FR_OK) while(1);
 801c16e:	e7fe      	b.n	801c16e <STM32Fs_WriteImageBMP16+0x18a>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c170:	ab05      	add	r3, sp, #20
 801c172:	a904      	add	r1, sp, #16
 801c174:	a806      	add	r0, sp, #24
 801c176:	9704      	str	r7, [sp, #16]
 801c178:	f7fe fae2 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c17c:	b960      	cbnz	r0, 801c198 <STM32Fs_WriteImageBMP16+0x1b4>
  if (bytes != sizeof(value)) while(1);
 801c17e:	9a05      	ldr	r2, [sp, #20]
 801c180:	2a04      	cmp	r2, #4
 801c182:	d001      	beq.n	801c188 <STM32Fs_WriteImageBMP16+0x1a4>
 801c184:	e7fe      	b.n	801c184 <STM32Fs_WriteImageBMP16+0x1a0>
  if (res != FR_OK) while(1);
 801c186:	e7fe      	b.n	801c186 <STM32Fs_WriteImageBMP16+0x1a2>
  write_long(&File, 0);
 801c188:	9004      	str	r0, [sp, #16]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c18a:	ab05      	add	r3, sp, #20
 801c18c:	a904      	add	r1, sp, #16
 801c18e:	a806      	add	r0, sp, #24
 801c190:	f7fe fad6 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c194:	b108      	cbz	r0, 801c19a <STM32Fs_WriteImageBMP16+0x1b6>
 801c196:	e7fe      	b.n	801c196 <STM32Fs_WriteImageBMP16+0x1b2>
 801c198:	e7fe      	b.n	801c198 <STM32Fs_WriteImageBMP16+0x1b4>
  if (bytes != sizeof(value)) while(1);
 801c19a:	9a05      	ldr	r2, [sp, #20]
 801c19c:	2a04      	cmp	r2, #4
 801c19e:	d000      	beq.n	801c1a2 <STM32Fs_WriteImageBMP16+0x1be>
 801c1a0:	e7fe      	b.n	801c1a0 <STM32Fs_WriteImageBMP16+0x1bc>
  write_long(&File, 0);
 801c1a2:	9004      	str	r0, [sp, #16]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c1a4:	ab05      	add	r3, sp, #20
 801c1a6:	a904      	add	r1, sp, #16
 801c1a8:	a806      	add	r0, sp, #24
 801c1aa:	f7fe fac9 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c1ae:	b100      	cbz	r0, 801c1b2 <STM32Fs_WriteImageBMP16+0x1ce>
 801c1b0:	e7fe      	b.n	801c1b0 <STM32Fs_WriteImageBMP16+0x1cc>
  if (bytes != sizeof(value)) while(1);
 801c1b2:	9a05      	ldr	r2, [sp, #20]
 801c1b4:	2a04      	cmp	r2, #4
 801c1b6:	d000      	beq.n	801c1ba <STM32Fs_WriteImageBMP16+0x1d6>
 801c1b8:	e7fe      	b.n	801c1b8 <STM32Fs_WriteImageBMP16+0x1d4>
  write_long(&File, 0);
 801c1ba:	2300      	movs	r3, #0
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c1bc:	a904      	add	r1, sp, #16
 801c1be:	a806      	add	r0, sp, #24
 801c1c0:	9304      	str	r3, [sp, #16]
 801c1c2:	ab05      	add	r3, sp, #20
 801c1c4:	f7fe fabc 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c1c8:	b100      	cbz	r0, 801c1cc <STM32Fs_WriteImageBMP16+0x1e8>
 801c1ca:	e7fe      	b.n	801c1ca <STM32Fs_WriteImageBMP16+0x1e6>
  if (bytes != sizeof(value)) while(1);
 801c1cc:	9a05      	ldr	r2, [sp, #20]
 801c1ce:	2a04      	cmp	r2, #4
 801c1d0:	d000      	beq.n	801c1d4 <STM32Fs_WriteImageBMP16+0x1f0>
 801c1d2:	e7fe      	b.n	801c1d2 <STM32Fs_WriteImageBMP16+0x1ee>
  write_long(&File, 0);
 801c1d4:	9004      	str	r0, [sp, #16]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c1d6:	ab05      	add	r3, sp, #20
 801c1d8:	a904      	add	r1, sp, #16
 801c1da:	a806      	add	r0, sp, #24
 801c1dc:	f7fe fab0 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c1e0:	b100      	cbz	r0, 801c1e4 <STM32Fs_WriteImageBMP16+0x200>
 801c1e2:	e7fe      	b.n	801c1e2 <STM32Fs_WriteImageBMP16+0x1fe>
  if (bytes != sizeof(value)) while(1);
 801c1e4:	9a05      	ldr	r2, [sp, #20]
 801c1e6:	2a04      	cmp	r2, #4
 801c1e8:	d000      	beq.n	801c1ec <STM32Fs_WriteImageBMP16+0x208>
 801c1ea:	e7fe      	b.n	801c1ea <STM32Fs_WriteImageBMP16+0x206>
  write_long(&File, 0x1F << 11);
 801c1ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c1f0:	a904      	add	r1, sp, #16
 801c1f2:	a806      	add	r0, sp, #24
 801c1f4:	9304      	str	r3, [sp, #16]
 801c1f6:	ab05      	add	r3, sp, #20
 801c1f8:	f7fe faa2 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c1fc:	b100      	cbz	r0, 801c200 <STM32Fs_WriteImageBMP16+0x21c>
 801c1fe:	e7fe      	b.n	801c1fe <STM32Fs_WriteImageBMP16+0x21a>
  if (bytes != sizeof(value)) while(1);
 801c200:	9a05      	ldr	r2, [sp, #20]
 801c202:	2a04      	cmp	r2, #4
 801c204:	d000      	beq.n	801c208 <STM32Fs_WriteImageBMP16+0x224>
 801c206:	e7fe      	b.n	801c206 <STM32Fs_WriteImageBMP16+0x222>
  write_long(&File, 0x3F << 5);
 801c208:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c20c:	a904      	add	r1, sp, #16
 801c20e:	a806      	add	r0, sp, #24
 801c210:	9304      	str	r3, [sp, #16]
 801c212:	ab05      	add	r3, sp, #20
 801c214:	f7fe fa94 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c218:	b100      	cbz	r0, 801c21c <STM32Fs_WriteImageBMP16+0x238>
 801c21a:	e7fe      	b.n	801c21a <STM32Fs_WriteImageBMP16+0x236>
  if (bytes != sizeof(value)) while(1);
 801c21c:	9a05      	ldr	r2, [sp, #20]
 801c21e:	2a04      	cmp	r2, #4
 801c220:	d000      	beq.n	801c224 <STM32Fs_WriteImageBMP16+0x240>
 801c222:	e7fe      	b.n	801c222 <STM32Fs_WriteImageBMP16+0x23e>
  write_long(&File, 0x1F);
 801c224:	231f      	movs	r3, #31
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c226:	a904      	add	r1, sp, #16
 801c228:	a806      	add	r0, sp, #24
 801c22a:	9304      	str	r3, [sp, #16]
 801c22c:	ab05      	add	r3, sp, #20
 801c22e:	f7fe fa87 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c232:	4607      	mov	r7, r0
 801c234:	b100      	cbz	r0, 801c238 <STM32Fs_WriteImageBMP16+0x254>
 801c236:	e7fe      	b.n	801c236 <STM32Fs_WriteImageBMP16+0x252>
  if (bytes != sizeof(value)) while(1);
 801c238:	9b05      	ldr	r3, [sp, #20]
 801c23a:	2b04      	cmp	r3, #4
 801c23c:	d000      	beq.n	801c240 <STM32Fs_WriteImageBMP16+0x25c>
 801c23e:	e7fe      	b.n	801c23e <STM32Fs_WriteImageBMP16+0x25a>
  const int waste = (row_bytes / sizeof(uint16_t)) - width;
 801c240:	ebc4 0358 	rsb	r3, r4, r8, lsr #1
 801c244:	9301      	str	r3, [sp, #4]
  if(swap_bytes == 1)
 801c246:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 801c248:	2b01      	cmp	r3, #1
 801c24a:	d049      	beq.n	801c2e0 <STM32Fs_WriteImageBMP16+0x2fc>
  else  if(swap_bytes == 0)
 801c24c:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d138      	bne.n	801c2c4 <STM32Fs_WriteImageBMP16+0x2e0>
    if(waste == 0)
 801c252:	9b01      	ldr	r3, [sp, #4]
 801c254:	b373      	cbz	r3, 801c2b4 <STM32Fs_WriteImageBMP16+0x2d0>
      for (int i = 0; i < height; i++)
 801c256:	f8dd 9270 	ldr.w	r9, [sp, #624]	; 0x270
 801c25a:	45a9      	cmp	r9, r5
 801c25c:	d032      	beq.n	801c2c4 <STM32Fs_WriteImageBMP16+0x2e0>
 801c25e:	9b9c      	ldr	r3, [sp, #624]	; 0x270
        for (int j = 0; j < width; j++) 
 801c260:	f04f 0800 	mov.w	r8, #0
 801c264:	eb06 0a43 	add.w	sl, r6, r3, lsl #1
 801c268:	45a0      	cmp	r8, r4
 801c26a:	d013      	beq.n	801c294 <STM32Fs_WriteImageBMP16+0x2b0>
          write_word(&File, IM_GET_RGB565_PIXEL(buffer, width, (j), (i)));
 801c26c:	f83a 3b02 	ldrh.w	r3, [sl], #2
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c270:	2202      	movs	r2, #2
 801c272:	f10d 010e 	add.w	r1, sp, #14
 801c276:	a806      	add	r0, sp, #24
 801c278:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c27c:	ab05      	add	r3, sp, #20
 801c27e:	f7fe fa5f 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c282:	b100      	cbz	r0, 801c286 <STM32Fs_WriteImageBMP16+0x2a2>
 801c284:	e7fe      	b.n	801c284 <STM32Fs_WriteImageBMP16+0x2a0>
  if (bytes != sizeof(value)) while(1);
 801c286:	9b05      	ldr	r3, [sp, #20]
 801c288:	2b02      	cmp	r3, #2
 801c28a:	d000      	beq.n	801c28e <STM32Fs_WriteImageBMP16+0x2aa>
 801c28c:	e7fe      	b.n	801c28c <STM32Fs_WriteImageBMP16+0x2a8>
        for (int j = 0; j < width; j++) 
 801c28e:	f108 0801 	add.w	r8, r8, #1
 801c292:	e7e9      	b.n	801c268 <STM32Fs_WriteImageBMP16+0x284>
        for (int j = 0; j < waste; j++) 
 801c294:	f04f 0800 	mov.w	r8, #0
 801c298:	46c2      	mov	sl, r8
 801c29a:	9b01      	ldr	r3, [sp, #4]
 801c29c:	4598      	cmp	r8, r3
 801c29e:	da15      	bge.n	801c2cc <STM32Fs_WriteImageBMP16+0x2e8>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c2a0:	ab05      	add	r3, sp, #20
 801c2a2:	2202      	movs	r2, #2
 801c2a4:	a904      	add	r1, sp, #16
 801c2a6:	a806      	add	r0, sp, #24
 801c2a8:	f8ad a010 	strh.w	sl, [sp, #16]
 801c2ac:	f7fe fa48 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c2b0:	b190      	cbz	r0, 801c2d8 <STM32Fs_WriteImageBMP16+0x2f4>
 801c2b2:	e7fe      	b.n	801c2b2 <STM32Fs_WriteImageBMP16+0x2ce>
      f_write(&File, buffer, width * height * 2, (void *)&byteswritten);
 801c2b4:	fb05 f204 	mul.w	r2, r5, r4
 801c2b8:	ab05      	add	r3, sp, #20
 801c2ba:	4631      	mov	r1, r6
 801c2bc:	a806      	add	r0, sp, #24
 801c2be:	0052      	lsls	r2, r2, #1
 801c2c0:	f7fe fa3e 	bl	801a740 <f_write>
  f_close(&File);
 801c2c4:	a806      	add	r0, sp, #24
 801c2c6:	f7fe fb91 	bl	801a9ec <f_close>
  return STM32FS_ERROR_NONE;
 801c2ca:	e6a8      	b.n	801c01e <STM32Fs_WriteImageBMP16+0x3a>
      for (int i = 0; i < height; i++)
 801c2cc:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 801c2ce:	f109 0901 	add.w	r9, r9, #1
 801c2d2:	4423      	add	r3, r4
 801c2d4:	939c      	str	r3, [sp, #624]	; 0x270
 801c2d6:	e7c0      	b.n	801c25a <STM32Fs_WriteImageBMP16+0x276>
  if (bytes != sizeof(value)) while(1);
 801c2d8:	9b05      	ldr	r3, [sp, #20]
 801c2da:	2b02      	cmp	r3, #2
 801c2dc:	d018      	beq.n	801c310 <STM32Fs_WriteImageBMP16+0x32c>
 801c2de:	e7fe      	b.n	801c2de <STM32Fs_WriteImageBMP16+0x2fa>
  if(swap_bytes == 1)
 801c2e0:	f04f 0800 	mov.w	r8, #0
    for (int i = 0; i < height; i++)
 801c2e4:	46c2      	mov	sl, r8
 801c2e6:	45aa      	cmp	sl, r5
 801c2e8:	d0ec      	beq.n	801c2c4 <STM32Fs_WriteImageBMP16+0x2e0>
 801c2ea:	eb06 0b48 	add.w	fp, r6, r8, lsl #1
      for (int j = 0; j < width; j++) 
 801c2ee:	f04f 0900 	mov.w	r9, #0
 801c2f2:	45a1      	cmp	r9, r4
 801c2f4:	d013      	beq.n	801c31e <STM32Fs_WriteImageBMP16+0x33a>
        write_word(&File, IM_SWAP16(IM_GET_RGB565_PIXEL(buffer, width, (j), (i))));
 801c2f6:	f83b 3b02 	ldrh.w	r3, [fp], #2
  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 801c2fa:	ba5b      	rev16	r3, r3
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c2fc:	2202      	movs	r2, #2
        write_word(&File, IM_SWAP16(IM_GET_RGB565_PIXEL(buffer, width, (j), (i))));
 801c2fe:	f8ad 3010 	strh.w	r3, [sp, #16]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c302:	a904      	add	r1, sp, #16
 801c304:	ab05      	add	r3, sp, #20
 801c306:	a806      	add	r0, sp, #24
 801c308:	f7fe fa1a 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c30c:	b118      	cbz	r0, 801c316 <STM32Fs_WriteImageBMP16+0x332>
 801c30e:	e7fe      	b.n	801c30e <STM32Fs_WriteImageBMP16+0x32a>
        for (int j = 0; j < waste; j++) 
 801c310:	f108 0801 	add.w	r8, r8, #1
 801c314:	e7c1      	b.n	801c29a <STM32Fs_WriteImageBMP16+0x2b6>
  if (bytes != sizeof(value)) while(1);
 801c316:	9b05      	ldr	r3, [sp, #20]
 801c318:	2b02      	cmp	r3, #2
 801c31a:	d011      	beq.n	801c340 <STM32Fs_WriteImageBMP16+0x35c>
 801c31c:	e7fe      	b.n	801c31c <STM32Fs_WriteImageBMP16+0x338>
      for (int j = 0; j < waste; j++) 
 801c31e:	f04f 0900 	mov.w	r9, #0
 801c322:	46cb      	mov	fp, r9
 801c324:	9b01      	ldr	r3, [sp, #4]
 801c326:	4599      	cmp	r9, r3
 801c328:	da11      	bge.n	801c34e <STM32Fs_WriteImageBMP16+0x36a>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c32a:	ab05      	add	r3, sp, #20
 801c32c:	2202      	movs	r2, #2
 801c32e:	f10d 010e 	add.w	r1, sp, #14
 801c332:	a806      	add	r0, sp, #24
 801c334:	f8ad b00e 	strh.w	fp, [sp, #14]
 801c338:	f7fe fa02 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c33c:	b118      	cbz	r0, 801c346 <STM32Fs_WriteImageBMP16+0x362>
 801c33e:	e7fe      	b.n	801c33e <STM32Fs_WriteImageBMP16+0x35a>
      for (int j = 0; j < width; j++) 
 801c340:	f109 0901 	add.w	r9, r9, #1
 801c344:	e7d5      	b.n	801c2f2 <STM32Fs_WriteImageBMP16+0x30e>
  if (bytes != sizeof(value)) while(1);
 801c346:	9b05      	ldr	r3, [sp, #20]
 801c348:	2b02      	cmp	r3, #2
 801c34a:	d004      	beq.n	801c356 <STM32Fs_WriteImageBMP16+0x372>
 801c34c:	e7fe      	b.n	801c34c <STM32Fs_WriteImageBMP16+0x368>
    for (int i = 0; i < height; i++)
 801c34e:	f10a 0a01 	add.w	sl, sl, #1
 801c352:	44a0      	add	r8, r4
 801c354:	e7c7      	b.n	801c2e6 <STM32Fs_WriteImageBMP16+0x302>
      for (int j = 0; j < waste; j++) 
 801c356:	f109 0901 	add.w	r9, r9, #1
 801c35a:	e7e3      	b.n	801c324 <STM32Fs_WriteImageBMP16+0x340>

0801c35c <STM32Fs_WriteImageBMPGray>:
{
 801c35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c360:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 801c364:	460e      	mov	r6, r1
 801c366:	4615      	mov	r5, r2
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801c368:	4601      	mov	r1, r0
 801c36a:	220a      	movs	r2, #10
 801c36c:	a804      	add	r0, sp, #16
{
 801c36e:	461c      	mov	r4, r3
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801c370:	f7fd fee2 	bl	801a138 <f_open>
 801c374:	b970      	cbnz	r0, 801c394 <STM32Fs_WriteImageBMPGray+0x38>
  write_byte(&File, 'B');
 801c376:	2342      	movs	r3, #66	; 0x42
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c378:	2201      	movs	r2, #1
 801c37a:	a902      	add	r1, sp, #8
 801c37c:	a804      	add	r0, sp, #16
 801c37e:	f88d 3008 	strb.w	r3, [sp, #8]
 801c382:	ab03      	add	r3, sp, #12
 801c384:	f7fe f9dc 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c388:	b100      	cbz	r0, 801c38c <STM32Fs_WriteImageBMPGray+0x30>
 801c38a:	e7fe      	b.n	801c38a <STM32Fs_WriteImageBMPGray+0x2e>
  if (bytes != sizeof(value)) while(1);
 801c38c:	9a03      	ldr	r2, [sp, #12]
 801c38e:	2a01      	cmp	r2, #1
 801c390:	d006      	beq.n	801c3a0 <STM32Fs_WriteImageBMPGray+0x44>
 801c392:	e7fe      	b.n	801c392 <STM32Fs_WriteImageBMPGray+0x36>
    return STM32FS_ERROR_FOPEN_FAIL;
 801c394:	2703      	movs	r7, #3
}
 801c396:	4638      	mov	r0, r7
 801c398:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 801c39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  write_byte(&File, 'M');
 801c3a0:	234d      	movs	r3, #77	; 0x4d
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c3a2:	a902      	add	r1, sp, #8
 801c3a4:	a804      	add	r0, sp, #16
 801c3a6:	f88d 3008 	strb.w	r3, [sp, #8]
 801c3aa:	ab03      	add	r3, sp, #12
 801c3ac:	f7fe f9c8 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c3b0:	b918      	cbnz	r0, 801c3ba <STM32Fs_WriteImageBMPGray+0x5e>
  if (bytes != sizeof(value)) while(1);
 801c3b2:	9b03      	ldr	r3, [sp, #12]
 801c3b4:	2b01      	cmp	r3, #1
 801c3b6:	d001      	beq.n	801c3bc <STM32Fs_WriteImageBMPGray+0x60>
 801c3b8:	e7fe      	b.n	801c3b8 <STM32Fs_WriteImageBMPGray+0x5c>
  if (res != FR_OK) while(1);
 801c3ba:	e7fe      	b.n	801c3ba <STM32Fs_WriteImageBMPGray+0x5e>
  const int row_bytes = (((width * 8) + 31) / 32) * 4;
 801c3bc:	ea4f 08c5 	mov.w	r8, r5, lsl #3
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c3c0:	ab03      	add	r3, sp, #12
 801c3c2:	2204      	movs	r2, #4
 801c3c4:	a902      	add	r1, sp, #8
  const int row_bytes = (((width * 8) + 31) / 32) * 4;
 801c3c6:	f108 081f 	add.w	r8, r8, #31
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c3ca:	a804      	add	r0, sp, #16
  const int row_bytes = (((width * 8) + 31) / 32) * 4;
 801c3cc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c3d0:	ea4f 0888 	mov.w	r8, r8, lsl #2
  const int data_size = (row_bytes * height);
 801c3d4:	fb04 fa08 	mul.w	sl, r4, r8
  write_long(&File, 14 + 40 + 1024 + data_size);
 801c3d8:	f20a 4736 	addw	r7, sl, #1078	; 0x436
 801c3dc:	9702      	str	r7, [sp, #8]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c3de:	f7fe f9af 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c3e2:	b918      	cbnz	r0, 801c3ec <STM32Fs_WriteImageBMPGray+0x90>
  if (bytes != sizeof(value)) while(1);
 801c3e4:	9b03      	ldr	r3, [sp, #12]
 801c3e6:	2b04      	cmp	r3, #4
 801c3e8:	d001      	beq.n	801c3ee <STM32Fs_WriteImageBMPGray+0x92>
 801c3ea:	e7fe      	b.n	801c3ea <STM32Fs_WriteImageBMPGray+0x8e>
  if (res != FR_OK) while(1);
 801c3ec:	e7fe      	b.n	801c3ec <STM32Fs_WriteImageBMPGray+0x90>
void write_word(FIL *fp, uint16_t value)
 801c3ee:	f8ad 0006 	strh.w	r0, [sp, #6]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c3f2:	f10d 0106 	add.w	r1, sp, #6
 801c3f6:	ab03      	add	r3, sp, #12
 801c3f8:	2202      	movs	r2, #2
 801c3fa:	a804      	add	r0, sp, #16
 801c3fc:	f7fe f9a0 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c400:	b918      	cbnz	r0, 801c40a <STM32Fs_WriteImageBMPGray+0xae>
  if (bytes != sizeof(value)) while(1);
 801c402:	9a03      	ldr	r2, [sp, #12]
 801c404:	2a02      	cmp	r2, #2
 801c406:	d001      	beq.n	801c40c <STM32Fs_WriteImageBMPGray+0xb0>
 801c408:	e7fe      	b.n	801c408 <STM32Fs_WriteImageBMPGray+0xac>
  if (res != FR_OK) while(1);
 801c40a:	e7fe      	b.n	801c40a <STM32Fs_WriteImageBMPGray+0xae>
void write_word(FIL *fp, uint16_t value)
 801c40c:	f8ad 0004 	strh.w	r0, [sp, #4]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c410:	a901      	add	r1, sp, #4
 801c412:	ab03      	add	r3, sp, #12
 801c414:	a804      	add	r0, sp, #16
 801c416:	f7fe f993 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c41a:	b918      	cbnz	r0, 801c424 <STM32Fs_WriteImageBMPGray+0xc8>
  if (bytes != sizeof(value)) while(1);
 801c41c:	9f03      	ldr	r7, [sp, #12]
 801c41e:	2f02      	cmp	r7, #2
 801c420:	d001      	beq.n	801c426 <STM32Fs_WriteImageBMPGray+0xca>
 801c422:	e7fe      	b.n	801c422 <STM32Fs_WriteImageBMPGray+0xc6>
  if (res != FR_OK) while(1);
 801c424:	e7fe      	b.n	801c424 <STM32Fs_WriteImageBMPGray+0xc8>
  write_long(&File, 14 + 40 + 1024);
 801c426:	f240 4336 	movw	r3, #1078	; 0x436
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c42a:	2204      	movs	r2, #4
 801c42c:	a902      	add	r1, sp, #8
 801c42e:	a804      	add	r0, sp, #16
 801c430:	9302      	str	r3, [sp, #8]
 801c432:	ab03      	add	r3, sp, #12
 801c434:	f7fe f984 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c438:	b918      	cbnz	r0, 801c442 <STM32Fs_WriteImageBMPGray+0xe6>
  if (bytes != sizeof(value)) while(1);
 801c43a:	9a03      	ldr	r2, [sp, #12]
 801c43c:	2a04      	cmp	r2, #4
 801c43e:	d001      	beq.n	801c444 <STM32Fs_WriteImageBMPGray+0xe8>
 801c440:	e7fe      	b.n	801c440 <STM32Fs_WriteImageBMPGray+0xe4>
  if (res != FR_OK) while(1);
 801c442:	e7fe      	b.n	801c442 <STM32Fs_WriteImageBMPGray+0xe6>
  write_long(&File, 40);
 801c444:	2328      	movs	r3, #40	; 0x28
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c446:	a902      	add	r1, sp, #8
 801c448:	a804      	add	r0, sp, #16
 801c44a:	9302      	str	r3, [sp, #8]
 801c44c:	ab03      	add	r3, sp, #12
 801c44e:	f7fe f977 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c452:	b918      	cbnz	r0, 801c45c <STM32Fs_WriteImageBMPGray+0x100>
  if (bytes != sizeof(value)) while(1);
 801c454:	9a03      	ldr	r2, [sp, #12]
 801c456:	2a04      	cmp	r2, #4
 801c458:	d001      	beq.n	801c45e <STM32Fs_WriteImageBMPGray+0x102>
 801c45a:	e7fe      	b.n	801c45a <STM32Fs_WriteImageBMPGray+0xfe>
  if (res != FR_OK) while(1);
 801c45c:	e7fe      	b.n	801c45c <STM32Fs_WriteImageBMPGray+0x100>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c45e:	ab03      	add	r3, sp, #12
 801c460:	a902      	add	r1, sp, #8
 801c462:	a804      	add	r0, sp, #16
 801c464:	9502      	str	r5, [sp, #8]
 801c466:	f7fe f96b 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c46a:	b978      	cbnz	r0, 801c48c <STM32Fs_WriteImageBMPGray+0x130>
  if (bytes != sizeof(value)) while(1);
 801c46c:	9a03      	ldr	r2, [sp, #12]
 801c46e:	2a04      	cmp	r2, #4
 801c470:	d000      	beq.n	801c474 <STM32Fs_WriteImageBMPGray+0x118>
 801c472:	e7fe      	b.n	801c472 <STM32Fs_WriteImageBMPGray+0x116>
  write_long(&File, -height); // store the image flipped (correctly)
 801c474:	4263      	negs	r3, r4
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c476:	a902      	add	r1, sp, #8
 801c478:	a804      	add	r0, sp, #16
 801c47a:	9302      	str	r3, [sp, #8]
 801c47c:	ab03      	add	r3, sp, #12
 801c47e:	f7fe f95f 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c482:	b990      	cbnz	r0, 801c4aa <STM32Fs_WriteImageBMPGray+0x14e>
  if (bytes != sizeof(value)) while(1);
 801c484:	9b03      	ldr	r3, [sp, #12]
 801c486:	2b04      	cmp	r3, #4
 801c488:	d001      	beq.n	801c48e <STM32Fs_WriteImageBMPGray+0x132>
 801c48a:	e7fe      	b.n	801c48a <STM32Fs_WriteImageBMPGray+0x12e>
  if (res != FR_OK) while(1);
 801c48c:	e7fe      	b.n	801c48c <STM32Fs_WriteImageBMPGray+0x130>
  write_word(&File, 1);
 801c48e:	2301      	movs	r3, #1
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c490:	463a      	mov	r2, r7
 801c492:	a902      	add	r1, sp, #8
 801c494:	a804      	add	r0, sp, #16
 801c496:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c49a:	ab03      	add	r3, sp, #12
 801c49c:	f7fe f950 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c4a0:	b988      	cbnz	r0, 801c4c6 <STM32Fs_WriteImageBMPGray+0x16a>
  if (bytes != sizeof(value)) while(1);
 801c4a2:	9a03      	ldr	r2, [sp, #12]
 801c4a4:	2a02      	cmp	r2, #2
 801c4a6:	d001      	beq.n	801c4ac <STM32Fs_WriteImageBMPGray+0x150>
 801c4a8:	e7fe      	b.n	801c4a8 <STM32Fs_WriteImageBMPGray+0x14c>
  if (res != FR_OK) while(1);
 801c4aa:	e7fe      	b.n	801c4aa <STM32Fs_WriteImageBMPGray+0x14e>
  write_word(&File, 8);
 801c4ac:	2308      	movs	r3, #8
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c4ae:	a902      	add	r1, sp, #8
 801c4b0:	a804      	add	r0, sp, #16
 801c4b2:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c4b6:	ab03      	add	r3, sp, #12
 801c4b8:	f7fe f942 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c4bc:	b980      	cbnz	r0, 801c4e0 <STM32Fs_WriteImageBMPGray+0x184>
  if (bytes != sizeof(value)) while(1);
 801c4be:	9b03      	ldr	r3, [sp, #12]
 801c4c0:	2b02      	cmp	r3, #2
 801c4c2:	d001      	beq.n	801c4c8 <STM32Fs_WriteImageBMPGray+0x16c>
 801c4c4:	e7fe      	b.n	801c4c4 <STM32Fs_WriteImageBMPGray+0x168>
  if (res != FR_OK) while(1);
 801c4c6:	e7fe      	b.n	801c4c6 <STM32Fs_WriteImageBMPGray+0x16a>
  write_long(&File, 0);
 801c4c8:	9002      	str	r0, [sp, #8]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c4ca:	ab03      	add	r3, sp, #12
 801c4cc:	2204      	movs	r2, #4
 801c4ce:	a902      	add	r1, sp, #8
 801c4d0:	a804      	add	r0, sp, #16
 801c4d2:	f7fe f935 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c4d6:	b980      	cbnz	r0, 801c4fa <STM32Fs_WriteImageBMPGray+0x19e>
  if (bytes != sizeof(value)) while(1);
 801c4d8:	9a03      	ldr	r2, [sp, #12]
 801c4da:	2a04      	cmp	r2, #4
 801c4dc:	d001      	beq.n	801c4e2 <STM32Fs_WriteImageBMPGray+0x186>
 801c4de:	e7fe      	b.n	801c4de <STM32Fs_WriteImageBMPGray+0x182>
  if (res != FR_OK) while(1);
 801c4e0:	e7fe      	b.n	801c4e0 <STM32Fs_WriteImageBMPGray+0x184>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c4e2:	ab03      	add	r3, sp, #12
 801c4e4:	a902      	add	r1, sp, #8
 801c4e6:	a804      	add	r0, sp, #16
 801c4e8:	f8cd a008 	str.w	sl, [sp, #8]
 801c4ec:	f7fe f928 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c4f0:	b960      	cbnz	r0, 801c50c <STM32Fs_WriteImageBMPGray+0x1b0>
  if (bytes != sizeof(value)) while(1);
 801c4f2:	9a03      	ldr	r2, [sp, #12]
 801c4f4:	2a04      	cmp	r2, #4
 801c4f6:	d001      	beq.n	801c4fc <STM32Fs_WriteImageBMPGray+0x1a0>
 801c4f8:	e7fe      	b.n	801c4f8 <STM32Fs_WriteImageBMPGray+0x19c>
  if (res != FR_OK) while(1);
 801c4fa:	e7fe      	b.n	801c4fa <STM32Fs_WriteImageBMPGray+0x19e>
  write_long(&File, 0);
 801c4fc:	9002      	str	r0, [sp, #8]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c4fe:	ab03      	add	r3, sp, #12
 801c500:	a902      	add	r1, sp, #8
 801c502:	a804      	add	r0, sp, #16
 801c504:	f7fe f91c 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c508:	b108      	cbz	r0, 801c50e <STM32Fs_WriteImageBMPGray+0x1b2>
 801c50a:	e7fe      	b.n	801c50a <STM32Fs_WriteImageBMPGray+0x1ae>
 801c50c:	e7fe      	b.n	801c50c <STM32Fs_WriteImageBMPGray+0x1b0>
  if (bytes != sizeof(value)) while(1);
 801c50e:	9a03      	ldr	r2, [sp, #12]
 801c510:	2a04      	cmp	r2, #4
 801c512:	d000      	beq.n	801c516 <STM32Fs_WriteImageBMPGray+0x1ba>
 801c514:	e7fe      	b.n	801c514 <STM32Fs_WriteImageBMPGray+0x1b8>
  write_long(&File, 0);
 801c516:	9002      	str	r0, [sp, #8]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c518:	ab03      	add	r3, sp, #12
 801c51a:	a902      	add	r1, sp, #8
 801c51c:	a804      	add	r0, sp, #16
 801c51e:	f7fe f90f 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c522:	b100      	cbz	r0, 801c526 <STM32Fs_WriteImageBMPGray+0x1ca>
 801c524:	e7fe      	b.n	801c524 <STM32Fs_WriteImageBMPGray+0x1c8>
  if (bytes != sizeof(value)) while(1);
 801c526:	9a03      	ldr	r2, [sp, #12]
 801c528:	2a04      	cmp	r2, #4
 801c52a:	d000      	beq.n	801c52e <STM32Fs_WriteImageBMPGray+0x1d2>
 801c52c:	e7fe      	b.n	801c52c <STM32Fs_WriteImageBMPGray+0x1d0>
  write_long(&File, 0);
 801c52e:	2300      	movs	r3, #0
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c530:	a902      	add	r1, sp, #8
 801c532:	a804      	add	r0, sp, #16
 801c534:	9302      	str	r3, [sp, #8]
 801c536:	ab03      	add	r3, sp, #12
 801c538:	f7fe f902 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c53c:	b100      	cbz	r0, 801c540 <STM32Fs_WriteImageBMPGray+0x1e4>
 801c53e:	e7fe      	b.n	801c53e <STM32Fs_WriteImageBMPGray+0x1e2>
  if (bytes != sizeof(value)) while(1);
 801c540:	9a03      	ldr	r2, [sp, #12]
 801c542:	2a04      	cmp	r2, #4
 801c544:	d000      	beq.n	801c548 <STM32Fs_WriteImageBMPGray+0x1ec>
 801c546:	e7fe      	b.n	801c546 <STM32Fs_WriteImageBMPGray+0x1ea>
  write_long(&File, 0);
 801c548:	9002      	str	r0, [sp, #8]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c54a:	ab03      	add	r3, sp, #12
 801c54c:	a902      	add	r1, sp, #8
 801c54e:	a804      	add	r0, sp, #16
 801c550:	f7fe f8f6 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c554:	b100      	cbz	r0, 801c558 <STM32Fs_WriteImageBMPGray+0x1fc>
 801c556:	e7fe      	b.n	801c556 <STM32Fs_WriteImageBMPGray+0x1fa>
  if (bytes != sizeof(value)) while(1);
 801c558:	9b03      	ldr	r3, [sp, #12]
 801c55a:	2b04      	cmp	r3, #4
 801c55c:	d000      	beq.n	801c560 <STM32Fs_WriteImageBMPGray+0x204>
 801c55e:	e7fe      	b.n	801c55e <STM32Fs_WriteImageBMPGray+0x202>
  for (int i = 0; i < 256; i++) {
 801c560:	4681      	mov	r9, r0
      write_long(&File, ((i) << 16) | ((i) << 8) | i);
 801c562:	ea4f 2309 	mov.w	r3, r9, lsl #8
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c566:	2204      	movs	r2, #4
 801c568:	a902      	add	r1, sp, #8
 801c56a:	a804      	add	r0, sp, #16
      write_long(&File, ((i) << 16) | ((i) << 8) | i);
 801c56c:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
 801c570:	ea43 0309 	orr.w	r3, r3, r9
 801c574:	9302      	str	r3, [sp, #8]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c576:	ab03      	add	r3, sp, #12
 801c578:	f7fe f8e2 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c57c:	4607      	mov	r7, r0
 801c57e:	b100      	cbz	r0, 801c582 <STM32Fs_WriteImageBMPGray+0x226>
 801c580:	e7fe      	b.n	801c580 <STM32Fs_WriteImageBMPGray+0x224>
  if (bytes != sizeof(value)) while(1);
 801c582:	9b03      	ldr	r3, [sp, #12]
 801c584:	2b04      	cmp	r3, #4
 801c586:	d000      	beq.n	801c58a <STM32Fs_WriteImageBMPGray+0x22e>
 801c588:	e7fe      	b.n	801c588 <STM32Fs_WriteImageBMPGray+0x22c>
  for (int i = 0; i < 256; i++) {
 801c58a:	f109 0901 	add.w	r9, r9, #1
 801c58e:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
 801c592:	d1e6      	bne.n	801c562 <STM32Fs_WriteImageBMPGray+0x206>
  if (width == row_bytes) { /* (width % 4) == 0 */
 801c594:	45a8      	cmp	r8, r5
 801c596:	d027      	beq.n	801c5e8 <STM32Fs_WriteImageBMPGray+0x28c>
  const int waste = (row_bytes / sizeof(uint8_t)) - width;
 801c598:	eba8 0805 	sub.w	r8, r8, r5
 801c59c:	46b2      	mov	sl, r6
      for (int i = 0; i < height; i++) {
 801c59e:	4681      	mov	r9, r0
 801c5a0:	4683      	mov	fp, r0
 801c5a2:	45a1      	cmp	r9, r4
 801c5a4:	d02a      	beq.n	801c5fc <STM32Fs_WriteImageBMPGray+0x2a0>
  FRESULT res = f_write(fp, data, size, &bytes);
 801c5a6:	ab03      	add	r3, sp, #12
 801c5a8:	462a      	mov	r2, r5
 801c5aa:	4651      	mov	r1, sl
 801c5ac:	a804      	add	r0, sp, #16
 801c5ae:	f7fe f8c7 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c5b2:	b100      	cbz	r0, 801c5b6 <STM32Fs_WriteImageBMPGray+0x25a>
 801c5b4:	e7fe      	b.n	801c5b4 <STM32Fs_WriteImageBMPGray+0x258>
  if (bytes != size) while(1);
 801c5b6:	9b03      	ldr	r3, [sp, #12]
 801c5b8:	429d      	cmp	r5, r3
 801c5ba:	d000      	beq.n	801c5be <STM32Fs_WriteImageBMPGray+0x262>
 801c5bc:	e7fe      	b.n	801c5bc <STM32Fs_WriteImageBMPGray+0x260>
          for (int j = 0; j < waste; j++) {
 801c5be:	4606      	mov	r6, r0
 801c5c0:	4546      	cmp	r6, r8
 801c5c2:	da0d      	bge.n	801c5e0 <STM32Fs_WriteImageBMPGray+0x284>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801c5c4:	ab03      	add	r3, sp, #12
 801c5c6:	2201      	movs	r2, #1
 801c5c8:	a902      	add	r1, sp, #8
 801c5ca:	a804      	add	r0, sp, #16
 801c5cc:	f88d b008 	strb.w	fp, [sp, #8]
 801c5d0:	f7fe f8b6 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c5d4:	b100      	cbz	r0, 801c5d8 <STM32Fs_WriteImageBMPGray+0x27c>
 801c5d6:	e7fe      	b.n	801c5d6 <STM32Fs_WriteImageBMPGray+0x27a>
  if (bytes != sizeof(value)) while(1);
 801c5d8:	9b03      	ldr	r3, [sp, #12]
 801c5da:	2b01      	cmp	r3, #1
 801c5dc:	d012      	beq.n	801c604 <STM32Fs_WriteImageBMPGray+0x2a8>
 801c5de:	e7fe      	b.n	801c5de <STM32Fs_WriteImageBMPGray+0x282>
      for (int i = 0; i < height; i++) {
 801c5e0:	f109 0901 	add.w	r9, r9, #1
 801c5e4:	44aa      	add	sl, r5
 801c5e6:	e7dc      	b.n	801c5a2 <STM32Fs_WriteImageBMPGray+0x246>
  FRESULT res = f_write(fp, data, size, &bytes);
 801c5e8:	4631      	mov	r1, r6
 801c5ea:	ab03      	add	r3, sp, #12
 801c5ec:	4652      	mov	r2, sl
 801c5ee:	a804      	add	r0, sp, #16
 801c5f0:	f7fe f8a6 	bl	801a740 <f_write>
  if (res != FR_OK) while(1);
 801c5f4:	b940      	cbnz	r0, 801c608 <STM32Fs_WriteImageBMPGray+0x2ac>
  if (bytes != size) while(1);
 801c5f6:	9b03      	ldr	r3, [sp, #12]
 801c5f8:	459a      	cmp	sl, r3
 801c5fa:	d106      	bne.n	801c60a <STM32Fs_WriteImageBMPGray+0x2ae>
  f_close(&File);
 801c5fc:	a804      	add	r0, sp, #16
 801c5fe:	f7fe f9f5 	bl	801a9ec <f_close>
  return STM32FS_ERROR_NONE;
 801c602:	e6c8      	b.n	801c396 <STM32Fs_WriteImageBMPGray+0x3a>
          for (int j = 0; j < waste; j++) {
 801c604:	3601      	adds	r6, #1
 801c606:	e7db      	b.n	801c5c0 <STM32Fs_WriteImageBMPGray+0x264>
  if (res != FR_OK) while(1);
 801c608:	e7fe      	b.n	801c608 <STM32Fs_WriteImageBMPGray+0x2ac>
  if (bytes != size) while(1);
 801c60a:	e7fe      	b.n	801c60a <STM32Fs_WriteImageBMPGray+0x2ae>

0801c60c <STM32Fs_WriteTextToFile>:
    flags |= FA_CREATE_ALWAYS;
 801c60c:	2a01      	cmp	r2, #1
{
 801c60e:	b530      	push	{r4, r5, lr}
 801c610:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 801c614:	460c      	mov	r4, r1
  if (f_open(&File, path, flags) != FR_OK)
 801c616:	bf08      	it	eq
 801c618:	2232      	moveq	r2, #50	; 0x32
 801c61a:	4601      	mov	r1, r0
 801c61c:	bf18      	it	ne
 801c61e:	220a      	movne	r2, #10
 801c620:	a802      	add	r0, sp, #8
 801c622:	f7fd fd89 	bl	801a138 <f_open>
 801c626:	b9e0      	cbnz	r0, 801c662 <STM32Fs_WriteTextToFile+0x56>
  FRESULT res = f_write(&File, (uint8_t *)content, strlen(content), (void *)&byteswritten);
 801c628:	4620      	mov	r0, r4
 801c62a:	f7e3 fe63 	bl	80002f4 <strlen>
 801c62e:	ab01      	add	r3, sp, #4
 801c630:	4602      	mov	r2, r0
 801c632:	4621      	mov	r1, r4
 801c634:	a802      	add	r0, sp, #8
 801c636:	f7fe f883 	bl	801a740 <f_write>
  if (res != FR_OK)
 801c63a:	4605      	mov	r5, r0
 801c63c:	b9b0      	cbnz	r0, 801c66c <STM32Fs_WriteTextToFile+0x60>
  if (byteswritten != strlen(content))
 801c63e:	4620      	mov	r0, r4
 801c640:	f7e3 fe58 	bl	80002f4 <strlen>
 801c644:	9b01      	ldr	r3, [sp, #4]
 801c646:	4298      	cmp	r0, r3
 801c648:	d004      	beq.n	801c654 <STM32Fs_WriteTextToFile+0x48>
    return STM32FS_ERROR_FILE_WRITE_UNDERFLOW;
 801c64a:	2508      	movs	r5, #8
}
 801c64c:	4628      	mov	r0, r5
 801c64e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801c652:	bd30      	pop	{r4, r5, pc}
  f_close(&File);
 801c654:	a802      	add	r0, sp, #8
 801c656:	f7fe f9c9 	bl	801a9ec <f_close>
}
 801c65a:	4628      	mov	r0, r5
 801c65c:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801c660:	bd30      	pop	{r4, r5, pc}
    return STM32FS_ERROR_FOPEN_FAIL;
 801c662:	2503      	movs	r5, #3
}
 801c664:	4628      	mov	r0, r5
 801c666:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801c66a:	bd30      	pop	{r4, r5, pc}
    return STM32FS_ERROR_FWRITE_FAIL;
 801c66c:	2504      	movs	r5, #4
}
 801c66e:	4628      	mov	r0, r5
 801c670:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801c674:	bd30      	pop	{r4, r5, pc}
 801c676:	bf00      	nop

0801c678 <STM23Fs_ReadImageBMP>:
 * @param path[in] Path to the file in filesystem
 * @param out_buffer[out] pixel buffer
 * @warning In order to know the size of out_buffer, it's recommended to call STM32Fs_GetImageInfoBMP beforehand
 * @return stm32fs_err_t
 */
stm32fs_err_t STM23Fs_ReadImageBMP(const char *path, uint8_t *out_buffer){
 801c678:	4603      	mov	r3, r0

  static FIL File;
  stm32fs_err_t err;

  /* Open the file */
  if (f_open(&File, path, FA_OPEN_EXISTING | FA_READ) != FR_OK)
 801c67a:	2201      	movs	r2, #1
 801c67c:	48ac      	ldr	r0, [pc, #688]	; (801c930 <STM23Fs_ReadImageBMP+0x2b8>)
stm32fs_err_t STM23Fs_ReadImageBMP(const char *path, uint8_t *out_buffer){
 801c67e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c682:	460e      	mov	r6, r1
 801c684:	b091      	sub	sp, #68	; 0x44
  if (f_open(&File, path, FA_OPEN_EXISTING | FA_READ) != FR_OK)
 801c686:	4619      	mov	r1, r3
 801c688:	f7fd fd56 	bl	801a138 <f_open>
 801c68c:	2800      	cmp	r0, #0
 801c68e:	d14d      	bne.n	801c72c <STM23Fs_ReadImageBMP+0xb4>
  F_READ_SAFE(File, header, 2);
 801c690:	ab0b      	add	r3, sp, #44	; 0x2c
 801c692:	2202      	movs	r2, #2
 801c694:	a90a      	add	r1, sp, #40	; 0x28
 801c696:	48a6      	ldr	r0, [pc, #664]	; (801c930 <STM23Fs_ReadImageBMP+0x2b8>)
 801c698:	f7fd ff1a 	bl	801a4d0 <f_read>
 801c69c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c69e:	2b02      	cmp	r3, #2
 801c6a0:	d13c      	bne.n	801c71c <STM23Fs_ReadImageBMP+0xa4>
  if (header[0] != 'B' || header[1] != 'M')
 801c6a2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 801c6a6:	2b42      	cmp	r3, #66	; 0x42
 801c6a8:	d103      	bne.n	801c6b2 <STM23Fs_ReadImageBMP+0x3a>
 801c6aa:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 801c6ae:	2b4d      	cmp	r3, #77	; 0x4d
 801c6b0:	d041      	beq.n	801c736 <STM23Fs_ReadImageBMP+0xbe>
    return STM32FS_ERROR_FILE_NOT_SUPPORTED;
 801c6b2:	2705      	movs	r7, #5
 801c6b4:	e033      	b.n	801c71e <STM23Fs_ReadImageBMP+0xa6>
    if ((rs->bmp_h < 0) && (rs->bmp_w >= 0) && (width == rs->bmp_row_bytes)) {
 801c6b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	f2c0 80a4 	blt.w	801c806 <STM23Fs_ReadImageBMP+0x18e>
      for (int i = 0; i < height; i++) {
 801c6be:	f1b9 0f00 	cmp.w	r9, #0
 801c6c2:	d02c      	beq.n	801c71e <STM23Fs_ReadImageBMP+0xa6>
 801c6c4:	f109 39ff 	add.w	r9, r9, #4294967295
        for (int j = 0; j < rs->bmp_row_bytes; j++) {
 801c6c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
          F_READ_SAFE(File, &pixel, sizeof(pixel));
 801c6ca:	f8df 8264 	ldr.w	r8, [pc, #612]	; 801c930 <STM23Fs_ReadImageBMP+0x2b8>
        for (int j = 0; j < rs->bmp_row_bytes; j++) {
 801c6ce:	46ca      	mov	sl, r9
 801c6d0:	b32b      	cbz	r3, 801c71e <STM23Fs_ReadImageBMP+0xa6>
 801c6d2:	2400      	movs	r4, #0
 801c6d4:	e017      	b.n	801c706 <STM23Fs_ReadImageBMP+0x8e>
          if (j < width) {
 801c6d6:	42a5      	cmp	r5, r4
 801c6d8:	d910      	bls.n	801c6fc <STM23Fs_ReadImageBMP+0x84>
            int x = (rs->bmp_w < 0) ? (width - j - 1) : j; // horizontal flip (BMP file perspective)
 801c6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            IM_SET_GS_PIXEL(pixels, x, y, width, pixel);
 801c6dc:	f89d 101a 	ldrb.w	r1, [sp, #26]
            int x = (rs->bmp_w < 0) ? (width - j - 1) : j; // horizontal flip (BMP file perspective)
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	f105 33ff 	add.w	r3, r5, #4294967295
 801c6e6:	bfb8      	it	lt
 801c6e8:	1b1a      	sublt	r2, r3, r4
            int y = (rs->bmp_h < 0) ? i : (height - i - 1); // vertical flip (BMP file perspective)
 801c6ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c6ec:	2b00      	cmp	r3, #0
 801c6ee:	bfb4      	ite	lt
 801c6f0:	eba9 030a 	sublt.w	r3, r9, sl
 801c6f4:	4653      	movge	r3, sl
            IM_SET_GS_PIXEL(pixels, x, y, width, pixel);
 801c6f6:	fb03 6305 	mla	r3, r3, r5, r6
 801c6fa:	5499      	strb	r1, [r3, r2]
        for (int j = 0; j < rs->bmp_row_bytes; j++) {
 801c6fc:	3401      	adds	r4, #1
 801c6fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c700:	42a3      	cmp	r3, r4
 801c702:	f240 8095 	bls.w	801c830 <STM23Fs_ReadImageBMP+0x1b8>
          F_READ_SAFE(File, &pixel, sizeof(pixel));
 801c706:	ab0a      	add	r3, sp, #40	; 0x28
 801c708:	2201      	movs	r2, #1
 801c70a:	f10d 011a 	add.w	r1, sp, #26
 801c70e:	4640      	mov	r0, r8
 801c710:	f7fd fede 	bl	801a4d0 <f_read>
 801c714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c716:	4622      	mov	r2, r4
 801c718:	2b01      	cmp	r3, #1
 801c71a:	d0dc      	beq.n	801c6d6 <STM23Fs_ReadImageBMP+0x5e>
        F_READ_SAFE(File, &ignore, sizeof(ignore));
 801c71c:	2706      	movs	r7, #6
    return err;
  }

  err = ReadImageBMP(&File, out_buffer , width, height, &rs);

  f_close(&File);
 801c71e:	4884      	ldr	r0, [pc, #528]	; (801c930 <STM23Fs_ReadImageBMP+0x2b8>)
 801c720:	f7fe f964 	bl	801a9ec <f_close>

  return err;
}
 801c724:	4638      	mov	r0, r7
 801c726:	b011      	add	sp, #68	; 0x44
 801c728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return STM32FS_ERROR_FOPEN_FAIL;
 801c72c:	2703      	movs	r7, #3
}
 801c72e:	4638      	mov	r0, r7
 801c730:	b011      	add	sp, #68	; 0x44
 801c732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c736:	a90b      	add	r1, sp, #44	; 0x2c
 801c738:	ab09      	add	r3, sp, #36	; 0x24
 801c73a:	aa08      	add	r2, sp, #32
 801c73c:	487c      	ldr	r0, [pc, #496]	; (801c930 <STM23Fs_ReadImageBMP+0x2b8>)
 801c73e:	9100      	str	r1, [sp, #0]
 801c740:	a907      	add	r1, sp, #28
 801c742:	f7ff f925 	bl	801b990 <GetImageInfoBMP.part.0>
  if( err != STM32FS_ERROR_NONE ){
 801c746:	4607      	mov	r7, r0
 801c748:	2800      	cmp	r0, #0
 801c74a:	d1e8      	bne.n	801c71e <STM23Fs_ReadImageBMP+0xa6>
  if (rs->bmp_bpp == 8) {
 801c74c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801c750:	2b08      	cmp	r3, #8
  err = ReadImageBMP(&File, out_buffer , width, height, &rs);
 801c752:	e9dd 5907 	ldrd	r5, r9, [sp, #28]
  if (rs->bmp_bpp == 8) {
 801c756:	d0ae      	beq.n	801c6b6 <STM23Fs_ReadImageBMP+0x3e>
  } else if (rs->bmp_bpp == 16) {
 801c758:	2b10      	cmp	r3, #16
 801c75a:	d070      	beq.n	801c83e <STM23Fs_ReadImageBMP+0x1c6>
  } else if (rs->bmp_bpp == 24) {
 801c75c:	2b18      	cmp	r3, #24
 801c75e:	d1de      	bne.n	801c71e <STM23Fs_ReadImageBMP+0xa6>
    for (int i = 0; i < height; i++) {
 801c760:	f1b9 0f00 	cmp.w	r9, #0
 801c764:	d0db      	beq.n	801c71e <STM23Fs_ReadImageBMP+0xa6>
 801c766:	f04f 0b01 	mov.w	fp, #1
        F_READ_SAFE(File, &b, sizeof(b));
 801c76a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801c930 <STM23Fs_ReadImageBMP+0x2b8>
 801c76e:	9003      	str	r0, [sp, #12]
      for (int j = 0, jj = rs->bmp_row_bytes / 3; j < jj; j++) {
 801c770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c772:	4a70      	ldr	r2, [pc, #448]	; (801c934 <STM23Fs_ReadImageBMP+0x2bc>)
 801c774:	2b02      	cmp	r3, #2
 801c776:	fba2 2a03 	umull	r2, sl, r2, r3
 801c77a:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 801c77e:	f240 80b1 	bls.w	801c8e4 <STM23Fs_ReadImageBMP+0x26c>
 801c782:	2400      	movs	r4, #0
 801c784:	e01c      	b.n	801c7c0 <STM23Fs_ReadImageBMP+0x148>
 801c786:	4623      	mov	r3, r4
          int y = (rs->bmp_w < 0) ? (height - i - 1) : i; // horizontal flip
 801c788:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
          IM_SET_RGB888_PIXEL(pixels, x, y, width, r, g, b);
 801c78a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
          int y = (rs->bmp_w < 0) ? (height - i - 1) : i; // horizontal flip
 801c78e:	2a00      	cmp	r2, #0
 801c790:	bfac      	ite	ge
 801c792:	f10b 32ff 	addge.w	r2, fp, #4294967295
 801c796:	eba9 020b 	sublt.w	r2, r9, fp
          IM_SET_RGB888_PIXEL(pixels, x, y, width, r, g, b);
 801c79a:	fb05 f202 	mul.w	r2, r5, r2
 801c79e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 801c7a2:	f89d 201a 	ldrb.w	r2, [sp, #26]
 801c7a6:	440b      	add	r3, r1
 801c7a8:	54f2      	strb	r2, [r6, r3]
 801c7aa:	4433      	add	r3, r6
 801c7ac:	f89d 2019 	ldrb.w	r2, [sp, #25]
 801c7b0:	705a      	strb	r2, [r3, #1]
 801c7b2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801c7b6:	709a      	strb	r2, [r3, #2]
      for (int j = 0, jj = rs->bmp_row_bytes / 3; j < jj; j++) {
 801c7b8:	3401      	adds	r4, #1
 801c7ba:	45a2      	cmp	sl, r4
 801c7bc:	f000 8091 	beq.w	801c8e2 <STM23Fs_ReadImageBMP+0x26a>
        F_READ_SAFE(File, &b, sizeof(b));
 801c7c0:	2201      	movs	r2, #1
 801c7c2:	ab0a      	add	r3, sp, #40	; 0x28
 801c7c4:	a906      	add	r1, sp, #24
 801c7c6:	4640      	mov	r0, r8
 801c7c8:	f7fd fe82 	bl	801a4d0 <f_read>
 801c7cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c7ce:	2a01      	cmp	r2, #1
 801c7d0:	d1a4      	bne.n	801c71c <STM23Fs_ReadImageBMP+0xa4>
        F_READ_SAFE(File, &g, sizeof(g));
 801c7d2:	ab0a      	add	r3, sp, #40	; 0x28
 801c7d4:	f10d 0119 	add.w	r1, sp, #25
 801c7d8:	4640      	mov	r0, r8
 801c7da:	f7fd fe79 	bl	801a4d0 <f_read>
 801c7de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c7e0:	2a01      	cmp	r2, #1
 801c7e2:	d19b      	bne.n	801c71c <STM23Fs_ReadImageBMP+0xa4>
        F_READ_SAFE(File, &r, sizeof(r));
 801c7e4:	ab0a      	add	r3, sp, #40	; 0x28
 801c7e6:	f10d 011a 	add.w	r1, sp, #26
 801c7ea:	4640      	mov	r0, r8
 801c7ec:	f7fd fe70 	bl	801a4d0 <f_read>
 801c7f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c7f2:	2b01      	cmp	r3, #1
 801c7f4:	d192      	bne.n	801c71c <STM23Fs_ReadImageBMP+0xa4>
        if (j < width) {
 801c7f6:	42a5      	cmp	r5, r4
 801c7f8:	d9de      	bls.n	801c7b8 <STM23Fs_ReadImageBMP+0x140>
          int x = (rs->bmp_h < 0) ? (width - j - 1) : j; // vertical flip
 801c7fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	dac2      	bge.n	801c786 <STM23Fs_ReadImageBMP+0x10e>
 801c800:	1e6b      	subs	r3, r5, #1
 801c802:	1b1b      	subs	r3, r3, r4
 801c804:	e7c0      	b.n	801c788 <STM23Fs_ReadImageBMP+0x110>
    if ((rs->bmp_h < 0) && (rs->bmp_w >= 0) && (width == rs->bmp_row_bytes)) {
 801c806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c808:	2b00      	cmp	r3, #0
 801c80a:	f6ff af58 	blt.w	801c6be <STM23Fs_ReadImageBMP+0x46>
 801c80e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c810:	429d      	cmp	r5, r3
 801c812:	f47f af54 	bne.w	801c6be <STM23Fs_ReadImageBMP+0x46>
      F_READ_SAFE(File, pixels, height * width);
 801c816:	fb09 f505 	mul.w	r5, r9, r5
 801c81a:	ab0a      	add	r3, sp, #40	; 0x28
 801c81c:	4631      	mov	r1, r6
 801c81e:	4844      	ldr	r0, [pc, #272]	; (801c930 <STM23Fs_ReadImageBMP+0x2b8>)
 801c820:	462a      	mov	r2, r5
 801c822:	f7fd fe55 	bl	801a4d0 <f_read>
 801c826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c828:	429d      	cmp	r5, r3
 801c82a:	bf18      	it	ne
 801c82c:	2706      	movne	r7, #6
 801c82e:	e776      	b.n	801c71e <STM23Fs_ReadImageBMP+0xa6>
      for (int i = 0; i < height; i++) {
 801c830:	f1ba 0f00 	cmp.w	sl, #0
 801c834:	f43f af73 	beq.w	801c71e <STM23Fs_ReadImageBMP+0xa6>
 801c838:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c83c:	e748      	b.n	801c6d0 <STM23Fs_ReadImageBMP+0x58>
    if ((rs->bmp_h < 0) && (rs->bmp_w >= 0) &&
 801c83e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c840:	2b00      	cmp	r3, #0
 801c842:	db39      	blt.n	801c8b8 <STM23Fs_ReadImageBMP+0x240>
      for (int i = 0; i < height; i++) {
 801c844:	f1b9 0f00 	cmp.w	r9, #0
 801c848:	f43f af69 	beq.w	801c71e <STM23Fs_ReadImageBMP+0xa6>
 801c84c:	2300      	movs	r3, #0
 801c84e:	f109 3bff 	add.w	fp, r9, #4294967295
          F_READ_SAFE(File, &pixel, sizeof(pixel));
 801c852:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 801c930 <STM23Fs_ReadImageBMP+0x2b8>
      for (int i = 0; i < height; i++) {
 801c856:	9303      	str	r3, [sp, #12]
 801c858:	1e6b      	subs	r3, r5, #1
 801c85a:	fb05 fb0b 	mul.w	fp, r5, fp
 801c85e:	e9cd 9704 	strd	r9, r7, [sp, #16]
 801c862:	461f      	mov	r7, r3
        for (int j = 0, jj = rs->bmp_row_bytes / 2; j < jj; j++) {
 801c864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c866:	ea5f 0853 	movs.w	r8, r3, lsr #1
 801c86a:	d056      	beq.n	801c91a <STM23Fs_ReadImageBMP+0x2a2>
 801c86c:	2400      	movs	r4, #0
 801c86e:	f10d 091a 	add.w	r9, sp, #26
 801c872:	e00d      	b.n	801c890 <STM23Fs_ReadImageBMP+0x218>
          if (j < width) {
 801c874:	42a5      	cmp	r5, r4
 801c876:	d908      	bls.n	801c88a <STM23Fs_ReadImageBMP+0x212>
            int x = (rs->bmp_w < 0) ? (width - j - 1) : j; // vertical flip
 801c878:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c87a:	2a00      	cmp	r2, #0
            IM_SET_RGB565_PIXEL(pixels, x, y, width, pixel);
 801c87c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c880:	bfb8      	it	lt
 801c882:	1b3b      	sublt	r3, r7, r4
 801c884:	445b      	add	r3, fp
 801c886:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
        for (int j = 0, jj = rs->bmp_row_bytes / 2; j < jj; j++) {
 801c88a:	3401      	adds	r4, #1
 801c88c:	45a0      	cmp	r8, r4
 801c88e:	d00a      	beq.n	801c8a6 <STM23Fs_ReadImageBMP+0x22e>
          F_READ_SAFE(File, &pixel, sizeof(pixel));
 801c890:	ab0a      	add	r3, sp, #40	; 0x28
 801c892:	2202      	movs	r2, #2
 801c894:	4649      	mov	r1, r9
 801c896:	4650      	mov	r0, sl
 801c898:	f7fd fe1a 	bl	801a4d0 <f_read>
 801c89c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c89e:	4623      	mov	r3, r4
 801c8a0:	2a02      	cmp	r2, #2
 801c8a2:	d0e7      	beq.n	801c874 <STM23Fs_ReadImageBMP+0x1fc>
 801c8a4:	e73a      	b.n	801c71c <STM23Fs_ReadImageBMP+0xa4>
      for (int i = 0; i < height; i++) {
 801c8a6:	9b03      	ldr	r3, [sp, #12]
 801c8a8:	9a04      	ldr	r2, [sp, #16]
 801c8aa:	3301      	adds	r3, #1
 801c8ac:	4293      	cmp	r3, r2
 801c8ae:	9303      	str	r3, [sp, #12]
 801c8b0:	d033      	beq.n	801c91a <STM23Fs_ReadImageBMP+0x2a2>
 801c8b2:	ebab 0b05 	sub.w	fp, fp, r5
 801c8b6:	e7d5      	b.n	801c864 <STM23Fs_ReadImageBMP+0x1ec>
    if ((rs->bmp_h < 0) && (rs->bmp_w >= 0) &&
 801c8b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	dbc2      	blt.n	801c844 <STM23Fs_ReadImageBMP+0x1cc>
 801c8be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c8c0:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 801c8c4:	d1be      	bne.n	801c844 <STM23Fs_ReadImageBMP+0x1cc>
      F_READ_SAFE(File, pixels, 2 * width * height);
 801c8c6:	fb09 f405 	mul.w	r4, r9, r5
 801c8ca:	ab0a      	add	r3, sp, #40	; 0x28
 801c8cc:	4631      	mov	r1, r6
 801c8ce:	4818      	ldr	r0, [pc, #96]	; (801c930 <STM23Fs_ReadImageBMP+0x2b8>)
 801c8d0:	0064      	lsls	r4, r4, #1
 801c8d2:	4622      	mov	r2, r4
 801c8d4:	f7fd fdfc 	bl	801a4d0 <f_read>
 801c8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c8da:	429c      	cmp	r4, r3
 801c8dc:	bf18      	it	ne
 801c8de:	2706      	movne	r7, #6
 801c8e0:	e71d      	b.n	801c71e <STM23Fs_ReadImageBMP+0xa6>
      for (int j = 0, jj = rs->bmp_row_bytes % 3; j < jj; j++) {
 801c8e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c8e4:	4a13      	ldr	r2, [pc, #76]	; (801c934 <STM23Fs_ReadImageBMP+0x2bc>)
 801c8e6:	fba2 1203 	umull	r1, r2, r2, r3
 801c8ea:	f022 0a01 	bic.w	sl, r2, #1
 801c8ee:	eb0a 0a52 	add.w	sl, sl, r2, lsr #1
 801c8f2:	ebb3 0a0a 	subs.w	sl, r3, sl
 801c8f6:	d012      	beq.n	801c91e <STM23Fs_ReadImageBMP+0x2a6>
 801c8f8:	2400      	movs	r4, #0
 801c8fa:	f10d 071a 	add.w	r7, sp, #26
 801c8fe:	e001      	b.n	801c904 <STM23Fs_ReadImageBMP+0x28c>
 801c900:	45a2      	cmp	sl, r4
 801c902:	d00c      	beq.n	801c91e <STM23Fs_ReadImageBMP+0x2a6>
        F_READ_SAFE(File, &ignore, sizeof(ignore));
 801c904:	ab0a      	add	r3, sp, #40	; 0x28
 801c906:	2201      	movs	r2, #1
 801c908:	4639      	mov	r1, r7
 801c90a:	4640      	mov	r0, r8
 801c90c:	f7fd fde0 	bl	801a4d0 <f_read>
 801c910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      for (int j = 0, jj = rs->bmp_row_bytes % 3; j < jj; j++) {
 801c912:	3401      	adds	r4, #1
        F_READ_SAFE(File, &ignore, sizeof(ignore));
 801c914:	2b01      	cmp	r3, #1
 801c916:	d0f3      	beq.n	801c900 <STM23Fs_ReadImageBMP+0x288>
 801c918:	e700      	b.n	801c71c <STM23Fs_ReadImageBMP+0xa4>
 801c91a:	9f05      	ldr	r7, [sp, #20]
 801c91c:	e6ff      	b.n	801c71e <STM23Fs_ReadImageBMP+0xa6>
    for (int i = 0; i < height; i++) {
 801c91e:	45d9      	cmp	r9, fp
 801c920:	f10b 0301 	add.w	r3, fp, #1
 801c924:	d001      	beq.n	801c92a <STM23Fs_ReadImageBMP+0x2b2>
 801c926:	469b      	mov	fp, r3
 801c928:	e722      	b.n	801c770 <STM23Fs_ReadImageBMP+0xf8>
 801c92a:	9f03      	ldr	r7, [sp, #12]
 801c92c:	e6f7      	b.n	801c71e <STM23Fs_ReadImageBMP+0xa6>
 801c92e:	bf00      	nop
 801c930:	2400a174 	.word	0x2400a174
 801c934:	aaaaaaab 	.word	0xaaaaaaab

0801c938 <Image_CheckResizeMemoryLayout>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/

/* Functions Definition ------------------------------------------------------*/
uint32_t Image_CheckResizeMemoryLayout(Image_TypeDef *srcImage, Image_TypeDef *dstImage)
{
 801c938:	b410      	push	{r4}
  uint32_t src_size=srcImage->width*srcImage->height*IMG_BYTES_PER_PX(srcImage->format);
 801c93a:	e9d0 3400 	ldrd	r3, r4, [r0]
 801c93e:	7b02      	ldrb	r2, [r0, #12]
 801c940:	fb04 f303 	mul.w	r3, r4, r3
 801c944:	b13a      	cbz	r2, 801c956 <Image_CheckResizeMemoryLayout+0x1e>
 801c946:	2a01      	cmp	r2, #1
 801c948:	d02f      	beq.n	801c9aa <Image_CheckResizeMemoryLayout+0x72>
 801c94a:	2a02      	cmp	r2, #2
 801c94c:	d038      	beq.n	801c9c0 <Image_CheckResizeMemoryLayout+0x88>
 801c94e:	2a03      	cmp	r2, #3
 801c950:	bf0c      	ite	eq
 801c952:	009b      	lsleq	r3, r3, #2
 801c954:	2300      	movne	r3, #0
  uint32_t dst_size=dstImage->width*dstImage->height*IMG_BYTES_PER_PX(dstImage->format);
 801c956:	e9d1 2400 	ldrd	r2, r4, [r1]
 801c95a:	fb04 f202 	mul.w	r2, r4, r2
 801c95e:	7b0c      	ldrb	r4, [r1, #12]
 801c960:	b164      	cbz	r4, 801c97c <Image_CheckResizeMemoryLayout+0x44>
 801c962:	2c01      	cmp	r4, #1
 801c964:	d009      	beq.n	801c97a <Image_CheckResizeMemoryLayout+0x42>
 801c966:	2c02      	cmp	r4, #2
 801c968:	d023      	beq.n	801c9b2 <Image_CheckResizeMemoryLayout+0x7a>
 801c96a:	2c03      	cmp	r4, #3
 801c96c:	d01f      	beq.n	801c9ae <Image_CheckResizeMemoryLayout+0x76>
  uint32_t src_start_address=(uint32_t)srcImage->pData;
 801c96e:	6880      	ldr	r0, [r0, #8]
  uint32_t dst_start_address=(uint32_t)dstImage->pData;
 801c970:	6889      	ldr	r1, [r1, #8]
  uint32_t src_end_address=src_start_address + src_size -1;
 801c972:	1e44      	subs	r4, r0, #1
  uint32_t dst_end_address=dst_start_address + dst_size -1;
 801c974:	1e4a      	subs	r2, r1, #1
  uint32_t src_end_address=src_start_address + src_size -1;
 801c976:	4423      	add	r3, r4
  
  if(src_size < dst_size)
 801c978:	e009      	b.n	801c98e <Image_CheckResizeMemoryLayout+0x56>
  uint32_t dst_size=dstImage->width*dstImage->height*IMG_BYTES_PER_PX(dstImage->format);
 801c97a:	0052      	lsls	r2, r2, #1
  if(src_size < dst_size)
 801c97c:	4293      	cmp	r3, r2
  uint32_t src_start_address=(uint32_t)srcImage->pData;
 801c97e:	6880      	ldr	r0, [r0, #8]
  uint32_t dst_start_address=(uint32_t)dstImage->pData;
 801c980:	6889      	ldr	r1, [r1, #8]
  if(src_size < dst_size)
 801c982:	d200      	bcs.n	801c986 <Image_CheckResizeMemoryLayout+0x4e>
  {
    while(1);
 801c984:	e7fe      	b.n	801c984 <Image_CheckResizeMemoryLayout+0x4c>
  uint32_t src_end_address=src_start_address + src_size -1;
 801c986:	1e44      	subs	r4, r0, #1
 801c988:	4423      	add	r3, r4
  uint32_t dst_end_address=dst_start_address + dst_size -1;
 801c98a:	1e4c      	subs	r4, r1, #1
 801c98c:	4422      	add	r2, r4
  }
  else
  {
    if((src_start_address >= dst_start_address) || (src_end_address <= dst_start_address))
 801c98e:	4288      	cmp	r0, r1
 801c990:	d207      	bcs.n	801c9a2 <Image_CheckResizeMemoryLayout+0x6a>
 801c992:	4299      	cmp	r1, r3
 801c994:	bf34      	ite	cc
 801c996:	2000      	movcc	r0, #0
 801c998:	2001      	movcs	r0, #1
 801c99a:	b910      	cbnz	r0, 801c9a2 <Image_CheckResizeMemoryLayout+0x6a>
    {
      return 1;
    }
    else if((src_end_address > dst_start_address) && (dst_end_address >= src_end_address))
 801c99c:	4293      	cmp	r3, r2
 801c99e:	d901      	bls.n	801c9a4 <Image_CheckResizeMemoryLayout+0x6c>
    {
      return 0;
    }
    else
    {
      while(1);
 801c9a0:	e7fe      	b.n	801c9a0 <Image_CheckResizeMemoryLayout+0x68>
      return 1;
 801c9a2:	2001      	movs	r0, #1
    }
  }
}
 801c9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9a8:	4770      	bx	lr
  uint32_t src_size=srcImage->width*srcImage->height*IMG_BYTES_PER_PX(srcImage->format);
 801c9aa:	005b      	lsls	r3, r3, #1
 801c9ac:	e7d3      	b.n	801c956 <Image_CheckResizeMemoryLayout+0x1e>
  uint32_t dst_size=dstImage->width*dstImage->height*IMG_BYTES_PER_PX(dstImage->format);
 801c9ae:	0092      	lsls	r2, r2, #2
 801c9b0:	e7e4      	b.n	801c97c <Image_CheckResizeMemoryLayout+0x44>
 801c9b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  uint32_t src_start_address=(uint32_t)srcImage->pData;
 801c9b6:	6880      	ldr	r0, [r0, #8]
  uint32_t dst_start_address=(uint32_t)dstImage->pData;
 801c9b8:	6889      	ldr	r1, [r1, #8]
  if(src_size < dst_size)
 801c9ba:	4293      	cmp	r3, r2
 801c9bc:	d3e2      	bcc.n	801c984 <Image_CheckResizeMemoryLayout+0x4c>
 801c9be:	e7e2      	b.n	801c986 <Image_CheckResizeMemoryLayout+0x4e>
  uint32_t src_size=srcImage->width*srcImage->height*IMG_BYTES_PER_PX(srcImage->format);
 801c9c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c9c4:	e7c7      	b.n	801c956 <Image_CheckResizeMemoryLayout+0x1e>
 801c9c6:	bf00      	nop

0801c9c8 <ImageResize_NearestNeighbor>:
* @param  Top2Bottom   Value of 1/0 indicates that the rescales performs from the top/bottom to the bottom/top of the buffers
* @retval void         None
*/
void ImageResize_NearestNeighbor(Image_TypeDef *srcImage, Image_TypeDef *dstImage, Roi_TypeDef *roi)
{
  Resize_Frame(srcImage, dstImage, roi);
 801c9c8:	f7fe be9e 	b.w	801b708 <Resize_Frame>

0801c9cc <UTIL_LCD_SetFuncDriver>:
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801c9cc:	6803      	ldr	r3, [r0, #0]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
  FuncDriver.FillRect       = pDrv->FillRect;
  FuncDriver.GetPixel       = pDrv->GetPixel;
  FuncDriver.SetPixel       = pDrv->SetPixel;
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
 801c9ce:	6a02      	ldr	r2, [r0, #32]
{
 801c9d0:	b570      	push	{r4, r5, r6, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801c9d2:	4c14      	ldr	r4, [pc, #80]	; (801ca24 <UTIL_LCD_SetFuncDriver+0x58>)
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 801c9d4:	2500      	movs	r5, #0
 801c9d6:	4e14      	ldr	r6, [pc, #80]	; (801ca28 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801c9d8:	6023      	str	r3, [r4, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801c9da:	6843      	ldr	r3, [r0, #4]
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801c9dc:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.GetYSize       = pDrv->GetYSize;
 801c9e0:	6222      	str	r2, [r4, #32]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801c9e2:	6063      	str	r3, [r4, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 801c9e4:	6883      	ldr	r3, [r0, #8]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 801c9e6:	6a42      	ldr	r2, [r0, #36]	; 0x24
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 801c9e8:	60a3      	str	r3, [r4, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801c9ea:	68c3      	ldr	r3, [r0, #12]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 801c9ec:	6262      	str	r2, [r4, #36]	; 0x24
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801c9ee:	60e3      	str	r3, [r4, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 801c9f0:	6903      	ldr	r3, [r0, #16]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801c9f2:	6a82      	ldr	r2, [r0, #40]	; 0x28
  FuncDriver.FillRect       = pDrv->FillRect;
 801c9f4:	6123      	str	r3, [r4, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 801c9f6:	6943      	ldr	r3, [r0, #20]
  DrawProp->LcdLayer = 0;
 801c9f8:	60f5      	str	r5, [r6, #12]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 801c9fa:	6163      	str	r3, [r4, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 801c9fc:	6983      	ldr	r3, [r0, #24]
  DrawProp->LcdDevice = 0;
 801c9fe:	6135      	str	r5, [r6, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 801ca00:	61a3      	str	r3, [r4, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801ca02:	69c3      	ldr	r3, [r0, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801ca04:	4628      	mov	r0, r5
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801ca06:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801ca08:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801ca0a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 801ca0c:	f106 0118 	add.w	r1, r6, #24
 801ca10:	6a23      	ldr	r3, [r4, #32]
 801ca12:	4628      	mov	r0, r5
 801ca14:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801ca16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ca18:	f106 011c 	add.w	r1, r6, #28
 801ca1c:	4628      	mov	r0, r5
}
 801ca1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801ca22:	4718      	bx	r3
 801ca24:	2400a738 	.word	0x2400a738
 801ca28:	2400a6f8 	.word	0x2400a6f8

0801ca2c <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 801ca2c:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 801ca2e:	4b05      	ldr	r3, [pc, #20]	; (801ca44 <UTIL_LCD_SetLayer+0x18>)
 801ca30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca32:	b133      	cbz	r3, 801ca42 <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 801ca34:	4d04      	ldr	r5, [pc, #16]	; (801ca48 <UTIL_LCD_SetLayer+0x1c>)
 801ca36:	4604      	mov	r4, r0
 801ca38:	4601      	mov	r1, r0
 801ca3a:	6928      	ldr	r0, [r5, #16]
 801ca3c:	4798      	blx	r3
 801ca3e:	b900      	cbnz	r0, 801ca42 <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 801ca40:	60ec      	str	r4, [r5, #12]
    }
  }
}
 801ca42:	bd38      	pop	{r3, r4, r5, pc}
 801ca44:	2400a738 	.word	0x2400a738
 801ca48:	2400a6f8 	.word	0x2400a6f8

0801ca4c <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 801ca4c:	4a02      	ldr	r2, [pc, #8]	; (801ca58 <UTIL_LCD_SetTextColor+0xc>)
 801ca4e:	68d3      	ldr	r3, [r2, #12]
 801ca50:	015b      	lsls	r3, r3, #5
 801ca52:	50d0      	str	r0, [r2, r3]
}
 801ca54:	4770      	bx	lr
 801ca56:	bf00      	nop
 801ca58:	2400a6f8 	.word	0x2400a6f8

0801ca5c <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 801ca5c:	4b02      	ldr	r3, [pc, #8]	; (801ca68 <UTIL_LCD_SetBackColor+0xc>)
 801ca5e:	68da      	ldr	r2, [r3, #12]
 801ca60:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801ca64:	6058      	str	r0, [r3, #4]
}
 801ca66:	4770      	bx	lr
 801ca68:	2400a6f8 	.word	0x2400a6f8

0801ca6c <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 801ca6c:	4b02      	ldr	r3, [pc, #8]	; (801ca78 <UTIL_LCD_SetFont+0xc>)
 801ca6e:	68da      	ldr	r2, [r3, #12]
 801ca70:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801ca74:	6098      	str	r0, [r3, #8]
}
 801ca76:	4770      	bx	lr
 801ca78:	2400a6f8 	.word	0x2400a6f8

0801ca7c <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
 801ca7c:	4b02      	ldr	r3, [pc, #8]	; (801ca88 <UTIL_LCD_GetFont+0xc>)
 801ca7e:	68da      	ldr	r2, [r3, #12]
 801ca80:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
 801ca84:	6898      	ldr	r0, [r3, #8]
 801ca86:	4770      	bx	lr
 801ca88:	2400a6f8 	.word	0x2400a6f8

0801ca8c <UTIL_LCD_Clear>:
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801ca8c:	4914      	ldr	r1, [pc, #80]	; (801cae0 <UTIL_LCD_Clear+0x54>)
{
 801ca8e:	4602      	mov	r2, r0
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ca90:	69c8      	ldr	r0, [r1, #28]
 801ca92:	2802      	cmp	r0, #2
{
 801ca94:	b530      	push	{r4, r5, lr}
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801ca96:	e9d1 3405 	ldrd	r3, r4, [r1, #20]
{
 801ca9a:	b083      	sub	sp, #12
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ca9c:	d009      	beq.n	801cab2 <UTIL_LCD_Clear+0x26>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 801ca9e:	6908      	ldr	r0, [r1, #16]
 801caa0:	4d10      	ldr	r5, [pc, #64]	; (801cae4 <UTIL_LCD_Clear+0x58>)
 801caa2:	9201      	str	r2, [sp, #4]
 801caa4:	2200      	movs	r2, #0
 801caa6:	692d      	ldr	r5, [r5, #16]
 801caa8:	4611      	mov	r1, r2
 801caaa:	9400      	str	r4, [sp, #0]
 801caac:	47a8      	blx	r5
}
 801caae:	b003      	add	sp, #12
 801cab0:	bd30      	pop	{r4, r5, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 801cab2:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 801cab6:	480b      	ldr	r0, [pc, #44]	; (801cae4 <UTIL_LCD_Clear+0x58>)
 801cab8:	9400      	str	r4, [sp, #0]
 801caba:	6904      	ldr	r4, [r0, #16]
 801cabc:	6908      	ldr	r0, [r1, #16]
 801cabe:	f40c 61fc 	and.w	r1, ip, #2016	; 0x7e0
 801cac2:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801cac6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801caca:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cace:	ea41 010c 	orr.w	r1, r1, ip
 801cad2:	4311      	orrs	r1, r2
 801cad4:	2200      	movs	r2, #0
 801cad6:	9101      	str	r1, [sp, #4]
 801cad8:	4611      	mov	r1, r2
 801cada:	47a0      	blx	r4
}
 801cadc:	b003      	add	sp, #12
 801cade:	bd30      	pop	{r4, r5, pc}
 801cae0:	2400a6f8 	.word	0x2400a6f8
 801cae4:	2400a738 	.word	0x2400a738

0801cae8 <UTIL_LCD_DisplayChar>:
{
 801cae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801caec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801cc68 <UTIL_LCD_DisplayChar+0x180>
 801caf0:	3a20      	subs	r2, #32
 801caf2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801caf6:	eb09 1443 	add.w	r4, r9, r3, lsl #5
{
 801cafa:	ed2d 8b02 	vpush	{d8}
 801cafe:	ee08 0a10 	vmov	s16, r0
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801cb02:	0158      	lsls	r0, r3, #5
 801cb04:	68a3      	ldr	r3, [r4, #8]
{
 801cb06:	b0ab      	sub	sp, #172	; 0xac
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801cb08:	889d      	ldrh	r5, [r3, #4]
 801cb0a:	88dc      	ldrh	r4, [r3, #6]
 801cb0c:	f105 0807 	add.w	r8, r5, #7
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	fb04 f202 	mul.w	r2, r4, r2
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801cb16:	ea4f 07e8 	mov.w	r7, r8, asr #3
  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 801cb1a:	f028 0607 	bic.w	r6, r8, #7
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801cb1e:	9503      	str	r5, [sp, #12]
 801cb20:	fb07 f202 	mul.w	r2, r7, r2
  offset =  8 *((width + 7)/8) -  width ;
 801cb24:	9605      	str	r6, [sp, #20]

  for(i = 0; i < height; i++)
 801cb26:	2c00      	cmp	r4, #0
 801cb28:	f000 808b 	beq.w	801cc42 <UTIL_LCD_DisplayChar+0x15a>
 801cb2c:	189f      	adds	r7, r3, r2
 801cb2e:	190b      	adds	r3, r1, r4
 801cb30:	aa12      	add	r2, sp, #72	; 0x48
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 801cb32:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 801cb36:	9304      	str	r3, [sp, #16]
 801cb38:	462b      	mov	r3, r5
 801cb3a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801cb3e:	aa06      	add	r2, sp, #24
 801cb40:	1c4e      	adds	r6, r1, #1

    switch(((width + 7)/8))
 801cb42:	f1b8 0f01 	cmp.w	r8, #1
 801cb46:	eb02 0343 	add.w	r3, r2, r3, lsl #1

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
    {
      for (j = 0; j < width; j++)
      {
        if(line & (1 << (width- j + offset- 1)))
 801cb4a:	f04f 0401 	mov.w	r4, #1
 801cb4e:	46ab      	mov	fp, r5
 801cb50:	f106 32ff 	add.w	r2, r6, #4294967295
    switch(((width + 7)/8))
 801cb54:	9302      	str	r3, [sp, #8]
 801cb56:	d03b      	beq.n	801cbd0 <UTIL_LCD_DisplayChar+0xe8>
 801cb58:	f1b8 0f02 	cmp.w	r8, #2
 801cb5c:	d07d      	beq.n	801cc5a <UTIL_LCD_DisplayChar+0x172>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801cb5e:	787b      	ldrb	r3, [r7, #1]
 801cb60:	7839      	ldrb	r1, [r7, #0]
 801cb62:	021b      	lsls	r3, r3, #8
 801cb64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801cb68:	78b9      	ldrb	r1, [r7, #2]
 801cb6a:	430b      	orrs	r3, r1
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801cb6c:	4448      	add	r0, r9
 801cb6e:	69c1      	ldr	r1, [r0, #28]
 801cb70:	2902      	cmp	r1, #2
      for (j = 0; j < width; j++)
 801cb72:	9903      	ldr	r1, [sp, #12]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801cb74:	d032      	beq.n	801cbdc <UTIL_LCD_DisplayChar+0xf4>
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
    }
    else
    {
      for (j = 0; j < width; j++)
 801cb76:	b189      	cbz	r1, 801cb9c <UTIL_LCD_DisplayChar+0xb4>
 801cb78:	9905      	ldr	r1, [sp, #20]
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 801cb7a:	465d      	mov	r5, fp
 801cb7c:	e9d0 ea00 	ldrd	lr, sl, [r0]
 801cb80:	1e48      	subs	r0, r1, #1
 801cb82:	a912      	add	r1, sp, #72	; 0x48
        if(line & (1 << (width- j + offset- 1)))
 801cb84:	fa04 fc00 	lsl.w	ip, r4, r0
 801cb88:	ea1c 0f03 	tst.w	ip, r3
 801cb8c:	d05e      	beq.n	801cc4c <UTIL_LCD_DisplayChar+0x164>
 801cb8e:	f841 eb04 	str.w	lr, [r1], #4
      for (j = 0; j < width; j++)
 801cb92:	428d      	cmp	r5, r1
 801cb94:	f100 30ff 	add.w	r0, r0, #4294967295
 801cb98:	d1f4      	bne.n	801cb84 <UTIL_LCD_DisplayChar+0x9c>
 801cb9a:	46ab      	mov	fp, r5
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801cb9c:	9b03      	ldr	r3, [sp, #12]
 801cb9e:	ee18 1a10 	vmov	r1, s16
 801cba2:	9401      	str	r4, [sp, #4]
  for(i = 0; i < height; i++)
 801cba4:	4447      	add	r7, r8
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801cba6:	9300      	str	r3, [sp, #0]
 801cba8:	4b2e      	ldr	r3, [pc, #184]	; (801cc64 <UTIL_LCD_DisplayChar+0x17c>)
 801cbaa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801cbae:	685b      	ldr	r3, [r3, #4]
 801cbb0:	461d      	mov	r5, r3
 801cbb2:	ab12      	add	r3, sp, #72	; 0x48
 801cbb4:	47a8      	blx	r5
  for(i = 0; i < height; i++)
 801cbb6:	9b04      	ldr	r3, [sp, #16]
 801cbb8:	429e      	cmp	r6, r3
 801cbba:	d042      	beq.n	801cc42 <UTIL_LCD_DisplayChar+0x15a>
 801cbbc:	3601      	adds	r6, #1
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801cbbe:	f8d9 000c 	ldr.w	r0, [r9, #12]
    switch(((width + 7)/8))
 801cbc2:	f1b8 0f01 	cmp.w	r8, #1
 801cbc6:	ea4f 1040 	mov.w	r0, r0, lsl #5
 801cbca:	f106 32ff 	add.w	r2, r6, #4294967295
 801cbce:	d1c3      	bne.n	801cb58 <UTIL_LCD_DisplayChar+0x70>
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801cbd0:	4448      	add	r0, r9
      line =  pchar[0];
 801cbd2:	783b      	ldrb	r3, [r7, #0]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801cbd4:	69c1      	ldr	r1, [r0, #28]
 801cbd6:	2902      	cmp	r1, #2
      for (j = 0; j < width; j++)
 801cbd8:	9903      	ldr	r1, [sp, #12]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801cbda:	d1cc      	bne.n	801cb76 <UTIL_LCD_DisplayChar+0x8e>
      for (j = 0; j < width; j++)
 801cbdc:	b309      	cbz	r1, 801cc22 <UTIL_LCD_DisplayChar+0x13a>
 801cbde:	9905      	ldr	r1, [sp, #20]
 801cbe0:	f10d 0c18 	add.w	ip, sp, #24
 801cbe4:	465d      	mov	r5, fp
 801cbe6:	f101 3eff 	add.w	lr, r1, #4294967295
        if(line & (1 << (width- j + offset- 1)))
 801cbea:	fa04 f10e 	lsl.w	r1, r4, lr
      for (j = 0; j < width; j++)
 801cbee:	f10e 3eff 	add.w	lr, lr, #4294967295
        if(line & (1 << (width- j + offset- 1)))
 801cbf2:	4219      	tst	r1, r3
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 801cbf4:	bf14      	ite	ne
 801cbf6:	f8d0 a000 	ldrne.w	sl, [r0]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801cbfa:	f8d0 a004 	ldreq.w	sl, [r0, #4]
 801cbfe:	ea4f 41da 	mov.w	r1, sl, lsr #19
 801cc02:	f3ca 0bc4 	ubfx	fp, sl, #3, #5
 801cc06:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801cc0a:	ea4b 21c1 	orr.w	r1, fp, r1, lsl #11
 801cc0e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801cc12:	ea41 010a 	orr.w	r1, r1, sl
 801cc16:	f82c 1b02 	strh.w	r1, [ip], #2
      for (j = 0; j < width; j++)
 801cc1a:	9902      	ldr	r1, [sp, #8]
 801cc1c:	458c      	cmp	ip, r1
 801cc1e:	d1e4      	bne.n	801cbea <UTIL_LCD_DisplayChar+0x102>
 801cc20:	46ab      	mov	fp, r5
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801cc22:	9b03      	ldr	r3, [sp, #12]
 801cc24:	ee18 1a10 	vmov	r1, s16
 801cc28:	9401      	str	r4, [sp, #4]
  for(i = 0; i < height; i++)
 801cc2a:	4447      	add	r7, r8
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801cc2c:	9300      	str	r3, [sp, #0]
 801cc2e:	4b0d      	ldr	r3, [pc, #52]	; (801cc64 <UTIL_LCD_DisplayChar+0x17c>)
 801cc30:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801cc34:	685b      	ldr	r3, [r3, #4]
 801cc36:	461d      	mov	r5, r3
 801cc38:	ab06      	add	r3, sp, #24
 801cc3a:	47a8      	blx	r5
  for(i = 0; i < height; i++)
 801cc3c:	9b04      	ldr	r3, [sp, #16]
 801cc3e:	429e      	cmp	r6, r3
 801cc40:	d1bc      	bne.n	801cbbc <UTIL_LCD_DisplayChar+0xd4>
}
 801cc42:	b02b      	add	sp, #172	; 0xac
 801cc44:	ecbd 8b02 	vpop	{d8}
 801cc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc4c:	f841 ab04 	str.w	sl, [r1], #4
      for (j = 0; j < width; j++)
 801cc50:	42a9      	cmp	r1, r5
 801cc52:	f100 30ff 	add.w	r0, r0, #4294967295
 801cc56:	d195      	bne.n	801cb84 <UTIL_LCD_DisplayChar+0x9c>
 801cc58:	e79f      	b.n	801cb9a <UTIL_LCD_DisplayChar+0xb2>
      line =  (pchar[0]<< 8) | pchar[1];
 801cc5a:	883b      	ldrh	r3, [r7, #0]
 801cc5c:	ba5b      	rev16	r3, r3
 801cc5e:	b29b      	uxth	r3, r3
      break;
 801cc60:	e784      	b.n	801cb6c <UTIL_LCD_DisplayChar+0x84>
 801cc62:	bf00      	nop
 801cc64:	2400a738 	.word	0x2400a738
 801cc68:	2400a6f8 	.word	0x2400a6f8

0801cc6c <UTIL_LCD_DisplayStringAt>:
{
 801cc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc70:	460f      	mov	r7, r1
  while (*ptr++) size ++ ;
 801cc72:	4611      	mov	r1, r2
{
 801cc74:	4614      	mov	r4, r2
 801cc76:	4680      	mov	r8, r0
  while (*ptr++) size ++ ;
 801cc78:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cc7c:	2a00      	cmp	r2, #0
 801cc7e:	d044      	beq.n	801cd0a <UTIL_LCD_DisplayStringAt+0x9e>
  uint32_t size = 0, xsize = 0;
 801cc80:	2000      	movs	r0, #0
  while (*ptr++) size ++ ;
 801cc82:	f811 5b01 	ldrb.w	r5, [r1], #1
 801cc86:	3001      	adds	r0, #1
 801cc88:	2d00      	cmp	r5, #0
 801cc8a:	d1fa      	bne.n	801cc82 <UTIL_LCD_DisplayStringAt+0x16>
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801cc8c:	4d20      	ldr	r5, [pc, #128]	; (801cd10 <UTIL_LCD_DisplayStringAt+0xa4>)
  switch (Mode)
 801cc8e:	2b01      	cmp	r3, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801cc90:	68e9      	ldr	r1, [r5, #12]
 801cc92:	eb05 1141 	add.w	r1, r5, r1, lsl #5
 801cc96:	6889      	ldr	r1, [r1, #8]
 801cc98:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 801cc9c:	6969      	ldr	r1, [r5, #20]
 801cc9e:	fbb1 f6fc 	udiv	r6, r1, ip
  switch (Mode)
 801cca2:	d02c      	beq.n	801ccfe <UTIL_LCD_DisplayStringAt+0x92>
 801cca4:	2b02      	cmp	r3, #2
 801cca6:	d104      	bne.n	801ccb2 <UTIL_LCD_DisplayStringAt+0x46>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 801cca8:	1a30      	subs	r0, r6, r0
 801ccaa:	fb0c f000 	mul.w	r0, ip, r0
 801ccae:	eba0 0808 	sub.w	r8, r0, r8
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801ccb2:	b289      	uxth	r1, r1
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 801ccb4:	f108 30ff 	add.w	r0, r8, #4294967295
 801ccb8:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    refcolumn = 1;
 801ccbc:	4298      	cmp	r0, r3
 801ccbe:	bf88      	it	hi
 801ccc0:	f04f 0801 	movhi.w	r8, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801ccc4:	458c      	cmp	ip, r1
 801ccc6:	d818      	bhi.n	801ccfa <UTIL_LCD_DisplayStringAt+0x8e>
 801ccc8:	b1ba      	cbz	r2, 801ccfa <UTIL_LCD_DisplayStringAt+0x8e>
 801ccca:	f1c4 0601 	rsb	r6, r4, #1
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 801ccce:	4640      	mov	r0, r8
 801ccd0:	4639      	mov	r1, r7
 801ccd2:	f7ff ff09 	bl	801cae8 <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801ccd6:	68ea      	ldr	r2, [r5, #12]
 801ccd8:	1930      	adds	r0, r6, r4
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801ccda:	696b      	ldr	r3, [r5, #20]
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801ccdc:	eb05 1142 	add.w	r1, r5, r2, lsl #5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801cce0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801cce4:	6889      	ldr	r1, [r1, #8]
 801cce6:	f8b1 c004 	ldrh.w	ip, [r1, #4]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801ccea:	fb00 331c 	mls	r3, r0, ip, r3
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801ccee:	44e0      	add	r8, ip
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801ccf0:	b29b      	uxth	r3, r3
 801ccf2:	459c      	cmp	ip, r3
 801ccf4:	d801      	bhi.n	801ccfa <UTIL_LCD_DisplayStringAt+0x8e>
 801ccf6:	2a00      	cmp	r2, #0
 801ccf8:	d1e9      	bne.n	801ccce <UTIL_LCD_DisplayStringAt+0x62>
}
 801ccfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 801ccfe:	1a30      	subs	r0, r6, r0
 801cd00:	fb0c f000 	mul.w	r0, ip, r0
 801cd04:	eb08 0850 	add.w	r8, r8, r0, lsr #1
      break;
 801cd08:	e7d3      	b.n	801ccb2 <UTIL_LCD_DisplayStringAt+0x46>
  uint32_t size = 0, xsize = 0;
 801cd0a:	4610      	mov	r0, r2
 801cd0c:	e7be      	b.n	801cc8c <UTIL_LCD_DisplayStringAt+0x20>
 801cd0e:	bf00      	nop
 801cd10:	2400a6f8 	.word	0x2400a6f8

0801cd14 <UTIL_LCD_DrawLine>:
{
 801cd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801cd18:	f64f 75ff 	movw	r5, #65535	; 0xffff
  x_diff = Xpos2 - Xpos1;
 801cd1c:	1a14      	subs	r4, r2, r0
{
 801cd1e:	ed2d 8b02 	vpush	{d8}
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801cd22:	4282      	cmp	r2, r0
 801cd24:	bf34      	ite	cc
 801cd26:	462a      	movcc	r2, r5
 801cd28:	2201      	movcs	r2, #1
{
 801cd2a:	b087      	sub	sp, #28
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801cd2c:	2c00      	cmp	r4, #0
  x = Xpos1;                       /* Start x off at the first pixel */
 801cd2e:	b200      	sxth	r0, r0
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801cd30:	9203      	str	r2, [sp, #12]
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801cd32:	462a      	mov	r2, r5
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801cd34:	bfb8      	it	lt
 801cd36:	4264      	neglt	r4, r4
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801cd38:	428b      	cmp	r3, r1
 801cd3a:	bf28      	it	cs
 801cd3c:	2201      	movcs	r2, #1
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801cd3e:	b224      	sxth	r4, r4
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801cd40:	9204      	str	r2, [sp, #16]
  y_diff = Ypos2 - Ypos1;
 801cd42:	1a5a      	subs	r2, r3, r1
  y = Ypos1;                       /* Start y off at the first pixel */
 801cd44:	b20b      	sxth	r3, r1
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 801cd46:	2a00      	cmp	r2, #0
 801cd48:	bfb8      	it	lt
 801cd4a:	4252      	neglt	r2, r2
 801cd4c:	b212      	sxth	r2, r2
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 801cd4e:	4294      	cmp	r4, r2
 801cd50:	db5b      	blt.n	801ce0a <UTIL_LCD_DrawLine+0xf6>
    num = deltax / 2;
 801cd52:	2c00      	cmp	r4, #0
 801cd54:	4625      	mov	r5, r4
 801cd56:	f04f 0100 	mov.w	r1, #0
 801cd5a:	9f03      	ldr	r7, [sp, #12]
 801cd5c:	bfb8      	it	lt
 801cd5e:	1c65      	addlt	r5, r4, #1
 801cd60:	4688      	mov	r8, r1
 801cd62:	9103      	str	r1, [sp, #12]
 801cd64:	106d      	asrs	r5, r5, #1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801cd66:	2c00      	cmp	r4, #0
 801cd68:	db40      	blt.n	801cdec <UTIL_LCD_DrawLine+0xd8>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801cd6a:	b292      	uxth	r2, r2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801cd6c:	9912      	ldr	r1, [sp, #72]	; 0x48
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801cd6e:	2600      	movs	r6, #0
 801cd70:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801ce28 <UTIL_LCD_DrawLine+0x114>
 801cd74:	9205      	str	r2, [sp, #20]
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801cd76:	0a09      	lsrs	r1, r1, #8
 801cd78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd7a:	46bb      	mov	fp, r7
 801cd7c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801cd80:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 801ce2c <UTIL_LCD_DrawLine+0x118>
 801cd84:	0952      	lsrs	r2, r2, #5
 801cd86:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cd8a:	430a      	orrs	r2, r1
 801cd8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801cd8e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801cd92:	430a      	orrs	r2, r1
 801cd94:	ee08 2a10 	vmov	s16, r2
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801cd98:	f8d9 701c 	ldr.w	r7, [r9, #28]
    UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
 801cd9c:	b281      	uxth	r1, r0
 801cd9e:	b29a      	uxth	r2, r3
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801cda0:	f8d9 0010 	ldr.w	r0, [r9, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801cda4:	2f02      	cmp	r7, #2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801cda6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801cda8:	f8da 7018 	ldr.w	r7, [sl, #24]
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801cdac:	f106 0601 	add.w	r6, r6, #1
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801cdb0:	bf08      	it	eq
 801cdb2:	ee18 3a10 	vmoveq	r3, s16
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801cdb6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801cdba:	47b8      	blx	r7
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801cdbc:	9b05      	ldr	r3, [sp, #20]
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801cdbe:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801cdc2:	195f      	adds	r7, r3, r5
      x += xinc1;                             /* Change the x as appropriate */
 801cdc4:	9b03      	ldr	r3, [sp, #12]
 801cdc6:	18c8      	adds	r0, r1, r3
      y += yinc1;                             /* Change the y as appropriate */
 801cdc8:	9b04      	ldr	r3, [sp, #16]
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801cdca:	b23d      	sxth	r5, r7
    x += xinc2;                               /* Change the x as appropriate */
 801cdcc:	4459      	add	r1, fp
      y += yinc1;                             /* Change the y as appropriate */
 801cdce:	18d3      	adds	r3, r2, r3
    x += xinc2;                               /* Change the x as appropriate */
 801cdd0:	4458      	add	r0, fp
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801cdd2:	b2bf      	uxth	r7, r7
    if (num >= den)                           /* Check if numerator >= denominator */
 801cdd4:	42ac      	cmp	r4, r5
    y += yinc2;                               /* Change the y as appropriate */
 801cdd6:	4443      	add	r3, r8
 801cdd8:	4442      	add	r2, r8
    x += xinc2;                               /* Change the x as appropriate */
 801cdda:	b200      	sxth	r0, r0
      num -= den;                             /* Calculate the new numerator value */
 801cddc:	eba7 0704 	sub.w	r7, r7, r4
    y += yinc2;                               /* Change the y as appropriate */
 801cde0:	b21b      	sxth	r3, r3
    if (num >= den)                           /* Check if numerator >= denominator */
 801cde2:	dc08      	bgt.n	801cdf6 <UTIL_LCD_DrawLine+0xe2>
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801cde4:	b232      	sxth	r2, r6
      num -= den;                             /* Calculate the new numerator value */
 801cde6:	b23d      	sxth	r5, r7
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801cde8:	42a2      	cmp	r2, r4
 801cdea:	ddd5      	ble.n	801cd98 <UTIL_LCD_DrawLine+0x84>
}
 801cdec:	b007      	add	sp, #28
 801cdee:	ecbd 8b02 	vpop	{d8}
 801cdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    y += yinc2;                               /* Change the y as appropriate */
 801cdf6:	b213      	sxth	r3, r2
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801cdf8:	b232      	sxth	r2, r6
    x += xinc2;                               /* Change the x as appropriate */
 801cdfa:	b208      	sxth	r0, r1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801cdfc:	42a2      	cmp	r2, r4
 801cdfe:	ddcb      	ble.n	801cd98 <UTIL_LCD_DrawLine+0x84>
}
 801ce00:	b007      	add	sp, #28
 801ce02:	ecbd 8b02 	vpop	{d8}
 801ce06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 801ce0a:	4621      	mov	r1, r4
 801ce0c:	2a00      	cmp	r2, #0
 801ce0e:	4615      	mov	r5, r2
 801ce10:	4614      	mov	r4, r2
 801ce12:	bfb8      	it	lt
 801ce14:	1c55      	addlt	r5, r2, #1
 801ce16:	460a      	mov	r2, r1
 801ce18:	2100      	movs	r1, #0
 801ce1a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ce1e:	f345 054f 	sbfx	r5, r5, #1, #16
 801ce22:	460f      	mov	r7, r1
 801ce24:	9104      	str	r1, [sp, #16]
 801ce26:	e79e      	b.n	801cd66 <UTIL_LCD_DrawLine+0x52>
 801ce28:	2400a6f8 	.word	0x2400a6f8
 801ce2c:	2400a738 	.word	0x2400a738

0801ce30 <UTIL_LCD_DrawRect>:
{
 801ce30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ce34:	4c3e      	ldr	r4, [pc, #248]	; (801cf30 <UTIL_LCD_DrawRect+0x100>)
{
 801ce36:	469b      	mov	fp, r3
 801ce38:	b083      	sub	sp, #12
 801ce3a:	4682      	mov	sl, r0
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ce3c:	69e3      	ldr	r3, [r4, #28]
{
 801ce3e:	460d      	mov	r5, r1
 801ce40:	4691      	mov	r9, r2
 801ce42:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ce46:	2b02      	cmp	r3, #2
 801ce48:	d031      	beq.n	801ceae <UTIL_LCD_DrawRect+0x7e>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801ce4a:	f8cd 8000 	str.w	r8, [sp]
 801ce4e:	4f39      	ldr	r7, [pc, #228]	; (801cf34 <UTIL_LCD_DrawRect+0x104>)
 801ce50:	464b      	mov	r3, r9
 801ce52:	462a      	mov	r2, r5
 801ce54:	4651      	mov	r1, sl
 801ce56:	6920      	ldr	r0, [r4, #16]
 801ce58:	68be      	ldr	r6, [r7, #8]
 801ce5a:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ce5c:	69e3      	ldr	r3, [r4, #28]
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801ce5e:	f10b 32ff 	add.w	r2, fp, #4294967295
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ce62:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801ce64:	442a      	add	r2, r5
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ce66:	d055      	beq.n	801cf14 <UTIL_LCD_DrawRect+0xe4>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801ce68:	f8cd 8000 	str.w	r8, [sp]
 801ce6c:	464b      	mov	r3, r9
 801ce6e:	4651      	mov	r1, sl
 801ce70:	6920      	ldr	r0, [r4, #16]
 801ce72:	68be      	ldr	r6, [r7, #8]
 801ce74:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ce76:	69e3      	ldr	r3, [r4, #28]
 801ce78:	2b02      	cmp	r3, #2
 801ce7a:	d03d      	beq.n	801cef8 <UTIL_LCD_DrawRect+0xc8>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801ce7c:	f8cd 8000 	str.w	r8, [sp]
 801ce80:	465b      	mov	r3, fp
 801ce82:	4651      	mov	r1, sl
 801ce84:	462a      	mov	r2, r5
 801ce86:	6920      	ldr	r0, [r4, #16]
 801ce88:	68fe      	ldr	r6, [r7, #12]
 801ce8a:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ce8c:	69e3      	ldr	r3, [r4, #28]
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801ce8e:	f109 31ff 	add.w	r1, r9, #4294967295
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ce92:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801ce94:	4451      	add	r1, sl
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ce96:	d018      	beq.n	801ceca <UTIL_LCD_DrawRect+0x9a>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801ce98:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801ce9c:	465b      	mov	r3, fp
 801ce9e:	68ff      	ldr	r7, [r7, #12]
 801cea0:	462a      	mov	r2, r5
 801cea2:	6920      	ldr	r0, [r4, #16]
 801cea4:	46bc      	mov	ip, r7
}
 801cea6:	b003      	add	sp, #12
 801cea8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801ceac:	4760      	bx	ip
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801ceae:	ea4f 1358 	mov.w	r3, r8, lsr #5
 801ceb2:	ea4f 2218 	mov.w	r2, r8, lsr #8
 801ceb6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ceba:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801cebe:	4313      	orrs	r3, r2
 801cec0:	f3c8 02c4 	ubfx	r2, r8, #3, #5
 801cec4:	4313      	orrs	r3, r2
 801cec6:	9300      	str	r3, [sp, #0]
 801cec8:	e7c1      	b.n	801ce4e <UTIL_LCD_DrawRect+0x1e>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801ceca:	6920      	ldr	r0, [r4, #16]
 801cecc:	462a      	mov	r2, r5
 801cece:	ea4f 1458 	mov.w	r4, r8, lsr #5
 801ced2:	68ff      	ldr	r7, [r7, #12]
 801ced4:	ea4f 2518 	mov.w	r5, r8, lsr #8
 801ced8:	f3c8 08c4 	ubfx	r8, r8, #3, #5
 801cedc:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801cee0:	465b      	mov	r3, fp
 801cee2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801cee6:	46bc      	mov	ip, r7
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801cee8:	432c      	orrs	r4, r5
 801ceea:	ea44 0408 	orr.w	r4, r4, r8
 801ceee:	940c      	str	r4, [sp, #48]	; 0x30
}
 801cef0:	b003      	add	sp, #12
 801cef2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801cef6:	4760      	bx	ip
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801cef8:	ea4f 1358 	mov.w	r3, r8, lsr #5
 801cefc:	ea4f 2218 	mov.w	r2, r8, lsr #8
 801cf00:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cf04:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801cf08:	4313      	orrs	r3, r2
 801cf0a:	f3c8 02c4 	ubfx	r2, r8, #3, #5
 801cf0e:	4313      	orrs	r3, r2
 801cf10:	9300      	str	r3, [sp, #0]
 801cf12:	e7b5      	b.n	801ce80 <UTIL_LCD_DrawRect+0x50>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801cf14:	ea4f 1358 	mov.w	r3, r8, lsr #5
 801cf18:	ea4f 2118 	mov.w	r1, r8, lsr #8
 801cf1c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cf20:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801cf24:	430b      	orrs	r3, r1
 801cf26:	f3c8 01c4 	ubfx	r1, r8, #3, #5
 801cf2a:	430b      	orrs	r3, r1
 801cf2c:	9300      	str	r3, [sp, #0]
 801cf2e:	e79d      	b.n	801ce6c <UTIL_LCD_DrawRect+0x3c>
 801cf30:	2400a6f8 	.word	0x2400a6f8
 801cf34:	2400a738 	.word	0x2400a738

0801cf38 <ai_platform_runtime_get_revision>:
 801cf38:	4a1c      	ldr	r2, [pc, #112]	; (801cfac <ai_platform_runtime_get_revision+0x74>)
 801cf3a:	491d      	ldr	r1, [pc, #116]	; (801cfb0 <ai_platform_runtime_get_revision+0x78>)
 801cf3c:	6813      	ldr	r3, [r2, #0]
 801cf3e:	f023 0301 	bic.w	r3, r3, #1
 801cf42:	6013      	str	r3, [r2, #0]
 801cf44:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801cf48:	680b      	ldr	r3, [r1, #0]
 801cf4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cf4e:	189a      	adds	r2, r3, r2
 801cf50:	2a01      	cmp	r2, #1
 801cf52:	d90c      	bls.n	801cf6e <ai_platform_runtime_get_revision+0x36>
 801cf54:	f240 4249 	movw	r2, #1097	; 0x449
 801cf58:	4293      	cmp	r3, r2
 801cf5a:	d008      	beq.n	801cf6e <ai_platform_runtime_get_revision+0x36>
 801cf5c:	4b15      	ldr	r3, [pc, #84]	; (801cfb4 <ai_platform_runtime_get_revision+0x7c>)
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cf64:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801cf68:	d010      	beq.n	801cf8c <ai_platform_runtime_get_revision+0x54>
 801cf6a:	4813      	ldr	r0, [pc, #76]	; (801cfb8 <ai_platform_runtime_get_revision+0x80>)
 801cf6c:	4770      	bx	lr
 801cf6e:	4b13      	ldr	r3, [pc, #76]	; (801cfbc <ai_platform_runtime_get_revision+0x84>)
 801cf70:	2201      	movs	r2, #1
 801cf72:	4619      	mov	r1, r3
 801cf74:	601a      	str	r2, [r3, #0]
 801cf76:	680b      	ldr	r3, [r1, #0]
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	d1fc      	bne.n	801cf76 <ai_platform_runtime_get_revision+0x3e>
 801cf7c:	4b10      	ldr	r3, [pc, #64]	; (801cfc0 <ai_platform_runtime_get_revision+0x88>)
 801cf7e:	4911      	ldr	r1, [pc, #68]	; (801cfc4 <ai_platform_runtime_get_revision+0x8c>)
 801cf80:	4a11      	ldr	r2, [pc, #68]	; (801cfc8 <ai_platform_runtime_get_revision+0x90>)
 801cf82:	6019      	str	r1, [r3, #0]
 801cf84:	681b      	ldr	r3, [r3, #0]
 801cf86:	4293      	cmp	r3, r2
 801cf88:	d0ef      	beq.n	801cf6a <ai_platform_runtime_get_revision+0x32>
 801cf8a:	e7fe      	b.n	801cf8a <ai_platform_runtime_get_revision+0x52>
 801cf8c:	4b0f      	ldr	r3, [pc, #60]	; (801cfcc <ai_platform_runtime_get_revision+0x94>)
 801cf8e:	2201      	movs	r2, #1
 801cf90:	4619      	mov	r1, r3
 801cf92:	601a      	str	r2, [r3, #0]
 801cf94:	680b      	ldr	r3, [r1, #0]
 801cf96:	2b00      	cmp	r3, #0
 801cf98:	d1fc      	bne.n	801cf94 <ai_platform_runtime_get_revision+0x5c>
 801cf9a:	4b0d      	ldr	r3, [pc, #52]	; (801cfd0 <ai_platform_runtime_get_revision+0x98>)
 801cf9c:	4909      	ldr	r1, [pc, #36]	; (801cfc4 <ai_platform_runtime_get_revision+0x8c>)
 801cf9e:	4a0a      	ldr	r2, [pc, #40]	; (801cfc8 <ai_platform_runtime_get_revision+0x90>)
 801cfa0:	6019      	str	r1, [r3, #0]
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	4293      	cmp	r3, r2
 801cfa6:	d0e0      	beq.n	801cf6a <ai_platform_runtime_get_revision+0x32>
 801cfa8:	e7fe      	b.n	801cfa8 <ai_platform_runtime_get_revision+0x70>
 801cfaa:	bf00      	nop
 801cfac:	e0002000 	.word	0xe0002000
 801cfb0:	e0042000 	.word	0xe0042000
 801cfb4:	5c001000 	.word	0x5c001000
 801cfb8:	0802925c 	.word	0x0802925c
 801cfbc:	40023008 	.word	0x40023008
 801cfc0:	40023000 	.word	0x40023000
 801cfc4:	f407a5c2 	.word	0xf407a5c2
 801cfc8:	b5e8b5cd 	.word	0xb5e8b5cd
 801cfcc:	58024c08 	.word	0x58024c08
 801cfd0:	58024c00 	.word	0x58024c00

0801cfd4 <ai_platform_runtime_get_version>:
 801cfd4:	4a1d      	ldr	r2, [pc, #116]	; (801d04c <ai_platform_runtime_get_version+0x78>)
 801cfd6:	b082      	sub	sp, #8
 801cfd8:	491d      	ldr	r1, [pc, #116]	; (801d050 <ai_platform_runtime_get_version+0x7c>)
 801cfda:	6813      	ldr	r3, [r2, #0]
 801cfdc:	f023 0301 	bic.w	r3, r3, #1
 801cfe0:	6013      	str	r3, [r2, #0]
 801cfe2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801cfe6:	680b      	ldr	r3, [r1, #0]
 801cfe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cfec:	189a      	adds	r2, r3, r2
 801cfee:	2a01      	cmp	r2, #1
 801cff0:	d90d      	bls.n	801d00e <ai_platform_runtime_get_version+0x3a>
 801cff2:	f240 4249 	movw	r2, #1097	; 0x449
 801cff6:	4293      	cmp	r3, r2
 801cff8:	d009      	beq.n	801d00e <ai_platform_runtime_get_version+0x3a>
 801cffa:	4b16      	ldr	r3, [pc, #88]	; (801d054 <ai_platform_runtime_get_version+0x80>)
 801cffc:	681b      	ldr	r3, [r3, #0]
 801cffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d002:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d006:	d011      	beq.n	801d02c <ai_platform_runtime_get_version+0x58>
 801d008:	2006      	movs	r0, #6
 801d00a:	b002      	add	sp, #8
 801d00c:	4770      	bx	lr
 801d00e:	4b12      	ldr	r3, [pc, #72]	; (801d058 <ai_platform_runtime_get_version+0x84>)
 801d010:	2201      	movs	r2, #1
 801d012:	4619      	mov	r1, r3
 801d014:	601a      	str	r2, [r3, #0]
 801d016:	680b      	ldr	r3, [r1, #0]
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d1fc      	bne.n	801d016 <ai_platform_runtime_get_version+0x42>
 801d01c:	4b0f      	ldr	r3, [pc, #60]	; (801d05c <ai_platform_runtime_get_version+0x88>)
 801d01e:	4910      	ldr	r1, [pc, #64]	; (801d060 <ai_platform_runtime_get_version+0x8c>)
 801d020:	4a10      	ldr	r2, [pc, #64]	; (801d064 <ai_platform_runtime_get_version+0x90>)
 801d022:	6019      	str	r1, [r3, #0]
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	4293      	cmp	r3, r2
 801d028:	d0ee      	beq.n	801d008 <ai_platform_runtime_get_version+0x34>
 801d02a:	e7fe      	b.n	801d02a <ai_platform_runtime_get_version+0x56>
 801d02c:	4b0e      	ldr	r3, [pc, #56]	; (801d068 <ai_platform_runtime_get_version+0x94>)
 801d02e:	2201      	movs	r2, #1
 801d030:	4619      	mov	r1, r3
 801d032:	601a      	str	r2, [r3, #0]
 801d034:	680b      	ldr	r3, [r1, #0]
 801d036:	2b00      	cmp	r3, #0
 801d038:	d1fc      	bne.n	801d034 <ai_platform_runtime_get_version+0x60>
 801d03a:	4b0c      	ldr	r3, [pc, #48]	; (801d06c <ai_platform_runtime_get_version+0x98>)
 801d03c:	4908      	ldr	r1, [pc, #32]	; (801d060 <ai_platform_runtime_get_version+0x8c>)
 801d03e:	4a09      	ldr	r2, [pc, #36]	; (801d064 <ai_platform_runtime_get_version+0x90>)
 801d040:	6019      	str	r1, [r3, #0]
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	4293      	cmp	r3, r2
 801d046:	d0df      	beq.n	801d008 <ai_platform_runtime_get_version+0x34>
 801d048:	e7fe      	b.n	801d048 <ai_platform_runtime_get_version+0x74>
 801d04a:	bf00      	nop
 801d04c:	e0002000 	.word	0xe0002000
 801d050:	e0042000 	.word	0xe0042000
 801d054:	5c001000 	.word	0x5c001000
 801d058:	40023008 	.word	0x40023008
 801d05c:	40023000 	.word	0x40023000
 801d060:	f407a5c2 	.word	0xf407a5c2
 801d064:	b5e8b5cd 	.word	0xb5e8b5cd
 801d068:	58024c08 	.word	0x58024c08
 801d06c:	58024c00 	.word	0x58024c00

0801d070 <ai_platform_api_get_version>:
 801d070:	4a26      	ldr	r2, [pc, #152]	; (801d10c <ai_platform_api_get_version+0x9c>)
 801d072:	4927      	ldr	r1, [pc, #156]	; (801d110 <ai_platform_api_get_version+0xa0>)
 801d074:	6813      	ldr	r3, [r2, #0]
 801d076:	f023 0301 	bic.w	r3, r3, #1
 801d07a:	6013      	str	r3, [r2, #0]
 801d07c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801d080:	680b      	ldr	r3, [r1, #0]
 801d082:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d086:	189a      	adds	r2, r3, r2
 801d088:	2a01      	cmp	r2, #1
 801d08a:	d921      	bls.n	801d0d0 <ai_platform_api_get_version+0x60>
 801d08c:	f240 4249 	movw	r2, #1097	; 0x449
 801d090:	4293      	cmp	r3, r2
 801d092:	d01d      	beq.n	801d0d0 <ai_platform_api_get_version+0x60>
 801d094:	4b1f      	ldr	r3, [pc, #124]	; (801d114 <ai_platform_api_get_version+0xa4>)
 801d096:	681b      	ldr	r3, [r3, #0]
 801d098:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d09c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d0a0:	d025      	beq.n	801d0ee <ai_platform_api_get_version+0x7e>
 801d0a2:	4b1d      	ldr	r3, [pc, #116]	; (801d118 <ai_platform_api_get_version+0xa8>)
 801d0a4:	2000      	movs	r0, #0
 801d0a6:	681b      	ldr	r3, [r3, #0]
 801d0a8:	b410      	push	{r4}
 801d0aa:	b2dc      	uxtb	r4, r3
 801d0ac:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801d0b0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801d0b4:	0e1b      	lsrs	r3, r3, #24
 801d0b6:	f364 0007 	bfi	r0, r4, #0, #8
 801d0ba:	b083      	sub	sp, #12
 801d0bc:	f361 200f 	bfi	r0, r1, #8, #8
 801d0c0:	f362 4017 	bfi	r0, r2, #16, #8
 801d0c4:	f363 601f 	bfi	r0, r3, #24, #8
 801d0c8:	b003      	add	sp, #12
 801d0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d0ce:	4770      	bx	lr
 801d0d0:	4b12      	ldr	r3, [pc, #72]	; (801d11c <ai_platform_api_get_version+0xac>)
 801d0d2:	2201      	movs	r2, #1
 801d0d4:	4619      	mov	r1, r3
 801d0d6:	601a      	str	r2, [r3, #0]
 801d0d8:	680b      	ldr	r3, [r1, #0]
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d1fc      	bne.n	801d0d8 <ai_platform_api_get_version+0x68>
 801d0de:	4b10      	ldr	r3, [pc, #64]	; (801d120 <ai_platform_api_get_version+0xb0>)
 801d0e0:	4910      	ldr	r1, [pc, #64]	; (801d124 <ai_platform_api_get_version+0xb4>)
 801d0e2:	4a11      	ldr	r2, [pc, #68]	; (801d128 <ai_platform_api_get_version+0xb8>)
 801d0e4:	6019      	str	r1, [r3, #0]
 801d0e6:	681b      	ldr	r3, [r3, #0]
 801d0e8:	4293      	cmp	r3, r2
 801d0ea:	d0da      	beq.n	801d0a2 <ai_platform_api_get_version+0x32>
 801d0ec:	e7fe      	b.n	801d0ec <ai_platform_api_get_version+0x7c>
 801d0ee:	4b0f      	ldr	r3, [pc, #60]	; (801d12c <ai_platform_api_get_version+0xbc>)
 801d0f0:	2201      	movs	r2, #1
 801d0f2:	4619      	mov	r1, r3
 801d0f4:	601a      	str	r2, [r3, #0]
 801d0f6:	680b      	ldr	r3, [r1, #0]
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	d1fc      	bne.n	801d0f6 <ai_platform_api_get_version+0x86>
 801d0fc:	4b0c      	ldr	r3, [pc, #48]	; (801d130 <ai_platform_api_get_version+0xc0>)
 801d0fe:	4909      	ldr	r1, [pc, #36]	; (801d124 <ai_platform_api_get_version+0xb4>)
 801d100:	4a09      	ldr	r2, [pc, #36]	; (801d128 <ai_platform_api_get_version+0xb8>)
 801d102:	6019      	str	r1, [r3, #0]
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	4293      	cmp	r3, r2
 801d108:	d0cb      	beq.n	801d0a2 <ai_platform_api_get_version+0x32>
 801d10a:	e7fe      	b.n	801d10a <ai_platform_api_get_version+0x9a>
 801d10c:	e0002000 	.word	0xe0002000
 801d110:	e0042000 	.word	0xe0042000
 801d114:	5c001000 	.word	0x5c001000
 801d118:	080c3138 	.word	0x080c3138
 801d11c:	40023008 	.word	0x40023008
 801d120:	40023000 	.word	0x40023000
 801d124:	f407a5c2 	.word	0xf407a5c2
 801d128:	b5e8b5cd 	.word	0xb5e8b5cd
 801d12c:	58024c08 	.word	0x58024c08
 801d130:	58024c00 	.word	0x58024c00

0801d134 <ai_platform_interface_api_get_version>:
 801d134:	4a26      	ldr	r2, [pc, #152]	; (801d1d0 <ai_platform_interface_api_get_version+0x9c>)
 801d136:	4927      	ldr	r1, [pc, #156]	; (801d1d4 <ai_platform_interface_api_get_version+0xa0>)
 801d138:	6813      	ldr	r3, [r2, #0]
 801d13a:	f023 0301 	bic.w	r3, r3, #1
 801d13e:	6013      	str	r3, [r2, #0]
 801d140:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801d144:	680b      	ldr	r3, [r1, #0]
 801d146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d14a:	189a      	adds	r2, r3, r2
 801d14c:	2a01      	cmp	r2, #1
 801d14e:	d921      	bls.n	801d194 <ai_platform_interface_api_get_version+0x60>
 801d150:	f240 4249 	movw	r2, #1097	; 0x449
 801d154:	4293      	cmp	r3, r2
 801d156:	d01d      	beq.n	801d194 <ai_platform_interface_api_get_version+0x60>
 801d158:	4b1f      	ldr	r3, [pc, #124]	; (801d1d8 <ai_platform_interface_api_get_version+0xa4>)
 801d15a:	681b      	ldr	r3, [r3, #0]
 801d15c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d160:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d164:	d025      	beq.n	801d1b2 <ai_platform_interface_api_get_version+0x7e>
 801d166:	4b1d      	ldr	r3, [pc, #116]	; (801d1dc <ai_platform_interface_api_get_version+0xa8>)
 801d168:	2000      	movs	r0, #0
 801d16a:	681b      	ldr	r3, [r3, #0]
 801d16c:	b410      	push	{r4}
 801d16e:	b2dc      	uxtb	r4, r3
 801d170:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801d174:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801d178:	0e1b      	lsrs	r3, r3, #24
 801d17a:	f364 0007 	bfi	r0, r4, #0, #8
 801d17e:	b083      	sub	sp, #12
 801d180:	f361 200f 	bfi	r0, r1, #8, #8
 801d184:	f362 4017 	bfi	r0, r2, #16, #8
 801d188:	f363 601f 	bfi	r0, r3, #24, #8
 801d18c:	b003      	add	sp, #12
 801d18e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d192:	4770      	bx	lr
 801d194:	4b12      	ldr	r3, [pc, #72]	; (801d1e0 <ai_platform_interface_api_get_version+0xac>)
 801d196:	2201      	movs	r2, #1
 801d198:	4619      	mov	r1, r3
 801d19a:	601a      	str	r2, [r3, #0]
 801d19c:	680b      	ldr	r3, [r1, #0]
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	d1fc      	bne.n	801d19c <ai_platform_interface_api_get_version+0x68>
 801d1a2:	4b10      	ldr	r3, [pc, #64]	; (801d1e4 <ai_platform_interface_api_get_version+0xb0>)
 801d1a4:	4910      	ldr	r1, [pc, #64]	; (801d1e8 <ai_platform_interface_api_get_version+0xb4>)
 801d1a6:	4a11      	ldr	r2, [pc, #68]	; (801d1ec <ai_platform_interface_api_get_version+0xb8>)
 801d1a8:	6019      	str	r1, [r3, #0]
 801d1aa:	681b      	ldr	r3, [r3, #0]
 801d1ac:	4293      	cmp	r3, r2
 801d1ae:	d0da      	beq.n	801d166 <ai_platform_interface_api_get_version+0x32>
 801d1b0:	e7fe      	b.n	801d1b0 <ai_platform_interface_api_get_version+0x7c>
 801d1b2:	4b0f      	ldr	r3, [pc, #60]	; (801d1f0 <ai_platform_interface_api_get_version+0xbc>)
 801d1b4:	2201      	movs	r2, #1
 801d1b6:	4619      	mov	r1, r3
 801d1b8:	601a      	str	r2, [r3, #0]
 801d1ba:	680b      	ldr	r3, [r1, #0]
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	d1fc      	bne.n	801d1ba <ai_platform_interface_api_get_version+0x86>
 801d1c0:	4b0c      	ldr	r3, [pc, #48]	; (801d1f4 <ai_platform_interface_api_get_version+0xc0>)
 801d1c2:	4909      	ldr	r1, [pc, #36]	; (801d1e8 <ai_platform_interface_api_get_version+0xb4>)
 801d1c4:	4a09      	ldr	r2, [pc, #36]	; (801d1ec <ai_platform_interface_api_get_version+0xb8>)
 801d1c6:	6019      	str	r1, [r3, #0]
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	4293      	cmp	r3, r2
 801d1cc:	d0cb      	beq.n	801d166 <ai_platform_interface_api_get_version+0x32>
 801d1ce:	e7fe      	b.n	801d1ce <ai_platform_interface_api_get_version+0x9a>
 801d1d0:	e0002000 	.word	0xe0002000
 801d1d4:	e0042000 	.word	0xe0042000
 801d1d8:	5c001000 	.word	0x5c001000
 801d1dc:	080c313c 	.word	0x080c313c
 801d1e0:	40023008 	.word	0x40023008
 801d1e4:	40023000 	.word	0x40023000
 801d1e8:	f407a5c2 	.word	0xf407a5c2
 801d1ec:	b5e8b5cd 	.word	0xb5e8b5cd
 801d1f0:	58024c08 	.word	0x58024c08
 801d1f4:	58024c00 	.word	0x58024c00

0801d1f8 <ai_platform_context_acquire>:
 801d1f8:	b120      	cbz	r0, 801d204 <ai_platform_context_acquire+0xc>
 801d1fa:	4b1e      	ldr	r3, [pc, #120]	; (801d274 <ai_platform_context_acquire+0x7c>)
 801d1fc:	6802      	ldr	r2, [r0, #0]
 801d1fe:	429a      	cmp	r2, r3
 801d200:	bf18      	it	ne
 801d202:	2000      	movne	r0, #0
 801d204:	4a1c      	ldr	r2, [pc, #112]	; (801d278 <ai_platform_context_acquire+0x80>)
 801d206:	491d      	ldr	r1, [pc, #116]	; (801d27c <ai_platform_context_acquire+0x84>)
 801d208:	6813      	ldr	r3, [r2, #0]
 801d20a:	f023 0301 	bic.w	r3, r3, #1
 801d20e:	6013      	str	r3, [r2, #0]
 801d210:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801d214:	680b      	ldr	r3, [r1, #0]
 801d216:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d21a:	189a      	adds	r2, r3, r2
 801d21c:	2a01      	cmp	r2, #1
 801d21e:	d90b      	bls.n	801d238 <ai_platform_context_acquire+0x40>
 801d220:	f240 4249 	movw	r2, #1097	; 0x449
 801d224:	4293      	cmp	r3, r2
 801d226:	d007      	beq.n	801d238 <ai_platform_context_acquire+0x40>
 801d228:	4b15      	ldr	r3, [pc, #84]	; (801d280 <ai_platform_context_acquire+0x88>)
 801d22a:	681b      	ldr	r3, [r3, #0]
 801d22c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d230:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d234:	d00f      	beq.n	801d256 <ai_platform_context_acquire+0x5e>
 801d236:	4770      	bx	lr
 801d238:	4b12      	ldr	r3, [pc, #72]	; (801d284 <ai_platform_context_acquire+0x8c>)
 801d23a:	2201      	movs	r2, #1
 801d23c:	4619      	mov	r1, r3
 801d23e:	601a      	str	r2, [r3, #0]
 801d240:	680b      	ldr	r3, [r1, #0]
 801d242:	2b00      	cmp	r3, #0
 801d244:	d1fc      	bne.n	801d240 <ai_platform_context_acquire+0x48>
 801d246:	4b10      	ldr	r3, [pc, #64]	; (801d288 <ai_platform_context_acquire+0x90>)
 801d248:	4910      	ldr	r1, [pc, #64]	; (801d28c <ai_platform_context_acquire+0x94>)
 801d24a:	4a11      	ldr	r2, [pc, #68]	; (801d290 <ai_platform_context_acquire+0x98>)
 801d24c:	6019      	str	r1, [r3, #0]
 801d24e:	681b      	ldr	r3, [r3, #0]
 801d250:	4293      	cmp	r3, r2
 801d252:	d0f0      	beq.n	801d236 <ai_platform_context_acquire+0x3e>
 801d254:	e7fe      	b.n	801d254 <ai_platform_context_acquire+0x5c>
 801d256:	4b0f      	ldr	r3, [pc, #60]	; (801d294 <ai_platform_context_acquire+0x9c>)
 801d258:	2201      	movs	r2, #1
 801d25a:	4619      	mov	r1, r3
 801d25c:	601a      	str	r2, [r3, #0]
 801d25e:	680b      	ldr	r3, [r1, #0]
 801d260:	2b00      	cmp	r3, #0
 801d262:	d1fc      	bne.n	801d25e <ai_platform_context_acquire+0x66>
 801d264:	4b0c      	ldr	r3, [pc, #48]	; (801d298 <ai_platform_context_acquire+0xa0>)
 801d266:	4909      	ldr	r1, [pc, #36]	; (801d28c <ai_platform_context_acquire+0x94>)
 801d268:	4a09      	ldr	r2, [pc, #36]	; (801d290 <ai_platform_context_acquire+0x98>)
 801d26a:	6019      	str	r1, [r3, #0]
 801d26c:	681b      	ldr	r3, [r3, #0]
 801d26e:	4293      	cmp	r3, r2
 801d270:	d0e1      	beq.n	801d236 <ai_platform_context_acquire+0x3e>
 801d272:	e7fe      	b.n	801d272 <ai_platform_context_acquire+0x7a>
 801d274:	a1c00100 	.word	0xa1c00100
 801d278:	e0002000 	.word	0xe0002000
 801d27c:	e0042000 	.word	0xe0042000
 801d280:	5c001000 	.word	0x5c001000
 801d284:	40023008 	.word	0x40023008
 801d288:	40023000 	.word	0x40023000
 801d28c:	f407a5c2 	.word	0xf407a5c2
 801d290:	b5e8b5cd 	.word	0xb5e8b5cd
 801d294:	58024c08 	.word	0x58024c08
 801d298:	58024c00 	.word	0x58024c00

0801d29c <ai_platform_api_get_network_report>:
 801d29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2a0:	460c      	mov	r4, r1
 801d2a2:	b085      	sub	sp, #20
 801d2a4:	4605      	mov	r5, r0
 801d2a6:	b120      	cbz	r0, 801d2b2 <ai_platform_api_get_network_report+0x16>
 801d2a8:	4ba5      	ldr	r3, [pc, #660]	; (801d540 <ai_platform_api_get_network_report+0x2a4>)
 801d2aa:	6802      	ldr	r2, [r0, #0]
 801d2ac:	429a      	cmp	r2, r3
 801d2ae:	bf18      	it	ne
 801d2b0:	2500      	movne	r5, #0
 801d2b2:	4aa4      	ldr	r2, [pc, #656]	; (801d544 <ai_platform_api_get_network_report+0x2a8>)
 801d2b4:	f46f 678a 	mvn.w	r7, #1104	; 0x450
 801d2b8:	49a3      	ldr	r1, [pc, #652]	; (801d548 <ai_platform_api_get_network_report+0x2ac>)
 801d2ba:	6813      	ldr	r3, [r2, #0]
 801d2bc:	f023 0301 	bic.w	r3, r3, #1
 801d2c0:	6013      	str	r3, [r2, #0]
 801d2c2:	680b      	ldr	r3, [r1, #0]
 801d2c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d2c8:	19da      	adds	r2, r3, r7
 801d2ca:	2a01      	cmp	r2, #1
 801d2cc:	f240 808c 	bls.w	801d3e8 <ai_platform_api_get_network_report+0x14c>
 801d2d0:	f240 4249 	movw	r2, #1097	; 0x449
 801d2d4:	4293      	cmp	r3, r2
 801d2d6:	f000 8087 	beq.w	801d3e8 <ai_platform_api_get_network_report+0x14c>
 801d2da:	4b9c      	ldr	r3, [pc, #624]	; (801d54c <ai_platform_api_get_network_report+0x2b0>)
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d2e2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d2e6:	d070      	beq.n	801d3ca <ai_platform_api_get_network_report+0x12e>
 801d2e8:	2d00      	cmp	r5, #0
 801d2ea:	f000 808d 	beq.w	801d408 <ai_platform_api_get_network_report+0x16c>
 801d2ee:	fab4 f384 	clz	r3, r4
 801d2f2:	095b      	lsrs	r3, r3, #5
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	f040 8087 	bne.w	801d408 <ai_platform_api_get_network_report+0x16c>
 801d2fa:	66e3      	str	r3, [r4, #108]	; 0x6c
 801d2fc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801d2fe:	2a00      	cmp	r2, #0
 801d300:	f000 810b 	beq.w	801d51a <ai_platform_api_get_network_report+0x27e>
 801d304:	2301      	movs	r3, #1
 801d306:	66e3      	str	r3, [r4, #108]	; 0x6c
 801d308:	6913      	ldr	r3, [r2, #16]
 801d30a:	b17b      	cbz	r3, 801d32c <ai_platform_api_get_network_report+0x90>
 801d30c:	429a      	cmp	r2, r3
 801d30e:	d00d      	beq.n	801d32c <ai_platform_api_get_network_report+0x90>
 801d310:	2102      	movs	r1, #2
 801d312:	e001      	b.n	801d318 <ai_platform_api_get_network_report+0x7c>
 801d314:	b132      	cbz	r2, 801d324 <ai_platform_api_get_network_report+0x88>
 801d316:	b12a      	cbz	r2, 801d324 <ai_platform_api_get_network_report+0x88>
 801d318:	66e1      	str	r1, [r4, #108]	; 0x6c
 801d31a:	3101      	adds	r1, #1
 801d31c:	691a      	ldr	r2, [r3, #16]
 801d31e:	429a      	cmp	r2, r3
 801d320:	4613      	mov	r3, r2
 801d322:	d1f7      	bne.n	801d314 <ai_platform_api_get_network_report+0x78>
 801d324:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d326:	2b00      	cmp	r3, #0
 801d328:	f000 80f7 	beq.w	801d51a <ai_platform_api_get_network_report+0x27e>
 801d32c:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 801d330:	2b00      	cmp	r3, #0
 801d332:	f000 80e6 	beq.w	801d502 <ai_platform_api_get_network_report+0x266>
 801d336:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801d338:	2f00      	cmp	r7, #0
 801d33a:	f000 80e2 	beq.w	801d502 <ai_platform_api_get_network_report+0x266>
 801d33e:	883b      	ldrh	r3, [r7, #0]
 801d340:	2b00      	cmp	r3, #0
 801d342:	f000 80de 	beq.w	801d502 <ai_platform_api_get_network_report+0x266>
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	2b00      	cmp	r3, #0
 801d34a:	f000 80da 	beq.w	801d502 <ai_platform_api_get_network_report+0x266>
 801d34e:	681e      	ldr	r6, [r3, #0]
 801d350:	2e00      	cmp	r6, #0
 801d352:	f000 80d6 	beq.w	801d502 <ai_platform_api_get_network_report+0x266>
 801d356:	f04f 0901 	mov.w	r9, #1
 801d35a:	f04f 0800 	mov.w	r8, #0
 801d35e:	464b      	mov	r3, r9
 801d360:	f8d7 c008 	ldr.w	ip, [r7, #8]
 801d364:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 801d368:	69b0      	ldr	r0, [r6, #24]
 801d36a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801d36e:	6800      	ldr	r0, [r0, #0]
 801d370:	eb01 0a02 	add.w	sl, r1, r2
 801d374:	9303      	str	r3, [sp, #12]
 801d376:	f8dc b008 	ldr.w	fp, [ip, #8]
 801d37a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801d37e:	f008 f84f 	bl	8025420 <ai_array_to_buffer_fmt>
 801d382:	9b03      	ldr	r3, [sp, #12]
 801d384:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 801d388:	5088      	str	r0, [r1, r2]
 801d38a:	eb0b 0108 	add.w	r1, fp, r8
 801d38e:	f8aa 3004 	strh.w	r3, [sl, #4]
 801d392:	68f2      	ldr	r2, [r6, #12]
 801d394:	68d2      	ldr	r2, [r2, #12]
 801d396:	f8aa 2006 	strh.w	r2, [sl, #6]
 801d39a:	68f2      	ldr	r2, [r6, #12]
 801d39c:	6892      	ldr	r2, [r2, #8]
 801d39e:	f8aa 2008 	strh.w	r2, [sl, #8]
 801d3a2:	68f2      	ldr	r2, [r6, #12]
 801d3a4:	6852      	ldr	r2, [r2, #4]
 801d3a6:	f8ca 200c 	str.w	r2, [sl, #12]
 801d3aa:	69b2      	ldr	r2, [r6, #24]
 801d3ac:	6892      	ldr	r2, [r2, #8]
 801d3ae:	f8ca 2010 	str.w	r2, [sl, #16]
 801d3b2:	2900      	cmp	r1, #0
 801d3b4:	d02c      	beq.n	801d410 <ai_platform_api_get_network_report+0x174>
 801d3b6:	2200      	movs	r2, #0
 801d3b8:	f84b 2008 	str.w	r2, [fp, r8]
 801d3bc:	6832      	ldr	r2, [r6, #0]
 801d3be:	604a      	str	r2, [r1, #4]
 801d3c0:	b332      	cbz	r2, 801d410 <ai_platform_api_get_network_report+0x174>
 801d3c2:	8852      	ldrh	r2, [r2, #2]
 801d3c4:	b322      	cbz	r2, 801d410 <ai_platform_api_get_network_report+0x174>
 801d3c6:	600b      	str	r3, [r1, #0]
 801d3c8:	e023      	b.n	801d412 <ai_platform_api_get_network_report+0x176>
 801d3ca:	4b61      	ldr	r3, [pc, #388]	; (801d550 <ai_platform_api_get_network_report+0x2b4>)
 801d3cc:	2201      	movs	r2, #1
 801d3ce:	4619      	mov	r1, r3
 801d3d0:	601a      	str	r2, [r3, #0]
 801d3d2:	680b      	ldr	r3, [r1, #0]
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	d1fc      	bne.n	801d3d2 <ai_platform_api_get_network_report+0x136>
 801d3d8:	4b5e      	ldr	r3, [pc, #376]	; (801d554 <ai_platform_api_get_network_report+0x2b8>)
 801d3da:	495f      	ldr	r1, [pc, #380]	; (801d558 <ai_platform_api_get_network_report+0x2bc>)
 801d3dc:	4a5f      	ldr	r2, [pc, #380]	; (801d55c <ai_platform_api_get_network_report+0x2c0>)
 801d3de:	6019      	str	r1, [r3, #0]
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	4293      	cmp	r3, r2
 801d3e4:	d080      	beq.n	801d2e8 <ai_platform_api_get_network_report+0x4c>
 801d3e6:	e7fe      	b.n	801d3e6 <ai_platform_api_get_network_report+0x14a>
 801d3e8:	4b5d      	ldr	r3, [pc, #372]	; (801d560 <ai_platform_api_get_network_report+0x2c4>)
 801d3ea:	2201      	movs	r2, #1
 801d3ec:	4619      	mov	r1, r3
 801d3ee:	601a      	str	r2, [r3, #0]
 801d3f0:	680b      	ldr	r3, [r1, #0]
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d1fc      	bne.n	801d3f0 <ai_platform_api_get_network_report+0x154>
 801d3f6:	4b5b      	ldr	r3, [pc, #364]	; (801d564 <ai_platform_api_get_network_report+0x2c8>)
 801d3f8:	4957      	ldr	r1, [pc, #348]	; (801d558 <ai_platform_api_get_network_report+0x2bc>)
 801d3fa:	4a58      	ldr	r2, [pc, #352]	; (801d55c <ai_platform_api_get_network_report+0x2c0>)
 801d3fc:	6019      	str	r1, [r3, #0]
 801d3fe:	681b      	ldr	r3, [r3, #0]
 801d400:	4293      	cmp	r3, r2
 801d402:	f43f af71 	beq.w	801d2e8 <ai_platform_api_get_network_report+0x4c>
 801d406:	e7fe      	b.n	801d406 <ai_platform_api_get_network_report+0x16a>
 801d408:	2000      	movs	r0, #0
 801d40a:	b005      	add	sp, #20
 801d40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d410:	2100      	movs	r1, #0
 801d412:	f8ca 1014 	str.w	r1, [sl, #20]
 801d416:	fa1f f289 	uxth.w	r2, r9
 801d41a:	8839      	ldrh	r1, [r7, #0]
 801d41c:	f108 0808 	add.w	r8, r8, #8
 801d420:	4589      	cmp	r9, r1
 801d422:	d207      	bcs.n	801d434 <ai_platform_api_get_network_report+0x198>
 801d424:	6879      	ldr	r1, [r7, #4]
 801d426:	b129      	cbz	r1, 801d434 <ai_platform_api_get_network_report+0x198>
 801d428:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 801d42c:	f109 0901 	add.w	r9, r9, #1
 801d430:	2e00      	cmp	r6, #0
 801d432:	d195      	bne.n	801d360 <ai_platform_api_get_network_report+0xc4>
 801d434:	2a00      	cmp	r2, #0
 801d436:	d064      	beq.n	801d502 <ai_platform_api_get_network_report+0x266>
 801d438:	68bb      	ldr	r3, [r7, #8]
 801d43a:	685b      	ldr	r3, [r3, #4]
 801d43c:	8622      	strh	r2, [r4, #48]	; 0x30
 801d43e:	6363      	str	r3, [r4, #52]	; 0x34
 801d440:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 801d444:	2b01      	cmp	r3, #1
 801d446:	d970      	bls.n	801d52a <ai_platform_api_get_network_report+0x28e>
 801d448:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801d44a:	f117 0f0c 	cmn.w	r7, #12
 801d44e:	d06c      	beq.n	801d52a <ai_platform_api_get_network_report+0x28e>
 801d450:	89bb      	ldrh	r3, [r7, #12]
 801d452:	2b00      	cmp	r3, #0
 801d454:	d069      	beq.n	801d52a <ai_platform_api_get_network_report+0x28e>
 801d456:	693b      	ldr	r3, [r7, #16]
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d066      	beq.n	801d52a <ai_platform_api_get_network_report+0x28e>
 801d45c:	681e      	ldr	r6, [r3, #0]
 801d45e:	2e00      	cmp	r6, #0
 801d460:	d063      	beq.n	801d52a <ai_platform_api_get_network_report+0x28e>
 801d462:	f04f 0901 	mov.w	r9, #1
 801d466:	f04f 0800 	mov.w	r8, #0
 801d46a:	464b      	mov	r3, r9
 801d46c:	e01c      	b.n	801d4a8 <ai_platform_api_get_network_report+0x20c>
 801d46e:	2200      	movs	r2, #0
 801d470:	f84b 2008 	str.w	r2, [fp, r8]
 801d474:	6832      	ldr	r2, [r6, #0]
 801d476:	604a      	str	r2, [r1, #4]
 801d478:	2a00      	cmp	r2, #0
 801d47a:	d040      	beq.n	801d4fe <ai_platform_api_get_network_report+0x262>
 801d47c:	8852      	ldrh	r2, [r2, #2]
 801d47e:	2a00      	cmp	r2, #0
 801d480:	d03d      	beq.n	801d4fe <ai_platform_api_get_network_report+0x262>
 801d482:	600b      	str	r3, [r1, #0]
 801d484:	f8ca 1014 	str.w	r1, [sl, #20]
 801d488:	fa1f f289 	uxth.w	r2, r9
 801d48c:	89b9      	ldrh	r1, [r7, #12]
 801d48e:	f108 0808 	add.w	r8, r8, #8
 801d492:	4589      	cmp	r9, r1
 801d494:	d268      	bcs.n	801d568 <ai_platform_api_get_network_report+0x2cc>
 801d496:	6939      	ldr	r1, [r7, #16]
 801d498:	2900      	cmp	r1, #0
 801d49a:	d065      	beq.n	801d568 <ai_platform_api_get_network_report+0x2cc>
 801d49c:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 801d4a0:	f109 0901 	add.w	r9, r9, #1
 801d4a4:	2e00      	cmp	r6, #0
 801d4a6:	d05f      	beq.n	801d568 <ai_platform_api_get_network_report+0x2cc>
 801d4a8:	f8d7 c014 	ldr.w	ip, [r7, #20]
 801d4ac:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 801d4b0:	69b0      	ldr	r0, [r6, #24]
 801d4b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801d4b6:	6800      	ldr	r0, [r0, #0]
 801d4b8:	eb01 0a02 	add.w	sl, r1, r2
 801d4bc:	9303      	str	r3, [sp, #12]
 801d4be:	f8dc b008 	ldr.w	fp, [ip, #8]
 801d4c2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801d4c6:	f007 ffab 	bl	8025420 <ai_array_to_buffer_fmt>
 801d4ca:	9b03      	ldr	r3, [sp, #12]
 801d4cc:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 801d4d0:	5088      	str	r0, [r1, r2]
 801d4d2:	eb0b 0108 	add.w	r1, fp, r8
 801d4d6:	f8aa 3004 	strh.w	r3, [sl, #4]
 801d4da:	68f2      	ldr	r2, [r6, #12]
 801d4dc:	68d2      	ldr	r2, [r2, #12]
 801d4de:	f8aa 2006 	strh.w	r2, [sl, #6]
 801d4e2:	68f2      	ldr	r2, [r6, #12]
 801d4e4:	6892      	ldr	r2, [r2, #8]
 801d4e6:	f8aa 2008 	strh.w	r2, [sl, #8]
 801d4ea:	68f2      	ldr	r2, [r6, #12]
 801d4ec:	6852      	ldr	r2, [r2, #4]
 801d4ee:	f8ca 200c 	str.w	r2, [sl, #12]
 801d4f2:	69b2      	ldr	r2, [r6, #24]
 801d4f4:	6892      	ldr	r2, [r2, #8]
 801d4f6:	f8ca 2010 	str.w	r2, [sl, #16]
 801d4fa:	2900      	cmp	r1, #0
 801d4fc:	d1b7      	bne.n	801d46e <ai_platform_api_get_network_report+0x1d2>
 801d4fe:	2100      	movs	r1, #0
 801d500:	e7c0      	b.n	801d484 <ai_platform_api_get_network_report+0x1e8>
 801d502:	2600      	movs	r6, #0
 801d504:	f105 0010 	add.w	r0, r5, #16
 801d508:	2218      	movs	r2, #24
 801d50a:	2112      	movs	r1, #18
 801d50c:	8626      	strh	r6, [r4, #48]	; 0x30
 801d50e:	f001 fa49 	bl	801e9a4 <core_set_error>
 801d512:	4630      	mov	r0, r6
 801d514:	b005      	add	sp, #20
 801d516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d51a:	f105 0010 	add.w	r0, r5, #16
 801d51e:	2218      	movs	r2, #24
 801d520:	2111      	movs	r1, #17
 801d522:	f001 fa3f 	bl	801e9a4 <core_set_error>
 801d526:	2000      	movs	r0, #0
 801d528:	e76f      	b.n	801d40a <ai_platform_api_get_network_report+0x16e>
 801d52a:	2600      	movs	r6, #0
 801d52c:	f105 0010 	add.w	r0, r5, #16
 801d530:	2218      	movs	r2, #24
 801d532:	2113      	movs	r1, #19
 801d534:	8666      	strh	r6, [r4, #50]	; 0x32
 801d536:	f001 fa35 	bl	801e9a4 <core_set_error>
 801d53a:	4630      	mov	r0, r6
 801d53c:	e765      	b.n	801d40a <ai_platform_api_get_network_report+0x16e>
 801d53e:	bf00      	nop
 801d540:	a1c00100 	.word	0xa1c00100
 801d544:	e0002000 	.word	0xe0002000
 801d548:	e0042000 	.word	0xe0042000
 801d54c:	5c001000 	.word	0x5c001000
 801d550:	58024c08 	.word	0x58024c08
 801d554:	58024c00 	.word	0x58024c00
 801d558:	f407a5c2 	.word	0xf407a5c2
 801d55c:	b5e8b5cd 	.word	0xb5e8b5cd
 801d560:	40023008 	.word	0x40023008
 801d564:	40023000 	.word	0x40023000
 801d568:	2a00      	cmp	r2, #0
 801d56a:	d0de      	beq.n	801d52a <ai_platform_api_get_network_report+0x28e>
 801d56c:	697b      	ldr	r3, [r7, #20]
 801d56e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 801d572:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
 801d576:	f105 0718 	add.w	r7, r5, #24
 801d57a:	685b      	ldr	r3, [r3, #4]
 801d57c:	f104 0654 	add.w	r6, r4, #84	; 0x54
 801d580:	8662      	strh	r2, [r4, #50]	; 0x32
 801d582:	63a3      	str	r3, [r4, #56]	; 0x38
 801d584:	686b      	ldr	r3, [r5, #4]
 801d586:	6723      	str	r3, [r4, #112]	; 0x70
 801d588:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d58c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d590:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801d594:	f8df e214 	ldr.w	lr, [pc, #532]	; 801d7ac <ai_platform_api_get_network_report+0x510>
 801d598:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d59c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801d59e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801d5a0:	e897 0003 	ldmia.w	r7, {r0, r1}
 801d5a4:	4a7f      	ldr	r2, [pc, #508]	; (801d7a4 <ai_platform_api_get_network_report+0x508>)
 801d5a6:	e886 0003 	stmia.w	r6, {r0, r1}
 801d5aa:	f8de 3000 	ldr.w	r3, [lr]
 801d5ae:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 801d5b2:	f023 0301 	bic.w	r3, r3, #1
 801d5b6:	f8ce 3000 	str.w	r3, [lr]
 801d5ba:	6813      	ldr	r3, [r2, #0]
 801d5bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d5c0:	199a      	adds	r2, r3, r6
 801d5c2:	2a01      	cmp	r2, #1
 801d5c4:	d972      	bls.n	801d6ac <ai_platform_api_get_network_report+0x410>
 801d5c6:	f240 4249 	movw	r2, #1097	; 0x449
 801d5ca:	4293      	cmp	r3, r2
 801d5cc:	d06e      	beq.n	801d6ac <ai_platform_api_get_network_report+0x410>
 801d5ce:	4b76      	ldr	r3, [pc, #472]	; (801d7a8 <ai_platform_api_get_network_report+0x50c>)
 801d5d0:	681b      	ldr	r3, [r3, #0]
 801d5d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d5d6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d5da:	f000 80d2 	beq.w	801d782 <ai_platform_api_get_network_report+0x4e6>
 801d5de:	4a73      	ldr	r2, [pc, #460]	; (801d7ac <ai_platform_api_get_network_report+0x510>)
 801d5e0:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 801d5e4:	4b72      	ldr	r3, [pc, #456]	; (801d7b0 <ai_platform_api_get_network_report+0x514>)
 801d5e6:	496f      	ldr	r1, [pc, #444]	; (801d7a4 <ai_platform_api_get_network_report+0x508>)
 801d5e8:	6123      	str	r3, [r4, #16]
 801d5ea:	6813      	ldr	r3, [r2, #0]
 801d5ec:	f023 0301 	bic.w	r3, r3, #1
 801d5f0:	6013      	str	r3, [r2, #0]
 801d5f2:	680b      	ldr	r3, [r1, #0]
 801d5f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d5f8:	181a      	adds	r2, r3, r0
 801d5fa:	2a01      	cmp	r2, #1
 801d5fc:	f240 80b1 	bls.w	801d762 <ai_platform_api_get_network_report+0x4c6>
 801d600:	f240 4249 	movw	r2, #1097	; 0x449
 801d604:	4293      	cmp	r3, r2
 801d606:	f000 80ac 	beq.w	801d762 <ai_platform_api_get_network_report+0x4c6>
 801d60a:	4b67      	ldr	r3, [pc, #412]	; (801d7a8 <ai_platform_api_get_network_report+0x50c>)
 801d60c:	681b      	ldr	r3, [r3, #0]
 801d60e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d612:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d616:	f000 8094 	beq.w	801d742 <ai_platform_api_get_network_report+0x4a6>
 801d61a:	4a64      	ldr	r2, [pc, #400]	; (801d7ac <ai_platform_api_get_network_report+0x510>)
 801d61c:	2306      	movs	r3, #6
 801d61e:	4961      	ldr	r1, [pc, #388]	; (801d7a4 <ai_platform_api_get_network_report+0x508>)
 801d620:	6163      	str	r3, [r4, #20]
 801d622:	6813      	ldr	r3, [r2, #0]
 801d624:	f023 0301 	bic.w	r3, r3, #1
 801d628:	6013      	str	r3, [r2, #0]
 801d62a:	680b      	ldr	r3, [r1, #0]
 801d62c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801d630:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d634:	185a      	adds	r2, r3, r1
 801d636:	2a01      	cmp	r2, #1
 801d638:	d974      	bls.n	801d724 <ai_platform_api_get_network_report+0x488>
 801d63a:	f240 4249 	movw	r2, #1097	; 0x449
 801d63e:	4293      	cmp	r3, r2
 801d640:	d070      	beq.n	801d724 <ai_platform_api_get_network_report+0x488>
 801d642:	4b59      	ldr	r3, [pc, #356]	; (801d7a8 <ai_platform_api_get_network_report+0x50c>)
 801d644:	681b      	ldr	r3, [r3, #0]
 801d646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d64a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d64e:	d05a      	beq.n	801d706 <ai_platform_api_get_network_report+0x46a>
 801d650:	4a56      	ldr	r2, [pc, #344]	; (801d7ac <ai_platform_api_get_network_report+0x510>)
 801d652:	f240 1301 	movw	r3, #257	; 0x101
 801d656:	4953      	ldr	r1, [pc, #332]	; (801d7a4 <ai_platform_api_get_network_report+0x508>)
 801d658:	6263      	str	r3, [r4, #36]	; 0x24
 801d65a:	6813      	ldr	r3, [r2, #0]
 801d65c:	f023 0301 	bic.w	r3, r3, #1
 801d660:	6013      	str	r3, [r2, #0]
 801d662:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801d666:	680b      	ldr	r3, [r1, #0]
 801d668:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d66c:	189a      	adds	r2, r3, r2
 801d66e:	2a01      	cmp	r2, #1
 801d670:	d93a      	bls.n	801d6e8 <ai_platform_api_get_network_report+0x44c>
 801d672:	f240 4249 	movw	r2, #1097	; 0x449
 801d676:	4293      	cmp	r3, r2
 801d678:	d036      	beq.n	801d6e8 <ai_platform_api_get_network_report+0x44c>
 801d67a:	4b4b      	ldr	r3, [pc, #300]	; (801d7a8 <ai_platform_api_get_network_report+0x50c>)
 801d67c:	681b      	ldr	r3, [r3, #0]
 801d67e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d682:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d686:	d020      	beq.n	801d6ca <ai_platform_api_get_network_report+0x42e>
 801d688:	f240 4301 	movw	r3, #1025	; 0x401
 801d68c:	2200      	movs	r2, #0
 801d68e:	2001      	movs	r0, #1
 801d690:	62a3      	str	r3, [r4, #40]	; 0x28
 801d692:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 801d694:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 801d698:	0e19      	lsrs	r1, r3, #24
 801d69a:	0c1a      	lsrs	r2, r3, #16
 801d69c:	0a1b      	lsrs	r3, r3, #8
 801d69e:	f884 1020 	strb.w	r1, [r4, #32]
 801d6a2:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 801d6a6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801d6aa:	e6ae      	b.n	801d40a <ai_platform_api_get_network_report+0x16e>
 801d6ac:	4b41      	ldr	r3, [pc, #260]	; (801d7b4 <ai_platform_api_get_network_report+0x518>)
 801d6ae:	2201      	movs	r2, #1
 801d6b0:	4619      	mov	r1, r3
 801d6b2:	601a      	str	r2, [r3, #0]
 801d6b4:	680b      	ldr	r3, [r1, #0]
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	d1fc      	bne.n	801d6b4 <ai_platform_api_get_network_report+0x418>
 801d6ba:	4b3f      	ldr	r3, [pc, #252]	; (801d7b8 <ai_platform_api_get_network_report+0x51c>)
 801d6bc:	493f      	ldr	r1, [pc, #252]	; (801d7bc <ai_platform_api_get_network_report+0x520>)
 801d6be:	4a40      	ldr	r2, [pc, #256]	; (801d7c0 <ai_platform_api_get_network_report+0x524>)
 801d6c0:	6019      	str	r1, [r3, #0]
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	4293      	cmp	r3, r2
 801d6c6:	d08a      	beq.n	801d5de <ai_platform_api_get_network_report+0x342>
 801d6c8:	e7fe      	b.n	801d6c8 <ai_platform_api_get_network_report+0x42c>
 801d6ca:	4b3e      	ldr	r3, [pc, #248]	; (801d7c4 <ai_platform_api_get_network_report+0x528>)
 801d6cc:	2201      	movs	r2, #1
 801d6ce:	4619      	mov	r1, r3
 801d6d0:	601a      	str	r2, [r3, #0]
 801d6d2:	680b      	ldr	r3, [r1, #0]
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	d1fc      	bne.n	801d6d2 <ai_platform_api_get_network_report+0x436>
 801d6d8:	4b3b      	ldr	r3, [pc, #236]	; (801d7c8 <ai_platform_api_get_network_report+0x52c>)
 801d6da:	4938      	ldr	r1, [pc, #224]	; (801d7bc <ai_platform_api_get_network_report+0x520>)
 801d6dc:	4a38      	ldr	r2, [pc, #224]	; (801d7c0 <ai_platform_api_get_network_report+0x524>)
 801d6de:	6019      	str	r1, [r3, #0]
 801d6e0:	681b      	ldr	r3, [r3, #0]
 801d6e2:	4293      	cmp	r3, r2
 801d6e4:	d0d0      	beq.n	801d688 <ai_platform_api_get_network_report+0x3ec>
 801d6e6:	e7fe      	b.n	801d6e6 <ai_platform_api_get_network_report+0x44a>
 801d6e8:	4b32      	ldr	r3, [pc, #200]	; (801d7b4 <ai_platform_api_get_network_report+0x518>)
 801d6ea:	2201      	movs	r2, #1
 801d6ec:	4619      	mov	r1, r3
 801d6ee:	601a      	str	r2, [r3, #0]
 801d6f0:	680b      	ldr	r3, [r1, #0]
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	d1fc      	bne.n	801d6f0 <ai_platform_api_get_network_report+0x454>
 801d6f6:	4b30      	ldr	r3, [pc, #192]	; (801d7b8 <ai_platform_api_get_network_report+0x51c>)
 801d6f8:	4930      	ldr	r1, [pc, #192]	; (801d7bc <ai_platform_api_get_network_report+0x520>)
 801d6fa:	4a31      	ldr	r2, [pc, #196]	; (801d7c0 <ai_platform_api_get_network_report+0x524>)
 801d6fc:	6019      	str	r1, [r3, #0]
 801d6fe:	681b      	ldr	r3, [r3, #0]
 801d700:	4293      	cmp	r3, r2
 801d702:	d0c1      	beq.n	801d688 <ai_platform_api_get_network_report+0x3ec>
 801d704:	e7fe      	b.n	801d704 <ai_platform_api_get_network_report+0x468>
 801d706:	4b2f      	ldr	r3, [pc, #188]	; (801d7c4 <ai_platform_api_get_network_report+0x528>)
 801d708:	2201      	movs	r2, #1
 801d70a:	4619      	mov	r1, r3
 801d70c:	601a      	str	r2, [r3, #0]
 801d70e:	680b      	ldr	r3, [r1, #0]
 801d710:	2b00      	cmp	r3, #0
 801d712:	d1fc      	bne.n	801d70e <ai_platform_api_get_network_report+0x472>
 801d714:	4b2c      	ldr	r3, [pc, #176]	; (801d7c8 <ai_platform_api_get_network_report+0x52c>)
 801d716:	4929      	ldr	r1, [pc, #164]	; (801d7bc <ai_platform_api_get_network_report+0x520>)
 801d718:	4a29      	ldr	r2, [pc, #164]	; (801d7c0 <ai_platform_api_get_network_report+0x524>)
 801d71a:	6019      	str	r1, [r3, #0]
 801d71c:	681b      	ldr	r3, [r3, #0]
 801d71e:	4293      	cmp	r3, r2
 801d720:	d096      	beq.n	801d650 <ai_platform_api_get_network_report+0x3b4>
 801d722:	e7fe      	b.n	801d722 <ai_platform_api_get_network_report+0x486>
 801d724:	4b23      	ldr	r3, [pc, #140]	; (801d7b4 <ai_platform_api_get_network_report+0x518>)
 801d726:	2201      	movs	r2, #1
 801d728:	4619      	mov	r1, r3
 801d72a:	601a      	str	r2, [r3, #0]
 801d72c:	680b      	ldr	r3, [r1, #0]
 801d72e:	2b00      	cmp	r3, #0
 801d730:	d1fc      	bne.n	801d72c <ai_platform_api_get_network_report+0x490>
 801d732:	4b21      	ldr	r3, [pc, #132]	; (801d7b8 <ai_platform_api_get_network_report+0x51c>)
 801d734:	4921      	ldr	r1, [pc, #132]	; (801d7bc <ai_platform_api_get_network_report+0x520>)
 801d736:	4a22      	ldr	r2, [pc, #136]	; (801d7c0 <ai_platform_api_get_network_report+0x524>)
 801d738:	6019      	str	r1, [r3, #0]
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	4293      	cmp	r3, r2
 801d73e:	d087      	beq.n	801d650 <ai_platform_api_get_network_report+0x3b4>
 801d740:	e7fe      	b.n	801d740 <ai_platform_api_get_network_report+0x4a4>
 801d742:	4b20      	ldr	r3, [pc, #128]	; (801d7c4 <ai_platform_api_get_network_report+0x528>)
 801d744:	2201      	movs	r2, #1
 801d746:	4619      	mov	r1, r3
 801d748:	601a      	str	r2, [r3, #0]
 801d74a:	680b      	ldr	r3, [r1, #0]
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d1fc      	bne.n	801d74a <ai_platform_api_get_network_report+0x4ae>
 801d750:	4b1d      	ldr	r3, [pc, #116]	; (801d7c8 <ai_platform_api_get_network_report+0x52c>)
 801d752:	491a      	ldr	r1, [pc, #104]	; (801d7bc <ai_platform_api_get_network_report+0x520>)
 801d754:	4a1a      	ldr	r2, [pc, #104]	; (801d7c0 <ai_platform_api_get_network_report+0x524>)
 801d756:	6019      	str	r1, [r3, #0]
 801d758:	681b      	ldr	r3, [r3, #0]
 801d75a:	4293      	cmp	r3, r2
 801d75c:	f43f af5d 	beq.w	801d61a <ai_platform_api_get_network_report+0x37e>
 801d760:	e7fe      	b.n	801d760 <ai_platform_api_get_network_report+0x4c4>
 801d762:	4b14      	ldr	r3, [pc, #80]	; (801d7b4 <ai_platform_api_get_network_report+0x518>)
 801d764:	2201      	movs	r2, #1
 801d766:	4619      	mov	r1, r3
 801d768:	601a      	str	r2, [r3, #0]
 801d76a:	680b      	ldr	r3, [r1, #0]
 801d76c:	2b00      	cmp	r3, #0
 801d76e:	d1fc      	bne.n	801d76a <ai_platform_api_get_network_report+0x4ce>
 801d770:	4b11      	ldr	r3, [pc, #68]	; (801d7b8 <ai_platform_api_get_network_report+0x51c>)
 801d772:	4912      	ldr	r1, [pc, #72]	; (801d7bc <ai_platform_api_get_network_report+0x520>)
 801d774:	4a12      	ldr	r2, [pc, #72]	; (801d7c0 <ai_platform_api_get_network_report+0x524>)
 801d776:	6019      	str	r1, [r3, #0]
 801d778:	681b      	ldr	r3, [r3, #0]
 801d77a:	4293      	cmp	r3, r2
 801d77c:	f43f af4d 	beq.w	801d61a <ai_platform_api_get_network_report+0x37e>
 801d780:	e7fe      	b.n	801d780 <ai_platform_api_get_network_report+0x4e4>
 801d782:	4b10      	ldr	r3, [pc, #64]	; (801d7c4 <ai_platform_api_get_network_report+0x528>)
 801d784:	2201      	movs	r2, #1
 801d786:	4619      	mov	r1, r3
 801d788:	601a      	str	r2, [r3, #0]
 801d78a:	680b      	ldr	r3, [r1, #0]
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d1fc      	bne.n	801d78a <ai_platform_api_get_network_report+0x4ee>
 801d790:	4b0d      	ldr	r3, [pc, #52]	; (801d7c8 <ai_platform_api_get_network_report+0x52c>)
 801d792:	490a      	ldr	r1, [pc, #40]	; (801d7bc <ai_platform_api_get_network_report+0x520>)
 801d794:	4a0a      	ldr	r2, [pc, #40]	; (801d7c0 <ai_platform_api_get_network_report+0x524>)
 801d796:	6019      	str	r1, [r3, #0]
 801d798:	681b      	ldr	r3, [r3, #0]
 801d79a:	4293      	cmp	r3, r2
 801d79c:	f43f af1f 	beq.w	801d5de <ai_platform_api_get_network_report+0x342>
 801d7a0:	e7fe      	b.n	801d7a0 <ai_platform_api_get_network_report+0x504>
 801d7a2:	bf00      	nop
 801d7a4:	e0042000 	.word	0xe0042000
 801d7a8:	5c001000 	.word	0x5c001000
 801d7ac:	e0002000 	.word	0xe0002000
 801d7b0:	0802925c 	.word	0x0802925c
 801d7b4:	40023008 	.word	0x40023008
 801d7b8:	40023000 	.word	0x40023000
 801d7bc:	f407a5c2 	.word	0xf407a5c2
 801d7c0:	b5e8b5cd 	.word	0xb5e8b5cd
 801d7c4:	58024c08 	.word	0x58024c08
 801d7c8:	58024c00 	.word	0x58024c00

0801d7cc <ai_platform_network_create>:
 801d7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7d0:	4d56      	ldr	r5, [pc, #344]	; (801d92c <ai_platform_network_create+0x160>)
 801d7d2:	b082      	sub	sp, #8
 801d7d4:	4e56      	ldr	r6, [pc, #344]	; (801d930 <ai_platform_network_create+0x164>)
 801d7d6:	6829      	ldr	r1, [r5, #0]
 801d7d8:	f89d 4020 	ldrb.w	r4, [sp, #32]
 801d7dc:	f021 0101 	bic.w	r1, r1, #1
 801d7e0:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801d7e4:	6029      	str	r1, [r5, #0]
 801d7e6:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 801d7ea:	6831      	ldr	r1, [r6, #0]
 801d7ec:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801d7f0:	194d      	adds	r5, r1, r5
 801d7f2:	2d01      	cmp	r5, #1
 801d7f4:	d939      	bls.n	801d86a <ai_platform_network_create+0x9e>
 801d7f6:	f240 4549 	movw	r5, #1097	; 0x449
 801d7fa:	42a9      	cmp	r1, r5
 801d7fc:	d035      	beq.n	801d86a <ai_platform_network_create+0x9e>
 801d7fe:	494d      	ldr	r1, [pc, #308]	; (801d934 <ai_platform_network_create+0x168>)
 801d800:	6809      	ldr	r1, [r1, #0]
 801d802:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801d806:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 801d80a:	d01f      	beq.n	801d84c <ai_platform_network_create+0x80>
 801d80c:	2800      	cmp	r0, #0
 801d80e:	d03b      	beq.n	801d888 <ai_platform_network_create+0xbc>
 801d810:	4698      	mov	r8, r3
 801d812:	4606      	mov	r6, r0
 801d814:	4b48      	ldr	r3, [pc, #288]	; (801d938 <ai_platform_network_create+0x16c>)
 801d816:	4615      	mov	r5, r2
 801d818:	6013      	str	r3, [r2, #0]
 801d81a:	6032      	str	r2, [r6, #0]
 801d81c:	f001 f8c0 	bl	801e9a0 <core_init>
 801d820:	2800      	cmp	r0, #0
 801d822:	d136      	bne.n	801d892 <ai_platform_network_create+0xc6>
 801d824:	ea4f 6808 	mov.w	r8, r8, lsl #24
 801d828:	2230      	movs	r2, #48	; 0x30
 801d82a:	0424      	lsls	r4, r4, #16
 801d82c:	2300      	movs	r3, #0
 801d82e:	2110      	movs	r1, #16
 801d830:	6033      	str	r3, [r6, #0]
 801d832:	2000      	movs	r0, #0
 801d834:	ea44 2307 	orr.w	r3, r4, r7, lsl #8
 801d838:	f362 0007 	bfi	r0, r2, #0, #8
 801d83c:	ea43 0308 	orr.w	r3, r3, r8
 801d840:	f361 201f 	bfi	r0, r1, #8, #24
 801d844:	662b      	str	r3, [r5, #96]	; 0x60
 801d846:	b002      	add	sp, #8
 801d848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d84c:	493b      	ldr	r1, [pc, #236]	; (801d93c <ai_platform_network_create+0x170>)
 801d84e:	2501      	movs	r5, #1
 801d850:	460e      	mov	r6, r1
 801d852:	600d      	str	r5, [r1, #0]
 801d854:	6831      	ldr	r1, [r6, #0]
 801d856:	2900      	cmp	r1, #0
 801d858:	d1fc      	bne.n	801d854 <ai_platform_network_create+0x88>
 801d85a:	4939      	ldr	r1, [pc, #228]	; (801d940 <ai_platform_network_create+0x174>)
 801d85c:	4e39      	ldr	r6, [pc, #228]	; (801d944 <ai_platform_network_create+0x178>)
 801d85e:	4d3a      	ldr	r5, [pc, #232]	; (801d948 <ai_platform_network_create+0x17c>)
 801d860:	600e      	str	r6, [r1, #0]
 801d862:	6809      	ldr	r1, [r1, #0]
 801d864:	42a9      	cmp	r1, r5
 801d866:	d0d1      	beq.n	801d80c <ai_platform_network_create+0x40>
 801d868:	e7fe      	b.n	801d868 <ai_platform_network_create+0x9c>
 801d86a:	4938      	ldr	r1, [pc, #224]	; (801d94c <ai_platform_network_create+0x180>)
 801d86c:	2501      	movs	r5, #1
 801d86e:	460e      	mov	r6, r1
 801d870:	600d      	str	r5, [r1, #0]
 801d872:	6831      	ldr	r1, [r6, #0]
 801d874:	2900      	cmp	r1, #0
 801d876:	d1fc      	bne.n	801d872 <ai_platform_network_create+0xa6>
 801d878:	4935      	ldr	r1, [pc, #212]	; (801d950 <ai_platform_network_create+0x184>)
 801d87a:	4e32      	ldr	r6, [pc, #200]	; (801d944 <ai_platform_network_create+0x178>)
 801d87c:	4d32      	ldr	r5, [pc, #200]	; (801d948 <ai_platform_network_create+0x17c>)
 801d87e:	600e      	str	r6, [r1, #0]
 801d880:	6809      	ldr	r1, [r1, #0]
 801d882:	42a9      	cmp	r1, r5
 801d884:	d0c2      	beq.n	801d80c <ai_platform_network_create+0x40>
 801d886:	e7fe      	b.n	801d886 <ai_platform_network_create+0xba>
 801d888:	f241 0010 	movw	r0, #4112	; 0x1010
 801d88c:	b002      	add	sp, #8
 801d88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d892:	4a26      	ldr	r2, [pc, #152]	; (801d92c <ai_platform_network_create+0x160>)
 801d894:	4926      	ldr	r1, [pc, #152]	; (801d930 <ai_platform_network_create+0x164>)
 801d896:	6813      	ldr	r3, [r2, #0]
 801d898:	f023 0301 	bic.w	r3, r3, #1
 801d89c:	6013      	str	r3, [r2, #0]
 801d89e:	f46f 638a 	mvn.w	r3, #1104	; 0x450
 801d8a2:	680a      	ldr	r2, [r1, #0]
 801d8a4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801d8a8:	18d3      	adds	r3, r2, r3
 801d8aa:	2b01      	cmp	r3, #1
 801d8ac:	d914      	bls.n	801d8d8 <ai_platform_network_create+0x10c>
 801d8ae:	f240 4349 	movw	r3, #1097	; 0x449
 801d8b2:	429a      	cmp	r2, r3
 801d8b4:	d010      	beq.n	801d8d8 <ai_platform_network_create+0x10c>
 801d8b6:	4b1f      	ldr	r3, [pc, #124]	; (801d934 <ai_platform_network_create+0x168>)
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d8be:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d8c2:	d022      	beq.n	801d90a <ai_platform_network_create+0x13e>
 801d8c4:	ea4f 6808 	mov.w	r8, r8, lsl #24
 801d8c8:	0424      	lsls	r4, r4, #16
 801d8ca:	ea48 0304 	orr.w	r3, r8, r4
 801d8ce:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 801d8d2:	d010      	beq.n	801d8f6 <ai_platform_network_create+0x12a>
 801d8d4:	2201      	movs	r2, #1
 801d8d6:	e7a9      	b.n	801d82c <ai_platform_network_create+0x60>
 801d8d8:	4b1c      	ldr	r3, [pc, #112]	; (801d94c <ai_platform_network_create+0x180>)
 801d8da:	2201      	movs	r2, #1
 801d8dc:	4619      	mov	r1, r3
 801d8de:	601a      	str	r2, [r3, #0]
 801d8e0:	680b      	ldr	r3, [r1, #0]
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d1fc      	bne.n	801d8e0 <ai_platform_network_create+0x114>
 801d8e6:	4b1a      	ldr	r3, [pc, #104]	; (801d950 <ai_platform_network_create+0x184>)
 801d8e8:	4916      	ldr	r1, [pc, #88]	; (801d944 <ai_platform_network_create+0x178>)
 801d8ea:	4a17      	ldr	r2, [pc, #92]	; (801d948 <ai_platform_network_create+0x17c>)
 801d8ec:	6019      	str	r1, [r3, #0]
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	4293      	cmp	r3, r2
 801d8f2:	d0e7      	beq.n	801d8c4 <ai_platform_network_create+0xf8>
 801d8f4:	e7fe      	b.n	801d8f4 <ai_platform_network_create+0x128>
 801d8f6:	4b17      	ldr	r3, [pc, #92]	; (801d954 <ai_platform_network_create+0x188>)
 801d8f8:	a802      	add	r0, sp, #8
 801d8fa:	f840 3d04 	str.w	r3, [r0, #-4]!
 801d8fe:	f002 fab3 	bl	801fe68 <ai_check_custom_types>
 801d902:	b188      	cbz	r0, 801d928 <ai_platform_network_create+0x15c>
 801d904:	2100      	movs	r1, #0
 801d906:	460a      	mov	r2, r1
 801d908:	e793      	b.n	801d832 <ai_platform_network_create+0x66>
 801d90a:	4b0c      	ldr	r3, [pc, #48]	; (801d93c <ai_platform_network_create+0x170>)
 801d90c:	2201      	movs	r2, #1
 801d90e:	4619      	mov	r1, r3
 801d910:	601a      	str	r2, [r3, #0]
 801d912:	680b      	ldr	r3, [r1, #0]
 801d914:	2b00      	cmp	r3, #0
 801d916:	d1fc      	bne.n	801d912 <ai_platform_network_create+0x146>
 801d918:	4b09      	ldr	r3, [pc, #36]	; (801d940 <ai_platform_network_create+0x174>)
 801d91a:	490a      	ldr	r1, [pc, #40]	; (801d944 <ai_platform_network_create+0x178>)
 801d91c:	4a0a      	ldr	r2, [pc, #40]	; (801d948 <ai_platform_network_create+0x17c>)
 801d91e:	6019      	str	r1, [r3, #0]
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	4293      	cmp	r3, r2
 801d924:	d0ce      	beq.n	801d8c4 <ai_platform_network_create+0xf8>
 801d926:	e7fe      	b.n	801d926 <ai_platform_network_create+0x15a>
 801d928:	2202      	movs	r2, #2
 801d92a:	e77f      	b.n	801d82c <ai_platform_network_create+0x60>
 801d92c:	e0002000 	.word	0xe0002000
 801d930:	e0042000 	.word	0xe0042000
 801d934:	5c001000 	.word	0x5c001000
 801d938:	a1c00100 	.word	0xa1c00100
 801d93c:	58024c08 	.word	0x58024c08
 801d940:	58024c00 	.word	0x58024c00
 801d944:	f407a5c2 	.word	0xf407a5c2
 801d948:	b5e8b5cd 	.word	0xb5e8b5cd
 801d94c:	40023008 	.word	0x40023008
 801d950:	40023000 	.word	0x40023000
 801d954:	84048403 	.word	0x84048403

0801d958 <ai_platform_network_destroy>:
 801d958:	b508      	push	{r3, lr}
 801d95a:	b118      	cbz	r0, 801d964 <ai_platform_network_destroy+0xc>
 801d95c:	4b3b      	ldr	r3, [pc, #236]	; (801da4c <ai_platform_network_destroy+0xf4>)
 801d95e:	6802      	ldr	r2, [r0, #0]
 801d960:	429a      	cmp	r2, r3
 801d962:	d037      	beq.n	801d9d4 <ai_platform_network_destroy+0x7c>
 801d964:	4a3a      	ldr	r2, [pc, #232]	; (801da50 <ai_platform_network_destroy+0xf8>)
 801d966:	493b      	ldr	r1, [pc, #236]	; (801da54 <ai_platform_network_destroy+0xfc>)
 801d968:	6813      	ldr	r3, [r2, #0]
 801d96a:	f023 0301 	bic.w	r3, r3, #1
 801d96e:	6013      	str	r3, [r2, #0]
 801d970:	680b      	ldr	r3, [r1, #0]
 801d972:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801d976:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d97a:	185a      	adds	r2, r3, r1
 801d97c:	2a01      	cmp	r2, #1
 801d97e:	d91a      	bls.n	801d9b6 <ai_platform_network_destroy+0x5e>
 801d980:	f240 4249 	movw	r2, #1097	; 0x449
 801d984:	4293      	cmp	r3, r2
 801d986:	d016      	beq.n	801d9b6 <ai_platform_network_destroy+0x5e>
 801d988:	4b33      	ldr	r3, [pc, #204]	; (801da58 <ai_platform_network_destroy+0x100>)
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d990:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d994:	d000      	beq.n	801d998 <ai_platform_network_destroy+0x40>
 801d996:	bd08      	pop	{r3, pc}
 801d998:	4b30      	ldr	r3, [pc, #192]	; (801da5c <ai_platform_network_destroy+0x104>)
 801d99a:	2201      	movs	r2, #1
 801d99c:	4619      	mov	r1, r3
 801d99e:	601a      	str	r2, [r3, #0]
 801d9a0:	680b      	ldr	r3, [r1, #0]
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d1fc      	bne.n	801d9a0 <ai_platform_network_destroy+0x48>
 801d9a6:	4b2e      	ldr	r3, [pc, #184]	; (801da60 <ai_platform_network_destroy+0x108>)
 801d9a8:	492e      	ldr	r1, [pc, #184]	; (801da64 <ai_platform_network_destroy+0x10c>)
 801d9aa:	4a2f      	ldr	r2, [pc, #188]	; (801da68 <ai_platform_network_destroy+0x110>)
 801d9ac:	6019      	str	r1, [r3, #0]
 801d9ae:	681b      	ldr	r3, [r3, #0]
 801d9b0:	4293      	cmp	r3, r2
 801d9b2:	d0f0      	beq.n	801d996 <ai_platform_network_destroy+0x3e>
 801d9b4:	e7fe      	b.n	801d9b4 <ai_platform_network_destroy+0x5c>
 801d9b6:	4b2d      	ldr	r3, [pc, #180]	; (801da6c <ai_platform_network_destroy+0x114>)
 801d9b8:	2201      	movs	r2, #1
 801d9ba:	4619      	mov	r1, r3
 801d9bc:	601a      	str	r2, [r3, #0]
 801d9be:	680b      	ldr	r3, [r1, #0]
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	d1fc      	bne.n	801d9be <ai_platform_network_destroy+0x66>
 801d9c4:	4b2a      	ldr	r3, [pc, #168]	; (801da70 <ai_platform_network_destroy+0x118>)
 801d9c6:	4927      	ldr	r1, [pc, #156]	; (801da64 <ai_platform_network_destroy+0x10c>)
 801d9c8:	4a27      	ldr	r2, [pc, #156]	; (801da68 <ai_platform_network_destroy+0x110>)
 801d9ca:	6019      	str	r1, [r3, #0]
 801d9cc:	681b      	ldr	r3, [r3, #0]
 801d9ce:	4293      	cmp	r3, r2
 801d9d0:	d0e1      	beq.n	801d996 <ai_platform_network_destroy+0x3e>
 801d9d2:	e7fe      	b.n	801d9d2 <ai_platform_network_destroy+0x7a>
 801d9d4:	4a1e      	ldr	r2, [pc, #120]	; (801da50 <ai_platform_network_destroy+0xf8>)
 801d9d6:	491f      	ldr	r1, [pc, #124]	; (801da54 <ai_platform_network_destroy+0xfc>)
 801d9d8:	6813      	ldr	r3, [r2, #0]
 801d9da:	f023 0301 	bic.w	r3, r3, #1
 801d9de:	6013      	str	r3, [r2, #0]
 801d9e0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801d9e4:	680b      	ldr	r3, [r1, #0]
 801d9e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d9ea:	189a      	adds	r2, r3, r2
 801d9ec:	2a01      	cmp	r2, #1
 801d9ee:	d90e      	bls.n	801da0e <ai_platform_network_destroy+0xb6>
 801d9f0:	f240 4249 	movw	r2, #1097	; 0x449
 801d9f4:	4293      	cmp	r3, r2
 801d9f6:	d00a      	beq.n	801da0e <ai_platform_network_destroy+0xb6>
 801d9f8:	4b17      	ldr	r3, [pc, #92]	; (801da58 <ai_platform_network_destroy+0x100>)
 801d9fa:	681b      	ldr	r3, [r3, #0]
 801d9fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801da00:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801da04:	d012      	beq.n	801da2c <ai_platform_network_destroy+0xd4>
 801da06:	f002 facf 	bl	801ffa8 <ai_layers_destroy_all>
 801da0a:	2000      	movs	r0, #0
 801da0c:	bd08      	pop	{r3, pc}
 801da0e:	4b17      	ldr	r3, [pc, #92]	; (801da6c <ai_platform_network_destroy+0x114>)
 801da10:	2201      	movs	r2, #1
 801da12:	4619      	mov	r1, r3
 801da14:	601a      	str	r2, [r3, #0]
 801da16:	680b      	ldr	r3, [r1, #0]
 801da18:	2b00      	cmp	r3, #0
 801da1a:	d1fc      	bne.n	801da16 <ai_platform_network_destroy+0xbe>
 801da1c:	4b14      	ldr	r3, [pc, #80]	; (801da70 <ai_platform_network_destroy+0x118>)
 801da1e:	4911      	ldr	r1, [pc, #68]	; (801da64 <ai_platform_network_destroy+0x10c>)
 801da20:	4a11      	ldr	r2, [pc, #68]	; (801da68 <ai_platform_network_destroy+0x110>)
 801da22:	6019      	str	r1, [r3, #0]
 801da24:	681b      	ldr	r3, [r3, #0]
 801da26:	4293      	cmp	r3, r2
 801da28:	d0ed      	beq.n	801da06 <ai_platform_network_destroy+0xae>
 801da2a:	e7fe      	b.n	801da2a <ai_platform_network_destroy+0xd2>
 801da2c:	4b0b      	ldr	r3, [pc, #44]	; (801da5c <ai_platform_network_destroy+0x104>)
 801da2e:	2201      	movs	r2, #1
 801da30:	4619      	mov	r1, r3
 801da32:	601a      	str	r2, [r3, #0]
 801da34:	680b      	ldr	r3, [r1, #0]
 801da36:	2b00      	cmp	r3, #0
 801da38:	d1fc      	bne.n	801da34 <ai_platform_network_destroy+0xdc>
 801da3a:	4b09      	ldr	r3, [pc, #36]	; (801da60 <ai_platform_network_destroy+0x108>)
 801da3c:	4909      	ldr	r1, [pc, #36]	; (801da64 <ai_platform_network_destroy+0x10c>)
 801da3e:	4a0a      	ldr	r2, [pc, #40]	; (801da68 <ai_platform_network_destroy+0x110>)
 801da40:	6019      	str	r1, [r3, #0]
 801da42:	681b      	ldr	r3, [r3, #0]
 801da44:	4293      	cmp	r3, r2
 801da46:	d0de      	beq.n	801da06 <ai_platform_network_destroy+0xae>
 801da48:	e7fe      	b.n	801da48 <ai_platform_network_destroy+0xf0>
 801da4a:	bf00      	nop
 801da4c:	a1c00100 	.word	0xa1c00100
 801da50:	e0002000 	.word	0xe0002000
 801da54:	e0042000 	.word	0xe0042000
 801da58:	5c001000 	.word	0x5c001000
 801da5c:	58024c08 	.word	0x58024c08
 801da60:	58024c00 	.word	0x58024c00
 801da64:	f407a5c2 	.word	0xf407a5c2
 801da68:	b5e8b5cd 	.word	0xb5e8b5cd
 801da6c:	40023008 	.word	0x40023008
 801da70:	40023000 	.word	0x40023000

0801da74 <ai_platform_network_init>:
 801da74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da76:	2800      	cmp	r0, #0
 801da78:	d061      	beq.n	801db3e <ai_platform_network_init+0xca>
 801da7a:	4b61      	ldr	r3, [pc, #388]	; (801dc00 <ai_platform_network_init+0x18c>)
 801da7c:	6802      	ldr	r2, [r0, #0]
 801da7e:	429a      	cmp	r2, r3
 801da80:	d15d      	bne.n	801db3e <ai_platform_network_init+0xca>
 801da82:	4a60      	ldr	r2, [pc, #384]	; (801dc04 <ai_platform_network_init+0x190>)
 801da84:	4c60      	ldr	r4, [pc, #384]	; (801dc08 <ai_platform_network_init+0x194>)
 801da86:	6813      	ldr	r3, [r2, #0]
 801da88:	f023 0301 	bic.w	r3, r3, #1
 801da8c:	6013      	str	r3, [r2, #0]
 801da8e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801da92:	6823      	ldr	r3, [r4, #0]
 801da94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801da98:	189a      	adds	r2, r3, r2
 801da9a:	2a01      	cmp	r2, #1
 801da9c:	d92f      	bls.n	801dafe <ai_platform_network_init+0x8a>
 801da9e:	f240 4249 	movw	r2, #1097	; 0x449
 801daa2:	4293      	cmp	r3, r2
 801daa4:	d02b      	beq.n	801dafe <ai_platform_network_init+0x8a>
 801daa6:	4b59      	ldr	r3, [pc, #356]	; (801dc0c <ai_platform_network_init+0x198>)
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801daae:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801dab2:	d05f      	beq.n	801db74 <ai_platform_network_init+0x100>
 801dab4:	4605      	mov	r5, r0
 801dab6:	460c      	mov	r4, r1
 801dab8:	2900      	cmp	r1, #0
 801daba:	f000 8099 	beq.w	801dbf0 <ai_platform_network_init+0x17c>
 801dabe:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 801dac0:	690e      	ldr	r6, [r1, #16]
 801dac2:	2f00      	cmp	r7, #0
 801dac4:	f000 8083 	beq.w	801dbce <ai_platform_network_init+0x15a>
 801dac8:	b346      	cbz	r6, 801db1c <ai_platform_network_init+0xa8>
 801daca:	f105 0c18 	add.w	ip, r5, #24
 801dace:	f104 0718 	add.w	r7, r4, #24
 801dad2:	f105 0630 	add.w	r6, r5, #48	; 0x30
 801dad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801dad8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801dadc:	e894 0003 	ldmia.w	r4, {r0, r1}
 801dae0:	2403      	movs	r4, #3
 801dae2:	e88c 0003 	stmia.w	ip, {r0, r1}
 801dae6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801dae8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801daea:	e897 0003 	ldmia.w	r7, {r0, r1}
 801daee:	e886 0003 	stmia.w	r6, {r0, r1}
 801daf2:	60ec      	str	r4, [r5, #12]
 801daf4:	4628      	mov	r0, r5
 801daf6:	f002 f9e1 	bl	801febc <ai_layers_init_all>
 801dafa:	4628      	mov	r0, r5
 801dafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dafe:	4b44      	ldr	r3, [pc, #272]	; (801dc10 <ai_platform_network_init+0x19c>)
 801db00:	2201      	movs	r2, #1
 801db02:	461c      	mov	r4, r3
 801db04:	601a      	str	r2, [r3, #0]
 801db06:	6823      	ldr	r3, [r4, #0]
 801db08:	2b00      	cmp	r3, #0
 801db0a:	d1fc      	bne.n	801db06 <ai_platform_network_init+0x92>
 801db0c:	4b41      	ldr	r3, [pc, #260]	; (801dc14 <ai_platform_network_init+0x1a0>)
 801db0e:	4c42      	ldr	r4, [pc, #264]	; (801dc18 <ai_platform_network_init+0x1a4>)
 801db10:	4a42      	ldr	r2, [pc, #264]	; (801dc1c <ai_platform_network_init+0x1a8>)
 801db12:	601c      	str	r4, [r3, #0]
 801db14:	681b      	ldr	r3, [r3, #0]
 801db16:	4293      	cmp	r3, r2
 801db18:	d0cc      	beq.n	801dab4 <ai_platform_network_init+0x40>
 801db1a:	e7fe      	b.n	801db1a <ai_platform_network_init+0xa6>
 801db1c:	8921      	ldrh	r1, [r4, #8]
 801db1e:	88e2      	ldrh	r2, [r4, #6]
 801db20:	68e3      	ldr	r3, [r4, #12]
 801db22:	fb02 f201 	mul.w	r2, r2, r1
 801db26:	fb03 f302 	mul.w	r3, r3, r2
 801db2a:	2b00      	cmp	r3, #0
 801db2c:	d0cd      	beq.n	801daca <ai_platform_network_init+0x56>
 801db2e:	f105 0010 	add.w	r0, r5, #16
 801db32:	2212      	movs	r2, #18
 801db34:	2110      	movs	r1, #16
 801db36:	f000 ff35 	bl	801e9a4 <core_set_error>
 801db3a:	4630      	mov	r0, r6
 801db3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db3e:	4a31      	ldr	r2, [pc, #196]	; (801dc04 <ai_platform_network_init+0x190>)
 801db40:	4931      	ldr	r1, [pc, #196]	; (801dc08 <ai_platform_network_init+0x194>)
 801db42:	6813      	ldr	r3, [r2, #0]
 801db44:	f023 0301 	bic.w	r3, r3, #1
 801db48:	6013      	str	r3, [r2, #0]
 801db4a:	680b      	ldr	r3, [r1, #0]
 801db4c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801db50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801db54:	185a      	adds	r2, r3, r1
 801db56:	2a01      	cmp	r2, #1
 801db58:	d91b      	bls.n	801db92 <ai_platform_network_init+0x11e>
 801db5a:	f240 4249 	movw	r2, #1097	; 0x449
 801db5e:	4293      	cmp	r3, r2
 801db60:	d017      	beq.n	801db92 <ai_platform_network_init+0x11e>
 801db62:	4b2a      	ldr	r3, [pc, #168]	; (801dc0c <ai_platform_network_init+0x198>)
 801db64:	681b      	ldr	r3, [r3, #0]
 801db66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801db6a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801db6e:	d01f      	beq.n	801dbb0 <ai_platform_network_init+0x13c>
 801db70:	2000      	movs	r0, #0
 801db72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db74:	4b2a      	ldr	r3, [pc, #168]	; (801dc20 <ai_platform_network_init+0x1ac>)
 801db76:	2201      	movs	r2, #1
 801db78:	461c      	mov	r4, r3
 801db7a:	601a      	str	r2, [r3, #0]
 801db7c:	6823      	ldr	r3, [r4, #0]
 801db7e:	2b00      	cmp	r3, #0
 801db80:	d1fc      	bne.n	801db7c <ai_platform_network_init+0x108>
 801db82:	4b28      	ldr	r3, [pc, #160]	; (801dc24 <ai_platform_network_init+0x1b0>)
 801db84:	4c24      	ldr	r4, [pc, #144]	; (801dc18 <ai_platform_network_init+0x1a4>)
 801db86:	4a25      	ldr	r2, [pc, #148]	; (801dc1c <ai_platform_network_init+0x1a8>)
 801db88:	601c      	str	r4, [r3, #0]
 801db8a:	681b      	ldr	r3, [r3, #0]
 801db8c:	4293      	cmp	r3, r2
 801db8e:	d091      	beq.n	801dab4 <ai_platform_network_init+0x40>
 801db90:	e7fe      	b.n	801db90 <ai_platform_network_init+0x11c>
 801db92:	4b1f      	ldr	r3, [pc, #124]	; (801dc10 <ai_platform_network_init+0x19c>)
 801db94:	2201      	movs	r2, #1
 801db96:	4619      	mov	r1, r3
 801db98:	601a      	str	r2, [r3, #0]
 801db9a:	680b      	ldr	r3, [r1, #0]
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	d1fc      	bne.n	801db9a <ai_platform_network_init+0x126>
 801dba0:	4b1c      	ldr	r3, [pc, #112]	; (801dc14 <ai_platform_network_init+0x1a0>)
 801dba2:	491d      	ldr	r1, [pc, #116]	; (801dc18 <ai_platform_network_init+0x1a4>)
 801dba4:	4a1d      	ldr	r2, [pc, #116]	; (801dc1c <ai_platform_network_init+0x1a8>)
 801dba6:	6019      	str	r1, [r3, #0]
 801dba8:	681b      	ldr	r3, [r3, #0]
 801dbaa:	4293      	cmp	r3, r2
 801dbac:	d0e0      	beq.n	801db70 <ai_platform_network_init+0xfc>
 801dbae:	e7fe      	b.n	801dbae <ai_platform_network_init+0x13a>
 801dbb0:	4b1b      	ldr	r3, [pc, #108]	; (801dc20 <ai_platform_network_init+0x1ac>)
 801dbb2:	2201      	movs	r2, #1
 801dbb4:	4619      	mov	r1, r3
 801dbb6:	601a      	str	r2, [r3, #0]
 801dbb8:	680b      	ldr	r3, [r1, #0]
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	d1fc      	bne.n	801dbb8 <ai_platform_network_init+0x144>
 801dbbe:	4b19      	ldr	r3, [pc, #100]	; (801dc24 <ai_platform_network_init+0x1b0>)
 801dbc0:	4915      	ldr	r1, [pc, #84]	; (801dc18 <ai_platform_network_init+0x1a4>)
 801dbc2:	4a16      	ldr	r2, [pc, #88]	; (801dc1c <ai_platform_network_init+0x1a8>)
 801dbc4:	6019      	str	r1, [r3, #0]
 801dbc6:	681b      	ldr	r3, [r3, #0]
 801dbc8:	4293      	cmp	r3, r2
 801dbca:	d0d1      	beq.n	801db70 <ai_platform_network_init+0xfc>
 801dbcc:	e7fe      	b.n	801dbcc <ai_platform_network_init+0x158>
 801dbce:	8c09      	ldrh	r1, [r1, #32]
 801dbd0:	8be2      	ldrh	r2, [r4, #30]
 801dbd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dbd4:	fb02 f201 	mul.w	r2, r2, r1
 801dbd8:	fb03 f302 	mul.w	r3, r3, r2
 801dbdc:	2b00      	cmp	r3, #0
 801dbde:	f43f af73 	beq.w	801dac8 <ai_platform_network_init+0x54>
 801dbe2:	2213      	movs	r2, #19
 801dbe4:	2110      	movs	r1, #16
 801dbe6:	3010      	adds	r0, #16
 801dbe8:	f000 fedc 	bl	801e9a4 <core_set_error>
 801dbec:	4638      	mov	r0, r7
 801dbee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dbf0:	2211      	movs	r2, #17
 801dbf2:	2110      	movs	r1, #16
 801dbf4:	3010      	adds	r0, #16
 801dbf6:	f000 fed5 	bl	801e9a4 <core_set_error>
 801dbfa:	4620      	mov	r0, r4
 801dbfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dbfe:	bf00      	nop
 801dc00:	a1c00100 	.word	0xa1c00100
 801dc04:	e0002000 	.word	0xe0002000
 801dc08:	e0042000 	.word	0xe0042000
 801dc0c:	5c001000 	.word	0x5c001000
 801dc10:	40023008 	.word	0x40023008
 801dc14:	40023000 	.word	0x40023000
 801dc18:	f407a5c2 	.word	0xf407a5c2
 801dc1c:	b5e8b5cd 	.word	0xb5e8b5cd
 801dc20:	58024c08 	.word	0x58024c08
 801dc24:	58024c00 	.word	0x58024c00

0801dc28 <ai_platform_network_post_init>:
 801dc28:	b538      	push	{r3, r4, r5, lr}
 801dc2a:	b118      	cbz	r0, 801dc34 <ai_platform_network_post_init+0xc>
 801dc2c:	4b4b      	ldr	r3, [pc, #300]	; (801dd5c <ai_platform_network_post_init+0x134>)
 801dc2e:	6802      	ldr	r2, [r0, #0]
 801dc30:	429a      	cmp	r2, r3
 801dc32:	d029      	beq.n	801dc88 <ai_platform_network_post_init+0x60>
 801dc34:	4a4a      	ldr	r2, [pc, #296]	; (801dd60 <ai_platform_network_post_init+0x138>)
 801dc36:	494b      	ldr	r1, [pc, #300]	; (801dd64 <ai_platform_network_post_init+0x13c>)
 801dc38:	6813      	ldr	r3, [r2, #0]
 801dc3a:	f023 0301 	bic.w	r3, r3, #1
 801dc3e:	6013      	str	r3, [r2, #0]
 801dc40:	680b      	ldr	r3, [r1, #0]
 801dc42:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801dc46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801dc4a:	185a      	adds	r2, r3, r1
 801dc4c:	2a01      	cmp	r2, #1
 801dc4e:	d90c      	bls.n	801dc6a <ai_platform_network_post_init+0x42>
 801dc50:	f240 4249 	movw	r2, #1097	; 0x449
 801dc54:	4293      	cmp	r3, r2
 801dc56:	d008      	beq.n	801dc6a <ai_platform_network_post_init+0x42>
 801dc58:	4b43      	ldr	r3, [pc, #268]	; (801dd68 <ai_platform_network_post_init+0x140>)
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801dc60:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801dc64:	d046      	beq.n	801dcf4 <ai_platform_network_post_init+0xcc>
 801dc66:	2000      	movs	r0, #0
 801dc68:	bd38      	pop	{r3, r4, r5, pc}
 801dc6a:	4b40      	ldr	r3, [pc, #256]	; (801dd6c <ai_platform_network_post_init+0x144>)
 801dc6c:	2201      	movs	r2, #1
 801dc6e:	4619      	mov	r1, r3
 801dc70:	601a      	str	r2, [r3, #0]
 801dc72:	680b      	ldr	r3, [r1, #0]
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d1fc      	bne.n	801dc72 <ai_platform_network_post_init+0x4a>
 801dc78:	4b3d      	ldr	r3, [pc, #244]	; (801dd70 <ai_platform_network_post_init+0x148>)
 801dc7a:	493e      	ldr	r1, [pc, #248]	; (801dd74 <ai_platform_network_post_init+0x14c>)
 801dc7c:	4a3e      	ldr	r2, [pc, #248]	; (801dd78 <ai_platform_network_post_init+0x150>)
 801dc7e:	6019      	str	r1, [r3, #0]
 801dc80:	681b      	ldr	r3, [r3, #0]
 801dc82:	4293      	cmp	r3, r2
 801dc84:	d0ef      	beq.n	801dc66 <ai_platform_network_post_init+0x3e>
 801dc86:	e7fe      	b.n	801dc86 <ai_platform_network_post_init+0x5e>
 801dc88:	4a35      	ldr	r2, [pc, #212]	; (801dd60 <ai_platform_network_post_init+0x138>)
 801dc8a:	4936      	ldr	r1, [pc, #216]	; (801dd64 <ai_platform_network_post_init+0x13c>)
 801dc8c:	6813      	ldr	r3, [r2, #0]
 801dc8e:	f023 0301 	bic.w	r3, r3, #1
 801dc92:	6013      	str	r3, [r2, #0]
 801dc94:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801dc98:	680b      	ldr	r3, [r1, #0]
 801dc9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801dc9e:	189a      	adds	r2, r3, r2
 801dca0:	2a01      	cmp	r2, #1
 801dca2:	d94c      	bls.n	801dd3e <ai_platform_network_post_init+0x116>
 801dca4:	f240 4249 	movw	r2, #1097	; 0x449
 801dca8:	4293      	cmp	r3, r2
 801dcaa:	d048      	beq.n	801dd3e <ai_platform_network_post_init+0x116>
 801dcac:	4b2e      	ldr	r3, [pc, #184]	; (801dd68 <ai_platform_network_post_init+0x140>)
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801dcb4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801dcb8:	d032      	beq.n	801dd20 <ai_platform_network_post_init+0xf8>
 801dcba:	68c3      	ldr	r3, [r0, #12]
 801dcbc:	4604      	mov	r4, r0
 801dcbe:	f013 0502 	ands.w	r5, r3, #2
 801dcc2:	d026      	beq.n	801dd12 <ai_platform_network_post_init+0xea>
 801dcc4:	f002 f90e 	bl	801fee4 <ai_layers_post_init_all>
 801dcc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801dcca:	b18b      	cbz	r3, 801dcf0 <ai_platform_network_post_init+0xc8>
 801dccc:	6d25      	ldr	r5, [r4, #80]	; 0x50
 801dcce:	b90d      	cbnz	r5, 801dcd4 <ai_platform_network_post_init+0xac>
 801dcd0:	e00e      	b.n	801dcf0 <ai_platform_network_post_init+0xc8>
 801dcd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801dcd4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801dcd6:	4629      	mov	r1, r5
 801dcd8:	2000      	movs	r0, #0
 801dcda:	4798      	blx	r3
 801dcdc:	692a      	ldr	r2, [r5, #16]
 801dcde:	1b53      	subs	r3, r2, r5
 801dce0:	4615      	mov	r5, r2
 801dce2:	bf18      	it	ne
 801dce4:	2301      	movne	r3, #1
 801dce6:	2a00      	cmp	r2, #0
 801dce8:	bf08      	it	eq
 801dcea:	2300      	moveq	r3, #0
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	d1f0      	bne.n	801dcd2 <ai_platform_network_post_init+0xaa>
 801dcf0:	2001      	movs	r0, #1
 801dcf2:	bd38      	pop	{r3, r4, r5, pc}
 801dcf4:	4b21      	ldr	r3, [pc, #132]	; (801dd7c <ai_platform_network_post_init+0x154>)
 801dcf6:	2201      	movs	r2, #1
 801dcf8:	4619      	mov	r1, r3
 801dcfa:	601a      	str	r2, [r3, #0]
 801dcfc:	680b      	ldr	r3, [r1, #0]
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d1fc      	bne.n	801dcfc <ai_platform_network_post_init+0xd4>
 801dd02:	4b1f      	ldr	r3, [pc, #124]	; (801dd80 <ai_platform_network_post_init+0x158>)
 801dd04:	491b      	ldr	r1, [pc, #108]	; (801dd74 <ai_platform_network_post_init+0x14c>)
 801dd06:	4a1c      	ldr	r2, [pc, #112]	; (801dd78 <ai_platform_network_post_init+0x150>)
 801dd08:	6019      	str	r1, [r3, #0]
 801dd0a:	681b      	ldr	r3, [r3, #0]
 801dd0c:	4293      	cmp	r3, r2
 801dd0e:	d0aa      	beq.n	801dc66 <ai_platform_network_post_init+0x3e>
 801dd10:	e7fe      	b.n	801dd10 <ai_platform_network_post_init+0xe8>
 801dd12:	2210      	movs	r2, #16
 801dd14:	2111      	movs	r1, #17
 801dd16:	3010      	adds	r0, #16
 801dd18:	f000 fe44 	bl	801e9a4 <core_set_error>
 801dd1c:	4628      	mov	r0, r5
 801dd1e:	bd38      	pop	{r3, r4, r5, pc}
 801dd20:	4b16      	ldr	r3, [pc, #88]	; (801dd7c <ai_platform_network_post_init+0x154>)
 801dd22:	2201      	movs	r2, #1
 801dd24:	4619      	mov	r1, r3
 801dd26:	601a      	str	r2, [r3, #0]
 801dd28:	680b      	ldr	r3, [r1, #0]
 801dd2a:	2b00      	cmp	r3, #0
 801dd2c:	d1fc      	bne.n	801dd28 <ai_platform_network_post_init+0x100>
 801dd2e:	4b14      	ldr	r3, [pc, #80]	; (801dd80 <ai_platform_network_post_init+0x158>)
 801dd30:	4910      	ldr	r1, [pc, #64]	; (801dd74 <ai_platform_network_post_init+0x14c>)
 801dd32:	4a11      	ldr	r2, [pc, #68]	; (801dd78 <ai_platform_network_post_init+0x150>)
 801dd34:	6019      	str	r1, [r3, #0]
 801dd36:	681b      	ldr	r3, [r3, #0]
 801dd38:	4293      	cmp	r3, r2
 801dd3a:	d0be      	beq.n	801dcba <ai_platform_network_post_init+0x92>
 801dd3c:	e7fe      	b.n	801dd3c <ai_platform_network_post_init+0x114>
 801dd3e:	4b0b      	ldr	r3, [pc, #44]	; (801dd6c <ai_platform_network_post_init+0x144>)
 801dd40:	2201      	movs	r2, #1
 801dd42:	4619      	mov	r1, r3
 801dd44:	601a      	str	r2, [r3, #0]
 801dd46:	680b      	ldr	r3, [r1, #0]
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d1fc      	bne.n	801dd46 <ai_platform_network_post_init+0x11e>
 801dd4c:	4b08      	ldr	r3, [pc, #32]	; (801dd70 <ai_platform_network_post_init+0x148>)
 801dd4e:	4909      	ldr	r1, [pc, #36]	; (801dd74 <ai_platform_network_post_init+0x14c>)
 801dd50:	4a09      	ldr	r2, [pc, #36]	; (801dd78 <ai_platform_network_post_init+0x150>)
 801dd52:	6019      	str	r1, [r3, #0]
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	4293      	cmp	r3, r2
 801dd58:	d0af      	beq.n	801dcba <ai_platform_network_post_init+0x92>
 801dd5a:	e7fe      	b.n	801dd5a <ai_platform_network_post_init+0x132>
 801dd5c:	a1c00100 	.word	0xa1c00100
 801dd60:	e0002000 	.word	0xe0002000
 801dd64:	e0042000 	.word	0xe0042000
 801dd68:	5c001000 	.word	0x5c001000
 801dd6c:	40023008 	.word	0x40023008
 801dd70:	40023000 	.word	0x40023000
 801dd74:	f407a5c2 	.word	0xf407a5c2
 801dd78:	b5e8b5cd 	.word	0xb5e8b5cd
 801dd7c:	58024c08 	.word	0x58024c08
 801dd80:	58024c00 	.word	0x58024c00

0801dd84 <ai_platform_network_process>:
 801dd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd88:	4617      	mov	r7, r2
 801dd8a:	b083      	sub	sp, #12
 801dd8c:	4604      	mov	r4, r0
 801dd8e:	b120      	cbz	r0, 801dd9a <ai_platform_network_process+0x16>
 801dd90:	4b89      	ldr	r3, [pc, #548]	; (801dfb8 <ai_platform_network_process+0x234>)
 801dd92:	6802      	ldr	r2, [r0, #0]
 801dd94:	429a      	cmp	r2, r3
 801dd96:	bf18      	it	ne
 801dd98:	2400      	movne	r4, #0
 801dd9a:	4a88      	ldr	r2, [pc, #544]	; (801dfbc <ai_platform_network_process+0x238>)
 801dd9c:	4888      	ldr	r0, [pc, #544]	; (801dfc0 <ai_platform_network_process+0x23c>)
 801dd9e:	6813      	ldr	r3, [r2, #0]
 801dda0:	f023 0301 	bic.w	r3, r3, #1
 801dda4:	6013      	str	r3, [r2, #0]
 801dda6:	6803      	ldr	r3, [r0, #0]
 801dda8:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 801ddac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ddb0:	181a      	adds	r2, r3, r0
 801ddb2:	2a01      	cmp	r2, #1
 801ddb4:	f240 80cc 	bls.w	801df50 <ai_platform_network_process+0x1cc>
 801ddb8:	f240 4249 	movw	r2, #1097	; 0x449
 801ddbc:	4293      	cmp	r3, r2
 801ddbe:	f000 80c7 	beq.w	801df50 <ai_platform_network_process+0x1cc>
 801ddc2:	4b80      	ldr	r3, [pc, #512]	; (801dfc4 <ai_platform_network_process+0x240>)
 801ddc4:	681b      	ldr	r3, [r3, #0]
 801ddc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ddca:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801ddce:	f000 80af 	beq.w	801df30 <ai_platform_network_process+0x1ac>
 801ddd2:	2c00      	cmp	r4, #0
 801ddd4:	f000 80e1 	beq.w	801df9a <ai_platform_network_process+0x216>
 801ddd8:	68e2      	ldr	r2, [r4, #12]
 801ddda:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801ddde:	f002 0203 	and.w	r2, r2, #3
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	f000 80c4 	beq.w	801df70 <ai_platform_network_process+0x1ec>
 801dde8:	2000      	movs	r0, #0
 801ddea:	2a03      	cmp	r2, #3
 801ddec:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
 801ddf0:	6160      	str	r0, [r4, #20]
 801ddf2:	f040 80cc 	bne.w	801df8e <ai_platform_network_process+0x20a>
 801ddf6:	2900      	cmp	r1, #0
 801ddf8:	f000 80bd 	beq.w	801df76 <ai_platform_network_process+0x1f2>
 801ddfc:	faba f28a 	clz	r2, sl
 801de00:	0952      	lsrs	r2, r2, #5
 801de02:	2a00      	cmp	r2, #0
 801de04:	f040 80b7 	bne.w	801df76 <ai_platform_network_process+0x1f2>
 801de08:	f8ba 0000 	ldrh.w	r0, [sl]
 801de0c:	2800      	cmp	r0, #0
 801de0e:	f000 80b2 	beq.w	801df76 <ai_platform_network_process+0x1f2>
 801de12:	888d      	ldrh	r5, [r1, #4]
 801de14:	f8da 0004 	ldr.w	r0, [sl, #4]
 801de18:	9501      	str	r5, [sp, #4]
 801de1a:	2800      	cmp	r0, #0
 801de1c:	f000 80e2 	beq.w	801dfe4 <ai_platform_network_process+0x260>
 801de20:	6806      	ldr	r6, [r0, #0]
 801de22:	2e00      	cmp	r6, #0
 801de24:	f000 80de 	beq.w	801dfe4 <ai_platform_network_process+0x260>
 801de28:	f8da 3008 	ldr.w	r3, [sl, #8]
 801de2c:	f8d3 9000 	ldr.w	r9, [r3]
 801de30:	f1b9 0f00 	cmp.w	r9, #0
 801de34:	f000 809f 	beq.w	801df76 <ai_platform_network_process+0x1f2>
 801de38:	460d      	mov	r5, r1
 801de3a:	4690      	mov	r8, r2
 801de3c:	e061      	b.n	801df02 <ai_platform_network_process+0x17e>
 801de3e:	68f3      	ldr	r3, [r6, #12]
 801de40:	68da      	ldr	r2, [r3, #12]
 801de42:	455a      	cmp	r2, fp
 801de44:	d16b      	bne.n	801df1e <ai_platform_network_process+0x19a>
 801de46:	689a      	ldr	r2, [r3, #8]
 801de48:	4572      	cmp	r2, lr
 801de4a:	d168      	bne.n	801df1e <ai_platform_network_process+0x19a>
 801de4c:	685b      	ldr	r3, [r3, #4]
 801de4e:	459c      	cmp	ip, r3
 801de50:	d165      	bne.n	801df1e <ai_platform_network_process+0x19a>
 801de52:	6800      	ldr	r0, [r0, #0]
 801de54:	f007 fb30 	bl	80254b8 <ai_array_get_byte_size>
 801de58:	68f2      	ldr	r2, [r6, #12]
 801de5a:	6973      	ldr	r3, [r6, #20]
 801de5c:	68d2      	ldr	r2, [r2, #12]
 801de5e:	68db      	ldr	r3, [r3, #12]
 801de60:	fb03 f302 	mul.w	r3, r3, r2
 801de64:	4298      	cmp	r0, r3
 801de66:	d35a      	bcc.n	801df1e <ai_platform_network_process+0x19a>
 801de68:	69b3      	ldr	r3, [r6, #24]
 801de6a:	6818      	ldr	r0, [r3, #0]
 801de6c:	f007 fad8 	bl	8025420 <ai_array_to_buffer_fmt>
 801de70:	682b      	ldr	r3, [r5, #0]
 801de72:	4043      	eors	r3, r0
 801de74:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801de78:	f040 8226 	bne.w	801e2c8 <ai_platform_network_process+0x544>
 801de7c:	692b      	ldr	r3, [r5, #16]
 801de7e:	2b00      	cmp	r3, #0
 801de80:	f000 821a 	beq.w	801e2b8 <ai_platform_network_process+0x534>
 801de84:	88ab      	ldrh	r3, [r5, #4]
 801de86:	2b00      	cmp	r3, #0
 801de88:	f000 808d 	beq.w	801dfa6 <ai_platform_network_process+0x222>
 801de8c:	9a01      	ldr	r2, [sp, #4]
 801de8e:	68f1      	ldr	r1, [r6, #12]
 801de90:	429a      	cmp	r2, r3
 801de92:	68c9      	ldr	r1, [r1, #12]
 801de94:	bf38      	it	cc
 801de96:	461a      	movcc	r2, r3
 801de98:	9201      	str	r2, [sp, #4]
 801de9a:	6972      	ldr	r2, [r6, #20]
 801de9c:	68d3      	ldr	r3, [r2, #12]
 801de9e:	fb03 f301 	mul.w	r3, r3, r1
 801dea2:	f8c9 3008 	str.w	r3, [r9, #8]
 801dea6:	88aa      	ldrh	r2, [r5, #4]
 801dea8:	fb03 f302 	mul.w	r3, r3, r2
 801deac:	f8c9 300c 	str.w	r3, [r9, #12]
 801deb0:	6929      	ldr	r1, [r5, #16]
 801deb2:	f8c9 1004 	str.w	r1, [r9, #4]
 801deb6:	692a      	ldr	r2, [r5, #16]
 801deb8:	4413      	add	r3, r2
 801deba:	f8c9 3000 	str.w	r3, [r9]
 801debe:	69b0      	ldr	r0, [r6, #24]
 801dec0:	6803      	ldr	r3, [r0, #0]
 801dec2:	009a      	lsls	r2, r3, #2
 801dec4:	d408      	bmi.n	801ded8 <ai_platform_network_process+0x154>
 801dec6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801deca:	1a9b      	subs	r3, r3, r2
 801decc:	4419      	add	r1, r3
 801dece:	6081      	str	r1, [r0, #8]
 801ded0:	69b3      	ldr	r3, [r6, #24]
 801ded2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801ded6:	60da      	str	r2, [r3, #12]
 801ded8:	f108 0801 	add.w	r8, r8, #1
 801dedc:	f8ba 3000 	ldrh.w	r3, [sl]
 801dee0:	4598      	cmp	r8, r3
 801dee2:	d27d      	bcs.n	801dfe0 <ai_platform_network_process+0x25c>
 801dee4:	f8da 3004 	ldr.w	r3, [sl, #4]
 801dee8:	2b00      	cmp	r3, #0
 801deea:	d079      	beq.n	801dfe0 <ai_platform_network_process+0x25c>
 801deec:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 801def0:	2e00      	cmp	r6, #0
 801def2:	d075      	beq.n	801dfe0 <ai_platform_network_process+0x25c>
 801def4:	f8da 3008 	ldr.w	r3, [sl, #8]
 801def8:	3518      	adds	r5, #24
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 801df00:	d039      	beq.n	801df76 <ai_platform_network_process+0x1f2>
 801df02:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 801df06:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 801df0a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 801df0e:	fb0b f30e 	mul.w	r3, fp, lr
 801df12:	69b0      	ldr	r0, [r6, #24]
 801df14:	fb0c f303 	mul.w	r3, ip, r3
 801df18:	6841      	ldr	r1, [r0, #4]
 801df1a:	4299      	cmp	r1, r3
 801df1c:	d28f      	bcs.n	801de3e <ai_platform_network_process+0xba>
 801df1e:	f104 0010 	add.w	r0, r4, #16
 801df22:	2218      	movs	r2, #24
 801df24:	2112      	movs	r1, #18
 801df26:	f04f 0b00 	mov.w	fp, #0
 801df2a:	f000 fd3b 	bl	801e9a4 <core_set_error>
 801df2e:	e02a      	b.n	801df86 <ai_platform_network_process+0x202>
 801df30:	4b25      	ldr	r3, [pc, #148]	; (801dfc8 <ai_platform_network_process+0x244>)
 801df32:	2201      	movs	r2, #1
 801df34:	4618      	mov	r0, r3
 801df36:	601a      	str	r2, [r3, #0]
 801df38:	6803      	ldr	r3, [r0, #0]
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	d1fc      	bne.n	801df38 <ai_platform_network_process+0x1b4>
 801df3e:	4b23      	ldr	r3, [pc, #140]	; (801dfcc <ai_platform_network_process+0x248>)
 801df40:	4823      	ldr	r0, [pc, #140]	; (801dfd0 <ai_platform_network_process+0x24c>)
 801df42:	4a24      	ldr	r2, [pc, #144]	; (801dfd4 <ai_platform_network_process+0x250>)
 801df44:	6018      	str	r0, [r3, #0]
 801df46:	681b      	ldr	r3, [r3, #0]
 801df48:	4293      	cmp	r3, r2
 801df4a:	f43f af42 	beq.w	801ddd2 <ai_platform_network_process+0x4e>
 801df4e:	e7fe      	b.n	801df4e <ai_platform_network_process+0x1ca>
 801df50:	4b21      	ldr	r3, [pc, #132]	; (801dfd8 <ai_platform_network_process+0x254>)
 801df52:	2201      	movs	r2, #1
 801df54:	4618      	mov	r0, r3
 801df56:	601a      	str	r2, [r3, #0]
 801df58:	6803      	ldr	r3, [r0, #0]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d1fc      	bne.n	801df58 <ai_platform_network_process+0x1d4>
 801df5e:	4b1f      	ldr	r3, [pc, #124]	; (801dfdc <ai_platform_network_process+0x258>)
 801df60:	481b      	ldr	r0, [pc, #108]	; (801dfd0 <ai_platform_network_process+0x24c>)
 801df62:	4a1c      	ldr	r2, [pc, #112]	; (801dfd4 <ai_platform_network_process+0x250>)
 801df64:	6018      	str	r0, [r3, #0]
 801df66:	681b      	ldr	r3, [r3, #0]
 801df68:	4293      	cmp	r3, r2
 801df6a:	f43f af32 	beq.w	801ddd2 <ai_platform_network_process+0x4e>
 801df6e:	e7fe      	b.n	801df6e <ai_platform_network_process+0x1ea>
 801df70:	2a03      	cmp	r2, #3
 801df72:	6163      	str	r3, [r4, #20]
 801df74:	d10b      	bne.n	801df8e <ai_platform_network_process+0x20a>
 801df76:	f04f 0b00 	mov.w	fp, #0
 801df7a:	f104 0010 	add.w	r0, r4, #16
 801df7e:	2217      	movs	r2, #23
 801df80:	2112      	movs	r1, #18
 801df82:	f000 fd0f 	bl	801e9a4 <core_set_error>
 801df86:	4658      	mov	r0, fp
 801df88:	b003      	add	sp, #12
 801df8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df8e:	f104 0010 	add.w	r0, r4, #16
 801df92:	2230      	movs	r2, #48	; 0x30
 801df94:	2111      	movs	r1, #17
 801df96:	f000 fd05 	bl	801e9a4 <core_set_error>
 801df9a:	f04f 0b00 	mov.w	fp, #0
 801df9e:	4658      	mov	r0, fp
 801dfa0:	b003      	add	sp, #12
 801dfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfa6:	f104 0010 	add.w	r0, r4, #16
 801dfaa:	2221      	movs	r2, #33	; 0x21
 801dfac:	2112      	movs	r1, #18
 801dfae:	469b      	mov	fp, r3
 801dfb0:	f000 fcf8 	bl	801e9a4 <core_set_error>
 801dfb4:	e7e7      	b.n	801df86 <ai_platform_network_process+0x202>
 801dfb6:	bf00      	nop
 801dfb8:	a1c00100 	.word	0xa1c00100
 801dfbc:	e0002000 	.word	0xe0002000
 801dfc0:	e0042000 	.word	0xe0042000
 801dfc4:	5c001000 	.word	0x5c001000
 801dfc8:	58024c08 	.word	0x58024c08
 801dfcc:	58024c00 	.word	0x58024c00
 801dfd0:	f407a5c2 	.word	0xf407a5c2
 801dfd4:	b5e8b5cd 	.word	0xb5e8b5cd
 801dfd8:	40023008 	.word	0x40023008
 801dfdc:	40023000 	.word	0x40023000
 801dfe0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801dfe4:	2f00      	cmp	r7, #0
 801dfe6:	f000 80ab 	beq.w	801e140 <ai_platform_network_process+0x3bc>
 801dfea:	2b01      	cmp	r3, #1
 801dfec:	f240 809c 	bls.w	801e128 <ai_platform_network_process+0x3a4>
 801dff0:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
 801dff4:	f11a 0f0c 	cmn.w	sl, #12
 801dff8:	f000 8096 	beq.w	801e128 <ai_platform_network_process+0x3a4>
 801dffc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801e000:	2b00      	cmp	r3, #0
 801e002:	f000 8091 	beq.w	801e128 <ai_platform_network_process+0x3a4>
 801e006:	463d      	mov	r5, r7
 801e008:	f04f 0900 	mov.w	r9, #0
 801e00c:	9400      	str	r4, [sp, #0]
 801e00e:	4599      	cmp	r9, r3
 801e010:	f080 8093 	bcs.w	801e13a <ai_platform_network_process+0x3b6>
 801e014:	f8da 3010 	ldr.w	r3, [sl, #16]
 801e018:	2b00      	cmp	r3, #0
 801e01a:	f000 808e 	beq.w	801e13a <ai_platform_network_process+0x3b6>
 801e01e:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 801e022:	2e00      	cmp	r6, #0
 801e024:	f000 8089 	beq.w	801e13a <ai_platform_network_process+0x3b6>
 801e028:	f8da 3014 	ldr.w	r3, [sl, #20]
 801e02c:	ea4f 1409 	mov.w	r4, r9, lsl #4
 801e030:	f8d3 8000 	ldr.w	r8, [r3]
 801e034:	eb18 0704 	adds.w	r7, r8, r4
 801e038:	f000 8135 	beq.w	801e2a6 <ai_platform_network_process+0x522>
 801e03c:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 801e040:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 801e044:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 801e048:	fb0b f30e 	mul.w	r3, fp, lr
 801e04c:	69b0      	ldr	r0, [r6, #24]
 801e04e:	fb0c f303 	mul.w	r3, ip, r3
 801e052:	6841      	ldr	r1, [r0, #4]
 801e054:	4299      	cmp	r1, r3
 801e056:	d366      	bcc.n	801e126 <ai_platform_network_process+0x3a2>
 801e058:	68f3      	ldr	r3, [r6, #12]
 801e05a:	68da      	ldr	r2, [r3, #12]
 801e05c:	455a      	cmp	r2, fp
 801e05e:	d162      	bne.n	801e126 <ai_platform_network_process+0x3a2>
 801e060:	689a      	ldr	r2, [r3, #8]
 801e062:	4572      	cmp	r2, lr
 801e064:	d15f      	bne.n	801e126 <ai_platform_network_process+0x3a2>
 801e066:	685b      	ldr	r3, [r3, #4]
 801e068:	459c      	cmp	ip, r3
 801e06a:	d15c      	bne.n	801e126 <ai_platform_network_process+0x3a2>
 801e06c:	6800      	ldr	r0, [r0, #0]
 801e06e:	f007 fa23 	bl	80254b8 <ai_array_get_byte_size>
 801e072:	68f2      	ldr	r2, [r6, #12]
 801e074:	6973      	ldr	r3, [r6, #20]
 801e076:	68d2      	ldr	r2, [r2, #12]
 801e078:	68db      	ldr	r3, [r3, #12]
 801e07a:	fb03 f302 	mul.w	r3, r3, r2
 801e07e:	4298      	cmp	r0, r3
 801e080:	d351      	bcc.n	801e126 <ai_platform_network_process+0x3a2>
 801e082:	69b3      	ldr	r3, [r6, #24]
 801e084:	6818      	ldr	r0, [r3, #0]
 801e086:	f007 f9cb 	bl	8025420 <ai_array_to_buffer_fmt>
 801e08a:	682b      	ldr	r3, [r5, #0]
 801e08c:	4043      	eors	r3, r0
 801e08e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801e092:	d13e      	bne.n	801e112 <ai_platform_network_process+0x38e>
 801e094:	692b      	ldr	r3, [r5, #16]
 801e096:	2b00      	cmp	r3, #0
 801e098:	d032      	beq.n	801e100 <ai_platform_network_process+0x37c>
 801e09a:	88ab      	ldrh	r3, [r5, #4]
 801e09c:	b33b      	cbz	r3, 801e0ee <ai_platform_network_process+0x36a>
 801e09e:	9a01      	ldr	r2, [sp, #4]
 801e0a0:	68f1      	ldr	r1, [r6, #12]
 801e0a2:	429a      	cmp	r2, r3
 801e0a4:	68c9      	ldr	r1, [r1, #12]
 801e0a6:	bf38      	it	cc
 801e0a8:	461a      	movcc	r2, r3
 801e0aa:	9201      	str	r2, [sp, #4]
 801e0ac:	6972      	ldr	r2, [r6, #20]
 801e0ae:	68d3      	ldr	r3, [r2, #12]
 801e0b0:	fb03 f301 	mul.w	r3, r3, r1
 801e0b4:	60bb      	str	r3, [r7, #8]
 801e0b6:	88aa      	ldrh	r2, [r5, #4]
 801e0b8:	fb03 f302 	mul.w	r3, r3, r2
 801e0bc:	60fb      	str	r3, [r7, #12]
 801e0be:	6929      	ldr	r1, [r5, #16]
 801e0c0:	6079      	str	r1, [r7, #4]
 801e0c2:	692a      	ldr	r2, [r5, #16]
 801e0c4:	4413      	add	r3, r2
 801e0c6:	f848 3004 	str.w	r3, [r8, r4]
 801e0ca:	69b0      	ldr	r0, [r6, #24]
 801e0cc:	6803      	ldr	r3, [r0, #0]
 801e0ce:	009b      	lsls	r3, r3, #2
 801e0d0:	d407      	bmi.n	801e0e2 <ai_platform_network_process+0x35e>
 801e0d2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801e0d6:	1a9b      	subs	r3, r3, r2
 801e0d8:	4419      	add	r1, r3
 801e0da:	6081      	str	r1, [r0, #8]
 801e0dc:	687a      	ldr	r2, [r7, #4]
 801e0de:	69b3      	ldr	r3, [r6, #24]
 801e0e0:	60da      	str	r2, [r3, #12]
 801e0e2:	f109 0901 	add.w	r9, r9, #1
 801e0e6:	3518      	adds	r5, #24
 801e0e8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801e0ec:	e78f      	b.n	801e00e <ai_platform_network_process+0x28a>
 801e0ee:	9c00      	ldr	r4, [sp, #0]
 801e0f0:	2221      	movs	r2, #33	; 0x21
 801e0f2:	2113      	movs	r1, #19
 801e0f4:	469b      	mov	fp, r3
 801e0f6:	f104 0010 	add.w	r0, r4, #16
 801e0fa:	f000 fc53 	bl	801e9a4 <core_set_error>
 801e0fe:	e742      	b.n	801df86 <ai_platform_network_process+0x202>
 801e100:	9c00      	ldr	r4, [sp, #0]
 801e102:	2217      	movs	r2, #23
 801e104:	2113      	movs	r1, #19
 801e106:	469b      	mov	fp, r3
 801e108:	f104 0010 	add.w	r0, r4, #16
 801e10c:	f000 fc4a 	bl	801e9a4 <core_set_error>
 801e110:	e739      	b.n	801df86 <ai_platform_network_process+0x202>
 801e112:	9c00      	ldr	r4, [sp, #0]
 801e114:	2219      	movs	r2, #25
 801e116:	2113      	movs	r1, #19
 801e118:	f04f 0b00 	mov.w	fp, #0
 801e11c:	f104 0010 	add.w	r0, r4, #16
 801e120:	f000 fc40 	bl	801e9a4 <core_set_error>
 801e124:	e72f      	b.n	801df86 <ai_platform_network_process+0x202>
 801e126:	9c00      	ldr	r4, [sp, #0]
 801e128:	f104 0010 	add.w	r0, r4, #16
 801e12c:	2218      	movs	r2, #24
 801e12e:	2113      	movs	r1, #19
 801e130:	f04f 0b00 	mov.w	fp, #0
 801e134:	f000 fc36 	bl	801e9a4 <core_set_error>
 801e138:	e725      	b.n	801df86 <ai_platform_network_process+0x202>
 801e13a:	9c00      	ldr	r4, [sp, #0]
 801e13c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801e140:	9a01      	ldr	r2, [sp, #4]
 801e142:	82a2      	strh	r2, [r4, #20]
 801e144:	2b00      	cmp	r3, #0
 801e146:	f000 80a9 	beq.w	801e29c <ai_platform_network_process+0x518>
 801e14a:	2b01      	cmp	r3, #1
 801e14c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801e14e:	f240 80a8 	bls.w	801e2a2 <ai_platform_network_process+0x51e>
 801e152:	f105 060c 	add.w	r6, r5, #12
 801e156:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 801e15a:	8aa3      	ldrh	r3, [r4, #20]
 801e15c:	455b      	cmp	r3, fp
 801e15e:	f67f af12 	bls.w	801df86 <ai_platform_network_process+0x202>
 801e162:	9400      	str	r4, [sp, #0]
 801e164:	2d00      	cmp	r5, #0
 801e166:	d037      	beq.n	801e1d8 <ai_platform_network_process+0x454>
 801e168:	882b      	ldrh	r3, [r5, #0]
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	d034      	beq.n	801e1d8 <ai_platform_network_process+0x454>
 801e16e:	686b      	ldr	r3, [r5, #4]
 801e170:	2b00      	cmp	r3, #0
 801e172:	d031      	beq.n	801e1d8 <ai_platform_network_process+0x454>
 801e174:	681b      	ldr	r3, [r3, #0]
 801e176:	2b00      	cmp	r3, #0
 801e178:	d02e      	beq.n	801e1d8 <ai_platform_network_process+0x454>
 801e17a:	f04f 0800 	mov.w	r8, #0
 801e17e:	e01a      	b.n	801e1b6 <ai_platform_network_process+0x432>
 801e180:	68d4      	ldr	r4, [r2, #12]
 801e182:	1b00      	subs	r0, r0, r4
 801e184:	4401      	add	r1, r0
 801e186:	6091      	str	r1, [r2, #8]
 801e188:	687a      	ldr	r2, [r7, #4]
 801e18a:	699b      	ldr	r3, [r3, #24]
 801e18c:	60da      	str	r2, [r3, #12]
 801e18e:	687b      	ldr	r3, [r7, #4]
 801e190:	f108 0801 	add.w	r8, r8, #1
 801e194:	68b9      	ldr	r1, [r7, #8]
 801e196:	f85a 2009 	ldr.w	r2, [sl, r9]
 801e19a:	440b      	add	r3, r1
 801e19c:	4293      	cmp	r3, r2
 801e19e:	d301      	bcc.n	801e1a4 <ai_platform_network_process+0x420>
 801e1a0:	68fb      	ldr	r3, [r7, #12]
 801e1a2:	1ad3      	subs	r3, r2, r3
 801e1a4:	607b      	str	r3, [r7, #4]
 801e1a6:	882b      	ldrh	r3, [r5, #0]
 801e1a8:	4598      	cmp	r8, r3
 801e1aa:	d215      	bcs.n	801e1d8 <ai_platform_network_process+0x454>
 801e1ac:	686b      	ldr	r3, [r5, #4]
 801e1ae:	b19b      	cbz	r3, 801e1d8 <ai_platform_network_process+0x454>
 801e1b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801e1b4:	b183      	cbz	r3, 801e1d8 <ai_platform_network_process+0x454>
 801e1b6:	68a9      	ldr	r1, [r5, #8]
 801e1b8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801e1bc:	699a      	ldr	r2, [r3, #24]
 801e1be:	f8d1 a000 	ldr.w	sl, [r1]
 801e1c2:	6814      	ldr	r4, [r2, #0]
 801e1c4:	eb0a 0709 	add.w	r7, sl, r9
 801e1c8:	6890      	ldr	r0, [r2, #8]
 801e1ca:	00a4      	lsls	r4, r4, #2
 801e1cc:	6879      	ldr	r1, [r7, #4]
 801e1ce:	d5d7      	bpl.n	801e180 <ai_platform_network_process+0x3fc>
 801e1d0:	68ba      	ldr	r2, [r7, #8]
 801e1d2:	f007 fabf 	bl	8025754 <memcpy>
 801e1d6:	e7da      	b.n	801e18e <ai_platform_network_process+0x40a>
 801e1d8:	9800      	ldr	r0, [sp, #0]
 801e1da:	f001 fe99 	bl	801ff10 <ai_layers_forward_all>
 801e1de:	2e00      	cmp	r6, #0
 801e1e0:	d04a      	beq.n	801e278 <ai_platform_network_process+0x4f4>
 801e1e2:	8833      	ldrh	r3, [r6, #0]
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d047      	beq.n	801e278 <ai_platform_network_process+0x4f4>
 801e1e8:	6873      	ldr	r3, [r6, #4]
 801e1ea:	2b00      	cmp	r3, #0
 801e1ec:	d044      	beq.n	801e278 <ai_platform_network_process+0x4f4>
 801e1ee:	681b      	ldr	r3, [r3, #0]
 801e1f0:	2b00      	cmp	r3, #0
 801e1f2:	d041      	beq.n	801e278 <ai_platform_network_process+0x4f4>
 801e1f4:	f04f 0800 	mov.w	r8, #0
 801e1f8:	e019      	b.n	801e22e <ai_platform_network_process+0x4aa>
 801e1fa:	f85a 2009 	ldr.w	r2, [sl, r9]
 801e1fe:	4291      	cmp	r1, r2
 801e200:	d301      	bcc.n	801e206 <ai_platform_network_process+0x482>
 801e202:	68f9      	ldr	r1, [r7, #12]
 801e204:	1a51      	subs	r1, r2, r1
 801e206:	6079      	str	r1, [r7, #4]
 801e208:	f108 0801 	add.w	r8, r8, #1
 801e20c:	6998      	ldr	r0, [r3, #24]
 801e20e:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 801e212:	1b12      	subs	r2, r2, r4
 801e214:	440a      	add	r2, r1
 801e216:	6082      	str	r2, [r0, #8]
 801e218:	687a      	ldr	r2, [r7, #4]
 801e21a:	699b      	ldr	r3, [r3, #24]
 801e21c:	60da      	str	r2, [r3, #12]
 801e21e:	8833      	ldrh	r3, [r6, #0]
 801e220:	4598      	cmp	r8, r3
 801e222:	d229      	bcs.n	801e278 <ai_platform_network_process+0x4f4>
 801e224:	6873      	ldr	r3, [r6, #4]
 801e226:	b33b      	cbz	r3, 801e278 <ai_platform_network_process+0x4f4>
 801e228:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801e22c:	b323      	cbz	r3, 801e278 <ai_platform_network_process+0x4f4>
 801e22e:	68b2      	ldr	r2, [r6, #8]
 801e230:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801e234:	f8d3 e018 	ldr.w	lr, [r3, #24]
 801e238:	f8d2 a000 	ldr.w	sl, [r2]
 801e23c:	f8de 1000 	ldr.w	r1, [lr]
 801e240:	eb0a 0709 	add.w	r7, sl, r9
 801e244:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 801e248:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 801e24c:	eb00 0102 	add.w	r1, r0, r2
 801e250:	d0d3      	beq.n	801e1fa <ai_platform_network_process+0x476>
 801e252:	f8de 1008 	ldr.w	r1, [lr, #8]
 801e256:	f007 fa7d 	bl	8025754 <memcpy>
 801e25a:	f85a 2009 	ldr.w	r2, [sl, r9]
 801e25e:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 801e262:	440b      	add	r3, r1
 801e264:	4293      	cmp	r3, r2
 801e266:	d301      	bcc.n	801e26c <ai_platform_network_process+0x4e8>
 801e268:	68fb      	ldr	r3, [r7, #12]
 801e26a:	1ad3      	subs	r3, r2, r3
 801e26c:	607b      	str	r3, [r7, #4]
 801e26e:	f108 0801 	add.w	r8, r8, #1
 801e272:	8833      	ldrh	r3, [r6, #0]
 801e274:	4598      	cmp	r8, r3
 801e276:	d3d5      	bcc.n	801e224 <ai_platform_network_process+0x4a0>
 801e278:	9b00      	ldr	r3, [sp, #0]
 801e27a:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 801e27e:	461a      	mov	r2, r3
 801e280:	8a9b      	ldrh	r3, [r3, #20]
 801e282:	f10b 0b01 	add.w	fp, fp, #1
 801e286:	fa1f fb8b 	uxth.w	fp, fp
 801e28a:	455b      	cmp	r3, fp
 801e28c:	f8a2 b016 	strh.w	fp, [r2, #22]
 801e290:	f63f af68 	bhi.w	801e164 <ai_platform_network_process+0x3e0>
 801e294:	4658      	mov	r0, fp
 801e296:	b003      	add	sp, #12
 801e298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e29c:	461d      	mov	r5, r3
 801e29e:	461e      	mov	r6, r3
 801e2a0:	e759      	b.n	801e156 <ai_platform_network_process+0x3d2>
 801e2a2:	2600      	movs	r6, #0
 801e2a4:	e757      	b.n	801e156 <ai_platform_network_process+0x3d2>
 801e2a6:	9c00      	ldr	r4, [sp, #0]
 801e2a8:	2217      	movs	r2, #23
 801e2aa:	2113      	movs	r1, #19
 801e2ac:	46bb      	mov	fp, r7
 801e2ae:	f104 0010 	add.w	r0, r4, #16
 801e2b2:	f000 fb77 	bl	801e9a4 <core_set_error>
 801e2b6:	e666      	b.n	801df86 <ai_platform_network_process+0x202>
 801e2b8:	f104 0010 	add.w	r0, r4, #16
 801e2bc:	2217      	movs	r2, #23
 801e2be:	2112      	movs	r1, #18
 801e2c0:	469b      	mov	fp, r3
 801e2c2:	f000 fb6f 	bl	801e9a4 <core_set_error>
 801e2c6:	e65e      	b.n	801df86 <ai_platform_network_process+0x202>
 801e2c8:	f104 0010 	add.w	r0, r4, #16
 801e2cc:	2219      	movs	r2, #25
 801e2ce:	2112      	movs	r1, #18
 801e2d0:	f04f 0b00 	mov.w	fp, #0
 801e2d4:	f000 fb66 	bl	801e9a4 <core_set_error>
 801e2d8:	e655      	b.n	801df86 <ai_platform_network_process+0x202>
 801e2da:	bf00      	nop

0801e2dc <node_convert>:
 801e2dc:	6982      	ldr	r2, [r0, #24]
 801e2de:	8813      	ldrh	r3, [r2, #0]
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d04b      	beq.n	801e37c <node_convert+0xa0>
 801e2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2e6:	6852      	ldr	r2, [r2, #4]
 801e2e8:	b083      	sub	sp, #12
 801e2ea:	6855      	ldr	r5, [r2, #4]
 801e2ec:	b105      	cbz	r5, 801e2f0 <node_convert+0x14>
 801e2ee:	682d      	ldr	r5, [r5, #0]
 801e2f0:	2b01      	cmp	r3, #1
 801e2f2:	d940      	bls.n	801e376 <node_convert+0x9a>
 801e2f4:	6916      	ldr	r6, [r2, #16]
 801e2f6:	b106      	cbz	r6, 801e2fa <node_convert+0x1e>
 801e2f8:	6836      	ldr	r6, [r6, #0]
 801e2fa:	68ab      	ldr	r3, [r5, #8]
 801e2fc:	0a1b      	lsrs	r3, r3, #8
 801e2fe:	f000 80e1 	beq.w	801e4c4 <node_convert+0x1e8>
 801e302:	68e9      	ldr	r1, [r5, #12]
 801e304:	2401      	movs	r4, #1
 801e306:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e30a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801e30e:	428b      	cmp	r3, r1
 801e310:	fb02 f404 	mul.w	r4, r2, r4
 801e314:	d1f9      	bne.n	801e30a <node_convert+0x2e>
 801e316:	69aa      	ldr	r2, [r5, #24]
 801e318:	69b7      	ldr	r7, [r6, #24]
 801e31a:	6813      	ldr	r3, [r2, #0]
 801e31c:	6890      	ldr	r0, [r2, #8]
 801e31e:	f3c3 4243 	ubfx	r2, r3, #17, #4
 801e322:	2a01      	cmp	r2, #1
 801e324:	d055      	beq.n	801e3d2 <node_convert+0xf6>
 801e326:	6829      	ldr	r1, [r5, #0]
 801e328:	15da      	asrs	r2, r3, #23
 801e32a:	68bd      	ldr	r5, [r7, #8]
 801e32c:	b341      	cbz	r1, 801e380 <node_convert+0xa4>
 801e32e:	684e      	ldr	r6, [r1, #4]
 801e330:	f002 0201 	and.w	r2, r2, #1
 801e334:	2e00      	cmp	r6, #0
 801e336:	f000 80c7 	beq.w	801e4c8 <node_convert+0x1ec>
 801e33a:	884b      	ldrh	r3, [r1, #2]
 801e33c:	2b00      	cmp	r3, #0
 801e33e:	f000 8085 	beq.w	801e44c <node_convert+0x170>
 801e342:	6833      	ldr	r3, [r6, #0]
 801e344:	ed93 7a00 	vldr	s14, [r3]
 801e348:	6873      	ldr	r3, [r6, #4]
 801e34a:	2a00      	cmp	r2, #0
 801e34c:	f000 80d3 	beq.w	801e4f6 <node_convert+0x21a>
 801e350:	f993 2000 	ldrsb.w	r2, [r3]
 801e354:	b16c      	cbz	r4, 801e372 <node_convert+0x96>
 801e356:	4404      	add	r4, r0
 801e358:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801e35c:	1a9b      	subs	r3, r3, r2
 801e35e:	42a0      	cmp	r0, r4
 801e360:	ee07 3a90 	vmov	s15, r3
 801e364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e368:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e36c:	ece5 7a01 	vstmia	r5!, {s15}
 801e370:	d1f2      	bne.n	801e358 <node_convert+0x7c>
 801e372:	b003      	add	sp, #12
 801e374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e376:	2300      	movs	r3, #0
 801e378:	685b      	ldr	r3, [r3, #4]
 801e37a:	deff      	udf	#255	; 0xff
 801e37c:	685b      	ldr	r3, [r3, #4]
 801e37e:	deff      	udf	#255	; 0xff
 801e380:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 801e384:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 801e388:	f002 0201 	and.w	r2, r2, #1
 801e38c:	1b8e      	subs	r6, r1, r6
 801e38e:	2908      	cmp	r1, #8
 801e390:	4629      	mov	r1, r5
 801e392:	f106 0640 	add.w	r6, r6, #64	; 0x40
 801e396:	eba6 0602 	sub.w	r6, r6, r2
 801e39a:	4622      	mov	r2, r4
 801e39c:	d05c      	beq.n	801e458 <node_convert+0x17c>
 801e39e:	f002 fcfb 	bl	8020d98 <arm_q15_to_float>
 801e3a2:	2e00      	cmp	r6, #0
 801e3a4:	d0e5      	beq.n	801e372 <node_convert+0x96>
 801e3a6:	ee07 6a90 	vmov	s15, r6
 801e3aa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801e3ae:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801e3b2:	f00a fa19 	bl	80287e8 <powf>
 801e3b6:	2c00      	cmp	r4, #0
 801e3b8:	d0db      	beq.n	801e372 <node_convert+0x96>
 801e3ba:	2300      	movs	r3, #0
 801e3bc:	ecf5 7a01 	vldmia	r5!, {s15}
 801e3c0:	3301      	adds	r3, #1
 801e3c2:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e3c6:	429c      	cmp	r4, r3
 801e3c8:	ed45 7a01 	vstr	s15, [r5, #-4]
 801e3cc:	d1f6      	bne.n	801e3bc <node_convert+0xe0>
 801e3ce:	b003      	add	sp, #12
 801e3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e3d2:	683b      	ldr	r3, [r7, #0]
 801e3d4:	6835      	ldr	r5, [r6, #0]
 801e3d6:	15da      	asrs	r2, r3, #23
 801e3d8:	2d00      	cmp	r5, #0
 801e3da:	f000 808e 	beq.w	801e4fa <node_convert+0x21e>
 801e3de:	6869      	ldr	r1, [r5, #4]
 801e3e0:	f002 0301 	and.w	r3, r2, #1
 801e3e4:	68ba      	ldr	r2, [r7, #8]
 801e3e6:	2900      	cmp	r1, #0
 801e3e8:	d039      	beq.n	801e45e <node_convert+0x182>
 801e3ea:	886d      	ldrh	r5, [r5, #2]
 801e3ec:	2d00      	cmp	r5, #0
 801e3ee:	d03c      	beq.n	801e46a <node_convert+0x18e>
 801e3f0:	680d      	ldr	r5, [r1, #0]
 801e3f2:	edd5 7a00 	vldr	s15, [r5]
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	f000 80b1 	beq.w	801e55e <node_convert+0x282>
 801e3fc:	684b      	ldr	r3, [r1, #4]
 801e3fe:	f993 3000 	ldrsb.w	r3, [r3]
 801e402:	ee07 3a10 	vmov	s14, r3
 801e406:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e40a:	2c00      	cmp	r4, #0
 801e40c:	d0b1      	beq.n	801e372 <node_convert+0x96>
 801e40e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801e412:	4414      	add	r4, r2
 801e414:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801e418:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 801e41c:	ecf0 7a01 	vldmia	r0!, {s15}
 801e420:	eef0 5a47 	vmov.f32	s11, s14
 801e424:	eee7 5aa6 	vfma.f32	s11, s15, s13
 801e428:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801e42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e430:	db3b      	blt.n	801e4aa <node_convert+0x1ce>
 801e432:	ee75 7a86 	vadd.f32	s15, s11, s12
 801e436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e43a:	ee17 3a90 	vmov	r3, s15
 801e43e:	f303 0307 	ssat	r3, #8, r3
 801e442:	f802 3b01 	strb.w	r3, [r2], #1
 801e446:	42a2      	cmp	r2, r4
 801e448:	d1e8      	bne.n	801e41c <node_convert+0x140>
 801e44a:	e792      	b.n	801e372 <node_convert+0x96>
 801e44c:	2a00      	cmp	r2, #0
 801e44e:	d03d      	beq.n	801e4cc <node_convert+0x1f0>
 801e450:	461a      	mov	r2, r3
 801e452:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801e574 <node_convert+0x298>
 801e456:	e77d      	b.n	801e354 <node_convert+0x78>
 801e458:	f002 fd06 	bl	8020e68 <arm_q7_to_float>
 801e45c:	e7a1      	b.n	801e3a2 <node_convert+0xc6>
 801e45e:	b133      	cbz	r3, 801e46e <node_convert+0x192>
 801e460:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801e574 <node_convert+0x298>
 801e464:	eef0 7a47 	vmov.f32	s15, s14
 801e468:	e7cf      	b.n	801e40a <node_convert+0x12e>
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	d1f8      	bne.n	801e460 <node_convert+0x184>
 801e46e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801e472:	eddf 7a40 	vldr	s15, [pc, #256]	; 801e574 <node_convert+0x298>
 801e476:	2c00      	cmp	r4, #0
 801e478:	f43f af7b 	beq.w	801e372 <node_convert+0x96>
 801e47c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801e480:	4414      	add	r4, r2
 801e482:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801e486:	ecf0 7a01 	vldmia	r0!, {s15}
 801e48a:	eeb0 6a47 	vmov.f32	s12, s14
 801e48e:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801e492:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 801e496:	ee17 3a90 	vmov	r3, s15
 801e49a:	f383 0308 	usat	r3, #8, r3
 801e49e:	f802 3b01 	strb.w	r3, [r2], #1
 801e4a2:	42a2      	cmp	r2, r4
 801e4a4:	d1ef      	bne.n	801e486 <node_convert+0x1aa>
 801e4a6:	b003      	add	sp, #12
 801e4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e4aa:	ee75 7ac6 	vsub.f32	s15, s11, s12
 801e4ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e4b2:	ee17 3a90 	vmov	r3, s15
 801e4b6:	f303 0307 	ssat	r3, #8, r3
 801e4ba:	f802 3b01 	strb.w	r3, [r2], #1
 801e4be:	4294      	cmp	r4, r2
 801e4c0:	d1ac      	bne.n	801e41c <node_convert+0x140>
 801e4c2:	e756      	b.n	801e372 <node_convert+0x96>
 801e4c4:	2401      	movs	r4, #1
 801e4c6:	e726      	b.n	801e316 <node_convert+0x3a>
 801e4c8:	2a00      	cmp	r2, #0
 801e4ca:	d13f      	bne.n	801e54c <node_convert+0x270>
 801e4cc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801e574 <node_convert+0x298>
 801e4d0:	2c00      	cmp	r4, #0
 801e4d2:	f43f af4e 	beq.w	801e372 <node_convert+0x96>
 801e4d6:	4404      	add	r4, r0
 801e4d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e4dc:	1a9b      	subs	r3, r3, r2
 801e4de:	42a0      	cmp	r0, r4
 801e4e0:	ee07 3a90 	vmov	s15, r3
 801e4e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e4e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e4ec:	ece5 7a01 	vstmia	r5!, {s15}
 801e4f0:	d1f2      	bne.n	801e4d8 <node_convert+0x1fc>
 801e4f2:	b003      	add	sp, #12
 801e4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e4f6:	781a      	ldrb	r2, [r3, #0]
 801e4f8:	e7ea      	b.n	801e4d0 <node_convert+0x1f4>
 801e4fa:	f3c3 16c6 	ubfx	r6, r3, #7, #7
 801e4fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e502:	f002 0201 	and.w	r2, r2, #1
 801e506:	1af3      	subs	r3, r6, r3
 801e508:	3340      	adds	r3, #64	; 0x40
 801e50a:	1a9b      	subs	r3, r3, r2
 801e50c:	d015      	beq.n	801e53a <node_convert+0x25e>
 801e50e:	425b      	negs	r3, r3
 801e510:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801e514:	9001      	str	r0, [sp, #4]
 801e516:	ee00 3a90 	vmov	s1, r3
 801e51a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801e51e:	f00a f963 	bl	80287e8 <powf>
 801e522:	9801      	ldr	r0, [sp, #4]
 801e524:	b14c      	cbz	r4, 801e53a <node_convert+0x25e>
 801e526:	4603      	mov	r3, r0
 801e528:	ecf3 7a01 	vldmia	r3!, {s15}
 801e52c:	3501      	adds	r5, #1
 801e52e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e532:	42ac      	cmp	r4, r5
 801e534:	ed43 7a01 	vstr	s15, [r3, #-4]
 801e538:	d1f6      	bne.n	801e528 <node_convert+0x24c>
 801e53a:	2e08      	cmp	r6, #8
 801e53c:	68b9      	ldr	r1, [r7, #8]
 801e53e:	4622      	mov	r2, r4
 801e540:	d008      	beq.n	801e554 <node_convert+0x278>
 801e542:	b003      	add	sp, #12
 801e544:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e548:	f002 baa4 	b.w	8020a94 <arm_float_to_q15>
 801e54c:	4632      	mov	r2, r6
 801e54e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801e574 <node_convert+0x298>
 801e552:	e6ff      	b.n	801e354 <node_convert+0x78>
 801e554:	b003      	add	sp, #12
 801e556:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e55a:	f002 bb55 	b.w	8020c08 <arm_float_to_q7>
 801e55e:	684b      	ldr	r3, [r1, #4]
 801e560:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801e564:	781b      	ldrb	r3, [r3, #0]
 801e566:	ee07 3a10 	vmov	s14, r3
 801e56a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801e56e:	ee37 7a26 	vadd.f32	s14, s14, s13
 801e572:	e780      	b.n	801e476 <node_convert+0x19a>
 801e574:	00000000 	.word	0x00000000

0801e578 <node_convert_integer>:
 801e578:	6982      	ldr	r2, [r0, #24]
 801e57a:	8813      	ldrh	r3, [r2, #0]
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	f000 8084 	beq.w	801e68a <node_convert_integer+0x112>
 801e582:	b4f0      	push	{r4, r5, r6, r7}
 801e584:	6852      	ldr	r2, [r2, #4]
 801e586:	6855      	ldr	r5, [r2, #4]
 801e588:	b105      	cbz	r5, 801e58c <node_convert_integer+0x14>
 801e58a:	682d      	ldr	r5, [r5, #0]
 801e58c:	2b01      	cmp	r3, #1
 801e58e:	d979      	bls.n	801e684 <node_convert_integer+0x10c>
 801e590:	6916      	ldr	r6, [r2, #16]
 801e592:	b106      	cbz	r6, 801e596 <node_convert_integer+0x1e>
 801e594:	6836      	ldr	r6, [r6, #0]
 801e596:	68ab      	ldr	r3, [r5, #8]
 801e598:	0a1b      	lsrs	r3, r3, #8
 801e59a:	f000 8178 	beq.w	801e88e <node_convert_integer+0x316>
 801e59e:	68e8      	ldr	r0, [r5, #12]
 801e5a0:	2201      	movs	r2, #1
 801e5a2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e5a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e5aa:	4298      	cmp	r0, r3
 801e5ac:	fb01 f202 	mul.w	r2, r1, r2
 801e5b0:	d1f9      	bne.n	801e5a6 <node_convert_integer+0x2e>
 801e5b2:	0893      	lsrs	r3, r2, #2
 801e5b4:	682c      	ldr	r4, [r5, #0]
 801e5b6:	f8d6 c000 	ldr.w	ip, [r6]
 801e5ba:	b19c      	cbz	r4, 801e5e4 <node_convert_integer+0x6c>
 801e5bc:	6861      	ldr	r1, [r4, #4]
 801e5be:	b189      	cbz	r1, 801e5e4 <node_convert_integer+0x6c>
 801e5c0:	8860      	ldrh	r0, [r4, #2]
 801e5c2:	b178      	cbz	r0, 801e5e4 <node_convert_integer+0x6c>
 801e5c4:	6809      	ldr	r1, [r1, #0]
 801e5c6:	edd1 6a00 	vldr	s13, [r1]
 801e5ca:	f1bc 0f00 	cmp.w	ip, #0
 801e5ce:	d00e      	beq.n	801e5ee <node_convert_integer+0x76>
 801e5d0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801e5d4:	b159      	cbz	r1, 801e5ee <node_convert_integer+0x76>
 801e5d6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801e5da:	b140      	cbz	r0, 801e5ee <node_convert_integer+0x76>
 801e5dc:	6809      	ldr	r1, [r1, #0]
 801e5de:	ed91 7a00 	vldr	s14, [r1]
 801e5e2:	e006      	b.n	801e5f2 <node_convert_integer+0x7a>
 801e5e4:	eddf 6abf 	vldr	s13, [pc, #764]	; 801e8e4 <node_convert_integer+0x36c>
 801e5e8:	f1bc 0f00 	cmp.w	ip, #0
 801e5ec:	d1f0      	bne.n	801e5d0 <node_convert_integer+0x58>
 801e5ee:	ed9f 7abd 	vldr	s14, [pc, #756]	; 801e8e4 <node_convert_integer+0x36c>
 801e5f2:	69a8      	ldr	r0, [r5, #24]
 801e5f4:	69b7      	ldr	r7, [r6, #24]
 801e5f6:	6805      	ldr	r5, [r0, #0]
 801e5f8:	6839      	ldr	r1, [r7, #0]
 801e5fa:	022d      	lsls	r5, r5, #8
 801e5fc:	6880      	ldr	r0, [r0, #8]
 801e5fe:	f3c1 56c0 	ubfx	r6, r1, #23, #1
 801e602:	68b9      	ldr	r1, [r7, #8]
 801e604:	d443      	bmi.n	801e68e <node_convert_integer+0x116>
 801e606:	2e00      	cmp	r6, #0
 801e608:	f040 80d4 	bne.w	801e7b4 <node_convert_integer+0x23c>
 801e60c:	b13c      	cbz	r4, 801e61e <node_convert_integer+0xa6>
 801e60e:	6863      	ldr	r3, [r4, #4]
 801e610:	2b00      	cmp	r3, #0
 801e612:	f000 815b 	beq.w	801e8cc <node_convert_integer+0x354>
 801e616:	8864      	ldrh	r4, [r4, #2]
 801e618:	b10c      	cbz	r4, 801e61e <node_convert_integer+0xa6>
 801e61a:	685b      	ldr	r3, [r3, #4]
 801e61c:	781c      	ldrb	r4, [r3, #0]
 801e61e:	f1bc 0f00 	cmp.w	ip, #0
 801e622:	f000 812c 	beq.w	801e87e <node_convert_integer+0x306>
 801e626:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801e62a:	2b00      	cmp	r3, #0
 801e62c:	f000 8127 	beq.w	801e87e <node_convert_integer+0x306>
 801e630:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 801e634:	2d00      	cmp	r5, #0
 801e636:	f000 8122 	beq.w	801e87e <node_convert_integer+0x306>
 801e63a:	685b      	ldr	r3, [r3, #4]
 801e63c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e640:	781b      	ldrb	r3, [r3, #0]
 801e642:	ee06 3a10 	vmov	s12, r3
 801e646:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801e64a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801e64e:	eec6 5a87 	vdiv.f32	s11, s13, s14
 801e652:	b1aa      	cbz	r2, 801e680 <node_convert_integer+0x108>
 801e654:	440a      	add	r2, r1
 801e656:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e65a:	1b1b      	subs	r3, r3, r4
 801e65c:	eeb0 7a46 	vmov.f32	s14, s12
 801e660:	ee07 3a90 	vmov	s15, r3
 801e664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e668:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801e66c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801e670:	ee17 3a90 	vmov	r3, s15
 801e674:	f383 0308 	usat	r3, #8, r3
 801e678:	f801 3b01 	strb.w	r3, [r1], #1
 801e67c:	4291      	cmp	r1, r2
 801e67e:	d1ea      	bne.n	801e656 <node_convert_integer+0xde>
 801e680:	bcf0      	pop	{r4, r5, r6, r7}
 801e682:	4770      	bx	lr
 801e684:	2300      	movs	r3, #0
 801e686:	685b      	ldr	r3, [r3, #4]
 801e688:	deff      	udf	#255	; 0xff
 801e68a:	685b      	ldr	r3, [r3, #4]
 801e68c:	deff      	udf	#255	; 0xff
 801e68e:	2e00      	cmp	r6, #0
 801e690:	d047      	beq.n	801e722 <node_convert_integer+0x1aa>
 801e692:	b144      	cbz	r4, 801e6a6 <node_convert_integer+0x12e>
 801e694:	6863      	ldr	r3, [r4, #4]
 801e696:	2b00      	cmp	r3, #0
 801e698:	f000 8110 	beq.w	801e8bc <node_convert_integer+0x344>
 801e69c:	8864      	ldrh	r4, [r4, #2]
 801e69e:	b114      	cbz	r4, 801e6a6 <node_convert_integer+0x12e>
 801e6a0:	685b      	ldr	r3, [r3, #4]
 801e6a2:	f993 4000 	ldrsb.w	r4, [r3]
 801e6a6:	f1bc 0f00 	cmp.w	ip, #0
 801e6aa:	f000 80eb 	beq.w	801e884 <node_convert_integer+0x30c>
 801e6ae:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801e6b2:	2d00      	cmp	r5, #0
 801e6b4:	f000 80f9 	beq.w	801e8aa <node_convert_integer+0x332>
 801e6b8:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 801e6bc:	2b00      	cmp	r3, #0
 801e6be:	f000 80ef 	beq.w	801e8a0 <node_convert_integer+0x328>
 801e6c2:	686b      	ldr	r3, [r5, #4]
 801e6c4:	f993 3000 	ldrsb.w	r3, [r3]
 801e6c8:	ee07 3a90 	vmov	s15, r3
 801e6cc:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801e6d0:	2a00      	cmp	r2, #0
 801e6d2:	d0d5      	beq.n	801e680 <node_convert_integer+0x108>
 801e6d4:	440a      	add	r2, r1
 801e6d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e6da:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801e6de:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801e6e2:	eef0 5a47 	vmov.f32	s11, s14
 801e6e6:	1b1b      	subs	r3, r3, r4
 801e6e8:	ee07 3a90 	vmov	s15, r3
 801e6ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e6f0:	eee7 5a86 	vfma.f32	s11, s15, s12
 801e6f4:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801e6f8:	eef0 7a65 	vmov.f32	s15, s11
 801e6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e700:	bfd4      	ite	le
 801e702:	ee75 7ae6 	vsuble.f32	s15, s11, s13
 801e706:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 801e70a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e70e:	ee17 3a90 	vmov	r3, s15
 801e712:	f303 0307 	ssat	r3, #8, r3
 801e716:	f801 3b01 	strb.w	r3, [r1], #1
 801e71a:	4291      	cmp	r1, r2
 801e71c:	d1df      	bne.n	801e6de <node_convert_integer+0x166>
 801e71e:	bcf0      	pop	{r4, r5, r6, r7}
 801e720:	4770      	bx	lr
 801e722:	b144      	cbz	r4, 801e736 <node_convert_integer+0x1be>
 801e724:	6865      	ldr	r5, [r4, #4]
 801e726:	2d00      	cmp	r5, #0
 801e728:	f000 80c2 	beq.w	801e8b0 <node_convert_integer+0x338>
 801e72c:	8864      	ldrh	r4, [r4, #2]
 801e72e:	b114      	cbz	r4, 801e736 <node_convert_integer+0x1be>
 801e730:	686c      	ldr	r4, [r5, #4]
 801e732:	f994 4000 	ldrsb.w	r4, [r4]
 801e736:	f1bc 0f00 	cmp.w	ip, #0
 801e73a:	d00c      	beq.n	801e756 <node_convert_integer+0x1de>
 801e73c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801e740:	2e00      	cmp	r6, #0
 801e742:	f000 80b0 	beq.w	801e8a6 <node_convert_integer+0x32e>
 801e746:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 801e74a:	2d00      	cmp	r5, #0
 801e74c:	f000 80a6 	beq.w	801e89c <node_convert_integer+0x324>
 801e750:	6875      	ldr	r5, [r6, #4]
 801e752:	f895 c000 	ldrb.w	ip, [r5]
 801e756:	eef4 6a47 	vcmp.f32	s13, s14
 801e75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e75e:	d104      	bne.n	801e76a <node_convert_integer+0x1f2>
 801e760:	f104 0680 	add.w	r6, r4, #128	; 0x80
 801e764:	4566      	cmp	r6, ip
 801e766:	f000 80f8 	beq.w	801e95a <node_convert_integer+0x3e2>
 801e76a:	ee07 ca90 	vmov	s15, ip
 801e76e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801e772:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801e776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e77a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801e77e:	2a00      	cmp	r2, #0
 801e780:	f43f af7e 	beq.w	801e680 <node_convert_integer+0x108>
 801e784:	4402      	add	r2, r0
 801e786:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801e78a:	eef0 6a67 	vmov.f32	s13, s15
 801e78e:	1b1b      	subs	r3, r3, r4
 801e790:	ee07 3a10 	vmov	s14, r3
 801e794:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e798:	eee7 6a06 	vfma.f32	s13, s14, s12
 801e79c:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 801e7a0:	ee17 3a10 	vmov	r3, s14
 801e7a4:	f383 0308 	usat	r3, #8, r3
 801e7a8:	4290      	cmp	r0, r2
 801e7aa:	f801 3b01 	strb.w	r3, [r1], #1
 801e7ae:	d1ea      	bne.n	801e786 <node_convert_integer+0x20e>
 801e7b0:	bcf0      	pop	{r4, r5, r6, r7}
 801e7b2:	4770      	bx	lr
 801e7b4:	2c00      	cmp	r4, #0
 801e7b6:	d068      	beq.n	801e88a <node_convert_integer+0x312>
 801e7b8:	6866      	ldr	r6, [r4, #4]
 801e7ba:	2e00      	cmp	r6, #0
 801e7bc:	f000 808c 	beq.w	801e8d8 <node_convert_integer+0x360>
 801e7c0:	8865      	ldrh	r5, [r4, #2]
 801e7c2:	b10d      	cbz	r5, 801e7c8 <node_convert_integer+0x250>
 801e7c4:	6875      	ldr	r5, [r6, #4]
 801e7c6:	782d      	ldrb	r5, [r5, #0]
 801e7c8:	f1bc 0f00 	cmp.w	ip, #0
 801e7cc:	d061      	beq.n	801e892 <node_convert_integer+0x31a>
 801e7ce:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801e7d2:	2f00      	cmp	r7, #0
 801e7d4:	d078      	beq.n	801e8c8 <node_convert_integer+0x350>
 801e7d6:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 801e7da:	b116      	cbz	r6, 801e7e2 <node_convert_integer+0x26a>
 801e7dc:	687e      	ldr	r6, [r7, #4]
 801e7de:	f996 6000 	ldrsb.w	r6, [r6]
 801e7e2:	eef4 6a47 	vcmp.f32	s13, s14
 801e7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7ea:	d102      	bne.n	801e7f2 <node_convert_integer+0x27a>
 801e7ec:	3d80      	subs	r5, #128	; 0x80
 801e7ee:	42b5      	cmp	r5, r6
 801e7f0:	d07a      	beq.n	801e8e8 <node_convert_integer+0x370>
 801e7f2:	b13c      	cbz	r4, 801e804 <node_convert_integer+0x28c>
 801e7f4:	6863      	ldr	r3, [r4, #4]
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	f000 80ce 	beq.w	801e998 <node_convert_integer+0x420>
 801e7fc:	8864      	ldrh	r4, [r4, #2]
 801e7fe:	b10c      	cbz	r4, 801e804 <node_convert_integer+0x28c>
 801e800:	685b      	ldr	r3, [r3, #4]
 801e802:	781c      	ldrb	r4, [r3, #0]
 801e804:	f1bc 0f00 	cmp.w	ip, #0
 801e808:	d045      	beq.n	801e896 <node_convert_integer+0x31e>
 801e80a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801e80e:	2d00      	cmp	r5, #0
 801e810:	f000 80bf 	beq.w	801e992 <node_convert_integer+0x41a>
 801e814:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 801e818:	2b00      	cmp	r3, #0
 801e81a:	d05f      	beq.n	801e8dc <node_convert_integer+0x364>
 801e81c:	686b      	ldr	r3, [r5, #4]
 801e81e:	f993 3000 	ldrsb.w	r3, [r3]
 801e822:	ee07 3a90 	vmov	s15, r3
 801e826:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801e82a:	2a00      	cmp	r2, #0
 801e82c:	f43f af28 	beq.w	801e680 <node_convert_integer+0x108>
 801e830:	440a      	add	r2, r1
 801e832:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e836:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801e83a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e83e:	eef0 5a47 	vmov.f32	s11, s14
 801e842:	1b1b      	subs	r3, r3, r4
 801e844:	ee07 3a90 	vmov	s15, r3
 801e848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e84c:	eee7 5a86 	vfma.f32	s11, s15, s12
 801e850:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801e854:	eef0 7a65 	vmov.f32	s15, s11
 801e858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e85c:	bfd4      	ite	le
 801e85e:	ee75 7ae6 	vsuble.f32	s15, s11, s13
 801e862:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 801e866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e86a:	ee17 3a90 	vmov	r3, s15
 801e86e:	f303 0307 	ssat	r3, #8, r3
 801e872:	f801 3b01 	strb.w	r3, [r1], #1
 801e876:	4291      	cmp	r1, r2
 801e878:	d1df      	bne.n	801e83a <node_convert_integer+0x2c2>
 801e87a:	bcf0      	pop	{r4, r5, r6, r7}
 801e87c:	4770      	bx	lr
 801e87e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801e882:	e6e4      	b.n	801e64e <node_convert_integer+0xd6>
 801e884:	ee07 ca90 	vmov	s15, ip
 801e888:	e720      	b.n	801e6cc <node_convert_integer+0x154>
 801e88a:	4625      	mov	r5, r4
 801e88c:	e79c      	b.n	801e7c8 <node_convert_integer+0x250>
 801e88e:	2201      	movs	r2, #1
 801e890:	e690      	b.n	801e5b4 <node_convert_integer+0x3c>
 801e892:	4666      	mov	r6, ip
 801e894:	e7a5      	b.n	801e7e2 <node_convert_integer+0x26a>
 801e896:	ee07 ca90 	vmov	s15, ip
 801e89a:	e7c4      	b.n	801e826 <node_convert_integer+0x2ae>
 801e89c:	46ac      	mov	ip, r5
 801e89e:	e75a      	b.n	801e756 <node_convert_integer+0x1de>
 801e8a0:	ee07 3a90 	vmov	s15, r3
 801e8a4:	e712      	b.n	801e6cc <node_convert_integer+0x154>
 801e8a6:	46b4      	mov	ip, r6
 801e8a8:	e755      	b.n	801e756 <node_convert_integer+0x1de>
 801e8aa:	ee07 5a90 	vmov	s15, r5
 801e8ae:	e70d      	b.n	801e6cc <node_convert_integer+0x154>
 801e8b0:	462c      	mov	r4, r5
 801e8b2:	f1bc 0f00 	cmp.w	ip, #0
 801e8b6:	f47f af41 	bne.w	801e73c <node_convert_integer+0x1c4>
 801e8ba:	e74c      	b.n	801e756 <node_convert_integer+0x1de>
 801e8bc:	461c      	mov	r4, r3
 801e8be:	f1bc 0f00 	cmp.w	ip, #0
 801e8c2:	f47f aef4 	bne.w	801e6ae <node_convert_integer+0x136>
 801e8c6:	e7dd      	b.n	801e884 <node_convert_integer+0x30c>
 801e8c8:	463e      	mov	r6, r7
 801e8ca:	e78a      	b.n	801e7e2 <node_convert_integer+0x26a>
 801e8cc:	461c      	mov	r4, r3
 801e8ce:	f1bc 0f00 	cmp.w	ip, #0
 801e8d2:	f47f aea8 	bne.w	801e626 <node_convert_integer+0xae>
 801e8d6:	e7d2      	b.n	801e87e <node_convert_integer+0x306>
 801e8d8:	4635      	mov	r5, r6
 801e8da:	e775      	b.n	801e7c8 <node_convert_integer+0x250>
 801e8dc:	ee07 3a90 	vmov	s15, r3
 801e8e0:	e7a1      	b.n	801e826 <node_convert_integer+0x2ae>
 801e8e2:	bf00      	nop
 801e8e4:	00000000 	.word	0x00000000
 801e8e8:	2b00      	cmp	r3, #0
 801e8ea:	d057      	beq.n	801e99c <node_convert_integer+0x424>
 801e8ec:	009b      	lsls	r3, r3, #2
 801e8ee:	460f      	mov	r7, r1
 801e8f0:	f04f 1680 	mov.w	r6, #8388736	; 0x800080
 801e8f4:	eb00 0c03 	add.w	ip, r0, r3
 801e8f8:	f850 4b04 	ldr.w	r4, [r0], #4
 801e8fc:	ea4f 2534 	mov.w	r5, r4, ror #8
 801e900:	fa3f f585 	uxtb16	r5, r5
 801e904:	fad5 f506 	ssub16	r5, r5, r6
 801e908:	fa3f f484 	uxtb16	r4, r4
 801e90c:	fad4 f406 	ssub16	r4, r4, r6
 801e910:	022d      	lsls	r5, r5, #8
 801e912:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e916:	4560      	cmp	r0, ip
 801e918:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 801e91c:	ea44 0405 	orr.w	r4, r4, r5
 801e920:	f847 4b04 	str.w	r4, [r7], #4
 801e924:	d1e8      	bne.n	801e8f8 <node_convert_integer+0x380>
 801e926:	4419      	add	r1, r3
 801e928:	f012 0203 	ands.w	r2, r2, #3
 801e92c:	f43f aea8 	beq.w	801e680 <node_convert_integer+0x108>
 801e930:	f89c 3000 	ldrb.w	r3, [ip]
 801e934:	2a01      	cmp	r2, #1
 801e936:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801e93a:	700b      	strb	r3, [r1, #0]
 801e93c:	f43f aea0 	beq.w	801e680 <node_convert_integer+0x108>
 801e940:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e944:	2a03      	cmp	r2, #3
 801e946:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801e94a:	704b      	strb	r3, [r1, #1]
 801e94c:	f47f ae98 	bne.w	801e680 <node_convert_integer+0x108>
 801e950:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801e954:	3b80      	subs	r3, #128	; 0x80
 801e956:	708b      	strb	r3, [r1, #2]
 801e958:	e692      	b.n	801e680 <node_convert_integer+0x108>
 801e95a:	b1fb      	cbz	r3, 801e99c <node_convert_integer+0x424>
 801e95c:	009b      	lsls	r3, r3, #2
 801e95e:	460f      	mov	r7, r1
 801e960:	f04f 1680 	mov.w	r6, #8388736	; 0x800080
 801e964:	eb00 0c03 	add.w	ip, r0, r3
 801e968:	f850 4b04 	ldr.w	r4, [r0], #4
 801e96c:	ea4f 2534 	mov.w	r5, r4, ror #8
 801e970:	fa2f f585 	sxtb16	r5, r5
 801e974:	fa95 f506 	sadd16	r5, r5, r6
 801e978:	fa2f f484 	sxtb16	r4, r4
 801e97c:	fa94 f406 	sadd16	r4, r4, r6
 801e980:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e984:	4560      	cmp	r0, ip
 801e986:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 801e98a:	f847 4b04 	str.w	r4, [r7], #4
 801e98e:	d1eb      	bne.n	801e968 <node_convert_integer+0x3f0>
 801e990:	e7c9      	b.n	801e926 <node_convert_integer+0x3ae>
 801e992:	ee07 5a90 	vmov	s15, r5
 801e996:	e746      	b.n	801e826 <node_convert_integer+0x2ae>
 801e998:	461c      	mov	r4, r3
 801e99a:	e733      	b.n	801e804 <node_convert_integer+0x28c>
 801e99c:	4684      	mov	ip, r0
 801e99e:	e7c3      	b.n	801e928 <node_convert_integer+0x3b0>

0801e9a0 <core_init>:
 801e9a0:	2001      	movs	r0, #1
 801e9a2:	4770      	bx	lr

0801e9a4 <core_set_error>:
 801e9a4:	4603      	mov	r3, r0
 801e9a6:	7800      	ldrb	r0, [r0, #0]
 801e9a8:	b930      	cbnz	r0, 801e9b8 <core_set_error+0x14>
 801e9aa:	7019      	strb	r1, [r3, #0]
 801e9ac:	2001      	movs	r0, #1
 801e9ae:	6819      	ldr	r1, [r3, #0]
 801e9b0:	f362 211f 	bfi	r1, r2, #8, #24
 801e9b4:	6019      	str	r1, [r3, #0]
 801e9b6:	4770      	bx	lr
 801e9b8:	2000      	movs	r0, #0
 801e9ba:	4770      	bx	lr

0801e9bc <ai_sum>:
 801e9bc:	edd1 7a00 	vldr	s15, [r1]
 801e9c0:	ed92 7a00 	vldr	s14, [r2]
 801e9c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e9c8:	edc0 7a00 	vstr	s15, [r0]
 801e9cc:	4770      	bx	lr
 801e9ce:	bf00      	nop

0801e9d0 <ai_sum_buffer_INT8>:
 801e9d0:	b4f0      	push	{r4, r5, r6, r7}
 801e9d2:	9d04      	ldr	r5, [sp, #16]
 801e9d4:	9c08      	ldr	r4, [sp, #32]
 801e9d6:	ed95 7a00 	vldr	s14, [r5]
 801e9da:	edd4 7a00 	vldr	s15, [r4]
 801e9de:	9d07      	ldr	r5, [sp, #28]
 801e9e0:	eeb4 7a67 	vcmp.f32	s14, s15
 801e9e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e9e6:	e9dd 6705 	ldrd	r6, r7, [sp, #20]
 801e9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9ee:	ed97 6a00 	vldr	s12, [r7]
 801e9f2:	f996 6000 	ldrsb.w	r6, [r6]
 801e9f6:	f995 7000 	ldrsb.w	r7, [r5]
 801e9fa:	f994 5000 	ldrsb.w	r5, [r4]
 801e9fe:	d118      	bne.n	801ea32 <ai_sum_buffer_INT8+0x62>
 801ea00:	42ae      	cmp	r6, r5
 801ea02:	d116      	bne.n	801ea32 <ai_sum_buffer_INT8+0x62>
 801ea04:	eeb4 6a67 	vcmp.f32	s12, s15
 801ea08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea0c:	d111      	bne.n	801ea32 <ai_sum_buffer_INT8+0x62>
 801ea0e:	42af      	cmp	r7, r5
 801ea10:	d10f      	bne.n	801ea32 <ai_sum_buffer_INT8+0x62>
 801ea12:	b163      	cbz	r3, 801ea2e <ai_sum_buffer_INT8+0x5e>
 801ea14:	440b      	add	r3, r1
 801ea16:	f911 4b01 	ldrsb.w	r4, [r1], #1
 801ea1a:	f912 6b01 	ldrsb.w	r6, [r2], #1
 801ea1e:	4434      	add	r4, r6
 801ea20:	1b64      	subs	r4, r4, r5
 801ea22:	f304 0407 	ssat	r4, #8, r4
 801ea26:	428b      	cmp	r3, r1
 801ea28:	f800 4b01 	strb.w	r4, [r0], #1
 801ea2c:	d1f3      	bne.n	801ea16 <ai_sum_buffer_INT8+0x46>
 801ea2e:	bcf0      	pop	{r4, r5, r6, r7}
 801ea30:	4770      	bx	lr
 801ea32:	ee06 5a90 	vmov	s13, r5
 801ea36:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ea3a:	2b00      	cmp	r3, #0
 801ea3c:	d0f7      	beq.n	801ea2e <ai_sum_buffer_INT8+0x5e>
 801ea3e:	ee87 5a27 	vdiv.f32	s10, s14, s15
 801ea42:	440b      	add	r3, r1
 801ea44:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801ea48:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801ea4c:	f912 5b01 	ldrsb.w	r5, [r2], #1
 801ea50:	eef0 4a66 	vmov.f32	s9, s13
 801ea54:	f911 4b01 	ldrsb.w	r4, [r1], #1
 801ea58:	1bed      	subs	r5, r5, r7
 801ea5a:	1ba4      	subs	r4, r4, r6
 801ea5c:	ee07 5a90 	vmov	s15, r5
 801ea60:	ee07 4a10 	vmov	s14, r4
 801ea64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ea68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ea6c:	eee7 4aa5 	vfma.f32	s9, s15, s11
 801ea70:	eef0 7a64 	vmov.f32	s15, s9
 801ea74:	eee7 7a05 	vfma.f32	s15, s14, s10
 801ea78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ea7c:	ee37 7a86 	vadd.f32	s14, s15, s12
 801ea80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea84:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801ea88:	dd08      	ble.n	801ea9c <ai_sum_buffer_INT8+0xcc>
 801ea8a:	ee17 4a10 	vmov	r4, s14
 801ea8e:	f304 0407 	ssat	r4, #8, r4
 801ea92:	4299      	cmp	r1, r3
 801ea94:	f800 4b01 	strb.w	r4, [r0], #1
 801ea98:	d1d8      	bne.n	801ea4c <ai_sum_buffer_INT8+0x7c>
 801ea9a:	e7c8      	b.n	801ea2e <ai_sum_buffer_INT8+0x5e>
 801ea9c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801eaa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eaa4:	ee17 4a90 	vmov	r4, s15
 801eaa8:	f304 0407 	ssat	r4, #8, r4
 801eaac:	4299      	cmp	r1, r3
 801eaae:	f800 4b01 	strb.w	r4, [r0], #1
 801eab2:	d1cb      	bne.n	801ea4c <ai_sum_buffer_INT8+0x7c>
 801eab4:	bcf0      	pop	{r4, r5, r6, r7}
 801eab6:	4770      	bx	lr

0801eab8 <func_dummy>:
 801eab8:	4770      	bx	lr
 801eaba:	bf00      	nop

0801eabc <forward_conv2d_integer_SSSA_ch>:
 801eabc:	6983      	ldr	r3, [r0, #24]
 801eabe:	8819      	ldrh	r1, [r3, #0]
 801eac0:	2900      	cmp	r1, #0
 801eac2:	f000 8163 	beq.w	801ed8c <forward_conv2d_integer_SSSA_ch+0x2d0>
 801eac6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaca:	685a      	ldr	r2, [r3, #4]
 801eacc:	b0ad      	sub	sp, #180	; 0xb4
 801eace:	6853      	ldr	r3, [r2, #4]
 801ead0:	2b00      	cmp	r3, #0
 801ead2:	f000 8296 	beq.w	801f002 <forward_conv2d_integer_SSSA_ch+0x546>
 801ead6:	f8d3 e000 	ldr.w	lr, [r3]
 801eada:	2901      	cmp	r1, #1
 801eadc:	f240 8144 	bls.w	801ed68 <forward_conv2d_integer_SSSA_ch+0x2ac>
 801eae0:	6913      	ldr	r3, [r2, #16]
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	f000 8163 	beq.w	801edae <forward_conv2d_integer_SSSA_ch+0x2f2>
 801eae8:	681b      	ldr	r3, [r3, #0]
 801eaea:	9327      	str	r3, [sp, #156]	; 0x9c
 801eaec:	2902      	cmp	r1, #2
 801eaee:	f000 814f 	beq.w	801ed90 <forward_conv2d_integer_SSSA_ch+0x2d4>
 801eaf2:	69d3      	ldr	r3, [r2, #28]
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	f040 813d 	bne.w	801ed74 <forward_conv2d_integer_SSSA_ch+0x2b8>
 801eafa:	469c      	mov	ip, r3
 801eafc:	f112 0418 	adds.w	r4, r2, #24
 801eb00:	d007      	beq.n	801eb12 <forward_conv2d_integer_SSSA_ch+0x56>
 801eb02:	8b14      	ldrh	r4, [r2, #24]
 801eb04:	2c01      	cmp	r4, #1
 801eb06:	f240 816b 	bls.w	801ede0 <forward_conv2d_integer_SSSA_ch+0x324>
 801eb0a:	2b00      	cmp	r3, #0
 801eb0c:	f000 8292 	beq.w	801f034 <forward_conv2d_integer_SSSA_ch+0x578>
 801eb10:	685c      	ldr	r4, [r3, #4]
 801eb12:	2903      	cmp	r1, #3
 801eb14:	f000 812b 	beq.w	801ed6e <forward_conv2d_integer_SSSA_ch+0x2b2>
 801eb18:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801eb1a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801eb1c:	9124      	str	r1, [sp, #144]	; 0x90
 801eb1e:	2a00      	cmp	r2, #0
 801eb20:	f000 8147 	beq.w	801edb2 <forward_conv2d_integer_SSSA_ch+0x2f6>
 801eb24:	6816      	ldr	r6, [r2, #0]
 801eb26:	2900      	cmp	r1, #0
 801eb28:	f000 826f 	beq.w	801f00a <forward_conv2d_integer_SSSA_ch+0x54e>
 801eb2c:	f8d2 b004 	ldr.w	fp, [r2, #4]
 801eb30:	f8db 100c 	ldr.w	r1, [fp, #12]
 801eb34:	f8de 200c 	ldr.w	r2, [lr, #12]
 801eb38:	69a5      	ldr	r5, [r4, #24]
 801eb3a:	69b4      	ldr	r4, [r6, #24]
 801eb3c:	684e      	ldr	r6, [r1, #4]
 801eb3e:	6857      	ldr	r7, [r2, #4]
 801eb40:	961d      	str	r6, [sp, #116]	; 0x74
 801eb42:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 801eb44:	fa1f f987 	uxth.w	r9, r7
 801eb48:	f8dc a00c 	ldr.w	sl, [ip, #12]
 801eb4c:	68ad      	ldr	r5, [r5, #8]
 801eb4e:	9723      	str	r7, [sp, #140]	; 0x8c
 801eb50:	9522      	str	r5, [sp, #136]	; 0x88
 801eb52:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 801eb56:	68a5      	ldr	r5, [r4, #8]
 801eb58:	68cc      	ldr	r4, [r1, #12]
 801eb5a:	6889      	ldr	r1, [r1, #8]
 801eb5c:	9713      	str	r7, [sp, #76]	; 0x4c
 801eb5e:	9418      	str	r4, [sp, #96]	; 0x60
 801eb60:	911e      	str	r1, [sp, #120]	; 0x78
 801eb62:	e9d2 2802 	ldrd	r2, r8, [r2, #8]
 801eb66:	921f      	str	r2, [sp, #124]	; 0x7c
 801eb68:	8832      	ldrh	r2, [r6, #0]
 801eb6a:	9221      	str	r2, [sp, #132]	; 0x84
 801eb6c:	88b2      	ldrh	r2, [r6, #4]
 801eb6e:	921a      	str	r2, [sp, #104]	; 0x68
 801eb70:	f8da 2008 	ldr.w	r2, [sl, #8]
 801eb74:	f8da a004 	ldr.w	sl, [sl, #4]
 801eb78:	921c      	str	r2, [sp, #112]	; 0x70
 801eb7a:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 801eb7c:	9219      	str	r2, [sp, #100]	; 0x64
 801eb7e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801eb80:	9220      	str	r2, [sp, #128]	; 0x80
 801eb82:	69c2      	ldr	r2, [r0, #28]
 801eb84:	9225      	str	r2, [sp, #148]	; 0x94
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	f000 80f7 	beq.w	801ed7a <forward_conv2d_integer_SSSA_ch+0x2be>
 801eb8c:	689e      	ldr	r6, [r3, #8]
 801eb8e:	2e00      	cmp	r6, #0
 801eb90:	f000 80f3 	beq.w	801ed7a <forward_conv2d_integer_SSSA_ch+0x2be>
 801eb94:	69b3      	ldr	r3, [r6, #24]
 801eb96:	2b00      	cmp	r3, #0
 801eb98:	bf08      	it	eq
 801eb9a:	2600      	moveq	r6, #0
 801eb9c:	f8dc 1000 	ldr.w	r1, [ip]
 801eba0:	f8de 2000 	ldr.w	r2, [lr]
 801eba4:	f8db 3000 	ldr.w	r3, [fp]
 801eba8:	9128      	str	r1, [sp, #160]	; 0xa0
 801ebaa:	2a00      	cmp	r2, #0
 801ebac:	f000 80be 	beq.w	801ed2c <forward_conv2d_integer_SSSA_ch+0x270>
 801ebb0:	6851      	ldr	r1, [r2, #4]
 801ebb2:	2900      	cmp	r1, #0
 801ebb4:	f000 80ba 	beq.w	801ed2c <forward_conv2d_integer_SSSA_ch+0x270>
 801ebb8:	8850      	ldrh	r0, [r2, #2]
 801ebba:	2800      	cmp	r0, #0
 801ebbc:	f000 80b6 	beq.w	801ed2c <forward_conv2d_integer_SSSA_ch+0x270>
 801ebc0:	6809      	ldr	r1, [r1, #0]
 801ebc2:	ed91 0a00 	vldr	s0, [r1]
 801ebc6:	b12b      	cbz	r3, 801ebd4 <forward_conv2d_integer_SSSA_ch+0x118>
 801ebc8:	6859      	ldr	r1, [r3, #4]
 801ebca:	b119      	cbz	r1, 801ebd4 <forward_conv2d_integer_SSSA_ch+0x118>
 801ebcc:	8858      	ldrh	r0, [r3, #2]
 801ebce:	2800      	cmp	r0, #0
 801ebd0:	f040 8213 	bne.w	801effa <forward_conv2d_integer_SSSA_ch+0x53e>
 801ebd4:	eddf 0a83 	vldr	s1, [pc, #524]	; 801ede4 <forward_conv2d_integer_SSSA_ch+0x328>
 801ebd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ebda:	4551      	cmp	r1, sl
 801ebdc:	f040 80a9 	bne.w	801ed32 <forward_conv2d_integer_SSSA_ch+0x276>
 801ebe0:	9919      	ldr	r1, [sp, #100]	; 0x64
 801ebe2:	9820      	ldr	r0, [sp, #128]	; 0x80
 801ebe4:	4281      	cmp	r1, r0
 801ebe6:	f040 80a4 	bne.w	801ed32 <forward_conv2d_integer_SSSA_ch+0x276>
 801ebea:	9921      	ldr	r1, [sp, #132]	; 0x84
 801ebec:	981a      	ldr	r0, [sp, #104]	; 0x68
 801ebee:	4281      	cmp	r1, r0
 801ebf0:	f040 809f 	bne.w	801ed32 <forward_conv2d_integer_SSSA_ch+0x276>
 801ebf4:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801ebf6:	4588      	cmp	r8, r1
 801ebf8:	f040 809b 	bne.w	801ed32 <forward_conv2d_integer_SSSA_ch+0x276>
 801ebfc:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ebfe:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ec00:	4281      	cmp	r1, r0
 801ec02:	bf08      	it	eq
 801ec04:	f1b9 0f03 	cmpeq.w	r9, #3
 801ec08:	bf0c      	ite	eq
 801ec0a:	2401      	moveq	r4, #1
 801ec0c:	2400      	movne	r4, #0
 801ec0e:	f1ba 0f01 	cmp.w	sl, #1
 801ec12:	9414      	str	r4, [sp, #80]	; 0x50
 801ec14:	f000 8093 	beq.w	801ed3e <forward_conv2d_integer_SSSA_ch+0x282>
 801ec18:	2100      	movs	r1, #0
 801ec1a:	9114      	str	r1, [sp, #80]	; 0x50
 801ec1c:	f8dc 0018 	ldr.w	r0, [ip, #24]
 801ec20:	f8de e018 	ldr.w	lr, [lr, #24]
 801ec24:	6880      	ldr	r0, [r0, #8]
 801ec26:	f8de 7008 	ldr.w	r7, [lr, #8]
 801ec2a:	9014      	str	r0, [sp, #80]	; 0x50
 801ec2c:	f8db 0018 	ldr.w	r0, [fp, #24]
 801ec30:	971b      	str	r7, [sp, #108]	; 0x6c
 801ec32:	6880      	ldr	r0, [r0, #8]
 801ec34:	9017      	str	r0, [sp, #92]	; 0x5c
 801ec36:	2a00      	cmp	r2, #0
 801ec38:	f000 8094 	beq.w	801ed64 <forward_conv2d_integer_SSSA_ch+0x2a8>
 801ec3c:	6850      	ldr	r0, [r2, #4]
 801ec3e:	2800      	cmp	r0, #0
 801ec40:	f000 81e1 	beq.w	801f006 <forward_conv2d_integer_SSSA_ch+0x54a>
 801ec44:	8852      	ldrh	r2, [r2, #2]
 801ec46:	2a00      	cmp	r2, #0
 801ec48:	f000 808c 	beq.w	801ed64 <forward_conv2d_integer_SSSA_ch+0x2a8>
 801ec4c:	6842      	ldr	r2, [r0, #4]
 801ec4e:	f992 2000 	ldrsb.w	r2, [r2]
 801ec52:	9215      	str	r2, [sp, #84]	; 0x54
 801ec54:	b13b      	cbz	r3, 801ec66 <forward_conv2d_integer_SSSA_ch+0x1aa>
 801ec56:	685a      	ldr	r2, [r3, #4]
 801ec58:	2a00      	cmp	r2, #0
 801ec5a:	f000 81db 	beq.w	801f014 <forward_conv2d_integer_SSSA_ch+0x558>
 801ec5e:	885b      	ldrh	r3, [r3, #2]
 801ec60:	2b00      	cmp	r3, #0
 801ec62:	f040 81c5 	bne.w	801eff0 <forward_conv2d_integer_SSSA_ch+0x534>
 801ec66:	9316      	str	r3, [sp, #88]	; 0x58
 801ec68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	f000 8093 	beq.w	801ed96 <forward_conv2d_integer_SSSA_ch+0x2da>
 801ec70:	6858      	ldr	r0, [r3, #4]
 801ec72:	b100      	cbz	r0, 801ec76 <forward_conv2d_integer_SSSA_ch+0x1ba>
 801ec74:	6800      	ldr	r0, [r0, #0]
 801ec76:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801ec7a:	9323      	str	r3, [sp, #140]	; 0x8c
 801ec7c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ec7e:	2b01      	cmp	r3, #1
 801ec80:	f000 8091 	beq.w	801eda6 <forward_conv2d_integer_SSSA_ch+0x2ea>
 801ec84:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801ec86:	4293      	cmp	r3, r2
 801ec88:	bf0c      	ite	eq
 801ec8a:	2317      	moveq	r3, #23
 801ec8c:	2300      	movne	r3, #0
 801ec8e:	9329      	str	r3, [sp, #164]	; 0xa4
 801ec90:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801ec92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ec94:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
 801ec98:	fb03 f307 	mul.w	r3, r3, r7
 801ec9c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801ec9e:	921d      	str	r2, [sp, #116]	; 0x74
 801eca0:	fb02 7303 	mla	r3, r2, r3, r7
 801eca4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801eca6:	429f      	cmp	r7, r3
 801eca8:	d26d      	bcs.n	801ed86 <forward_conv2d_integer_SSSA_ch+0x2ca>
 801ecaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ecac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801ecae:	fb03 f308 	mul.w	r3, r3, r8
 801ecb2:	fb02 7303 	mla	r3, r2, r3, r7
 801ecb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801ecb8:	429a      	cmp	r2, r3
 801ecba:	bf2c      	ite	cs
 801ecbc:	2300      	movcs	r3, #0
 801ecbe:	2301      	movcc	r3, #1
 801ecc0:	9326      	str	r3, [sp, #152]	; 0x98
 801ecc2:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 801ecc6:	fa1f fa8a 	uxth.w	sl, sl
 801ecca:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801eccc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ecce:	921c      	str	r2, [sp, #112]	; 0x70
 801ecd0:	2f01      	cmp	r7, #1
 801ecd2:	fb1a f202 	smulbb	r2, sl, r2
 801ecd6:	885b      	ldrh	r3, [r3, #2]
 801ecd8:	b292      	uxth	r2, r2
 801ecda:	d003      	beq.n	801ece4 <forward_conv2d_integer_SSSA_ch+0x228>
 801ecdc:	46bc      	mov	ip, r7
 801ecde:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801ece0:	45bc      	cmp	ip, r7
 801ece2:	d06f      	beq.n	801edc4 <forward_conv2d_integer_SSSA_ch+0x308>
 801ece4:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801ece6:	fb02 f207 	mul.w	r2, r2, r7
 801ecea:	2c00      	cmp	r4, #0
 801ecec:	f040 8194 	bne.w	801f018 <forward_conv2d_integer_SSSA_ch+0x55c>
 801ecf0:	2900      	cmp	r1, #0
 801ecf2:	f000 8191 	beq.w	801f018 <forward_conv2d_integer_SSSA_ch+0x55c>
 801ecf6:	0094      	lsls	r4, r2, #2
 801ecf8:	2b01      	cmp	r3, #1
 801ecfa:	d960      	bls.n	801edbe <forward_conv2d_integer_SSSA_ch+0x302>
 801ecfc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ecfe:	0093      	lsls	r3, r2, #2
 801ed00:	189a      	adds	r2, r3, r2
 801ed02:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 801ed06:	18eb      	adds	r3, r5, r3
 801ed08:	462a      	mov	r2, r5
 801ed0a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801ed0c:	9325      	str	r3, [sp, #148]	; 0x94
 801ed0e:	f002 f97f 	bl	8021010 <align_factor_ch>
 801ed12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ed14:	3b15      	subs	r3, #21
 801ed16:	e9cd 542a 	strd	r5, r4, [sp, #168]	; 0xa8
 801ed1a:	2b03      	cmp	r3, #3
 801ed1c:	f200 818c 	bhi.w	801f038 <forward_conv2d_integer_SSSA_ch+0x57c>
 801ed20:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ed24:	00e4013d 	.word	0x00e4013d
 801ed28:	006200ae 	.word	0x006200ae
 801ed2c:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801ede4 <forward_conv2d_integer_SSSA_ch+0x328>
 801ed30:	e749      	b.n	801ebc6 <forward_conv2d_integer_SSSA_ch+0x10a>
 801ed32:	2400      	movs	r4, #0
 801ed34:	f1ba 0f01 	cmp.w	sl, #1
 801ed38:	9414      	str	r4, [sp, #80]	; 0x50
 801ed3a:	f47f af6d 	bne.w	801ec18 <forward_conv2d_integer_SSSA_ch+0x15c>
 801ed3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ed40:	2901      	cmp	r1, #1
 801ed42:	f47f af69 	bne.w	801ec18 <forward_conv2d_integer_SSSA_ch+0x15c>
 801ed46:	9921      	ldr	r1, [sp, #132]	; 0x84
 801ed48:	981a      	ldr	r0, [sp, #104]	; 0x68
 801ed4a:	4301      	orrs	r1, r0
 801ed4c:	f47f af64 	bne.w	801ec18 <forward_conv2d_integer_SSSA_ch+0x15c>
 801ed50:	9919      	ldr	r1, [sp, #100]	; 0x64
 801ed52:	9820      	ldr	r0, [sp, #128]	; 0x80
 801ed54:	2901      	cmp	r1, #1
 801ed56:	bf08      	it	eq
 801ed58:	2801      	cmpeq	r0, #1
 801ed5a:	bf0c      	ite	eq
 801ed5c:	2101      	moveq	r1, #1
 801ed5e:	2100      	movne	r1, #0
 801ed60:	9114      	str	r1, [sp, #80]	; 0x50
 801ed62:	e75b      	b.n	801ec1c <forward_conv2d_integer_SSSA_ch+0x160>
 801ed64:	9215      	str	r2, [sp, #84]	; 0x54
 801ed66:	e775      	b.n	801ec54 <forward_conv2d_integer_SSSA_ch+0x198>
 801ed68:	2300      	movs	r3, #0
 801ed6a:	685b      	ldr	r3, [r3, #4]
 801ed6c:	deff      	udf	#255	; 0xff
 801ed6e:	2300      	movs	r3, #0
 801ed70:	685b      	ldr	r3, [r3, #4]
 801ed72:	deff      	udf	#255	; 0xff
 801ed74:	f8d3 c000 	ldr.w	ip, [r3]
 801ed78:	e6c0      	b.n	801eafc <forward_conv2d_integer_SSSA_ch+0x40>
 801ed7a:	6a06      	ldr	r6, [r0, #32]
 801ed7c:	2e00      	cmp	r6, #0
 801ed7e:	f43f af0d 	beq.w	801eb9c <forward_conv2d_integer_SSSA_ch+0xe0>
 801ed82:	68b6      	ldr	r6, [r6, #8]
 801ed84:	e70a      	b.n	801eb9c <forward_conv2d_integer_SSSA_ch+0xe0>
 801ed86:	2300      	movs	r3, #0
 801ed88:	9326      	str	r3, [sp, #152]	; 0x98
 801ed8a:	e79a      	b.n	801ecc2 <forward_conv2d_integer_SSSA_ch+0x206>
 801ed8c:	684b      	ldr	r3, [r1, #4]
 801ed8e:	deff      	udf	#255	; 0xff
 801ed90:	2300      	movs	r3, #0
 801ed92:	685b      	ldr	r3, [r3, #4]
 801ed94:	deff      	udf	#255	; 0xff
 801ed96:	4618      	mov	r0, r3
 801ed98:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801ed9c:	9323      	str	r3, [sp, #140]	; 0x8c
 801ed9e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801eda0:	2b01      	cmp	r3, #1
 801eda2:	f47f af6f 	bne.w	801ec84 <forward_conv2d_integer_SSSA_ch+0x1c8>
 801eda6:	b1a4      	cbz	r4, 801edd2 <forward_conv2d_integer_SSSA_ch+0x316>
 801eda8:	2315      	movs	r3, #21
 801edaa:	9329      	str	r3, [sp, #164]	; 0xa4
 801edac:	e770      	b.n	801ec90 <forward_conv2d_integer_SSSA_ch+0x1d4>
 801edae:	9327      	str	r3, [sp, #156]	; 0x9c
 801edb0:	e69c      	b.n	801eaec <forward_conv2d_integer_SSSA_ch+0x30>
 801edb2:	460b      	mov	r3, r1
 801edb4:	b909      	cbnz	r1, 801edba <forward_conv2d_integer_SSSA_ch+0x2fe>
 801edb6:	699b      	ldr	r3, [r3, #24]
 801edb8:	deff      	udf	#255	; 0xff
 801edba:	68d3      	ldr	r3, [r2, #12]
 801edbc:	deff      	udf	#255	; 0xff
 801edbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801edc0:	009b      	lsls	r3, r3, #2
 801edc2:	e7a0      	b.n	801ed06 <forward_conv2d_integer_SSSA_ch+0x24a>
 801edc4:	991d      	ldr	r1, [sp, #116]	; 0x74
 801edc6:	fb01 f202 	mul.w	r2, r1, r2
 801edca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801edce:	1c54      	adds	r4, r2, #1
 801edd0:	e792      	b.n	801ecf8 <forward_conv2d_integer_SSSA_ch+0x23c>
 801edd2:	2900      	cmp	r1, #0
 801edd4:	460b      	mov	r3, r1
 801edd6:	bf0c      	ite	eq
 801edd8:	2318      	moveq	r3, #24
 801edda:	2316      	movne	r3, #22
 801eddc:	9329      	str	r3, [sp, #164]	; 0xa4
 801edde:	e757      	b.n	801ec90 <forward_conv2d_integer_SSSA_ch+0x1d4>
 801ede0:	2400      	movs	r4, #0
 801ede2:	e696      	b.n	801eb12 <forward_conv2d_integer_SSSA_ch+0x56>
 801ede4:	00000000 	.word	0x00000000
 801ede8:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801edea:	4653      	mov	r3, sl
 801edec:	9922      	ldr	r1, [sp, #136]	; 0x88
 801edee:	4648      	mov	r0, r9
 801edf0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801edf2:	9702      	str	r7, [sp, #8]
 801edf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801edf6:	9101      	str	r1, [sp, #4]
 801edf8:	9400      	str	r4, [sp, #0]
 801edfa:	9914      	ldr	r1, [sp, #80]	; 0x50
 801edfc:	9503      	str	r5, [sp, #12]
 801edfe:	f002 ff39 	bl	8021c74 <st_sssa8_ch_convolve_rank1upd>
 801ee02:	970b      	str	r7, [sp, #44]	; 0x2c
 801ee04:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801ee06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ee08:	9707      	str	r7, [sp, #28]
 801ee0a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801ee0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ee0e:	9706      	str	r7, [sp, #24]
 801ee10:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801ee12:	9822      	ldr	r0, [sp, #136]	; 0x88
 801ee14:	9705      	str	r7, [sp, #20]
 801ee16:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801ee18:	930d      	str	r3, [sp, #52]	; 0x34
 801ee1a:	9704      	str	r7, [sp, #16]
 801ee1c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801ee1e:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 801ee22:	920c      	str	r2, [sp, #48]	; 0x30
 801ee24:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ee26:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801ee2a:	930e      	str	r3, [sp, #56]	; 0x38
 801ee2c:	464b      	mov	r3, r9
 801ee2e:	920a      	str	r2, [sp, #40]	; 0x28
 801ee30:	fa1f f288 	uxth.w	r2, r8
 801ee34:	9008      	str	r0, [sp, #32]
 801ee36:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 801ee3a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ee3c:	9509      	str	r5, [sp, #36]	; 0x24
 801ee3e:	e9cd a702 	strd	sl, r7, [sp, #8]
 801ee42:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801ee44:	9701      	str	r7, [sp, #4]
 801ee46:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801ee48:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
 801ee4c:	9700      	str	r7, [sp, #0]
 801ee4e:	f002 ff99 	bl	8021d84 <st_sssa8_ch_convolve>
 801ee52:	f8db 3008 	ldr.w	r3, [fp, #8]
 801ee56:	0a1b      	lsrs	r3, r3, #8
 801ee58:	d046      	beq.n	801eee8 <forward_conv2d_integer_SSSA_ch+0x42c>
 801ee5a:	f8db 100c 	ldr.w	r1, [fp, #12]
 801ee5e:	2201      	movs	r2, #1
 801ee60:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ee64:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 801ee68:	4299      	cmp	r1, r3
 801ee6a:	fb00 f202 	mul.w	r2, r0, r2
 801ee6e:	d1f9      	bne.n	801ee64 <forward_conv2d_integer_SSSA_ch+0x3a8>
 801ee70:	4633      	mov	r3, r6
 801ee72:	4659      	mov	r1, fp
 801ee74:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ee76:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801ee78:	47a0      	blx	r4
 801ee7a:	b02d      	add	sp, #180	; 0xb4
 801ee7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee80:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 801ee84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ee86:	4652      	mov	r2, sl
 801ee88:	9500      	str	r5, [sp, #0]
 801ee8a:	f002 f935 	bl	80210f8 <st_sssa8_ch_conv_dw_Wadapt>
 801ee8e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801ee90:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ee92:	9707      	str	r7, [sp, #28]
 801ee94:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801ee96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ee98:	9706      	str	r7, [sp, #24]
 801ee9a:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801ee9c:	920c      	str	r2, [sp, #48]	; 0x30
 801ee9e:	9705      	str	r7, [sp, #20]
 801eea0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801eea2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801eea4:	9704      	str	r7, [sp, #16]
 801eea6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801eea8:	9822      	ldr	r0, [sp, #136]	; 0x88
 801eeaa:	930d      	str	r3, [sp, #52]	; 0x34
 801eeac:	920b      	str	r2, [sp, #44]	; 0x2c
 801eeae:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 801eeb2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801eeb4:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801eeb8:	930e      	str	r3, [sp, #56]	; 0x38
 801eeba:	464b      	mov	r3, r9
 801eebc:	920a      	str	r2, [sp, #40]	; 0x28
 801eebe:	fa1f f288 	uxth.w	r2, r8
 801eec2:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 801eec6:	9008      	str	r0, [sp, #32]
 801eec8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801eeca:	9509      	str	r5, [sp, #36]	; 0x24
 801eecc:	e9cd a702 	strd	sl, r7, [sp, #8]
 801eed0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801eed2:	9701      	str	r7, [sp, #4]
 801eed4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801eed6:	9700      	str	r7, [sp, #0]
 801eed8:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
 801eedc:	f002 f9c2 	bl	8021264 <st_sssa8_ch_convolve_dw>
 801eee0:	f8db 3008 	ldr.w	r3, [fp, #8]
 801eee4:	0a1b      	lsrs	r3, r3, #8
 801eee6:	d1b8      	bne.n	801ee5a <forward_conv2d_integer_SSSA_ch+0x39e>
 801eee8:	2201      	movs	r2, #1
 801eeea:	e7c1      	b.n	801ee70 <forward_conv2d_integer_SSSA_ch+0x3b4>
 801eeec:	ab2a      	add	r3, sp, #168	; 0xa8
 801eeee:	464a      	mov	r2, r9
 801eef0:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 801eef4:	f004 f890 	bl	8023018 <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 801eef8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eefa:	2b00      	cmp	r3, #0
 801eefc:	f040 809d 	bne.w	801f03a <forward_conv2d_integer_SSSA_ch+0x57e>
 801ef00:	fa1f f388 	uxth.w	r3, r8
 801ef04:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801ef08:	f04f 0801 	mov.w	r8, #1
 801ef0c:	9326      	str	r3, [sp, #152]	; 0x98
 801ef0e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801ef10:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801ef12:	9513      	str	r5, [sp, #76]	; 0x4c
 801ef14:	e9dd 321d 	ldrd	r3, r2, [sp, #116]	; 0x74
 801ef18:	fb02 f303 	mul.w	r3, r2, r3
 801ef1c:	931d      	str	r3, [sp, #116]	; 0x74
 801ef1e:	b28b      	uxth	r3, r1
 801ef20:	9328      	str	r3, [sp, #160]	; 0xa0
 801ef22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ef24:	9423      	str	r4, [sp, #140]	; 0x8c
 801ef26:	fb03 f301 	mul.w	r3, r3, r1
 801ef2a:	931e      	str	r3, [sp, #120]	; 0x78
 801ef2c:	b293      	uxth	r3, r2
 801ef2e:	931f      	str	r3, [sp, #124]	; 0x7c
 801ef30:	2300      	movs	r3, #0
 801ef32:	9318      	str	r3, [sp, #96]	; 0x60
 801ef34:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ef36:	3301      	adds	r3, #1
 801ef38:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801ef3a:	9509      	str	r5, [sp, #36]	; 0x24
 801ef3c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801ef3e:	940d      	str	r4, [sp, #52]	; 0x34
 801ef40:	442c      	add	r4, r5
 801ef42:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 801ef46:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801ef48:	9417      	str	r4, [sp, #92]	; 0x5c
 801ef4a:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801ef4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ef4e:	9408      	str	r4, [sp, #32]
 801ef50:	4664      	mov	r4, ip
 801ef52:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ef54:	442c      	add	r4, r5
 801ef56:	9825      	ldr	r0, [sp, #148]	; 0x94
 801ef58:	910c      	str	r1, [sp, #48]	; 0x30
 801ef5a:	941b      	str	r4, [sp, #108]	; 0x6c
 801ef5c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801ef5e:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ef60:	9407      	str	r4, [sp, #28]
 801ef62:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801ef64:	9318      	str	r3, [sp, #96]	; 0x60
 801ef66:	464b      	mov	r3, r9
 801ef68:	9406      	str	r4, [sp, #24]
 801ef6a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801ef6c:	920e      	str	r2, [sp, #56]	; 0x38
 801ef6e:	9405      	str	r4, [sp, #20]
 801ef70:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801ef72:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ef74:	9404      	str	r4, [sp, #16]
 801ef76:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801ef78:	910b      	str	r1, [sp, #44]	; 0x2c
 801ef7a:	900a      	str	r0, [sp, #40]	; 0x28
 801ef7c:	4660      	mov	r0, ip
 801ef7e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ef80:	e9cd a402 	strd	sl, r4, [sp, #8]
 801ef84:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ef86:	9701      	str	r7, [sp, #4]
 801ef88:	9400      	str	r4, [sp, #0]
 801ef8a:	ac2a      	add	r4, sp, #168	; 0xa8
 801ef8c:	9410      	str	r4, [sp, #64]	; 0x40
 801ef8e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 801ef90:	940f      	str	r4, [sp, #60]	; 0x3c
 801ef92:	f004 f855 	bl	8023040 <st_sssa8_ch_convolve_1x1>
 801ef96:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ef98:	4543      	cmp	r3, r8
 801ef9a:	d3cb      	bcc.n	801ef34 <forward_conv2d_integer_SSSA_ch+0x478>
 801ef9c:	e759      	b.n	801ee52 <forward_conv2d_integer_SSSA_ch+0x396>
 801ef9e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801efa0:	4653      	mov	r3, sl
 801efa2:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801efa4:	4648      	mov	r0, r9
 801efa6:	9402      	str	r4, [sp, #8]
 801efa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801efaa:	9914      	ldr	r1, [sp, #80]	; 0x50
 801efac:	9503      	str	r5, [sp, #12]
 801efae:	9701      	str	r7, [sp, #4]
 801efb0:	f8cd a000 	str.w	sl, [sp]
 801efb4:	f002 fe5e 	bl	8021c74 <st_sssa8_ch_convolve_rank1upd>
 801efb8:	9407      	str	r4, [sp, #28]
 801efba:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801efbc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801efbe:	9403      	str	r4, [sp, #12]
 801efc0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801efc2:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 801efc6:	9825      	ldr	r0, [sp, #148]	; 0x94
 801efc8:	9109      	str	r1, [sp, #36]	; 0x24
 801efca:	9916      	ldr	r1, [sp, #88]	; 0x58
 801efcc:	920a      	str	r2, [sp, #40]	; 0x28
 801efce:	464a      	mov	r2, r9
 801efd0:	9108      	str	r1, [sp, #32]
 801efd2:	fa1f f188 	uxth.w	r1, r8
 801efd6:	9006      	str	r0, [sp, #24]
 801efd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801efda:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801efdc:	950b      	str	r5, [sp, #44]	; 0x2c
 801efde:	e9cd a401 	strd	sl, r4, [sp, #4]
 801efe2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801efe4:	e9cd 7504 	strd	r7, r5, [sp, #16]
 801efe8:	9400      	str	r4, [sp, #0]
 801efea:	f003 fc19 	bl	8022820 <st_sssa8_ch_convolve_rgb>
 801efee:	e730      	b.n	801ee52 <forward_conv2d_integer_SSSA_ch+0x396>
 801eff0:	6853      	ldr	r3, [r2, #4]
 801eff2:	f993 3000 	ldrsb.w	r3, [r3]
 801eff6:	9316      	str	r3, [sp, #88]	; 0x58
 801eff8:	e636      	b.n	801ec68 <forward_conv2d_integer_SSSA_ch+0x1ac>
 801effa:	6809      	ldr	r1, [r1, #0]
 801effc:	edd1 0a00 	vldr	s1, [r1]
 801f000:	e5ea      	b.n	801ebd8 <forward_conv2d_integer_SSSA_ch+0x11c>
 801f002:	469e      	mov	lr, r3
 801f004:	e569      	b.n	801eada <forward_conv2d_integer_SSSA_ch+0x1e>
 801f006:	9015      	str	r0, [sp, #84]	; 0x54
 801f008:	e624      	b.n	801ec54 <forward_conv2d_integer_SSSA_ch+0x198>
 801f00a:	4a0f      	ldr	r2, [pc, #60]	; (801f048 <forward_conv2d_integer_SSSA_ch+0x58c>)
 801f00c:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 801f010:	9224      	str	r2, [sp, #144]	; 0x90
 801f012:	e58d      	b.n	801eb30 <forward_conv2d_integer_SSSA_ch+0x74>
 801f014:	9216      	str	r2, [sp, #88]	; 0x58
 801f016:	e627      	b.n	801ec68 <forward_conv2d_integer_SSSA_ch+0x1ac>
 801f018:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801f01a:	4621      	mov	r1, r4
 801f01c:	4414      	add	r4, r2
 801f01e:	fb02 f101 	mul.w	r1, r2, r1
 801f022:	00a4      	lsls	r4, r4, #2
 801f024:	004a      	lsls	r2, r1, #1
 801f026:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 801f02a:	bfd4      	ite	le
 801f02c:	18a4      	addle	r4, r4, r2
 801f02e:	f504 54a0 	addgt.w	r4, r4, #5120	; 0x1400
 801f032:	e661      	b.n	801ecf8 <forward_conv2d_integer_SSSA_ch+0x23c>
 801f034:	461c      	mov	r4, r3
 801f036:	e56c      	b.n	801eb12 <forward_conv2d_integer_SSSA_ch+0x56>
 801f038:	e7fe      	b.n	801f038 <forward_conv2d_integer_SSSA_ch+0x57c>
 801f03a:	f1b8 0f00 	cmp.w	r8, #0
 801f03e:	f43f af08 	beq.w	801ee52 <forward_conv2d_integer_SSSA_ch+0x396>
 801f042:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801f044:	e763      	b.n	801ef0e <forward_conv2d_integer_SSSA_ch+0x452>
 801f046:	bf00      	nop
 801f048:	0801eab9 	.word	0x0801eab9

0801f04c <forward_conv2d_nl_pool_integer_SSSA_ch>:
 801f04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f050:	6983      	ldr	r3, [r0, #24]
 801f052:	b0d3      	sub	sp, #332	; 0x14c
 801f054:	881e      	ldrh	r6, [r3, #0]
 801f056:	2e00      	cmp	r6, #0
 801f058:	f000 81b8 	beq.w	801f3cc <forward_conv2d_nl_pool_integer_SSSA_ch+0x380>
 801f05c:	6859      	ldr	r1, [r3, #4]
 801f05e:	684d      	ldr	r5, [r1, #4]
 801f060:	2d00      	cmp	r5, #0
 801f062:	f000 8361 	beq.w	801f728 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6dc>
 801f066:	682b      	ldr	r3, [r5, #0]
 801f068:	9314      	str	r3, [sp, #80]	; 0x50
 801f06a:	2e01      	cmp	r6, #1
 801f06c:	f240 81ab 	bls.w	801f3c6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37a>
 801f070:	690b      	ldr	r3, [r1, #16]
 801f072:	2b00      	cmp	r3, #0
 801f074:	f000 82b3 	beq.w	801f5de <forward_conv2d_nl_pool_integer_SSSA_ch+0x592>
 801f078:	681b      	ldr	r3, [r3, #0]
 801f07a:	9318      	str	r3, [sp, #96]	; 0x60
 801f07c:	2e02      	cmp	r6, #2
 801f07e:	f000 81a2 	beq.w	801f3c6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37a>
 801f082:	69cc      	ldr	r4, [r1, #28]
 801f084:	2c00      	cmp	r4, #0
 801f086:	f040 82a8 	bne.w	801f5da <forward_conv2d_nl_pool_integer_SSSA_ch+0x58e>
 801f08a:	4623      	mov	r3, r4
 801f08c:	f111 0218 	adds.w	r2, r1, #24
 801f090:	d007      	beq.n	801f0a2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 801f092:	8b0a      	ldrh	r2, [r1, #24]
 801f094:	2a01      	cmp	r2, #1
 801f096:	f240 8373 	bls.w	801f780 <forward_conv2d_nl_pool_integer_SSSA_ch+0x734>
 801f09a:	2c00      	cmp	r4, #0
 801f09c:	f000 836e 	beq.w	801f77c <forward_conv2d_nl_pool_integer_SSSA_ch+0x730>
 801f0a0:	6862      	ldr	r2, [r4, #4]
 801f0a2:	2e03      	cmp	r6, #3
 801f0a4:	f000 818f 	beq.w	801f3c6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37a>
 801f0a8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 801f0aa:	2900      	cmp	r1, #0
 801f0ac:	f000 8190 	beq.w	801f3d0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x384>
 801f0b0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f0b2:	680d      	ldr	r5, [r1, #0]
 801f0b4:	962f      	str	r6, [sp, #188]	; 0xbc
 801f0b6:	9515      	str	r5, [sp, #84]	; 0x54
 801f0b8:	f8d1 b004 	ldr.w	fp, [r1, #4]
 801f0bc:	2e00      	cmp	r6, #0
 801f0be:	f000 8358 	beq.w	801f772 <forward_conv2d_nl_pool_integer_SSSA_ch+0x726>
 801f0c2:	6889      	ldr	r1, [r1, #8]
 801f0c4:	911c      	str	r1, [sp, #112]	; 0x70
 801f0c6:	9914      	ldr	r1, [sp, #80]	; 0x50
 801f0c8:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 801f0cc:	68cf      	ldr	r7, [r1, #12]
 801f0ce:	f8db 100c 	ldr.w	r1, [fp, #12]
 801f0d2:	687e      	ldr	r6, [r7, #4]
 801f0d4:	6849      	ldr	r1, [r1, #4]
 801f0d6:	4635      	mov	r5, r6
 801f0d8:	9623      	str	r6, [sp, #140]	; 0x8c
 801f0da:	9124      	str	r1, [sp, #144]	; 0x90
 801f0dc:	b2ad      	uxth	r5, r5
 801f0de:	f8de 6000 	ldr.w	r6, [lr]
 801f0e2:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
 801f0e6:	9519      	str	r5, [sp, #100]	; 0x64
 801f0e8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801f0ea:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 801f0ee:	68e9      	ldr	r1, [r5, #12]
 801f0f0:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801f0f4:	f8de 9008 	ldr.w	r9, [lr, #8]
 801f0f8:	9513      	str	r5, [sp, #76]	; 0x4c
 801f0fa:	b2b5      	uxth	r5, r6
 801f0fc:	9512      	str	r5, [sp, #72]	; 0x48
 801f0fe:	fa1f f58c 	uxth.w	r5, ip
 801f102:	951f      	str	r5, [sp, #124]	; 0x7c
 801f104:	e9d7 5802 	ldrd	r5, r8, [r7, #8]
 801f108:	952c      	str	r5, [sp, #176]	; 0xb0
 801f10a:	f8be 5004 	ldrh.w	r5, [lr, #4]
 801f10e:	9520      	str	r5, [sp, #128]	; 0x80
 801f110:	68cd      	ldr	r5, [r1, #12]
 801f112:	6889      	ldr	r1, [r1, #8]
 801f114:	9530      	str	r5, [sp, #192]	; 0xc0
 801f116:	9136      	str	r1, [sp, #216]	; 0xd8
 801f118:	e9da 1701 	ldrd	r1, r7, [sl, #4]
 801f11c:	911a      	str	r1, [sp, #104]	; 0x68
 801f11e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801f120:	6809      	ldr	r1, [r1, #0]
 801f122:	9121      	str	r1, [sp, #132]	; 0x84
 801f124:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801f126:	6849      	ldr	r1, [r1, #4]
 801f128:	9139      	str	r1, [sp, #228]	; 0xe4
 801f12a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 801f12c:	911e      	str	r1, [sp, #120]	; 0x78
 801f12e:	69c1      	ldr	r1, [r0, #28]
 801f130:	9127      	str	r1, [sp, #156]	; 0x9c
 801f132:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801f134:	9137      	str	r1, [sp, #220]	; 0xdc
 801f136:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801f138:	9138      	str	r1, [sp, #224]	; 0xe0
 801f13a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801f13c:	9128      	str	r1, [sp, #160]	; 0xa0
 801f13e:	2c00      	cmp	r4, #0
 801f140:	f000 8242 	beq.w	801f5c8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x57c>
 801f144:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801f148:	f1ba 0f00 	cmp.w	sl, #0
 801f14c:	f000 823c 	beq.w	801f5c8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x57c>
 801f150:	f8da 1018 	ldr.w	r1, [sl, #24]
 801f154:	2900      	cmp	r1, #0
 801f156:	bf08      	it	eq
 801f158:	f04f 0a00 	moveq.w	sl, #0
 801f15c:	fa1f fe86 	uxth.w	lr, r6
 801f160:	902d      	str	r0, [sp, #180]	; 0xb4
 801f162:	9217      	str	r2, [sp, #92]	; 0x5c
 801f164:	a93f      	add	r1, sp, #252	; 0xfc
 801f166:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801f168:	fa1e f089 	uxtah	r0, lr, r9
 801f16c:	914e      	str	r1, [sp, #312]	; 0x138
 801f16e:	2400      	movs	r4, #0
 801f170:	6996      	ldr	r6, [r2, #24]
 801f172:	4440      	add	r0, r8
 801f174:	4611      	mov	r1, r2
 801f176:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801f17a:	1bc5      	subs	r5, r0, r7
 801f17c:	44c6      	add	lr, r8
 801f17e:	924c      	str	r2, [sp, #304]	; 0x130
 801f180:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801f184:	9516      	str	r5, [sp, #88]	; 0x58
 801f186:	f50d 798e 	add.w	r9, sp, #284	; 0x11c
 801f18a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801f18c:	a84b      	add	r0, sp, #300	; 0x12c
 801f18e:	924d      	str	r2, [sp, #308]	; 0x134
 801f190:	f240 4201 	movw	r2, #1025	; 0x401
 801f194:	69ad      	ldr	r5, [r5, #24]
 801f196:	924f      	str	r2, [sp, #316]	; 0x13c
 801f198:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f19a:	931b      	str	r3, [sp, #108]	; 0x6c
 801f19c:	fa1f f38c 	uxth.w	r3, ip
 801f1a0:	9531      	str	r5, [sp, #196]	; 0xc4
 801f1a2:	f50d 7c86 	add.w	ip, sp, #268	; 0x10c
 801f1a6:	6c55      	ldr	r5, [r2, #68]	; 0x44
 801f1a8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801f1aa:	f8cd e094 	str.w	lr, [sp, #148]	; 0x94
 801f1ae:	f8db 8018 	ldr.w	r8, [fp, #24]
 801f1b2:	931d      	str	r3, [sp, #116]	; 0x74
 801f1b4:	944b      	str	r4, [sp, #300]	; 0x12c
 801f1b6:	943f      	str	r4, [sp, #252]	; 0xfc
 801f1b8:	9443      	str	r4, [sp, #268]	; 0x10c
 801f1ba:	9440      	str	r4, [sp, #256]	; 0x100
 801f1bc:	9441      	str	r4, [sp, #260]	; 0x104
 801f1be:	9444      	str	r4, [sp, #272]	; 0x110
 801f1c0:	9442      	str	r4, [sp, #264]	; 0x108
 801f1c2:	9451      	str	r4, [sp, #324]	; 0x144
 801f1c4:	9445      	str	r4, [sp, #276]	; 0x114
 801f1c6:	9446      	str	r4, [sp, #280]	; 0x118
 801f1c8:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
 801f1cc:	9529      	str	r5, [sp, #164]	; 0xa4
 801f1ce:	f9bd 4084 	ldrsh.w	r4, [sp, #132]	; 0x84
 801f1d2:	923a      	str	r2, [sp, #232]	; 0xe8
 801f1d4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f1d6:	fbb5 fcf3 	udiv	ip, r5, r3
 801f1da:	f10c 0301 	add.w	r3, ip, #1
 801f1de:	9326      	str	r3, [sp, #152]	; 0x98
 801f1e0:	f006 fa0c 	bl	80255fc <core_tensor_clone>
 801f1e4:	4648      	mov	r0, r9
 801f1e6:	4631      	mov	r1, r6
 801f1e8:	f006 fa3a 	bl	8025660 <core_array_clone>
 801f1ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f1ee:	f8cd 9144 	str.w	r9, [sp, #324]	; 0x144
 801f1f2:	6999      	ldr	r1, [r3, #24]
 801f1f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f1f6:	f8d1 9008 	ldr.w	r9, [r1, #8]
 801f1fa:	6818      	ldr	r0, [r3, #0]
 801f1fc:	f8db 300c 	ldr.w	r3, [fp, #12]
 801f200:	f8db 1000 	ldr.w	r1, [fp]
 801f204:	689b      	ldr	r3, [r3, #8]
 801f206:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f208:	932e      	str	r3, [sp, #184]	; 0xb8
 801f20a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f20c:	f8d3 e000 	ldr.w	lr, [r3]
 801f210:	2800      	cmp	r0, #0
 801f212:	f000 80df 	beq.w	801f3d4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x388>
 801f216:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801f21a:	f1bc 0f00 	cmp.w	ip, #0
 801f21e:	f000 80d9 	beq.w	801f3d4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x388>
 801f222:	8845      	ldrh	r5, [r0, #2]
 801f224:	2d00      	cmp	r5, #0
 801f226:	f000 80d5 	beq.w	801f3d4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x388>
 801f22a:	f8dc c000 	ldr.w	ip, [ip]
 801f22e:	ed9c 0a00 	vldr	s0, [ip]
 801f232:	2900      	cmp	r1, #0
 801f234:	f000 80d3 	beq.w	801f3de <forward_conv2d_nl_pool_integer_SSSA_ch+0x392>
 801f238:	f8d1 c004 	ldr.w	ip, [r1, #4]
 801f23c:	f1bc 0f00 	cmp.w	ip, #0
 801f240:	f000 80cd 	beq.w	801f3de <forward_conv2d_nl_pool_integer_SSSA_ch+0x392>
 801f244:	884d      	ldrh	r5, [r1, #2]
 801f246:	2d00      	cmp	r5, #0
 801f248:	f000 80c9 	beq.w	801f3de <forward_conv2d_nl_pool_integer_SSSA_ch+0x392>
 801f24c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801f24e:	f8dc c000 	ldr.w	ip, [ip]
 801f252:	2d01      	cmp	r5, #1
 801f254:	eddc 0a00 	vldr	s1, [ip]
 801f258:	f040 80c7 	bne.w	801f3ea <forward_conv2d_nl_pool_integer_SSSA_ch+0x39e>
 801f25c:	2f01      	cmp	r7, #1
 801f25e:	f040 80c4 	bne.w	801f3ea <forward_conv2d_nl_pool_integer_SSSA_ch+0x39e>
 801f262:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f264:	46ac      	mov	ip, r5
 801f266:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801f268:	ea5c 0505 	orrs.w	r5, ip, r5
 801f26c:	f040 80bd 	bne.w	801f3ea <forward_conv2d_nl_pool_integer_SSSA_ch+0x39e>
 801f270:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801f272:	46ac      	mov	ip, r5
 801f274:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801f276:	f1bc 0f01 	cmp.w	ip, #1
 801f27a:	bf08      	it	eq
 801f27c:	2d01      	cmpeq	r5, #1
 801f27e:	bf0c      	ite	eq
 801f280:	f04f 0c01 	moveq.w	ip, #1
 801f284:	f04f 0c00 	movne.w	ip, #0
 801f288:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f28a:	699b      	ldr	r3, [r3, #24]
 801f28c:	69ad      	ldr	r5, [r5, #24]
 801f28e:	689b      	ldr	r3, [r3, #8]
 801f290:	6992      	ldr	r2, [r2, #24]
 801f292:	68ad      	ldr	r5, [r5, #8]
 801f294:	9317      	str	r3, [sp, #92]	; 0x5c
 801f296:	6893      	ldr	r3, [r2, #8]
 801f298:	9535      	str	r5, [sp, #212]	; 0xd4
 801f29a:	9322      	str	r3, [sp, #136]	; 0x88
 801f29c:	2800      	cmp	r0, #0
 801f29e:	f000 81a2 	beq.w	801f5e6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x59a>
 801f2a2:	6843      	ldr	r3, [r0, #4]
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	f000 8262 	beq.w	801f76e <forward_conv2d_nl_pool_integer_SSSA_ch+0x722>
 801f2aa:	8842      	ldrh	r2, [r0, #2]
 801f2ac:	2a00      	cmp	r2, #0
 801f2ae:	f000 8198 	beq.w	801f5e2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x596>
 801f2b2:	685b      	ldr	r3, [r3, #4]
 801f2b4:	f993 3000 	ldrsb.w	r3, [r3]
 801f2b8:	9315      	str	r3, [sp, #84]	; 0x54
 801f2ba:	2900      	cmp	r1, #0
 801f2bc:	f000 8182 	beq.w	801f5c4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x578>
 801f2c0:	684b      	ldr	r3, [r1, #4]
 801f2c2:	2b00      	cmp	r3, #0
 801f2c4:	f000 8251 	beq.w	801f76a <forward_conv2d_nl_pool_integer_SSSA_ch+0x71e>
 801f2c8:	884a      	ldrh	r2, [r1, #2]
 801f2ca:	2a00      	cmp	r2, #0
 801f2cc:	f000 8178 	beq.w	801f5c0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x574>
 801f2d0:	685b      	ldr	r3, [r3, #4]
 801f2d2:	f993 3000 	ldrsb.w	r3, [r3]
 801f2d6:	9316      	str	r3, [sp, #88]	; 0x58
 801f2d8:	f1be 0f00 	cmp.w	lr, #0
 801f2dc:	f000 816e 	beq.w	801f5bc <forward_conv2d_nl_pool_integer_SSSA_ch+0x570>
 801f2e0:	f8de 0004 	ldr.w	r0, [lr, #4]
 801f2e4:	b100      	cbz	r0, 801f2e8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x29c>
 801f2e6:	6800      	ldr	r0, [r0, #0]
 801f2e8:	b2b9      	uxth	r1, r7
 801f2ea:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801f2ee:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 801f2f2:	931a      	str	r3, [sp, #104]	; 0x68
 801f2f4:	fb13 f301 	smulbb	r3, r3, r1
 801f2f8:	9523      	str	r5, [sp, #140]	; 0x8c
 801f2fa:	b29d      	uxth	r5, r3
 801f2fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f2fe:	911b      	str	r1, [sp, #108]	; 0x6c
 801f300:	2b01      	cmp	r3, #1
 801f302:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 801f306:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801f30a:	9114      	str	r1, [sp, #80]	; 0x50
 801f30c:	f000 8179 	beq.w	801f602 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5b6>
 801f310:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801f312:	428b      	cmp	r3, r1
 801f314:	f000 816c 	beq.w	801f5f0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5a4>
 801f318:	460b      	mov	r3, r1
 801f31a:	2100      	movs	r1, #0
 801f31c:	fb05 f303 	mul.w	r3, r5, r3
 801f320:	912b      	str	r1, [sp, #172]	; 0xac
 801f322:	9914      	ldr	r1, [sp, #80]	; 0x50
 801f324:	fb03 f101 	mul.w	r1, r3, r1
 801f328:	0049      	lsls	r1, r1, #1
 801f32a:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 801f32e:	bfa8      	it	ge
 801f330:	f44f 51a0 	movge.w	r1, #5120	; 0x1400
 801f334:	f1bc 0f00 	cmp.w	ip, #0
 801f338:	f000 8178 	beq.w	801f62c <forward_conv2d_nl_pool_integer_SSSA_ch+0x5e0>
 801f33c:	009d      	lsls	r5, r3, #2
 801f33e:	2a01      	cmp	r2, #1
 801f340:	f240 8153 	bls.w	801f5ea <forward_conv2d_nl_pool_integer_SSSA_ch+0x59e>
 801f344:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f346:	0093      	lsls	r3, r2, #2
 801f348:	189a      	adds	r2, r3, r2
 801f34a:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 801f34e:	444b      	add	r3, r9
 801f350:	464a      	mov	r2, r9
 801f352:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801f354:	932a      	str	r3, [sp, #168]	; 0xa8
 801f356:	f001 fe5b 	bl	8021010 <align_factor_ch>
 801f35a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f35c:	e9cd 953d 	strd	r9, r5, [sp, #244]	; 0xf4
 801f360:	2b00      	cmp	r3, #0
 801f362:	f000 80f6 	beq.w	801f552 <forward_conv2d_nl_pool_integer_SSSA_ch+0x506>
 801f366:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f368:	2500      	movs	r5, #0
 801f36a:	991d      	ldr	r1, [sp, #116]	; 0x74
 801f36c:	4613      	mov	r3, r2
 801f36e:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801f370:	9527      	str	r5, [sp, #156]	; 0x9c
 801f372:	fb03 f301 	mul.w	r3, r3, r1
 801f376:	9914      	ldr	r1, [sp, #80]	; 0x50
 801f378:	f8cd a0ec 	str.w	sl, [sp, #236]	; 0xec
 801f37c:	fb01 f100 	mul.w	r1, r1, r0
 801f380:	f8dd a0d4 	ldr.w	sl, [sp, #212]	; 0xd4
 801f384:	9714      	str	r7, [sp, #80]	; 0x50
 801f386:	912e      	str	r1, [sp, #184]	; 0xb8
 801f388:	b281      	uxth	r1, r0
 801f38a:	9124      	str	r1, [sp, #144]	; 0x90
 801f38c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801f38e:	9423      	str	r4, [sp, #140]	; 0x8c
 801f390:	fb01 f303 	mul.w	r3, r1, r3
 801f394:	9333      	str	r3, [sp, #204]	; 0xcc
 801f396:	b293      	uxth	r3, r2
 801f398:	932c      	str	r3, [sp, #176]	; 0xb0
 801f39a:	fb01 f302 	mul.w	r3, r1, r2
 801f39e:	9334      	str	r3, [sp, #208]	; 0xd0
 801f3a0:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 801f3a4:	9332      	str	r3, [sp, #200]	; 0xc8
 801f3a6:	464b      	mov	r3, r9
 801f3a8:	46a9      	mov	r9, r5
 801f3aa:	461d      	mov	r5, r3
 801f3ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f3ae:	2b00      	cmp	r3, #0
 801f3b0:	dd6b      	ble.n	801f48a <forward_conv2d_nl_pool_integer_SSSA_ch+0x43e>
 801f3b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f3b4:	2b17      	cmp	r3, #23
 801f3b6:	f000 8188 	beq.w	801f6ca <forward_conv2d_nl_pool_integer_SSSA_ch+0x67e>
 801f3ba:	2b18      	cmp	r3, #24
 801f3bc:	f000 813e 	beq.w	801f63c <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f0>
 801f3c0:	2b16      	cmp	r3, #22
 801f3c2:	d015      	beq.n	801f3f0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a4>
 801f3c4:	e7fe      	b.n	801f3c4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x378>
 801f3c6:	2300      	movs	r3, #0
 801f3c8:	685b      	ldr	r3, [r3, #4]
 801f3ca:	deff      	udf	#255	; 0xff
 801f3cc:	6873      	ldr	r3, [r6, #4]
 801f3ce:	deff      	udf	#255	; 0xff
 801f3d0:	68cb      	ldr	r3, [r1, #12]
 801f3d2:	deff      	udf	#255	; 0xff
 801f3d4:	ed9f 0a98 	vldr	s0, [pc, #608]	; 801f638 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5ec>
 801f3d8:	2900      	cmp	r1, #0
 801f3da:	f47f af2d 	bne.w	801f238 <forward_conv2d_nl_pool_integer_SSSA_ch+0x1ec>
 801f3de:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801f3e0:	eddf 0a95 	vldr	s1, [pc, #596]	; 801f638 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5ec>
 801f3e4:	2d01      	cmp	r5, #1
 801f3e6:	f43f af39 	beq.w	801f25c <forward_conv2d_nl_pool_integer_SSSA_ch+0x210>
 801f3ea:	f04f 0c00 	mov.w	ip, #0
 801f3ee:	e74b      	b.n	801f288 <forward_conv2d_nl_pool_integer_SSSA_ch+0x23c>
 801f3f0:	f1b9 0f00 	cmp.w	r9, #0
 801f3f4:	f040 81b6 	bne.w	801f764 <forward_conv2d_nl_pool_integer_SSSA_ch+0x718>
 801f3f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f3fa:	429c      	cmp	r4, r3
 801f3fc:	ab3d      	add	r3, sp, #244	; 0xf4
 801f3fe:	461f      	mov	r7, r3
 801f400:	f000 81aa 	beq.w	801f758 <forward_conv2d_nl_pool_integer_SSSA_ch+0x70c>
 801f404:	9710      	str	r7, [sp, #64]	; 0x40
 801f406:	2201      	movs	r2, #1
 801f408:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f40a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801f40c:	920f      	str	r2, [sp, #60]	; 0x3c
 801f40e:	910e      	str	r1, [sp, #56]	; 0x38
 801f410:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801f414:	970c      	str	r7, [sp, #48]	; 0x30
 801f416:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801f418:	900d      	str	r0, [sp, #52]	; 0x34
 801f41a:	4650      	mov	r0, sl
 801f41c:	970b      	str	r7, [sp, #44]	; 0x2c
 801f41e:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 801f420:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f422:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801f426:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f428:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
 801f42c:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801f42e:	9708      	str	r7, [sp, #32]
 801f430:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 801f432:	9707      	str	r7, [sp, #28]
 801f434:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801f436:	9706      	str	r7, [sp, #24]
 801f438:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f43a:	9705      	str	r7, [sp, #20]
 801f43c:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801f43e:	9704      	str	r7, [sp, #16]
 801f440:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801f442:	9703      	str	r7, [sp, #12]
 801f444:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801f446:	9702      	str	r7, [sp, #8]
 801f448:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801f44a:	9701      	str	r7, [sp, #4]
 801f44c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801f44e:	9700      	str	r7, [sp, #0]
 801f450:	f003 fdf6 	bl	8023040 <st_sssa8_ch_convolve_1x1>
 801f454:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f456:	991d      	ldr	r1, [sp, #116]	; 0x74
 801f458:	428b      	cmp	r3, r1
 801f45a:	f000 8122 	beq.w	801f6a2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x656>
 801f45e:	1a5b      	subs	r3, r3, r1
 801f460:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f462:	429a      	cmp	r2, r3
 801f464:	9325      	str	r3, [sp, #148]	; 0x94
 801f466:	bf28      	it	cs
 801f468:	461a      	movcs	r2, r3
 801f46a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f46c:	9214      	str	r2, [sp, #80]	; 0x50
 801f46e:	2b00      	cmp	r3, #0
 801f470:	f040 811e 	bne.w	801f6b0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x664>
 801f474:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801f476:	449a      	add	sl, r3
 801f478:	3401      	adds	r4, #1
 801f47a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 801f47c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f47e:	4659      	mov	r1, fp
 801f480:	981c      	ldr	r0, [sp, #112]	; 0x70
 801f482:	b224      	sxth	r4, r4
 801f484:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
 801f486:	47b8      	blx	r7
 801f488:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f48a:	3b01      	subs	r3, #1
 801f48c:	9326      	str	r3, [sp, #152]	; 0x98
 801f48e:	d46c      	bmi.n	801f56a <forward_conv2d_nl_pool_integer_SSSA_ch+0x51e>
 801f490:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801f492:	42a3      	cmp	r3, r4
 801f494:	dc33      	bgt.n	801f4fe <forward_conv2d_nl_pool_integer_SSSA_ch+0x4b2>
 801f496:	2001      	movs	r0, #1
 801f498:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 801f49c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f49e:	f109 0901 	add.w	r9, r9, #1
 801f4a2:	9007      	str	r0, [sp, #28]
 801f4a4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f4a6:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 801f4aa:	9208      	str	r2, [sp, #32]
 801f4ac:	1a1a      	subs	r2, r3, r0
 801f4ae:	f8bd 00d8 	ldrh.w	r0, [sp, #216]	; 0xd8
 801f4b2:	1a64      	subs	r4, r4, r1
 801f4b4:	f8bd c0e0 	ldrh.w	ip, [sp, #224]	; 0xe0
 801f4b8:	b292      	uxth	r2, r2
 801f4ba:	9301      	str	r3, [sp, #4]
 801f4bc:	b224      	sxth	r4, r4
 801f4be:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801f4c2:	9105      	str	r1, [sp, #20]
 801f4c4:	9006      	str	r0, [sp, #24]
 801f4c6:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
 801f4ca:	f8bd 00dc 	ldrh.w	r0, [sp, #220]	; 0xdc
 801f4ce:	9102      	str	r1, [sp, #8]
 801f4d0:	9000      	str	r0, [sp, #0]
 801f4d2:	a84b      	add	r0, sp, #300	; 0x12c
 801f4d4:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f4d6:	9f3a      	ldr	r7, [sp, #232]	; 0xe8
 801f4d8:	e9cd 3c03 	strd	r3, ip, [sp, #12]
 801f4dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f4de:	47b8      	blx	r7
 801f4e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f4e2:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801f4e4:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801f4e8:	6951      	ldr	r1, [r2, #20]
 801f4ea:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801f4ec:	1afb      	subs	r3, r7, r3
 801f4ee:	68c9      	ldr	r1, [r1, #12]
 801f4f0:	6882      	ldr	r2, [r0, #8]
 801f4f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f4f6:	440a      	add	r2, r1
 801f4f8:	b21b      	sxth	r3, r3
 801f4fa:	6082      	str	r2, [r0, #8]
 801f4fc:	9323      	str	r3, [sp, #140]	; 0x8c
 801f4fe:	f8db 3014 	ldr.w	r3, [fp, #20]
 801f502:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801f506:	68db      	ldr	r3, [r3, #12]
 801f508:	4413      	add	r3, r2
 801f50a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f50c:	f8c8 3008 	str.w	r3, [r8, #8]
 801f510:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801f512:	b13a      	cbz	r2, 801f524 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4d8>
 801f514:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f516:	695a      	ldr	r2, [r3, #20]
 801f518:	68b3      	ldr	r3, [r6, #8]
 801f51a:	68d2      	ldr	r2, [r2, #12]
 801f51c:	4413      	add	r3, r2
 801f51e:	60b3      	str	r3, [r6, #8]
 801f520:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f524:	f8db 1014 	ldr.w	r1, [fp, #20]
 801f528:	f8db 200c 	ldr.w	r2, [fp, #12]
 801f52c:	68c8      	ldr	r0, [r1, #12]
 801f52e:	68d2      	ldr	r2, [r2, #12]
 801f530:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801f534:	fb00 1202 	mla	r2, r0, r2, r1
 801f538:	4293      	cmp	r3, r2
 801f53a:	d306      	bcc.n	801f54a <forward_conv2d_nl_pool_integer_SSSA_ch+0x4fe>
 801f53c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f53e:	f8c8 1008 	str.w	r1, [r8, #8]
 801f542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f544:	b10b      	cbz	r3, 801f54a <forward_conv2d_nl_pool_integer_SSSA_ch+0x4fe>
 801f546:	68f3      	ldr	r3, [r6, #12]
 801f548:	60b3      	str	r3, [r6, #8]
 801f54a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f54c:	4599      	cmp	r9, r3
 801f54e:	f4ff af2d 	bcc.w	801f3ac <forward_conv2d_nl_pool_integer_SSSA_ch+0x360>
 801f552:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f556:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801f558:	f8c8 3008 	str.w	r3, [r8, #8]
 801f55c:	68f3      	ldr	r3, [r6, #12]
 801f55e:	60b3      	str	r3, [r6, #8]
 801f560:	68d3      	ldr	r3, [r2, #12]
 801f562:	6093      	str	r3, [r2, #8]
 801f564:	b053      	add	sp, #332	; 0x14c
 801f566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f56a:	e9d6 2102 	ldrd	r2, r1, [r6, #8]
 801f56e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f570:	fb03 2314 	mls	r3, r3, r4, r2
 801f574:	4299      	cmp	r1, r3
 801f576:	d901      	bls.n	801f57c <forward_conv2d_nl_pool_integer_SSSA_ch+0x530>
 801f578:	6870      	ldr	r0, [r6, #4]
 801f57a:	4403      	add	r3, r0
 801f57c:	4299      	cmp	r1, r3
 801f57e:	d212      	bcs.n	801f5a6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x55a>
 801f580:	9832      	ldr	r0, [sp, #200]	; 0xc8
 801f582:	42a0      	cmp	r0, r4
 801f584:	d00f      	beq.n	801f5a6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x55a>
 801f586:	6870      	ldr	r0, [r6, #4]
 801f588:	4401      	add	r1, r0
 801f58a:	428b      	cmp	r3, r1
 801f58c:	d20b      	bcs.n	801f5a6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x55a>
 801f58e:	3a01      	subs	r2, #1
 801f590:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801f592:	f813 1b01 	ldrb.w	r1, [r3], #1
 801f596:	f802 1f01 	strb.w	r1, [r2, #1]!
 801f59a:	68f1      	ldr	r1, [r6, #12]
 801f59c:	6870      	ldr	r0, [r6, #4]
 801f59e:	4401      	add	r1, r0
 801f5a0:	428b      	cmp	r3, r1
 801f5a2:	d3f6      	bcc.n	801f592 <forward_conv2d_nl_pool_integer_SSSA_ch+0x546>
 801f5a4:	9714      	str	r7, [sp, #80]	; 0x50
 801f5a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f5a8:	b2a4      	uxth	r4, r4
 801f5aa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f5ac:	4413      	add	r3, r2
 801f5ae:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f5b0:	1b1b      	subs	r3, r3, r4
 801f5b2:	4414      	add	r4, r2
 801f5b4:	b21b      	sxth	r3, r3
 801f5b6:	b224      	sxth	r4, r4
 801f5b8:	9327      	str	r3, [sp, #156]	; 0x9c
 801f5ba:	e769      	b.n	801f490 <forward_conv2d_nl_pool_integer_SSSA_ch+0x444>
 801f5bc:	4670      	mov	r0, lr
 801f5be:	e693      	b.n	801f2e8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x29c>
 801f5c0:	9216      	str	r2, [sp, #88]	; 0x58
 801f5c2:	e689      	b.n	801f2d8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 801f5c4:	9116      	str	r1, [sp, #88]	; 0x58
 801f5c6:	e687      	b.n	801f2d8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 801f5c8:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801f5cc:	f1ba 0f00 	cmp.w	sl, #0
 801f5d0:	f43f adc4 	beq.w	801f15c <forward_conv2d_nl_pool_integer_SSSA_ch+0x110>
 801f5d4:	f8da a008 	ldr.w	sl, [sl, #8]
 801f5d8:	e5c0      	b.n	801f15c <forward_conv2d_nl_pool_integer_SSSA_ch+0x110>
 801f5da:	6823      	ldr	r3, [r4, #0]
 801f5dc:	e556      	b.n	801f08c <forward_conv2d_nl_pool_integer_SSSA_ch+0x40>
 801f5de:	9318      	str	r3, [sp, #96]	; 0x60
 801f5e0:	e54c      	b.n	801f07c <forward_conv2d_nl_pool_integer_SSSA_ch+0x30>
 801f5e2:	9215      	str	r2, [sp, #84]	; 0x54
 801f5e4:	e669      	b.n	801f2ba <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 801f5e6:	9015      	str	r0, [sp, #84]	; 0x54
 801f5e8:	e667      	b.n	801f2ba <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 801f5ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f5ec:	009b      	lsls	r3, r3, #2
 801f5ee:	e6ae      	b.n	801f34e <forward_conv2d_nl_pool_integer_SSSA_ch+0x302>
 801f5f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f5f2:	fb05 f503 	mul.w	r5, r5, r3
 801f5f6:	2317      	movs	r3, #23
 801f5f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f5fc:	932b      	str	r3, [sp, #172]	; 0xac
 801f5fe:	3501      	adds	r5, #1
 801f600:	e69d      	b.n	801f33e <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f2>
 801f602:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f604:	f1bc 0f00 	cmp.w	ip, #0
 801f608:	fb05 f303 	mul.w	r3, r5, r3
 801f60c:	bf14      	ite	ne
 801f60e:	2516      	movne	r5, #22
 801f610:	2518      	moveq	r5, #24
 801f612:	fb01 f103 	mul.w	r1, r1, r3
 801f616:	952b      	str	r5, [sp, #172]	; 0xac
 801f618:	0049      	lsls	r1, r1, #1
 801f61a:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 801f61e:	bfa8      	it	ge
 801f620:	f44f 51a0 	movge.w	r1, #5120	; 0x1400
 801f624:	f1bc 0f00 	cmp.w	ip, #0
 801f628:	f47f ae88 	bne.w	801f33c <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f0>
 801f62c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f62e:	441d      	add	r5, r3
 801f630:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 801f634:	e683      	b.n	801f33e <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f2>
 801f636:	bf00      	nop
 801f638:	00000000 	.word	0x00000000
 801f63c:	f1b9 0f00 	cmp.w	r9, #0
 801f640:	d102      	bne.n	801f648 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5fc>
 801f642:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f644:	429c      	cmp	r4, r3
 801f646:	d079      	beq.n	801f73c <forward_conv2d_nl_pool_integer_SSSA_ch+0x6f0>
 801f648:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f64a:	2201      	movs	r2, #1
 801f64c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801f64e:	920f      	str	r2, [sp, #60]	; 0x3c
 801f650:	910e      	str	r1, [sp, #56]	; 0x38
 801f652:	9510      	str	r5, [sp, #64]	; 0x40
 801f654:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801f658:	970c      	str	r7, [sp, #48]	; 0x30
 801f65a:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801f65c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f65e:	970b      	str	r7, [sp, #44]	; 0x2c
 801f660:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 801f662:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f664:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801f668:	900d      	str	r0, [sp, #52]	; 0x34
 801f66a:	4650      	mov	r0, sl
 801f66c:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
 801f670:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801f672:	9708      	str	r7, [sp, #32]
 801f674:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 801f676:	9707      	str	r7, [sp, #28]
 801f678:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801f67a:	9706      	str	r7, [sp, #24]
 801f67c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f67e:	9705      	str	r7, [sp, #20]
 801f680:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801f682:	9704      	str	r7, [sp, #16]
 801f684:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801f686:	9703      	str	r7, [sp, #12]
 801f688:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801f68a:	9702      	str	r7, [sp, #8]
 801f68c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801f68e:	9701      	str	r7, [sp, #4]
 801f690:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801f692:	9700      	str	r7, [sp, #0]
 801f694:	f002 fb76 	bl	8021d84 <st_sssa8_ch_convolve>
 801f698:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f69a:	991d      	ldr	r1, [sp, #116]	; 0x74
 801f69c:	428b      	cmp	r3, r1
 801f69e:	f47f aede 	bne.w	801f45e <forward_conv2d_nl_pool_integer_SSSA_ch+0x412>
 801f6a2:	2300      	movs	r3, #0
 801f6a4:	9314      	str	r3, [sp, #80]	; 0x50
 801f6a6:	9325      	str	r3, [sp, #148]	; 0x94
 801f6a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f6aa:	2b00      	cmp	r3, #0
 801f6ac:	f43f aee2 	beq.w	801f474 <forward_conv2d_nl_pool_integer_SSSA_ch+0x428>
 801f6b0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801f6b2:	1a9b      	subs	r3, r3, r2
 801f6b4:	d504      	bpl.n	801f6c0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x674>
 801f6b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f6b8:	1a52      	subs	r2, r2, r1
 801f6ba:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801f6bc:	fb01 aa02 	mla	sl, r1, r2, sl
 801f6c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f6c4:	b29b      	uxth	r3, r3
 801f6c6:	9312      	str	r3, [sp, #72]	; 0x48
 801f6c8:	e6d6      	b.n	801f478 <forward_conv2d_nl_pool_integer_SSSA_ch+0x42c>
 801f6ca:	f1b9 0f00 	cmp.w	r9, #0
 801f6ce:	d102      	bne.n	801f6d6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x68a>
 801f6d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f6d2:	429c      	cmp	r4, r3
 801f6d4:	d02a      	beq.n	801f72c <forward_conv2d_nl_pool_integer_SSSA_ch+0x6e0>
 801f6d6:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f6d8:	2201      	movs	r2, #1
 801f6da:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801f6dc:	920f      	str	r2, [sp, #60]	; 0x3c
 801f6de:	910e      	str	r1, [sp, #56]	; 0x38
 801f6e0:	9510      	str	r5, [sp, #64]	; 0x40
 801f6e2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801f6e6:	970c      	str	r7, [sp, #48]	; 0x30
 801f6e8:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801f6ea:	900d      	str	r0, [sp, #52]	; 0x34
 801f6ec:	4650      	mov	r0, sl
 801f6ee:	970b      	str	r7, [sp, #44]	; 0x2c
 801f6f0:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 801f6f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f6f4:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801f6f8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f6fa:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
 801f6fe:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801f700:	9708      	str	r7, [sp, #32]
 801f702:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 801f704:	9707      	str	r7, [sp, #28]
 801f706:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801f708:	9706      	str	r7, [sp, #24]
 801f70a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f70c:	9705      	str	r7, [sp, #20]
 801f70e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801f710:	9704      	str	r7, [sp, #16]
 801f712:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801f714:	9703      	str	r7, [sp, #12]
 801f716:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801f718:	9702      	str	r7, [sp, #8]
 801f71a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801f71c:	9701      	str	r7, [sp, #4]
 801f71e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801f720:	9700      	str	r7, [sp, #0]
 801f722:	f001 fd9f 	bl	8021264 <st_sssa8_ch_convolve_dw>
 801f726:	e695      	b.n	801f454 <forward_conv2d_nl_pool_integer_SSSA_ch+0x408>
 801f728:	9514      	str	r5, [sp, #80]	; 0x50
 801f72a:	e49e      	b.n	801f06a <forward_conv2d_nl_pool_integer_SSSA_ch+0x1e>
 801f72c:	9500      	str	r5, [sp, #0]
 801f72e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801f730:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f732:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801f736:	f001 fcdf 	bl	80210f8 <st_sssa8_ch_conv_dw_Wadapt>
 801f73a:	e7cc      	b.n	801f6d6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x68a>
 801f73c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f73e:	9922      	ldr	r1, [sp, #136]	; 0x88
 801f740:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801f742:	9202      	str	r2, [sp, #8]
 801f744:	9101      	str	r1, [sp, #4]
 801f746:	9000      	str	r0, [sp, #0]
 801f748:	9503      	str	r5, [sp, #12]
 801f74a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f74c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f74e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f750:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f752:	f002 fa8f 	bl	8021c74 <st_sssa8_ch_convolve_rank1upd>
 801f756:	e777      	b.n	801f648 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5fc>
 801f758:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801f75a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801f75c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f75e:	f003 fc5b 	bl	8023018 <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 801f762:	e64f      	b.n	801f404 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3b8>
 801f764:	ab3d      	add	r3, sp, #244	; 0xf4
 801f766:	461f      	mov	r7, r3
 801f768:	e64c      	b.n	801f404 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3b8>
 801f76a:	9316      	str	r3, [sp, #88]	; 0x58
 801f76c:	e5b4      	b.n	801f2d8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 801f76e:	9315      	str	r3, [sp, #84]	; 0x54
 801f770:	e5a3      	b.n	801f2ba <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 801f772:	4904      	ldr	r1, [pc, #16]	; (801f784 <forward_conv2d_nl_pool_integer_SSSA_ch+0x738>)
 801f774:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 801f778:	912f      	str	r1, [sp, #188]	; 0xbc
 801f77a:	e4a4      	b.n	801f0c6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x7a>
 801f77c:	4622      	mov	r2, r4
 801f77e:	e490      	b.n	801f0a2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 801f780:	2200      	movs	r2, #0
 801f782:	e48e      	b.n	801f0a2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 801f784:	0801eab9 	.word	0x0801eab9

0801f788 <forward_dense_integer_SSSA>:
 801f788:	6983      	ldr	r3, [r0, #24]
 801f78a:	8818      	ldrh	r0, [r3, #0]
 801f78c:	2800      	cmp	r0, #0
 801f78e:	f000 80a4 	beq.w	801f8da <forward_dense_integer_SSSA+0x152>
 801f792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f796:	ed2d 8b02 	vpush	{d8}
 801f79a:	685c      	ldr	r4, [r3, #4]
 801f79c:	b093      	sub	sp, #76	; 0x4c
 801f79e:	6862      	ldr	r2, [r4, #4]
 801f7a0:	b102      	cbz	r2, 801f7a4 <forward_dense_integer_SSSA+0x1c>
 801f7a2:	6812      	ldr	r2, [r2, #0]
 801f7a4:	2801      	cmp	r0, #1
 801f7a6:	f240 808f 	bls.w	801f8c8 <forward_dense_integer_SSSA+0x140>
 801f7aa:	6923      	ldr	r3, [r4, #16]
 801f7ac:	b103      	cbz	r3, 801f7b0 <forward_dense_integer_SSSA+0x28>
 801f7ae:	681b      	ldr	r3, [r3, #0]
 801f7b0:	2802      	cmp	r0, #2
 801f7b2:	f000 808f 	beq.w	801f8d4 <forward_dense_integer_SSSA+0x14c>
 801f7b6:	69e5      	ldr	r5, [r4, #28]
 801f7b8:	2d00      	cmp	r5, #0
 801f7ba:	f000 80e1 	beq.w	801f980 <forward_dense_integer_SSSA+0x1f8>
 801f7be:	6829      	ldr	r1, [r5, #0]
 801f7c0:	f114 0618 	adds.w	r6, r4, #24
 801f7c4:	d007      	beq.n	801f7d6 <forward_dense_integer_SSSA+0x4e>
 801f7c6:	8b26      	ldrh	r6, [r4, #24]
 801f7c8:	2e01      	cmp	r6, #1
 801f7ca:	f240 80c7 	bls.w	801f95c <forward_dense_integer_SSSA+0x1d4>
 801f7ce:	2d00      	cmp	r5, #0
 801f7d0:	f000 80bb 	beq.w	801f94a <forward_dense_integer_SSSA+0x1c2>
 801f7d4:	686e      	ldr	r6, [r5, #4]
 801f7d6:	2803      	cmp	r0, #3
 801f7d8:	d079      	beq.n	801f8ce <forward_dense_integer_SSSA+0x146>
 801f7da:	69b7      	ldr	r7, [r6, #24]
 801f7dc:	68d8      	ldr	r0, [r3, #12]
 801f7de:	68bf      	ldr	r7, [r7, #8]
 801f7e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f7e2:	68c5      	ldr	r5, [r0, #12]
 801f7e4:	68d4      	ldr	r4, [r2, #12]
 801f7e6:	970f      	str	r7, [sp, #60]	; 0x3c
 801f7e8:	6887      	ldr	r7, [r0, #8]
 801f7ea:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801f7ee:	fb07 f505 	mul.w	r5, r7, r5
 801f7f2:	f8b0 b004 	ldrh.w	fp, [r0, #4]
 801f7f6:	699c      	ldr	r4, [r3, #24]
 801f7f8:	6997      	ldr	r7, [r2, #24]
 801f7fa:	2e00      	cmp	r6, #0
 801f7fc:	f000 80c6 	beq.w	801f98c <forward_dense_integer_SSSA+0x204>
 801f800:	6830      	ldr	r0, [r6, #0]
 801f802:	2800      	cmp	r0, #0
 801f804:	f000 8093 	beq.w	801f92e <forward_dense_integer_SSSA+0x1a6>
 801f808:	6980      	ldr	r0, [r0, #24]
 801f80a:	6880      	ldr	r0, [r0, #8]
 801f80c:	900c      	str	r0, [sp, #48]	; 0x30
 801f80e:	68a0      	ldr	r0, [r4, #8]
 801f810:	6816      	ldr	r6, [r2, #0]
 801f812:	698a      	ldr	r2, [r1, #24]
 801f814:	681b      	ldr	r3, [r3, #0]
 801f816:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801f81a:	900d      	str	r0, [sp, #52]	; 0x34
 801f81c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 801f820:	680c      	ldr	r4, [r1, #0]
 801f822:	2e00      	cmp	r6, #0
 801f824:	d062      	beq.n	801f8ec <forward_dense_integer_SSSA+0x164>
 801f826:	6870      	ldr	r0, [r6, #4]
 801f828:	4607      	mov	r7, r0
 801f82a:	2800      	cmp	r0, #0
 801f82c:	d057      	beq.n	801f8de <forward_dense_integer_SSSA+0x156>
 801f82e:	8871      	ldrh	r1, [r6, #2]
 801f830:	2900      	cmp	r1, #0
 801f832:	d07e      	beq.n	801f932 <forward_dense_integer_SSSA+0x1aa>
 801f834:	6802      	ldr	r2, [r0, #0]
 801f836:	ed92 8a00 	vldr	s16, [r2]
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	f000 809b 	beq.w	801f976 <forward_dense_integer_SSSA+0x1ee>
 801f840:	6859      	ldr	r1, [r3, #4]
 801f842:	2900      	cmp	r1, #0
 801f844:	d07a      	beq.n	801f93c <forward_dense_integer_SSSA+0x1b4>
 801f846:	8858      	ldrh	r0, [r3, #2]
 801f848:	2800      	cmp	r0, #0
 801f84a:	d059      	beq.n	801f900 <forward_dense_integer_SSSA+0x178>
 801f84c:	680a      	ldr	r2, [r1, #0]
 801f84e:	edd2 8a00 	vldr	s17, [r2]
 801f852:	2e00      	cmp	r6, #0
 801f854:	f040 8084 	bne.w	801f960 <forward_dense_integer_SSSA+0x1d8>
 801f858:	684b      	ldr	r3, [r1, #4]
 801f85a:	f993 3000 	ldrsb.w	r3, [r3]
 801f85e:	930e      	str	r3, [sp, #56]	; 0x38
 801f860:	b114      	cbz	r4, 801f868 <forward_dense_integer_SSSA+0xe0>
 801f862:	6864      	ldr	r4, [r4, #4]
 801f864:	b104      	cbz	r4, 801f868 <forward_dense_integer_SSSA+0xe0>
 801f866:	6824      	ldr	r4, [r4, #0]
 801f868:	2700      	movs	r7, #0
 801f86a:	4640      	mov	r0, r8
 801f86c:	f000 fc90 	bl	8020190 <arm_fully_connected_s8_get_buffer_size>
 801f870:	4620      	mov	r0, r4
 801f872:	eef0 0a68 	vmov.f32	s1, s17
 801f876:	ab10      	add	r3, sp, #64	; 0x40
 801f878:	eeb0 0a48 	vmov.f32	s0, s16
 801f87c:	aa11      	add	r2, sp, #68	; 0x44
 801f87e:	2101      	movs	r1, #1
 801f880:	247f      	movs	r4, #127	; 0x7f
 801f882:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
 801f886:	f001 fb55 	bl	8020f34 <align_factor_cmsisnn>
 801f88a:	9702      	str	r7, [sp, #8]
 801f88c:	b2a9      	uxth	r1, r5
 801f88e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801f890:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 801f894:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f896:	9707      	str	r7, [sp, #28]
 801f898:	465b      	mov	r3, fp
 801f89a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f89c:	4642      	mov	r2, r8
 801f89e:	9100      	str	r1, [sp, #0]
 801f8a0:	4649      	mov	r1, r9
 801f8a2:	9706      	str	r7, [sp, #24]
 801f8a4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f8a6:	900a      	str	r0, [sp, #40]	; 0x28
 801f8a8:	4650      	mov	r0, sl
 801f8aa:	9705      	str	r7, [sp, #20]
 801f8ac:	9601      	str	r6, [sp, #4]
 801f8ae:	e9cd 5408 	strd	r5, r4, [sp, #32]
 801f8b2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f8b4:	9404      	str	r4, [sp, #16]
 801f8b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f8b8:	9403      	str	r4, [sp, #12]
 801f8ba:	f000 fc3b 	bl	8020134 <arm_fully_connected_s8>
 801f8be:	b013      	add	sp, #76	; 0x4c
 801f8c0:	ecbd 8b02 	vpop	{d8}
 801f8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8c8:	2300      	movs	r3, #0
 801f8ca:	685b      	ldr	r3, [r3, #4]
 801f8cc:	deff      	udf	#255	; 0xff
 801f8ce:	2300      	movs	r3, #0
 801f8d0:	685b      	ldr	r3, [r3, #4]
 801f8d2:	deff      	udf	#255	; 0xff
 801f8d4:	2300      	movs	r3, #0
 801f8d6:	685b      	ldr	r3, [r3, #4]
 801f8d8:	deff      	udf	#255	; 0xff
 801f8da:	6843      	ldr	r3, [r0, #4]
 801f8dc:	deff      	udf	#255	; 0xff
 801f8de:	2b00      	cmp	r3, #0
 801f8e0:	d035      	beq.n	801f94e <forward_dense_integer_SSSA+0x1c6>
 801f8e2:	6859      	ldr	r1, [r3, #4]
 801f8e4:	b939      	cbnz	r1, 801f8f6 <forward_dense_integer_SSSA+0x16e>
 801f8e6:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 801f990 <forward_dense_integer_SSSA+0x208>
 801f8ea:	e00c      	b.n	801f906 <forward_dense_integer_SSSA+0x17e>
 801f8ec:	2b00      	cmp	r3, #0
 801f8ee:	d02e      	beq.n	801f94e <forward_dense_integer_SSSA+0x1c6>
 801f8f0:	6859      	ldr	r1, [r3, #4]
 801f8f2:	2900      	cmp	r1, #0
 801f8f4:	d039      	beq.n	801f96a <forward_dense_integer_SSSA+0x1e2>
 801f8f6:	8858      	ldrh	r0, [r3, #2]
 801f8f8:	ed9f 8a25 	vldr	s16, [pc, #148]	; 801f990 <forward_dense_integer_SSSA+0x208>
 801f8fc:	2800      	cmp	r0, #0
 801f8fe:	d1a5      	bne.n	801f84c <forward_dense_integer_SSSA+0xc4>
 801f900:	2e00      	cmp	r6, #0
 801f902:	d035      	beq.n	801f970 <forward_dense_integer_SSSA+0x1e8>
 801f904:	6870      	ldr	r0, [r6, #4]
 801f906:	4607      	mov	r7, r0
 801f908:	2800      	cmp	r0, #0
 801f90a:	d03b      	beq.n	801f984 <forward_dense_integer_SSSA+0x1fc>
 801f90c:	eddf 8a20 	vldr	s17, [pc, #128]	; 801f990 <forward_dense_integer_SSSA+0x208>
 801f910:	8876      	ldrh	r6, [r6, #2]
 801f912:	b12e      	cbz	r6, 801f920 <forward_dense_integer_SSSA+0x198>
 801f914:	687a      	ldr	r2, [r7, #4]
 801f916:	f992 6000 	ldrsb.w	r6, [r2]
 801f91a:	4276      	negs	r6, r6
 801f91c:	b12b      	cbz	r3, 801f92a <forward_dense_integer_SSSA+0x1a2>
 801f91e:	6859      	ldr	r1, [r3, #4]
 801f920:	b151      	cbz	r1, 801f938 <forward_dense_integer_SSSA+0x1b0>
 801f922:	8858      	ldrh	r0, [r3, #2]
 801f924:	2800      	cmp	r0, #0
 801f926:	d197      	bne.n	801f858 <forward_dense_integer_SSSA+0xd0>
 801f928:	2300      	movs	r3, #0
 801f92a:	930e      	str	r3, [sp, #56]	; 0x38
 801f92c:	e798      	b.n	801f860 <forward_dense_integer_SSSA+0xd8>
 801f92e:	900c      	str	r0, [sp, #48]	; 0x30
 801f930:	e76d      	b.n	801f80e <forward_dense_integer_SSSA+0x86>
 801f932:	ed9f 8a17 	vldr	s16, [pc, #92]	; 801f990 <forward_dense_integer_SSSA+0x208>
 801f936:	e780      	b.n	801f83a <forward_dense_integer_SSSA+0xb2>
 801f938:	910e      	str	r1, [sp, #56]	; 0x38
 801f93a:	e791      	b.n	801f860 <forward_dense_integer_SSSA+0xd8>
 801f93c:	2e00      	cmp	r6, #0
 801f93e:	d1e2      	bne.n	801f906 <forward_dense_integer_SSSA+0x17e>
 801f940:	2600      	movs	r6, #0
 801f942:	eddf 8a13 	vldr	s17, [pc, #76]	; 801f990 <forward_dense_integer_SSSA+0x208>
 801f946:	960e      	str	r6, [sp, #56]	; 0x38
 801f948:	e78a      	b.n	801f860 <forward_dense_integer_SSSA+0xd8>
 801f94a:	462e      	mov	r6, r5
 801f94c:	e743      	b.n	801f7d6 <forward_dense_integer_SSSA+0x4e>
 801f94e:	ed9f 8a10 	vldr	s16, [pc, #64]	; 801f990 <forward_dense_integer_SSSA+0x208>
 801f952:	461e      	mov	r6, r3
 801f954:	930e      	str	r3, [sp, #56]	; 0x38
 801f956:	eef0 8a48 	vmov.f32	s17, s16
 801f95a:	e781      	b.n	801f860 <forward_dense_integer_SSSA+0xd8>
 801f95c:	2600      	movs	r6, #0
 801f95e:	e73a      	b.n	801f7d6 <forward_dense_integer_SSSA+0x4e>
 801f960:	6877      	ldr	r7, [r6, #4]
 801f962:	2f00      	cmp	r7, #0
 801f964:	d1d4      	bne.n	801f910 <forward_dense_integer_SSSA+0x188>
 801f966:	463e      	mov	r6, r7
 801f968:	e7dc      	b.n	801f924 <forward_dense_integer_SSSA+0x19c>
 801f96a:	ed9f 8a09 	vldr	s16, [pc, #36]	; 801f990 <forward_dense_integer_SSSA+0x208>
 801f96e:	e7e7      	b.n	801f940 <forward_dense_integer_SSSA+0x1b8>
 801f970:	eddf 8a07 	vldr	s17, [pc, #28]	; 801f990 <forward_dense_integer_SSSA+0x208>
 801f974:	e7d8      	b.n	801f928 <forward_dense_integer_SSSA+0x1a0>
 801f976:	2900      	cmp	r1, #0
 801f978:	d0e2      	beq.n	801f940 <forward_dense_integer_SSSA+0x1b8>
 801f97a:	eddf 8a05 	vldr	s17, [pc, #20]	; 801f990 <forward_dense_integer_SSSA+0x208>
 801f97e:	e7c9      	b.n	801f914 <forward_dense_integer_SSSA+0x18c>
 801f980:	4629      	mov	r1, r5
 801f982:	e71d      	b.n	801f7c0 <forward_dense_integer_SSSA+0x38>
 801f984:	4606      	mov	r6, r0
 801f986:	eddf 8a02 	vldr	s17, [pc, #8]	; 801f990 <forward_dense_integer_SSSA+0x208>
 801f98a:	e7c9      	b.n	801f920 <forward_dense_integer_SSSA+0x198>
 801f98c:	960c      	str	r6, [sp, #48]	; 0x30
 801f98e:	e73e      	b.n	801f80e <forward_dense_integer_SSSA+0x86>
 801f990:	00000000 	.word	0x00000000

0801f994 <nl_func_sm_array_f32>:
 801f994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f998:	ed2d 8b04 	vpush	{d8-d9}
 801f99c:	b089      	sub	sp, #36	; 0x24
 801f99e:	698f      	ldr	r7, [r1, #24]
 801f9a0:	6986      	ldr	r6, [r0, #24]
 801f9a2:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f9a6:	68bd      	ldr	r5, [r7, #8]
 801f9a8:	eba2 040e 	sub.w	r4, r2, lr
 801f9ac:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 801f9b0:	9602      	str	r6, [sp, #8]
 801f9b2:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801f9b6:	68fc      	ldr	r4, [r7, #12]
 801f9b8:	68b6      	ldr	r6, [r6, #8]
 801f9ba:	eba2 020c 	sub.w	r2, r2, ip
 801f9be:	42a5      	cmp	r5, r4
 801f9c0:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 801f9c4:	d351      	bcc.n	801fa6a <nl_func_sm_array_f32+0xd6>
 801f9c6:	9303      	str	r3, [sp, #12]
 801f9c8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801f9cc:	009b      	lsls	r3, r3, #2
 801f9ce:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801f9d2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801f9d6:	f1ce 0200 	rsb	r2, lr, #0
 801f9da:	9301      	str	r3, [sp, #4]
 801f9dc:	f1cc 0300 	rsb	r3, ip, #0
 801f9e0:	9204      	str	r2, [sp, #16]
 801f9e2:	e9cd 1006 	strd	r1, r0, [sp, #24]
 801f9e6:	9305      	str	r3, [sp, #20]
 801f9e8:	9b02      	ldr	r3, [sp, #8]
 801f9ea:	9a07      	ldr	r2, [sp, #28]
 801f9ec:	60bd      	str	r5, [r7, #8]
 801f9ee:	609e      	str	r6, [r3, #8]
 801f9f0:	9b06      	ldr	r3, [sp, #24]
 801f9f2:	6992      	ldr	r2, [r2, #24]
 801f9f4:	699b      	ldr	r3, [r3, #24]
 801f9f6:	6894      	ldr	r4, [r2, #8]
 801f9f8:	9a03      	ldr	r2, [sp, #12]
 801f9fa:	689b      	ldr	r3, [r3, #8]
 801f9fc:	2a01      	cmp	r2, #1
 801f9fe:	ed93 8a00 	vldr	s16, [r3]
 801fa02:	d93b      	bls.n	801fa7c <nl_func_sm_array_f32+0xe8>
 801fa04:	9901      	ldr	r1, [sp, #4]
 801fa06:	1d1a      	adds	r2, r3, #4
 801fa08:	eb03 0b01 	add.w	fp, r3, r1
 801fa0c:	ecf2 7a01 	vldmia	r2!, {s15}
 801fa10:	4593      	cmp	fp, r2
 801fa12:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 801fa16:	d1f9      	bne.n	801fa0c <nl_func_sm_array_f32+0x78>
 801fa18:	469a      	mov	sl, r3
 801fa1a:	46a1      	mov	r9, r4
 801fa1c:	46a0      	mov	r8, r4
 801fa1e:	eddf 8a1a 	vldr	s17, [pc, #104]	; 801fa88 <nl_func_sm_array_f32+0xf4>
 801fa22:	ecba 0a01 	vldmia	sl!, {s0}
 801fa26:	ee30 0a48 	vsub.f32	s0, s0, s16
 801fa2a:	f008 fe51 	bl	80286d0 <expf>
 801fa2e:	45d3      	cmp	fp, sl
 801fa30:	eca8 0a01 	vstmia	r8!, {s0}
 801fa34:	ee78 8a80 	vadd.f32	s17, s17, s0
 801fa38:	d1f3      	bne.n	801fa22 <nl_func_sm_array_f32+0x8e>
 801fa3a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801fa3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa42:	d00b      	beq.n	801fa5c <nl_func_sm_array_f32+0xc8>
 801fa44:	ee89 7a28 	vdiv.f32	s14, s18, s17
 801fa48:	9b01      	ldr	r3, [sp, #4]
 801fa4a:	441c      	add	r4, r3
 801fa4c:	edd9 7a00 	vldr	s15, [r9]
 801fa50:	ee67 7a87 	vmul.f32	s15, s15, s14
 801fa54:	ece9 7a01 	vstmia	r9!, {s15}
 801fa58:	454c      	cmp	r4, r9
 801fa5a:	d1f7      	bne.n	801fa4c <nl_func_sm_array_f32+0xb8>
 801fa5c:	9b04      	ldr	r3, [sp, #16]
 801fa5e:	68fc      	ldr	r4, [r7, #12]
 801fa60:	441d      	add	r5, r3
 801fa62:	9b05      	ldr	r3, [sp, #20]
 801fa64:	42ac      	cmp	r4, r5
 801fa66:	441e      	add	r6, r3
 801fa68:	d9be      	bls.n	801f9e8 <nl_func_sm_array_f32+0x54>
 801fa6a:	9a02      	ldr	r2, [sp, #8]
 801fa6c:	60bc      	str	r4, [r7, #8]
 801fa6e:	68d3      	ldr	r3, [r2, #12]
 801fa70:	6093      	str	r3, [r2, #8]
 801fa72:	b009      	add	sp, #36	; 0x24
 801fa74:	ecbd 8b04 	vpop	{d8-d9}
 801fa78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa7c:	2a00      	cmp	r2, #0
 801fa7e:	d0ed      	beq.n	801fa5c <nl_func_sm_array_f32+0xc8>
 801fa80:	9a01      	ldr	r2, [sp, #4]
 801fa82:	eb03 0b02 	add.w	fp, r3, r2
 801fa86:	e7c7      	b.n	801fa18 <nl_func_sm_array_f32+0x84>
 801fa88:	00000000 	.word	0x00000000

0801fa8c <forward_sm>:
 801fa8c:	6982      	ldr	r2, [r0, #24]
 801fa8e:	8813      	ldrh	r3, [r2, #0]
 801fa90:	b333      	cbz	r3, 801fae0 <forward_sm+0x54>
 801fa92:	6852      	ldr	r2, [r2, #4]
 801fa94:	6851      	ldr	r1, [r2, #4]
 801fa96:	b101      	cbz	r1, 801fa9a <forward_sm+0xe>
 801fa98:	6809      	ldr	r1, [r1, #0]
 801fa9a:	2b01      	cmp	r3, #1
 801fa9c:	d91d      	bls.n	801fada <forward_sm+0x4e>
 801fa9e:	6913      	ldr	r3, [r2, #16]
 801faa0:	b1cb      	cbz	r3, 801fad6 <forward_sm+0x4a>
 801faa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801faa4:	6818      	ldr	r0, [r3, #0]
 801faa6:	b083      	sub	sp, #12
 801faa8:	688b      	ldr	r3, [r1, #8]
 801faaa:	68cd      	ldr	r5, [r1, #12]
 801faac:	68c2      	ldr	r2, [r0, #12]
 801faae:	0a1b      	lsrs	r3, r3, #8
 801fab0:	686e      	ldr	r6, [r5, #4]
 801fab2:	6857      	ldr	r7, [r2, #4]
 801fab4:	d016      	beq.n	801fae4 <forward_sm+0x58>
 801fab6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801faba:	2201      	movs	r2, #1
 801fabc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801fac0:	429d      	cmp	r5, r3
 801fac2:	fb04 f202 	mul.w	r2, r4, r2
 801fac6:	d1f9      	bne.n	801fabc <forward_sm+0x30>
 801fac8:	4633      	mov	r3, r6
 801faca:	9701      	str	r7, [sp, #4]
 801facc:	9600      	str	r6, [sp, #0]
 801face:	f7ff ff61 	bl	801f994 <nl_func_sm_array_f32>
 801fad2:	b003      	add	sp, #12
 801fad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fad6:	68db      	ldr	r3, [r3, #12]
 801fad8:	deff      	udf	#255	; 0xff
 801fada:	2300      	movs	r3, #0
 801fadc:	685b      	ldr	r3, [r3, #4]
 801fade:	deff      	udf	#255	; 0xff
 801fae0:	685b      	ldr	r3, [r3, #4]
 801fae2:	deff      	udf	#255	; 0xff
 801fae4:	2201      	movs	r2, #1
 801fae6:	e7ef      	b.n	801fac8 <forward_sm+0x3c>

0801fae8 <forward_eltwise_integer_INT8>:
 801fae8:	6983      	ldr	r3, [r0, #24]
 801faea:	881a      	ldrh	r2, [r3, #0]
 801faec:	2a00      	cmp	r2, #0
 801faee:	f000 8166 	beq.w	801fdbe <forward_eltwise_integer_INT8+0x2d6>
 801faf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faf6:	ed2d 8b02 	vpush	{d8}
 801fafa:	6859      	ldr	r1, [r3, #4]
 801fafc:	b0a5      	sub	sp, #148	; 0x94
 801fafe:	684b      	ldr	r3, [r1, #4]
 801fb00:	2b00      	cmp	r3, #0
 801fb02:	f000 81ab 	beq.w	801fe5c <forward_eltwise_integer_INT8+0x374>
 801fb06:	e9d3 5700 	ldrd	r5, r7, [r3]
 801fb0a:	2a01      	cmp	r2, #1
 801fb0c:	f240 8154 	bls.w	801fdb8 <forward_eltwise_integer_INT8+0x2d0>
 801fb10:	690c      	ldr	r4, [r1, #16]
 801fb12:	b104      	cbz	r4, 801fb16 <forward_eltwise_integer_INT8+0x2e>
 801fb14:	6824      	ldr	r4, [r4, #0]
 801fb16:	f105 0208 	add.w	r2, r5, #8
 801fb1a:	68ab      	ldr	r3, [r5, #8]
 801fb1c:	f8d0 901c 	ldr.w	r9, [r0, #28]
 801fb20:	9209      	str	r2, [sp, #36]	; 0x24
 801fb22:	f107 0208 	add.w	r2, r7, #8
 801fb26:	ea5f 2c13 	movs.w	ip, r3, lsr #8
 801fb2a:	9207      	str	r2, [sp, #28]
 801fb2c:	6a02      	ldr	r2, [r0, #32]
 801fb2e:	9208      	str	r2, [sp, #32]
 801fb30:	f000 816e 	beq.w	801fe10 <forward_eltwise_integer_INT8+0x328>
 801fb34:	f10c 33ff 	add.w	r3, ip, #4294967295
 801fb38:	68fa      	ldr	r2, [r7, #12]
 801fb3a:	68ee      	ldr	r6, [r5, #12]
 801fb3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801fb40:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801fb44:	4288      	cmp	r0, r1
 801fb46:	d10f      	bne.n	801fb68 <forward_eltwise_integer_INT8+0x80>
 801fb48:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 801fb4c:	4461      	add	r1, ip
 801fb4e:	0088      	lsls	r0, r1, #2
 801fb50:	1831      	adds	r1, r6, r0
 801fb52:	4402      	add	r2, r0
 801fb54:	2b00      	cmp	r3, #0
 801fb56:	f000 815b 	beq.w	801fe10 <forward_eltwise_integer_INT8+0x328>
 801fb5a:	f851 6d04 	ldr.w	r6, [r1, #-4]!
 801fb5e:	3b01      	subs	r3, #1
 801fb60:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801fb64:	4286      	cmp	r6, r0
 801fb66:	d0f5      	beq.n	801fb54 <forward_eltwise_integer_INT8+0x6c>
 801fb68:	2600      	movs	r6, #0
 801fb6a:	696a      	ldr	r2, [r5, #20]
 801fb6c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 801fb70:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 801fb74:	a91c      	add	r1, sp, #112	; 0x70
 801fb76:	f8d2 a000 	ldr.w	sl, [r2]
 801fb7a:	2300      	movs	r3, #0
 801fb7c:	6962      	ldr	r2, [r4, #20]
 801fb7e:	f10d 0e80 	add.w	lr, sp, #128	; 0x80
 801fb82:	a812      	add	r0, sp, #72	; 0x48
 801fb84:	f8d2 b000 	ldr.w	fp, [r2]
 801fb88:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801fb8c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801fb90:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 801fb94:	f240 4c01 	movw	ip, #1025	; 0x401
 801fb98:	9a07      	ldr	r2, [sp, #28]
 801fb9a:	9115      	str	r1, [sp, #84]	; 0x54
 801fb9c:	4641      	mov	r1, r8
 801fb9e:	931c      	str	r3, [sp, #112]	; 0x70
 801fba0:	9320      	str	r3, [sp, #128]	; 0x80
 801fba2:	931f      	str	r3, [sp, #124]	; 0x7c
 801fba4:	9323      	str	r3, [sp, #140]	; 0x8c
 801fba6:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 801fbaa:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 801fbae:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 801fbb2:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
 801fbb6:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 801fbba:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
 801fbbe:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
 801fbc2:	f005 fca1 	bl	8025508 <core_get_broadcasted_shape>
 801fbc6:	aa12      	add	r2, sp, #72	; 0x48
 801fbc8:	4641      	mov	r1, r8
 801fbca:	a814      	add	r0, sp, #80	; 0x50
 801fbcc:	f005 fcb8 	bl	8025540 <core_compute_offsets>
 801fbd0:	aa12      	add	r2, sp, #72	; 0x48
 801fbd2:	9907      	ldr	r1, [sp, #28]
 801fbd4:	a816      	add	r0, sp, #88	; 0x58
 801fbd6:	f005 fcb3 	bl	8025540 <core_compute_offsets>
 801fbda:	6829      	ldr	r1, [r5, #0]
 801fbdc:	f8d5 c018 	ldr.w	ip, [r5, #24]
 801fbe0:	6823      	ldr	r3, [r4, #0]
 801fbe2:	683a      	ldr	r2, [r7, #0]
 801fbe4:	b129      	cbz	r1, 801fbf2 <forward_eltwise_integer_INT8+0x10a>
 801fbe6:	6848      	ldr	r0, [r1, #4]
 801fbe8:	b118      	cbz	r0, 801fbf2 <forward_eltwise_integer_INT8+0x10a>
 801fbea:	884d      	ldrh	r5, [r1, #2]
 801fbec:	2d00      	cmp	r5, #0
 801fbee:	f040 8123 	bne.w	801fe38 <forward_eltwise_integer_INT8+0x350>
 801fbf2:	2000      	movs	r0, #0
 801fbf4:	900c      	str	r0, [sp, #48]	; 0x30
 801fbf6:	b12a      	cbz	r2, 801fc04 <forward_eltwise_integer_INT8+0x11c>
 801fbf8:	6850      	ldr	r0, [r2, #4]
 801fbfa:	b118      	cbz	r0, 801fc04 <forward_eltwise_integer_INT8+0x11c>
 801fbfc:	8855      	ldrh	r5, [r2, #2]
 801fbfe:	2d00      	cmp	r5, #0
 801fc00:	f040 8117 	bne.w	801fe32 <forward_eltwise_integer_INT8+0x34a>
 801fc04:	2000      	movs	r0, #0
 801fc06:	900d      	str	r0, [sp, #52]	; 0x34
 801fc08:	b12b      	cbz	r3, 801fc16 <forward_eltwise_integer_INT8+0x12e>
 801fc0a:	6858      	ldr	r0, [r3, #4]
 801fc0c:	b118      	cbz	r0, 801fc16 <forward_eltwise_integer_INT8+0x12e>
 801fc0e:	885d      	ldrh	r5, [r3, #2]
 801fc10:	2d00      	cmp	r5, #0
 801fc12:	f040 810b 	bne.w	801fe2c <forward_eltwise_integer_INT8+0x344>
 801fc16:	2000      	movs	r0, #0
 801fc18:	69bd      	ldr	r5, [r7, #24]
 801fc1a:	69a4      	ldr	r4, [r4, #24]
 801fc1c:	68ad      	ldr	r5, [r5, #8]
 801fc1e:	68a7      	ldr	r7, [r4, #8]
 801fc20:	900e      	str	r0, [sp, #56]	; 0x38
 801fc22:	f8dc 4008 	ldr.w	r4, [ip, #8]
 801fc26:	b139      	cbz	r1, 801fc38 <forward_eltwise_integer_INT8+0x150>
 801fc28:	6848      	ldr	r0, [r1, #4]
 801fc2a:	2800      	cmp	r0, #0
 801fc2c:	f000 8114 	beq.w	801fe58 <forward_eltwise_integer_INT8+0x370>
 801fc30:	8849      	ldrh	r1, [r1, #2]
 801fc32:	2900      	cmp	r1, #0
 801fc34:	f040 80f6 	bne.w	801fe24 <forward_eltwise_integer_INT8+0x33c>
 801fc38:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
 801fc3c:	b13a      	cbz	r2, 801fc4e <forward_eltwise_integer_INT8+0x166>
 801fc3e:	6851      	ldr	r1, [r2, #4]
 801fc40:	2900      	cmp	r1, #0
 801fc42:	f000 8107 	beq.w	801fe54 <forward_eltwise_integer_INT8+0x36c>
 801fc46:	8852      	ldrh	r2, [r2, #2]
 801fc48:	2a00      	cmp	r2, #0
 801fc4a:	f040 80e7 	bne.w	801fe1c <forward_eltwise_integer_INT8+0x334>
 801fc4e:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
 801fc52:	b13b      	cbz	r3, 801fc64 <forward_eltwise_integer_INT8+0x17c>
 801fc54:	685a      	ldr	r2, [r3, #4]
 801fc56:	2a00      	cmp	r2, #0
 801fc58:	f000 80fa 	beq.w	801fe50 <forward_eltwise_integer_INT8+0x368>
 801fc5c:	885b      	ldrh	r3, [r3, #2]
 801fc5e:	2b00      	cmp	r3, #0
 801fc60:	f040 80d8 	bne.w	801fe14 <forward_eltwise_integer_INT8+0x32c>
 801fc64:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 801fc68:	2e00      	cmp	r6, #0
 801fc6a:	f040 80aa 	bne.w	801fdc2 <forward_eltwise_integer_INT8+0x2da>
 801fc6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801fc70:	68ca      	ldr	r2, [r1, #12]
 801fc72:	2a00      	cmp	r2, #0
 801fc74:	f000 809b 	beq.w	801fdae <forward_eltwise_integer_INT8+0x2c6>
 801fc78:	f8d1 e008 	ldr.w	lr, [r1, #8]
 801fc7c:	9608      	str	r6, [sp, #32]
 801fc7e:	4616      	mov	r6, r2
 801fc80:	4670      	mov	r0, lr
 801fc82:	460a      	mov	r2, r1
 801fc84:	2800      	cmp	r0, #0
 801fc86:	f000 80e0 	beq.w	801fe4a <forward_eltwise_integer_INT8+0x362>
 801fc8a:	2300      	movs	r3, #0
 801fc8c:	6856      	ldr	r6, [r2, #4]
 801fc8e:	46be      	mov	lr, r7
 801fc90:	9307      	str	r3, [sp, #28]
 801fc92:	2e00      	cmp	r6, #0
 801fc94:	f000 80d6 	beq.w	801fe44 <forward_eltwise_integer_INT8+0x35c>
 801fc98:	6810      	ldr	r0, [r2, #0]
 801fc9a:	f04f 0800 	mov.w	r8, #0
 801fc9e:	4677      	mov	r7, lr
 801fca0:	4694      	mov	ip, r2
 801fca2:	2800      	cmp	r0, #0
 801fca4:	f000 80cb 	beq.w	801fe3e <forward_eltwise_integer_INT8+0x356>
 801fca8:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 801fcac:	2600      	movs	r6, #0
 801fcae:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 801fcb2:	f994 3000 	ldrsb.w	r3, [r4]
 801fcb6:	aa10      	add	r2, sp, #64	; 0x40
 801fcb8:	f99d c02d 	ldrsb.w	ip, [sp, #45]	; 0x2d
 801fcbc:	a90f      	add	r1, sp, #60	; 0x3c
 801fcbe:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 801fcc2:	a811      	add	r0, sp, #68	; 0x44
 801fcc4:	eba3 030c 	sub.w	r3, r3, ip
 801fcc8:	f99d c02e 	ldrsb.w	ip, [sp, #46]	; 0x2e
 801fccc:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 801fcd0:	ee07 3a90 	vmov	s15, r3
 801fcd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fcd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801fcdc:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 801fce0:	f995 3000 	ldrsb.w	r3, [r5]
 801fce4:	eba3 030c 	sub.w	r3, r3, ip
 801fce8:	ee07 3a90 	vmov	s15, r3
 801fcec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fcf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801fcf4:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801fcf8:	47c8      	blx	r9
 801fcfa:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 801fcfe:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 801fd02:	f99d 302f 	ldrsb.w	r3, [sp, #47]	; 0x2f
 801fd06:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801fd0a:	ee07 3a90 	vmov	s15, r3
 801fd0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fd12:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fd16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd1e:	fe38 7a88 	vselgt.f32	s14, s17, s16
 801fd22:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fd26:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 801fd2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fd2e:	ee17 3a90 	vmov	r3, s15
 801fd32:	f303 0307 	ssat	r3, #8, r3
 801fd36:	703b      	strb	r3, [r7, #0]
 801fd38:	3601      	adds	r6, #1
 801fd3a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801fd3c:	445f      	add	r7, fp
 801fd3e:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 801fd42:	6808      	ldr	r0, [r1, #0]
 801fd44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fd46:	fb00 440a 	mla	r4, r0, sl, r4
 801fd4a:	f8dc 0000 	ldr.w	r0, [ip]
 801fd4e:	681a      	ldr	r2, [r3, #0]
 801fd50:	42b0      	cmp	r0, r6
 801fd52:	fb02 550a 	mla	r5, r2, sl, r5
 801fd56:	d8ac      	bhi.n	801fcb2 <forward_eltwise_integer_INT8+0x1ca>
 801fd58:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801fd5c:	684a      	ldr	r2, [r1, #4]
 801fd5e:	f108 0801 	add.w	r8, r8, #1
 801fd62:	fb02 440a 	mla	r4, r2, sl, r4
 801fd66:	45b0      	cmp	r8, r6
 801fd68:	685a      	ldr	r2, [r3, #4]
 801fd6a:	fb02 550a 	mla	r5, r2, sl, r5
 801fd6e:	d398      	bcc.n	801fca2 <forward_eltwise_integer_INT8+0x1ba>
 801fd70:	46be      	mov	lr, r7
 801fd72:	4662      	mov	r2, ip
 801fd74:	f8dc 0008 	ldr.w	r0, [ip, #8]
 801fd78:	9f07      	ldr	r7, [sp, #28]
 801fd7a:	3701      	adds	r7, #1
 801fd7c:	9707      	str	r7, [sp, #28]
 801fd7e:	688f      	ldr	r7, [r1, #8]
 801fd80:	fb07 440a 	mla	r4, r7, sl, r4
 801fd84:	689f      	ldr	r7, [r3, #8]
 801fd86:	fb07 550a 	mla	r5, r7, sl, r5
 801fd8a:	9f07      	ldr	r7, [sp, #28]
 801fd8c:	4287      	cmp	r7, r0
 801fd8e:	d380      	bcc.n	801fc92 <forward_eltwise_integer_INT8+0x1aa>
 801fd90:	4677      	mov	r7, lr
 801fd92:	68d6      	ldr	r6, [r2, #12]
 801fd94:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 801fd98:	9908      	ldr	r1, [sp, #32]
 801fd9a:	68db      	ldr	r3, [r3, #12]
 801fd9c:	fb0c 440a 	mla	r4, ip, sl, r4
 801fda0:	3101      	adds	r1, #1
 801fda2:	fb03 550a 	mla	r5, r3, sl, r5
 801fda6:	42b1      	cmp	r1, r6
 801fda8:	9108      	str	r1, [sp, #32]
 801fdaa:	f4ff af6b 	bcc.w	801fc84 <forward_eltwise_integer_INT8+0x19c>
 801fdae:	b025      	add	sp, #148	; 0x94
 801fdb0:	ecbd 8b02 	vpop	{d8}
 801fdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdb8:	2300      	movs	r3, #0
 801fdba:	685b      	ldr	r3, [r3, #4]
 801fdbc:	deff      	udf	#255	; 0xff
 801fdbe:	6853      	ldr	r3, [r2, #4]
 801fdc0:	deff      	udf	#255	; 0xff
 801fdc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fdc4:	0a1a      	lsrs	r2, r3, #8
 801fdc6:	d04c      	beq.n	801fe62 <forward_eltwise_integer_INT8+0x37a>
 801fdc8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fdca:	2301      	movs	r3, #1
 801fdcc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801fdd0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801fdd4:	4290      	cmp	r0, r2
 801fdd6:	fb01 f303 	mul.w	r3, r1, r3
 801fdda:	d1f9      	bne.n	801fdd0 <forward_eltwise_integer_INT8+0x2e8>
 801fddc:	4621      	mov	r1, r4
 801fdde:	ac0d      	add	r4, sp, #52	; 0x34
 801fde0:	462a      	mov	r2, r5
 801fde2:	f10d 052d 	add.w	r5, sp, #45	; 0x2d
 801fde6:	9402      	str	r4, [sp, #8]
 801fde8:	ac0c      	add	r4, sp, #48	; 0x30
 801fdea:	f10d 0e2f 	add.w	lr, sp, #47	; 0x2f
 801fdee:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 801fdf2:	f10d 062e 	add.w	r6, sp, #46	; 0x2e
 801fdf6:	4638      	mov	r0, r7
 801fdf8:	e9cd 4500 	strd	r4, r5, [sp]
 801fdfc:	9c08      	ldr	r4, [sp, #32]
 801fdfe:	9603      	str	r6, [sp, #12]
 801fe00:	e9cd ce04 	strd	ip, lr, [sp, #16]
 801fe04:	47a0      	blx	r4
 801fe06:	b025      	add	sp, #148	; 0x94
 801fe08:	ecbd 8b02 	vpop	{d8}
 801fe0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe10:	2601      	movs	r6, #1
 801fe12:	e6aa      	b.n	801fb6a <forward_eltwise_integer_INT8+0x82>
 801fe14:	6853      	ldr	r3, [r2, #4]
 801fe16:	f993 3000 	ldrsb.w	r3, [r3]
 801fe1a:	e723      	b.n	801fc64 <forward_eltwise_integer_INT8+0x17c>
 801fe1c:	684a      	ldr	r2, [r1, #4]
 801fe1e:	f992 2000 	ldrsb.w	r2, [r2]
 801fe22:	e714      	b.n	801fc4e <forward_eltwise_integer_INT8+0x166>
 801fe24:	6841      	ldr	r1, [r0, #4]
 801fe26:	f991 1000 	ldrsb.w	r1, [r1]
 801fe2a:	e705      	b.n	801fc38 <forward_eltwise_integer_INT8+0x150>
 801fe2c:	6800      	ldr	r0, [r0, #0]
 801fe2e:	6800      	ldr	r0, [r0, #0]
 801fe30:	e6f2      	b.n	801fc18 <forward_eltwise_integer_INT8+0x130>
 801fe32:	6800      	ldr	r0, [r0, #0]
 801fe34:	6800      	ldr	r0, [r0, #0]
 801fe36:	e6e6      	b.n	801fc06 <forward_eltwise_integer_INT8+0x11e>
 801fe38:	6800      	ldr	r0, [r0, #0]
 801fe3a:	6800      	ldr	r0, [r0, #0]
 801fe3c:	e6da      	b.n	801fbf4 <forward_eltwise_integer_INT8+0x10c>
 801fe3e:	9915      	ldr	r1, [sp, #84]	; 0x54
 801fe40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fe42:	e78b      	b.n	801fd5c <forward_eltwise_integer_INT8+0x274>
 801fe44:	9915      	ldr	r1, [sp, #84]	; 0x54
 801fe46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fe48:	e796      	b.n	801fd78 <forward_eltwise_integer_INT8+0x290>
 801fe4a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801fe4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fe4e:	e7a1      	b.n	801fd94 <forward_eltwise_integer_INT8+0x2ac>
 801fe50:	4613      	mov	r3, r2
 801fe52:	e707      	b.n	801fc64 <forward_eltwise_integer_INT8+0x17c>
 801fe54:	460a      	mov	r2, r1
 801fe56:	e6fa      	b.n	801fc4e <forward_eltwise_integer_INT8+0x166>
 801fe58:	4601      	mov	r1, r0
 801fe5a:	e6ed      	b.n	801fc38 <forward_eltwise_integer_INT8+0x150>
 801fe5c:	461d      	mov	r5, r3
 801fe5e:	461f      	mov	r7, r3
 801fe60:	e653      	b.n	801fb0a <forward_eltwise_integer_INT8+0x22>
 801fe62:	2301      	movs	r3, #1
 801fe64:	e7ba      	b.n	801fddc <forward_eltwise_integer_INT8+0x2f4>
 801fe66:	bf00      	nop

0801fe68 <ai_check_custom_types>:
 801fe68:	4b13      	ldr	r3, [pc, #76]	; (801feb8 <ai_check_custom_types+0x50>)
 801fe6a:	b082      	sub	sp, #8
 801fe6c:	681b      	ldr	r3, [r3, #0]
 801fe6e:	9301      	str	r3, [sp, #4]
 801fe70:	b118      	cbz	r0, 801fe7a <ai_check_custom_types+0x12>
 801fe72:	7803      	ldrb	r3, [r0, #0]
 801fe74:	2b03      	cmp	r3, #3
 801fe76:	d002      	beq.n	801fe7e <ai_check_custom_types+0x16>
 801fe78:	2000      	movs	r0, #0
 801fe7a:	b002      	add	sp, #8
 801fe7c:	4770      	bx	lr
 801fe7e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801fe82:	4293      	cmp	r3, r2
 801fe84:	d004      	beq.n	801fe90 <ai_check_custom_types+0x28>
 801fe86:	2001      	movs	r0, #1
 801fe88:	f080 0001 	eor.w	r0, r0, #1
 801fe8c:	b002      	add	sp, #8
 801fe8e:	4770      	bx	lr
 801fe90:	7842      	ldrb	r2, [r0, #1]
 801fe92:	3001      	adds	r0, #1
 801fe94:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801fe98:	429a      	cmp	r2, r3
 801fe9a:	d1f4      	bne.n	801fe86 <ai_check_custom_types+0x1e>
 801fe9c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801fea0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801fea4:	429a      	cmp	r2, r3
 801fea6:	d1ee      	bne.n	801fe86 <ai_check_custom_types+0x1e>
 801fea8:	7842      	ldrb	r2, [r0, #1]
 801feaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801feae:	429a      	cmp	r2, r3
 801feb0:	d1e9      	bne.n	801fe86 <ai_check_custom_types+0x1e>
 801feb2:	2000      	movs	r0, #0
 801feb4:	e7e8      	b.n	801fe88 <ai_check_custom_types+0x20>
 801feb6:	bf00      	nop
 801feb8:	08028c3c 	.word	0x08028c3c

0801febc <ai_layers_init_all>:
 801febc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801febe:	b16a      	cbz	r2, 801fedc <ai_layers_init_all+0x20>
 801fec0:	6913      	ldr	r3, [r2, #16]
 801fec2:	60d0      	str	r0, [r2, #12]
 801fec4:	429a      	cmp	r2, r3
 801fec6:	f04f 0201 	mov.w	r2, #1
 801feca:	d007      	beq.n	801fedc <ai_layers_init_all+0x20>
 801fecc:	b133      	cbz	r3, 801fedc <ai_layers_init_all+0x20>
 801fece:	6919      	ldr	r1, [r3, #16]
 801fed0:	3201      	adds	r2, #1
 801fed2:	60d8      	str	r0, [r3, #12]
 801fed4:	4299      	cmp	r1, r3
 801fed6:	bf18      	it	ne
 801fed8:	2900      	cmpne	r1, #0
 801feda:	d101      	bne.n	801fee0 <ai_layers_init_all+0x24>
 801fedc:	4610      	mov	r0, r2
 801fede:	4770      	bx	lr
 801fee0:	460b      	mov	r3, r1
 801fee2:	e7f4      	b.n	801fece <ai_layers_init_all+0x12>

0801fee4 <ai_layers_post_init_all>:
 801fee4:	b538      	push	{r3, r4, r5, lr}
 801fee6:	6d04      	ldr	r4, [r0, #80]	; 0x50
 801fee8:	b184      	cbz	r4, 801ff0c <ai_layers_post_init_all+0x28>
 801feea:	2500      	movs	r5, #0
 801feec:	6863      	ldr	r3, [r4, #4]
 801feee:	4620      	mov	r0, r4
 801fef0:	07db      	lsls	r3, r3, #31
 801fef2:	d503      	bpl.n	801fefc <ai_layers_post_init_all+0x18>
 801fef4:	6a23      	ldr	r3, [r4, #32]
 801fef6:	b10b      	cbz	r3, 801fefc <ai_layers_post_init_all+0x18>
 801fef8:	3501      	adds	r5, #1
 801fefa:	4798      	blx	r3
 801fefc:	6923      	ldr	r3, [r4, #16]
 801fefe:	429c      	cmp	r4, r3
 801ff00:	bf18      	it	ne
 801ff02:	2b00      	cmpne	r3, #0
 801ff04:	461c      	mov	r4, r3
 801ff06:	d1f1      	bne.n	801feec <ai_layers_post_init_all+0x8>
 801ff08:	4628      	mov	r0, r5
 801ff0a:	bd38      	pop	{r3, r4, r5, pc}
 801ff0c:	4625      	mov	r5, r4
 801ff0e:	e7fb      	b.n	801ff08 <ai_layers_post_init_all+0x24>

0801ff10 <ai_layers_forward_all>:
 801ff10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff14:	6d87      	ldr	r7, [r0, #88]	; 0x58
 801ff16:	4604      	mov	r4, r0
 801ff18:	6d05      	ldr	r5, [r0, #80]	; 0x50
 801ff1a:	2f00      	cmp	r7, #0
 801ff1c:	d02b      	beq.n	801ff76 <ai_layers_forward_all+0x66>
 801ff1e:	2d00      	cmp	r5, #0
 801ff20:	d03d      	beq.n	801ff9e <ai_layers_forward_all+0x8e>
 801ff22:	2600      	movs	r6, #0
 801ff24:	6545      	str	r5, [r0, #84]	; 0x54
 801ff26:	4629      	mov	r1, r5
 801ff28:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 801ff2a:	2001      	movs	r0, #1
 801ff2c:	46b0      	mov	r8, r6
 801ff2e:	47b8      	blx	r7
 801ff30:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801ff32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801ff34:	2002      	movs	r0, #2
 801ff36:	47b8      	blx	r7
 801ff38:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801ff3a:	696b      	ldr	r3, [r5, #20]
 801ff3c:	4628      	mov	r0, r5
 801ff3e:	4798      	blx	r3
 801ff40:	692b      	ldr	r3, [r5, #16]
 801ff42:	2003      	movs	r0, #3
 801ff44:	429d      	cmp	r5, r3
 801ff46:	4619      	mov	r1, r3
 801ff48:	d009      	beq.n	801ff5e <ai_layers_forward_all+0x4e>
 801ff4a:	6563      	str	r3, [r4, #84]	; 0x54
 801ff4c:	3601      	adds	r6, #1
 801ff4e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801ff50:	47b8      	blx	r7
 801ff52:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801ff54:	2900      	cmp	r1, #0
 801ff56:	d1ec      	bne.n	801ff32 <ai_layers_forward_all+0x22>
 801ff58:	4630      	mov	r0, r6
 801ff5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff5e:	2100      	movs	r1, #0
 801ff60:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 801ff64:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801ff66:	3601      	adds	r6, #1
 801ff68:	47b8      	blx	r7
 801ff6a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801ff6c:	2900      	cmp	r1, #0
 801ff6e:	d1e0      	bne.n	801ff32 <ai_layers_forward_all+0x22>
 801ff70:	4630      	mov	r0, r6
 801ff72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff76:	b195      	cbz	r5, 801ff9e <ai_layers_forward_all+0x8e>
 801ff78:	463e      	mov	r6, r7
 801ff7a:	6545      	str	r5, [r0, #84]	; 0x54
 801ff7c:	696b      	ldr	r3, [r5, #20]
 801ff7e:	4628      	mov	r0, r5
 801ff80:	4798      	blx	r3
 801ff82:	692b      	ldr	r3, [r5, #16]
 801ff84:	3601      	adds	r6, #1
 801ff86:	42ab      	cmp	r3, r5
 801ff88:	461d      	mov	r5, r3
 801ff8a:	d003      	beq.n	801ff94 <ai_layers_forward_all+0x84>
 801ff8c:	6563      	str	r3, [r4, #84]	; 0x54
 801ff8e:	2b00      	cmp	r3, #0
 801ff90:	d1f4      	bne.n	801ff7c <ai_layers_forward_all+0x6c>
 801ff92:	e7e1      	b.n	801ff58 <ai_layers_forward_all+0x48>
 801ff94:	2300      	movs	r3, #0
 801ff96:	4630      	mov	r0, r6
 801ff98:	6563      	str	r3, [r4, #84]	; 0x54
 801ff9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff9e:	462e      	mov	r6, r5
 801ffa0:	4630      	mov	r0, r6
 801ffa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ffa6:	bf00      	nop

0801ffa8 <ai_layers_destroy_all>:
 801ffa8:	b538      	push	{r3, r4, r5, lr}
 801ffaa:	6d04      	ldr	r4, [r0, #80]	; 0x50
 801ffac:	b184      	cbz	r4, 801ffd0 <ai_layers_destroy_all+0x28>
 801ffae:	2500      	movs	r5, #0
 801ffb0:	6863      	ldr	r3, [r4, #4]
 801ffb2:	4620      	mov	r0, r4
 801ffb4:	075b      	lsls	r3, r3, #29
 801ffb6:	d503      	bpl.n	801ffc0 <ai_layers_destroy_all+0x18>
 801ffb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ffba:	b10b      	cbz	r3, 801ffc0 <ai_layers_destroy_all+0x18>
 801ffbc:	3501      	adds	r5, #1
 801ffbe:	4798      	blx	r3
 801ffc0:	6923      	ldr	r3, [r4, #16]
 801ffc2:	429c      	cmp	r4, r3
 801ffc4:	bf18      	it	ne
 801ffc6:	2b00      	cmpne	r3, #0
 801ffc8:	461c      	mov	r4, r3
 801ffca:	d1f1      	bne.n	801ffb0 <ai_layers_destroy_all+0x8>
 801ffcc:	4628      	mov	r0, r5
 801ffce:	bd38      	pop	{r3, r4, r5, pc}
 801ffd0:	4625      	mov	r5, r4
 801ffd2:	e7fb      	b.n	801ffcc <ai_layers_destroy_all+0x24>

0801ffd4 <pool_func_ap_array_integer_INT8>:
 801ffd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffd8:	b093      	sub	sp, #76	; 0x4c
 801ffda:	6985      	ldr	r5, [r0, #24]
 801ffdc:	460f      	mov	r7, r1
 801ffde:	469c      	mov	ip, r3
 801ffe0:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801ffe2:	6803      	ldr	r3, [r0, #0]
 801ffe4:	69a1      	ldr	r1, [r4, #24]
 801ffe6:	68a8      	ldr	r0, [r5, #8]
 801ffe8:	6825      	ldr	r5, [r4, #0]
 801ffea:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 801ffee:	6889      	ldr	r1, [r1, #8]
 801fff0:	940d      	str	r4, [sp, #52]	; 0x34
 801fff2:	f8bd 4078 	ldrh.w	r4, [sp, #120]	; 0x78
 801fff6:	f8bd a070 	ldrh.w	sl, [sp, #112]	; 0x70
 801fffa:	940e      	str	r4, [sp, #56]	; 0x38
 801fffc:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8020000:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 8020004:	940f      	str	r4, [sp, #60]	; 0x3c
 8020006:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 802000a:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 802000e:	9410      	str	r4, [sp, #64]	; 0x40
 8020010:	f8bd 908c 	ldrh.w	r9, [sp, #140]	; 0x8c
 8020014:	2b00      	cmp	r3, #0
 8020016:	d03c      	beq.n	8020092 <pool_func_ap_array_integer_INT8+0xbe>
 8020018:	685e      	ldr	r6, [r3, #4]
 802001a:	46b3      	mov	fp, r6
 802001c:	2e00      	cmp	r6, #0
 802001e:	d031      	beq.n	8020084 <pool_func_ap_array_integer_INT8+0xb0>
 8020020:	885c      	ldrh	r4, [r3, #2]
 8020022:	9411      	str	r4, [sp, #68]	; 0x44
 8020024:	2c00      	cmp	r4, #0
 8020026:	d051      	beq.n	80200cc <pool_func_ap_array_integer_INT8+0xf8>
 8020028:	6834      	ldr	r4, [r6, #0]
 802002a:	ed94 0a00 	vldr	s0, [r4]
 802002e:	2d00      	cmp	r5, #0
 8020030:	d069      	beq.n	8020106 <pool_func_ap_array_integer_INT8+0x132>
 8020032:	686c      	ldr	r4, [r5, #4]
 8020034:	2c00      	cmp	r4, #0
 8020036:	d054      	beq.n	80200e2 <pool_func_ap_array_integer_INT8+0x10e>
 8020038:	886e      	ldrh	r6, [r5, #2]
 802003a:	9611      	str	r6, [sp, #68]	; 0x44
 802003c:	2e00      	cmp	r6, #0
 802003e:	d033      	beq.n	80200a8 <pool_func_ap_array_integer_INT8+0xd4>
 8020040:	6826      	ldr	r6, [r4, #0]
 8020042:	edd6 0a00 	vldr	s1, [r6]
 8020046:	2b00      	cmp	r3, #0
 8020048:	d155      	bne.n	80200f6 <pool_func_ap_array_integer_INT8+0x122>
 802004a:	6864      	ldr	r4, [r4, #4]
 802004c:	f994 4000 	ldrsb.w	r4, [r4]
 8020050:	f8cd 9020 	str.w	r9, [sp, #32]
 8020054:	f8cd 801c 	str.w	r8, [sp, #28]
 8020058:	f8cd e018 	str.w	lr, [sp, #24]
 802005c:	f8cd c000 	str.w	ip, [sp]
 8020060:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
 8020064:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020066:	4613      	mov	r3, r2
 8020068:	463a      	mov	r2, r7
 802006a:	9405      	str	r4, [sp, #20]
 802006c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802006e:	9404      	str	r4, [sp, #16]
 8020070:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020072:	9403      	str	r4, [sp, #12]
 8020074:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020076:	e9cd a401 	strd	sl, r4, [sp, #4]
 802007a:	f005 f8ab 	bl	80251d4 <st_int8_avepool>
 802007e:	b013      	add	sp, #76	; 0x4c
 8020080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020084:	2d00      	cmp	r5, #0
 8020086:	d02f      	beq.n	80200e8 <pool_func_ap_array_integer_INT8+0x114>
 8020088:	686c      	ldr	r4, [r5, #4]
 802008a:	b93c      	cbnz	r4, 802009c <pool_func_ap_array_integer_INT8+0xc8>
 802008c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8020130 <pool_func_ap_array_integer_INT8+0x15c>
 8020090:	e00d      	b.n	80200ae <pool_func_ap_array_integer_INT8+0xda>
 8020092:	2d00      	cmp	r5, #0
 8020094:	d028      	beq.n	80200e8 <pool_func_ap_array_integer_INT8+0x114>
 8020096:	686c      	ldr	r4, [r5, #4]
 8020098:	2c00      	cmp	r4, #0
 802009a:	d03f      	beq.n	802011c <pool_func_ap_array_integer_INT8+0x148>
 802009c:	886e      	ldrh	r6, [r5, #2]
 802009e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8020130 <pool_func_ap_array_integer_INT8+0x15c>
 80200a2:	9611      	str	r6, [sp, #68]	; 0x44
 80200a4:	2e00      	cmp	r6, #0
 80200a6:	d1cb      	bne.n	8020040 <pool_func_ap_array_integer_INT8+0x6c>
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	d03e      	beq.n	802012a <pool_func_ap_array_integer_INT8+0x156>
 80200ac:	685e      	ldr	r6, [r3, #4]
 80200ae:	46b3      	mov	fp, r6
 80200b0:	2e00      	cmp	r6, #0
 80200b2:	d02f      	beq.n	8020114 <pool_func_ap_array_integer_INT8+0x140>
 80200b4:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8020130 <pool_func_ap_array_integer_INT8+0x15c>
 80200b8:	885b      	ldrh	r3, [r3, #2]
 80200ba:	b953      	cbnz	r3, 80200d2 <pool_func_ap_array_integer_INT8+0xfe>
 80200bc:	2c00      	cmp	r4, #0
 80200be:	d0c7      	beq.n	8020050 <pool_func_ap_array_integer_INT8+0x7c>
 80200c0:	886d      	ldrh	r5, [r5, #2]
 80200c2:	9511      	str	r5, [sp, #68]	; 0x44
 80200c4:	2d00      	cmp	r5, #0
 80200c6:	d1c0      	bne.n	802004a <pool_func_ap_array_integer_INT8+0x76>
 80200c8:	2400      	movs	r4, #0
 80200ca:	e7c1      	b.n	8020050 <pool_func_ap_array_integer_INT8+0x7c>
 80200cc:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8020130 <pool_func_ap_array_integer_INT8+0x15c>
 80200d0:	e7ad      	b.n	802002e <pool_func_ap_array_integer_INT8+0x5a>
 80200d2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80200d6:	f993 3000 	ldrsb.w	r3, [r3]
 80200da:	2d00      	cmp	r5, #0
 80200dc:	d0f4      	beq.n	80200c8 <pool_func_ap_array_integer_INT8+0xf4>
 80200de:	686c      	ldr	r4, [r5, #4]
 80200e0:	e7ec      	b.n	80200bc <pool_func_ap_array_integer_INT8+0xe8>
 80200e2:	2b00      	cmp	r3, #0
 80200e4:	d1e3      	bne.n	80200ae <pool_func_ap_array_integer_INT8+0xda>
 80200e6:	e01b      	b.n	8020120 <pool_func_ap_array_integer_INT8+0x14c>
 80200e8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8020130 <pool_func_ap_array_integer_INT8+0x15c>
 80200ec:	462b      	mov	r3, r5
 80200ee:	462c      	mov	r4, r5
 80200f0:	eef0 0a40 	vmov.f32	s1, s0
 80200f4:	e7ac      	b.n	8020050 <pool_func_ap_array_integer_INT8+0x7c>
 80200f6:	f8d3 b004 	ldr.w	fp, [r3, #4]
 80200fa:	f1bb 0f00 	cmp.w	fp, #0
 80200fe:	d1db      	bne.n	80200b8 <pool_func_ap_array_integer_INT8+0xe4>
 8020100:	465b      	mov	r3, fp
 8020102:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020104:	e7de      	b.n	80200c4 <pool_func_ap_array_integer_INT8+0xf0>
 8020106:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020108:	eddf 0a09 	vldr	s1, [pc, #36]	; 8020130 <pool_func_ap_array_integer_INT8+0x15c>
 802010c:	2b00      	cmp	r3, #0
 802010e:	d1e0      	bne.n	80200d2 <pool_func_ap_array_integer_INT8+0xfe>
 8020110:	461c      	mov	r4, r3
 8020112:	e79d      	b.n	8020050 <pool_func_ap_array_integer_INT8+0x7c>
 8020114:	4633      	mov	r3, r6
 8020116:	eddf 0a06 	vldr	s1, [pc, #24]	; 8020130 <pool_func_ap_array_integer_INT8+0x15c>
 802011a:	e7cf      	b.n	80200bc <pool_func_ap_array_integer_INT8+0xe8>
 802011c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8020130 <pool_func_ap_array_integer_INT8+0x15c>
 8020120:	2300      	movs	r3, #0
 8020122:	eddf 0a03 	vldr	s1, [pc, #12]	; 8020130 <pool_func_ap_array_integer_INT8+0x15c>
 8020126:	461c      	mov	r4, r3
 8020128:	e792      	b.n	8020050 <pool_func_ap_array_integer_INT8+0x7c>
 802012a:	eddf 0a01 	vldr	s1, [pc, #4]	; 8020130 <pool_func_ap_array_integer_INT8+0x15c>
 802012e:	e7cb      	b.n	80200c8 <pool_func_ap_array_integer_INT8+0xf4>
 8020130:	00000000 	.word	0x00000000

08020134 <arm_fully_connected_s8>:
 8020134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020138:	b08b      	sub	sp, #44	; 0x2c
 802013a:	f8bd 4050 	ldrh.w	r4, [sp, #80]	; 0x50
 802013e:	e9dd a915 	ldrd	sl, r9, [sp, #84]	; 0x54
 8020142:	b30c      	cbz	r4, 8020188 <arm_fully_connected_s8+0x54>
 8020144:	4606      	mov	r6, r0
 8020146:	468b      	mov	fp, r1
 8020148:	4617      	mov	r7, r2
 802014a:	4698      	mov	r8, r3
 802014c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802014e:	3c01      	subs	r4, #1
 8020150:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8020152:	4630      	mov	r0, r6
 8020154:	9308      	str	r3, [sp, #32]
 8020156:	b2a4      	uxth	r4, r4
 8020158:	9504      	str	r5, [sp, #16]
 802015a:	4659      	mov	r1, fp
 802015c:	f8cd 8018 	str.w	r8, [sp, #24]
 8020160:	443e      	add	r6, r7
 8020162:	9705      	str	r7, [sp, #20]
 8020164:	f8cd a000 	str.w	sl, [sp]
 8020168:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 802016c:	461d      	mov	r5, r3
 802016e:	9207      	str	r2, [sp, #28]
 8020170:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8020172:	4445      	add	r5, r8
 8020174:	951b      	str	r5, [sp, #108]	; 0x6c
 8020176:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8020178:	9503      	str	r5, [sp, #12]
 802017a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 802017c:	e9cd 9501 	strd	r9, r5, [sp, #4]
 8020180:	f000 f808 	bl	8020194 <arm_nn_vec_mat_mult_t_s8>
 8020184:	2c00      	cmp	r4, #0
 8020186:	d1e1      	bne.n	802014c <arm_fully_connected_s8+0x18>
 8020188:	2000      	movs	r0, #0
 802018a:	b00b      	add	sp, #44	; 0x2c
 802018c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020190 <arm_fully_connected_s8_get_buffer_size>:
 8020190:	2000      	movs	r0, #0
 8020192:	4770      	bx	lr

08020194 <arm_nn_vec_mat_mult_t_s8>:
 8020194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020198:	b093      	sub	sp, #76	; 0x4c
 802019a:	4689      	mov	r9, r1
 802019c:	910b      	str	r1, [sp, #44]	; 0x2c
 802019e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80201a0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80201a2:	b28f      	uxth	r7, r1
 80201a4:	991d      	ldr	r1, [sp, #116]	; 0x74
 80201a6:	9007      	str	r0, [sp, #28]
 80201a8:	b28d      	uxth	r5, r1
 80201aa:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
 80201ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80201b0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 80201b4:	e9dd e621 	ldrd	lr, r6, [sp, #132]	; 0x84
 80201b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80201bc:	2e01      	cmp	r6, #1
 80201be:	f340 826c 	ble.w	802069a <arm_nn_vec_mat_mult_t_s8+0x506>
 80201c2:	1eb4      	subs	r4, r6, #2
 80201c4:	469c      	mov	ip, r3
 80201c6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80201c8:	4690      	mov	r8, r2
 80201ca:	f024 0301 	bic.w	r3, r4, #1
 80201ce:	f1ae 0110 	sub.w	r1, lr, #16
 80201d2:	4276      	negs	r6, r6
 80201d4:	2201      	movs	r2, #1
 80201d6:	4463      	add	r3, ip
 80201d8:	f021 010f 	bic.w	r1, r1, #15
 80201dc:	40b2      	lsls	r2, r6
 80201de:	960c      	str	r6, [sp, #48]	; 0x30
 80201e0:	3304      	adds	r3, #4
 80201e2:	ea4f 064e 	mov.w	r6, lr, lsl #1
 80201e6:	3a01      	subs	r2, #1
 80201e8:	9411      	str	r4, [sp, #68]	; 0x44
 80201ea:	9608      	str	r6, [sp, #32]
 80201ec:	f101 0610 	add.w	r6, r1, #16
 80201f0:	9309      	str	r3, [sp, #36]	; 0x24
 80201f2:	4603      	mov	r3, r0
 80201f4:	4664      	mov	r4, ip
 80201f6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80201f8:	4433      	add	r3, r6
 80201fa:	46ab      	mov	fp, r5
 80201fc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8020200:	9606      	str	r6, [sp, #24]
 8020202:	930a      	str	r3, [sp, #40]	; 0x28
 8020204:	1053      	asrs	r3, r2, #1
 8020206:	920d      	str	r2, [sp, #52]	; 0x34
 8020208:	9310      	str	r3, [sp, #64]	; 0x40
 802020a:	4643      	mov	r3, r8
 802020c:	9103      	str	r1, [sp, #12]
 802020e:	3308      	adds	r3, #8
 8020210:	f8cd 9008 	str.w	r9, [sp, #8]
 8020214:	9301      	str	r3, [sp, #4]
 8020216:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020218:	0fdb      	lsrs	r3, r3, #31
 802021a:	9304      	str	r3, [sp, #16]
 802021c:	1ca3      	adds	r3, r4, #2
 802021e:	9305      	str	r3, [sp, #20]
 8020220:	9b01      	ldr	r3, [sp, #4]
 8020222:	f1be 0f0f 	cmp.w	lr, #15
 8020226:	f853 ac08 	ldr.w	sl, [r3, #-8]
 802022a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 802022e:	f340 83f8 	ble.w	8020a22 <arm_nn_vec_mat_mult_t_s8+0x88e>
 8020232:	9a02      	ldr	r2, [sp, #8]
 8020234:	465d      	mov	r5, fp
 8020236:	9806      	ldr	r0, [sp, #24]
 8020238:	4616      	mov	r6, r2
 802023a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802023e:	eb02 0800 	add.w	r8, r2, r0
 8020242:	eb02 090e 	add.w	r9, r2, lr
 8020246:	6834      	ldr	r4, [r6, #0]
 8020248:	f8dc b000 	ldr.w	fp, [ip]
 802024c:	ea4f 2034 	mov.w	r0, r4, ror #8
 8020250:	f856 100e 	ldr.w	r1, [r6, lr]
 8020254:	ea4f 223b 	mov.w	r2, fp, ror #8
 8020258:	fa25 f080 	sxtab16	r0, r5, r0
 802025c:	fa25 f484 	sxtab16	r4, r5, r4
 8020260:	fa27 fb8b 	sxtab16	fp, r7, fp
 8020264:	fa27 f282 	sxtab16	r2, r7, r2
 8020268:	fb2b a404 	smlad	r4, fp, r4, sl
 802026c:	fa25 fa81 	sxtab16	sl, r5, r1
 8020270:	fb22 4000 	smlad	r0, r2, r0, r4
 8020274:	ea4f 2431 	mov.w	r4, r1, ror #8
 8020278:	6871      	ldr	r1, [r6, #4]
 802027a:	fa25 f484 	sxtab16	r4, r5, r4
 802027e:	fb2b 330a 	smlad	r3, fp, sl, r3
 8020282:	fb22 3a04 	smlad	sl, r2, r4, r3
 8020286:	f8dc 2004 	ldr.w	r2, [ip, #4]
 802028a:	ea4f 2431 	mov.w	r4, r1, ror #8
 802028e:	fa27 f382 	sxtab16	r3, r7, r2
 8020292:	ea4f 2b32 	mov.w	fp, r2, ror #8
 8020296:	f8d9 2004 	ldr.w	r2, [r9, #4]
 802029a:	fa27 fb8b 	sxtab16	fp, r7, fp
 802029e:	fa25 f484 	sxtab16	r4, r5, r4
 80202a2:	fa25 f181 	sxtab16	r1, r5, r1
 80202a6:	fb23 0001 	smlad	r0, r3, r1, r0
 80202aa:	fa25 f182 	sxtab16	r1, r5, r2
 80202ae:	fb2b 0404 	smlad	r4, fp, r4, r0
 80202b2:	ea4f 2232 	mov.w	r2, r2, ror #8
 80202b6:	68b0      	ldr	r0, [r6, #8]
 80202b8:	fa25 f282 	sxtab16	r2, r5, r2
 80202bc:	fb23 a301 	smlad	r3, r3, r1, sl
 80202c0:	fb2b 3202 	smlad	r2, fp, r2, r3
 80202c4:	f8dc a008 	ldr.w	sl, [ip, #8]
 80202c8:	ea4f 2330 	mov.w	r3, r0, ror #8
 80202cc:	f8d9 b008 	ldr.w	fp, [r9, #8]
 80202d0:	ea4f 213a 	mov.w	r1, sl, ror #8
 80202d4:	fa27 f98a 	sxtab16	r9, r7, sl
 80202d8:	fa27 f181 	sxtab16	r1, r7, r1
 80202dc:	fa25 f383 	sxtab16	r3, r5, r3
 80202e0:	fa25 f080 	sxtab16	r0, r5, r0
 80202e4:	fb29 4a00 	smlad	sl, r9, r0, r4
 80202e8:	fa25 f48b 	sxtab16	r4, r5, fp
 80202ec:	fb21 a303 	smlad	r3, r1, r3, sl
 80202f0:	ea4f 203b 	mov.w	r0, fp, ror #8
 80202f4:	3610      	adds	r6, #16
 80202f6:	f856 bc04 	ldr.w	fp, [r6, #-4]
 80202fa:	fa25 f080 	sxtab16	r0, r5, r0
 80202fe:	fb29 2204 	smlad	r2, r9, r4, r2
 8020302:	fb21 2000 	smlad	r0, r1, r0, r2
 8020306:	f8dc 100c 	ldr.w	r1, [ip, #12]
 802030a:	eb06 090e 	add.w	r9, r6, lr
 802030e:	ea4f 2a3b 	mov.w	sl, fp, ror #8
 8020312:	f10c 0c10 	add.w	ip, ip, #16
 8020316:	ea4f 2431 	mov.w	r4, r1, ror #8
 802031a:	f859 2c04 	ldr.w	r2, [r9, #-4]
 802031e:	fa27 f484 	sxtab16	r4, r7, r4
 8020322:	fa27 f181 	sxtab16	r1, r7, r1
 8020326:	fa25 fa8a 	sxtab16	sl, r5, sl
 802032a:	fa25 fb8b 	sxtab16	fp, r5, fp
 802032e:	fb21 330b 	smlad	r3, r1, fp, r3
 8020332:	fa25 fb82 	sxtab16	fp, r5, r2
 8020336:	fb24 3a0a 	smlad	sl, r4, sl, r3
 802033a:	ea4f 2232 	mov.w	r2, r2, ror #8
 802033e:	fa25 f282 	sxtab16	r2, r5, r2
 8020342:	fb21 030b 	smlad	r3, r1, fp, r0
 8020346:	fb24 3302 	smlad	r3, r4, r2, r3
 802034a:	4546      	cmp	r6, r8
 802034c:	f47f af7b 	bne.w	8020246 <arm_nn_vec_mat_mult_t_s8+0xb2>
 8020350:	46ab      	mov	fp, r5
 8020352:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020354:	9a06      	ldr	r2, [sp, #24]
 8020356:	4596      	cmp	lr, r2
 8020358:	f340 8133 	ble.w	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 802035c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 802035e:	1c54      	adds	r4, r2, #1
 8020360:	f991 0000 	ldrsb.w	r0, [r1]
 8020364:	f996 8000 	ldrsb.w	r8, [r6]
 8020368:	45a6      	cmp	lr, r4
 802036a:	4428      	add	r0, r5
 802036c:	f916 c00e 	ldrsb.w	ip, [r6, lr]
 8020370:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020372:	44a8      	add	r8, r5
 8020374:	44ac      	add	ip, r5
 8020376:	fb00 aa08 	mla	sl, r0, r8, sl
 802037a:	fb00 330c 	mla	r3, r0, ip, r3
 802037e:	f340 8120 	ble.w	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020382:	eb06 040e 	add.w	r4, r6, lr
 8020386:	f991 0001 	ldrsb.w	r0, [r1, #1]
 802038a:	f996 8001 	ldrsb.w	r8, [r6, #1]
 802038e:	f994 c001 	ldrsb.w	ip, [r4, #1]
 8020392:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020394:	44a8      	add	r8, r5
 8020396:	44ac      	add	ip, r5
 8020398:	4420      	add	r0, r4
 802039a:	1c94      	adds	r4, r2, #2
 802039c:	45a6      	cmp	lr, r4
 802039e:	fb00 aa08 	mla	sl, r0, r8, sl
 80203a2:	fb00 330c 	mla	r3, r0, ip, r3
 80203a6:	f106 0002 	add.w	r0, r6, #2
 80203aa:	f340 810a 	ble.w	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 80203ae:	f910 800e 	ldrsb.w	r8, [r0, lr]
 80203b2:	1cd4      	adds	r4, r2, #3
 80203b4:	f991 0002 	ldrsb.w	r0, [r1, #2]
 80203b8:	44a8      	add	r8, r5
 80203ba:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80203bc:	f996 c002 	ldrsb.w	ip, [r6, #2]
 80203c0:	45a6      	cmp	lr, r4
 80203c2:	4428      	add	r0, r5
 80203c4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80203c6:	44ac      	add	ip, r5
 80203c8:	fb00 3308 	mla	r3, r0, r8, r3
 80203cc:	fb00 aa0c 	mla	sl, r0, ip, sl
 80203d0:	f106 0003 	add.w	r0, r6, #3
 80203d4:	f340 80f5 	ble.w	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 80203d8:	f910 800e 	ldrsb.w	r8, [r0, lr]
 80203dc:	1d14      	adds	r4, r2, #4
 80203de:	f991 0003 	ldrsb.w	r0, [r1, #3]
 80203e2:	44a8      	add	r8, r5
 80203e4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80203e6:	f996 c003 	ldrsb.w	ip, [r6, #3]
 80203ea:	45a6      	cmp	lr, r4
 80203ec:	4428      	add	r0, r5
 80203ee:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80203f0:	44ac      	add	ip, r5
 80203f2:	fb00 3308 	mla	r3, r0, r8, r3
 80203f6:	fb00 aa0c 	mla	sl, r0, ip, sl
 80203fa:	f106 0004 	add.w	r0, r6, #4
 80203fe:	f340 80e0 	ble.w	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020402:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020406:	1d54      	adds	r4, r2, #5
 8020408:	f991 0004 	ldrsb.w	r0, [r1, #4]
 802040c:	44a8      	add	r8, r5
 802040e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020410:	f996 c004 	ldrsb.w	ip, [r6, #4]
 8020414:	45a6      	cmp	lr, r4
 8020416:	4428      	add	r0, r5
 8020418:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802041a:	44ac      	add	ip, r5
 802041c:	fb00 3308 	mla	r3, r0, r8, r3
 8020420:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020424:	f106 0005 	add.w	r0, r6, #5
 8020428:	f340 80cb 	ble.w	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 802042c:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020430:	1d94      	adds	r4, r2, #6
 8020432:	f991 0005 	ldrsb.w	r0, [r1, #5]
 8020436:	44a8      	add	r8, r5
 8020438:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 802043a:	f996 c005 	ldrsb.w	ip, [r6, #5]
 802043e:	45a6      	cmp	lr, r4
 8020440:	4428      	add	r0, r5
 8020442:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020444:	44ac      	add	ip, r5
 8020446:	fb00 3308 	mla	r3, r0, r8, r3
 802044a:	fb00 aa0c 	mla	sl, r0, ip, sl
 802044e:	f106 0006 	add.w	r0, r6, #6
 8020452:	f340 80b6 	ble.w	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020456:	f910 800e 	ldrsb.w	r8, [r0, lr]
 802045a:	1dd4      	adds	r4, r2, #7
 802045c:	f991 0006 	ldrsb.w	r0, [r1, #6]
 8020460:	44a8      	add	r8, r5
 8020462:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020464:	f996 c006 	ldrsb.w	ip, [r6, #6]
 8020468:	45a6      	cmp	lr, r4
 802046a:	4428      	add	r0, r5
 802046c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802046e:	44ac      	add	ip, r5
 8020470:	fb00 3308 	mla	r3, r0, r8, r3
 8020474:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020478:	f106 0007 	add.w	r0, r6, #7
 802047c:	f340 80a1 	ble.w	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020480:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020484:	f102 0408 	add.w	r4, r2, #8
 8020488:	f991 0007 	ldrsb.w	r0, [r1, #7]
 802048c:	44a8      	add	r8, r5
 802048e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020490:	f996 c007 	ldrsb.w	ip, [r6, #7]
 8020494:	45a6      	cmp	lr, r4
 8020496:	4428      	add	r0, r5
 8020498:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802049a:	44ac      	add	ip, r5
 802049c:	fb00 3308 	mla	r3, r0, r8, r3
 80204a0:	fb00 aa0c 	mla	sl, r0, ip, sl
 80204a4:	f106 0008 	add.w	r0, r6, #8
 80204a8:	f340 808b 	ble.w	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 80204ac:	f910 800e 	ldrsb.w	r8, [r0, lr]
 80204b0:	f102 0409 	add.w	r4, r2, #9
 80204b4:	f991 0008 	ldrsb.w	r0, [r1, #8]
 80204b8:	44a8      	add	r8, r5
 80204ba:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80204bc:	f996 c008 	ldrsb.w	ip, [r6, #8]
 80204c0:	45a6      	cmp	lr, r4
 80204c2:	4428      	add	r0, r5
 80204c4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80204c6:	44ac      	add	ip, r5
 80204c8:	fb00 3308 	mla	r3, r0, r8, r3
 80204cc:	fb00 aa0c 	mla	sl, r0, ip, sl
 80204d0:	f106 0009 	add.w	r0, r6, #9
 80204d4:	dd75      	ble.n	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 80204d6:	f910 800e 	ldrsb.w	r8, [r0, lr]
 80204da:	f102 040a 	add.w	r4, r2, #10
 80204de:	f991 0009 	ldrsb.w	r0, [r1, #9]
 80204e2:	44a8      	add	r8, r5
 80204e4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80204e6:	f996 c009 	ldrsb.w	ip, [r6, #9]
 80204ea:	45a6      	cmp	lr, r4
 80204ec:	4428      	add	r0, r5
 80204ee:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80204f0:	44ac      	add	ip, r5
 80204f2:	fb00 3308 	mla	r3, r0, r8, r3
 80204f6:	fb00 aa0c 	mla	sl, r0, ip, sl
 80204fa:	f106 000a 	add.w	r0, r6, #10
 80204fe:	dd60      	ble.n	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020500:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020504:	f102 040b 	add.w	r4, r2, #11
 8020508:	f991 000a 	ldrsb.w	r0, [r1, #10]
 802050c:	44a8      	add	r8, r5
 802050e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020510:	f996 c00a 	ldrsb.w	ip, [r6, #10]
 8020514:	45a6      	cmp	lr, r4
 8020516:	4428      	add	r0, r5
 8020518:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802051a:	44ac      	add	ip, r5
 802051c:	fb00 3308 	mla	r3, r0, r8, r3
 8020520:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020524:	f106 000b 	add.w	r0, r6, #11
 8020528:	dd4b      	ble.n	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 802052a:	f910 800e 	ldrsb.w	r8, [r0, lr]
 802052e:	f102 040c 	add.w	r4, r2, #12
 8020532:	f991 000b 	ldrsb.w	r0, [r1, #11]
 8020536:	44a8      	add	r8, r5
 8020538:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 802053a:	f996 c00b 	ldrsb.w	ip, [r6, #11]
 802053e:	45a6      	cmp	lr, r4
 8020540:	4428      	add	r0, r5
 8020542:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020544:	44ac      	add	ip, r5
 8020546:	fb00 3308 	mla	r3, r0, r8, r3
 802054a:	fb00 aa0c 	mla	sl, r0, ip, sl
 802054e:	f106 000c 	add.w	r0, r6, #12
 8020552:	dd36      	ble.n	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020554:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020558:	f102 040d 	add.w	r4, r2, #13
 802055c:	f991 000c 	ldrsb.w	r0, [r1, #12]
 8020560:	44a8      	add	r8, r5
 8020562:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020564:	f996 c00c 	ldrsb.w	ip, [r6, #12]
 8020568:	45a6      	cmp	lr, r4
 802056a:	4428      	add	r0, r5
 802056c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802056e:	44ac      	add	ip, r5
 8020570:	fb00 3308 	mla	r3, r0, r8, r3
 8020574:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020578:	f106 000d 	add.w	r0, r6, #13
 802057c:	dd21      	ble.n	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 802057e:	f910 c00e 	ldrsb.w	ip, [r0, lr]
 8020582:	320e      	adds	r2, #14
 8020584:	f991 000d 	ldrsb.w	r0, [r1, #13]
 8020588:	f106 080e 	add.w	r8, r6, #14
 802058c:	44ac      	add	ip, r5
 802058e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020590:	f996 400d 	ldrsb.w	r4, [r6, #13]
 8020594:	4596      	cmp	lr, r2
 8020596:	4428      	add	r0, r5
 8020598:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802059a:	442c      	add	r4, r5
 802059c:	fb00 330c 	mla	r3, r0, ip, r3
 80205a0:	fb00 aa04 	mla	sl, r0, r4, sl
 80205a4:	dd0d      	ble.n	80205c2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 80205a6:	f991 200e 	ldrsb.w	r2, [r1, #14]
 80205aa:	f918 000e 	ldrsb.w	r0, [r8, lr]
 80205ae:	f996 100e 	ldrsb.w	r1, [r6, #14]
 80205b2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80205b4:	4428      	add	r0, r5
 80205b6:	4429      	add	r1, r5
 80205b8:	4422      	add	r2, r4
 80205ba:	fb02 aa01 	mla	sl, r2, r1, sl
 80205be:	fb02 3300 	mla	r3, r2, r0, r3
 80205c2:	9a03      	ldr	r2, [sp, #12]
 80205c4:	fa0a fa02 	lsl.w	sl, sl, r2
 80205c8:	9a04      	ldr	r2, [sp, #16]
 80205ca:	ebb2 7fda 	cmp.w	r2, sl, lsr #31
 80205ce:	f000 8218 	beq.w	8020a02 <arm_nn_vec_mat_mult_t_s8+0x86e>
 80205d2:	48d6      	ldr	r0, [pc, #856]	; (802092c <arm_nn_vec_mat_mult_t_s8+0x798>)
 80205d4:	f04f 31ff 	mov.w	r1, #4294967295
 80205d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80205da:	4552      	cmp	r2, sl
 80205dc:	f040 81d2 	bne.w	8020984 <arm_nn_vec_mat_mult_t_s8+0x7f0>
 80205e0:	f1ba 4f00 	cmp.w	sl, #2147483648	; 0x80000000
 80205e4:	f040 81ce 	bne.w	8020984 <arm_nn_vec_mat_mult_t_s8+0x7f0>
 80205e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80205ea:	2a00      	cmp	r2, #0
 80205ec:	f340 81ff 	ble.w	80209ee <arm_nn_vec_mat_mult_t_s8+0x85a>
 80205f0:	2400      	movs	r4, #0
 80205f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80205f6:	4620      	mov	r0, r4
 80205f8:	4626      	mov	r6, r4
 80205fa:	9a03      	ldr	r2, [sp, #12]
 80205fc:	fa03 fc02 	lsl.w	ip, r3, r2
 8020600:	9b04      	ldr	r3, [sp, #16]
 8020602:	ebb3 7fdc 	cmp.w	r3, ip, lsr #31
 8020606:	f000 8200 	beq.w	8020a0a <arm_nn_vec_mat_mult_t_s8+0x876>
 802060a:	4ac8      	ldr	r2, [pc, #800]	; (802092c <arm_nn_vec_mat_mult_t_s8+0x798>)
 802060c:	f04f 33ff 	mov.w	r3, #4294967295
 8020610:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8020612:	4565      	cmp	r5, ip
 8020614:	f040 81d5 	bne.w	80209c2 <arm_nn_vec_mat_mult_t_s8+0x82e>
 8020618:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802061c:	f040 81d1 	bne.w	80209c2 <arm_nn_vec_mat_mult_t_s8+0x82e>
 8020620:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8020624:	4010      	ands	r0, r2
 8020626:	4122      	asrs	r2, r4
 8020628:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802062a:	bf48      	it	mi
 802062c:	3601      	addmi	r6, #1
 802062e:	4419      	add	r1, r3
 8020630:	42b0      	cmp	r0, r6
 8020632:	9808      	ldr	r0, [sp, #32]
 8020634:	bfc8      	it	gt
 8020636:	3201      	addgt	r2, #1
 8020638:	441a      	add	r2, r3
 802063a:	9b02      	ldr	r3, [sp, #8]
 802063c:	4403      	add	r3, r0
 802063e:	9302      	str	r3, [sp, #8]
 8020640:	9b01      	ldr	r3, [sp, #4]
 8020642:	3308      	adds	r3, #8
 8020644:	9301      	str	r3, [sp, #4]
 8020646:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020648:	4299      	cmp	r1, r3
 802064a:	bfb8      	it	lt
 802064c:	4619      	movlt	r1, r3
 802064e:	429a      	cmp	r2, r3
 8020650:	bfb8      	it	lt
 8020652:	461a      	movlt	r2, r3
 8020654:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020656:	4299      	cmp	r1, r3
 8020658:	bfa8      	it	ge
 802065a:	4619      	movge	r1, r3
 802065c:	429a      	cmp	r2, r3
 802065e:	bfa8      	it	ge
 8020660:	461a      	movge	r2, r3
 8020662:	9b05      	ldr	r3, [sp, #20]
 8020664:	f803 2c01 	strb.w	r2, [r3, #-1]
 8020668:	3302      	adds	r3, #2
 802066a:	f803 1c04 	strb.w	r1, [r3, #-4]
 802066e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020670:	9305      	str	r3, [sp, #20]
 8020672:	429a      	cmp	r2, r3
 8020674:	f47f add4 	bne.w	8020220 <arm_nn_vec_mat_mult_t_s8+0x8c>
 8020678:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802067a:	465d      	mov	r5, fp
 802067c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802067e:	085b      	lsrs	r3, r3, #1
 8020680:	9a08      	ldr	r2, [sp, #32]
 8020682:	3301      	adds	r3, #1
 8020684:	fb03 1202 	mla	r2, r3, r2, r1
 8020688:	920b      	str	r2, [sp, #44]	; 0x2c
 802068a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802068c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8020690:	920e      	str	r2, [sp, #56]	; 0x38
 8020692:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020694:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020698:	930f      	str	r3, [sp, #60]	; 0x3c
 802069a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802069c:	07db      	lsls	r3, r3, #31
 802069e:	f140 816d 	bpl.w	802097c <arm_nn_vec_mat_mult_t_s8+0x7e8>
 80206a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80206a4:	f1be 0f0f 	cmp.w	lr, #15
 80206a8:	681b      	ldr	r3, [r3, #0]
 80206aa:	f340 81ea 	ble.w	8020a82 <arm_nn_vec_mat_mult_t_s8+0x8ee>
 80206ae:	f1ae 0210 	sub.w	r2, lr, #16
 80206b2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80206b4:	0912      	lsrs	r2, r2, #4
 80206b6:	3201      	adds	r2, #1
 80206b8:	0111      	lsls	r1, r2, #4
 80206ba:	4692      	mov	sl, r2
 80206bc:	9a07      	ldr	r2, [sp, #28]
 80206be:	4689      	mov	r9, r1
 80206c0:	eb02 0c01 	add.w	ip, r2, r1
 80206c4:	6830      	ldr	r0, [r6, #0]
 80206c6:	6811      	ldr	r1, [r2, #0]
 80206c8:	ea4f 2830 	mov.w	r8, r0, ror #8
 80206cc:	fa25 f080 	sxtab16	r0, r5, r0
 80206d0:	fa25 f488 	sxtab16	r4, r5, r8
 80206d4:	ea4f 2831 	mov.w	r8, r1, ror #8
 80206d8:	fa27 f181 	sxtab16	r1, r7, r1
 80206dc:	fa27 f888 	sxtab16	r8, r7, r8
 80206e0:	fb21 3300 	smlad	r3, r1, r0, r3
 80206e4:	fb28 3804 	smlad	r8, r8, r4, r3
 80206e8:	6870      	ldr	r0, [r6, #4]
 80206ea:	6853      	ldr	r3, [r2, #4]
 80206ec:	ea4f 2430 	mov.w	r4, r0, ror #8
 80206f0:	ea4f 2133 	mov.w	r1, r3, ror #8
 80206f4:	fa25 f080 	sxtab16	r0, r5, r0
 80206f8:	fa25 f484 	sxtab16	r4, r5, r4
 80206fc:	fa27 f383 	sxtab16	r3, r7, r3
 8020700:	fa27 f181 	sxtab16	r1, r7, r1
 8020704:	fb23 8300 	smlad	r3, r3, r0, r8
 8020708:	fb21 3404 	smlad	r4, r1, r4, r3
 802070c:	68b0      	ldr	r0, [r6, #8]
 802070e:	6891      	ldr	r1, [r2, #8]
 8020710:	ea4f 2830 	mov.w	r8, r0, ror #8
 8020714:	ea4f 2331 	mov.w	r3, r1, ror #8
 8020718:	fa25 f080 	sxtab16	r0, r5, r0
 802071c:	fa25 f888 	sxtab16	r8, r5, r8
 8020720:	fa27 f181 	sxtab16	r1, r7, r1
 8020724:	fa27 f383 	sxtab16	r3, r7, r3
 8020728:	fb21 4100 	smlad	r1, r1, r0, r4
 802072c:	fb23 1108 	smlad	r1, r3, r8, r1
 8020730:	68f0      	ldr	r0, [r6, #12]
 8020732:	3210      	adds	r2, #16
 8020734:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8020738:	3610      	adds	r6, #16
 802073a:	ea4f 2830 	mov.w	r8, r0, ror #8
 802073e:	ea4f 2433 	mov.w	r4, r3, ror #8
 8020742:	fa25 f080 	sxtab16	r0, r5, r0
 8020746:	fa25 f888 	sxtab16	r8, r5, r8
 802074a:	fa27 f383 	sxtab16	r3, r7, r3
 802074e:	fa27 f484 	sxtab16	r4, r7, r4
 8020752:	fb23 1300 	smlad	r3, r3, r0, r1
 8020756:	fb24 3308 	smlad	r3, r4, r8, r3
 802075a:	4562      	cmp	r2, ip
 802075c:	d1b2      	bne.n	80206c4 <arm_nn_vec_mat_mult_t_s8+0x530>
 802075e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020760:	9207      	str	r2, [sp, #28]
 8020762:	4652      	mov	r2, sl
 8020764:	4449      	add	r1, r9
 8020766:	0112      	lsls	r2, r2, #4
 8020768:	910b      	str	r1, [sp, #44]	; 0x2c
 802076a:	4596      	cmp	lr, r2
 802076c:	f340 80e0 	ble.w	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 8020770:	9d07      	ldr	r5, [sp, #28]
 8020772:	1c51      	adds	r1, r2, #1
 8020774:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8020776:	f995 0000 	ldrsb.w	r0, [r5]
 802077a:	458e      	cmp	lr, r1
 802077c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802077e:	4438      	add	r0, r7
 8020780:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8020782:	f996 4000 	ldrsb.w	r4, [r6]
 8020786:	443c      	add	r4, r7
 8020788:	fb04 3300 	mla	r3, r4, r0, r3
 802078c:	f340 80d0 	ble.w	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 8020790:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8020792:	1c91      	adds	r1, r2, #2
 8020794:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8020798:	f996 4001 	ldrsb.w	r4, [r6, #1]
 802079c:	458e      	cmp	lr, r1
 802079e:	4438      	add	r0, r7
 80207a0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80207a2:	443c      	add	r4, r7
 80207a4:	fb04 3300 	mla	r3, r4, r0, r3
 80207a8:	f340 80c2 	ble.w	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 80207ac:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80207ae:	1cd1      	adds	r1, r2, #3
 80207b0:	f995 0002 	ldrsb.w	r0, [r5, #2]
 80207b4:	f996 4002 	ldrsb.w	r4, [r6, #2]
 80207b8:	458e      	cmp	lr, r1
 80207ba:	4438      	add	r0, r7
 80207bc:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80207be:	443c      	add	r4, r7
 80207c0:	fb04 3300 	mla	r3, r4, r0, r3
 80207c4:	f340 80b4 	ble.w	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 80207c8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80207ca:	1d11      	adds	r1, r2, #4
 80207cc:	f995 0003 	ldrsb.w	r0, [r5, #3]
 80207d0:	f996 4003 	ldrsb.w	r4, [r6, #3]
 80207d4:	458e      	cmp	lr, r1
 80207d6:	4438      	add	r0, r7
 80207d8:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80207da:	443c      	add	r4, r7
 80207dc:	fb04 3300 	mla	r3, r4, r0, r3
 80207e0:	f340 80a6 	ble.w	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 80207e4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80207e6:	1d51      	adds	r1, r2, #5
 80207e8:	f995 0004 	ldrsb.w	r0, [r5, #4]
 80207ec:	f996 4004 	ldrsb.w	r4, [r6, #4]
 80207f0:	458e      	cmp	lr, r1
 80207f2:	4438      	add	r0, r7
 80207f4:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80207f6:	443c      	add	r4, r7
 80207f8:	fb04 3300 	mla	r3, r4, r0, r3
 80207fc:	f340 8098 	ble.w	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 8020800:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8020802:	1d91      	adds	r1, r2, #6
 8020804:	f995 0005 	ldrsb.w	r0, [r5, #5]
 8020808:	f996 4005 	ldrsb.w	r4, [r6, #5]
 802080c:	458e      	cmp	lr, r1
 802080e:	4438      	add	r0, r7
 8020810:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8020812:	443c      	add	r4, r7
 8020814:	fb04 3300 	mla	r3, r4, r0, r3
 8020818:	f340 808a 	ble.w	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 802081c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 802081e:	1dd1      	adds	r1, r2, #7
 8020820:	f995 0006 	ldrsb.w	r0, [r5, #6]
 8020824:	f996 4006 	ldrsb.w	r4, [r6, #6]
 8020828:	458e      	cmp	lr, r1
 802082a:	4438      	add	r0, r7
 802082c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 802082e:	443c      	add	r4, r7
 8020830:	fb04 3300 	mla	r3, r4, r0, r3
 8020834:	dd7c      	ble.n	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 8020836:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8020838:	f102 0108 	add.w	r1, r2, #8
 802083c:	f995 0007 	ldrsb.w	r0, [r5, #7]
 8020840:	f996 4007 	ldrsb.w	r4, [r6, #7]
 8020844:	458e      	cmp	lr, r1
 8020846:	4438      	add	r0, r7
 8020848:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 802084a:	443c      	add	r4, r7
 802084c:	fb04 3300 	mla	r3, r4, r0, r3
 8020850:	dd6e      	ble.n	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 8020852:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8020854:	f102 0109 	add.w	r1, r2, #9
 8020858:	f995 0008 	ldrsb.w	r0, [r5, #8]
 802085c:	f996 4008 	ldrsb.w	r4, [r6, #8]
 8020860:	458e      	cmp	lr, r1
 8020862:	4438      	add	r0, r7
 8020864:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8020866:	443c      	add	r4, r7
 8020868:	fb04 3300 	mla	r3, r4, r0, r3
 802086c:	dd60      	ble.n	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 802086e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8020870:	f102 010a 	add.w	r1, r2, #10
 8020874:	f995 0009 	ldrsb.w	r0, [r5, #9]
 8020878:	f996 4009 	ldrsb.w	r4, [r6, #9]
 802087c:	458e      	cmp	lr, r1
 802087e:	4438      	add	r0, r7
 8020880:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8020882:	443c      	add	r4, r7
 8020884:	fb04 3300 	mla	r3, r4, r0, r3
 8020888:	dd52      	ble.n	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 802088a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 802088c:	f102 010b 	add.w	r1, r2, #11
 8020890:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8020894:	f996 400a 	ldrsb.w	r4, [r6, #10]
 8020898:	458e      	cmp	lr, r1
 802089a:	4438      	add	r0, r7
 802089c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 802089e:	443c      	add	r4, r7
 80208a0:	fb04 3300 	mla	r3, r4, r0, r3
 80208a4:	dd44      	ble.n	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 80208a6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80208a8:	f102 010c 	add.w	r1, r2, #12
 80208ac:	f995 000b 	ldrsb.w	r0, [r5, #11]
 80208b0:	f996 400b 	ldrsb.w	r4, [r6, #11]
 80208b4:	458e      	cmp	lr, r1
 80208b6:	4438      	add	r0, r7
 80208b8:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80208ba:	443c      	add	r4, r7
 80208bc:	fb04 3300 	mla	r3, r4, r0, r3
 80208c0:	dd36      	ble.n	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 80208c2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80208c4:	f102 010d 	add.w	r1, r2, #13
 80208c8:	f995 000c 	ldrsb.w	r0, [r5, #12]
 80208cc:	f996 400c 	ldrsb.w	r4, [r6, #12]
 80208d0:	458e      	cmp	lr, r1
 80208d2:	4438      	add	r0, r7
 80208d4:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80208d6:	443c      	add	r4, r7
 80208d8:	fb04 3300 	mla	r3, r4, r0, r3
 80208dc:	dd28      	ble.n	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 80208de:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80208e0:	f102 010e 	add.w	r1, r2, #14
 80208e4:	f995 000d 	ldrsb.w	r0, [r5, #13]
 80208e8:	f996 400d 	ldrsb.w	r4, [r6, #13]
 80208ec:	458e      	cmp	lr, r1
 80208ee:	4438      	add	r0, r7
 80208f0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80208f2:	443c      	add	r4, r7
 80208f4:	fb04 3300 	mla	r3, r4, r0, r3
 80208f8:	dd1a      	ble.n	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 80208fa:	f995 100e 	ldrsb.w	r1, [r5, #14]
 80208fe:	462c      	mov	r4, r5
 8020900:	f996 000e 	ldrsb.w	r0, [r6, #14]
 8020904:	320f      	adds	r2, #15
 8020906:	4635      	mov	r5, r6
 8020908:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 802090a:	4438      	add	r0, r7
 802090c:	4596      	cmp	lr, r2
 802090e:	4431      	add	r1, r6
 8020910:	fb00 3301 	mla	r3, r0, r1, r3
 8020914:	dd0c      	ble.n	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 8020916:	f995 200f 	ldrsb.w	r2, [r5, #15]
 802091a:	f994 100f 	ldrsb.w	r1, [r4, #15]
 802091e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8020920:	443a      	add	r2, r7
 8020922:	4401      	add	r1, r0
 8020924:	fb01 3302 	mla	r3, r1, r2, r3
 8020928:	e002      	b.n	8020930 <arm_nn_vec_mat_mult_t_s8+0x79c>
 802092a:	bf00      	nop
 802092c:	c0000001 	.word	0xc0000001
 8020930:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020932:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
 8020936:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8020938:	fa03 f101 	lsl.w	r1, r3, r1
 802093c:	0fd2      	lsrs	r2, r2, #31
 802093e:	ebb2 7fd1 	cmp.w	r2, r1, lsr #31
 8020942:	f000 80a0 	beq.w	8020a86 <arm_nn_vec_mat_mult_t_s8+0x8f2>
 8020946:	4a52      	ldr	r2, [pc, #328]	; (8020a90 <arm_nn_vec_mat_mult_t_s8+0x8fc>)
 8020948:	f04f 33ff 	mov.w	r3, #4294967295
 802094c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802094e:	4288      	cmp	r0, r1
 8020950:	d16b      	bne.n	8020a2a <arm_nn_vec_mat_mult_t_s8+0x896>
 8020952:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8020956:	d168      	bne.n	8020a2a <arm_nn_vec_mat_mult_t_s8+0x896>
 8020958:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802095a:	2b00      	cmp	r3, #0
 802095c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8020960:	f340 808d 	ble.w	8020a7e <arm_nn_vec_mat_mult_t_s8+0x8ea>
 8020964:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020966:	4413      	add	r3, r2
 8020968:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802096a:	4293      	cmp	r3, r2
 802096c:	bfb8      	it	lt
 802096e:	4613      	movlt	r3, r2
 8020970:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020972:	4293      	cmp	r3, r2
 8020974:	bfa8      	it	ge
 8020976:	4613      	movge	r3, r2
 8020978:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802097a:	7013      	strb	r3, [r2, #0]
 802097c:	2000      	movs	r0, #0
 802097e:	b013      	add	sp, #76	; 0x4c
 8020980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020984:	fbc2 010a 	smlal	r0, r1, r2, sl
 8020988:	2800      	cmp	r0, #0
 802098a:	f171 0200 	sbcs.w	r2, r1, #0
 802098e:	da06      	bge.n	802099e <arm_nn_vec_mat_mult_t_s8+0x80a>
 8020990:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8020994:	2500      	movs	r5, #0
 8020996:	1824      	adds	r4, r4, r0
 8020998:	414d      	adcs	r5, r1
 802099a:	4620      	mov	r0, r4
 802099c:	4629      	mov	r1, r5
 802099e:	0fc2      	lsrs	r2, r0, #31
 80209a0:	ea42 0141 	orr.w	r1, r2, r1, lsl #1
 80209a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80209a6:	2a00      	cmp	r2, #0
 80209a8:	dd23      	ble.n	80209f2 <arm_nn_vec_mat_mult_t_s8+0x85e>
 80209aa:	2900      	cmp	r1, #0
 80209ac:	da35      	bge.n	8020a1a <arm_nn_vec_mat_mult_t_s8+0x886>
 80209ae:	2600      	movs	r6, #0
 80209b0:	4632      	mov	r2, r6
 80209b2:	4630      	mov	r0, r6
 80209b4:	4634      	mov	r4, r6
 80209b6:	f106 0c01 	add.w	ip, r6, #1
 80209ba:	4594      	cmp	ip, r2
 80209bc:	bfb8      	it	lt
 80209be:	3101      	addlt	r1, #1
 80209c0:	e61b      	b.n	80205fa <arm_nn_vec_mat_mult_t_s8+0x466>
 80209c2:	fbc5 230c 	smlal	r2, r3, r5, ip
 80209c6:	4699      	mov	r9, r3
 80209c8:	2a00      	cmp	r2, #0
 80209ca:	4690      	mov	r8, r2
 80209cc:	f179 0300 	sbcs.w	r3, r9, #0
 80209d0:	da08      	bge.n	80209e4 <arm_nn_vec_mat_mult_t_s8+0x850>
 80209d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80209d6:	2300      	movs	r3, #0
 80209d8:	eb12 0208 	adds.w	r2, r2, r8
 80209dc:	eb43 0309 	adc.w	r3, r3, r9
 80209e0:	4690      	mov	r8, r2
 80209e2:	4699      	mov	r9, r3
 80209e4:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 80209e8:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
 80209ec:	e61a      	b.n	8020624 <arm_nn_vec_mat_mult_t_s8+0x490>
 80209ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80209f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80209f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80209f6:	ea01 0200 	and.w	r2, r1, r0
 80209fa:	4121      	asrs	r1, r4
 80209fc:	d509      	bpl.n	8020a12 <arm_nn_vec_mat_mult_t_s8+0x87e>
 80209fe:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020a00:	e7d9      	b.n	80209b6 <arm_nn_vec_mat_mult_t_s8+0x822>
 8020a02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8020a06:	2100      	movs	r1, #0
 8020a08:	e5e6      	b.n	80205d8 <arm_nn_vec_mat_mult_t_s8+0x444>
 8020a0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8020a0e:	2300      	movs	r3, #0
 8020a10:	e5fe      	b.n	8020610 <arm_nn_vec_mat_mult_t_s8+0x47c>
 8020a12:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8020a16:	4666      	mov	r6, ip
 8020a18:	e7cf      	b.n	80209ba <arm_nn_vec_mat_mult_t_s8+0x826>
 8020a1a:	2400      	movs	r4, #0
 8020a1c:	4620      	mov	r0, r4
 8020a1e:	4626      	mov	r6, r4
 8020a20:	e5eb      	b.n	80205fa <arm_nn_vec_mat_mult_t_s8+0x466>
 8020a22:	9e02      	ldr	r6, [sp, #8]
 8020a24:	2200      	movs	r2, #0
 8020a26:	9907      	ldr	r1, [sp, #28]
 8020a28:	e495      	b.n	8020356 <arm_nn_vec_mat_mult_t_s8+0x1c2>
 8020a2a:	fbc0 2301 	smlal	r2, r3, r0, r1
 8020a2e:	461d      	mov	r5, r3
 8020a30:	2a00      	cmp	r2, #0
 8020a32:	4614      	mov	r4, r2
 8020a34:	f175 0300 	sbcs.w	r3, r5, #0
 8020a38:	db14      	blt.n	8020a64 <arm_nn_vec_mat_mult_t_s8+0x8d0>
 8020a3a:	0fe2      	lsrs	r2, r4, #31
 8020a3c:	ea42 0345 	orr.w	r3, r2, r5, lsl #1
 8020a40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020a42:	2a00      	cmp	r2, #0
 8020a44:	dc8e      	bgt.n	8020964 <arm_nn_vec_mat_mult_t_s8+0x7d0>
 8020a46:	4251      	negs	r1, r2
 8020a48:	2201      	movs	r2, #1
 8020a4a:	408a      	lsls	r2, r1
 8020a4c:	3a01      	subs	r2, #1
 8020a4e:	ea02 0003 	and.w	r0, r2, r3
 8020a52:	410b      	asrs	r3, r1
 8020a54:	ea4f 0262 	mov.w	r2, r2, asr #1
 8020a58:	bf48      	it	mi
 8020a5a:	3201      	addmi	r2, #1
 8020a5c:	4290      	cmp	r0, r2
 8020a5e:	bfc8      	it	gt
 8020a60:	3301      	addgt	r3, #1
 8020a62:	e77f      	b.n	8020964 <arm_nn_vec_mat_mult_t_s8+0x7d0>
 8020a64:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8020a68:	2100      	movs	r1, #0
 8020a6a:	1824      	adds	r4, r4, r0
 8020a6c:	414d      	adcs	r5, r1
 8020a6e:	0fe2      	lsrs	r2, r4, #31
 8020a70:	ea42 0345 	orr.w	r3, r2, r5, lsl #1
 8020a74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020a76:	2a00      	cmp	r2, #0
 8020a78:	f73f af74 	bgt.w	8020964 <arm_nn_vec_mat_mult_t_s8+0x7d0>
 8020a7c:	e7e3      	b.n	8020a46 <arm_nn_vec_mat_mult_t_s8+0x8b2>
 8020a7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020a80:	e7e1      	b.n	8020a46 <arm_nn_vec_mat_mult_t_s8+0x8b2>
 8020a82:	2200      	movs	r2, #0
 8020a84:	e671      	b.n	802076a <arm_nn_vec_mat_mult_t_s8+0x5d6>
 8020a86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8020a8a:	2300      	movs	r3, #0
 8020a8c:	e75e      	b.n	802094c <arm_nn_vec_mat_mult_t_s8+0x7b8>
 8020a8e:	bf00      	nop
 8020a90:	c0000001 	.word	0xc0000001

08020a94 <arm_float_to_q15>:
 8020a94:	b4f0      	push	{r4, r5, r6, r7}
 8020a96:	0897      	lsrs	r7, r2, #2
 8020a98:	d06b      	beq.n	8020b72 <arm_float_to_q15+0xde>
 8020a9a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8020a9e:	f100 0510 	add.w	r5, r0, #16
 8020aa2:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8020aa6:	f101 0408 	add.w	r4, r1, #8
 8020aaa:	463e      	mov	r6, r7
 8020aac:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8020c04 <arm_float_to_q15+0x170>
 8020ab0:	e00b      	b.n	8020aca <arm_float_to_q15+0x36>
 8020ab2:	ee17 3a10 	vmov	r3, s14
 8020ab6:	f303 030f 	ssat	r3, #16, r3
 8020aba:	3e01      	subs	r6, #1
 8020abc:	f824 3c02 	strh.w	r3, [r4, #-2]
 8020ac0:	f105 0510 	add.w	r5, r5, #16
 8020ac4:	f104 0408 	add.w	r4, r4, #8
 8020ac8:	d04f      	beq.n	8020b6a <arm_float_to_q15+0xd6>
 8020aca:	ed55 7a04 	vldr	s15, [r5, #-16]
 8020ace:	ee27 7a86 	vmul.f32	s14, s15, s12
 8020ad2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8020ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ada:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8020ade:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020ae6:	ee17 3a90 	vmov	r3, s15
 8020aea:	f303 030f 	ssat	r3, #16, r3
 8020aee:	f824 3c08 	strh.w	r3, [r4, #-8]
 8020af2:	ed55 7a03 	vldr	s15, [r5, #-12]
 8020af6:	ee27 7a86 	vmul.f32	s14, s15, s12
 8020afa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8020afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b02:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8020b06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020b0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020b0e:	ee17 3a90 	vmov	r3, s15
 8020b12:	f303 030f 	ssat	r3, #16, r3
 8020b16:	f824 3c06 	strh.w	r3, [r4, #-6]
 8020b1a:	ed55 7a02 	vldr	s15, [r5, #-8]
 8020b1e:	ee27 7a86 	vmul.f32	s14, s15, s12
 8020b22:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8020b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b2a:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8020b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020b32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020b36:	ee17 3a90 	vmov	r3, s15
 8020b3a:	f303 030f 	ssat	r3, #16, r3
 8020b3e:	f824 3c04 	strh.w	r3, [r4, #-4]
 8020b42:	ed55 7a01 	vldr	s15, [r5, #-4]
 8020b46:	ee67 7a86 	vmul.f32	s15, s15, s12
 8020b4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020b4e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8020b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b56:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8020b5a:	dcaa      	bgt.n	8020ab2 <arm_float_to_q15+0x1e>
 8020b5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8020b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020b64:	ee17 3a90 	vmov	r3, s15
 8020b68:	e7a5      	b.n	8020ab6 <arm_float_to_q15+0x22>
 8020b6a:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8020b6e:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8020b72:	f012 0203 	ands.w	r2, r2, #3
 8020b76:	d042      	beq.n	8020bfe <arm_float_to_q15+0x16a>
 8020b78:	edd0 7a00 	vldr	s15, [r0]
 8020b7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8020b80:	eddf 5a20 	vldr	s11, [pc, #128]	; 8020c04 <arm_float_to_q15+0x170>
 8020b84:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8020b88:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8020b8c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8020b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b94:	fe77 7a06 	vselgt.f32	s15, s14, s12
 8020b98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020ba0:	ee17 3a90 	vmov	r3, s15
 8020ba4:	f303 030f 	ssat	r3, #16, r3
 8020ba8:	2a01      	cmp	r2, #1
 8020baa:	800b      	strh	r3, [r1, #0]
 8020bac:	d027      	beq.n	8020bfe <arm_float_to_q15+0x16a>
 8020bae:	edd0 7a01 	vldr	s15, [r0, #4]
 8020bb2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8020bb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bbe:	fe77 6a06 	vselgt.f32	s13, s14, s12
 8020bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020bca:	ee17 3a90 	vmov	r3, s15
 8020bce:	f303 030f 	ssat	r3, #16, r3
 8020bd2:	2a02      	cmp	r2, #2
 8020bd4:	804b      	strh	r3, [r1, #2]
 8020bd6:	d012      	beq.n	8020bfe <arm_float_to_q15+0x16a>
 8020bd8:	edd0 7a02 	vldr	s15, [r0, #8]
 8020bdc:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8020be0:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8020be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020be8:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8020bec:	ee37 7a25 	vadd.f32	s14, s14, s11
 8020bf0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8020bf4:	ee17 3a10 	vmov	r3, s14
 8020bf8:	f303 030f 	ssat	r3, #16, r3
 8020bfc:	808b      	strh	r3, [r1, #4]
 8020bfe:	bcf0      	pop	{r4, r5, r6, r7}
 8020c00:	4770      	bx	lr
 8020c02:	bf00      	nop
 8020c04:	47000000 	.word	0x47000000

08020c08 <arm_float_to_q7>:
 8020c08:	b4f0      	push	{r4, r5, r6, r7}
 8020c0a:	0897      	lsrs	r7, r2, #2
 8020c0c:	d066      	beq.n	8020cdc <arm_float_to_q7+0xd4>
 8020c0e:	1d0c      	adds	r4, r1, #4
 8020c10:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8020c14:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8020c18:	f100 0510 	add.w	r5, r0, #16
 8020c1c:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8020c20:	eb04 060c 	add.w	r6, r4, ip
 8020c24:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8020d94 <arm_float_to_q7+0x18c>
 8020c28:	ed55 7a04 	vldr	s15, [r5, #-16]
 8020c2c:	ee27 7a86 	vmul.f32	s14, s15, s12
 8020c30:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8020c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c38:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8020c3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020c44:	ee17 3a90 	vmov	r3, s15
 8020c48:	b21b      	sxth	r3, r3
 8020c4a:	f303 0307 	ssat	r3, #8, r3
 8020c4e:	f804 3c04 	strb.w	r3, [r4, #-4]
 8020c52:	ed55 7a03 	vldr	s15, [r5, #-12]
 8020c56:	ee27 7a86 	vmul.f32	s14, s15, s12
 8020c5a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8020c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c62:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8020c66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020c6e:	ee17 3a90 	vmov	r3, s15
 8020c72:	b21b      	sxth	r3, r3
 8020c74:	f303 0307 	ssat	r3, #8, r3
 8020c78:	f804 3c03 	strb.w	r3, [r4, #-3]
 8020c7c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8020c80:	ee27 7a86 	vmul.f32	s14, s15, s12
 8020c84:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8020c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c8c:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8020c90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020c94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020c98:	ee17 3a90 	vmov	r3, s15
 8020c9c:	b21b      	sxth	r3, r3
 8020c9e:	f303 0307 	ssat	r3, #8, r3
 8020ca2:	f804 3c02 	strb.w	r3, [r4, #-2]
 8020ca6:	ed55 7a01 	vldr	s15, [r5, #-4]
 8020caa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8020cae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8020cb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020cb6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8020cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cbe:	ee17 3a10 	vmov	r3, s14
 8020cc2:	b21b      	sxth	r3, r3
 8020cc4:	dd55      	ble.n	8020d72 <arm_float_to_q7+0x16a>
 8020cc6:	f303 0307 	ssat	r3, #8, r3
 8020cca:	f804 3c01 	strb.w	r3, [r4, #-1]
 8020cce:	3404      	adds	r4, #4
 8020cd0:	3510      	adds	r5, #16
 8020cd2:	42a6      	cmp	r6, r4
 8020cd4:	d1a8      	bne.n	8020c28 <arm_float_to_q7+0x20>
 8020cd6:	4461      	add	r1, ip
 8020cd8:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8020cdc:	f012 0203 	ands.w	r2, r2, #3
 8020ce0:	d045      	beq.n	8020d6e <arm_float_to_q7+0x166>
 8020ce2:	edd0 7a00 	vldr	s15, [r0]
 8020ce6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8020cea:	ed9f 5a2a 	vldr	s10, [pc, #168]	; 8020d94 <arm_float_to_q7+0x18c>
 8020cee:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8020cf2:	ee67 6a85 	vmul.f32	s13, s15, s10
 8020cf6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8020cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cfe:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8020d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8020d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020d0a:	ee17 3a90 	vmov	r3, s15
 8020d0e:	b21b      	sxth	r3, r3
 8020d10:	f303 0307 	ssat	r3, #8, r3
 8020d14:	2a01      	cmp	r2, #1
 8020d16:	700b      	strb	r3, [r1, #0]
 8020d18:	d029      	beq.n	8020d6e <arm_float_to_q7+0x166>
 8020d1a:	edd0 6a01 	vldr	s13, [r0, #4]
 8020d1e:	ee26 6a85 	vmul.f32	s12, s13, s10
 8020d22:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8020d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d2a:	fe77 6a25 	vselgt.f32	s13, s14, s11
 8020d2e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8020d32:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8020d36:	ee16 3a90 	vmov	r3, s13
 8020d3a:	b21b      	sxth	r3, r3
 8020d3c:	f303 0307 	ssat	r3, #8, r3
 8020d40:	2a02      	cmp	r2, #2
 8020d42:	704b      	strb	r3, [r1, #1]
 8020d44:	d013      	beq.n	8020d6e <arm_float_to_q7+0x166>
 8020d46:	edd0 7a02 	vldr	s15, [r0, #8]
 8020d4a:	ee27 5a85 	vmul.f32	s10, s15, s10
 8020d4e:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8020d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d56:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8020d5a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8020d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020d62:	ee17 3a90 	vmov	r3, s15
 8020d66:	b21b      	sxth	r3, r3
 8020d68:	f303 0307 	ssat	r3, #8, r3
 8020d6c:	708b      	strb	r3, [r1, #2]
 8020d6e:	bcf0      	pop	{r4, r5, r6, r7}
 8020d70:	4770      	bx	lr
 8020d72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8020d76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020d7a:	ee17 3a90 	vmov	r3, s15
 8020d7e:	b21b      	sxth	r3, r3
 8020d80:	f303 0307 	ssat	r3, #8, r3
 8020d84:	f804 3c01 	strb.w	r3, [r4, #-1]
 8020d88:	3404      	adds	r4, #4
 8020d8a:	3510      	adds	r5, #16
 8020d8c:	42b4      	cmp	r4, r6
 8020d8e:	f47f af4b 	bne.w	8020c28 <arm_float_to_q7+0x20>
 8020d92:	e7a0      	b.n	8020cd6 <arm_float_to_q7+0xce>
 8020d94:	43000000 	.word	0x43000000

08020d98 <arm_q15_to_float>:
 8020d98:	b470      	push	{r4, r5, r6}
 8020d9a:	0896      	lsrs	r6, r2, #2
 8020d9c:	d038      	beq.n	8020e10 <arm_q15_to_float+0x78>
 8020d9e:	f100 0408 	add.w	r4, r0, #8
 8020da2:	f101 0310 	add.w	r3, r1, #16
 8020da6:	4635      	mov	r5, r6
 8020da8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8020e64 <arm_q15_to_float+0xcc>
 8020dac:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 8020db0:	3d01      	subs	r5, #1
 8020db2:	f104 0408 	add.w	r4, r4, #8
 8020db6:	f103 0310 	add.w	r3, r3, #16
 8020dba:	ee07 ca90 	vmov	s15, ip
 8020dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020dc6:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8020dca:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 8020dce:	ee07 ca90 	vmov	s15, ip
 8020dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020dda:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8020dde:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 8020de2:	ee07 ca90 	vmov	s15, ip
 8020de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020dea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020dee:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8020df2:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 8020df6:	ee07 ca90 	vmov	s15, ip
 8020dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020e02:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8020e06:	d1d1      	bne.n	8020dac <arm_q15_to_float+0x14>
 8020e08:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8020e0c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8020e10:	f012 0203 	ands.w	r2, r2, #3
 8020e14:	d023      	beq.n	8020e5e <arm_q15_to_float+0xc6>
 8020e16:	f9b0 3000 	ldrsh.w	r3, [r0]
 8020e1a:	2a01      	cmp	r2, #1
 8020e1c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8020e64 <arm_q15_to_float+0xcc>
 8020e20:	ee07 3a90 	vmov	s15, r3
 8020e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020e2c:	edc1 7a00 	vstr	s15, [r1]
 8020e30:	d015      	beq.n	8020e5e <arm_q15_to_float+0xc6>
 8020e32:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8020e36:	2a02      	cmp	r2, #2
 8020e38:	ee07 3a90 	vmov	s15, r3
 8020e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020e44:	edc1 7a01 	vstr	s15, [r1, #4]
 8020e48:	d009      	beq.n	8020e5e <arm_q15_to_float+0xc6>
 8020e4a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8020e4e:	ee07 3a90 	vmov	s15, r3
 8020e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020e5a:	edc1 7a02 	vstr	s15, [r1, #8]
 8020e5e:	bc70      	pop	{r4, r5, r6}
 8020e60:	4770      	bx	lr
 8020e62:	bf00      	nop
 8020e64:	38000000 	.word	0x38000000

08020e68 <arm_q7_to_float>:
 8020e68:	b470      	push	{r4, r5, r6}
 8020e6a:	0895      	lsrs	r5, r2, #2
 8020e6c:	d036      	beq.n	8020edc <arm_q7_to_float+0x74>
 8020e6e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 8020e72:	f101 0310 	add.w	r3, r1, #16
 8020e76:	3004      	adds	r0, #4
 8020e78:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8020f30 <arm_q7_to_float+0xc8>
 8020e7c:	1d34      	adds	r4, r6, #4
 8020e7e:	f910 cc04 	ldrsb.w	ip, [r0, #-4]
 8020e82:	3004      	adds	r0, #4
 8020e84:	3310      	adds	r3, #16
 8020e86:	ee07 ca90 	vmov	s15, ip
 8020e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020e92:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8020e96:	f910 cc07 	ldrsb.w	ip, [r0, #-7]
 8020e9a:	ee07 ca90 	vmov	s15, ip
 8020e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020ea6:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8020eaa:	f910 cc06 	ldrsb.w	ip, [r0, #-6]
 8020eae:	ee07 ca90 	vmov	s15, ip
 8020eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020eba:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8020ebe:	f910 cc05 	ldrsb.w	ip, [r0, #-5]
 8020ec2:	42a0      	cmp	r0, r4
 8020ec4:	ee07 ca90 	vmov	s15, ip
 8020ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020ed0:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8020ed4:	d1d3      	bne.n	8020e7e <arm_q7_to_float+0x16>
 8020ed6:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8020eda:	4630      	mov	r0, r6
 8020edc:	f012 0203 	ands.w	r2, r2, #3
 8020ee0:	d023      	beq.n	8020f2a <arm_q7_to_float+0xc2>
 8020ee2:	f990 3000 	ldrsb.w	r3, [r0]
 8020ee6:	2a01      	cmp	r2, #1
 8020ee8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8020f30 <arm_q7_to_float+0xc8>
 8020eec:	ee07 3a90 	vmov	s15, r3
 8020ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020ef8:	edc1 7a00 	vstr	s15, [r1]
 8020efc:	d015      	beq.n	8020f2a <arm_q7_to_float+0xc2>
 8020efe:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8020f02:	2a02      	cmp	r2, #2
 8020f04:	ee07 3a90 	vmov	s15, r3
 8020f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020f0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020f10:	edc1 7a01 	vstr	s15, [r1, #4]
 8020f14:	d009      	beq.n	8020f2a <arm_q7_to_float+0xc2>
 8020f16:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8020f1a:	ee07 3a90 	vmov	s15, r3
 8020f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020f26:	edc1 7a02 	vstr	s15, [r1, #8]
 8020f2a:	bc70      	pop	{r4, r5, r6}
 8020f2c:	4770      	bx	lr
 8020f2e:	bf00      	nop
 8020f30:	3c000000 	.word	0x3c000000

08020f34 <align_factor_cmsisnn>:
 8020f34:	2900      	cmp	r1, #0
 8020f36:	d068      	beq.n	802100a <align_factor_cmsisnn+0xd6>
 8020f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020f3c:	ed2d 8b04 	vpush	{d8-d9}
 8020f40:	ee80 9a20 	vdiv.f32	s18, s0, s1
 8020f44:	461e      	mov	r6, r3
 8020f46:	4615      	mov	r5, r2
 8020f48:	4682      	mov	sl, r0
 8020f4a:	008c      	lsls	r4, r1, #2
 8020f4c:	f04f 0900 	mov.w	r9, #0
 8020f50:	eddf 9a2e 	vldr	s19, [pc, #184]	; 802100c <align_factor_cmsisnn+0xd8>
 8020f54:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8020f58:	f06f 0816 	mvn.w	r8, #22
 8020f5c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8020f60:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8020f64:	edda 7a00 	vldr	s15, [sl]
 8020f68:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020f6c:	eef4 7ae8 	vcmpe.f32	s15, s17
 8020f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f74:	d429      	bmi.n	8020fca <align_factor_cmsisnn+0x96>
 8020f76:	dd46      	ble.n	8021006 <align_factor_cmsisnn+0xd2>
 8020f78:	ee67 7a88 	vmul.f32	s15, s15, s16
 8020f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8020f80:	e005      	b.n	8020f8e <align_factor_cmsisnn+0x5a>
 8020f82:	3901      	subs	r1, #1
 8020f84:	ee67 7a88 	vmul.f32	s15, s15, s16
 8020f88:	f111 0f1f 	cmn.w	r1, #31
 8020f8c:	d031      	beq.n	8020ff2 <align_factor_cmsisnn+0xbe>
 8020f8e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8020f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f96:	dcf4      	bgt.n	8020f82 <align_factor_cmsisnn+0x4e>
 8020f98:	4249      	negs	r1, r1
 8020f9a:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8020f9e:	f846 1009 	str.w	r1, [r6, r9]
 8020fa2:	ee17 0a90 	vmov	r0, s15
 8020fa6:	f7df fa1b 	bl	80003e0 <__aeabi_f2lz>
 8020faa:	eb05 0309 	add.w	r3, r5, r9
 8020fae:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8020fb2:	bf18      	it	ne
 8020fb4:	ea87 70e1 	eorne.w	r0, r7, r1, asr #31
 8020fb8:	f109 0904 	add.w	r9, r9, #4
 8020fbc:	6018      	str	r0, [r3, #0]
 8020fbe:	454c      	cmp	r4, r9
 8020fc0:	d1d0      	bne.n	8020f64 <align_factor_cmsisnn+0x30>
 8020fc2:	ecbd 8b04 	vpop	{d8-d9}
 8020fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020fca:	eef4 7ac8 	vcmpe.f32	s15, s16
 8020fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020fd2:	d518      	bpl.n	8021006 <align_factor_cmsisnn+0xd2>
 8020fd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8020fd8:	2101      	movs	r1, #1
 8020fda:	e004      	b.n	8020fe6 <align_factor_cmsisnn+0xb2>
 8020fdc:	3101      	adds	r1, #1
 8020fde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8020fe2:	2918      	cmp	r1, #24
 8020fe4:	d009      	beq.n	8020ffa <align_factor_cmsisnn+0xc6>
 8020fe6:	eef4 7ac8 	vcmpe.f32	s15, s16
 8020fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020fee:	d4f5      	bmi.n	8020fdc <align_factor_cmsisnn+0xa8>
 8020ff0:	e7d2      	b.n	8020f98 <align_factor_cmsisnn+0x64>
 8020ff2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8020ff6:	211e      	movs	r1, #30
 8020ff8:	e7cf      	b.n	8020f9a <align_factor_cmsisnn+0x66>
 8020ffa:	f846 8009 	str.w	r8, [r6, r9]
 8020ffe:	eb05 0309 	add.w	r3, r5, r9
 8021002:	2000      	movs	r0, #0
 8021004:	e7d8      	b.n	8020fb8 <align_factor_cmsisnn+0x84>
 8021006:	2100      	movs	r1, #0
 8021008:	e7c7      	b.n	8020f9a <align_factor_cmsisnn+0x66>
 802100a:	4770      	bx	lr
 802100c:	4f000000 	.word	0x4f000000

08021010 <align_factor_ch>:
 8021010:	2900      	cmp	r1, #0
 8021012:	d06d      	beq.n	80210f0 <align_factor_ch+0xe0>
 8021014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021018:	ed2d 8b04 	vpush	{d8-d9}
 802101c:	ee80 9a20 	vdiv.f32	s18, s0, s1
 8021020:	4604      	mov	r4, r0
 8021022:	4690      	mov	r8, r2
 8021024:	461d      	mov	r5, r3
 8021026:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 802102a:	eddf 9a32 	vldr	s19, [pc, #200]	; 80210f4 <align_factor_ch+0xe4>
 802102e:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8021032:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8021036:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 802103a:	ecf4 7a01 	vldmia	r4!, {s15}
 802103e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021042:	eef4 7a68 	vcmp.f32	s15, s17
 8021046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802104a:	d52f      	bpl.n	80210ac <align_factor_ch+0x9c>
 802104c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8021050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021054:	dd2a      	ble.n	80210ac <align_factor_ch+0x9c>
 8021056:	eef4 7ac8 	vcmpe.f32	s15, s16
 802105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802105e:	d545      	bpl.n	80210ec <align_factor_ch+0xdc>
 8021060:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8021064:	2301      	movs	r3, #1
 8021066:	e004      	b.n	8021072 <align_factor_ch+0x62>
 8021068:	2a18      	cmp	r2, #24
 802106a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 802106e:	b213      	sxth	r3, r2
 8021070:	d033      	beq.n	80210da <align_factor_ch+0xca>
 8021072:	eef4 7ac8 	vcmpe.f32	s15, s16
 8021076:	1c5a      	adds	r2, r3, #1
 8021078:	b292      	uxth	r2, r2
 802107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802107e:	d4f3      	bmi.n	8021068 <align_factor_ch+0x58>
 8021080:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8021084:	802b      	strh	r3, [r5, #0]
 8021086:	ee17 0a90 	vmov	r0, s15
 802108a:	f7df f9a9 	bl	80003e0 <__aeabi_f2lz>
 802108e:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8021092:	bf18      	it	ne
 8021094:	ea87 70e1 	eorne.w	r0, r7, r1, asr #31
 8021098:	42a6      	cmp	r6, r4
 802109a:	f848 0b04 	str.w	r0, [r8], #4
 802109e:	f105 0502 	add.w	r5, r5, #2
 80210a2:	d1ca      	bne.n	802103a <align_factor_ch+0x2a>
 80210a4:	ecbd 8b04 	vpop	{d8-d9}
 80210a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210ac:	eef4 7ae8 	vcmpe.f32	s15, s17
 80210b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210b4:	dd1a      	ble.n	80210ec <align_factor_ch+0xdc>
 80210b6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80210ba:	f04f 33ff 	mov.w	r3, #4294967295
 80210be:	e005      	b.n	80210cc <align_factor_ch+0xbc>
 80210c0:	b213      	sxth	r3, r2
 80210c2:	ee67 7a88 	vmul.f32	s15, s15, s16
 80210c6:	f113 0f1f 	cmn.w	r3, #31
 80210ca:	d00a      	beq.n	80210e2 <align_factor_ch+0xd2>
 80210cc:	eef4 7ae8 	vcmpe.f32	s15, s17
 80210d0:	1e5a      	subs	r2, r3, #1
 80210d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210d6:	dcf3      	bgt.n	80210c0 <align_factor_ch+0xb0>
 80210d8:	e7d2      	b.n	8021080 <align_factor_ch+0x70>
 80210da:	2317      	movs	r3, #23
 80210dc:	2000      	movs	r0, #0
 80210de:	802b      	strh	r3, [r5, #0]
 80210e0:	e7da      	b.n	8021098 <align_factor_ch+0x88>
 80210e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80210e6:	f06f 031d 	mvn.w	r3, #29
 80210ea:	e7c9      	b.n	8021080 <align_factor_ch+0x70>
 80210ec:	2300      	movs	r3, #0
 80210ee:	e7c7      	b.n	8021080 <align_factor_ch+0x70>
 80210f0:	4770      	bx	lr
 80210f2:	bf00      	nop
 80210f4:	4f000000 	.word	0x4f000000

080210f8 <st_sssa8_ch_conv_dw_Wadapt>:
 80210f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210fc:	b089      	sub	sp, #36	; 0x24
 80210fe:	4615      	mov	r5, r2
 8021100:	ea5f 0a91 	movs.w	sl, r1, lsr #2
 8021104:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021106:	9204      	str	r2, [sp, #16]
 8021108:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 802110c:	9007      	str	r0, [sp, #28]
 802110e:	9305      	str	r3, [sp, #20]
 8021110:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8021114:	d07a      	beq.n	802120c <st_sssa8_ch_conv_dw_Wadapt+0x114>
 8021116:	fb03 fb05 	mul.w	fp, r3, r5
 802111a:	f10a 32ff 	add.w	r2, sl, #4294967295
 802111e:	4606      	mov	r6, r0
 8021120:	3004      	adds	r0, #4
 8021122:	f3cb 044f 	ubfx	r4, fp, #1, #16
 8021126:	b292      	uxth	r2, r2
 8021128:	ea4f 0841 	mov.w	r8, r1, lsl #1
 802112c:	f8cd a018 	str.w	sl, [sp, #24]
 8021130:	9400      	str	r4, [sp, #0]
 8021132:	fb15 f403 	smulbb	r4, r5, r3
 8021136:	9b00      	ldr	r3, [sp, #0]
 8021138:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 802113c:	f004 0201 	and.w	r2, r4, #1
 8021140:	46b1      	mov	r9, r6
 8021142:	3b01      	subs	r3, #1
 8021144:	f8df c118 	ldr.w	ip, [pc, #280]	; 8021260 <st_sssa8_ch_conv_dw_Wadapt+0x168>
 8021148:	9201      	str	r2, [sp, #4]
 802114a:	b29b      	uxth	r3, r3
 802114c:	011a      	lsls	r2, r3, #4
 802114e:	3301      	adds	r3, #1
 8021150:	3220      	adds	r2, #32
 8021152:	9203      	str	r2, [sp, #12]
 8021154:	fb03 f208 	mul.w	r2, r3, r8
 8021158:	011b      	lsls	r3, r3, #4
 802115a:	469a      	mov	sl, r3
 802115c:	9202      	str	r2, [sp, #8]
 802115e:	9b00      	ldr	r3, [sp, #0]
 8021160:	464e      	mov	r6, r9
 8021162:	b33b      	cbz	r3, 80211b4 <st_sssa8_ch_conv_dw_Wadapt+0xbc>
 8021164:	9b03      	ldr	r3, [sp, #12]
 8021166:	f107 0510 	add.w	r5, r7, #16
 802116a:	eb07 0e03 	add.w	lr, r7, r3
 802116e:	6833      	ldr	r3, [r6, #0]
 8021170:	5872      	ldr	r2, [r6, r1]
 8021172:	4446      	add	r6, r8
 8021174:	b29c      	uxth	r4, r3
 8021176:	ea02 000c 	and.w	r0, r2, ip
 802117a:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 802117e:	ea40 4313 	orr.w	r3, r0, r3, lsr #16
 8021182:	ea4f 2032 	mov.w	r0, r2, ror #8
 8021186:	fa2f f282 	sxtb16	r2, r2
 802118a:	fa2f f080 	sxtb16	r0, r0
 802118e:	f845 2c10 	str.w	r2, [r5, #-16]
 8021192:	ea4f 2233 	mov.w	r2, r3, ror #8
 8021196:	f845 0c0c 	str.w	r0, [r5, #-12]
 802119a:	fa2f f282 	sxtb16	r2, r2
 802119e:	fa2f f383 	sxtb16	r3, r3
 80211a2:	e945 3202 	strd	r3, r2, [r5, #-8]
 80211a6:	3510      	adds	r5, #16
 80211a8:	45ae      	cmp	lr, r5
 80211aa:	d1e0      	bne.n	802116e <st_sssa8_ch_conv_dw_Wadapt+0x76>
 80211ac:	9b02      	ldr	r3, [sp, #8]
 80211ae:	4457      	add	r7, sl
 80211b0:	eb09 0603 	add.w	r6, r9, r3
 80211b4:	9b01      	ldr	r3, [sp, #4]
 80211b6:	b1fb      	cbz	r3, 80211f8 <st_sssa8_ch_conv_dw_Wadapt+0x100>
 80211b8:	6833      	ldr	r3, [r6, #0]
 80211ba:	2400      	movs	r4, #0
 80211bc:	3708      	adds	r7, #8
 80211be:	ea03 020c 	and.w	r2, r3, ip
 80211c2:	4620      	mov	r0, r4
 80211c4:	ea0c 2503 	and.w	r5, ip, r3, lsl #8
 80211c8:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 80211cc:	b29b      	uxth	r3, r3
 80211ce:	ea4f 4232 	mov.w	r2, r2, ror #16
 80211d2:	432b      	orrs	r3, r5
 80211d4:	fa2f f282 	sxtb16	r2, r2
 80211d8:	fa2f f383 	sxtb16	r3, r3
 80211dc:	f362 040f 	bfi	r4, r2, #0, #16
 80211e0:	f363 000f 	bfi	r0, r3, #0, #16
 80211e4:	0c12      	lsrs	r2, r2, #16
 80211e6:	0c1b      	lsrs	r3, r3, #16
 80211e8:	f362 441f 	bfi	r4, r2, #16, #16
 80211ec:	f363 401f 	bfi	r0, r3, #16, #16
 80211f0:	f847 4c04 	str.w	r4, [r7, #-4]
 80211f4:	f847 0c08 	str.w	r0, [r7, #-8]
 80211f8:	f109 0904 	add.w	r9, r9, #4
 80211fc:	45cb      	cmp	fp, r9
 80211fe:	d1ae      	bne.n	802115e <st_sssa8_ch_conv_dw_Wadapt+0x66>
 8021200:	f8dd a018 	ldr.w	sl, [sp, #24]
 8021204:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8021208:	fa1f fa8a 	uxth.w	sl, sl
 802120c:	f011 0603 	ands.w	r6, r1, #3
 8021210:	d023      	beq.n	802125a <st_sssa8_ch_conv_dw_Wadapt+0x162>
 8021212:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8021216:	fb13 f302 	smulbb	r3, r3, r2
 802121a:	b29b      	uxth	r3, r3
 802121c:	b1eb      	cbz	r3, 802125a <st_sssa8_ch_conv_dw_Wadapt+0x162>
 802121e:	3b01      	subs	r3, #1
 8021220:	4456      	add	r6, sl
 8021222:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8021226:	b29b      	uxth	r3, r3
 8021228:	b2b6      	uxth	r6, r6
 802122a:	f103 0c01 	add.w	ip, r3, #1
 802122e:	005b      	lsls	r3, r3, #1
 8021230:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8021234:	1c9d      	adds	r5, r3, #2
 8021236:	f10a 0001 	add.w	r0, sl, #1
 802123a:	eb0e 020a 	add.w	r2, lr, sl
 802123e:	197c      	adds	r4, r7, r5
 8021240:	463b      	mov	r3, r7
 8021242:	fa1f fa80 	uxth.w	sl, r0
 8021246:	f992 0000 	ldrsb.w	r0, [r2]
 802124a:	440a      	add	r2, r1
 802124c:	f823 0b02 	strh.w	r0, [r3], #2
 8021250:	42a3      	cmp	r3, r4
 8021252:	d1f8      	bne.n	8021246 <st_sssa8_ch_conv_dw_Wadapt+0x14e>
 8021254:	45b2      	cmp	sl, r6
 8021256:	4467      	add	r7, ip
 8021258:	d1ed      	bne.n	8021236 <st_sssa8_ch_conv_dw_Wadapt+0x13e>
 802125a:	b009      	add	sp, #36	; 0x24
 802125c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021260:	ffff0000 	.word	0xffff0000

08021264 <st_sssa8_ch_convolve_dw>:
 8021264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021268:	b0dd      	sub	sp, #372	; 0x174
 802126a:	f8bd 719c 	ldrh.w	r7, [sp, #412]	; 0x19c
 802126e:	f8bd 41a4 	ldrh.w	r4, [sp, #420]	; 0x1a4
 8021272:	9020      	str	r0, [sp, #128]	; 0x80
 8021274:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8021278:	f8bd 01a0 	ldrh.w	r0, [sp, #416]	; 0x1a0
 802127c:	007e      	lsls	r6, r7, #1
 802127e:	910a      	str	r1, [sp, #40]	; 0x28
 8021280:	eb08 0107 	add.w	r1, r8, r7
 8021284:	fb04 f900 	mul.w	r9, r4, r0
 8021288:	f99d 51c8 	ldrsb.w	r5, [sp, #456]	; 0x1c8
 802128c:	921a      	str	r2, [sp, #104]	; 0x68
 802128e:	fb07 1109 	mla	r1, r7, r9, r1
 8021292:	9a76      	ldr	r2, [sp, #472]	; 0x1d8
 8021294:	9033      	str	r0, [sp, #204]	; 0xcc
 8021296:	19f0      	adds	r0, r6, r7
 8021298:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 802129c:	931f      	str	r3, [sp, #124]	; 0x7c
 802129e:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 80212a0:	9219      	str	r2, [sp, #100]	; 0x64
 80212a2:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	; 0x1a8
 80212a6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80212aa:	9438      	str	r4, [sp, #224]	; 0xe0
 80212ac:	9232      	str	r2, [sp, #200]	; 0xc8
 80212ae:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	; 0x1ac
 80212b2:	9615      	str	r6, [sp, #84]	; 0x54
 80212b4:	9239      	str	r2, [sp, #228]	; 0xe4
 80212b6:	f8bd 21b0 	ldrh.w	r2, [sp, #432]	; 0x1b0
 80212ba:	9326      	str	r3, [sp, #152]	; 0x98
 80212bc:	9223      	str	r2, [sp, #140]	; 0x8c
 80212be:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	; 0x1b4
 80212c2:	9237      	str	r2, [sp, #220]	; 0xdc
 80212c4:	f99d 21c4 	ldrsb.w	r2, [sp, #452]	; 0x1c4
 80212c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80212ca:	f8bd 21d0 	ldrh.w	r2, [sp, #464]	; 0x1d0
 80212ce:	9225      	str	r2, [sp, #148]	; 0x94
 80212d0:	f8bd 21d4 	ldrh.w	r2, [sp, #468]	; 0x1d4
 80212d4:	923a      	str	r2, [sp, #232]	; 0xe8
 80212d6:	b19f      	cbz	r7, 8021300 <st_sssa8_ch_convolve_dw+0x9c>
 80212d8:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 80212da:	1f1c      	subs	r4, r3, #4
 80212dc:	f04f 0c01 	mov.w	ip, #1
 80212e0:	198e      	adds	r6, r1, r6
 80212e2:	f931 3b02 	ldrsh.w	r3, [r1], #2
 80212e6:	fa0c f003 	lsl.w	r0, ip, r3
 80212ea:	fa05 f203 	lsl.w	r2, r5, r3
 80212ee:	2b00      	cmp	r3, #0
 80212f0:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 80212f4:	f340 84b3 	ble.w	8021c5e <st_sssa8_ch_convolve_dw+0x9fa>
 80212f8:	428e      	cmp	r6, r1
 80212fa:	f844 2f04 	str.w	r2, [r4, #4]!
 80212fe:	d1f0      	bne.n	80212e2 <st_sssa8_ch_convolve_dw+0x7e>
 8021300:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021302:	a944      	add	r1, sp, #272	; 0x110
 8021304:	ab40      	add	r3, sp, #256	; 0x100
 8021306:	aa3c      	add	r2, sp, #240	; 0xf0
 8021308:	943e      	str	r4, [sp, #248]	; 0xf8
 802130a:	a848      	add	r0, sp, #288	; 0x120
 802130c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802130e:	9100      	str	r1, [sp, #0]
 8021310:	a952      	add	r1, sp, #328	; 0x148
 8021312:	943d      	str	r4, [sp, #244]	; 0xf4
 8021314:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021316:	9442      	str	r4, [sp, #264]	; 0x108
 8021318:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 802131a:	9441      	str	r4, [sp, #260]	; 0x104
 802131c:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 802131e:	9446      	str	r4, [sp, #280]	; 0x118
 8021320:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8021322:	9445      	str	r4, [sp, #276]	; 0x114
 8021324:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8021326:	9454      	str	r4, [sp, #336]	; 0x150
 8021328:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 802132a:	9455      	str	r4, [sp, #340]	; 0x154
 802132c:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 802132e:	9456      	str	r4, [sp, #344]	; 0x158
 8021330:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8021332:	9457      	str	r4, [sp, #348]	; 0x15c
 8021334:	f001 ff0a 	bl	802314c <ai_padding_opt_init>
 8021338:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802133a:	fbb7 f3f3 	udiv	r3, r7, r3
 802133e:	079a      	lsls	r2, r3, #30
 8021340:	931b      	str	r3, [sp, #108]	; 0x6c
 8021342:	f040 8493 	bne.w	8021c6c <st_sssa8_ch_convolve_dw+0xa08>
 8021346:	109c      	asrs	r4, r3, #2
 8021348:	2304      	movs	r3, #4
 802134a:	931b      	str	r3, [sp, #108]	; 0x6c
 802134c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802134e:	425b      	negs	r3, r3
 8021350:	b29a      	uxth	r2, r3
 8021352:	ea42 4b03 	orr.w	fp, r2, r3, lsl #16
 8021356:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8021358:	2b00      	cmp	r3, #0
 802135a:	f000 8243 	beq.w	80217e4 <st_sssa8_ch_convolve_dw+0x580>
 802135e:	f3c9 014f 	ubfx	r1, r9, #1, #16
 8021362:	08ba      	lsrs	r2, r7, #2
 8021364:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8021366:	1e4d      	subs	r5, r1, #1
 8021368:	9110      	str	r1, [sp, #64]	; 0x40
 802136a:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 802136c:	fa1f fa85 	uxth.w	sl, r5
 8021370:	2500      	movs	r5, #0
 8021372:	f101 0e20 	add.w	lr, r1, #32
 8021376:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8021378:	9536      	str	r5, [sp, #216]	; 0xd8
 802137a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 802137c:	f1c1 0c00 	rsb	ip, r1, #0
 8021380:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021382:	9224      	str	r2, [sp, #144]	; 0x90
 8021384:	4629      	mov	r1, r5
 8021386:	fb13 f300 	smulbb	r3, r3, r0
 802138a:	3a01      	subs	r2, #1
 802138c:	fb01 f104 	mul.w	r1, r1, r4
 8021390:	9826      	ldr	r0, [sp, #152]	; 0x98
 8021392:	b292      	uxth	r2, r2
 8021394:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8021396:	4440      	add	r0, r8
 8021398:	9135      	str	r1, [sp, #212]	; 0xd4
 802139a:	f102 0901 	add.w	r9, r2, #1
 802139e:	eb0e 1102 	add.w	r1, lr, r2, lsl #4
 80213a2:	eba7 0808 	sub.w	r8, r7, r8
 80213a6:	9029      	str	r0, [sp, #164]	; 0xa4
 80213a8:	9112      	str	r1, [sp, #72]	; 0x48
 80213aa:	b29b      	uxth	r3, r3
 80213ac:	eb00 0648 	add.w	r6, r0, r8, lsl #1
 80213b0:	9976      	ldr	r1, [sp, #472]	; 0x1d8
 80213b2:	ea4f 1009 	mov.w	r0, r9, lsl #4
 80213b6:	931c      	str	r3, [sp, #112]	; 0x70
 80213b8:	3b01      	subs	r3, #1
 80213ba:	9628      	str	r6, [sp, #160]	; 0xa0
 80213bc:	4401      	add	r1, r0
 80213be:	f10a 0601 	add.w	r6, sl, #1
 80213c2:	b29b      	uxth	r3, r3
 80213c4:	46b8      	mov	r8, r7
 80213c6:	9130      	str	r1, [sp, #192]	; 0xc0
 80213c8:	1821      	adds	r1, r4, r0
 80213ca:	3301      	adds	r3, #1
 80213cc:	2400      	movs	r4, #0
 80213ce:	912d      	str	r1, [sp, #180]	; 0xb4
 80213d0:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 80213d2:	4401      	add	r1, r0
 80213d4:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80213d6:	912c      	str	r1, [sp, #176]	; 0xb0
 80213d8:	0059      	lsls	r1, r3, #1
 80213da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80213dc:	911e      	str	r1, [sp, #120]	; 0x78
 80213de:	eb00 01c9 	add.w	r1, r0, r9, lsl #3
 80213e2:	912f      	str	r1, [sp, #188]	; 0xbc
 80213e4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80213e6:	fb06 f101 	mul.w	r1, r6, r1
 80213ea:	9116      	str	r1, [sp, #88]	; 0x58
 80213ec:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80213f0:	912b      	str	r1, [sp, #172]	; 0xac
 80213f2:	f003 0101 	and.w	r1, r3, #1
 80213f6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80213f8:	9111      	str	r1, [sp, #68]	; 0x44
 80213fa:	ea4f 110a 	mov.w	r1, sl, lsl #4
 80213fe:	fb05 f303 	mul.w	r3, r5, r3
 8021402:	912a      	str	r1, [sp, #168]	; 0xa8
 8021404:	0131      	lsls	r1, r6, #4
 8021406:	933b      	str	r3, [sp, #236]	; 0xec
 8021408:	9117      	str	r1, [sp, #92]	; 0x5c
 802140a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802140c:	f8cd b0c4 	str.w	fp, [sp, #196]	; 0xc4
 8021410:	0093      	lsls	r3, r2, #2
 8021412:	932e      	str	r3, [sp, #184]	; 0xb8
 8021414:	f007 0303 	and.w	r3, r7, #3
 8021418:	9322      	str	r3, [sp, #136]	; 0x88
 802141a:	fa1f f38c 	uxth.w	r3, ip
 802141e:	9334      	str	r3, [sp, #208]	; 0xd0
 8021420:	a848      	add	r0, sp, #288	; 0x120
 8021422:	f001 feed 	bl	8023200 <ai_padding_opt_phase1>
 8021426:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021428:	2b00      	cmp	r3, #0
 802142a:	f000 81cd 	beq.w	80217c8 <st_sssa8_ch_convolve_dw+0x564>
 802142e:	f9bd 00d0 	ldrsh.w	r0, [sp, #208]	; 0xd0
 8021432:	2100      	movs	r1, #0
 8021434:	46c3      	mov	fp, r8
 8021436:	9027      	str	r0, [sp, #156]	; 0x9c
 8021438:	9837      	ldr	r0, [sp, #220]	; 0xdc
 802143a:	9121      	str	r1, [sp, #132]	; 0x84
 802143c:	e9dd 3238 	ldrd	r3, r2, [sp, #224]	; 0xe0
 8021440:	1a9a      	subs	r2, r3, r2
 8021442:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021444:	425b      	negs	r3, r3
 8021446:	fb00 2204 	mla	r2, r0, r4, r2
 802144a:	b29b      	uxth	r3, r3
 802144c:	9218      	str	r2, [sp, #96]	; 0x60
 802144e:	460a      	mov	r2, r1
 8021450:	931d      	str	r3, [sp, #116]	; 0x74
 8021452:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021454:	3b01      	subs	r3, #1
 8021456:	9314      	str	r3, [sp, #80]	; 0x50
 8021458:	9b48      	ldr	r3, [sp, #288]	; 0x120
 802145a:	2b00      	cmp	r3, #0
 802145c:	f000 82af 	beq.w	80219be <st_sssa8_ch_convolve_dw+0x75a>
 8021460:	3b01      	subs	r3, #1
 8021462:	2101      	movs	r1, #1
 8021464:	9348      	str	r3, [sp, #288]	; 0x120
 8021466:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021468:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 802146c:	2b01      	cmp	r3, #1
 802146e:	f000 82f4 	beq.w	8021a5a <st_sssa8_ch_convolve_dw+0x7f6>
 8021472:	2b04      	cmp	r3, #4
 8021474:	f000 838d 	beq.w	8021b92 <st_sssa8_ch_convolve_dw+0x92e>
 8021478:	2b02      	cmp	r3, #2
 802147a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802147c:	4618      	mov	r0, r3
 802147e:	f000 8330 	beq.w	8021ae2 <st_sssa8_ch_convolve_dw+0x87e>
 8021482:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021484:	4298      	cmp	r0, r3
 8021486:	dd45      	ble.n	8021514 <st_sssa8_ch_convolve_dw+0x2b0>
 8021488:	9923      	ldr	r1, [sp, #140]	; 0x8c
 802148a:	9833      	ldr	r0, [sp, #204]	; 0xcc
 802148c:	fb02 0201 	mla	r2, r2, r1, r0
 8021490:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8021492:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 8021496:	1a12      	subs	r2, r2, r0
 8021498:	9109      	str	r1, [sp, #36]	; 0x24
 802149a:	4291      	cmp	r1, r2
 802149c:	9203      	str	r2, [sp, #12]
 802149e:	da39      	bge.n	8021514 <st_sssa8_ch_convolve_dw+0x2b0>
 80214a0:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80214a4:	46d9      	mov	r9, fp
 80214a6:	461a      	mov	r2, r3
 80214a8:	9305      	str	r3, [sp, #20]
 80214aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80214ac:	0fd2      	lsrs	r2, r2, #31
 80214ae:	981a      	ldr	r0, [sp, #104]	; 0x68
 80214b0:	f1ca 0b00 	rsb	fp, sl, #0
 80214b4:	fb01 f103 	mul.w	r1, r1, r3
 80214b8:	4298      	cmp	r0, r3
 80214ba:	bfd8      	it	le
 80214bc:	f042 0201 	orrle.w	r2, r2, #1
 80214c0:	9107      	str	r1, [sp, #28]
 80214c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80214c4:	9204      	str	r2, [sp, #16]
 80214c6:	4688      	mov	r8, r1
 80214c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214ca:	428b      	cmp	r3, r1
 80214cc:	bfcc      	ite	gt
 80214ce:	2300      	movgt	r3, #0
 80214d0:	2301      	movle	r3, #1
 80214d2:	ea53 73d8 	orrs.w	r3, r3, r8, lsr #31
 80214d6:	d103      	bne.n	80214e0 <st_sssa8_ch_convolve_dw+0x27c>
 80214d8:	9b04      	ldr	r3, [sp, #16]
 80214da:	2b00      	cmp	r3, #0
 80214dc:	f000 81de 	beq.w	802189c <st_sssa8_ch_convolve_dw+0x638>
 80214e0:	464a      	mov	r2, r9
 80214e2:	4651      	mov	r1, sl
 80214e4:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 80214e8:	f001 fea6 	bl	8023238 <st_uint8_fill>
 80214ec:	f108 0801 	add.w	r8, r8, #1
 80214f0:	9b03      	ldr	r3, [sp, #12]
 80214f2:	44ca      	add	sl, r9
 80214f4:	ebab 0b09 	sub.w	fp, fp, r9
 80214f8:	fa0f f888 	sxth.w	r8, r8
 80214fc:	4598      	cmp	r8, r3
 80214fe:	4641      	mov	r1, r8
 8021500:	dbe2      	blt.n	80214c8 <st_sssa8_ch_convolve_dw+0x264>
 8021502:	9b05      	ldr	r3, [sp, #20]
 8021504:	9918      	ldr	r1, [sp, #96]	; 0x60
 8021506:	3301      	adds	r3, #1
 8021508:	b21b      	sxth	r3, r3
 802150a:	428b      	cmp	r3, r1
 802150c:	461a      	mov	r2, r3
 802150e:	9305      	str	r3, [sp, #20]
 8021510:	dbcb      	blt.n	80214aa <st_sssa8_ch_convolve_dw+0x246>
 8021512:	46cb      	mov	fp, r9
 8021514:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021516:	2b00      	cmp	r3, #0
 8021518:	f000 8288 	beq.w	8021a2c <st_sssa8_ch_convolve_dw+0x7c8>
 802151c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802151e:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 8021520:	f102 0810 	add.w	r8, r2, #16
 8021524:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 8021526:	3310      	adds	r3, #16
 8021528:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 802152c:	3204      	adds	r2, #4
 802152e:	f8dd 90c4 	ldr.w	r9, [sp, #196]	; 0xc4
 8021532:	9309      	str	r3, [sp, #36]	; 0x24
 8021534:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021536:	9205      	str	r2, [sp, #20]
 8021538:	3308      	adds	r3, #8
 802153a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802153c:	9306      	str	r3, [sp, #24]
 802153e:	9208      	str	r2, [sp, #32]
 8021540:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 8021542:	e9dd c229 	ldrd	ip, r2, [sp, #164]	; 0xa4
 8021546:	3310      	adds	r3, #16
 8021548:	3220      	adds	r2, #32
 802154a:	f8cd c01c 	str.w	ip, [sp, #28]
 802154e:	469b      	mov	fp, r3
 8021550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021552:	9213      	str	r2, [sp, #76]	; 0x4c
 8021554:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8021558:	920e      	str	r2, [sp, #56]	; 0x38
 802155a:	f853 6c10 	ldr.w	r6, [r3, #-16]
 802155e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8021562:	9908      	ldr	r1, [sp, #32]
 8021564:	e953 5403 	ldrd	r5, r4, [r3, #-12]
 8021568:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802156a:	2b00      	cmp	r3, #0
 802156c:	d04b      	beq.n	8021606 <st_sssa8_ch_convolve_dw+0x3a2>
 802156e:	9b07      	ldr	r3, [sp, #28]
 8021570:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8021572:	461a      	mov	r2, r3
 8021574:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8021578:	eb03 0c07 	add.w	ip, r3, r7
 802157c:	464f      	mov	r7, r9
 802157e:	3210      	adds	r2, #16
 8021580:	e9cd 8b0c 	strd	r8, fp, [sp, #48]	; 0x30
 8021584:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 8021588:	e9cd 4003 	strd	r4, r0, [sp, #12]
 802158c:	f8d1 8000 	ldr.w	r8, [r1]
 8021590:	f851 900a 	ldr.w	r9, [r1, sl]
 8021594:	4bc0      	ldr	r3, [pc, #768]	; (8021898 <st_sssa8_ch_convolve_dw+0x634>)
 8021596:	fa1f fe88 	uxth.w	lr, r8
 802159a:	f852 0c10 	ldr.w	r0, [r2, #-16]
 802159e:	ea09 0303 	and.w	r3, r9, r3
 80215a2:	ea4e 4e09 	orr.w	lr, lr, r9, lsl #16
 80215a6:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80215aa:	fa27 f88e 	sxtab16	r8, r7, lr
 80215ae:	fb20 6608 	smlad	r6, r0, r8, r6
 80215b2:	ea4f 2e3e 	mov.w	lr, lr, ror #8
 80215b6:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 80215ba:	fa27 fe8e 	sxtab16	lr, r7, lr
 80215be:	fb20 550e 	smlad	r5, r0, lr, r5
 80215c2:	fa27 fe83 	sxtab16	lr, r7, r3
 80215c6:	f852 0c08 	ldr.w	r0, [r2, #-8]
 80215ca:	9c03      	ldr	r4, [sp, #12]
 80215cc:	fb20 400e 	smlad	r0, r0, lr, r4
 80215d0:	9003      	str	r0, [sp, #12]
 80215d2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80215d6:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80215da:	fa27 f383 	sxtab16	r3, r7, r3
 80215de:	9c04      	ldr	r4, [sp, #16]
 80215e0:	fb20 4303 	smlad	r3, r0, r3, r4
 80215e4:	3210      	adds	r2, #16
 80215e6:	9304      	str	r3, [sp, #16]
 80215e8:	4459      	add	r1, fp
 80215ea:	4594      	cmp	ip, r2
 80215ec:	d1ce      	bne.n	802158c <st_sssa8_ch_convolve_dw+0x328>
 80215ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80215f0:	4618      	mov	r0, r3
 80215f2:	9b07      	ldr	r3, [sp, #28]
 80215f4:	46b9      	mov	r9, r7
 80215f6:	9c03      	ldr	r4, [sp, #12]
 80215f8:	4413      	add	r3, r2
 80215fa:	9a08      	ldr	r2, [sp, #32]
 80215fc:	9307      	str	r3, [sp, #28]
 80215fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021600:	e9dd 8b0c 	ldrd	r8, fp, [sp, #48]	; 0x30
 8021604:	1899      	adds	r1, r3, r2
 8021606:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021608:	b30b      	cbz	r3, 802164e <st_sssa8_ch_convolve_dw+0x3ea>
 802160a:	680b      	ldr	r3, [r1, #0]
 802160c:	9a07      	ldr	r2, [sp, #28]
 802160e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021610:	fa4f fc83 	sxtb.w	ip, r3
 8021614:	f8b2 e000 	ldrh.w	lr, [r2]
 8021618:	f343 2107 	sbfx	r1, r3, #8, #8
 802161c:	f343 4207 	sbfx	r2, r3, #16, #8
 8021620:	ebc7 6a23 	rsb	sl, r7, r3, asr #24
 8021624:	ebac 0c07 	sub.w	ip, ip, r7
 8021628:	1bc9      	subs	r1, r1, r7
 802162a:	1bd2      	subs	r2, r2, r7
 802162c:	9f07      	ldr	r7, [sp, #28]
 802162e:	fb1e 660c 	smlabb	r6, lr, ip, r6
 8021632:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8021636:	463b      	mov	r3, r7
 8021638:	f8b7 e004 	ldrh.w	lr, [r7, #4]
 802163c:	fb1c 5501 	smlabb	r5, ip, r1, r5
 8021640:	88f9      	ldrh	r1, [r7, #6]
 8021642:	fb1e 4402 	smlabb	r4, lr, r2, r4
 8021646:	3308      	adds	r3, #8
 8021648:	fb11 000a 	smlabb	r0, r1, sl, r0
 802164c:	9307      	str	r3, [sp, #28]
 802164e:	9b06      	ldr	r3, [sp, #24]
 8021650:	f85b 1c10 	ldr.w	r1, [fp, #-16]
 8021654:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8021658:	f858 2c10 	ldr.w	r2, [r8, #-16]
 802165c:	2b00      	cmp	r3, #0
 802165e:	f340 80fe 	ble.w	802185e <st_sssa8_ch_convolve_dw+0x5fa>
 8021662:	0076      	lsls	r6, r6, #1
 8021664:	fb56 2601 	smmla	r6, r6, r1, r2
 8021668:	411e      	asrs	r6, r3
 802166a:	f306 0607 	ssat	r6, #8, r6
 802166e:	9b05      	ldr	r3, [sp, #20]
 8021670:	f803 6c04 	strb.w	r6, [r3, #-4]
 8021674:	9b06      	ldr	r3, [sp, #24]
 8021676:	f933 1c06 	ldrsh.w	r1, [r3, #-6]
 802167a:	2900      	cmp	r1, #0
 802167c:	f340 80dc 	ble.w	8021838 <st_sssa8_ch_convolve_dw+0x5d4>
 8021680:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
 8021684:	006d      	lsls	r5, r5, #1
 8021686:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 802168a:	fb55 2503 	smmla	r5, r5, r3, r2
 802168e:	410d      	asrs	r5, r1
 8021690:	f305 0507 	ssat	r5, #8, r5
 8021694:	9b05      	ldr	r3, [sp, #20]
 8021696:	f803 5c03 	strb.w	r5, [r3, #-3]
 802169a:	9b06      	ldr	r3, [sp, #24]
 802169c:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 80216a0:	2900      	cmp	r1, #0
 80216a2:	f340 80b6 	ble.w	8021812 <st_sssa8_ch_convolve_dw+0x5ae>
 80216a6:	f85b 3c08 	ldr.w	r3, [fp, #-8]
 80216aa:	0064      	lsls	r4, r4, #1
 80216ac:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80216b0:	fb54 2403 	smmla	r4, r4, r3, r2
 80216b4:	410c      	asrs	r4, r1
 80216b6:	f304 0407 	ssat	r4, #8, r4
 80216ba:	9b05      	ldr	r3, [sp, #20]
 80216bc:	f803 4c02 	strb.w	r4, [r3, #-2]
 80216c0:	9b06      	ldr	r3, [sp, #24]
 80216c2:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 80216c6:	2900      	cmp	r1, #0
 80216c8:	f340 8090 	ble.w	80217ec <st_sssa8_ch_convolve_dw+0x588>
 80216cc:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 80216d0:	0040      	lsls	r0, r0, #1
 80216d2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80216d6:	fb50 2003 	smmla	r0, r0, r3, r2
 80216da:	4108      	asrs	r0, r1
 80216dc:	f300 0007 	ssat	r0, #8, r0
 80216e0:	9b05      	ldr	r3, [sp, #20]
 80216e2:	f803 0c01 	strb.w	r0, [r3, #-1]
 80216e6:	9a06      	ldr	r2, [sp, #24]
 80216e8:	f10b 0b10 	add.w	fp, fp, #16
 80216ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216ee:	f108 0810 	add.w	r8, r8, #16
 80216f2:	3208      	adds	r2, #8
 80216f4:	3310      	adds	r3, #16
 80216f6:	9206      	str	r2, [sp, #24]
 80216f8:	9a05      	ldr	r2, [sp, #20]
 80216fa:	9309      	str	r3, [sp, #36]	; 0x24
 80216fc:	3204      	adds	r2, #4
 80216fe:	9205      	str	r2, [sp, #20]
 8021700:	9a08      	ldr	r2, [sp, #32]
 8021702:	3204      	adds	r2, #4
 8021704:	9208      	str	r2, [sp, #32]
 8021706:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021708:	429a      	cmp	r2, r3
 802170a:	f47f af26 	bne.w	802155a <st_sssa8_ch_convolve_dw+0x2f6>
 802170e:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 8021710:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021712:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8021716:	4413      	add	r3, r2
 8021718:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 802171c:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8021720:	9373      	str	r3, [sp, #460]	; 0x1cc
 8021722:	e9dd ae2c 	ldrd	sl, lr, [sp, #176]	; 0xb0
 8021726:	e9dd 692e 	ldrd	r6, r9, [sp, #184]	; 0xb8
 802172a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802172c:	2b00      	cmp	r3, #0
 802172e:	d03d      	beq.n	80217ac <st_sssa8_ch_convolve_dw+0x548>
 8021730:	4433      	add	r3, r6
 8021732:	f1ae 0704 	sub.w	r7, lr, #4
 8021736:	f1a9 0902 	sub.w	r9, r9, #2
 802173a:	f1a8 0804 	sub.w	r8, r8, #4
 802173e:	b29b      	uxth	r3, r3
 8021740:	f8dd e1cc 	ldr.w	lr, [sp, #460]	; 0x1cc
 8021744:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8021748:	9303      	str	r3, [sp, #12]
 802174a:	1c73      	adds	r3, r6, #1
 802174c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802174e:	1991      	adds	r1, r2, r6
 8021750:	b29e      	uxth	r6, r3
 8021752:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021754:	f85a 2b04 	ldr.w	r2, [sl], #4
 8021758:	b163      	cbz	r3, 8021774 <st_sssa8_ch_convolve_dw+0x510>
 802175a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802175c:	eb0c 0403 	add.w	r4, ip, r3
 8021760:	f991 3000 	ldrsb.w	r3, [r1]
 8021764:	4459      	add	r1, fp
 8021766:	f83c 0b02 	ldrh.w	r0, [ip], #2
 802176a:	1b5b      	subs	r3, r3, r5
 802176c:	45a4      	cmp	ip, r4
 802176e:	fb10 2203 	smlabb	r2, r0, r3, r2
 8021772:	d1f5      	bne.n	8021760 <st_sssa8_ch_convolve_dw+0x4fc>
 8021774:	f939 3f02 	ldrsh.w	r3, [r9, #2]!
 8021778:	f858 0f04 	ldr.w	r0, [r8, #4]!
 802177c:	2b00      	cmp	r3, #0
 802177e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8021782:	dd7b      	ble.n	802187c <st_sssa8_ch_convolve_dw+0x618>
 8021784:	0052      	lsls	r2, r2, #1
 8021786:	fb52 1200 	smmla	r2, r2, r0, r1
 802178a:	411a      	asrs	r2, r3
 802178c:	f302 0207 	ssat	r2, #8, r2
 8021790:	f88e 2000 	strb.w	r2, [lr]
 8021794:	9b03      	ldr	r3, [sp, #12]
 8021796:	f10e 0e01 	add.w	lr, lr, #1
 802179a:	429e      	cmp	r6, r3
 802179c:	d1d5      	bne.n	802174a <st_sssa8_ch_convolve_dw+0x4e6>
 802179e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80217a0:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 80217a2:	3b01      	subs	r3, #1
 80217a4:	b29b      	uxth	r3, r3
 80217a6:	3301      	adds	r3, #1
 80217a8:	441a      	add	r2, r3
 80217aa:	9273      	str	r2, [sp, #460]	; 0x1cc
 80217ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80217ae:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80217b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80217b2:	440b      	add	r3, r1
 80217b4:	3201      	adds	r2, #1
 80217b6:	b29b      	uxth	r3, r3
 80217b8:	b212      	sxth	r2, r2
 80217ba:	931d      	str	r3, [sp, #116]	; 0x74
 80217bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80217be:	9221      	str	r2, [sp, #132]	; 0x84
 80217c0:	4293      	cmp	r3, r2
 80217c2:	f73f ae49 	bgt.w	8021458 <st_sssa8_ch_convolve_dw+0x1f4>
 80217c6:	46d8      	mov	r8, fp
 80217c8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80217ca:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80217cc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80217ce:	440b      	add	r3, r1
 80217d0:	3201      	adds	r2, #1
 80217d2:	b29b      	uxth	r3, r3
 80217d4:	b212      	sxth	r2, r2
 80217d6:	9334      	str	r3, [sp, #208]	; 0xd0
 80217d8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80217da:	4614      	mov	r4, r2
 80217dc:	9236      	str	r2, [sp, #216]	; 0xd8
 80217de:	4293      	cmp	r3, r2
 80217e0:	f73f ae1e 	bgt.w	8021420 <st_sssa8_ch_convolve_dw+0x1bc>
 80217e4:	2000      	movs	r0, #0
 80217e6:	b05d      	add	sp, #372	; 0x174
 80217e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217ec:	f1c1 0101 	rsb	r1, r1, #1
 80217f0:	fa00 f201 	lsl.w	r2, r0, r1
 80217f4:	f302 021f 	ssat	r2, #32, r2
 80217f8:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 80217fc:	fb52 f213 	smmulr	r2, r2, r3
 8021800:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8021804:	4413      	add	r3, r2
 8021806:	f303 0307 	ssat	r3, #8, r3
 802180a:	9a05      	ldr	r2, [sp, #20]
 802180c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021810:	e769      	b.n	80216e6 <st_sssa8_ch_convolve_dw+0x482>
 8021812:	f1c1 0101 	rsb	r1, r1, #1
 8021816:	fa04 f201 	lsl.w	r2, r4, r1
 802181a:	f302 021f 	ssat	r2, #32, r2
 802181e:	f85b 3c08 	ldr.w	r3, [fp, #-8]
 8021822:	fb52 f213 	smmulr	r2, r2, r3
 8021826:	f858 3c08 	ldr.w	r3, [r8, #-8]
 802182a:	4413      	add	r3, r2
 802182c:	f303 0307 	ssat	r3, #8, r3
 8021830:	9a05      	ldr	r2, [sp, #20]
 8021832:	f802 3c02 	strb.w	r3, [r2, #-2]
 8021836:	e743      	b.n	80216c0 <st_sssa8_ch_convolve_dw+0x45c>
 8021838:	f1c1 0101 	rsb	r1, r1, #1
 802183c:	fa05 f201 	lsl.w	r2, r5, r1
 8021840:	f302 021f 	ssat	r2, #32, r2
 8021844:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
 8021848:	fb52 f213 	smmulr	r2, r2, r3
 802184c:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 8021850:	4413      	add	r3, r2
 8021852:	f303 0307 	ssat	r3, #8, r3
 8021856:	9a05      	ldr	r2, [sp, #20]
 8021858:	f802 3c03 	strb.w	r3, [r2, #-3]
 802185c:	e71d      	b.n	802169a <st_sssa8_ch_convolve_dw+0x436>
 802185e:	f1c3 0301 	rsb	r3, r3, #1
 8021862:	fa06 f303 	lsl.w	r3, r6, r3
 8021866:	f303 031f 	ssat	r3, #32, r3
 802186a:	fb53 f311 	smmulr	r3, r3, r1
 802186e:	4413      	add	r3, r2
 8021870:	f303 0307 	ssat	r3, #8, r3
 8021874:	9a05      	ldr	r2, [sp, #20]
 8021876:	f802 3c04 	strb.w	r3, [r2, #-4]
 802187a:	e6fb      	b.n	8021674 <st_sssa8_ch_convolve_dw+0x410>
 802187c:	f1c3 0301 	rsb	r3, r3, #1
 8021880:	fa02 f303 	lsl.w	r3, r2, r3
 8021884:	f303 031f 	ssat	r3, #32, r3
 8021888:	fb53 f310 	smmulr	r3, r3, r0
 802188c:	440b      	add	r3, r1
 802188e:	f303 0307 	ssat	r3, #8, r3
 8021892:	f88e 3000 	strb.w	r3, [lr]
 8021896:	e77d      	b.n	8021794 <st_sssa8_ch_convolve_dw+0x530>
 8021898:	ffff0000 	.word	0xffff0000
 802189c:	9b07      	ldr	r3, [sp, #28]
 802189e:	9820      	ldr	r0, [sp, #128]	; 0x80
 80218a0:	4419      	add	r1, r3
 80218a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80218a4:	fb03 0101 	mla	r1, r3, r1, r0
 80218a8:	2b00      	cmp	r3, #0
 80218aa:	f43f ae1f 	beq.w	80214ec <st_sssa8_ch_convolve_dw+0x288>
 80218ae:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80218b0:	2f00      	cmp	r7, #0
 80218b2:	f43f ae1b 	beq.w	80214ec <st_sssa8_ch_convolve_dw+0x288>
 80218b6:	18ca      	adds	r2, r1, r3
 80218b8:	1ebb      	subs	r3, r7, #2
 80218ba:	465c      	mov	r4, fp
 80218bc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80218c0:	9306      	str	r3, [sp, #24]
 80218c2:	1efb      	subs	r3, r7, #3
 80218c4:	4650      	mov	r0, sl
 80218c6:	46a1      	mov	r9, r4
 80218c8:	9308      	str	r3, [sp, #32]
 80218ca:	1f3b      	subs	r3, r7, #4
 80218cc:	e9cd 8b0e 	strd	r8, fp, [sp, #56]	; 0x38
 80218d0:	4693      	mov	fp, r2
 80218d2:	e9cd 3a0c 	strd	r3, sl, [sp, #48]	; 0x30
 80218d6:	19c6      	adds	r6, r0, r7
 80218d8:	f101 0e01 	add.w	lr, r1, #1
 80218dc:	42b1      	cmp	r1, r6
 80218de:	bf38      	it	cc
 80218e0:	4570      	cmpcc	r0, lr
 80218e2:	d362      	bcc.n	80219aa <st_sssa8_ch_convolve_dw+0x746>
 80218e4:	2f0b      	cmp	r7, #11
 80218e6:	d960      	bls.n	80219aa <st_sssa8_ch_convolve_dw+0x746>
 80218e8:	f009 0303 	and.w	r3, r9, #3
 80218ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80218ee:	1cda      	adds	r2, r3, #3
 80218f0:	42a2      	cmp	r2, r4
 80218f2:	f200 80a5 	bhi.w	8021a40 <st_sssa8_ch_convolve_dw+0x7dc>
 80218f6:	2b00      	cmp	r3, #0
 80218f8:	d05e      	beq.n	80219b8 <st_sssa8_ch_convolve_dw+0x754>
 80218fa:	780a      	ldrb	r2, [r1, #0]
 80218fc:	2b01      	cmp	r3, #1
 80218fe:	f100 0a01 	add.w	sl, r0, #1
 8021902:	9d06      	ldr	r5, [sp, #24]
 8021904:	7002      	strb	r2, [r0, #0]
 8021906:	d00b      	beq.n	8021920 <st_sssa8_ch_convolve_dw+0x6bc>
 8021908:	780a      	ldrb	r2, [r1, #0]
 802190a:	2b03      	cmp	r3, #3
 802190c:	f100 0a02 	add.w	sl, r0, #2
 8021910:	9d08      	ldr	r5, [sp, #32]
 8021912:	7042      	strb	r2, [r0, #1]
 8021914:	d104      	bne.n	8021920 <st_sssa8_ch_convolve_dw+0x6bc>
 8021916:	780a      	ldrb	r2, [r1, #0]
 8021918:	f100 0a03 	add.w	sl, r0, #3
 802191c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802191e:	7082      	strb	r2, [r0, #2]
 8021920:	f891 c000 	ldrb.w	ip, [r1]
 8021924:	2400      	movs	r4, #0
 8021926:	eba7 0803 	sub.w	r8, r7, r3
 802192a:	2200      	movs	r2, #0
 802192c:	f36c 0407 	bfi	r4, ip, #0, #8
 8021930:	4403      	add	r3, r0
 8021932:	ea4f 0098 	mov.w	r0, r8, lsr #2
 8021936:	f36c 240f 	bfi	r4, ip, #8, #8
 802193a:	f36c 4417 	bfi	r4, ip, #16, #8
 802193e:	f36c 641f 	bfi	r4, ip, #24, #8
 8021942:	3201      	adds	r2, #1
 8021944:	f843 4b04 	str.w	r4, [r3], #4
 8021948:	4282      	cmp	r2, r0
 802194a:	d3fa      	bcc.n	8021942 <st_sssa8_ch_convolve_dw+0x6de>
 802194c:	f028 0203 	bic.w	r2, r8, #3
 8021950:	4542      	cmp	r2, r8
 8021952:	4492      	add	sl, r2
 8021954:	eba5 0502 	sub.w	r5, r5, r2
 8021958:	d01a      	beq.n	8021990 <st_sssa8_ch_convolve_dw+0x72c>
 802195a:	780b      	ldrb	r3, [r1, #0]
 802195c:	f88a 3000 	strb.w	r3, [sl]
 8021960:	b1b5      	cbz	r5, 8021990 <st_sssa8_ch_convolve_dw+0x72c>
 8021962:	780b      	ldrb	r3, [r1, #0]
 8021964:	2d01      	cmp	r5, #1
 8021966:	f88a 3001 	strb.w	r3, [sl, #1]
 802196a:	d011      	beq.n	8021990 <st_sssa8_ch_convolve_dw+0x72c>
 802196c:	780b      	ldrb	r3, [r1, #0]
 802196e:	2d02      	cmp	r5, #2
 8021970:	f88a 3002 	strb.w	r3, [sl, #2]
 8021974:	d00c      	beq.n	8021990 <st_sssa8_ch_convolve_dw+0x72c>
 8021976:	780b      	ldrb	r3, [r1, #0]
 8021978:	2d03      	cmp	r5, #3
 802197a:	f88a 3003 	strb.w	r3, [sl, #3]
 802197e:	d007      	beq.n	8021990 <st_sssa8_ch_convolve_dw+0x72c>
 8021980:	780b      	ldrb	r3, [r1, #0]
 8021982:	2d04      	cmp	r5, #4
 8021984:	f88a 3004 	strb.w	r3, [sl, #4]
 8021988:	d002      	beq.n	8021990 <st_sssa8_ch_convolve_dw+0x72c>
 802198a:	780b      	ldrb	r3, [r1, #0]
 802198c:	f88a 3005 	strb.w	r3, [sl, #5]
 8021990:	45de      	cmp	lr, fp
 8021992:	4671      	mov	r1, lr
 8021994:	4630      	mov	r0, r6
 8021996:	eba9 0907 	sub.w	r9, r9, r7
 802199a:	d19c      	bne.n	80218d6 <st_sssa8_ch_convolve_dw+0x672>
 802199c:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80219a0:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 80219a4:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 80219a8:	e5a0      	b.n	80214ec <st_sssa8_ch_convolve_dw+0x288>
 80219aa:	4603      	mov	r3, r0
 80219ac:	780a      	ldrb	r2, [r1, #0]
 80219ae:	f803 2b01 	strb.w	r2, [r3], #1
 80219b2:	429e      	cmp	r6, r3
 80219b4:	d1fa      	bne.n	80219ac <st_sssa8_ch_convolve_dw+0x748>
 80219b6:	e7eb      	b.n	8021990 <st_sssa8_ch_convolve_dw+0x72c>
 80219b8:	4625      	mov	r5, r4
 80219ba:	4682      	mov	sl, r0
 80219bc:	e7b0      	b.n	8021920 <st_sssa8_ch_convolve_dw+0x6bc>
 80219be:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80219c0:	2b00      	cmp	r3, #0
 80219c2:	d040      	beq.n	8021a46 <st_sssa8_ch_convolve_dw+0x7e2>
 80219c4:	3b01      	subs	r3, #1
 80219c6:	f8bd 1144 	ldrh.w	r1, [sp, #324]	; 0x144
 80219ca:	9349      	str	r3, [sp, #292]	; 0x124
 80219cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80219ce:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 80219d2:	2b01      	cmp	r3, #1
 80219d4:	f47f ad4d 	bne.w	8021472 <st_sssa8_ch_convolve_dw+0x20e>
 80219d8:	2901      	cmp	r1, #1
 80219da:	d03e      	beq.n	8021a5a <st_sssa8_ch_convolve_dw+0x7f6>
 80219dc:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80219de:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80219e0:	f9bd 5074 	ldrsh.w	r5, [sp, #116]	; 0x74
 80219e4:	4297      	cmp	r7, r2
 80219e6:	f77f ad95 	ble.w	8021514 <st_sssa8_ch_convolve_dw+0x2b0>
 80219ea:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80219ec:	4614      	mov	r4, r2
 80219ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80219f2:	4610      	mov	r0, r2
 80219f4:	46b3      	mov	fp, r6
 80219f6:	f8dd 80ec 	ldr.w	r8, [sp, #236]	; 0xec
 80219fa:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 80219fe:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8021a02:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8021a04:	3401      	adds	r4, #1
 8021a06:	fb00 500a 	mla	r0, r0, sl, r5
 8021a0a:	4659      	mov	r1, fp
 8021a0c:	4642      	mov	r2, r8
 8021a0e:	b224      	sxth	r4, r4
 8021a10:	fb06 9000 	mla	r0, r6, r0, r9
 8021a14:	f003 fe2c 	bl	8025670 <arm_copy_q7>
 8021a18:	44c3      	add	fp, r8
 8021a1a:	42bc      	cmp	r4, r7
 8021a1c:	4620      	mov	r0, r4
 8021a1e:	dbf1      	blt.n	8021a04 <st_sssa8_ch_convolve_dw+0x7a0>
 8021a20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021a22:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021a26:	2b00      	cmp	r3, #0
 8021a28:	f47f ad78 	bne.w	802151c <st_sssa8_ch_convolve_dw+0x2b8>
 8021a2c:	461e      	mov	r6, r3
 8021a2e:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 8021a32:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 8021a36:	f8dd 81d8 	ldr.w	r8, [sp, #472]	; 0x1d8
 8021a3a:	e9dd 9c28 	ldrd	r9, ip, [sp, #160]	; 0xa0
 8021a3e:	e674      	b.n	802172a <st_sssa8_ch_convolve_dw+0x4c6>
 8021a40:	4625      	mov	r5, r4
 8021a42:	4682      	mov	sl, r0
 8021a44:	e789      	b.n	802195a <st_sssa8_ch_convolve_dw+0x6f6>
 8021a46:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8021a48:	2101      	movs	r1, #1
 8021a4a:	3b01      	subs	r3, #1
 8021a4c:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 8021a50:	934a      	str	r3, [sp, #296]	; 0x128
 8021a52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021a54:	2b01      	cmp	r3, #1
 8021a56:	f47f ad0c 	bne.w	8021472 <st_sssa8_ch_convolve_dw+0x20e>
 8021a5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021a5c:	4618      	mov	r0, r3
 8021a5e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021a60:	4298      	cmp	r0, r3
 8021a62:	f77f ad57 	ble.w	8021514 <st_sssa8_ch_convolve_dw+0x2b0>
 8021a66:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8021a68:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8021a6a:	fb02 0201 	mla	r2, r2, r1, r0
 8021a6e:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8021a70:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 8021a74:	1a15      	subs	r5, r2, r0
 8021a76:	9104      	str	r1, [sp, #16]
 8021a78:	428d      	cmp	r5, r1
 8021a7a:	f77f ad4b 	ble.w	8021514 <st_sssa8_ch_convolve_dw+0x2b0>
 8021a7e:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8021a82:	4698      	mov	r8, r3
 8021a84:	461a      	mov	r2, r3
 8021a86:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8021a8a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8021a8c:	fb06 f302 	mul.w	r3, r6, r2
 8021a90:	ea4f 77d8 	mov.w	r7, r8, lsr #31
 8021a94:	f8dd c010 	ldr.w	ip, [sp, #16]
 8021a98:	9303      	str	r3, [sp, #12]
 8021a9a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021a9c:	4664      	mov	r4, ip
 8021a9e:	4293      	cmp	r3, r2
 8021aa0:	bfd8      	it	le
 8021aa2:	f047 0701 	orrle.w	r7, r7, #1
 8021aa6:	4566      	cmp	r6, ip
 8021aa8:	465a      	mov	r2, fp
 8021aaa:	4651      	mov	r1, sl
 8021aac:	4648      	mov	r0, r9
 8021aae:	bfcc      	ite	gt
 8021ab0:	2300      	movgt	r3, #0
 8021ab2:	2301      	movle	r3, #1
 8021ab4:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 8021ab8:	d102      	bne.n	8021ac0 <st_sssa8_ch_convolve_dw+0x85c>
 8021aba:	2f00      	cmp	r7, #0
 8021abc:	f000 80c4 	beq.w	8021c48 <st_sssa8_ch_convolve_dw+0x9e4>
 8021ac0:	f001 fbba 	bl	8023238 <st_uint8_fill>
 8021ac4:	3401      	adds	r4, #1
 8021ac6:	44da      	add	sl, fp
 8021ac8:	b224      	sxth	r4, r4
 8021aca:	42ac      	cmp	r4, r5
 8021acc:	46a4      	mov	ip, r4
 8021ace:	dbea      	blt.n	8021aa6 <st_sssa8_ch_convolve_dw+0x842>
 8021ad0:	f108 0801 	add.w	r8, r8, #1
 8021ad4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021ad6:	fa0f f888 	sxth.w	r8, r8
 8021ada:	4598      	cmp	r8, r3
 8021adc:	4642      	mov	r2, r8
 8021ade:	dbd5      	blt.n	8021a8c <st_sssa8_ch_convolve_dw+0x828>
 8021ae0:	e518      	b.n	8021514 <st_sssa8_ch_convolve_dw+0x2b0>
 8021ae2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8021ae4:	4288      	cmp	r0, r1
 8021ae6:	f77f ad15 	ble.w	8021514 <st_sssa8_ch_convolve_dw+0x2b0>
 8021aea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021aec:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8021aee:	fb02 0203 	mla	r2, r2, r3, r0
 8021af2:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8021af4:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8021af8:	1a15      	subs	r5, r2, r0
 8021afa:	9304      	str	r3, [sp, #16]
 8021afc:	42ab      	cmp	r3, r5
 8021afe:	f6bf ad09 	bge.w	8021514 <st_sssa8_ch_convolve_dw+0x2b0>
 8021b02:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8021b06:	460e      	mov	r6, r1
 8021b08:	4689      	mov	r9, r1
 8021b0a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8021b0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021b10:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021b12:	9a04      	ldr	r2, [sp, #16]
 8021b14:	454b      	cmp	r3, r9
 8021b16:	fb09 f307 	mul.w	r3, r9, r7
 8021b1a:	4614      	mov	r4, r2
 8021b1c:	bfcc      	ite	gt
 8021b1e:	2100      	movgt	r1, #0
 8021b20:	2101      	movle	r1, #1
 8021b22:	9303      	str	r3, [sp, #12]
 8021b24:	ea41 79d6 	orr.w	r9, r1, r6, lsr #31
 8021b28:	464b      	mov	r3, r9
 8021b2a:	46b1      	mov	r9, r6
 8021b2c:	461e      	mov	r6, r3
 8021b2e:	4297      	cmp	r7, r2
 8021b30:	bfcc      	ite	gt
 8021b32:	2300      	movgt	r3, #0
 8021b34:	2301      	movle	r3, #1
 8021b36:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 8021b3a:	d100      	bne.n	8021b3e <st_sssa8_ch_convolve_dw+0x8da>
 8021b3c:	b196      	cbz	r6, 8021b64 <st_sssa8_ch_convolve_dw+0x900>
 8021b3e:	465a      	mov	r2, fp
 8021b40:	4651      	mov	r1, sl
 8021b42:	4640      	mov	r0, r8
 8021b44:	f001 fb78 	bl	8023238 <st_uint8_fill>
 8021b48:	3401      	adds	r4, #1
 8021b4a:	44da      	add	sl, fp
 8021b4c:	b224      	sxth	r4, r4
 8021b4e:	42ac      	cmp	r4, r5
 8021b50:	4622      	mov	r2, r4
 8021b52:	dbec      	blt.n	8021b2e <st_sssa8_ch_convolve_dw+0x8ca>
 8021b54:	464e      	mov	r6, r9
 8021b56:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021b58:	3601      	adds	r6, #1
 8021b5a:	b236      	sxth	r6, r6
 8021b5c:	429e      	cmp	r6, r3
 8021b5e:	46b1      	mov	r9, r6
 8021b60:	dbd6      	blt.n	8021b10 <st_sssa8_ch_convolve_dw+0x8ac>
 8021b62:	e4d7      	b.n	8021514 <st_sssa8_ch_convolve_dw+0x2b0>
 8021b64:	9b03      	ldr	r3, [sp, #12]
 8021b66:	9820      	ldr	r0, [sp, #128]	; 0x80
 8021b68:	441a      	add	r2, r3
 8021b6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021b6c:	fb03 0102 	mla	r1, r3, r2, r0
 8021b70:	2b00      	cmp	r3, #0
 8021b72:	d0e9      	beq.n	8021b48 <st_sssa8_ch_convolve_dw+0x8e4>
 8021b74:	eb01 0c03 	add.w	ip, r1, r3
 8021b78:	4650      	mov	r0, sl
 8021b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021b7e:	021b      	lsls	r3, r3, #8
 8021b80:	4561      	cmp	r1, ip
 8021b82:	ea4f 2233 	mov.w	r2, r3, ror #8
 8021b86:	fa33 f382 	uxtab16	r3, r3, r2
 8021b8a:	f820 3b02 	strh.w	r3, [r0], #2
 8021b8e:	d1f4      	bne.n	8021b7a <st_sssa8_ch_convolve_dw+0x916>
 8021b90:	e7da      	b.n	8021b48 <st_sssa8_ch_convolve_dw+0x8e4>
 8021b92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021b94:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8021b96:	4618      	mov	r0, r3
 8021b98:	4288      	cmp	r0, r1
 8021b9a:	f77f acbb 	ble.w	8021514 <st_sssa8_ch_convolve_dw+0x2b0>
 8021b9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021ba0:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8021ba2:	fb02 0203 	mla	r2, r2, r3, r0
 8021ba6:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8021ba8:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8021bac:	1a15      	subs	r5, r2, r0
 8021bae:	9304      	str	r3, [sp, #16]
 8021bb0:	42ab      	cmp	r3, r5
 8021bb2:	f6bf acaf 	bge.w	8021514 <st_sssa8_ch_convolve_dw+0x2b0>
 8021bb6:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8021bba:	4689      	mov	r9, r1
 8021bbc:	460a      	mov	r2, r1
 8021bbe:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8021bc2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8021bc4:	fb06 f302 	mul.w	r3, r6, r2
 8021bc8:	ea4f 77d9 	mov.w	r7, r9, lsr #31
 8021bcc:	9904      	ldr	r1, [sp, #16]
 8021bce:	9303      	str	r3, [sp, #12]
 8021bd0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021bd2:	460c      	mov	r4, r1
 8021bd4:	4293      	cmp	r3, r2
 8021bd6:	bfd8      	it	le
 8021bd8:	f047 0701 	orrle.w	r7, r7, #1
 8021bdc:	428e      	cmp	r6, r1
 8021bde:	bfcc      	ite	gt
 8021be0:	2300      	movgt	r3, #0
 8021be2:	2301      	movle	r3, #1
 8021be4:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 8021be8:	d100      	bne.n	8021bec <st_sssa8_ch_convolve_dw+0x988>
 8021bea:	b19f      	cbz	r7, 8021c14 <st_sssa8_ch_convolve_dw+0x9b0>
 8021bec:	465a      	mov	r2, fp
 8021bee:	4651      	mov	r1, sl
 8021bf0:	4640      	mov	r0, r8
 8021bf2:	f001 fb21 	bl	8023238 <st_uint8_fill>
 8021bf6:	3401      	adds	r4, #1
 8021bf8:	44da      	add	sl, fp
 8021bfa:	b224      	sxth	r4, r4
 8021bfc:	42ac      	cmp	r4, r5
 8021bfe:	4621      	mov	r1, r4
 8021c00:	dbec      	blt.n	8021bdc <st_sssa8_ch_convolve_dw+0x978>
 8021c02:	f109 0901 	add.w	r9, r9, #1
 8021c06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021c08:	fa0f f989 	sxth.w	r9, r9
 8021c0c:	4599      	cmp	r9, r3
 8021c0e:	464a      	mov	r2, r9
 8021c10:	dbd8      	blt.n	8021bc4 <st_sssa8_ch_convolve_dw+0x960>
 8021c12:	e47f      	b.n	8021514 <st_sssa8_ch_convolve_dw+0x2b0>
 8021c14:	9b03      	ldr	r3, [sp, #12]
 8021c16:	185a      	adds	r2, r3, r1
 8021c18:	e9dd 311f 	ldrd	r3, r1, [sp, #124]	; 0x7c
 8021c1c:	fb03 1202 	mla	r2, r3, r2, r1
 8021c20:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8021c22:	2b00      	cmp	r3, #0
 8021c24:	d0e7      	beq.n	8021bf6 <st_sssa8_ch_convolve_dw+0x992>
 8021c26:	18d0      	adds	r0, r2, r3
 8021c28:	4651      	mov	r1, sl
 8021c2a:	f812 cb01 	ldrb.w	ip, [r2], #1
 8021c2e:	ea4f 630c 	mov.w	r3, ip, lsl #24
 8021c32:	4282      	cmp	r2, r0
 8021c34:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8021c38:	ea4f 2c33 	mov.w	ip, r3, ror #8
 8021c3c:	fa33 f38c 	uxtab16	r3, r3, ip
 8021c40:	f841 3b04 	str.w	r3, [r1], #4
 8021c44:	d1f1      	bne.n	8021c2a <st_sssa8_ch_convolve_dw+0x9c6>
 8021c46:	e7d6      	b.n	8021bf6 <st_sssa8_ch_convolve_dw+0x992>
 8021c48:	9b03      	ldr	r3, [sp, #12]
 8021c4a:	eb03 000c 	add.w	r0, r3, ip
 8021c4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021c50:	461a      	mov	r2, r3
 8021c52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021c54:	fb02 3000 	mla	r0, r2, r0, r3
 8021c58:	f003 fd0a 	bl	8025670 <arm_copy_q7>
 8021c5c:	e732      	b.n	8021ac4 <st_sssa8_ch_convolve_dw+0x860>
 8021c5e:	428e      	cmp	r6, r1
 8021c60:	f844 5f04 	str.w	r5, [r4, #4]!
 8021c64:	f47f ab3d 	bne.w	80212e2 <st_sssa8_ch_convolve_dw+0x7e>
 8021c68:	f7ff bb4a 	b.w	8021300 <st_sssa8_ch_convolve_dw+0x9c>
 8021c6c:	2401      	movs	r4, #1
 8021c6e:	f7ff bb6d 	b.w	802134c <st_sssa8_ch_convolve_dw+0xe8>
 8021c72:	bf00      	nop

08021c74 <st_sssa8_ch_convolve_rank1upd>:
 8021c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c78:	b083      	sub	sp, #12
 8021c7a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8021c7e:	f99d a038 	ldrsb.w	sl, [sp, #56]	; 0x38
 8021c82:	fb13 f304 	smulbb	r3, r3, r4
 8021c86:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021c88:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8021c8c:	fb13 f600 	smulbb	r6, r3, r0
 8021c90:	2a00      	cmp	r2, #0
 8021c92:	d06c      	beq.n	8021d6e <st_sssa8_ch_convolve_rank1upd+0xfa>
 8021c94:	b2b6      	uxth	r6, r6
 8021c96:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8021c9a:	ea4f 0944 	mov.w	r9, r4, lsl #1
 8021c9e:	ea4f 0b96 	mov.w	fp, r6, lsr #2
 8021ca2:	f006 0603 	and.w	r6, r6, #3
 8021ca6:	eb08 0e82 	add.w	lr, r8, r2, lsl #2
 8021caa:	f1a9 0904 	sub.w	r9, r9, #4
 8021cae:	f1ab 0381 	sub.w	r3, fp, #129	; 0x81
 8021cb2:	f1ab 0080 	sub.w	r0, fp, #128	; 0x80
 8021cb6:	44a9      	add	r9, r5
 8021cb8:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8021cbc:	ebc3 2243 	rsb	r2, r3, r3, lsl #9
 8021cc0:	3301      	adds	r3, #1
 8021cc2:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
 8021cc6:	ea4f 2c43 	mov.w	ip, r3, lsl #9
 8021cca:	b293      	uxth	r3, r2
 8021ccc:	9301      	str	r3, [sp, #4]
 8021cce:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 8021cd2:	d94f      	bls.n	8021d74 <st_sssa8_ch_convolve_rank1upd+0x100>
 8021cd4:	eb01 050c 	add.w	r5, r1, ip
 8021cd8:	2400      	movs	r4, #0
 8021cda:	2300      	movs	r3, #0
 8021cdc:	f501 7000 	add.w	r0, r1, #512	; 0x200
 8021ce0:	461f      	mov	r7, r3
 8021ce2:	f851 2b04 	ldr.w	r2, [r1], #4
 8021ce6:	fa2f f382 	sxtb16	r3, r2
 8021cea:	4288      	cmp	r0, r1
 8021cec:	ea4f 2232 	mov.w	r2, r2, ror #8
 8021cf0:	fa97 f313 	qadd16	r3, r7, r3
 8021cf4:	fa2f f282 	sxtb16	r2, r2
 8021cf8:	fa93 f712 	qadd16	r7, r3, r2
 8021cfc:	d1f1      	bne.n	8021ce2 <st_sssa8_ch_convolve_rank1upd+0x6e>
 8021cfe:	b23a      	sxth	r2, r7
 8021d00:	4285      	cmp	r5, r0
 8021d02:	4601      	mov	r1, r0
 8021d04:	eb02 4327 	add.w	r3, r2, r7, asr #16
 8021d08:	441c      	add	r4, r3
 8021d0a:	d1e6      	bne.n	8021cda <st_sssa8_ch_convolve_rank1upd+0x66>
 8021d0c:	9801      	ldr	r0, [sp, #4]
 8021d0e:	b1b8      	cbz	r0, 8021d40 <st_sssa8_ch_convolve_rank1upd+0xcc>
 8021d10:	3801      	subs	r0, #1
 8021d12:	2200      	movs	r2, #0
 8021d14:	b280      	uxth	r0, r0
 8021d16:	3001      	adds	r0, #1
 8021d18:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8021d1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8021d20:	fa2f f583 	sxtb16	r5, r3
 8021d24:	4281      	cmp	r1, r0
 8021d26:	ea4f 2333 	mov.w	r3, r3, ror #8
 8021d2a:	fa92 f215 	qadd16	r2, r2, r5
 8021d2e:	fa2f f383 	sxtb16	r3, r3
 8021d32:	fa92 f213 	qadd16	r2, r2, r3
 8021d36:	d1f1      	bne.n	8021d1c <st_sssa8_ch_convolve_rank1upd+0xa8>
 8021d38:	b213      	sxth	r3, r2
 8021d3a:	eb03 4222 	add.w	r2, r3, r2, asr #16
 8021d3e:	4414      	add	r4, r2
 8021d40:	b16e      	cbz	r6, 8021d5e <st_sssa8_ch_convolve_rank1upd+0xea>
 8021d42:	f991 3000 	ldrsb.w	r3, [r1]
 8021d46:	2e01      	cmp	r6, #1
 8021d48:	441c      	add	r4, r3
 8021d4a:	d018      	beq.n	8021d7e <st_sssa8_ch_convolve_rank1upd+0x10a>
 8021d4c:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8021d50:	2e02      	cmp	r6, #2
 8021d52:	441c      	add	r4, r3
 8021d54:	d011      	beq.n	8021d7a <st_sssa8_ch_convolve_rank1upd+0x106>
 8021d56:	f991 3002 	ldrsb.w	r3, [r1, #2]
 8021d5a:	3103      	adds	r1, #3
 8021d5c:	441c      	add	r4, r3
 8021d5e:	f858 3b04 	ldr.w	r3, [r8], #4
 8021d62:	fb0a 3414 	mls	r4, sl, r4, r3
 8021d66:	45c6      	cmp	lr, r8
 8021d68:	f849 4f04 	str.w	r4, [r9, #4]!
 8021d6c:	d1af      	bne.n	8021cce <st_sssa8_ch_convolve_rank1upd+0x5a>
 8021d6e:	b003      	add	sp, #12
 8021d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d74:	4658      	mov	r0, fp
 8021d76:	2400      	movs	r4, #0
 8021d78:	e7c9      	b.n	8021d0e <st_sssa8_ch_convolve_rank1upd+0x9a>
 8021d7a:	3102      	adds	r1, #2
 8021d7c:	e7ef      	b.n	8021d5e <st_sssa8_ch_convolve_rank1upd+0xea>
 8021d7e:	3101      	adds	r1, #1
 8021d80:	e7ed      	b.n	8021d5e <st_sssa8_ch_convolve_rank1upd+0xea>
 8021d82:	bf00      	nop

08021d84 <st_sssa8_ch_convolve>:
 8021d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d88:	b0d3      	sub	sp, #332	; 0x14c
 8021d8a:	4699      	mov	r9, r3
 8021d8c:	4688      	mov	r8, r1
 8021d8e:	f8bd 5174 	ldrh.w	r5, [sp, #372]	; 0x174
 8021d92:	f8bd 6178 	ldrh.w	r6, [sp, #376]	; 0x178
 8021d96:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8021d98:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8021d9c:	f8bd 717c 	ldrh.w	r7, [sp, #380]	; 0x17c
 8021da0:	4629      	mov	r1, r5
 8021da2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8021da6:	900d      	str	r0, [sp, #52]	; 0x34
 8021da8:	fb16 f307 	smulbb	r3, r6, r7
 8021dac:	ebc5 7045 	rsb	r0, r5, r5, lsl #29
 8021db0:	9519      	str	r5, [sp, #100]	; 0x64
 8021db2:	00ad      	lsls	r5, r5, #2
 8021db4:	fb13 f309 	smulbb	r3, r3, r9
 8021db8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8021dbc:	920b      	str	r2, [sp, #44]	; 0x2c
 8021dbe:	b29b      	uxth	r3, r3
 8021dc0:	4602      	mov	r2, r0
 8021dc2:	9022      	str	r0, [sp, #136]	; 0x88
 8021dc4:	931a      	str	r3, [sp, #104]	; 0x68
 8021dc6:	442a      	add	r2, r5
 8021dc8:	f8bd 3184 	ldrh.w	r3, [sp, #388]	; 0x184
 8021dcc:	f8bd 0180 	ldrh.w	r0, [sp, #384]	; 0x180
 8021dd0:	9323      	str	r3, [sp, #140]	; 0x8c
 8021dd2:	f8bd 3188 	ldrh.w	r3, [sp, #392]	; 0x188
 8021dd6:	9617      	str	r6, [sp, #92]	; 0x5c
 8021dd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8021dda:	f8bd 318c 	ldrh.w	r3, [sp, #396]	; 0x18c
 8021dde:	9414      	str	r4, [sp, #80]	; 0x50
 8021de0:	931b      	str	r3, [sp, #108]	; 0x6c
 8021de2:	f8bd 31a8 	ldrh.w	r3, [sp, #424]	; 0x1a8
 8021de6:	9725      	str	r7, [sp, #148]	; 0x94
 8021de8:	9311      	str	r3, [sp, #68]	; 0x44
 8021dea:	f8bd 31ac 	ldrh.w	r3, [sp, #428]	; 0x1ac
 8021dee:	9507      	str	r5, [sp, #28]
 8021df0:	9224      	str	r2, [sp, #144]	; 0x90
 8021df2:	9015      	str	r0, [sp, #84]	; 0x54
 8021df4:	9c66      	ldr	r4, [sp, #408]	; 0x198
 8021df6:	f99d b19c 	ldrsb.w	fp, [sp, #412]	; 0x19c
 8021dfa:	f99d 61a0 	ldrsb.w	r6, [sp, #416]	; 0x1a0
 8021dfe:	9320      	str	r3, [sp, #128]	; 0x80
 8021e00:	2900      	cmp	r1, #0
 8021e02:	f000 8505 	beq.w	8022810 <st_sssa8_ch_convolve+0xa8c>
 8021e06:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8021e0a:	4620      	mov	r0, r4
 8021e0c:	1f15      	subs	r5, r2, #4
 8021e0e:	2701      	movs	r7, #1
 8021e10:	4464      	add	r4, ip
 8021e12:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8021e16:	fa07 f103 	lsl.w	r1, r7, r3
 8021e1a:	fa06 f203 	lsl.w	r2, r6, r3
 8021e1e:	2b00      	cmp	r3, #0
 8021e20:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8021e24:	f340 816a 	ble.w	80220fc <st_sssa8_ch_convolve+0x378>
 8021e28:	4284      	cmp	r4, r0
 8021e2a:	f845 2f04 	str.w	r2, [r5, #4]!
 8021e2e:	d1f0      	bne.n	8021e12 <st_sssa8_ch_convolve+0x8e>
 8021e30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021e32:	9a07      	ldr	r2, [sp, #28]
 8021e34:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8021e36:	189d      	adds	r5, r3, r2
 8021e38:	eba4 010c 	sub.w	r1, r4, ip
 8021e3c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021e3e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021e40:	aa3a      	add	r2, sp, #232	; 0xe8
 8021e42:	974a      	str	r7, [sp, #296]	; 0x128
 8021e44:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8021e48:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8021e4a:	ab36      	add	r3, sp, #216	; 0xd8
 8021e4c:	9433      	str	r4, [sp, #204]	; 0xcc
 8021e4e:	a83e      	add	r0, sp, #248	; 0xf8
 8021e50:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021e52:	974b      	str	r7, [sp, #300]	; 0x12c
 8021e54:	9438      	str	r4, [sp, #224]	; 0xe0
 8021e56:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8021e58:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8021e5a:	974c      	str	r7, [sp, #304]	; 0x130
 8021e5c:	9437      	str	r4, [sp, #220]	; 0xdc
 8021e5e:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8021e60:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021e62:	9200      	str	r2, [sp, #0]
 8021e64:	aa32      	add	r2, sp, #200	; 0xc8
 8021e66:	9121      	str	r1, [sp, #132]	; 0x84
 8021e68:	a948      	add	r1, sp, #288	; 0x120
 8021e6a:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
 8021e6e:	974d      	str	r7, [sp, #308]	; 0x134
 8021e70:	e9cd 643b 	strd	r6, r4, [sp, #236]	; 0xec
 8021e74:	f001 f96a 	bl	802314c <ai_padding_opt_init>
 8021e78:	fb0a f204 	mul.w	r2, sl, r4
 8021e7c:	e9dd 3119 	ldrd	r3, r1, [sp, #100]	; 0x64
 8021e80:	fb06 f202 	mul.w	r2, r6, r2
 8021e84:	fb03 f301 	mul.w	r3, r3, r1
 8021e88:	9914      	ldr	r1, [sp, #80]	; 0x50
 8021e8a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8021e8e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8021e92:	921c      	str	r2, [sp, #112]	; 0x70
 8021e94:	f340 84ae 	ble.w	80227f4 <st_sssa8_ch_convolve+0xa70>
 8021e98:	2300      	movs	r3, #0
 8021e9a:	932e      	str	r3, [sp, #184]	; 0xb8
 8021e9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021e9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021ea0:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 8021ea2:	fb03 f302 	mul.w	r3, r3, r2
 8021ea6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8021ea8:	fb02 1303 	mla	r3, r2, r3, r1
 8021eac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021eae:	429a      	cmp	r2, r3
 8021eb0:	f080 812a 	bcs.w	8022108 <st_sssa8_ch_convolve+0x384>
 8021eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021eb6:	fb03 f308 	mul.w	r3, r3, r8
 8021eba:	fb09 2303 	mla	r3, r9, r3, r2
 8021ebe:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8021ec0:	429a      	cmp	r2, r3
 8021ec2:	bf2c      	ite	cs
 8021ec4:	2300      	movcs	r3, #0
 8021ec6:	2301      	movcc	r3, #1
 8021ec8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8021eca:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8021ece:	fb92 f2f1 	sdiv	r2, r2, r1
 8021ed2:	9919      	ldr	r1, [sp, #100]	; 0x64
 8021ed4:	f022 0201 	bic.w	r2, r2, #1
 8021ed8:	428a      	cmp	r2, r1
 8021eda:	bf28      	it	cs
 8021edc:	460a      	movcs	r2, r1
 8021ede:	2a01      	cmp	r2, #1
 8021ee0:	921f      	str	r2, [sp, #124]	; 0x7c
 8021ee2:	f240 82ec 	bls.w	80224be <st_sssa8_ch_convolve+0x73a>
 8021ee6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021ee8:	460a      	mov	r2, r1
 8021eea:	fbb1 f1f0 	udiv	r1, r1, r0
 8021eee:	fb00 2211 	mls	r2, r0, r1, r2
 8021ef2:	b289      	uxth	r1, r1
 8021ef4:	b292      	uxth	r2, r2
 8021ef6:	912c      	str	r1, [sp, #176]	; 0xb0
 8021ef8:	b11a      	cbz	r2, 8021f02 <st_sssa8_ch_convolve+0x17e>
 8021efa:	460a      	mov	r2, r1
 8021efc:	3201      	adds	r2, #1
 8021efe:	b292      	uxth	r2, r2
 8021f00:	922c      	str	r2, [sp, #176]	; 0xb0
 8021f02:	2b00      	cmp	r3, #0
 8021f04:	f040 8102 	bne.w	802210c <st_sssa8_ch_convolve+0x388>
 8021f08:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021f0a:	fa0f fb8b 	sxth.w	fp, fp
 8021f0e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021f10:	fb09 f201 	mul.w	r2, r9, r1
 8021f14:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021f16:	005b      	lsls	r3, r3, #1
 8021f18:	9216      	str	r2, [sp, #88]	; 0x58
 8021f1a:	0052      	lsls	r2, r2, #1
 8021f1c:	fb01 f303 	mul.w	r3, r1, r3
 8021f20:	9207      	str	r2, [sp, #28]
 8021f22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021f24:	9026      	str	r0, [sp, #152]	; 0x98
 8021f26:	fb0a 2303 	mla	r3, sl, r3, r2
 8021f2a:	4652      	mov	r2, sl
 8021f2c:	46ca      	mov	sl, r9
 8021f2e:	9313      	str	r3, [sp, #76]	; 0x4c
 8021f30:	465b      	mov	r3, fp
 8021f32:	4691      	mov	r9, r2
 8021f34:	46c3      	mov	fp, r8
 8021f36:	4698      	mov	r8, r3
 8021f38:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021f3a:	1e5a      	subs	r2, r3, #1
 8021f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021f40:	b292      	uxth	r2, r2
 8021f42:	429a      	cmp	r2, r3
 8021f44:	922c      	str	r2, [sp, #176]	; 0xb0
 8021f46:	f000 82b6 	beq.w	80224b6 <st_sssa8_ch_convolve+0x732>
 8021f4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021f4c:	b92b      	cbnz	r3, 8021f5a <st_sssa8_ch_convolve+0x1d6>
 8021f4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021f50:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8021f52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8021f54:	985c      	ldr	r0, [sp, #368]	; 0x170
 8021f56:	f001 fdbb 	bl	8023ad0 <st_int8_to16_dual>
 8021f5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	f000 80a9 	beq.w	80220b4 <st_sssa8_ch_convolve+0x330>
 8021f62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021f64:	2400      	movs	r4, #0
 8021f66:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8021f68:	425b      	negs	r3, r3
 8021f6a:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8021f6c:	941e      	str	r4, [sp, #120]	; 0x78
 8021f6e:	b29b      	uxth	r3, r3
 8021f70:	921d      	str	r2, [sp, #116]	; 0x74
 8021f72:	9318      	str	r3, [sp, #96]	; 0x60
 8021f74:	4643      	mov	r3, r8
 8021f76:	46c8      	mov	r8, r9
 8021f78:	46b9      	mov	r9, r7
 8021f7a:	461f      	mov	r7, r3
 8021f7c:	a83e      	add	r0, sp, #248	; 0xf8
 8021f7e:	f001 f93f 	bl	8023200 <ai_padding_opt_phase1>
 8021f82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021f84:	2b00      	cmp	r3, #0
 8021f86:	d06e      	beq.n	8022066 <st_sssa8_ch_convolve+0x2e2>
 8021f88:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021f8a:	2500      	movs	r5, #0
 8021f8c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8021f8e:	9510      	str	r5, [sp, #64]	; 0x40
 8021f90:	1a99      	subs	r1, r3, r2
 8021f92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021f94:	425a      	negs	r2, r3
 8021f96:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 8021f9a:	9312      	str	r3, [sp, #72]	; 0x48
 8021f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021f9e:	fb04 1303 	mla	r3, r4, r3, r1
 8021fa2:	9308      	str	r3, [sp, #32]
 8021fa4:	b293      	uxth	r3, r2
 8021fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8021fa8:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8021faa:	2a00      	cmp	r2, #0
 8021fac:	f040 8192 	bne.w	80222d4 <st_sssa8_ch_convolve+0x550>
 8021fb0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8021fb2:	2a00      	cmp	r2, #0
 8021fb4:	f040 8194 	bne.w	80222e0 <st_sssa8_ch_convolve+0x55c>
 8021fb8:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8021fba:	2101      	movs	r1, #1
 8021fbc:	3a01      	subs	r2, #1
 8021fbe:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 8021fc2:	9240      	str	r2, [sp, #256]	; 0x100
 8021fc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021fc6:	9a08      	ldr	r2, [sp, #32]
 8021fc8:	4293      	cmp	r3, r2
 8021fca:	da3a      	bge.n	8022042 <st_sssa8_ch_convolve+0x2be>
 8021fcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021fce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8021fd0:	fb05 2503 	mla	r5, r5, r3, r2
 8021fd4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8021fd8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8021fda:	930e      	str	r3, [sp, #56]	; 0x38
 8021fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021fde:	1aad      	subs	r5, r5, r2
 8021fe0:	461e      	mov	r6, r3
 8021fe2:	461a      	mov	r2, r3
 8021fe4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021fe6:	428d      	cmp	r5, r1
 8021fe8:	dd25      	ble.n	8022036 <st_sssa8_ch_convolve+0x2b2>
 8021fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021fec:	460c      	mov	r4, r1
 8021fee:	9609      	str	r6, [sp, #36]	; 0x24
 8021ff0:	468c      	mov	ip, r1
 8021ff2:	4293      	cmp	r3, r2
 8021ff4:	fb02 f20b 	mul.w	r2, r2, fp
 8021ff8:	bfcc      	ite	gt
 8021ffa:	2300      	movgt	r3, #0
 8021ffc:	2301      	movle	r3, #1
 8021ffe:	920c      	str	r2, [sp, #48]	; 0x30
 8022000:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 8022004:	461e      	mov	r6, r3
 8022006:	45e3      	cmp	fp, ip
 8022008:	4652      	mov	r2, sl
 802200a:	4649      	mov	r1, r9
 802200c:	4638      	mov	r0, r7
 802200e:	bfcc      	ite	gt
 8022010:	f04f 0e00 	movgt.w	lr, #0
 8022014:	f04f 0e01 	movle.w	lr, #1
 8022018:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 802201c:	d102      	bne.n	8022024 <st_sssa8_ch_convolve+0x2a0>
 802201e:	2e00      	cmp	r6, #0
 8022020:	f000 8146 	beq.w	80222b0 <st_sssa8_ch_convolve+0x52c>
 8022024:	f003 fb46 	bl	80256b4 <arm_fill_q15>
 8022028:	3401      	adds	r4, #1
 802202a:	44c1      	add	r9, r8
 802202c:	b224      	sxth	r4, r4
 802202e:	42ac      	cmp	r4, r5
 8022030:	46a4      	mov	ip, r4
 8022032:	dbe8      	blt.n	8022006 <st_sssa8_ch_convolve+0x282>
 8022034:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8022036:	3601      	adds	r6, #1
 8022038:	9b08      	ldr	r3, [sp, #32]
 802203a:	b236      	sxth	r6, r6
 802203c:	429e      	cmp	r6, r3
 802203e:	4632      	mov	r2, r6
 8022040:	dbd0      	blt.n	8021fe4 <st_sssa8_ch_convolve+0x260>
 8022042:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022044:	454b      	cmp	r3, r9
 8022046:	f000 8179 	beq.w	802233c <st_sssa8_ch_convolve+0x5b8>
 802204a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802204c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802204e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8022050:	4403      	add	r3, r0
 8022052:	3101      	adds	r1, #1
 8022054:	461a      	mov	r2, r3
 8022056:	b20b      	sxth	r3, r1
 8022058:	b292      	uxth	r2, r2
 802205a:	9310      	str	r3, [sp, #64]	; 0x40
 802205c:	461d      	mov	r5, r3
 802205e:	920a      	str	r2, [sp, #40]	; 0x28
 8022060:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022062:	429a      	cmp	r2, r3
 8022064:	dca0      	bgt.n	8021fa8 <st_sssa8_ch_convolve+0x224>
 8022066:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022068:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802206a:	991e      	ldr	r1, [sp, #120]	; 0x78
 802206c:	4403      	add	r3, r0
 802206e:	3101      	adds	r1, #1
 8022070:	461a      	mov	r2, r3
 8022072:	b20b      	sxth	r3, r1
 8022074:	b292      	uxth	r2, r2
 8022076:	931e      	str	r3, [sp, #120]	; 0x78
 8022078:	461c      	mov	r4, r3
 802207a:	9218      	str	r2, [sp, #96]	; 0x60
 802207c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802207e:	429a      	cmp	r2, r3
 8022080:	f73f af7c 	bgt.w	8021f7c <st_sssa8_ch_convolve+0x1f8>
 8022084:	463b      	mov	r3, r7
 8022086:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022088:	464f      	mov	r7, r9
 802208a:	46c1      	mov	r9, r8
 802208c:	4698      	mov	r8, r3
 802208e:	42b9      	cmp	r1, r7
 8022090:	d010      	beq.n	80220b4 <st_sssa8_ch_convolve+0x330>
 8022092:	9865      	ldr	r0, [sp, #404]	; 0x194
 8022094:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022096:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022098:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802209a:	9003      	str	r0, [sp, #12]
 802209c:	9401      	str	r4, [sp, #4]
 802209e:	9821      	ldr	r0, [sp, #132]	; 0x84
 80220a0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80220a2:	9305      	str	r3, [sp, #20]
 80220a4:	9204      	str	r2, [sp, #16]
 80220a6:	9002      	str	r0, [sp, #8]
 80220a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80220aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80220ac:	981c      	ldr	r0, [sp, #112]	; 0x70
 80220ae:	9400      	str	r4, [sp, #0]
 80220b0:	f002 fee2 	bl	8024e78 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 80220b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80220b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80220b8:	4611      	mov	r1, r2
 80220ba:	1a9b      	subs	r3, r3, r2
 80220bc:	b298      	uxth	r0, r3
 80220be:	4282      	cmp	r2, r0
 80220c0:	9026      	str	r0, [sp, #152]	; 0x98
 80220c2:	bf28      	it	cs
 80220c4:	4601      	movcs	r1, r0
 80220c6:	460b      	mov	r3, r1
 80220c8:	b1b1      	cbz	r1, 80220f8 <st_sssa8_ch_convolve+0x374>
 80220ca:	4611      	mov	r1, r2
 80220cc:	9d5c      	ldr	r5, [sp, #368]	; 0x170
 80220ce:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80220d0:	0092      	lsls	r2, r2, #2
 80220d2:	fb04 5001 	mla	r0, r4, r1, r5
 80220d6:	905c      	str	r0, [sp, #368]	; 0x170
 80220d8:	9821      	ldr	r0, [sp, #132]	; 0x84
 80220da:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80220de:	9021      	str	r0, [sp, #132]	; 0x84
 80220e0:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 80220e2:	4408      	add	r0, r1
 80220e4:	9922      	ldr	r1, [sp, #136]	; 0x88
 80220e6:	4411      	add	r1, r2
 80220e8:	9069      	str	r0, [sp, #420]	; 0x1a4
 80220ea:	9122      	str	r1, [sp, #136]	; 0x88
 80220ec:	9965      	ldr	r1, [sp, #404]	; 0x194
 80220ee:	4411      	add	r1, r2
 80220f0:	9165      	str	r1, [sp, #404]	; 0x194
 80220f2:	9924      	ldr	r1, [sp, #144]	; 0x90
 80220f4:	4411      	add	r1, r2
 80220f6:	9124      	str	r1, [sp, #144]	; 0x90
 80220f8:	931f      	str	r3, [sp, #124]	; 0x7c
 80220fa:	e71d      	b.n	8021f38 <st_sssa8_ch_convolve+0x1b4>
 80220fc:	4284      	cmp	r4, r0
 80220fe:	f845 6f04 	str.w	r6, [r5, #4]!
 8022102:	f47f ae86 	bne.w	8021e12 <st_sssa8_ch_convolve+0x8e>
 8022106:	e693      	b.n	8021e30 <st_sssa8_ch_convolve+0xac>
 8022108:	2300      	movs	r3, #0
 802210a:	e6dd      	b.n	8021ec8 <st_sssa8_ch_convolve+0x144>
 802210c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802210e:	2b00      	cmp	r3, #0
 8022110:	f000 81d1 	beq.w	80224b6 <st_sssa8_ch_convolve+0x732>
 8022114:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022116:	2400      	movs	r4, #0
 8022118:	9925      	ldr	r1, [sp, #148]	; 0x94
 802211a:	4242      	negs	r2, r0
 802211c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802211e:	004b      	lsls	r3, r1, #1
 8022120:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 8022124:	b292      	uxth	r2, r2
 8022126:	fb09 f506 	mul.w	r5, r9, r6
 802212a:	fb06 f303 	mul.w	r3, r6, r3
 802212e:	1a09      	subs	r1, r1, r0
 8022130:	922f      	str	r2, [sp, #188]	; 0xbc
 8022132:	fa0f f68b 	sxth.w	r6, fp
 8022136:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022138:	46c3      	mov	fp, r8
 802213a:	9507      	str	r5, [sp, #28]
 802213c:	fb0a 2303 	mla	r3, sl, r3, r2
 8022140:	46ca      	mov	sl, r9
 8022142:	9430      	str	r4, [sp, #192]	; 0xc0
 8022144:	9316      	str	r3, [sp, #88]	; 0x58
 8022146:	006b      	lsls	r3, r5, #1
 8022148:	9613      	str	r6, [sp, #76]	; 0x4c
 802214a:	9131      	str	r1, [sp, #196]	; 0xc4
 802214c:	931d      	str	r3, [sp, #116]	; 0x74
 802214e:	a83e      	add	r0, sp, #248	; 0xf8
 8022150:	f001 f856 	bl	8023200 <ai_padding_opt_phase1>
 8022154:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022156:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022158:	fb04 f303 	mul.w	r3, r4, r3
 802215c:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 802215e:	fb02 1303 	mla	r3, r2, r3, r1
 8022162:	9323      	str	r3, [sp, #140]	; 0x8c
 8022164:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022166:	b92b      	cbnz	r3, 8022174 <st_sssa8_ch_convolve+0x3f0>
 8022168:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802216a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802216c:	991c      	ldr	r1, [sp, #112]	; 0x70
 802216e:	985c      	ldr	r0, [sp, #368]	; 0x170
 8022170:	f001 fcae 	bl	8023ad0 <st_int8_to16_dual>
 8022174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022176:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8022178:	fb03 2304 	mla	r3, r3, r4, r2
 802217c:	9308      	str	r3, [sp, #32]
 802217e:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8022182:	9312      	str	r3, [sp, #72]	; 0x48
 8022184:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022186:	9325      	str	r3, [sp, #148]	; 0x94
 8022188:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802218a:	932a      	str	r3, [sp, #168]	; 0xa8
 802218c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802218e:	9318      	str	r3, [sp, #96]	; 0x60
 8022190:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8022192:	932d      	str	r3, [sp, #180]	; 0xb4
 8022194:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022196:	9326      	str	r3, [sp, #152]	; 0x98
 8022198:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802219a:	9328      	str	r3, [sp, #160]	; 0xa0
 802219c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802219e:	9329      	str	r3, [sp, #164]	; 0xa4
 80221a0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80221a2:	9327      	str	r3, [sp, #156]	; 0x9c
 80221a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80221a6:	1e5a      	subs	r2, r3, #1
 80221a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80221ac:	b292      	uxth	r2, r2
 80221ae:	429a      	cmp	r2, r3
 80221b0:	9225      	str	r2, [sp, #148]	; 0x94
 80221b2:	f000 8172 	beq.w	802249a <st_sssa8_ch_convolve+0x716>
 80221b6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80221b8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80221ba:	9942      	ldr	r1, [sp, #264]	; 0x108
 80221bc:	9340      	str	r3, [sp, #256]	; 0x100
 80221be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80221c0:	e9cd 213e 	strd	r2, r1, [sp, #248]	; 0xf8
 80221c4:	2b00      	cmp	r3, #0
 80221c6:	f000 813e 	beq.w	8022446 <st_sssa8_ch_convolve+0x6c2>
 80221ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80221cc:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80221ce:	4259      	negs	r1, r3
 80221d0:	2300      	movs	r3, #0
 80221d2:	901e      	str	r0, [sp, #120]	; 0x78
 80221d4:	b289      	uxth	r1, r1
 80221d6:	9310      	str	r3, [sp, #64]	; 0x40
 80221d8:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 80221dc:	910a      	str	r1, [sp, #40]	; 0x28
 80221de:	4619      	mov	r1, r3
 80221e0:	2a00      	cmp	r2, #0
 80221e2:	d15f      	bne.n	80222a4 <st_sssa8_ch_convolve+0x520>
 80221e4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80221e6:	2a00      	cmp	r2, #0
 80221e8:	f040 80cc 	bne.w	8022384 <st_sssa8_ch_convolve+0x600>
 80221ec:	9a40      	ldr	r2, [sp, #256]	; 0x100
 80221ee:	2001      	movs	r0, #1
 80221f0:	3a01      	subs	r2, #1
 80221f2:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 80221f6:	9240      	str	r2, [sp, #256]	; 0x100
 80221f8:	9b08      	ldr	r3, [sp, #32]
 80221fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80221fc:	4293      	cmp	r3, r2
 80221fe:	dd3b      	ble.n	8022278 <st_sssa8_ch_convolve+0x4f4>
 8022200:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022202:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022204:	f8dd 80ac 	ldr.w	r8, [sp, #172]	; 0xac
 8022208:	fb01 2103 	mla	r1, r1, r3, r2
 802220c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8022210:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022212:	930e      	str	r3, [sp, #56]	; 0x38
 8022214:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022216:	4617      	mov	r7, r2
 8022218:	1ace      	subs	r6, r1, r3
 802221a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802221c:	429e      	cmp	r6, r3
 802221e:	dd25      	ble.n	802226c <st_sssa8_ch_convolve+0x4e8>
 8022220:	f3c7 35c0 	ubfx	r5, r7, #15, #1
 8022224:	461c      	mov	r4, r3
 8022226:	469c      	mov	ip, r3
 8022228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802222a:	fb0b f102 	mul.w	r1, fp, r2
 802222e:	4293      	cmp	r3, r2
 8022230:	bfd8      	it	le
 8022232:	f045 0501 	orrle.w	r5, r5, #1
 8022236:	9709      	str	r7, [sp, #36]	; 0x24
 8022238:	910c      	str	r1, [sp, #48]	; 0x30
 802223a:	462f      	mov	r7, r5
 802223c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802223e:	45e3      	cmp	fp, ip
 8022240:	4652      	mov	r2, sl
 8022242:	4649      	mov	r1, r9
 8022244:	4628      	mov	r0, r5
 8022246:	bfcc      	ite	gt
 8022248:	f04f 0e00 	movgt.w	lr, #0
 802224c:	f04f 0e01 	movle.w	lr, #1
 8022250:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 8022254:	d101      	bne.n	802225a <st_sssa8_ch_convolve+0x4d6>
 8022256:	2f00      	cmp	r7, #0
 8022258:	d033      	beq.n	80222c2 <st_sssa8_ch_convolve+0x53e>
 802225a:	f003 fa2b 	bl	80256b4 <arm_fill_q15>
 802225e:	3401      	adds	r4, #1
 8022260:	44c1      	add	r9, r8
 8022262:	b224      	sxth	r4, r4
 8022264:	42b4      	cmp	r4, r6
 8022266:	46a4      	mov	ip, r4
 8022268:	dbe9      	blt.n	802223e <st_sssa8_ch_convolve+0x4ba>
 802226a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802226c:	3701      	adds	r7, #1
 802226e:	9b08      	ldr	r3, [sp, #32]
 8022270:	b23f      	sxth	r7, r7
 8022272:	429f      	cmp	r7, r3
 8022274:	463a      	mov	r2, r7
 8022276:	dbd0      	blt.n	802221a <st_sssa8_ch_convolve+0x496>
 8022278:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802227a:	454b      	cmp	r3, r9
 802227c:	f000 80ac 	beq.w	80223d8 <st_sssa8_ch_convolve+0x654>
 8022280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022282:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022284:	9910      	ldr	r1, [sp, #64]	; 0x40
 8022286:	4403      	add	r3, r0
 8022288:	3101      	adds	r1, #1
 802228a:	461a      	mov	r2, r3
 802228c:	b20b      	sxth	r3, r1
 802228e:	b292      	uxth	r2, r2
 8022290:	9310      	str	r3, [sp, #64]	; 0x40
 8022292:	4619      	mov	r1, r3
 8022294:	920a      	str	r2, [sp, #40]	; 0x28
 8022296:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022298:	429a      	cmp	r2, r3
 802229a:	f340 80c0 	ble.w	802241e <st_sssa8_ch_convolve+0x69a>
 802229e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80222a0:	2a00      	cmp	r2, #0
 80222a2:	d09f      	beq.n	80221e4 <st_sssa8_ch_convolve+0x460>
 80222a4:	3a01      	subs	r2, #1
 80222a6:	2001      	movs	r0, #1
 80222a8:	923e      	str	r2, [sp, #248]	; 0xf8
 80222aa:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 80222ae:	e7a3      	b.n	80221f8 <st_sssa8_ch_convolve+0x474>
 80222b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80222b2:	eb03 000c 	add.w	r0, r3, ip
 80222b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80222b8:	fb0a 3000 	mla	r0, sl, r0, r3
 80222bc:	f001 fb66 	bl	802398c <st_int8_to16_no_shift>
 80222c0:	e6b2      	b.n	8022028 <st_sssa8_ch_convolve+0x2a4>
 80222c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80222c4:	eb03 000c 	add.w	r0, r3, ip
 80222c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80222ca:	fb0a 3000 	mla	r0, sl, r0, r3
 80222ce:	f001 fb5d 	bl	802398c <st_int8_to16_no_shift>
 80222d2:	e7c4      	b.n	802225e <st_sssa8_ch_convolve+0x4da>
 80222d4:	3a01      	subs	r2, #1
 80222d6:	2101      	movs	r1, #1
 80222d8:	923e      	str	r2, [sp, #248]	; 0xf8
 80222da:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 80222de:	e671      	b.n	8021fc4 <st_sssa8_ch_convolve+0x240>
 80222e0:	f8bd 111c 	ldrh.w	r1, [sp, #284]	; 0x11c
 80222e4:	3a01      	subs	r2, #1
 80222e6:	2901      	cmp	r1, #1
 80222e8:	923f      	str	r2, [sp, #252]	; 0xfc
 80222ea:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 80222ee:	f43f ae69 	beq.w	8021fc4 <st_sssa8_ch_convolve+0x240>
 80222f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80222f4:	9e08      	ldr	r6, [sp, #32]
 80222f6:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 80222fa:	42b3      	cmp	r3, r6
 80222fc:	f6bf aea1 	bge.w	8022042 <st_sssa8_ch_convolve+0x2be>
 8022300:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8022304:	461d      	mov	r5, r3
 8022306:	970c      	str	r7, [sp, #48]	; 0x30
 8022308:	4618      	mov	r0, r3
 802230a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 802230e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022310:	3501      	adds	r5, #1
 8022312:	fb00 400b 	mla	r0, r0, fp, r4
 8022316:	9b07      	ldr	r3, [sp, #28]
 8022318:	4649      	mov	r1, r9
 802231a:	b22d      	sxth	r5, r5
 802231c:	fb0a 7000 	mla	r0, sl, r0, r7
 8022320:	4642      	mov	r2, r8
 8022322:	4499      	add	r9, r3
 8022324:	f001 fb32 	bl	802398c <st_int8_to16_no_shift>
 8022328:	42b5      	cmp	r5, r6
 802232a:	4628      	mov	r0, r5
 802232c:	dbf0      	blt.n	8022310 <st_sssa8_ch_convolve+0x58c>
 802232e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022330:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8022334:	454b      	cmp	r3, r9
 8022336:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022338:	f47f ae87 	bne.w	802204a <st_sssa8_ch_convolve+0x2c6>
 802233c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802233e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022340:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022342:	9965      	ldr	r1, [sp, #404]	; 0x194
 8022344:	9821      	ldr	r0, [sp, #132]	; 0x84
 8022346:	9401      	str	r4, [sp, #4]
 8022348:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 802234a:	9305      	str	r3, [sp, #20]
 802234c:	9204      	str	r2, [sp, #16]
 802234e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022350:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022352:	9103      	str	r1, [sp, #12]
 8022354:	9002      	str	r0, [sp, #8]
 8022356:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022358:	981c      	ldr	r0, [sp, #112]	; 0x70
 802235a:	9400      	str	r4, [sp, #0]
 802235c:	f002 fac4 	bl	80248e8 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8022360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022362:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022364:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022366:	440b      	add	r3, r1
 8022368:	901d      	str	r0, [sp, #116]	; 0x74
 802236a:	3201      	adds	r2, #1
 802236c:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8022370:	b29b      	uxth	r3, r3
 8022372:	b212      	sxth	r2, r2
 8022374:	930a      	str	r3, [sp, #40]	; 0x28
 8022376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022378:	4615      	mov	r5, r2
 802237a:	9210      	str	r2, [sp, #64]	; 0x40
 802237c:	4293      	cmp	r3, r2
 802237e:	f73f ae13 	bgt.w	8021fa8 <st_sssa8_ch_convolve+0x224>
 8022382:	e670      	b.n	8022066 <st_sssa8_ch_convolve+0x2e2>
 8022384:	f8bd 011c 	ldrh.w	r0, [sp, #284]	; 0x11c
 8022388:	3a01      	subs	r2, #1
 802238a:	2801      	cmp	r0, #1
 802238c:	923f      	str	r2, [sp, #252]	; 0xfc
 802238e:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8022392:	f43f af31 	beq.w	80221f8 <st_sssa8_ch_convolve+0x474>
 8022396:	9f08      	ldr	r7, [sp, #32]
 8022398:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802239a:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 802239e:	4297      	cmp	r7, r2
 80223a0:	f77f af6a 	ble.w	8022278 <st_sssa8_ch_convolve+0x4f4>
 80223a4:	464e      	mov	r6, r9
 80223a6:	4615      	mov	r5, r2
 80223a8:	4610      	mov	r0, r2
 80223aa:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 80223ae:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80223b2:	3501      	adds	r5, #1
 80223b4:	fb00 400b 	mla	r0, r0, fp, r4
 80223b8:	4631      	mov	r1, r6
 80223ba:	9a07      	ldr	r2, [sp, #28]
 80223bc:	b22d      	sxth	r5, r5
 80223be:	fb0a 8000 	mla	r0, sl, r0, r8
 80223c2:	f001 fae3 	bl	802398c <st_int8_to16_no_shift>
 80223c6:	444e      	add	r6, r9
 80223c8:	42bd      	cmp	r5, r7
 80223ca:	4628      	mov	r0, r5
 80223cc:	dbf1      	blt.n	80223b2 <st_sssa8_ch_convolve+0x62e>
 80223ce:	46b1      	mov	r9, r6
 80223d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80223d2:	454b      	cmp	r3, r9
 80223d4:	f47f af54 	bne.w	8022280 <st_sssa8_ch_convolve+0x4fc>
 80223d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80223da:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80223dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80223de:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80223e0:	9204      	str	r2, [sp, #16]
 80223e2:	9401      	str	r4, [sp, #4]
 80223e4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80223e6:	9305      	str	r3, [sp, #20]
 80223e8:	9002      	str	r0, [sp, #8]
 80223ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80223ec:	981c      	ldr	r0, [sp, #112]	; 0x70
 80223ee:	9400      	str	r4, [sp, #0]
 80223f0:	e9dd 1227 	ldrd	r1, r2, [sp, #156]	; 0x9c
 80223f4:	9103      	str	r1, [sp, #12]
 80223f6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80223f8:	f002 fa76 	bl	80248e8 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 80223fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022400:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022402:	440b      	add	r3, r1
 8022404:	901e      	str	r0, [sp, #120]	; 0x78
 8022406:	3201      	adds	r2, #1
 8022408:	b29b      	uxth	r3, r3
 802240a:	b212      	sxth	r2, r2
 802240c:	930a      	str	r3, [sp, #40]	; 0x28
 802240e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022410:	4611      	mov	r1, r2
 8022412:	9210      	str	r2, [sp, #64]	; 0x40
 8022414:	4293      	cmp	r3, r2
 8022416:	dd16      	ble.n	8022446 <st_sssa8_ch_convolve+0x6c2>
 8022418:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 802241c:	e73f      	b.n	802229e <st_sssa8_ch_convolve+0x51a>
 802241e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022420:	4589      	cmp	r9, r1
 8022422:	d010      	beq.n	8022446 <st_sssa8_ch_convolve+0x6c2>
 8022424:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022426:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022428:	9204      	str	r2, [sp, #16]
 802242a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802242c:	9401      	str	r4, [sp, #4]
 802242e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022430:	9305      	str	r3, [sp, #20]
 8022432:	9400      	str	r4, [sp, #0]
 8022434:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022436:	e9dd 0227 	ldrd	r0, r2, [sp, #156]	; 0x9c
 802243a:	9003      	str	r0, [sp, #12]
 802243c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802243e:	9002      	str	r0, [sp, #8]
 8022440:	981c      	ldr	r0, [sp, #112]	; 0x70
 8022442:	f002 fd19 	bl	8024e78 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8022446:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8022448:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802244a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 802244c:	1a9b      	subs	r3, r3, r2
 802244e:	4608      	mov	r0, r1
 8022450:	b29b      	uxth	r3, r3
 8022452:	4410      	add	r0, r2
 8022454:	429a      	cmp	r2, r3
 8022456:	932a      	str	r3, [sp, #168]	; 0xa8
 8022458:	9023      	str	r0, [sp, #140]	; 0x8c
 802245a:	bf28      	it	cs
 802245c:	461a      	movcs	r2, r3
 802245e:	b294      	uxth	r4, r2
 8022460:	b90c      	cbnz	r4, 8022466 <st_sssa8_ch_convolve+0x6e2>
 8022462:	9418      	str	r4, [sp, #96]	; 0x60
 8022464:	e69e      	b.n	80221a4 <st_sssa8_ch_convolve+0x420>
 8022466:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022468:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 802246a:	4619      	mov	r1, r3
 802246c:	009d      	lsls	r5, r3, #2
 802246e:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8022470:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8022474:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8022476:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8022478:	442e      	add	r6, r5
 802247a:	9129      	str	r1, [sp, #164]	; 0xa4
 802247c:	fb02 0003 	mla	r0, r2, r3, r0
 8022480:	991c      	ldr	r1, [sp, #112]	; 0x70
 8022482:	9628      	str	r6, [sp, #160]	; 0xa0
 8022484:	4623      	mov	r3, r4
 8022486:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8022488:	902d      	str	r0, [sp, #180]	; 0xb4
 802248a:	442e      	add	r6, r5
 802248c:	9627      	str	r6, [sp, #156]	; 0x9c
 802248e:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8022490:	442e      	add	r6, r5
 8022492:	9626      	str	r6, [sp, #152]	; 0x98
 8022494:	f001 fb1c 	bl	8023ad0 <st_int8_to16_dual>
 8022498:	e7e3      	b.n	8022462 <st_sssa8_ch_convolve+0x6de>
 802249a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802249c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 802249e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80224a0:	440b      	add	r3, r1
 80224a2:	3201      	adds	r2, #1
 80224a4:	b29b      	uxth	r3, r3
 80224a6:	b212      	sxth	r2, r2
 80224a8:	932f      	str	r3, [sp, #188]	; 0xbc
 80224aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80224ac:	4614      	mov	r4, r2
 80224ae:	9230      	str	r2, [sp, #192]	; 0xc0
 80224b0:	4293      	cmp	r3, r2
 80224b2:	f73f ae4c 	bgt.w	802214e <st_sssa8_ch_convolve+0x3ca>
 80224b6:	2000      	movs	r0, #0
 80224b8:	b053      	add	sp, #332	; 0x14c
 80224ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80224c0:	2b00      	cmp	r3, #0
 80224c2:	d0f8      	beq.n	80224b6 <st_sssa8_ch_convolve+0x732>
 80224c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80224c6:	2400      	movs	r4, #0
 80224c8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80224ca:	005b      	lsls	r3, r3, #1
 80224cc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80224ce:	fb00 f109 	mul.w	r1, r0, r9
 80224d2:	fb00 f303 	mul.w	r3, r0, r3
 80224d6:	9807      	ldr	r0, [sp, #28]
 80224d8:	4252      	negs	r2, r2
 80224da:	9116      	str	r1, [sp, #88]	; 0x58
 80224dc:	1a28      	subs	r0, r5, r0
 80224de:	941c      	str	r4, [sp, #112]	; 0x70
 80224e0:	901d      	str	r0, [sp, #116]	; 0x74
 80224e2:	fa0f f08b 	sxth.w	r0, fp
 80224e6:	901e      	str	r0, [sp, #120]	; 0x78
 80224e8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80224ea:	fb0a 0303 	mla	r3, sl, r3, r0
 80224ee:	4683      	mov	fp, r0
 80224f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80224f2:	004b      	lsls	r3, r1, #1
 80224f4:	9307      	str	r3, [sp, #28]
 80224f6:	b293      	uxth	r3, r2
 80224f8:	9318      	str	r3, [sp, #96]	; 0x60
 80224fa:	a83e      	add	r0, sp, #248	; 0xf8
 80224fc:	f000 fe80 	bl	8023200 <ai_padding_opt_phase1>
 8022500:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022502:	2b00      	cmp	r3, #0
 8022504:	d070      	beq.n	80225e8 <st_sssa8_ch_convolve+0x864>
 8022506:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022508:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802250a:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 802250e:	1a99      	subs	r1, r3, r2
 8022510:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022512:	9012      	str	r0, [sp, #72]	; 0x48
 8022514:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022516:	425a      	negs	r2, r3
 8022518:	2300      	movs	r3, #0
 802251a:	fb00 1104 	mla	r1, r0, r4, r1
 802251e:	b292      	uxth	r2, r2
 8022520:	9310      	str	r3, [sp, #64]	; 0x40
 8022522:	9108      	str	r1, [sp, #32]
 8022524:	4619      	mov	r1, r3
 8022526:	920a      	str	r2, [sp, #40]	; 0x28
 8022528:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 802252a:	2a00      	cmp	r2, #0
 802252c:	f040 80fc 	bne.w	8022728 <st_sssa8_ch_convolve+0x9a4>
 8022530:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8022532:	2a00      	cmp	r2, #0
 8022534:	f040 80fe 	bne.w	8022734 <st_sssa8_ch_convolve+0x9b0>
 8022538:	9a40      	ldr	r2, [sp, #256]	; 0x100
 802253a:	2001      	movs	r0, #1
 802253c:	3a01      	subs	r2, #1
 802253e:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8022542:	9240      	str	r2, [sp, #256]	; 0x100
 8022544:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022546:	9a08      	ldr	r2, [sp, #32]
 8022548:	4293      	cmp	r3, r2
 802254a:	da3b      	bge.n	80225c4 <st_sssa8_ch_convolve+0x840>
 802254c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802254e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022550:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8022552:	fb01 2103 	mla	r1, r1, r3, r2
 8022556:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802255a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802255c:	930e      	str	r3, [sp, #56]	; 0x38
 802255e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022560:	1a8d      	subs	r5, r1, r2
 8022562:	461e      	mov	r6, r3
 8022564:	461a      	mov	r2, r3
 8022566:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022568:	42a9      	cmp	r1, r5
 802256a:	da25      	bge.n	80225b8 <st_sssa8_ch_convolve+0x834>
 802256c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802256e:	460c      	mov	r4, r1
 8022570:	9609      	str	r6, [sp, #36]	; 0x24
 8022572:	468c      	mov	ip, r1
 8022574:	4293      	cmp	r3, r2
 8022576:	fb02 f208 	mul.w	r2, r2, r8
 802257a:	bfcc      	ite	gt
 802257c:	2300      	movgt	r3, #0
 802257e:	2301      	movle	r3, #1
 8022580:	920c      	str	r2, [sp, #48]	; 0x30
 8022582:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 8022586:	461e      	mov	r6, r3
 8022588:	45e0      	cmp	r8, ip
 802258a:	464a      	mov	r2, r9
 802258c:	4659      	mov	r1, fp
 802258e:	4638      	mov	r0, r7
 8022590:	bfcc      	ite	gt
 8022592:	f04f 0e00 	movgt.w	lr, #0
 8022596:	f04f 0e01 	movle.w	lr, #1
 802259a:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 802259e:	d102      	bne.n	80225a6 <st_sssa8_ch_convolve+0x822>
 80225a0:	2e00      	cmp	r6, #0
 80225a2:	f000 80b8 	beq.w	8022716 <st_sssa8_ch_convolve+0x992>
 80225a6:	f003 f885 	bl	80256b4 <arm_fill_q15>
 80225aa:	3401      	adds	r4, #1
 80225ac:	44d3      	add	fp, sl
 80225ae:	b224      	sxth	r4, r4
 80225b0:	42ac      	cmp	r4, r5
 80225b2:	46a4      	mov	ip, r4
 80225b4:	dbe8      	blt.n	8022588 <st_sssa8_ch_convolve+0x804>
 80225b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80225b8:	3601      	adds	r6, #1
 80225ba:	9b08      	ldr	r3, [sp, #32]
 80225bc:	b236      	sxth	r6, r6
 80225be:	429e      	cmp	r6, r3
 80225c0:	4632      	mov	r2, r6
 80225c2:	dbd0      	blt.n	8022566 <st_sssa8_ch_convolve+0x7e2>
 80225c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80225c6:	455b      	cmp	r3, fp
 80225c8:	f000 80e4 	beq.w	8022794 <st_sssa8_ch_convolve+0xa10>
 80225cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80225ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80225d0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80225d2:	4403      	add	r3, r0
 80225d4:	3101      	adds	r1, #1
 80225d6:	461a      	mov	r2, r3
 80225d8:	b20b      	sxth	r3, r1
 80225da:	b292      	uxth	r2, r2
 80225dc:	9310      	str	r3, [sp, #64]	; 0x40
 80225de:	4619      	mov	r1, r3
 80225e0:	920a      	str	r2, [sp, #40]	; 0x28
 80225e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80225e4:	429a      	cmp	r2, r3
 80225e6:	dc9f      	bgt.n	8022528 <st_sssa8_ch_convolve+0x7a4>
 80225e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80225ea:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80225ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 80225ee:	4403      	add	r3, r0
 80225f0:	3101      	adds	r1, #1
 80225f2:	461a      	mov	r2, r3
 80225f4:	b20b      	sxth	r3, r1
 80225f6:	b292      	uxth	r2, r2
 80225f8:	931c      	str	r3, [sp, #112]	; 0x70
 80225fa:	461c      	mov	r4, r3
 80225fc:	9218      	str	r2, [sp, #96]	; 0x60
 80225fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022600:	429a      	cmp	r2, r3
 8022602:	f73f af7a 	bgt.w	80224fa <st_sssa8_ch_convolve+0x776>
 8022606:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022608:	455a      	cmp	r2, fp
 802260a:	f43f af54 	beq.w	80224b6 <st_sssa8_ch_convolve+0x732>
 802260e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8022610:	2900      	cmp	r1, #0
 8022612:	f43f af50 	beq.w	80224b6 <st_sssa8_ch_convolve+0x732>
 8022616:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022618:	981a      	ldr	r0, [sp, #104]	; 0x68
 802261a:	1f1d      	subs	r5, r3, #4
 802261c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802261e:	ea4f 0a90 	mov.w	sl, r0, lsr #2
 8022622:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8022624:	1e9e      	subs	r6, r3, #2
 8022626:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8022628:	f1a4 0b04 	sub.w	fp, r4, #4
 802262c:	9c69      	ldr	r4, [sp, #420]	; 0x1a4
 802262e:	f1a3 0904 	sub.w	r9, r3, #4
 8022632:	f10a 33ff 	add.w	r3, sl, #4294967295
 8022636:	4421      	add	r1, r4
 8022638:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 802263c:	b29b      	uxth	r3, r3
 802263e:	f000 0803 	and.w	r8, r0, #3
 8022642:	9108      	str	r1, [sp, #32]
 8022644:	3301      	adds	r3, #1
 8022646:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 802281c <st_sssa8_ch_convolve+0xa98>
 802264a:	9f5c      	ldr	r7, [sp, #368]	; 0x170
 802264c:	0099      	lsls	r1, r3, #2
 802264e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8022652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022654:	9109      	str	r1, [sp, #36]	; 0x24
 8022656:	9307      	str	r3, [sp, #28]
 8022658:	f855 3f04 	ldr.w	r3, [r5, #4]!
 802265c:	2a00      	cmp	r2, #0
 802265e:	d058      	beq.n	8022712 <st_sssa8_ch_convolve+0x98e>
 8022660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022662:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8022666:	eb07 0a02 	add.w	sl, r7, r2
 802266a:	f857 2b04 	ldr.w	r2, [r7], #4
 802266e:	fa2f f482 	sxtb16	r4, r2
 8022672:	b2a0      	uxth	r0, r4
 8022674:	f8de 1000 	ldr.w	r1, [lr]
 8022678:	ea4f 2232 	mov.w	r2, r2, ror #8
 802267c:	fa2f f282 	sxtb16	r2, r2
 8022680:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8022684:	fb20 3101 	smlad	r1, r0, r1, r3
 8022688:	ea02 030c 	and.w	r3, r2, ip
 802268c:	f10e 0e08 	add.w	lr, lr, #8
 8022690:	f85e 2c04 	ldr.w	r2, [lr, #-4]
 8022694:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8022698:	fb23 1302 	smlad	r3, r3, r2, r1
 802269c:	4557      	cmp	r7, sl
 802269e:	d1e4      	bne.n	802266a <st_sssa8_ch_convolve+0x8e6>
 80226a0:	9a07      	ldr	r2, [sp, #28]
 80226a2:	f1b8 0f00 	cmp.w	r8, #0
 80226a6:	d017      	beq.n	80226d8 <st_sssa8_ch_convolve+0x954>
 80226a8:	f997 1000 	ldrsb.w	r1, [r7]
 80226ac:	f1b8 0f01 	cmp.w	r8, #1
 80226b0:	8810      	ldrh	r0, [r2, #0]
 80226b2:	fb10 3301 	smlabb	r3, r0, r1, r3
 80226b6:	f000 80a7 	beq.w	8022808 <st_sssa8_ch_convolve+0xa84>
 80226ba:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80226be:	f1b8 0f02 	cmp.w	r8, #2
 80226c2:	8850      	ldrh	r0, [r2, #2]
 80226c4:	fb10 3301 	smlabb	r3, r0, r1, r3
 80226c8:	f000 80a0 	beq.w	802280c <st_sssa8_ch_convolve+0xa88>
 80226cc:	8891      	ldrh	r1, [r2, #4]
 80226ce:	3703      	adds	r7, #3
 80226d0:	f917 2c01 	ldrsb.w	r2, [r7, #-1]
 80226d4:	fb11 3302 	smlabb	r3, r1, r2, r3
 80226d8:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80226da:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
 80226de:	3201      	adds	r2, #1
 80226e0:	f859 1f04 	ldr.w	r1, [r9, #4]!
 80226e4:	2800      	cmp	r0, #0
 80226e6:	9269      	str	r2, [sp, #420]	; 0x1a4
 80226e8:	f85b 2f04 	ldr.w	r2, [fp, #4]!
 80226ec:	dd74      	ble.n	80227d8 <st_sssa8_ch_convolve+0xa54>
 80226ee:	005b      	lsls	r3, r3, #1
 80226f0:	fb53 2301 	smmla	r3, r3, r1, r2
 80226f4:	4103      	asrs	r3, r0
 80226f6:	f303 0307 	ssat	r3, #8, r3
 80226fa:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80226fc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8022700:	9b08      	ldr	r3, [sp, #32]
 8022702:	4293      	cmp	r3, r2
 8022704:	f43f aed7 	beq.w	80224b6 <st_sssa8_ch_convolve+0x732>
 8022708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802270a:	f855 3f04 	ldr.w	r3, [r5, #4]!
 802270e:	2a00      	cmp	r2, #0
 8022710:	d1a6      	bne.n	8022660 <st_sssa8_ch_convolve+0x8dc>
 8022712:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022714:	e7c5      	b.n	80226a2 <st_sssa8_ch_convolve+0x91e>
 8022716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022718:	eb03 000c 	add.w	r0, r3, ip
 802271c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802271e:	fb09 3000 	mla	r0, r9, r0, r3
 8022722:	f001 f933 	bl	802398c <st_int8_to16_no_shift>
 8022726:	e740      	b.n	80225aa <st_sssa8_ch_convolve+0x826>
 8022728:	3a01      	subs	r2, #1
 802272a:	2001      	movs	r0, #1
 802272c:	923e      	str	r2, [sp, #248]	; 0xf8
 802272e:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8022732:	e707      	b.n	8022544 <st_sssa8_ch_convolve+0x7c0>
 8022734:	f8bd 011c 	ldrh.w	r0, [sp, #284]	; 0x11c
 8022738:	3a01      	subs	r2, #1
 802273a:	2801      	cmp	r0, #1
 802273c:	923f      	str	r2, [sp, #252]	; 0xfc
 802273e:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8022742:	f43f aeff 	beq.w	8022544 <st_sssa8_ch_convolve+0x7c0>
 8022746:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022748:	9f08      	ldr	r7, [sp, #32]
 802274a:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 802274e:	42bb      	cmp	r3, r7
 8022750:	f6bf af38 	bge.w	80225c4 <st_sssa8_ch_convolve+0x840>
 8022754:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8022758:	461d      	mov	r5, r3
 802275a:	46ca      	mov	sl, r9
 802275c:	4618      	mov	r0, r3
 802275e:	46c1      	mov	r9, r8
 8022760:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8022762:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8022766:	3501      	adds	r5, #1
 8022768:	fb00 4009 	mla	r0, r0, r9, r4
 802276c:	9b07      	ldr	r3, [sp, #28]
 802276e:	4659      	mov	r1, fp
 8022770:	b22d      	sxth	r5, r5
 8022772:	fb0a 8000 	mla	r0, sl, r0, r8
 8022776:	4632      	mov	r2, r6
 8022778:	449b      	add	fp, r3
 802277a:	f001 f907 	bl	802398c <st_int8_to16_no_shift>
 802277e:	42bd      	cmp	r5, r7
 8022780:	4628      	mov	r0, r5
 8022782:	dbf0      	blt.n	8022766 <st_sssa8_ch_convolve+0x9e2>
 8022784:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022786:	46c8      	mov	r8, r9
 8022788:	46d1      	mov	r9, sl
 802278a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 802278e:	455b      	cmp	r3, fp
 8022790:	f47f af1c 	bne.w	80225cc <st_sssa8_ch_convolve+0x848>
 8022794:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 8022796:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8022798:	9965      	ldr	r1, [sp, #404]	; 0x194
 802279a:	9821      	ldr	r0, [sp, #132]	; 0x84
 802279c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802279e:	9304      	str	r3, [sp, #16]
 80227a0:	9203      	str	r2, [sp, #12]
 80227a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80227a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80227a6:	9102      	str	r1, [sp, #8]
 80227a8:	9001      	str	r0, [sp, #4]
 80227aa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80227ac:	985c      	ldr	r0, [sp, #368]	; 0x170
 80227ae:	9400      	str	r4, [sp, #0]
 80227b0:	f000 fd60 	bl	8023274 <st_sssa8_ch_nn_mat_mult_kernel>
 80227b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80227b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80227b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80227ba:	440b      	add	r3, r1
 80227bc:	9069      	str	r0, [sp, #420]	; 0x1a4
 80227be:	3201      	adds	r2, #1
 80227c0:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 80227c4:	b29b      	uxth	r3, r3
 80227c6:	b212      	sxth	r2, r2
 80227c8:	930a      	str	r3, [sp, #40]	; 0x28
 80227ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80227cc:	4611      	mov	r1, r2
 80227ce:	9210      	str	r2, [sp, #64]	; 0x40
 80227d0:	4293      	cmp	r3, r2
 80227d2:	f73f aea9 	bgt.w	8022528 <st_sssa8_ch_convolve+0x7a4>
 80227d6:	e707      	b.n	80225e8 <st_sssa8_ch_convolve+0x864>
 80227d8:	f1c0 0001 	rsb	r0, r0, #1
 80227dc:	4083      	lsls	r3, r0
 80227de:	f303 031f 	ssat	r3, #32, r3
 80227e2:	fb53 f311 	smmulr	r3, r3, r1
 80227e6:	4413      	add	r3, r2
 80227e8:	f303 0307 	ssat	r3, #8, r3
 80227ec:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80227ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80227f2:	e785      	b.n	8022700 <st_sssa8_ch_convolve+0x97c>
 80227f4:	4611      	mov	r1, r2
 80227f6:	985c      	ldr	r0, [sp, #368]	; 0x170
 80227f8:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
 80227fc:	f001 f968 	bl	8023ad0 <st_int8_to16_dual>
 8022800:	2301      	movs	r3, #1
 8022802:	932e      	str	r3, [sp, #184]	; 0xb8
 8022804:	f7ff bb4a 	b.w	8021e9c <st_sssa8_ch_convolve+0x118>
 8022808:	3701      	adds	r7, #1
 802280a:	e765      	b.n	80226d8 <st_sssa8_ch_convolve+0x954>
 802280c:	3702      	adds	r7, #2
 802280e:	e763      	b.n	80226d8 <st_sssa8_ch_convolve+0x954>
 8022810:	4615      	mov	r5, r2
 8022812:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 8022816:	463e      	mov	r6, r7
 8022818:	f7ff bb0e 	b.w	8021e38 <st_sssa8_ch_convolve+0xb4>
 802281c:	ffff0000 	.word	0xffff0000

08022820 <st_sssa8_ch_convolve_rgb>:
 8022820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022824:	b0cb      	sub	sp, #300	; 0x12c
 8022826:	468b      	mov	fp, r1
 8022828:	2a03      	cmp	r2, #3
 802282a:	931f      	str	r3, [sp, #124]	; 0x7c
 802282c:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
 8022830:	f8bd 1150 	ldrh.w	r1, [sp, #336]	; 0x150
 8022834:	9310      	str	r3, [sp, #64]	; 0x40
 8022836:	f8bd 315c 	ldrh.w	r3, [sp, #348]	; 0x15c
 802283a:	f8bd 4154 	ldrh.w	r4, [sp, #340]	; 0x154
 802283e:	930a      	str	r3, [sp, #40]	; 0x28
 8022840:	f99d 316c 	ldrsb.w	r3, [sp, #364]	; 0x16c
 8022844:	9115      	str	r1, [sp, #84]	; 0x54
 8022846:	931d      	str	r3, [sp, #116]	; 0x74
 8022848:	f8bd 3178 	ldrh.w	r3, [sp, #376]	; 0x178
 802284c:	940f      	str	r4, [sp, #60]	; 0x3c
 802284e:	930e      	str	r3, [sp, #56]	; 0x38
 8022850:	9d5a      	ldr	r5, [sp, #360]	; 0x168
 8022852:	f99d e170 	ldrsb.w	lr, [sp, #368]	; 0x170
 8022856:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 8022858:	f040 83d8 	bne.w	802300c <st_sssa8_ch_convolve_rgb+0x7ec>
 802285c:	4606      	mov	r6, r0
 802285e:	4608      	mov	r0, r1
 8022860:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8022864:	ebc0 7240 	rsb	r2, r0, r0, lsl #29
 8022868:	eb03 0741 	add.w	r7, r3, r1, lsl #1
 802286c:	fb14 f304 	smulbb	r3, r4, r4
 8022870:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8022874:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8022878:	9711      	str	r7, [sp, #68]	; 0x44
 802287a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802287e:	9221      	str	r2, [sp, #132]	; 0x84
 8022880:	4442      	add	r2, r8
 8022882:	b29b      	uxth	r3, r3
 8022884:	9222      	str	r2, [sp, #136]	; 0x88
 8022886:	9316      	str	r3, [sp, #88]	; 0x58
 8022888:	2800      	cmp	r0, #0
 802288a:	f000 83bc 	beq.w	8023006 <st_sssa8_ch_convolve_rgb+0x7e6>
 802288e:	0047      	lsls	r7, r0, #1
 8022890:	4629      	mov	r1, r5
 8022892:	1f14      	subs	r4, r2, #4
 8022894:	f04f 0c01 	mov.w	ip, #1
 8022898:	443d      	add	r5, r7
 802289a:	f931 3b02 	ldrsh.w	r3, [r1], #2
 802289e:	fa0c f003 	lsl.w	r0, ip, r3
 80228a2:	fa0e f203 	lsl.w	r2, lr, r3
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 80228ac:	f340 81e4 	ble.w	8022c78 <st_sssa8_ch_convolve_rgb+0x458>
 80228b0:	428d      	cmp	r5, r1
 80228b2:	f844 2f04 	str.w	r2, [r4, #4]!
 80228b6:	d1f0      	bne.n	802289a <st_sssa8_ch_convolve_rgb+0x7a>
 80228b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80228ba:	eb03 0408 	add.w	r4, r3, r8
 80228be:	1bed      	subs	r5, r5, r7
 80228c0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80228c2:	a932      	add	r1, sp, #200	; 0xc8
 80228c4:	ab2e      	add	r3, sp, #184	; 0xb8
 80228c6:	9523      	str	r5, [sp, #140]	; 0x8c
 80228c8:	aa2a      	add	r2, sp, #168	; 0xa8
 80228ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80228cc:	a836      	add	r0, sp, #216	; 0xd8
 80228ce:	9744      	str	r7, [sp, #272]	; 0x110
 80228d0:	9745      	str	r7, [sp, #276]	; 0x114
 80228d2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80228d4:	9100      	str	r1, [sp, #0]
 80228d6:	a940      	add	r1, sp, #256	; 0x100
 80228d8:	9742      	str	r7, [sp, #264]	; 0x108
 80228da:	9743      	str	r7, [sp, #268]	; 0x10c
 80228dc:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
 80228e0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80228e2:	e9cd bb2b 	strd	fp, fp, [sp, #172]	; 0xac
 80228e6:	e9cd 5533 	strd	r5, r5, [sp, #204]	; 0xcc
 80228ea:	f000 fc2f 	bl	802314c <ai_padding_opt_init>
 80228ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 80228f0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80228f4:	e9dd 2015 	ldrd	r2, r0, [sp, #84]	; 0x54
 80228f8:	005b      	lsls	r3, r3, #1
 80228fa:	fb02 f200 	mul.w	r2, r2, r0
 80228fe:	fb05 f303 	mul.w	r3, r5, r3
 8022902:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8022906:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 802290a:	930d      	str	r3, [sp, #52]	; 0x34
 802290c:	f340 8371 	ble.w	8022ff2 <st_sssa8_ch_convolve_rgb+0x7d2>
 8022910:	2300      	movs	r3, #0
 8022912:	4602      	mov	r2, r0
 8022914:	9328      	str	r3, [sp, #160]	; 0xa0
 8022916:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 802291a:	fb93 f3f2 	sdiv	r3, r3, r2
 802291e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8022920:	f023 0301 	bic.w	r3, r3, #1
 8022924:	4293      	cmp	r3, r2
 8022926:	bf28      	it	cs
 8022928:	4613      	movcs	r3, r2
 802292a:	2b01      	cmp	r3, #1
 802292c:	9324      	str	r3, [sp, #144]	; 0x90
 802292e:	f240 81ae 	bls.w	8022c8e <st_sssa8_ch_convolve_rgb+0x46e>
 8022932:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022934:	4613      	mov	r3, r2
 8022936:	fbb2 f2f1 	udiv	r2, r2, r1
 802293a:	fb01 3312 	mls	r3, r1, r2, r3
 802293e:	b292      	uxth	r2, r2
 8022940:	b29b      	uxth	r3, r3
 8022942:	9229      	str	r2, [sp, #164]	; 0xa4
 8022944:	2b00      	cmp	r3, #0
 8022946:	f040 819d 	bne.w	8022c84 <st_sssa8_ch_convolve_rgb+0x464>
 802294a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802294c:	2b00      	cmp	r3, #0
 802294e:	f000 818b 	beq.w	8022c68 <st_sssa8_ch_convolve_rgb+0x448>
 8022952:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022954:	2500      	movs	r5, #0
 8022956:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022958:	4253      	negs	r3, r2
 802295a:	4f99      	ldr	r7, [pc, #612]	; (8022bc0 <st_sssa8_ch_convolve_rgb+0x3a0>)
 802295c:	1a8a      	subs	r2, r1, r2
 802295e:	9527      	str	r5, [sp, #156]	; 0x9c
 8022960:	b29b      	uxth	r3, r3
 8022962:	9226      	str	r2, [sp, #152]	; 0x98
 8022964:	931e      	str	r3, [sp, #120]	; 0x78
 8022966:	9325      	str	r3, [sp, #148]	; 0x94
 8022968:	a836      	add	r0, sp, #216	; 0xd8
 802296a:	f000 fc49 	bl	8023200 <ai_padding_opt_phase1>
 802296e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022972:	fb05 f303 	mul.w	r3, r5, r3
 8022976:	995d      	ldr	r1, [sp, #372]	; 0x174
 8022978:	fb02 1303 	mla	r3, r2, r3, r1
 802297c:	9314      	str	r3, [sp, #80]	; 0x50
 802297e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022980:	b92b      	cbnz	r3, 802298e <st_sssa8_ch_convolve_rgb+0x16e>
 8022982:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022984:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022986:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022988:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802298a:	f001 f8a1 	bl	8023ad0 <st_int8_to16_dual>
 802298e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022990:	46d9      	mov	r9, fp
 8022992:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022994:	46b2      	mov	sl, r6
 8022996:	fb03 2505 	mla	r5, r3, r5, r2
 802299a:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 802299e:	930b      	str	r3, [sp, #44]	; 0x2c
 80229a0:	46ab      	mov	fp, r5
 80229a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80229a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80229a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80229a8:	931c      	str	r3, [sp, #112]	; 0x70
 80229aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80229ac:	9312      	str	r3, [sp, #72]	; 0x48
 80229ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80229b0:	9320      	str	r3, [sp, #128]	; 0x80
 80229b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80229b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80229b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80229b8:	931a      	str	r3, [sp, #104]	; 0x68
 80229ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80229bc:	9318      	str	r3, [sp, #96]	; 0x60
 80229be:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80229c0:	9319      	str	r3, [sp, #100]	; 0x64
 80229c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80229c4:	1e5a      	subs	r2, r3, #1
 80229c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80229ca:	b292      	uxth	r2, r2
 80229cc:	429a      	cmp	r2, r3
 80229ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80229d0:	f000 813a 	beq.w	8022c48 <st_sssa8_ch_convolve_rgb+0x428>
 80229d4:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 80229d6:	2600      	movs	r6, #0
 80229d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80229da:	9238      	str	r2, [sp, #224]	; 0xe0
 80229dc:	464a      	mov	r2, r9
 80229de:	9306      	str	r3, [sp, #24]
 80229e0:	46d9      	mov	r9, fp
 80229e2:	9609      	str	r6, [sp, #36]	; 0x24
 80229e4:	4693      	mov	fp, r2
 80229e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80229e8:	e9dd 0139 	ldrd	r0, r1, [sp, #228]	; 0xe4
 80229ec:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 80229f0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80229f2:	9113      	str	r1, [sp, #76]	; 0x4c
 80229f4:	2800      	cmp	r0, #0
 80229f6:	d17b      	bne.n	8022af0 <st_sssa8_ch_convolve_rgb+0x2d0>
 80229f8:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80229fa:	2a00      	cmp	r2, #0
 80229fc:	d17e      	bne.n	8022afc <st_sssa8_ch_convolve_rgb+0x2dc>
 80229fe:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8022a00:	2101      	movs	r1, #1
 8022a02:	3a01      	subs	r2, #1
 8022a04:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 8022a08:	9238      	str	r2, [sp, #224]	; 0xe0
 8022a0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022a0c:	4591      	cmp	r9, r2
 8022a0e:	dd5c      	ble.n	8022aca <st_sssa8_ch_convolve_rgb+0x2aa>
 8022a10:	4610      	mov	r0, r2
 8022a12:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022a14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022a16:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022a18:	4686      	mov	lr, r0
 8022a1a:	fb06 1102 	mla	r1, r6, r2, r1
 8022a1e:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8022a22:	f8cd 9020 	str.w	r9, [sp, #32]
 8022a26:	1b09      	subs	r1, r1, r4
 8022a28:	4691      	mov	r9, r2
 8022a2a:	f9bd 4074 	ldrsh.w	r4, [sp, #116]	; 0x74
 8022a2e:	468c      	mov	ip, r1
 8022a30:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8022a34:	45e1      	cmp	r9, ip
 8022a36:	da3d      	bge.n	8022ab4 <st_sssa8_ch_convolve_rgb+0x294>
 8022a38:	fb00 f20b 	mul.w	r2, r0, fp
 8022a3c:	ea4f 71de 	mov.w	r1, lr, lsr #31
 8022a40:	4698      	mov	r8, r3
 8022a42:	9207      	str	r2, [sp, #28]
 8022a44:	4583      	cmp	fp, r0
 8022a46:	bfd8      	it	le
 8022a48:	f041 0101 	orrle.w	r1, r1, #1
 8022a4c:	464a      	mov	r2, r9
 8022a4e:	4648      	mov	r0, r9
 8022a50:	4583      	cmp	fp, r0
 8022a52:	f102 0601 	add.w	r6, r2, #1
 8022a56:	f103 0306 	add.w	r3, r3, #6
 8022a5a:	bfcc      	ite	gt
 8022a5c:	2500      	movgt	r5, #0
 8022a5e:	2501      	movle	r5, #1
 8022a60:	ea55 75d2 	orrs.w	r5, r5, r2, lsr #31
 8022a64:	d100      	bne.n	8022a68 <st_sssa8_ch_convolve_rgb+0x248>
 8022a66:	b159      	cbz	r1, 8022a80 <st_sssa8_ch_convolve_rgb+0x260>
 8022a68:	b232      	sxth	r2, r6
 8022a6a:	f823 4c04 	strh.w	r4, [r3, #-4]
 8022a6e:	f823 4c02 	strh.w	r4, [r3, #-2]
 8022a72:	4562      	cmp	r2, ip
 8022a74:	f823 4c06 	strh.w	r4, [r3, #-6]
 8022a78:	4610      	mov	r0, r2
 8022a7a:	da1b      	bge.n	8022ab4 <st_sssa8_ch_convolve_rgb+0x294>
 8022a7c:	4698      	mov	r8, r3
 8022a7e:	e7e7      	b.n	8022a50 <st_sssa8_ch_convolve_rgb+0x230>
 8022a80:	9d07      	ldr	r5, [sp, #28]
 8022a82:	3201      	adds	r2, #1
 8022a84:	4428      	add	r0, r5
 8022a86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022a88:	b212      	sxth	r2, r2
 8022a8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022a8e:	4562      	cmp	r2, ip
 8022a90:	5828      	ldr	r0, [r5, r0]
 8022a92:	fa2f f680 	sxtb16	r6, r0
 8022a96:	ea4f 2530 	mov.w	r5, r0, ror #8
 8022a9a:	ea06 0a07 	and.w	sl, r6, r7
 8022a9e:	fa2f f585 	sxtb16	r5, r5
 8022aa2:	b2ad      	uxth	r5, r5
 8022aa4:	4610      	mov	r0, r2
 8022aa6:	ea45 050a 	orr.w	r5, r5, sl
 8022aaa:	f8c8 5002 	str.w	r5, [r8, #2]
 8022aae:	f823 6c06 	strh.w	r6, [r3, #-6]
 8022ab2:	dbe3      	blt.n	8022a7c <st_sssa8_ch_convolve_rgb+0x25c>
 8022ab4:	f10e 0e01 	add.w	lr, lr, #1
 8022ab8:	9a08      	ldr	r2, [sp, #32]
 8022aba:	fa0f fe8e 	sxth.w	lr, lr
 8022abe:	4596      	cmp	lr, r2
 8022ac0:	4670      	mov	r0, lr
 8022ac2:	dbb7      	blt.n	8022a34 <st_sssa8_ch_convolve_rgb+0x214>
 8022ac4:	4691      	mov	r9, r2
 8022ac6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8022aca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022acc:	429a      	cmp	r2, r3
 8022ace:	d055      	beq.n	8022b7c <st_sssa8_ch_convolve_rgb+0x35c>
 8022ad0:	9a06      	ldr	r2, [sp, #24]
 8022ad2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022ad6:	4402      	add	r2, r0
 8022ad8:	3101      	adds	r1, #1
 8022ada:	b292      	uxth	r2, r2
 8022adc:	b209      	sxth	r1, r1
 8022ade:	9206      	str	r2, [sp, #24]
 8022ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022ae2:	460e      	mov	r6, r1
 8022ae4:	9109      	str	r1, [sp, #36]	; 0x24
 8022ae6:	428a      	cmp	r2, r1
 8022ae8:	dd6c      	ble.n	8022bc4 <st_sssa8_ch_convolve_rgb+0x3a4>
 8022aea:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8022aec:	2800      	cmp	r0, #0
 8022aee:	d083      	beq.n	80229f8 <st_sssa8_ch_convolve_rgb+0x1d8>
 8022af0:	3801      	subs	r0, #1
 8022af2:	2201      	movs	r2, #1
 8022af4:	9036      	str	r0, [sp, #216]	; 0xd8
 8022af6:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 8022afa:	e786      	b.n	8022a0a <st_sssa8_ch_convolve_rgb+0x1ea>
 8022afc:	f8bd 10fc 	ldrh.w	r1, [sp, #252]	; 0xfc
 8022b00:	3a01      	subs	r2, #1
 8022b02:	2901      	cmp	r1, #1
 8022b04:	9237      	str	r2, [sp, #220]	; 0xdc
 8022b06:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 8022b0a:	f43f af7e 	beq.w	8022a0a <st_sssa8_ch_convolve_rgb+0x1ea>
 8022b0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022b10:	4591      	cmp	r9, r2
 8022b12:	ddda      	ble.n	8022aca <st_sssa8_ch_convolve_rgb+0x2aa>
 8022b14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022b16:	4694      	mov	ip, r2
 8022b18:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022b1a:	4615      	mov	r5, r2
 8022b1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022b1e:	fb06 0601 	mla	r6, r6, r1, r0
 8022b22:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 8022b26:	1ab6      	subs	r6, r6, r2
 8022b28:	45b6      	cmp	lr, r6
 8022b2a:	da1d      	bge.n	8022b68 <st_sssa8_ch_convolve_rgb+0x348>
 8022b2c:	fb05 f40b 	mul.w	r4, r5, fp
 8022b30:	4670      	mov	r0, lr
 8022b32:	4675      	mov	r5, lr
 8022b34:	4425      	add	r5, r4
 8022b36:	3001      	adds	r0, #1
 8022b38:	3306      	adds	r3, #6
 8022b3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022b3e:	b200      	sxth	r0, r0
 8022b40:	f85a 2005 	ldr.w	r2, [sl, r5]
 8022b44:	fa2f f182 	sxtb16	r1, r2
 8022b48:	ea4f 2232 	mov.w	r2, r2, ror #8
 8022b4c:	ea01 0807 	and.w	r8, r1, r7
 8022b50:	fa2f f282 	sxtb16	r2, r2
 8022b54:	b292      	uxth	r2, r2
 8022b56:	42b0      	cmp	r0, r6
 8022b58:	f823 1c06 	strh.w	r1, [r3, #-6]
 8022b5c:	4605      	mov	r5, r0
 8022b5e:	ea42 0208 	orr.w	r2, r2, r8
 8022b62:	f843 2c04 	str.w	r2, [r3, #-4]
 8022b66:	dbe5      	blt.n	8022b34 <st_sssa8_ch_convolve_rgb+0x314>
 8022b68:	f10c 0c01 	add.w	ip, ip, #1
 8022b6c:	fa0f fc8c 	sxth.w	ip, ip
 8022b70:	45cc      	cmp	ip, r9
 8022b72:	4665      	mov	r5, ip
 8022b74:	dbd8      	blt.n	8022b28 <st_sssa8_ch_convolve_rgb+0x308>
 8022b76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022b78:	429a      	cmp	r2, r3
 8022b7a:	d1a9      	bne.n	8022ad0 <st_sssa8_ch_convolve_rgb+0x2b0>
 8022b7c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8022b7e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022b80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022b82:	9818      	ldr	r0, [sp, #96]	; 0x60
 8022b84:	9204      	str	r2, [sp, #16]
 8022b86:	9401      	str	r4, [sp, #4]
 8022b88:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022b8a:	9305      	str	r3, [sp, #20]
 8022b8c:	9002      	str	r0, [sp, #8]
 8022b8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022b90:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022b92:	9400      	str	r4, [sp, #0]
 8022b94:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
 8022b98:	9103      	str	r1, [sp, #12]
 8022b9a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022b9c:	f001 fea4 	bl	80248e8 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8022ba0:	9b06      	ldr	r3, [sp, #24]
 8022ba2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022ba6:	440b      	add	r3, r1
 8022ba8:	9013      	str	r0, [sp, #76]	; 0x4c
 8022baa:	3201      	adds	r2, #1
 8022bac:	b29b      	uxth	r3, r3
 8022bae:	b212      	sxth	r2, r2
 8022bb0:	9306      	str	r3, [sp, #24]
 8022bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022bb4:	4616      	mov	r6, r2
 8022bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8022bb8:	4293      	cmp	r3, r2
 8022bba:	dd59      	ble.n	8022c70 <st_sssa8_ch_convolve_rgb+0x450>
 8022bbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022bbe:	e794      	b.n	8022aea <st_sssa8_ch_convolve_rgb+0x2ca>
 8022bc0:	ffff0000 	.word	0xffff0000
 8022bc4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022bc6:	465a      	mov	r2, fp
 8022bc8:	46cb      	mov	fp, r9
 8022bca:	4299      	cmp	r1, r3
 8022bcc:	4691      	mov	r9, r2
 8022bce:	d010      	beq.n	8022bf2 <st_sssa8_ch_convolve_rgb+0x3d2>
 8022bd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8022bd2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022bd4:	9204      	str	r2, [sp, #16]
 8022bd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022bd8:	9401      	str	r4, [sp, #4]
 8022bda:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022bdc:	9305      	str	r3, [sp, #20]
 8022bde:	9400      	str	r4, [sp, #0]
 8022be0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022be2:	e9dd 0219 	ldrd	r0, r2, [sp, #100]	; 0x64
 8022be6:	9003      	str	r0, [sp, #12]
 8022be8:	9818      	ldr	r0, [sp, #96]	; 0x60
 8022bea:	9002      	str	r0, [sp, #8]
 8022bec:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022bee:	f002 f943 	bl	8024e78 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8022bf2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022bf4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022bf6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022bf8:	1a9b      	subs	r3, r3, r2
 8022bfa:	4608      	mov	r0, r1
 8022bfc:	b29b      	uxth	r3, r3
 8022bfe:	4410      	add	r0, r2
 8022c00:	429a      	cmp	r2, r3
 8022c02:	931c      	str	r3, [sp, #112]	; 0x70
 8022c04:	9014      	str	r0, [sp, #80]	; 0x50
 8022c06:	bf28      	it	cs
 8022c08:	461a      	movcs	r2, r3
 8022c0a:	4614      	mov	r4, r2
 8022c0c:	b90a      	cbnz	r2, 8022c12 <st_sssa8_ch_convolve_rgb+0x3f2>
 8022c0e:	9412      	str	r4, [sp, #72]	; 0x48
 8022c10:	e6d7      	b.n	80229c2 <st_sssa8_ch_convolve_rgb+0x1a2>
 8022c12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022c14:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8022c16:	4619      	mov	r1, r3
 8022c18:	009d      	lsls	r5, r3, #2
 8022c1a:	9820      	ldr	r0, [sp, #128]	; 0x80
 8022c1c:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8022c20:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8022c22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022c24:	442e      	add	r6, r5
 8022c26:	9118      	str	r1, [sp, #96]	; 0x60
 8022c28:	fb02 0003 	mla	r0, r2, r3, r0
 8022c2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022c2e:	961a      	str	r6, [sp, #104]	; 0x68
 8022c30:	4623      	mov	r3, r4
 8022c32:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8022c34:	9020      	str	r0, [sp, #128]	; 0x80
 8022c36:	442e      	add	r6, r5
 8022c38:	9619      	str	r6, [sp, #100]	; 0x64
 8022c3a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8022c3c:	442e      	add	r6, r5
 8022c3e:	4635      	mov	r5, r6
 8022c40:	961b      	str	r6, [sp, #108]	; 0x6c
 8022c42:	f000 ff45 	bl	8023ad0 <st_int8_to16_dual>
 8022c46:	e7e2      	b.n	8022c0e <st_sssa8_ch_convolve_rgb+0x3ee>
 8022c48:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022c4a:	4656      	mov	r6, sl
 8022c4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022c4e:	46cb      	mov	fp, r9
 8022c50:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8022c52:	440b      	add	r3, r1
 8022c54:	3201      	adds	r2, #1
 8022c56:	b29b      	uxth	r3, r3
 8022c58:	b212      	sxth	r2, r2
 8022c5a:	9325      	str	r3, [sp, #148]	; 0x94
 8022c5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022c5e:	4615      	mov	r5, r2
 8022c60:	9227      	str	r2, [sp, #156]	; 0x9c
 8022c62:	4293      	cmp	r3, r2
 8022c64:	f73f ae80 	bgt.w	8022968 <st_sssa8_ch_convolve_rgb+0x148>
 8022c68:	2000      	movs	r0, #0
 8022c6a:	b04b      	add	sp, #300	; 0x12c
 8022c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c70:	465b      	mov	r3, fp
 8022c72:	46cb      	mov	fp, r9
 8022c74:	4699      	mov	r9, r3
 8022c76:	e7bc      	b.n	8022bf2 <st_sssa8_ch_convolve_rgb+0x3d2>
 8022c78:	428d      	cmp	r5, r1
 8022c7a:	f844 ef04 	str.w	lr, [r4, #4]!
 8022c7e:	f47f ae0c 	bne.w	802289a <st_sssa8_ch_convolve_rgb+0x7a>
 8022c82:	e619      	b.n	80228b8 <st_sssa8_ch_convolve_rgb+0x98>
 8022c84:	4613      	mov	r3, r2
 8022c86:	3301      	adds	r3, #1
 8022c88:	b29b      	uxth	r3, r3
 8022c8a:	9329      	str	r3, [sp, #164]	; 0xa4
 8022c8c:	e65d      	b.n	802294a <st_sssa8_ch_convolve_rgb+0x12a>
 8022c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022c90:	2b00      	cmp	r3, #0
 8022c92:	d0e9      	beq.n	8022c68 <st_sssa8_ch_convolve_rgb+0x448>
 8022c94:	2100      	movs	r1, #0
 8022c96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022c98:	eba4 0008 	sub.w	r0, r4, r8
 8022c9c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8022c9e:	4253      	negs	r3, r2
 8022ca0:	9113      	str	r1, [sp, #76]	; 0x4c
 8022ca2:	460c      	mov	r4, r1
 8022ca4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022ca6:	b29b      	uxth	r3, r3
 8022ca8:	9012      	str	r0, [sp, #72]	; 0x48
 8022caa:	1a8a      	subs	r2, r1, r2
 8022cac:	9314      	str	r3, [sp, #80]	; 0x50
 8022cae:	9226      	str	r2, [sp, #152]	; 0x98
 8022cb0:	930c      	str	r3, [sp, #48]	; 0x30
 8022cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022cb4:	2500      	movs	r5, #0
 8022cb6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022cb8:	a836      	add	r0, sp, #216	; 0xd8
 8022cba:	9507      	str	r5, [sp, #28]
 8022cbc:	fb03 2a04 	mla	sl, r3, r4, r2
 8022cc0:	f000 fa9e 	bl	8023200 <ai_padding_opt_phase1>
 8022cc4:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8022cc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022cca:	9309      	str	r3, [sp, #36]	; 0x24
 8022ccc:	462b      	mov	r3, r5
 8022cce:	9206      	str	r2, [sp, #24]
 8022cd0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8022cd2:	2a00      	cmp	r2, #0
 8022cd4:	f040 8112 	bne.w	8022efc <st_sssa8_ch_convolve_rgb+0x6dc>
 8022cd8:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8022cda:	2a00      	cmp	r2, #0
 8022cdc:	f040 8114 	bne.w	8022f08 <st_sssa8_ch_convolve_rgb+0x6e8>
 8022ce0:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8022ce2:	2101      	movs	r1, #1
 8022ce4:	3a01      	subs	r2, #1
 8022ce6:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 8022cea:	9238      	str	r2, [sp, #224]	; 0xe0
 8022cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022cee:	4552      	cmp	r2, sl
 8022cf0:	da5d      	bge.n	8022dae <st_sssa8_ch_convolve_rgb+0x58e>
 8022cf2:	4691      	mov	r9, r2
 8022cf4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022cf8:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8022cfc:	46cc      	mov	ip, r9
 8022cfe:	fb03 1302 	mla	r3, r3, r2, r1
 8022d02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022d04:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 8022d08:	4680      	mov	r8, r0
 8022d0a:	1a9a      	subs	r2, r3, r2
 8022d0c:	f8cd a020 	str.w	sl, [sp, #32]
 8022d10:	960b      	str	r6, [sp, #44]	; 0x2c
 8022d12:	4590      	cmp	r8, r2
 8022d14:	da41      	bge.n	8022d9a <st_sssa8_ch_convolve_rgb+0x57a>
 8022d16:	45cb      	cmp	fp, r9
 8022d18:	fb09 fa0b 	mul.w	sl, r9, fp
 8022d1c:	463e      	mov	r6, r7
 8022d1e:	4643      	mov	r3, r8
 8022d20:	bfcc      	ite	gt
 8022d22:	f04f 0e00 	movgt.w	lr, #0
 8022d26:	f04f 0e01 	movle.w	lr, #1
 8022d2a:	4640      	mov	r0, r8
 8022d2c:	ea4e 7edc 	orr.w	lr, lr, ip, lsr #31
 8022d30:	4583      	cmp	fp, r0
 8022d32:	f103 0501 	add.w	r5, r3, #1
 8022d36:	f107 0706 	add.w	r7, r7, #6
 8022d3a:	bfcc      	ite	gt
 8022d3c:	2400      	movgt	r4, #0
 8022d3e:	2401      	movle	r4, #1
 8022d40:	ea54 74d3 	orrs.w	r4, r4, r3, lsr #31
 8022d44:	d102      	bne.n	8022d4c <st_sssa8_ch_convolve_rgb+0x52c>
 8022d46:	f1be 0f00 	cmp.w	lr, #0
 8022d4a:	d00b      	beq.n	8022d64 <st_sssa8_ch_convolve_rgb+0x544>
 8022d4c:	b22b      	sxth	r3, r5
 8022d4e:	f827 1c04 	strh.w	r1, [r7, #-4]
 8022d52:	f827 1c02 	strh.w	r1, [r7, #-2]
 8022d56:	429a      	cmp	r2, r3
 8022d58:	f827 1c06 	strh.w	r1, [r7, #-6]
 8022d5c:	4618      	mov	r0, r3
 8022d5e:	dd1c      	ble.n	8022d9a <st_sssa8_ch_convolve_rgb+0x57a>
 8022d60:	463e      	mov	r6, r7
 8022d62:	e7e5      	b.n	8022d30 <st_sssa8_ch_convolve_rgb+0x510>
 8022d64:	4450      	add	r0, sl
 8022d66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022d68:	3301      	adds	r3, #1
 8022d6a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8023014 <st_sssa8_ch_convolve_rgb+0x7f4>
 8022d6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022d72:	b21b      	sxth	r3, r3
 8022d74:	5820      	ldr	r0, [r4, r0]
 8022d76:	fa2f f580 	sxtb16	r5, r0
 8022d7a:	ea4f 2430 	mov.w	r4, r0, ror #8
 8022d7e:	ea05 0909 	and.w	r9, r5, r9
 8022d82:	fa2f f484 	sxtb16	r4, r4
 8022d86:	b2a4      	uxth	r4, r4
 8022d88:	4293      	cmp	r3, r2
 8022d8a:	4618      	mov	r0, r3
 8022d8c:	ea44 0409 	orr.w	r4, r4, r9
 8022d90:	f8c6 4002 	str.w	r4, [r6, #2]
 8022d94:	f827 5c06 	strh.w	r5, [r7, #-6]
 8022d98:	dbe2      	blt.n	8022d60 <st_sssa8_ch_convolve_rgb+0x540>
 8022d9a:	f10c 0c01 	add.w	ip, ip, #1
 8022d9e:	9b08      	ldr	r3, [sp, #32]
 8022da0:	fa0f fc8c 	sxth.w	ip, ip
 8022da4:	459c      	cmp	ip, r3
 8022da6:	46e1      	mov	r9, ip
 8022da8:	dbb3      	blt.n	8022d12 <st_sssa8_ch_convolve_rgb+0x4f2>
 8022daa:	469a      	mov	sl, r3
 8022dac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022db0:	42bb      	cmp	r3, r7
 8022db2:	f000 80ec 	beq.w	8022f8e <st_sssa8_ch_convolve_rgb+0x76e>
 8022db6:	9a07      	ldr	r2, [sp, #28]
 8022db8:	9b06      	ldr	r3, [sp, #24]
 8022dba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022dbc:	3201      	adds	r2, #1
 8022dbe:	440b      	add	r3, r1
 8022dc0:	b212      	sxth	r2, r2
 8022dc2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022dc4:	b29b      	uxth	r3, r3
 8022dc6:	9207      	str	r2, [sp, #28]
 8022dc8:	4291      	cmp	r1, r2
 8022dca:	9306      	str	r3, [sp, #24]
 8022dcc:	4613      	mov	r3, r2
 8022dce:	f73f af7f 	bgt.w	8022cd0 <st_sssa8_ch_convolve_rgb+0x4b0>
 8022dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022dd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022dd6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022dd8:	440b      	add	r3, r1
 8022dda:	3201      	adds	r2, #1
 8022ddc:	b29b      	uxth	r3, r3
 8022dde:	b212      	sxth	r2, r2
 8022de0:	930c      	str	r3, [sp, #48]	; 0x30
 8022de2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022de4:	4614      	mov	r4, r2
 8022de6:	9213      	str	r2, [sp, #76]	; 0x4c
 8022de8:	4293      	cmp	r3, r2
 8022dea:	f73f af62 	bgt.w	8022cb2 <st_sssa8_ch_convolve_rgb+0x492>
 8022dee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022df0:	42ba      	cmp	r2, r7
 8022df2:	f43f af39 	beq.w	8022c68 <st_sssa8_ch_convolve_rgb+0x448>
 8022df6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022df8:	2900      	cmp	r1, #0
 8022dfa:	f43f af35 	beq.w	8022c68 <st_sssa8_ch_convolve_rgb+0x448>
 8022dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022e00:	9816      	ldr	r0, [sp, #88]	; 0x58
 8022e02:	1f1f      	subs	r7, r3, #4
 8022e04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022e06:	ea4f 0990 	mov.w	r9, r0, lsr #2
 8022e0a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022e0c:	f1a3 0c02 	sub.w	ip, r3, #2
 8022e10:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8022e12:	f1a4 0a04 	sub.w	sl, r4, #4
 8022e16:	9c5d      	ldr	r4, [sp, #372]	; 0x174
 8022e18:	1f1e      	subs	r6, r3, #4
 8022e1a:	f109 33ff 	add.w	r3, r9, #4294967295
 8022e1e:	4421      	add	r1, r4
 8022e20:	f000 0e03 	and.w	lr, r0, #3
 8022e24:	b29b      	uxth	r3, r3
 8022e26:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 8023014 <st_sssa8_ch_convolve_rgb+0x7f4>
 8022e2a:	9107      	str	r1, [sp, #28]
 8022e2c:	3301      	adds	r3, #1
 8022e2e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022e30:	0099      	lsls	r1, r3, #2
 8022e32:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8022e36:	9108      	str	r1, [sp, #32]
 8022e38:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
 8022e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022e3e:	46a1      	mov	r9, r4
 8022e40:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8022e44:	2a00      	cmp	r2, #0
 8022e46:	d057      	beq.n	8022ef8 <st_sssa8_ch_convolve_rgb+0x6d8>
 8022e48:	9a08      	ldr	r2, [sp, #32]
 8022e4a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8022e4e:	1882      	adds	r2, r0, r2
 8022e50:	9206      	str	r2, [sp, #24]
 8022e52:	f850 2b04 	ldr.w	r2, [r0], #4
 8022e56:	fa2f f482 	sxtb16	r4, r2
 8022e5a:	b2a1      	uxth	r1, r4
 8022e5c:	f8d8 5000 	ldr.w	r5, [r8]
 8022e60:	ea4f 2232 	mov.w	r2, r2, ror #8
 8022e64:	fa2f f282 	sxtb16	r2, r2
 8022e68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8022e6c:	fb21 3105 	smlad	r1, r1, r5, r3
 8022e70:	ea02 020b 	and.w	r2, r2, fp
 8022e74:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8022e78:	f108 0808 	add.w	r8, r8, #8
 8022e7c:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
 8022e80:	fb24 1303 	smlad	r3, r4, r3, r1
 8022e84:	9a06      	ldr	r2, [sp, #24]
 8022e86:	4290      	cmp	r0, r2
 8022e88:	d1e3      	bne.n	8022e52 <st_sssa8_ch_convolve_rgb+0x632>
 8022e8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022e8c:	f1be 0f00 	cmp.w	lr, #0
 8022e90:	d017      	beq.n	8022ec2 <st_sssa8_ch_convolve_rgb+0x6a2>
 8022e92:	f990 1000 	ldrsb.w	r1, [r0]
 8022e96:	f1be 0f01 	cmp.w	lr, #1
 8022e9a:	8814      	ldrh	r4, [r2, #0]
 8022e9c:	fb14 3301 	smlabb	r3, r4, r1, r3
 8022ea0:	f000 80a5 	beq.w	8022fee <st_sssa8_ch_convolve_rgb+0x7ce>
 8022ea4:	f990 1001 	ldrsb.w	r1, [r0, #1]
 8022ea8:	f1be 0f02 	cmp.w	lr, #2
 8022eac:	8854      	ldrh	r4, [r2, #2]
 8022eae:	fb14 3301 	smlabb	r3, r4, r1, r3
 8022eb2:	f000 809a 	beq.w	8022fea <st_sssa8_ch_convolve_rgb+0x7ca>
 8022eb6:	8891      	ldrh	r1, [r2, #4]
 8022eb8:	3003      	adds	r0, #3
 8022eba:	f910 2c01 	ldrsb.w	r2, [r0, #-1]
 8022ebe:	fb11 3302 	smlabb	r3, r1, r2, r3
 8022ec2:	f93c 4f02 	ldrsh.w	r4, [ip, #2]!
 8022ec6:	f109 0901 	add.w	r9, r9, #1
 8022eca:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8022ece:	2c00      	cmp	r4, #0
 8022ed0:	f85a 2f04 	ldr.w	r2, [sl, #4]!
 8022ed4:	dd7c      	ble.n	8022fd0 <st_sssa8_ch_convolve_rgb+0x7b0>
 8022ed6:	005b      	lsls	r3, r3, #1
 8022ed8:	fb53 2301 	smmla	r3, r3, r1, r2
 8022edc:	4123      	asrs	r3, r4
 8022ede:	f303 0307 	ssat	r3, #8, r3
 8022ee2:	f809 3c01 	strb.w	r3, [r9, #-1]
 8022ee6:	9b07      	ldr	r3, [sp, #28]
 8022ee8:	454b      	cmp	r3, r9
 8022eea:	f43f aebd 	beq.w	8022c68 <st_sssa8_ch_convolve_rgb+0x448>
 8022eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022ef0:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8022ef4:	2a00      	cmp	r2, #0
 8022ef6:	d1a7      	bne.n	8022e48 <st_sssa8_ch_convolve_rgb+0x628>
 8022ef8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022efa:	e7c7      	b.n	8022e8c <st_sssa8_ch_convolve_rgb+0x66c>
 8022efc:	3a01      	subs	r2, #1
 8022efe:	2101      	movs	r1, #1
 8022f00:	9236      	str	r2, [sp, #216]	; 0xd8
 8022f02:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 8022f06:	e6f1      	b.n	8022cec <st_sssa8_ch_convolve_rgb+0x4cc>
 8022f08:	f8bd 10fc 	ldrh.w	r1, [sp, #252]	; 0xfc
 8022f0c:	3a01      	subs	r2, #1
 8022f0e:	2901      	cmp	r1, #1
 8022f10:	9237      	str	r2, [sp, #220]	; 0xdc
 8022f12:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 8022f16:	f43f aee9 	beq.w	8022cec <st_sssa8_ch_convolve_rgb+0x4cc>
 8022f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022f1c:	4552      	cmp	r2, sl
 8022f1e:	f6bf af46 	bge.w	8022dae <st_sssa8_ch_convolve_rgb+0x58e>
 8022f22:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022f24:	4694      	mov	ip, r2
 8022f26:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022f28:	4614      	mov	r4, r2
 8022f2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022f2c:	fb03 0301 	mla	r3, r3, r1, r0
 8022f30:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 8022f34:	1a9d      	subs	r5, r3, r2
 8022f36:	45ae      	cmp	lr, r5
 8022f38:	da1e      	bge.n	8022f78 <st_sssa8_ch_convolve_rgb+0x758>
 8022f3a:	fb04 f00b 	mul.w	r0, r4, fp
 8022f3e:	4671      	mov	r1, lr
 8022f40:	4674      	mov	r4, lr
 8022f42:	1903      	adds	r3, r0, r4
 8022f44:	3101      	adds	r1, #1
 8022f46:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8023014 <st_sssa8_ch_convolve_rgb+0x7f4>
 8022f4a:	3706      	adds	r7, #6
 8022f4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022f50:	b209      	sxth	r1, r1
 8022f52:	58f3      	ldr	r3, [r6, r3]
 8022f54:	fa2f f283 	sxtb16	r2, r3
 8022f58:	ea4f 2333 	mov.w	r3, r3, ror #8
 8022f5c:	ea02 0808 	and.w	r8, r2, r8
 8022f60:	fa2f f383 	sxtb16	r3, r3
 8022f64:	b29b      	uxth	r3, r3
 8022f66:	42a9      	cmp	r1, r5
 8022f68:	f827 2c06 	strh.w	r2, [r7, #-6]
 8022f6c:	460c      	mov	r4, r1
 8022f6e:	ea43 0308 	orr.w	r3, r3, r8
 8022f72:	f847 3c04 	str.w	r3, [r7, #-4]
 8022f76:	dbe4      	blt.n	8022f42 <st_sssa8_ch_convolve_rgb+0x722>
 8022f78:	f10c 0c01 	add.w	ip, ip, #1
 8022f7c:	fa0f fc8c 	sxth.w	ip, ip
 8022f80:	45d4      	cmp	ip, sl
 8022f82:	4664      	mov	r4, ip
 8022f84:	dbd7      	blt.n	8022f36 <st_sssa8_ch_convolve_rgb+0x716>
 8022f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022f88:	42bb      	cmp	r3, r7
 8022f8a:	f47f af14 	bne.w	8022db6 <st_sssa8_ch_convolve_rgb+0x596>
 8022f8e:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8022f90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022f92:	9959      	ldr	r1, [sp, #356]	; 0x164
 8022f94:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022f96:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022f98:	9304      	str	r3, [sp, #16]
 8022f9a:	9203      	str	r2, [sp, #12]
 8022f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022f9e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022fa0:	9102      	str	r1, [sp, #8]
 8022fa2:	9001      	str	r0, [sp, #4]
 8022fa4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022fa6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022fa8:	9400      	str	r4, [sp, #0]
 8022faa:	f000 f963 	bl	8023274 <st_sssa8_ch_nn_mat_mult_kernel>
 8022fae:	9a07      	ldr	r2, [sp, #28]
 8022fb0:	9b06      	ldr	r3, [sp, #24]
 8022fb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022fb4:	3201      	adds	r2, #1
 8022fb6:	905d      	str	r0, [sp, #372]	; 0x174
 8022fb8:	b212      	sxth	r2, r2
 8022fba:	440b      	add	r3, r1
 8022fbc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022fbe:	b29b      	uxth	r3, r3
 8022fc0:	9207      	str	r2, [sp, #28]
 8022fc2:	4291      	cmp	r1, r2
 8022fc4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8022fc6:	9306      	str	r3, [sp, #24]
 8022fc8:	4613      	mov	r3, r2
 8022fca:	f73f ae81 	bgt.w	8022cd0 <st_sssa8_ch_convolve_rgb+0x4b0>
 8022fce:	e700      	b.n	8022dd2 <st_sssa8_ch_convolve_rgb+0x5b2>
 8022fd0:	f1c4 0401 	rsb	r4, r4, #1
 8022fd4:	40a3      	lsls	r3, r4
 8022fd6:	f303 031f 	ssat	r3, #32, r3
 8022fda:	fb53 f311 	smmulr	r3, r3, r1
 8022fde:	4413      	add	r3, r2
 8022fe0:	f303 0307 	ssat	r3, #8, r3
 8022fe4:	f809 3c01 	strb.w	r3, [r9, #-1]
 8022fe8:	e77d      	b.n	8022ee6 <st_sssa8_ch_convolve_rgb+0x6c6>
 8022fea:	3002      	adds	r0, #2
 8022fec:	e769      	b.n	8022ec2 <st_sssa8_ch_convolve_rgb+0x6a2>
 8022fee:	3001      	adds	r0, #1
 8022ff0:	e767      	b.n	8022ec2 <st_sssa8_ch_convolve_rgb+0x6a2>
 8022ff2:	4602      	mov	r2, r0
 8022ff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022ff6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022ff8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022ffa:	f000 fd69 	bl	8023ad0 <st_int8_to16_dual>
 8022ffe:	2301      	movs	r3, #1
 8023000:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023002:	9328      	str	r3, [sp, #160]	; 0xa0
 8023004:	e487      	b.n	8022916 <st_sssa8_ch_convolve_rgb+0xf6>
 8023006:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8023008:	9f15      	ldr	r7, [sp, #84]	; 0x54
 802300a:	e458      	b.n	80228be <st_sssa8_ch_convolve_rgb+0x9e>
 802300c:	f06f 0002 	mvn.w	r0, #2
 8023010:	e62b      	b.n	8022c6a <st_sssa8_ch_convolve_rgb+0x44a>
 8023012:	bf00      	nop
 8023014:	ffff0000 	.word	0xffff0000

08023018 <st_sssa8_ch_convolve_1x1_WeightsPrefetch>:
 8023018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802301a:	f06f 0509 	mvn.w	r5, #9
 802301e:	685f      	ldr	r7, [r3, #4]
 8023020:	fb02 f601 	mul.w	r6, r2, r1
 8023024:	fb05 7501 	mla	r5, r5, r1, r7
 8023028:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
 802302c:	db06      	blt.n	802303c <st_sssa8_ch_convolve_1x1_WeightsPrefetch+0x24>
 802302e:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8023032:	681b      	ldr	r3, [r3, #0]
 8023034:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023038:	f000 feb8 	bl	8023dac <st_sssa8_ch_fullW_prefetch>
 802303c:	2000      	movs	r0, #0
 802303e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023040 <st_sssa8_ch_convolve_1x1>:
 8023040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023044:	b091      	sub	sp, #68	; 0x44
 8023046:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 802304a:	920d      	str	r2, [sp, #52]	; 0x34
 802304c:	2d01      	cmp	r5, #1
 802304e:	f99d 2094 	ldrsb.w	r2, [sp, #148]	; 0x94
 8023052:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8023056:	920e      	str	r2, [sp, #56]	; 0x38
 8023058:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 802305c:	f8bd e080 	ldrh.w	lr, [sp, #128]	; 0x80
 8023060:	f8bd 8084 	ldrh.w	r8, [sp, #132]	; 0x84
 8023064:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8023066:	f99d c098 	ldrsb.w	ip, [sp, #152]	; 0x98
 802306a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802306c:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8023070:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 8023074:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
 8023078:	d164      	bne.n	8023144 <st_sssa8_ch_convolve_1x1+0x104>
 802307a:	2901      	cmp	r1, #1
 802307c:	d162      	bne.n	8023144 <st_sssa8_ch_convolve_1x1+0x104>
 802307e:	ea56 0100 	orrs.w	r1, r6, r0
 8023082:	d15f      	bne.n	8023144 <st_sssa8_ch_convolve_1x1+0x104>
 8023084:	f1be 0f01 	cmp.w	lr, #1
 8023088:	d15c      	bne.n	8023144 <st_sssa8_ch_convolve_1x1+0x104>
 802308a:	f1b8 0f01 	cmp.w	r8, #1
 802308e:	d159      	bne.n	8023144 <st_sssa8_ch_convolve_1x1+0x104>
 8023090:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 8023094:	ebc7 7e87 	rsb	lr, r7, r7, lsl #30
 8023098:	eb0a 0907 	add.w	r9, sl, r7
 802309c:	e9d2 1200 	ldrd	r1, r2, [r2]
 80230a0:	eb01 0949 	add.w	r9, r1, r9, lsl #1
 80230a4:	920f      	str	r2, [sp, #60]	; 0x3c
 80230a6:	eb09 0e8e 	add.w	lr, r9, lr, lsl #2
 80230aa:	2f00      	cmp	r7, #0
 80230ac:	d048      	beq.n	8023140 <st_sssa8_ch_convolve_1x1+0x100>
 80230ae:	ea4f 0b47 	mov.w	fp, r7, lsl #1
 80230b2:	f1ae 0604 	sub.w	r6, lr, #4
 80230b6:	f04f 0801 	mov.w	r8, #1
 80230ba:	eb04 050b 	add.w	r5, r4, fp
 80230be:	f934 2b02 	ldrsh.w	r2, [r4], #2
 80230c2:	fa08 f002 	lsl.w	r0, r8, r2
 80230c6:	fa0c f102 	lsl.w	r1, ip, r2
 80230ca:	2a00      	cmp	r2, #0
 80230cc:	eb01 0150 	add.w	r1, r1, r0, lsr #1
 80230d0:	dd31      	ble.n	8023136 <st_sssa8_ch_convolve_1x1+0xf6>
 80230d2:	42a5      	cmp	r5, r4
 80230d4:	f846 1f04 	str.w	r1, [r6, #4]!
 80230d8:	d1f1      	bne.n	80230be <st_sssa8_ch_convolve_1x1+0x7e>
 80230da:	462c      	mov	r4, r5
 80230dc:	44d6      	add	lr, sl
 80230de:	fb07 f503 	mul.w	r5, r7, r3
 80230e2:	461e      	mov	r6, r3
 80230e4:	f06f 0c09 	mvn.w	ip, #9
 80230e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80230ea:	eba4 040b 	sub.w	r4, r4, fp
 80230ee:	ebae 0e0a 	sub.w	lr, lr, sl
 80230f2:	fb0c 3c07 	mla	ip, ip, r7, r3
 80230f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80230f8:	9401      	str	r4, [sp, #4]
 80230fa:	ebbc 0f45 	cmp.w	ip, r5, lsl #1
 80230fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023100:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023102:	bfac      	ite	ge
 8023104:	464c      	movge	r4, r9
 8023106:	2400      	movlt	r4, #0
 8023108:	f8cd e018 	str.w	lr, [sp, #24]
 802310c:	f8cd 901c 	str.w	r9, [sp, #28]
 8023110:	9703      	str	r7, [sp, #12]
 8023112:	9408      	str	r4, [sp, #32]
 8023114:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8023118:	e9cd 6504 	strd	r6, r5, [sp, #16]
 802311c:	fb02 f101 	mul.w	r1, r2, r1
 8023120:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8023122:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8023124:	9102      	str	r1, [sp, #8]
 8023126:	9500      	str	r5, [sp, #0]
 8023128:	991a      	ldr	r1, [sp, #104]	; 0x68
 802312a:	f000 ff3f 	bl	8023fac <st_sssa8_ch_nn_mat_mult_nt_t>
 802312e:	2000      	movs	r0, #0
 8023130:	b011      	add	sp, #68	; 0x44
 8023132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023136:	42a5      	cmp	r5, r4
 8023138:	f846 cf04 	str.w	ip, [r6, #4]!
 802313c:	d1bf      	bne.n	80230be <st_sssa8_ch_convolve_1x1+0x7e>
 802313e:	e7cc      	b.n	80230da <st_sssa8_ch_convolve_1x1+0x9a>
 8023140:	46bb      	mov	fp, r7
 8023142:	e7cc      	b.n	80230de <st_sssa8_ch_convolve_1x1+0x9e>
 8023144:	f06f 0002 	mvn.w	r0, #2
 8023148:	e7f2      	b.n	8023130 <st_sssa8_ch_convolve_1x1+0xf0>
 802314a:	bf00      	nop

0802314c <ai_padding_opt_init>:
 802314c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023150:	2600      	movs	r6, #0
 8023152:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8023156:	e9c0 6600 	strd	r6, r6, [r0]
 802315a:	6086      	str	r6, [r0, #8]
 802315c:	689d      	ldr	r5, [r3, #8]
 802315e:	690c      	ldr	r4, [r1, #16]
 8023160:	42b5      	cmp	r5, r6
 8023162:	dd21      	ble.n	80231a8 <ai_padding_opt_init+0x5c>
 8023164:	4264      	negs	r4, r4
 8023166:	46b0      	mov	r8, r6
 8023168:	46b6      	mov	lr, r6
 802316a:	46b1      	mov	r9, r6
 802316c:	4637      	mov	r7, r6
 802316e:	e00f      	b.n	8023190 <ai_padding_opt_init+0x44>
 8023170:	6895      	ldr	r5, [r2, #8]
 8023172:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8023176:	1b2d      	subs	r5, r5, r4
 8023178:	42b5      	cmp	r5, r6
 802317a:	da10      	bge.n	802319e <ai_padding_opt_init+0x52>
 802317c:	f10e 0e01 	add.w	lr, lr, #1
 8023180:	f8c0 e008 	str.w	lr, [r0, #8]
 8023184:	3701      	adds	r7, #1
 8023186:	689d      	ldr	r5, [r3, #8]
 8023188:	688e      	ldr	r6, [r1, #8]
 802318a:	42bd      	cmp	r5, r7
 802318c:	4434      	add	r4, r6
 802318e:	dd0e      	ble.n	80231ae <ai_padding_opt_init+0x62>
 8023190:	2c00      	cmp	r4, #0
 8023192:	daed      	bge.n	8023170 <ai_padding_opt_init+0x24>
 8023194:	f109 0901 	add.w	r9, r9, #1
 8023198:	f8c0 9000 	str.w	r9, [r0]
 802319c:	e7f2      	b.n	8023184 <ai_padding_opt_init+0x38>
 802319e:	f108 0801 	add.w	r8, r8, #1
 80231a2:	f8c0 8004 	str.w	r8, [r0, #4]
 80231a6:	e7ed      	b.n	8023184 <ai_padding_opt_init+0x38>
 80231a8:	46b6      	mov	lr, r6
 80231aa:	46b0      	mov	r8, r6
 80231ac:	46b1      	mov	r9, r6
 80231ae:	2500      	movs	r5, #0
 80231b0:	e9c0 9803 	strd	r9, r8, [r0, #12]
 80231b4:	e9c0 e505 	strd	lr, r5, [r0, #20]
 80231b8:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80231bc:	685e      	ldr	r6, [r3, #4]
 80231be:	694c      	ldr	r4, [r1, #20]
 80231c0:	42ae      	cmp	r6, r5
 80231c2:	f1c4 0400 	rsb	r4, r4, #0
 80231c6:	dc0f      	bgt.n	80231e8 <ai_padding_opt_init+0x9c>
 80231c8:	e018      	b.n	80231fc <ai_padding_opt_init+0xb0>
 80231ca:	6856      	ldr	r6, [r2, #4]
 80231cc:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80231d0:	1b36      	subs	r6, r6, r4
 80231d2:	42be      	cmp	r6, r7
 80231d4:	da0e      	bge.n	80231f4 <ai_padding_opt_init+0xa8>
 80231d6:	6a06      	ldr	r6, [r0, #32]
 80231d8:	3601      	adds	r6, #1
 80231da:	6206      	str	r6, [r0, #32]
 80231dc:	3501      	adds	r5, #1
 80231de:	685e      	ldr	r6, [r3, #4]
 80231e0:	68cf      	ldr	r7, [r1, #12]
 80231e2:	42ae      	cmp	r6, r5
 80231e4:	443c      	add	r4, r7
 80231e6:	dd09      	ble.n	80231fc <ai_padding_opt_init+0xb0>
 80231e8:	2c00      	cmp	r4, #0
 80231ea:	daee      	bge.n	80231ca <ai_padding_opt_init+0x7e>
 80231ec:	6986      	ldr	r6, [r0, #24]
 80231ee:	3601      	adds	r6, #1
 80231f0:	6186      	str	r6, [r0, #24]
 80231f2:	e7f3      	b.n	80231dc <ai_padding_opt_init+0x90>
 80231f4:	69c6      	ldr	r6, [r0, #28]
 80231f6:	3601      	adds	r6, #1
 80231f8:	61c6      	str	r6, [r0, #28]
 80231fa:	e7ef      	b.n	80231dc <ai_padding_opt_init+0x90>
 80231fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08023200 <ai_padding_opt_phase1>:
 8023200:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8023204:	b932      	cbnz	r2, 8023214 <ai_padding_opt_phase1+0x14>
 8023206:	b993      	cbnz	r3, 802322e <ai_padding_opt_phase1+0x2e>
 8023208:	6a03      	ldr	r3, [r0, #32]
 802320a:	2201      	movs	r2, #1
 802320c:	3b01      	subs	r3, #1
 802320e:	8482      	strh	r2, [r0, #36]	; 0x24
 8023210:	6203      	str	r3, [r0, #32]
 8023212:	e005      	b.n	8023220 <ai_padding_opt_phase1+0x20>
 8023214:	2b00      	cmp	r3, #0
 8023216:	d0f7      	beq.n	8023208 <ai_padding_opt_phase1+0x8>
 8023218:	3b01      	subs	r3, #1
 802321a:	2201      	movs	r2, #1
 802321c:	61c3      	str	r3, [r0, #28]
 802321e:	8482      	strh	r2, [r0, #36]	; 0x24
 8023220:	6943      	ldr	r3, [r0, #20]
 8023222:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
 8023226:	6083      	str	r3, [r0, #8]
 8023228:	e9c0 1200 	strd	r1, r2, [r0]
 802322c:	4770      	bx	lr
 802322e:	3b01      	subs	r3, #1
 8023230:	8482      	strh	r2, [r0, #36]	; 0x24
 8023232:	61c3      	str	r3, [r0, #28]
 8023234:	e7f4      	b.n	8023220 <ai_padding_opt_phase1+0x20>
 8023236:	bf00      	nop

08023238 <st_uint8_fill>:
 8023238:	0403      	lsls	r3, r0, #16
 802323a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 802323e:	b410      	push	{r4}
 8023240:	4303      	orrs	r3, r0
 8023242:	0894      	lsrs	r4, r2, #2
 8023244:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8023248:	d011      	beq.n	802326e <st_uint8_fill+0x36>
 802324a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 802324e:	f841 3b04 	str.w	r3, [r1], #4
 8023252:	42a1      	cmp	r1, r4
 8023254:	d1fb      	bne.n	802324e <st_uint8_fill+0x16>
 8023256:	f012 0203 	ands.w	r2, r2, #3
 802325a:	d005      	beq.n	8023268 <st_uint8_fill+0x30>
 802325c:	4601      	mov	r1, r0
 802325e:	4620      	mov	r0, r4
 8023260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023264:	f002 ba84 	b.w	8025770 <memset>
 8023268:	f85d 4b04 	ldr.w	r4, [sp], #4
 802326c:	4770      	bx	lr
 802326e:	460c      	mov	r4, r1
 8023270:	e7f1      	b.n	8023256 <st_uint8_fill+0x1e>
 8023272:	bf00      	nop

08023274 <st_sssa8_ch_nn_mat_mult_kernel>:
 8023274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023278:	b09f      	sub	sp, #124	; 0x7c
 802327a:	460f      	mov	r7, r1
 802327c:	9004      	str	r0, [sp, #16]
 802327e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8023280:	9113      	str	r1, [sp, #76]	; 0x4c
 8023282:	0859      	lsrs	r1, r3, #1
 8023284:	eb00 0503 	add.w	r5, r0, r3
 8023288:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 802328c:	931c      	str	r3, [sp, #112]	; 0x70
 802328e:	921a      	str	r2, [sp, #104]	; 0x68
 8023290:	951b      	str	r5, [sp, #108]	; 0x6c
 8023292:	900d      	str	r0, [sp, #52]	; 0x34
 8023294:	f000 8272 	beq.w	802377c <st_sssa8_ch_nn_mat_mult_kernel+0x508>
 8023298:	4614      	mov	r4, r2
 802329a:	3901      	subs	r1, #1
 802329c:	f1a0 0210 	sub.w	r2, r0, #16
 80232a0:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 80232a4:	4623      	mov	r3, r4
 80232a6:	1ec4      	subs	r4, r0, #3
 80232a8:	0912      	lsrs	r2, r2, #4
 80232aa:	f8df b6dc 	ldr.w	fp, [pc, #1756]	; 8023988 <st_sssa8_ch_nn_mat_mult_kernel+0x714>
 80232ae:	3310      	adds	r3, #16
 80232b0:	9415      	str	r4, [sp, #84]	; 0x54
 80232b2:	b28c      	uxth	r4, r1
 80232b4:	3201      	adds	r2, #1
 80232b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80232b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80232bc:	9616      	str	r6, [sp, #88]	; 0x58
 80232be:	3108      	adds	r1, #8
 80232c0:	941d      	str	r4, [sp, #116]	; 0x74
 80232c2:	9314      	str	r3, [sp, #80]	; 0x50
 80232c4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80232c6:	910e      	str	r1, [sp, #56]	; 0x38
 80232c8:	3308      	adds	r3, #8
 80232ca:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80232cc:	930a      	str	r3, [sp, #40]	; 0x28
 80232ce:	0153      	lsls	r3, r2, #5
 80232d0:	0112      	lsls	r2, r2, #4
 80232d2:	3104      	adds	r1, #4
 80232d4:	920f      	str	r2, [sp, #60]	; 0x3c
 80232d6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80232d8:	910b      	str	r1, [sp, #44]	; 0x2c
 80232da:	3208      	adds	r2, #8
 80232dc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80232de:	9208      	str	r2, [sp, #32]
 80232e0:	18f2      	adds	r2, r6, r3
 80232e2:	18fb      	adds	r3, r7, r3
 80232e4:	3102      	adds	r1, #2
 80232e6:	9218      	str	r2, [sp, #96]	; 0x60
 80232e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80232ea:	1cab      	adds	r3, r5, #2
 80232ec:	9109      	str	r1, [sp, #36]	; 0x24
 80232ee:	930c      	str	r3, [sp, #48]	; 0x30
 80232f0:	1f03      	subs	r3, r0, #4
 80232f2:	9319      	str	r3, [sp, #100]	; 0x64
 80232f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80232f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80232f8:	9c04      	ldr	r4, [sp, #16]
 80232fa:	2b0f      	cmp	r3, #15
 80232fc:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8023300:	eb04 0003 	add.w	r0, r4, r3
 8023304:	f852 7c04 	ldr.w	r7, [r2, #-4]
 8023308:	9103      	str	r1, [sp, #12]
 802330a:	9000      	str	r0, [sp, #0]
 802330c:	f340 830b 	ble.w	8023926 <st_sssa8_ch_nn_mat_mult_kernel+0x6b2>
 8023310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023312:	463e      	mov	r6, r7
 8023314:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8023318:	468a      	mov	sl, r1
 802331a:	18c3      	adds	r3, r0, r3
 802331c:	9402      	str	r4, [sp, #8]
 802331e:	9305      	str	r3, [sp, #20]
 8023320:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023322:	9301      	str	r3, [sp, #4]
 8023324:	9b02      	ldr	r3, [sp, #8]
 8023326:	9800      	ldr	r0, [sp, #0]
 8023328:	6819      	ldr	r1, [r3, #0]
 802332a:	f8d0 9000 	ldr.w	r9, [r0]
 802332e:	9b01      	ldr	r3, [sp, #4]
 8023330:	ea4f 2831 	mov.w	r8, r1, ror #8
 8023334:	ea4f 2039 	mov.w	r0, r9, ror #8
 8023338:	fa2f f288 	sxtb16	r2, r8
 802333c:	f8d3 e000 	ldr.w	lr, [r3]
 8023340:	ea02 050b 	and.w	r5, r2, fp
 8023344:	fa2f f181 	sxtb16	r1, r1
 8023348:	fa2f f989 	sxtb16	r9, r9
 802334c:	fa1f f881 	uxth.w	r8, r1
 8023350:	fa1f f389 	uxth.w	r3, r9
 8023354:	fa2f f080 	sxtb16	r0, r0
 8023358:	ea00 040b 	and.w	r4, r0, fp
 802335c:	ea48 4802 	orr.w	r8, r8, r2, lsl #16
 8023360:	ea45 4111 	orr.w	r1, r5, r1, lsr #16
 8023364:	f8dc 2000 	ldr.w	r2, [ip]
 8023368:	ea44 4919 	orr.w	r9, r4, r9, lsr #16
 802336c:	9c03      	ldr	r4, [sp, #12]
 802336e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8023372:	fb28 430e 	smlad	r3, r8, lr, r4
 8023376:	fb28 a502 	smlad	r5, r8, r2, sl
 802337a:	fb20 770e 	smlad	r7, r0, lr, r7
 802337e:	fb20 6402 	smlad	r4, r0, r2, r6
 8023382:	9a01      	ldr	r2, [sp, #4]
 8023384:	f8dc 8004 	ldr.w	r8, [ip, #4]
 8023388:	f8d2 e004 	ldr.w	lr, [r2, #4]
 802338c:	fb21 330e 	smlad	r3, r1, lr, r3
 8023390:	fb21 5508 	smlad	r5, r1, r8, r5
 8023394:	fb29 770e 	smlad	r7, r9, lr, r7
 8023398:	fb29 4408 	smlad	r4, r9, r8, r4
 802339c:	9902      	ldr	r1, [sp, #8]
 802339e:	9e00      	ldr	r6, [sp, #0]
 80233a0:	6848      	ldr	r0, [r1, #4]
 80233a2:	6876      	ldr	r6, [r6, #4]
 80233a4:	ea4f 2130 	mov.w	r1, r0, ror #8
 80233a8:	f8d2 e008 	ldr.w	lr, [r2, #8]
 80233ac:	fa2f f981 	sxtb16	r9, r1
 80233b0:	ea09 0a0b 	and.w	sl, r9, fp
 80233b4:	ea4f 2836 	mov.w	r8, r6, ror #8
 80233b8:	fa2f f080 	sxtb16	r0, r0
 80233bc:	fa2f f888 	sxtb16	r8, r8
 80233c0:	b281      	uxth	r1, r0
 80233c2:	fa2f f686 	sxtb16	r6, r6
 80233c6:	ea4a 4010 	orr.w	r0, sl, r0, lsr #16
 80233ca:	ea08 0a0b 	and.w	sl, r8, fp
 80233ce:	b2b2      	uxth	r2, r6
 80233d0:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80233d4:	f8dc 9008 	ldr.w	r9, [ip, #8]
 80233d8:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 80233dc:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 80233e0:	fb21 330e 	smlad	r3, r1, lr, r3
 80233e4:	fb21 5509 	smlad	r5, r1, r9, r5
 80233e8:	fb22 7e0e 	smlad	lr, r2, lr, r7
 80233ec:	fb22 4209 	smlad	r2, r2, r9, r4
 80233f0:	9901      	ldr	r1, [sp, #4]
 80233f2:	f8dc 400c 	ldr.w	r4, [ip, #12]
 80233f6:	68cf      	ldr	r7, [r1, #12]
 80233f8:	fb20 3307 	smlad	r3, r0, r7, r3
 80233fc:	fb20 5504 	smlad	r5, r0, r4, r5
 8023400:	fb26 ee07 	smlad	lr, r6, r7, lr
 8023404:	fb26 2404 	smlad	r4, r6, r4, r2
 8023408:	9802      	ldr	r0, [sp, #8]
 802340a:	9f00      	ldr	r7, [sp, #0]
 802340c:	6882      	ldr	r2, [r0, #8]
 802340e:	68be      	ldr	r6, [r7, #8]
 8023410:	ea4f 2032 	mov.w	r0, r2, ror #8
 8023414:	690f      	ldr	r7, [r1, #16]
 8023416:	fa2f fa80 	sxtb16	sl, r0
 802341a:	ea0a 090b 	and.w	r9, sl, fp
 802341e:	ea4f 2836 	mov.w	r8, r6, ror #8
 8023422:	fa2f f282 	sxtb16	r2, r2
 8023426:	fa2f f888 	sxtb16	r8, r8
 802342a:	b290      	uxth	r0, r2
 802342c:	fa2f f686 	sxtb16	r6, r6
 8023430:	ea49 4212 	orr.w	r2, r9, r2, lsr #16
 8023434:	ea08 090b 	and.w	r9, r8, fp
 8023438:	b2b1      	uxth	r1, r6
 802343a:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 802343e:	f8dc a010 	ldr.w	sl, [ip, #16]
 8023442:	ea49 4616 	orr.w	r6, r9, r6, lsr #16
 8023446:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 802344a:	fb20 3307 	smlad	r3, r0, r7, r3
 802344e:	fb20 500a 	smlad	r0, r0, sl, r5
 8023452:	fb21 e707 	smlad	r7, r1, r7, lr
 8023456:	fb21 410a 	smlad	r1, r1, sl, r4
 802345a:	9c01      	ldr	r4, [sp, #4]
 802345c:	f8dc 5014 	ldr.w	r5, [ip, #20]
 8023460:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8023464:	fb22 3309 	smlad	r3, r2, r9, r3
 8023468:	fb22 0005 	smlad	r0, r2, r5, r0
 802346c:	fb26 7909 	smlad	r9, r6, r9, r7
 8023470:	fb26 1605 	smlad	r6, r6, r5, r1
 8023474:	9a02      	ldr	r2, [sp, #8]
 8023476:	9f01      	ldr	r7, [sp, #4]
 8023478:	68d5      	ldr	r5, [r2, #12]
 802347a:	3210      	adds	r2, #16
 802347c:	69bf      	ldr	r7, [r7, #24]
 802347e:	9202      	str	r2, [sp, #8]
 8023480:	9a00      	ldr	r2, [sp, #0]
 8023482:	68d4      	ldr	r4, [r2, #12]
 8023484:	3210      	adds	r2, #16
 8023486:	9200      	str	r2, [sp, #0]
 8023488:	ea4f 2235 	mov.w	r2, r5, ror #8
 802348c:	fa2f fa82 	sxtb16	sl, r2
 8023490:	ea0a 0e0b 	and.w	lr, sl, fp
 8023494:	ea4f 2834 	mov.w	r8, r4, ror #8
 8023498:	fa2f f585 	sxtb16	r5, r5
 802349c:	fa2f f888 	sxtb16	r8, r8
 80234a0:	b2aa      	uxth	r2, r5
 80234a2:	fa2f f484 	sxtb16	r4, r4
 80234a6:	ea4e 4515 	orr.w	r5, lr, r5, lsr #16
 80234aa:	ea08 0e0b 	and.w	lr, r8, fp
 80234ae:	b2a1      	uxth	r1, r4
 80234b0:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80234b4:	f8dc a018 	ldr.w	sl, [ip, #24]
 80234b8:	ea4e 4414 	orr.w	r4, lr, r4, lsr #16
 80234bc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80234c0:	fb22 3307 	smlad	r3, r2, r7, r3
 80234c4:	fb22 020a 	smlad	r2, r2, sl, r0
 80234c8:	fb21 9707 	smlad	r7, r1, r7, r9
 80234cc:	fb21 660a 	smlad	r6, r1, sl, r6
 80234d0:	9901      	ldr	r1, [sp, #4]
 80234d2:	f10c 0c20 	add.w	ip, ip, #32
 80234d6:	f85c ec04 	ldr.w	lr, [ip, #-4]
 80234da:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80234de:	3120      	adds	r1, #32
 80234e0:	9101      	str	r1, [sp, #4]
 80234e2:	fb25 3309 	smlad	r3, r5, r9, r3
 80234e6:	9303      	str	r3, [sp, #12]
 80234e8:	fb25 2a0e 	smlad	sl, r5, lr, r2
 80234ec:	fb24 7709 	smlad	r7, r4, r9, r7
 80234f0:	fb24 660e 	smlad	r6, r4, lr, r6
 80234f4:	9a00      	ldr	r2, [sp, #0]
 80234f6:	9b05      	ldr	r3, [sp, #20]
 80234f8:	429a      	cmp	r2, r3
 80234fa:	f47f af13 	bne.w	8023324 <st_sssa8_ch_nn_mat_mult_kernel+0xb0>
 80234fe:	9a04      	ldr	r2, [sp, #16]
 8023500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023502:	4611      	mov	r1, r2
 8023504:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023506:	9307      	str	r3, [sp, #28]
 8023508:	4419      	add	r1, r3
 802350a:	9206      	str	r2, [sp, #24]
 802350c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802350e:	9104      	str	r1, [sp, #16]
 8023510:	9205      	str	r2, [sp, #20]
 8023512:	9915      	ldr	r1, [sp, #84]	; 0x54
 8023514:	428b      	cmp	r3, r1
 8023516:	da64      	bge.n	80235e2 <st_sssa8_ch_nn_mat_mult_kernel+0x36e>
 8023518:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802351a:	1ad3      	subs	r3, r2, r3
 802351c:	9a04      	ldr	r2, [sp, #16]
 802351e:	089b      	lsrs	r3, r3, #2
 8023520:	9201      	str	r2, [sp, #4]
 8023522:	9a00      	ldr	r2, [sp, #0]
 8023524:	9312      	str	r3, [sp, #72]	; 0x48
 8023526:	3301      	adds	r3, #1
 8023528:	9311      	str	r3, [sp, #68]	; 0x44
 802352a:	009b      	lsls	r3, r3, #2
 802352c:	e9dd 9005 	ldrd	r9, r0, [sp, #20]
 8023530:	9310      	str	r3, [sp, #64]	; 0x40
 8023532:	18d3      	adds	r3, r2, r3
 8023534:	9302      	str	r3, [sp, #8]
 8023536:	9b01      	ldr	r3, [sp, #4]
 8023538:	f8d9 8000 	ldr.w	r8, [r9]
 802353c:	f853 4b04 	ldr.w	r4, [r3], #4
 8023540:	fa2f f184 	sxtb16	r1, r4
 8023544:	9301      	str	r3, [sp, #4]
 8023546:	ea4f 2534 	mov.w	r5, r4, ror #8
 802354a:	9b00      	ldr	r3, [sp, #0]
 802354c:	fa1f fe81 	uxth.w	lr, r1
 8023550:	fa2f f585 	sxtb16	r5, r5
 8023554:	f853 2b04 	ldr.w	r2, [r3], #4
 8023558:	ea05 040b 	and.w	r4, r5, fp
 802355c:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8023560:	f8d0 e000 	ldr.w	lr, [r0]
 8023564:	9300      	str	r3, [sp, #0]
 8023566:	ea4f 2c32 	mov.w	ip, r2, ror #8
 802356a:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 802356e:	fa2f fc8c 	sxtb16	ip, ip
 8023572:	fa2f f282 	sxtb16	r2, r2
 8023576:	ea0c 010b 	and.w	r1, ip, fp
 802357a:	b293      	uxth	r3, r2
 802357c:	ea41 4212 	orr.w	r2, r1, r2, lsr #16
 8023580:	9903      	ldr	r1, [sp, #12]
 8023582:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8023586:	fb25 1108 	smlad	r1, r5, r8, r1
 802358a:	fb25 aa0e 	smlad	sl, r5, lr, sl
 802358e:	fb23 7708 	smlad	r7, r3, r8, r7
 8023592:	fb23 630e 	smlad	r3, r3, lr, r6
 8023596:	f8d9 5004 	ldr.w	r5, [r9, #4]
 802359a:	3008      	adds	r0, #8
 802359c:	f850 6c04 	ldr.w	r6, [r0, #-4]
 80235a0:	f109 0908 	add.w	r9, r9, #8
 80235a4:	fb24 1105 	smlad	r1, r4, r5, r1
 80235a8:	9103      	str	r1, [sp, #12]
 80235aa:	fb24 aa06 	smlad	sl, r4, r6, sl
 80235ae:	fb22 7705 	smlad	r7, r2, r5, r7
 80235b2:	fb22 3606 	smlad	r6, r2, r6, r3
 80235b6:	9a02      	ldr	r2, [sp, #8]
 80235b8:	9b00      	ldr	r3, [sp, #0]
 80235ba:	429a      	cmp	r2, r3
 80235bc:	d1bb      	bne.n	8023536 <st_sssa8_ch_nn_mat_mult_kernel+0x2c2>
 80235be:	9904      	ldr	r1, [sp, #16]
 80235c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80235c2:	9a07      	ldr	r2, [sp, #28]
 80235c4:	4401      	add	r1, r0
 80235c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80235c8:	3204      	adds	r2, #4
 80235ca:	9104      	str	r1, [sp, #16]
 80235cc:	00db      	lsls	r3, r3, #3
 80235ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 80235d0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80235d4:	9207      	str	r2, [sp, #28]
 80235d6:	9a06      	ldr	r2, [sp, #24]
 80235d8:	441a      	add	r2, r3
 80235da:	9206      	str	r2, [sp, #24]
 80235dc:	9a05      	ldr	r2, [sp, #20]
 80235de:	441a      	add	r2, r3
 80235e0:	9205      	str	r2, [sp, #20]
 80235e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80235e4:	9a07      	ldr	r2, [sp, #28]
 80235e6:	4295      	cmp	r5, r2
 80235e8:	dd4e      	ble.n	8023688 <st_sssa8_ch_nn_mat_mult_kernel+0x414>
 80235ea:	f102 0c01 	add.w	ip, r2, #1
 80235ee:	9a05      	ldr	r2, [sp, #20]
 80235f0:	9b04      	ldr	r3, [sp, #16]
 80235f2:	f9b2 0000 	ldrsh.w	r0, [r2]
 80235f6:	4565      	cmp	r5, ip
 80235f8:	9a06      	ldr	r2, [sp, #24]
 80235fa:	f993 4000 	ldrsb.w	r4, [r3]
 80235fe:	f9b2 1000 	ldrsh.w	r1, [r2]
 8023602:	9b03      	ldr	r3, [sp, #12]
 8023604:	9a00      	ldr	r2, [sp, #0]
 8023606:	fb11 aa04 	smlabb	sl, r1, r4, sl
 802360a:	fb10 3304 	smlabb	r3, r0, r4, r3
 802360e:	f992 2000 	ldrsb.w	r2, [r2]
 8023612:	9303      	str	r3, [sp, #12]
 8023614:	fb10 7702 	smlabb	r7, r0, r2, r7
 8023618:	fb11 6602 	smlabb	r6, r1, r2, r6
 802361c:	f340 817f 	ble.w	802391e <st_sssa8_ch_nn_mat_mult_kernel+0x6aa>
 8023620:	9a04      	ldr	r2, [sp, #16]
 8023622:	9b07      	ldr	r3, [sp, #28]
 8023624:	f992 4001 	ldrsb.w	r4, [r2, #1]
 8023628:	9a05      	ldr	r2, [sp, #20]
 802362a:	3302      	adds	r3, #2
 802362c:	9d03      	ldr	r5, [sp, #12]
 802362e:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8023632:	9a06      	ldr	r2, [sp, #24]
 8023634:	fb10 5504 	smlabb	r5, r0, r4, r5
 8023638:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 802363c:	9a00      	ldr	r2, [sp, #0]
 802363e:	9503      	str	r5, [sp, #12]
 8023640:	fb11 aa04 	smlabb	sl, r1, r4, sl
 8023644:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8023648:	fb10 7702 	smlabb	r7, r0, r2, r7
 802364c:	fb11 6602 	smlabb	r6, r1, r2, r6
 8023650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023652:	429a      	cmp	r2, r3
 8023654:	f340 8170 	ble.w	8023938 <st_sssa8_ch_nn_mat_mult_kernel+0x6c4>
 8023658:	9b05      	ldr	r3, [sp, #20]
 802365a:	9c04      	ldr	r4, [sp, #16]
 802365c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8023660:	9b00      	ldr	r3, [sp, #0]
 8023662:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8023666:	9b06      	ldr	r3, [sp, #24]
 8023668:	fb12 7701 	smlabb	r7, r2, r1, r7
 802366c:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8023670:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8023674:	fb10 6601 	smlabb	r6, r0, r1, r6
 8023678:	1ce1      	adds	r1, r4, #3
 802367a:	fb10 aa03 	smlabb	sl, r0, r3, sl
 802367e:	9104      	str	r1, [sp, #16]
 8023680:	9903      	ldr	r1, [sp, #12]
 8023682:	fb12 1203 	smlabb	r2, r2, r3, r1
 8023686:	9203      	str	r2, [sp, #12]
 8023688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802368a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802368c:	f933 4c04 	ldrsh.w	r4, [r3, #-4]
 8023690:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8023694:	2c00      	cmp	r4, #0
 8023696:	9a08      	ldr	r2, [sp, #32]
 8023698:	f852 0c08 	ldr.w	r0, [r2, #-8]
 802369c:	f340 8120 	ble.w	80238e0 <st_sssa8_ch_nn_mat_mult_kernel+0x66c>
 80236a0:	9a03      	ldr	r2, [sp, #12]
 80236a2:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80236a6:	fb5a 0a01 	smmla	sl, sl, r1, r0
 80236aa:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80236ae:	fb58 0801 	smmla	r8, r8, r1, r0
 80236b2:	fa48 f804 	asr.w	r8, r8, r4
 80236b6:	f308 0807 	ssat	r8, #8, r8
 80236ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80236bc:	f802 8c02 	strb.w	r8, [r2, #-2]
 80236c0:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 80236c4:	fa4a fa01 	asr.w	sl, sl, r1
 80236c8:	f30a 0a07 	ssat	sl, #8, sl
 80236cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80236ce:	f803 ac02 	strb.w	sl, [r3, #-2]
 80236d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80236d4:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
 80236d8:	2b00      	cmp	r3, #0
 80236da:	f340 80de 	ble.w	802389a <st_sssa8_ch_nn_mat_mult_kernel+0x626>
 80236de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80236e0:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80236e4:	9808      	ldr	r0, [sp, #32]
 80236e6:	0071      	lsls	r1, r6, #1
 80236e8:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80236ec:	f850 0c04 	ldr.w	r0, [r0, #-4]
 80236f0:	fb5e 0e02 	smmla	lr, lr, r2, r0
 80236f4:	fb51 0102 	smmla	r1, r1, r2, r0
 80236f8:	fa4e fe03 	asr.w	lr, lr, r3
 80236fc:	f30e 0307 	ssat	r3, #8, lr
 8023700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023702:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023706:	f934 0c02 	ldrsh.w	r0, [r4, #-2]
 802370a:	fa41 f000 	asr.w	r0, r1, r0
 802370e:	f300 0007 	ssat	r0, #8, r0
 8023712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023714:	f803 0c01 	strb.w	r0, [r3, #-1]
 8023718:	9a04      	ldr	r2, [sp, #16]
 802371a:	990d      	ldr	r1, [sp, #52]	; 0x34
 802371c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802371e:	440a      	add	r2, r1
 8023720:	3308      	adds	r3, #8
 8023722:	9204      	str	r2, [sp, #16]
 8023724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023726:	930e      	str	r3, [sp, #56]	; 0x38
 8023728:	3204      	adds	r2, #4
 802372a:	920b      	str	r2, [sp, #44]	; 0x2c
 802372c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802372e:	3208      	adds	r2, #8
 8023730:	920a      	str	r2, [sp, #40]	; 0x28
 8023732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023734:	3202      	adds	r2, #2
 8023736:	9209      	str	r2, [sp, #36]	; 0x24
 8023738:	9a08      	ldr	r2, [sp, #32]
 802373a:	3208      	adds	r2, #8
 802373c:	9208      	str	r2, [sp, #32]
 802373e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023740:	3202      	adds	r2, #2
 8023742:	920c      	str	r2, [sp, #48]	; 0x30
 8023744:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023746:	4293      	cmp	r3, r2
 8023748:	f47f add4 	bne.w	80232f4 <st_sssa8_ch_nn_mat_mult_kernel+0x80>
 802374c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802374e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023750:	3301      	adds	r3, #1
 8023752:	00da      	lsls	r2, r3, #3
 8023754:	0059      	lsls	r1, r3, #1
 8023756:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802375a:	9329      	str	r3, [sp, #164]	; 0xa4
 802375c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802375e:	4413      	add	r3, r2
 8023760:	931a      	str	r3, [sp, #104]	; 0x68
 8023762:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023764:	4413      	add	r3, r2
 8023766:	932a      	str	r3, [sp, #168]	; 0xa8
 8023768:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802376a:	4413      	add	r3, r2
 802376c:	932b      	str	r3, [sp, #172]	; 0xac
 802376e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023770:	440b      	add	r3, r1
 8023772:	932c      	str	r3, [sp, #176]	; 0xb0
 8023774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023776:	440b      	add	r3, r1
 8023778:	931b      	str	r3, [sp, #108]	; 0x6c
 802377a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802377c:	07da      	lsls	r2, r3, #31
 802377e:	f140 8086 	bpl.w	802388e <st_sssa8_ch_nn_mat_mult_kernel+0x61a>
 8023782:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023784:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8023786:	6818      	ldr	r0, [r3, #0]
 8023788:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802378a:	ea5f 0a93 	movs.w	sl, r3, lsr #2
 802378e:	eb07 0943 	add.w	r9, r7, r3, lsl #1
 8023792:	f000 80f6 	beq.w	8023982 <st_sssa8_ch_nn_mat_mult_kernel+0x70e>
 8023796:	f10a 3aff 	add.w	sl, sl, #4294967295
 802379a:	9d04      	ldr	r5, [sp, #16]
 802379c:	46cc      	mov	ip, r9
 802379e:	4602      	mov	r2, r0
 80237a0:	fa1f fa8a 	uxth.w	sl, sl
 80237a4:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8023988 <st_sssa8_ch_nn_mat_mult_kernel+0x714>
 80237a8:	f10a 0a01 	add.w	sl, sl, #1
 80237ac:	eb05 0e8a 	add.w	lr, r5, sl, lsl #2
 80237b0:	f855 1b04 	ldr.w	r1, [r5], #4
 80237b4:	fa2f f481 	sxtb16	r4, r1
 80237b8:	ea4f 2331 	mov.w	r3, r1, ror #8
 80237bc:	683e      	ldr	r6, [r7, #0]
 80237be:	b2a1      	uxth	r1, r4
 80237c0:	fa2f f383 	sxtb16	r3, r3
 80237c4:	ea03 0b08 	and.w	fp, r3, r8
 80237c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80237cc:	ea4b 4414 	orr.w	r4, fp, r4, lsr #16
 80237d0:	fb23 0606 	smlad	r6, r3, r6, r0
 80237d4:	f8dc 1000 	ldr.w	r1, [ip]
 80237d8:	fb23 2301 	smlad	r3, r3, r1, r2
 80237dc:	6878      	ldr	r0, [r7, #4]
 80237de:	f10c 0c08 	add.w	ip, ip, #8
 80237e2:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 80237e6:	3708      	adds	r7, #8
 80237e8:	fb24 6000 	smlad	r0, r4, r0, r6
 80237ec:	fb24 3202 	smlad	r2, r4, r2, r3
 80237f0:	45ae      	cmp	lr, r5
 80237f2:	d1dd      	bne.n	80237b0 <st_sssa8_ch_nn_mat_mult_kernel+0x53c>
 80237f4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80237f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80237fa:	9504      	str	r5, [sp, #16]
 80237fc:	4453      	add	r3, sl
 80237fe:	44d1      	add	r9, sl
 8023800:	9313      	str	r3, [sp, #76]	; 0x4c
 8023802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023804:	f013 0303 	ands.w	r3, r3, #3
 8023808:	d020      	beq.n	802384c <st_sssa8_ch_nn_mat_mult_kernel+0x5d8>
 802380a:	9e04      	ldr	r6, [sp, #16]
 802380c:	2b01      	cmp	r3, #1
 802380e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8023810:	f996 1000 	ldrsb.w	r1, [r6]
 8023814:	883d      	ldrh	r5, [r7, #0]
 8023816:	f8b9 4000 	ldrh.w	r4, [r9]
 802381a:	fb15 0001 	smlabb	r0, r5, r1, r0
 802381e:	fb14 2201 	smlabb	r2, r4, r1, r2
 8023822:	d013      	beq.n	802384c <st_sssa8_ch_nn_mat_mult_kernel+0x5d8>
 8023824:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8023828:	2b02      	cmp	r3, #2
 802382a:	887d      	ldrh	r5, [r7, #2]
 802382c:	f8b9 4002 	ldrh.w	r4, [r9, #2]
 8023830:	fb15 0001 	smlabb	r0, r5, r1, r0
 8023834:	fb14 2201 	smlabb	r2, r4, r1, r2
 8023838:	d008      	beq.n	802384c <st_sssa8_ch_nn_mat_mult_kernel+0x5d8>
 802383a:	f996 3002 	ldrsb.w	r3, [r6, #2]
 802383e:	88bc      	ldrh	r4, [r7, #4]
 8023840:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 8023844:	fb14 0003 	smlabb	r0, r4, r3, r0
 8023848:	fb11 2203 	smlabb	r2, r1, r3, r2
 802384c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802384e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8023852:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023854:	2e00      	cmp	r6, #0
 8023856:	f103 0101 	add.w	r1, r3, #1
 802385a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802385c:	681d      	ldr	r5, [r3, #0]
 802385e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023860:	681c      	ldr	r4, [r3, #0]
 8023862:	dd6d      	ble.n	8023940 <st_sssa8_ch_nn_mat_mult_kernel+0x6cc>
 8023864:	0040      	lsls	r0, r0, #1
 8023866:	0053      	lsls	r3, r2, #1
 8023868:	fb50 4205 	smmla	r2, r0, r5, r4
 802386c:	fb53 4305 	smmla	r3, r3, r5, r4
 8023870:	4132      	asrs	r2, r6
 8023872:	f302 0207 	ssat	r2, #8, r2
 8023876:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8023878:	7002      	strb	r2, [r0, #0]
 802387a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802387c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8023880:	4113      	asrs	r3, r2
 8023882:	f303 0307 	ssat	r3, #8, r3
 8023886:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8023888:	912c      	str	r1, [sp, #176]	; 0xb0
 802388a:	7013      	strb	r3, [r2, #0]
 802388c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802388e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023890:	4413      	add	r3, r2
 8023892:	4618      	mov	r0, r3
 8023894:	b01f      	add	sp, #124	; 0x7c
 8023896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802389a:	f1c3 0301 	rsb	r3, r3, #1
 802389e:	fa07 fe03 	lsl.w	lr, r7, r3
 80238a2:	f30e 051f 	ssat	r5, #32, lr
 80238a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80238a8:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80238ac:	fb55 f512 	smmulr	r5, r5, r2
 80238b0:	fa06 f103 	lsl.w	r1, r6, r3
 80238b4:	f301 011f 	ssat	r1, #32, r1
 80238b8:	fb51 f112 	smmulr	r1, r1, r2
 80238bc:	9b08      	ldr	r3, [sp, #32]
 80238be:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80238c2:	442a      	add	r2, r5
 80238c4:	f302 0207 	ssat	r2, #8, r2
 80238c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80238ca:	f800 2c01 	strb.w	r2, [r0, #-1]
 80238ce:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80238d2:	440b      	add	r3, r1
 80238d4:	f303 0307 	ssat	r3, #8, r3
 80238d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80238da:	f802 3c01 	strb.w	r3, [r2, #-1]
 80238de:	e71b      	b.n	8023718 <st_sssa8_ch_nn_mat_mult_kernel+0x4a4>
 80238e0:	f1c4 0301 	rsb	r3, r4, #1
 80238e4:	9a03      	ldr	r2, [sp, #12]
 80238e6:	fa02 f803 	lsl.w	r8, r2, r3
 80238ea:	f308 041f 	ssat	r4, #32, r8
 80238ee:	fb54 f411 	smmulr	r4, r4, r1
 80238f2:	fa0a f303 	lsl.w	r3, sl, r3
 80238f6:	f303 031f 	ssat	r3, #32, r3
 80238fa:	fb53 f111 	smmulr	r1, r3, r1
 80238fe:	4420      	add	r0, r4
 8023900:	f300 0007 	ssat	r0, #8, r0
 8023904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023906:	f803 0c02 	strb.w	r0, [r3, #-2]
 802390a:	9b08      	ldr	r3, [sp, #32]
 802390c:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8023910:	4419      	add	r1, r3
 8023912:	f301 0107 	ssat	r1, #8, r1
 8023916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023918:	f803 1c02 	strb.w	r1, [r3, #-2]
 802391c:	e6d9      	b.n	80236d2 <st_sssa8_ch_nn_mat_mult_kernel+0x45e>
 802391e:	9b04      	ldr	r3, [sp, #16]
 8023920:	3301      	adds	r3, #1
 8023922:	9304      	str	r3, [sp, #16]
 8023924:	e6b0      	b.n	8023688 <st_sssa8_ch_nn_mat_mult_kernel+0x414>
 8023926:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023928:	468a      	mov	sl, r1
 802392a:	463e      	mov	r6, r7
 802392c:	9306      	str	r3, [sp, #24]
 802392e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023930:	9305      	str	r3, [sp, #20]
 8023932:	2300      	movs	r3, #0
 8023934:	9307      	str	r3, [sp, #28]
 8023936:	e5ec      	b.n	8023512 <st_sssa8_ch_nn_mat_mult_kernel+0x29e>
 8023938:	9b04      	ldr	r3, [sp, #16]
 802393a:	3302      	adds	r3, #2
 802393c:	9304      	str	r3, [sp, #16]
 802393e:	e6a3      	b.n	8023688 <st_sssa8_ch_nn_mat_mult_kernel+0x414>
 8023940:	f1c6 0601 	rsb	r6, r6, #1
 8023944:	fa00 f306 	lsl.w	r3, r0, r6
 8023948:	f303 031f 	ssat	r3, #32, r3
 802394c:	fb53 f315 	smmulr	r3, r3, r5
 8023950:	40b2      	lsls	r2, r6
 8023952:	f302 021f 	ssat	r2, #32, r2
 8023956:	fb52 f215 	smmulr	r2, r2, r5
 802395a:	4423      	add	r3, r4
 802395c:	f303 0307 	ssat	r3, #8, r3
 8023960:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8023962:	7003      	strb	r3, [r0, #0]
 8023964:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023966:	681b      	ldr	r3, [r3, #0]
 8023968:	4413      	add	r3, r2
 802396a:	f303 0307 	ssat	r3, #8, r3
 802396e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8023970:	912c      	str	r1, [sp, #176]	; 0xb0
 8023972:	7013      	strb	r3, [r2, #0]
 8023974:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023976:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023978:	4413      	add	r3, r2
 802397a:	4618      	mov	r0, r3
 802397c:	b01f      	add	sp, #124	; 0x7c
 802397e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023982:	4602      	mov	r2, r0
 8023984:	e73e      	b.n	8023804 <st_sssa8_ch_nn_mat_mult_kernel+0x590>
 8023986:	bf00      	nop
 8023988:	ffff0000 	.word	0xffff0000

0802398c <st_int8_to16_no_shift>:
 802398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023990:	f1b2 0610 	subs.w	r6, r2, #16
 8023994:	f100 8092 	bmi.w	8023abc <st_int8_to16_no_shift+0x130>
 8023998:	0936      	lsrs	r6, r6, #4
 802399a:	4603      	mov	r3, r0
 802399c:	4f4b      	ldr	r7, [pc, #300]	; (8023acc <st_int8_to16_no_shift+0x140>)
 802399e:	f106 0801 	add.w	r8, r6, #1
 80239a2:	eb01 1448 	add.w	r4, r1, r8, lsl #5
 80239a6:	681d      	ldr	r5, [r3, #0]
 80239a8:	3120      	adds	r1, #32
 80239aa:	685e      	ldr	r6, [r3, #4]
 80239ac:	3310      	adds	r3, #16
 80239ae:	ea4f 2c35 	mov.w	ip, r5, ror #8
 80239b2:	fa2f fc8c 	sxtb16	ip, ip
 80239b6:	ea0c 0a07 	and.w	sl, ip, r7
 80239ba:	ea4f 2e36 	mov.w	lr, r6, ror #8
 80239be:	fa2f f585 	sxtb16	r5, r5
 80239c2:	fa2f fe8e 	sxtb16	lr, lr
 80239c6:	fa1f fb85 	uxth.w	fp, r5
 80239ca:	ea0e 0907 	and.w	r9, lr, r7
 80239ce:	ea4a 4a15 	orr.w	sl, sl, r5, lsr #16
 80239d2:	fa2f f686 	sxtb16	r6, r6
 80239d6:	b2b5      	uxth	r5, r6
 80239d8:	f841 ac1c 	str.w	sl, [r1, #-28]
 80239dc:	ea4b 4c0c 	orr.w	ip, fp, ip, lsl #16
 80239e0:	ea49 4616 	orr.w	r6, r9, r6, lsr #16
 80239e4:	ea45 450e 	orr.w	r5, r5, lr, lsl #16
 80239e8:	f841 cc20 	str.w	ip, [r1, #-32]
 80239ec:	f841 6c14 	str.w	r6, [r1, #-20]
 80239f0:	f841 5c18 	str.w	r5, [r1, #-24]
 80239f4:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80239f8:	f853 5c04 	ldr.w	r5, [r3, #-4]
 80239fc:	ea4f 2e36 	mov.w	lr, r6, ror #8
 8023a00:	fa2f fe8e 	sxtb16	lr, lr
 8023a04:	ea0e 0a07 	and.w	sl, lr, r7
 8023a08:	ea4f 2c35 	mov.w	ip, r5, ror #8
 8023a0c:	fa2f f686 	sxtb16	r6, r6
 8023a10:	fa2f f98c 	sxtb16	r9, ip
 8023a14:	fa1f fb86 	uxth.w	fp, r6
 8023a18:	fa2f f585 	sxtb16	r5, r5
 8023a1c:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 8023a20:	ea09 0a07 	and.w	sl, r9, r7
 8023a24:	fa1f fc85 	uxth.w	ip, r5
 8023a28:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 8023a2c:	f841 6c0c 	str.w	r6, [r1, #-12]
 8023a30:	ea4a 4515 	orr.w	r5, sl, r5, lsr #16
 8023a34:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8023a38:	f841 ec10 	str.w	lr, [r1, #-16]
 8023a3c:	f841 5c04 	str.w	r5, [r1, #-4]
 8023a40:	f841 cc08 	str.w	ip, [r1, #-8]
 8023a44:	428c      	cmp	r4, r1
 8023a46:	d1ae      	bne.n	80239a6 <st_int8_to16_no_shift+0x1a>
 8023a48:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8023a4c:	f1a2 0c04 	sub.w	ip, r2, #4
 8023a50:	45b4      	cmp	ip, r6
 8023a52:	4430      	add	r0, r6
 8023a54:	db38      	blt.n	8023ac8 <st_int8_to16_no_shift+0x13c>
 8023a56:	ebac 0c06 	sub.w	ip, ip, r6
 8023a5a:	4607      	mov	r7, r0
 8023a5c:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8023acc <st_int8_to16_no_shift+0x140>
 8023a60:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8023a64:	f10c 0801 	add.w	r8, ip, #1
 8023a68:	eb04 05c8 	add.w	r5, r4, r8, lsl #3
 8023a6c:	f857 3b04 	ldr.w	r3, [r7], #4
 8023a70:	3408      	adds	r4, #8
 8023a72:	fa2f f983 	sxtb16	r9, r3
 8023a76:	ea4f 2333 	mov.w	r3, r3, ror #8
 8023a7a:	fa1f f189 	uxth.w	r1, r9
 8023a7e:	fa2f f383 	sxtb16	r3, r3
 8023a82:	ea03 0a0e 	and.w	sl, r3, lr
 8023a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8023a8a:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 8023a8e:	f844 3c08 	str.w	r3, [r4, #-8]
 8023a92:	f844 9c04 	str.w	r9, [r4, #-4]
 8023a96:	42a5      	cmp	r5, r4
 8023a98:	d1e8      	bne.n	8023a6c <st_int8_to16_no_shift+0xe0>
 8023a9a:	3604      	adds	r6, #4
 8023a9c:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 8023aa0:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 8023aa4:	42b2      	cmp	r2, r6
 8023aa6:	dd07      	ble.n	8023ab8 <st_int8_to16_no_shift+0x12c>
 8023aa8:	1b92      	subs	r2, r2, r6
 8023aaa:	4402      	add	r2, r0
 8023aac:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8023ab0:	4290      	cmp	r0, r2
 8023ab2:	f825 3b02 	strh.w	r3, [r5], #2
 8023ab6:	d1f9      	bne.n	8023aac <st_int8_to16_no_shift+0x120>
 8023ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023abc:	2600      	movs	r6, #0
 8023abe:	f1a2 0c04 	sub.w	ip, r2, #4
 8023ac2:	460c      	mov	r4, r1
 8023ac4:	45b4      	cmp	ip, r6
 8023ac6:	dac6      	bge.n	8023a56 <st_int8_to16_no_shift+0xca>
 8023ac8:	4625      	mov	r5, r4
 8023aca:	e7eb      	b.n	8023aa4 <st_int8_to16_no_shift+0x118>
 8023acc:	ffff0000 	.word	0xffff0000

08023ad0 <st_int8_to16_dual>:
 8023ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ad4:	b08b      	sub	sp, #44	; 0x2c
 8023ad6:	468a      	mov	sl, r1
 8023ad8:	eb00 0802 	add.w	r8, r0, r2
 8023adc:	9309      	str	r3, [sp, #36]	; 0x24
 8023ade:	085b      	lsrs	r3, r3, #1
 8023ae0:	9200      	str	r2, [sp, #0]
 8023ae2:	9301      	str	r3, [sp, #4]
 8023ae4:	f000 8123 	beq.w	8023d2e <st_int8_to16_dual+0x25e>
 8023ae8:	f1a2 0310 	sub.w	r3, r2, #16
 8023aec:	3a04      	subs	r2, #4
 8023aee:	46c2      	mov	sl, r8
 8023af0:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 8023da8 <st_int8_to16_dual+0x2d8>
 8023af4:	9307      	str	r3, [sp, #28]
 8023af6:	091b      	lsrs	r3, r3, #4
 8023af8:	9206      	str	r2, [sp, #24]
 8023afa:	4688      	mov	r8, r1
 8023afc:	3301      	adds	r3, #1
 8023afe:	011a      	lsls	r2, r3, #4
 8023b00:	019b      	lsls	r3, r3, #6
 8023b02:	9202      	str	r2, [sp, #8]
 8023b04:	9308      	str	r3, [sp, #32]
 8023b06:	9b07      	ldr	r3, [sp, #28]
 8023b08:	2b00      	cmp	r3, #0
 8023b0a:	f2c0 8145 	blt.w	8023d98 <st_int8_to16_dual+0x2c8>
 8023b0e:	9b02      	ldr	r3, [sp, #8]
 8023b10:	4655      	mov	r5, sl
 8023b12:	18c4      	adds	r4, r0, r3
 8023b14:	4643      	mov	r3, r8
 8023b16:	682e      	ldr	r6, [r5, #0]
 8023b18:	3010      	adds	r0, #16
 8023b1a:	f850 1c10 	ldr.w	r1, [r0, #-16]
 8023b1e:	3510      	adds	r5, #16
 8023b20:	fa2f f286 	sxtb16	r2, r6
 8023b24:	ea4f 2c36 	mov.w	ip, r6, ror #8
 8023b28:	3340      	adds	r3, #64	; 0x40
 8023b2a:	fa2f fc8c 	sxtb16	ip, ip
 8023b2e:	ea0c 0609 	and.w	r6, ip, r9
 8023b32:	ea4f 2731 	mov.w	r7, r1, ror #8
 8023b36:	fa2f f181 	sxtb16	r1, r1
 8023b3a:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 8023b3e:	fa1f fe81 	uxth.w	lr, r1
 8023b42:	fa2f f787 	sxtb16	r7, r7
 8023b46:	b292      	uxth	r2, r2
 8023b48:	ea07 0b09 	and.w	fp, r7, r9
 8023b4c:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 8023b50:	f843 6c34 	str.w	r6, [r3, #-52]
 8023b54:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 8023b58:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8023b5c:	f843 7c40 	str.w	r7, [r3, #-64]
 8023b60:	f843 1c38 	str.w	r1, [r3, #-56]
 8023b64:	f843 2c3c 	str.w	r2, [r3, #-60]
 8023b68:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 8023b6c:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 8023b70:	fa2f f286 	sxtb16	r2, r6
 8023b74:	ea4f 2c36 	mov.w	ip, r6, ror #8
 8023b78:	fa2f fc8c 	sxtb16	ip, ip
 8023b7c:	ea0c 0609 	and.w	r6, ip, r9
 8023b80:	ea4f 2731 	mov.w	r7, r1, ror #8
 8023b84:	fa2f f181 	sxtb16	r1, r1
 8023b88:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 8023b8c:	fa1f fe81 	uxth.w	lr, r1
 8023b90:	fa2f f787 	sxtb16	r7, r7
 8023b94:	b292      	uxth	r2, r2
 8023b96:	ea07 0b09 	and.w	fp, r7, r9
 8023b9a:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 8023b9e:	f843 6c24 	str.w	r6, [r3, #-36]
 8023ba2:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 8023ba6:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8023baa:	f843 7c30 	str.w	r7, [r3, #-48]
 8023bae:	f843 1c28 	str.w	r1, [r3, #-40]
 8023bb2:	f843 2c2c 	str.w	r2, [r3, #-44]
 8023bb6:	f855 6c08 	ldr.w	r6, [r5, #-8]
 8023bba:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8023bbe:	fa2f f286 	sxtb16	r2, r6
 8023bc2:	ea4f 2c36 	mov.w	ip, r6, ror #8
 8023bc6:	fa2f fc8c 	sxtb16	ip, ip
 8023bca:	ea0c 0609 	and.w	r6, ip, r9
 8023bce:	ea4f 2731 	mov.w	r7, r1, ror #8
 8023bd2:	fa2f f181 	sxtb16	r1, r1
 8023bd6:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 8023bda:	fa1f fe81 	uxth.w	lr, r1
 8023bde:	fa2f f787 	sxtb16	r7, r7
 8023be2:	b292      	uxth	r2, r2
 8023be4:	ea07 0b09 	and.w	fp, r7, r9
 8023be8:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 8023bec:	f843 6c14 	str.w	r6, [r3, #-20]
 8023bf0:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 8023bf4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8023bf8:	f843 7c20 	str.w	r7, [r3, #-32]
 8023bfc:	f843 1c18 	str.w	r1, [r3, #-24]
 8023c00:	f843 2c1c 	str.w	r2, [r3, #-28]
 8023c04:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8023c08:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8023c0c:	4284      	cmp	r4, r0
 8023c0e:	fa2f f286 	sxtb16	r2, r6
 8023c12:	ea4f 2c36 	mov.w	ip, r6, ror #8
 8023c16:	fa2f fc8c 	sxtb16	ip, ip
 8023c1a:	ea0c 0609 	and.w	r6, ip, r9
 8023c1e:	ea4f 2731 	mov.w	r7, r1, ror #8
 8023c22:	fa2f f181 	sxtb16	r1, r1
 8023c26:	fa2f f787 	sxtb16	r7, r7
 8023c2a:	fa1f fe81 	uxth.w	lr, r1
 8023c2e:	ea07 0b09 	and.w	fp, r7, r9
 8023c32:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 8023c36:	b292      	uxth	r2, r2
 8023c38:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 8023c3c:	f843 6c04 	str.w	r6, [r3, #-4]
 8023c40:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 8023c44:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8023c48:	f843 1c08 	str.w	r1, [r3, #-8]
 8023c4c:	f843 7c10 	str.w	r7, [r3, #-16]
 8023c50:	f843 2c0c 	str.w	r2, [r3, #-12]
 8023c54:	f47f af5f 	bne.w	8023b16 <st_int8_to16_dual+0x46>
 8023c58:	9b08      	ldr	r3, [sp, #32]
 8023c5a:	4498      	add	r8, r3
 8023c5c:	9b02      	ldr	r3, [sp, #8]
 8023c5e:	449a      	add	sl, r3
 8023c60:	469c      	mov	ip, r3
 8023c62:	9b06      	ldr	r3, [sp, #24]
 8023c64:	4563      	cmp	r3, ip
 8023c66:	db3f      	blt.n	8023ce8 <st_int8_to16_dual+0x218>
 8023c68:	eba3 030c 	sub.w	r3, r3, ip
 8023c6c:	4657      	mov	r7, sl
 8023c6e:	4645      	mov	r5, r8
 8023c70:	089b      	lsrs	r3, r3, #2
 8023c72:	9303      	str	r3, [sp, #12]
 8023c74:	3301      	adds	r3, #1
 8023c76:	9304      	str	r3, [sp, #16]
 8023c78:	009b      	lsls	r3, r3, #2
 8023c7a:	eb04 0e03 	add.w	lr, r4, r3
 8023c7e:	9305      	str	r3, [sp, #20]
 8023c80:	f854 2b04 	ldr.w	r2, [r4], #4
 8023c84:	3510      	adds	r5, #16
 8023c86:	f857 3b04 	ldr.w	r3, [r7], #4
 8023c8a:	ea4f 2032 	mov.w	r0, r2, ror #8
 8023c8e:	4574      	cmp	r4, lr
 8023c90:	fa2f f080 	sxtb16	r0, r0
 8023c94:	ea00 0609 	and.w	r6, r0, r9
 8023c98:	ea4f 2133 	mov.w	r1, r3, ror #8
 8023c9c:	fa2f f282 	sxtb16	r2, r2
 8023ca0:	fa2f f181 	sxtb16	r1, r1
 8023ca4:	fa1f fb82 	uxth.w	fp, r2
 8023ca8:	ea46 4212 	orr.w	r2, r6, r2, lsr #16
 8023cac:	ea01 0609 	and.w	r6, r1, r9
 8023cb0:	fa2f f383 	sxtb16	r3, r3
 8023cb4:	ea46 4613 	orr.w	r6, r6, r3, lsr #16
 8023cb8:	f845 2c08 	str.w	r2, [r5, #-8]
 8023cbc:	b29b      	uxth	r3, r3
 8023cbe:	ea4b 4000 	orr.w	r0, fp, r0, lsl #16
 8023cc2:	f845 6c04 	str.w	r6, [r5, #-4]
 8023cc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8023cca:	f845 0c10 	str.w	r0, [r5, #-16]
 8023cce:	f845 3c0c 	str.w	r3, [r5, #-12]
 8023cd2:	d1d5      	bne.n	8023c80 <st_int8_to16_dual+0x1b0>
 8023cd4:	9b04      	ldr	r3, [sp, #16]
 8023cd6:	f10c 0c04 	add.w	ip, ip, #4
 8023cda:	eb08 1803 	add.w	r8, r8, r3, lsl #4
 8023cde:	9b05      	ldr	r3, [sp, #20]
 8023ce0:	449a      	add	sl, r3
 8023ce2:	9b03      	ldr	r3, [sp, #12]
 8023ce4:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8023ce8:	9b00      	ldr	r3, [sp, #0]
 8023cea:	4563      	cmp	r3, ip
 8023cec:	dd14      	ble.n	8023d18 <st_int8_to16_dual+0x248>
 8023cee:	eba3 0c0c 	sub.w	ip, r3, ip
 8023cf2:	4652      	mov	r2, sl
 8023cf4:	f108 0304 	add.w	r3, r8, #4
 8023cf8:	eb04 000c 	add.w	r0, r4, ip
 8023cfc:	f914 1b01 	ldrsb.w	r1, [r4], #1
 8023d00:	3304      	adds	r3, #4
 8023d02:	f823 1c08 	strh.w	r1, [r3, #-8]
 8023d06:	4284      	cmp	r4, r0
 8023d08:	f912 1b01 	ldrsb.w	r1, [r2], #1
 8023d0c:	f823 1c06 	strh.w	r1, [r3, #-6]
 8023d10:	d1f4      	bne.n	8023cfc <st_int8_to16_dual+0x22c>
 8023d12:	44e2      	add	sl, ip
 8023d14:	eb08 088c 	add.w	r8, r8, ip, lsl #2
 8023d18:	9b01      	ldr	r3, [sp, #4]
 8023d1a:	9a00      	ldr	r2, [sp, #0]
 8023d1c:	3b01      	subs	r3, #1
 8023d1e:	18a0      	adds	r0, r4, r2
 8023d20:	4492      	add	sl, r2
 8023d22:	b29b      	uxth	r3, r3
 8023d24:	9301      	str	r3, [sp, #4]
 8023d26:	2b00      	cmp	r3, #0
 8023d28:	f47f aeed 	bne.w	8023b06 <st_int8_to16_dual+0x36>
 8023d2c:	46c2      	mov	sl, r8
 8023d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d30:	07db      	lsls	r3, r3, #31
 8023d32:	d52e      	bpl.n	8023d92 <st_int8_to16_dual+0x2c2>
 8023d34:	9b00      	ldr	r3, [sp, #0]
 8023d36:	3b04      	subs	r3, #4
 8023d38:	d432      	bmi.n	8023da0 <st_int8_to16_dual+0x2d0>
 8023d3a:	089b      	lsrs	r3, r3, #2
 8023d3c:	4605      	mov	r5, r0
 8023d3e:	4f1a      	ldr	r7, [pc, #104]	; (8023da8 <st_int8_to16_dual+0x2d8>)
 8023d40:	1c5e      	adds	r6, r3, #1
 8023d42:	eb0a 04c6 	add.w	r4, sl, r6, lsl #3
 8023d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8023d4a:	f10a 0a08 	add.w	sl, sl, #8
 8023d4e:	fa2f fc83 	sxtb16	ip, r3
 8023d52:	ea4f 2333 	mov.w	r3, r3, ror #8
 8023d56:	fa1f f18c 	uxth.w	r1, ip
 8023d5a:	fa2f f383 	sxtb16	r3, r3
 8023d5e:	ea03 0207 	and.w	r2, r3, r7
 8023d62:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8023d66:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8023d6a:	f84a 3c08 	str.w	r3, [sl, #-8]
 8023d6e:	f84a 2c04 	str.w	r2, [sl, #-4]
 8023d72:	4554      	cmp	r4, sl
 8023d74:	d1e7      	bne.n	8023d46 <st_int8_to16_dual+0x276>
 8023d76:	00b3      	lsls	r3, r6, #2
 8023d78:	4418      	add	r0, r3
 8023d7a:	9a00      	ldr	r2, [sp, #0]
 8023d7c:	429a      	cmp	r2, r3
 8023d7e:	dd08      	ble.n	8023d92 <st_int8_to16_dual+0x2c2>
 8023d80:	1ad3      	subs	r3, r2, r3
 8023d82:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8023d86:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8023d8a:	f824 2b02 	strh.w	r2, [r4], #2
 8023d8e:	429c      	cmp	r4, r3
 8023d90:	d1f9      	bne.n	8023d86 <st_int8_to16_dual+0x2b6>
 8023d92:	b00b      	add	sp, #44	; 0x2c
 8023d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d98:	4604      	mov	r4, r0
 8023d9a:	f04f 0c00 	mov.w	ip, #0
 8023d9e:	e760      	b.n	8023c62 <st_int8_to16_dual+0x192>
 8023da0:	4654      	mov	r4, sl
 8023da2:	2300      	movs	r3, #0
 8023da4:	e7e9      	b.n	8023d7a <st_int8_to16_dual+0x2aa>
 8023da6:	bf00      	nop
 8023da8:	ffff0000 	.word	0xffff0000

08023dac <st_sssa8_ch_fullW_prefetch>:
 8023dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023db0:	b087      	sub	sp, #28
 8023db2:	eb00 0c02 	add.w	ip, r0, r2
 8023db6:	9105      	str	r1, [sp, #20]
 8023db8:	1049      	asrs	r1, r1, #1
 8023dba:	9100      	str	r1, [sp, #0]
 8023dbc:	f000 80d7 	beq.w	8023f6e <st_sssa8_ch_fullW_prefetch+0x1c2>
 8023dc0:	f1a2 0110 	sub.w	r1, r2, #16
 8023dc4:	1ed4      	subs	r4, r2, #3
 8023dc6:	0909      	lsrs	r1, r1, #4
 8023dc8:	9402      	str	r4, [sp, #8]
 8023dca:	1f14      	subs	r4, r2, #4
 8023dcc:	3101      	adds	r1, #1
 8023dce:	9404      	str	r4, [sp, #16]
 8023dd0:	ea4f 1a01 	mov.w	sl, r1, lsl #4
 8023dd4:	0189      	lsls	r1, r1, #6
 8023dd6:	9103      	str	r1, [sp, #12]
 8023dd8:	2a0f      	cmp	r2, #15
 8023dda:	f340 80dd 	ble.w	8023f98 <st_sssa8_ch_fullW_prefetch+0x1ec>
 8023dde:	eb00 040a 	add.w	r4, r0, sl
 8023de2:	4665      	mov	r5, ip
 8023de4:	4619      	mov	r1, r3
 8023de6:	6807      	ldr	r7, [r0, #0]
 8023de8:	3010      	adds	r0, #16
 8023dea:	682e      	ldr	r6, [r5, #0]
 8023dec:	3140      	adds	r1, #64	; 0x40
 8023dee:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8023df2:	3510      	adds	r5, #16
 8023df4:	fa2f f787 	sxtb16	r7, r7
 8023df8:	fa2f fe8e 	sxtb16	lr, lr
 8023dfc:	f841 7c40 	str.w	r7, [r1, #-64]
 8023e00:	ea4f 2736 	mov.w	r7, r6, ror #8
 8023e04:	f841 ec3c 	str.w	lr, [r1, #-60]
 8023e08:	fa2f f787 	sxtb16	r7, r7
 8023e0c:	fa2f f686 	sxtb16	r6, r6
 8023e10:	f841 7c34 	str.w	r7, [r1, #-52]
 8023e14:	f841 6c38 	str.w	r6, [r1, #-56]
 8023e18:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 8023e1c:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 8023e20:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8023e24:	fa2f f787 	sxtb16	r7, r7
 8023e28:	fa2f fe8e 	sxtb16	lr, lr
 8023e2c:	f841 7c30 	str.w	r7, [r1, #-48]
 8023e30:	ea4f 2736 	mov.w	r7, r6, ror #8
 8023e34:	f841 ec2c 	str.w	lr, [r1, #-44]
 8023e38:	fa2f f787 	sxtb16	r7, r7
 8023e3c:	fa2f f686 	sxtb16	r6, r6
 8023e40:	f841 7c24 	str.w	r7, [r1, #-36]
 8023e44:	f841 6c28 	str.w	r6, [r1, #-40]
 8023e48:	f850 7c08 	ldr.w	r7, [r0, #-8]
 8023e4c:	f855 6c08 	ldr.w	r6, [r5, #-8]
 8023e50:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8023e54:	fa2f f787 	sxtb16	r7, r7
 8023e58:	fa2f fe8e 	sxtb16	lr, lr
 8023e5c:	f841 7c20 	str.w	r7, [r1, #-32]
 8023e60:	ea4f 2736 	mov.w	r7, r6, ror #8
 8023e64:	f841 ec1c 	str.w	lr, [r1, #-28]
 8023e68:	fa2f f787 	sxtb16	r7, r7
 8023e6c:	fa2f f686 	sxtb16	r6, r6
 8023e70:	f841 7c14 	str.w	r7, [r1, #-20]
 8023e74:	f841 6c18 	str.w	r6, [r1, #-24]
 8023e78:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8023e7c:	4284      	cmp	r4, r0
 8023e7e:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8023e82:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8023e86:	fa2f f787 	sxtb16	r7, r7
 8023e8a:	fa2f fe8e 	sxtb16	lr, lr
 8023e8e:	f841 7c10 	str.w	r7, [r1, #-16]
 8023e92:	ea4f 2736 	mov.w	r7, r6, ror #8
 8023e96:	f841 ec0c 	str.w	lr, [r1, #-12]
 8023e9a:	fa2f f787 	sxtb16	r7, r7
 8023e9e:	fa2f f686 	sxtb16	r6, r6
 8023ea2:	f841 7c04 	str.w	r7, [r1, #-4]
 8023ea6:	f841 6c08 	str.w	r6, [r1, #-8]
 8023eaa:	d19c      	bne.n	8023de6 <st_sssa8_ch_fullW_prefetch+0x3a>
 8023eac:	9903      	ldr	r1, [sp, #12]
 8023eae:	44d4      	add	ip, sl
 8023eb0:	46d6      	mov	lr, sl
 8023eb2:	440b      	add	r3, r1
 8023eb4:	9902      	ldr	r1, [sp, #8]
 8023eb6:	458e      	cmp	lr, r1
 8023eb8:	da30      	bge.n	8023f1c <st_sssa8_ch_fullW_prefetch+0x170>
 8023eba:	9904      	ldr	r1, [sp, #16]
 8023ebc:	4667      	mov	r7, ip
 8023ebe:	eba1 090e 	sub.w	r9, r1, lr
 8023ec2:	4619      	mov	r1, r3
 8023ec4:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8023ec8:	f109 0b01 	add.w	fp, r9, #1
 8023ecc:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8023ed0:	eb04 0800 	add.w	r8, r4, r0
 8023ed4:	9001      	str	r0, [sp, #4]
 8023ed6:	f854 5b04 	ldr.w	r5, [r4], #4
 8023eda:	3110      	adds	r1, #16
 8023edc:	f857 0b04 	ldr.w	r0, [r7], #4
 8023ee0:	4544      	cmp	r4, r8
 8023ee2:	ea4f 2635 	mov.w	r6, r5, ror #8
 8023ee6:	fa2f f585 	sxtb16	r5, r5
 8023eea:	fa2f f686 	sxtb16	r6, r6
 8023eee:	f841 5c10 	str.w	r5, [r1, #-16]
 8023ef2:	ea4f 2530 	mov.w	r5, r0, ror #8
 8023ef6:	f841 6c0c 	str.w	r6, [r1, #-12]
 8023efa:	fa2f f585 	sxtb16	r5, r5
 8023efe:	fa2f f080 	sxtb16	r0, r0
 8023f02:	f841 5c04 	str.w	r5, [r1, #-4]
 8023f06:	f841 0c08 	str.w	r0, [r1, #-8]
 8023f0a:	d1e4      	bne.n	8023ed6 <st_sssa8_ch_fullW_prefetch+0x12a>
 8023f0c:	f10e 0e04 	add.w	lr, lr, #4
 8023f10:	9901      	ldr	r1, [sp, #4]
 8023f12:	eb03 130b 	add.w	r3, r3, fp, lsl #4
 8023f16:	448c      	add	ip, r1
 8023f18:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 8023f1c:	4572      	cmp	r2, lr
 8023f1e:	dd1f      	ble.n	8023f60 <st_sssa8_ch_fullW_prefetch+0x1b4>
 8023f20:	f994 0000 	ldrsb.w	r0, [r4]
 8023f24:	f10e 0101 	add.w	r1, lr, #1
 8023f28:	8018      	strh	r0, [r3, #0]
 8023f2a:	428a      	cmp	r2, r1
 8023f2c:	f99c 0000 	ldrsb.w	r0, [ip]
 8023f30:	8058      	strh	r0, [r3, #2]
 8023f32:	dd2c      	ble.n	8023f8e <st_sssa8_ch_fullW_prefetch+0x1e2>
 8023f34:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8023f38:	f10e 0e02 	add.w	lr, lr, #2
 8023f3c:	8099      	strh	r1, [r3, #4]
 8023f3e:	4572      	cmp	r2, lr
 8023f40:	f99c 1001 	ldrsb.w	r1, [ip, #1]
 8023f44:	80d9      	strh	r1, [r3, #6]
 8023f46:	dd2b      	ble.n	8023fa0 <st_sssa8_ch_fullW_prefetch+0x1f4>
 8023f48:	f994 1002 	ldrsb.w	r1, [r4, #2]
 8023f4c:	f10c 0c03 	add.w	ip, ip, #3
 8023f50:	3403      	adds	r4, #3
 8023f52:	330c      	adds	r3, #12
 8023f54:	f823 1c04 	strh.w	r1, [r3, #-4]
 8023f58:	f91c 1c01 	ldrsb.w	r1, [ip, #-1]
 8023f5c:	f823 1c02 	strh.w	r1, [r3, #-2]
 8023f60:	9900      	ldr	r1, [sp, #0]
 8023f62:	18a0      	adds	r0, r4, r2
 8023f64:	4494      	add	ip, r2
 8023f66:	3901      	subs	r1, #1
 8023f68:	9100      	str	r1, [sp, #0]
 8023f6a:	f47f af35 	bne.w	8023dd8 <st_sssa8_ch_fullW_prefetch+0x2c>
 8023f6e:	9905      	ldr	r1, [sp, #20]
 8023f70:	07c9      	lsls	r1, r1, #31
 8023f72:	d509      	bpl.n	8023f88 <st_sssa8_ch_fullW_prefetch+0x1dc>
 8023f74:	2a00      	cmp	r2, #0
 8023f76:	dd07      	ble.n	8023f88 <st_sssa8_ch_fullW_prefetch+0x1dc>
 8023f78:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8023f7c:	f910 1b01 	ldrsb.w	r1, [r0], #1
 8023f80:	f823 1b02 	strh.w	r1, [r3], #2
 8023f84:	4293      	cmp	r3, r2
 8023f86:	d1f9      	bne.n	8023f7c <st_sssa8_ch_fullW_prefetch+0x1d0>
 8023f88:	b007      	add	sp, #28
 8023f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f8e:	3401      	adds	r4, #1
 8023f90:	f10c 0c01 	add.w	ip, ip, #1
 8023f94:	3304      	adds	r3, #4
 8023f96:	e7e3      	b.n	8023f60 <st_sssa8_ch_fullW_prefetch+0x1b4>
 8023f98:	4604      	mov	r4, r0
 8023f9a:	f04f 0e00 	mov.w	lr, #0
 8023f9e:	e789      	b.n	8023eb4 <st_sssa8_ch_fullW_prefetch+0x108>
 8023fa0:	3402      	adds	r4, #2
 8023fa2:	f10c 0c02 	add.w	ip, ip, #2
 8023fa6:	3308      	adds	r3, #8
 8023fa8:	e7da      	b.n	8023f60 <st_sssa8_ch_fullW_prefetch+0x1b4>
 8023faa:	bf00      	nop

08023fac <st_sssa8_ch_nn_mat_mult_nt_t>:
 8023fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fb0:	b0af      	sub	sp, #188	; 0xbc
 8023fb2:	901f      	str	r0, [sp, #124]	; 0x7c
 8023fb4:	9220      	str	r2, [sp, #128]	; 0x80
 8023fb6:	9840      	ldr	r0, [sp, #256]	; 0x100
 8023fb8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8023fba:	9125      	str	r1, [sp, #148]	; 0x94
 8023fbc:	2800      	cmp	r0, #0
 8023fbe:	bf18      	it	ne
 8023fc0:	4602      	movne	r2, r0
 8023fc2:	932a      	str	r3, [sp, #168]	; 0xa8
 8023fc4:	923f      	str	r2, [sp, #252]	; 0xfc
 8023fc6:	e9dd 2b3b 	ldrd	r2, fp, [sp, #236]	; 0xec
 8023fca:	2a01      	cmp	r2, #1
 8023fcc:	f340 822c 	ble.w	8024428 <st_sssa8_ch_nn_mat_mult_nt_t+0x47c>
 8023fd0:	f00b 0403 	and.w	r4, fp, #3
 8023fd4:	3a02      	subs	r2, #2
 8023fd6:	ea4f 00ab 	mov.w	r0, fp, asr #2
 8023fda:	461e      	mov	r6, r3
 8023fdc:	9428      	str	r4, [sp, #160]	; 0xa0
 8023fde:	f1ab 040f 	sub.w	r4, fp, #15
 8023fe2:	0852      	lsrs	r2, r2, #1
 8023fe4:	f1ab 0310 	sub.w	r3, fp, #16
 8023fe8:	9410      	str	r4, [sp, #64]	; 0x40
 8023fea:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8023fec:	091b      	lsrs	r3, r3, #4
 8023fee:	922c      	str	r2, [sp, #176]	; 0xb0
 8023ff0:	00d2      	lsls	r2, r2, #3
 8023ff2:	f004 0401 	and.w	r4, r4, #1
 8023ff6:	3301      	adds	r3, #1
 8023ff8:	320c      	adds	r2, #12
 8023ffa:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
 8023ffc:	9421      	str	r4, [sp, #132]	; 0x84
 8023ffe:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8024000:	106d      	asrs	r5, r5, #1
 8024002:	9223      	str	r2, [sp, #140]	; 0x8c
 8024004:	3402      	adds	r4, #2
 8024006:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8024008:	9027      	str	r0, [sp, #156]	; 0x9c
 802400a:	9417      	str	r4, [sp, #92]	; 0x5c
 802400c:	0084      	lsls	r4, r0, #2
 802400e:	0052      	lsls	r2, r2, #1
 8024010:	9522      	str	r5, [sp, #136]	; 0x88
 8024012:	942d      	str	r4, [sp, #180]	; 0xb4
 8024014:	445c      	add	r4, fp
 8024016:	9212      	str	r2, [sp, #72]	; 0x48
 8024018:	942b      	str	r4, [sp, #172]	; 0xac
 802401a:	011c      	lsls	r4, r3, #4
 802401c:	019b      	lsls	r3, r3, #6
 802401e:	9616      	str	r6, [sp, #88]	; 0x58
 8024020:	9403      	str	r4, [sp, #12]
 8024022:	931e      	str	r3, [sp, #120]	; 0x78
 8024024:	fb02 f305 	mul.w	r3, r2, r5
 8024028:	911a      	str	r1, [sp, #104]	; 0x68
 802402a:	9324      	str	r3, [sp, #144]	; 0x90
 802402c:	0103      	lsls	r3, r0, #4
 802402e:	9329      	str	r3, [sp, #164]	; 0xa4
 8024030:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8024034:	931d      	str	r3, [sp, #116]	; 0x74
 8024036:	2304      	movs	r3, #4
 8024038:	9315      	str	r3, [sp, #84]	; 0x54
 802403a:	ea4f 038b 	mov.w	r3, fp, lsl #2
 802403e:	9326      	str	r3, [sp, #152]	; 0x98
 8024040:	f1ab 0303 	sub.w	r3, fp, #3
 8024044:	9311      	str	r3, [sp, #68]	; 0x44
 8024046:	f1ab 0304 	sub.w	r3, fp, #4
 802404a:	9314      	str	r3, [sp, #80]	; 0x50
 802404c:	f10b 0301 	add.w	r3, fp, #1
 8024050:	9309      	str	r3, [sp, #36]	; 0x24
 8024052:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024054:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8024056:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8024058:	441a      	add	r2, r3
 802405a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802405c:	4419      	add	r1, r3
 802405e:	921c      	str	r2, [sp, #112]	; 0x70
 8024060:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8024064:	911b      	str	r1, [sp, #108]	; 0x6c
 8024066:	920c      	str	r2, [sp, #48]	; 0x30
 8024068:	f851 2c04 	ldr.w	r2, [r1, #-4]
 802406c:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 8024070:	920e      	str	r2, [sp, #56]	; 0x38
 8024072:	f9b0 2000 	ldrsh.w	r2, [r0]
 8024076:	940a      	str	r4, [sp, #40]	; 0x28
 8024078:	920b      	str	r2, [sp, #44]	; 0x2c
 802407a:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 802407c:	4611      	mov	r1, r2
 802407e:	58ca      	ldr	r2, [r1, r3]
 8024080:	920d      	str	r2, [sp, #52]	; 0x34
 8024082:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8024084:	58d3      	ldr	r3, [r2, r3]
 8024086:	930f      	str	r3, [sp, #60]	; 0x3c
 8024088:	9b40      	ldr	r3, [sp, #256]	; 0x100
 802408a:	2b00      	cmp	r3, #0
 802408c:	f000 83a4 	beq.w	80247d8 <st_sssa8_ch_nn_mat_mult_nt_t+0x82c>
 8024090:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8024092:	2b00      	cmp	r3, #0
 8024094:	f040 834e 	bne.w	8024734 <st_sssa8_ch_nn_mat_mult_nt_t+0x788>
 8024098:	4619      	mov	r1, r3
 802409a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802409c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802409e:	1910      	adds	r0, r2, r4
 80240a0:	5912      	ldr	r2, [r2, r4]
 80240a2:	f850 0c04 	ldr.w	r0, [r0, #-4]
 80240a6:	4413      	add	r3, r2
 80240a8:	9308      	str	r3, [sp, #32]
 80240aa:	180b      	adds	r3, r1, r0
 80240ac:	9307      	str	r3, [sp, #28]
 80240ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80240b0:	2b00      	cmp	r3, #0
 80240b2:	f000 83d9 	beq.w	8024868 <st_sssa8_ch_nn_mat_mult_nt_t+0x8bc>
 80240b6:	9302      	str	r3, [sp, #8]
 80240b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80240ba:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80240bc:	9301      	str	r3, [sp, #4]
 80240be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80240c0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80240c2:	f1c3 0301 	rsb	r3, r3, #1
 80240c6:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 80240ca:	440a      	add	r2, r1
 80240cc:	f8dd b0f0 	ldr.w	fp, [sp, #240]	; 0xf0
 80240d0:	9318      	str	r3, [sp, #96]	; 0x60
 80240d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240d4:	9213      	str	r2, [sp, #76]	; 0x4c
 80240d6:	f1c3 0301 	rsb	r3, r3, #1
 80240da:	9319      	str	r3, [sp, #100]	; 0x64
 80240dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80240de:	2b00      	cmp	r3, #0
 80240e0:	f340 8229 	ble.w	8024536 <st_sssa8_ch_nn_mat_mult_nt_t+0x58a>
 80240e4:	9b03      	ldr	r3, [sp, #12]
 80240e6:	eb0a 090b 	add.w	r9, sl, fp
 80240ea:	9808      	ldr	r0, [sp, #32]
 80240ec:	4453      	add	r3, sl
 80240ee:	9e07      	ldr	r6, [sp, #28]
 80240f0:	f8dd 80fc 	ldr.w	r8, [sp, #252]	; 0xfc
 80240f4:	9300      	str	r3, [sp, #0]
 80240f6:	4634      	mov	r4, r6
 80240f8:	4603      	mov	r3, r0
 80240fa:	f8da 5000 	ldr.w	r5, [sl]
 80240fe:	f8d8 2000 	ldr.w	r2, [r8]
 8024102:	fa2f f185 	sxtb16	r1, r5
 8024106:	f8d8 c004 	ldr.w	ip, [r8, #4]
 802410a:	fa2f f595 	sxtb16	r5, r5, ror #8
 802410e:	f8d8 e008 	ldr.w	lr, [r8, #8]
 8024112:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8024116:	fb21 6602 	smlad	r6, r1, r2, r6
 802411a:	fb25 660c 	smlad	r6, r5, ip, r6
 802411e:	fb21 000e 	smlad	r0, r1, lr, r0
 8024122:	fb25 0007 	smlad	r0, r5, r7, r0
 8024126:	f85a 100b 	ldr.w	r1, [sl, fp]
 802412a:	fa2f f581 	sxtb16	r5, r1
 802412e:	fa2f f191 	sxtb16	r1, r1, ror #8
 8024132:	fb25 4202 	smlad	r2, r5, r2, r4
 8024136:	fb25 330e 	smlad	r3, r5, lr, r3
 802413a:	fb21 220c 	smlad	r2, r1, ip, r2
 802413e:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8024142:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8024146:	fb21 3707 	smlad	r7, r1, r7, r3
 802414a:	f8da 3004 	ldr.w	r3, [sl, #4]
 802414e:	f8d8 e018 	ldr.w	lr, [r8, #24]
 8024152:	fa2f f583 	sxtb16	r5, r3
 8024156:	f8d8 101c 	ldr.w	r1, [r8, #28]
 802415a:	fa2f f393 	sxtb16	r3, r3, ror #8
 802415e:	fb25 660c 	smlad	r6, r5, ip, r6
 8024162:	fb23 6604 	smlad	r6, r3, r4, r6
 8024166:	fb25 050e 	smlad	r5, r5, lr, r0
 802416a:	fb23 5501 	smlad	r5, r3, r1, r5
 802416e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8024172:	fa2f f380 	sxtb16	r3, r0
 8024176:	fa2f f090 	sxtb16	r0, r0, ror #8
 802417a:	fb23 2c0c 	smlad	ip, r3, ip, r2
 802417e:	fb23 770e 	smlad	r7, r3, lr, r7
 8024182:	fb20 cc04 	smlad	ip, r0, r4, ip
 8024186:	f8d8 4020 	ldr.w	r4, [r8, #32]
 802418a:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 802418e:	fb20 7101 	smlad	r1, r0, r1, r7
 8024192:	f8da 2008 	ldr.w	r2, [sl, #8]
 8024196:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 802419a:	fa2f f382 	sxtb16	r3, r2
 802419e:	f8d8 702c 	ldr.w	r7, [r8, #44]	; 0x2c
 80241a2:	fa2f f292 	sxtb16	r2, r2, ror #8
 80241a6:	fb23 6604 	smlad	r6, r3, r4, r6
 80241aa:	fb22 660e 	smlad	r6, r2, lr, r6
 80241ae:	fb23 5300 	smlad	r3, r3, r0, r5
 80241b2:	fb22 3207 	smlad	r2, r2, r7, r3
 80241b6:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80241ba:	fa2f f985 	sxtb16	r9, r5
 80241be:	fa2f f595 	sxtb16	r5, r5, ror #8
 80241c2:	fb29 c404 	smlad	r4, r9, r4, ip
 80241c6:	fb29 1100 	smlad	r1, r9, r0, r1
 80241ca:	fb25 4e0e 	smlad	lr, r5, lr, r4
 80241ce:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 80241d2:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 80241d6:	fb25 1707 	smlad	r7, r5, r7, r1
 80241da:	f8da 000c 	ldr.w	r0, [sl, #12]
 80241de:	f108 0840 	add.w	r8, r8, #64	; 0x40
 80241e2:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80241e6:	f10a 0a10 	add.w	sl, sl, #16
 80241ea:	f858 5c04 	ldr.w	r5, [r8, #-4]
 80241ee:	fa2f f380 	sxtb16	r3, r0
 80241f2:	fa2f f090 	sxtb16	r0, r0, ror #8
 80241f6:	fb23 660c 	smlad	r6, r3, ip, r6
 80241fa:	fb20 6604 	smlad	r6, r0, r4, r6
 80241fe:	fb23 2201 	smlad	r2, r3, r1, r2
 8024202:	fb20 2005 	smlad	r0, r0, r5, r2
 8024206:	eb0a 090b 	add.w	r9, sl, fp
 802420a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 802420e:	fa2f f283 	sxtb16	r2, r3
 8024212:	fa2f f393 	sxtb16	r3, r3, ror #8
 8024216:	fb22 ee0c 	smlad	lr, r2, ip, lr
 802421a:	fb22 7701 	smlad	r7, r2, r1, r7
 802421e:	fb23 e404 	smlad	r4, r3, r4, lr
 8024222:	fb23 7305 	smlad	r3, r3, r5, r7
 8024226:	9a00      	ldr	r2, [sp, #0]
 8024228:	4592      	cmp	sl, r2
 802422a:	f47f af66 	bne.w	80240fa <st_sssa8_ch_nn_mat_mult_nt_t+0x14e>
 802422e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8024230:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8024234:	9200      	str	r2, [sp, #0]
 8024236:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024238:	4591      	cmp	r9, r2
 802423a:	da44      	bge.n	80242c6 <st_sssa8_ch_nn_mat_mult_nt_t+0x31a>
 802423c:	9914      	ldr	r1, [sp, #80]	; 0x50
 802423e:	f8cd 9018 	str.w	r9, [sp, #24]
 8024242:	eba1 0209 	sub.w	r2, r1, r9
 8024246:	f8cd b0f0 	str.w	fp, [sp, #240]	; 0xf0
 802424a:	9f00      	ldr	r7, [sp, #0]
 802424c:	468b      	mov	fp, r1
 802424e:	0892      	lsrs	r2, r2, #2
 8024250:	9205      	str	r2, [sp, #20]
 8024252:	3201      	adds	r2, #1
 8024254:	9204      	str	r2, [sp, #16]
 8024256:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 802425a:	4691      	mov	r9, r2
 802425c:	f85a 2b04 	ldr.w	r2, [sl], #4
 8024260:	3710      	adds	r7, #16
 8024262:	f857 5c10 	ldr.w	r5, [r7, #-16]
 8024266:	f857 ec0c 	ldr.w	lr, [r7, #-12]
 802426a:	f857 8c08 	ldr.w	r8, [r7, #-8]
 802426e:	fa2f f182 	sxtb16	r1, r2
 8024272:	f857 cc04 	ldr.w	ip, [r7, #-4]
 8024276:	fa2f f292 	sxtb16	r2, r2, ror #8
 802427a:	fb21 6605 	smlad	r6, r1, r5, r6
 802427e:	fb22 660e 	smlad	r6, r2, lr, r6
 8024282:	fb21 0008 	smlad	r0, r1, r8, r0
 8024286:	fb22 000c 	smlad	r0, r2, ip, r0
 802428a:	f85a 200b 	ldr.w	r2, [sl, fp]
 802428e:	fa2f f182 	sxtb16	r1, r2
 8024292:	fa2f f292 	sxtb16	r2, r2, ror #8
 8024296:	fb21 4405 	smlad	r4, r1, r5, r4
 802429a:	fb21 3308 	smlad	r3, r1, r8, r3
 802429e:	fb22 440e 	smlad	r4, r2, lr, r4
 80242a2:	fb22 330c 	smlad	r3, r2, ip, r3
 80242a6:	45ca      	cmp	sl, r9
 80242a8:	d1d8      	bne.n	802425c <st_sssa8_ch_nn_mat_mult_nt_t+0x2b0>
 80242aa:	9a00      	ldr	r2, [sp, #0]
 80242ac:	9904      	ldr	r1, [sp, #16]
 80242ae:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80242b2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80242b6:	f8dd b0f0 	ldr.w	fp, [sp, #240]	; 0xf0
 80242ba:	f109 0904 	add.w	r9, r9, #4
 80242be:	9200      	str	r2, [sp, #0]
 80242c0:	9a05      	ldr	r2, [sp, #20]
 80242c2:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 80242c6:	45cb      	cmp	fp, r9
 80242c8:	eb0a 020b 	add.w	r2, sl, fp
 80242cc:	f340 812f 	ble.w	802452e <st_sssa8_ch_nn_mat_mult_nt_t+0x582>
 80242d0:	9900      	ldr	r1, [sp, #0]
 80242d2:	f109 0201 	add.w	r2, r9, #1
 80242d6:	f99a c000 	ldrsb.w	ip, [sl]
 80242da:	f9b1 7000 	ldrsh.w	r7, [r1]
 80242de:	4593      	cmp	fp, r2
 80242e0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80242e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80242e6:	fb17 660c 	smlabb	r6, r7, ip, r6
 80242ea:	fb15 000c 	smlabb	r0, r5, ip, r0
 80242ee:	eb0a 0e01 	add.w	lr, sl, r1
 80242f2:	f91a 100b 	ldrsb.w	r1, [sl, fp]
 80242f6:	fb17 4401 	smlabb	r4, r7, r1, r4
 80242fa:	fb15 3301 	smlabb	r3, r5, r1, r3
 80242fe:	f340 8118 	ble.w	8024532 <st_sssa8_ch_nn_mat_mult_nt_t+0x586>
 8024302:	9a00      	ldr	r2, [sp, #0]
 8024304:	f109 0902 	add.w	r9, r9, #2
 8024308:	f99a 7001 	ldrsb.w	r7, [sl, #1]
 802430c:	f10a 0c02 	add.w	ip, sl, #2
 8024310:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8024314:	45cb      	cmp	fp, r9
 8024316:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 802431a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802431c:	fb15 6607 	smlabb	r6, r5, r7, r6
 8024320:	fb11 0007 	smlabb	r0, r1, r7, r0
 8024324:	4696      	mov	lr, r2
 8024326:	f91a 2002 	ldrsb.w	r2, [sl, r2]
 802432a:	fb15 4402 	smlabb	r4, r5, r2, r4
 802432e:	eb0c 050b 	add.w	r5, ip, fp
 8024332:	fb11 3302 	smlabb	r3, r1, r2, r3
 8024336:	f340 8107 	ble.w	8024548 <st_sssa8_ch_nn_mat_mult_nt_t+0x59c>
 802433a:	9a00      	ldr	r2, [sp, #0]
 802433c:	f10a 0703 	add.w	r7, sl, #3
 8024340:	f91c 500b 	ldrsb.w	r5, [ip, fp]
 8024344:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8024348:	f9b2 c00a 	ldrsh.w	ip, [r2, #10]
 802434c:	f99a 2002 	ldrsb.w	r2, [sl, #2]
 8024350:	fb11 4405 	smlabb	r4, r1, r5, r4
 8024354:	fb1c 3305 	smlabb	r3, ip, r5, r3
 8024358:	eb07 0a0b 	add.w	sl, r7, fp
 802435c:	fb11 6602 	smlabb	r6, r1, r2, r6
 8024360:	fb1c 0002 	smlabb	r0, ip, r2, r0
 8024364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024366:	2a00      	cmp	r2, #0
 8024368:	f340 80c7 	ble.w	80244fa <st_sssa8_ch_nn_mat_mult_nt_t+0x54e>
 802436c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802436e:	0076      	lsls	r6, r6, #1
 8024370:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8024372:	0064      	lsls	r4, r4, #1
 8024374:	fb56 7601 	smmla	r6, r6, r1, r7
 8024378:	fb54 7401 	smmla	r4, r4, r1, r7
 802437c:	4116      	asrs	r6, r2
 802437e:	f306 0607 	ssat	r6, #8, r6
 8024382:	9901      	ldr	r1, [sp, #4]
 8024384:	4114      	asrs	r4, r2
 8024386:	700e      	strb	r6, [r1, #0]
 8024388:	f304 0407 	ssat	r4, #8, r4
 802438c:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 802438e:	548c      	strb	r4, [r1, r2]
 8024390:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024392:	2a00      	cmp	r2, #0
 8024394:	f340 8096 	ble.w	80244c4 <st_sssa8_ch_nn_mat_mult_nt_t+0x518>
 8024398:	990d      	ldr	r1, [sp, #52]	; 0x34
 802439a:	0040      	lsls	r0, r0, #1
 802439c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802439e:	005b      	lsls	r3, r3, #1
 80243a0:	fb50 5001 	smmla	r0, r0, r1, r5
 80243a4:	fb53 5301 	smmla	r3, r3, r1, r5
 80243a8:	4110      	asrs	r0, r2
 80243aa:	f300 0007 	ssat	r0, #8, r0
 80243ae:	9901      	ldr	r1, [sp, #4]
 80243b0:	4113      	asrs	r3, r2
 80243b2:	7048      	strb	r0, [r1, #1]
 80243b4:	f303 0307 	ssat	r3, #8, r3
 80243b8:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 80243ba:	188a      	adds	r2, r1, r2
 80243bc:	7053      	strb	r3, [r2, #1]
 80243be:	460b      	mov	r3, r1
 80243c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80243c2:	4413      	add	r3, r2
 80243c4:	9301      	str	r3, [sp, #4]
 80243c6:	9b02      	ldr	r3, [sp, #8]
 80243c8:	3b01      	subs	r3, #1
 80243ca:	9302      	str	r3, [sp, #8]
 80243cc:	f47f ae86 	bne.w	80240dc <st_sssa8_ch_nn_mat_mult_nt_t+0x130>
 80243d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80243d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80243d4:	eb03 0b02 	add.w	fp, r3, r2
 80243d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80243da:	2b00      	cmp	r3, #0
 80243dc:	f040 80b6 	bne.w	802454c <st_sssa8_ch_nn_mat_mult_nt_t+0x5a0>
 80243e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80243e2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80243e4:	4413      	add	r3, r2
 80243e6:	931a      	str	r3, [sp, #104]	; 0x68
 80243e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80243ea:	3302      	adds	r3, #2
 80243ec:	9316      	str	r3, [sp, #88]	; 0x58
 80243ee:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80243f0:	b11b      	cbz	r3, 80243fa <st_sssa8_ch_nn_mat_mult_nt_t+0x44e>
 80243f2:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80243f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80243f6:	4413      	add	r3, r2
 80243f8:	933f      	str	r3, [sp, #252]	; 0xfc
 80243fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80243fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80243fe:	3204      	adds	r2, #4
 8024400:	3308      	adds	r3, #8
 8024402:	9217      	str	r2, [sp, #92]	; 0x5c
 8024404:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024406:	9315      	str	r3, [sp, #84]	; 0x54
 8024408:	429a      	cmp	r2, r3
 802440a:	f47f ae23 	bne.w	8024054 <st_sssa8_ch_nn_mat_mult_nt_t+0xa8>
 802440e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8024410:	9925      	ldr	r1, [sp, #148]	; 0x94
 8024412:	3201      	adds	r2, #1
 8024414:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024416:	f8dd b0f0 	ldr.w	fp, [sp, #240]	; 0xf0
 802441a:	fb02 1303 	mla	r3, r2, r3, r1
 802441e:	9325      	str	r3, [sp, #148]	; 0x94
 8024420:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024422:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8024426:	932a      	str	r3, [sp, #168]	; 0xa8
 8024428:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 802442a:	07db      	lsls	r3, r3, #31
 802442c:	d546      	bpl.n	80244bc <st_sssa8_ch_nn_mat_mult_nt_t+0x510>
 802442e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8024430:	2b00      	cmp	r3, #0
 8024432:	dd43      	ble.n	80244bc <st_sssa8_ch_nn_mat_mult_nt_t+0x510>
 8024434:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8024436:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 802443a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 802443e:	2500      	movs	r5, #0
 8024440:	449e      	add	lr, r3
 8024442:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8024444:	441e      	add	r6, r3
 8024446:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8024448:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 802444c:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 8024450:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8024454:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024456:	f8dd 90f4 	ldr.w	r9, [sp, #244]	; 0xf4
 802445a:	4473      	add	r3, lr
 802445c:	461f      	mov	r7, r3
 802445e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024460:	eb03 0c0e 	add.w	ip, r3, lr
 8024464:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8024466:	449e      	add	lr, r3
 8024468:	f1bb 0f00 	cmp.w	fp, #0
 802446c:	683a      	ldr	r2, [r7, #0]
 802446e:	dd0d      	ble.n	802448c <st_sssa8_ch_nn_mat_mult_nt_t+0x4e0>
 8024470:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024472:	eb01 080b 	add.w	r8, r1, fp
 8024476:	1e58      	subs	r0, r3, #1
 8024478:	f911 3b01 	ldrsb.w	r3, [r1], #1
 802447c:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 8024480:	eba3 0309 	sub.w	r3, r3, r9
 8024484:	4541      	cmp	r1, r8
 8024486:	fb04 2203 	mla	r2, r4, r3, r2
 802448a:	d1f5      	bne.n	8024478 <st_sssa8_ch_nn_mat_mult_nt_t+0x4cc>
 802448c:	f9b6 3000 	ldrsh.w	r3, [r6]
 8024490:	f8dc 4000 	ldr.w	r4, [ip]
 8024494:	2b00      	cmp	r3, #0
 8024496:	f8de 0000 	ldr.w	r0, [lr]
 802449a:	f340 820c 	ble.w	80248b6 <st_sssa8_ch_nn_mat_mult_nt_t+0x90a>
 802449e:	0052      	lsls	r2, r2, #1
 80244a0:	fb52 0204 	smmla	r2, r2, r4, r0
 80244a4:	fa42 f303 	asr.w	r3, r2, r3
 80244a8:	f303 0307 	ssat	r3, #8, r3
 80244ac:	f88a 3000 	strb.w	r3, [sl]
 80244b0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80244b2:	3501      	adds	r5, #1
 80244b4:	449a      	add	sl, r3
 80244b6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80244b8:	42ab      	cmp	r3, r5
 80244ba:	d1d5      	bne.n	8024468 <st_sssa8_ch_nn_mat_mult_nt_t+0x4bc>
 80244bc:	2000      	movs	r0, #0
 80244be:	b02f      	add	sp, #188	; 0xbc
 80244c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244c4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80244c6:	fa00 f201 	lsl.w	r2, r0, r1
 80244ca:	f302 021f 	ssat	r2, #32, r2
 80244ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80244d0:	fb52 f210 	smmulr	r2, r2, r0
 80244d4:	408b      	lsls	r3, r1
 80244d6:	f303 031f 	ssat	r3, #32, r3
 80244da:	fb53 f310 	smmulr	r3, r3, r0
 80244de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80244e0:	440a      	add	r2, r1
 80244e2:	f302 0207 	ssat	r2, #8, r2
 80244e6:	9801      	ldr	r0, [sp, #4]
 80244e8:	440b      	add	r3, r1
 80244ea:	7042      	strb	r2, [r0, #1]
 80244ec:	f303 0307 	ssat	r3, #8, r3
 80244f0:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 80244f2:	1882      	adds	r2, r0, r2
 80244f4:	7053      	strb	r3, [r2, #1]
 80244f6:	4603      	mov	r3, r0
 80244f8:	e762      	b.n	80243c0 <st_sssa8_ch_nn_mat_mult_nt_t+0x414>
 80244fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80244fc:	fa06 f201 	lsl.w	r2, r6, r1
 8024500:	f302 021f 	ssat	r2, #32, r2
 8024504:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024506:	fb52 f215 	smmulr	r2, r2, r5
 802450a:	fa04 f101 	lsl.w	r1, r4, r1
 802450e:	f301 011f 	ssat	r1, #32, r1
 8024512:	fb51 f115 	smmulr	r1, r1, r5
 8024516:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024518:	4422      	add	r2, r4
 802451a:	f302 0207 	ssat	r2, #8, r2
 802451e:	9d01      	ldr	r5, [sp, #4]
 8024520:	4421      	add	r1, r4
 8024522:	702a      	strb	r2, [r5, #0]
 8024524:	f301 0107 	ssat	r1, #8, r1
 8024528:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 802452a:	54a9      	strb	r1, [r5, r2]
 802452c:	e730      	b.n	8024390 <st_sssa8_ch_nn_mat_mult_nt_t+0x3e4>
 802452e:	4692      	mov	sl, r2
 8024530:	e718      	b.n	8024364 <st_sssa8_ch_nn_mat_mult_nt_t+0x3b8>
 8024532:	46f2      	mov	sl, lr
 8024534:	e716      	b.n	8024364 <st_sssa8_ch_nn_mat_mult_nt_t+0x3b8>
 8024536:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8024538:	f04f 0900 	mov.w	r9, #0
 802453c:	9808      	ldr	r0, [sp, #32]
 802453e:	9e07      	ldr	r6, [sp, #28]
 8024540:	9300      	str	r3, [sp, #0]
 8024542:	4603      	mov	r3, r0
 8024544:	4634      	mov	r4, r6
 8024546:	e676      	b.n	8024236 <st_sssa8_ch_nn_mat_mult_nt_t+0x28a>
 8024548:	46aa      	mov	sl, r5
 802454a:	e70b      	b.n	8024364 <st_sssa8_ch_nn_mat_mult_nt_t+0x3b8>
 802454c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802454e:	2b00      	cmp	r3, #0
 8024550:	f340 81c3 	ble.w	80248da <st_sssa8_ch_nn_mat_mult_nt_t+0x92e>
 8024554:	9b03      	ldr	r3, [sp, #12]
 8024556:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8024558:	eb0a 0703 	add.w	r7, sl, r3
 802455c:	e9dd 4307 	ldrd	r4, r3, [sp, #28]
 8024560:	f8da 2000 	ldr.w	r2, [sl]
 8024564:	6828      	ldr	r0, [r5, #0]
 8024566:	fa2f f182 	sxtb16	r1, r2
 802456a:	fa2f f292 	sxtb16	r2, r2, ror #8
 802456e:	fb21 4000 	smlad	r0, r1, r0, r4
 8024572:	686c      	ldr	r4, [r5, #4]
 8024574:	fb22 0404 	smlad	r4, r2, r4, r0
 8024578:	68a8      	ldr	r0, [r5, #8]
 802457a:	fb21 3300 	smlad	r3, r1, r0, r3
 802457e:	68e9      	ldr	r1, [r5, #12]
 8024580:	fb22 3201 	smlad	r2, r2, r1, r3
 8024584:	f8da 3004 	ldr.w	r3, [sl, #4]
 8024588:	6928      	ldr	r0, [r5, #16]
 802458a:	fa2f f183 	sxtb16	r1, r3
 802458e:	fa2f f393 	sxtb16	r3, r3, ror #8
 8024592:	fb21 4000 	smlad	r0, r1, r0, r4
 8024596:	696c      	ldr	r4, [r5, #20]
 8024598:	fb23 0404 	smlad	r4, r3, r4, r0
 802459c:	69a8      	ldr	r0, [r5, #24]
 802459e:	fb21 2100 	smlad	r1, r1, r0, r2
 80245a2:	69ea      	ldr	r2, [r5, #28]
 80245a4:	fb23 1302 	smlad	r3, r3, r2, r1
 80245a8:	f8da 2008 	ldr.w	r2, [sl, #8]
 80245ac:	6a28      	ldr	r0, [r5, #32]
 80245ae:	fa2f f182 	sxtb16	r1, r2
 80245b2:	fa2f f292 	sxtb16	r2, r2, ror #8
 80245b6:	fb21 4000 	smlad	r0, r1, r0, r4
 80245ba:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80245bc:	fb22 0606 	smlad	r6, r2, r6, r0
 80245c0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80245c2:	fb21 3100 	smlad	r1, r1, r0, r3
 80245c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80245c8:	fb22 1203 	smlad	r2, r2, r3, r1
 80245cc:	f8da 400c 	ldr.w	r4, [sl, #12]
 80245d0:	3540      	adds	r5, #64	; 0x40
 80245d2:	f855 0c10 	ldr.w	r0, [r5, #-16]
 80245d6:	f10a 0a10 	add.w	sl, sl, #16
 80245da:	f855 8c0c 	ldr.w	r8, [r5, #-12]
 80245de:	f855 ec08 	ldr.w	lr, [r5, #-8]
 80245e2:	f855 cc04 	ldr.w	ip, [r5, #-4]
 80245e6:	fa2f f184 	sxtb16	r1, r4
 80245ea:	fa2f f394 	sxtb16	r3, r4, ror #8
 80245ee:	fb21 6000 	smlad	r0, r1, r0, r6
 80245f2:	fb23 0408 	smlad	r4, r3, r8, r0
 80245f6:	fb21 220e 	smlad	r2, r1, lr, r2
 80245fa:	fb23 230c 	smlad	r3, r3, ip, r2
 80245fe:	45ba      	cmp	sl, r7
 8024600:	d1ae      	bne.n	8024560 <st_sssa8_ch_nn_mat_mult_nt_t+0x5b4>
 8024602:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8024604:	9f03      	ldr	r7, [sp, #12]
 8024606:	e9cd 4307 	strd	r4, r3, [sp, #28]
 802460a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 802460c:	eb03 0e02 	add.w	lr, r3, r2
 8024610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024612:	42bb      	cmp	r3, r7
 8024614:	dd31      	ble.n	802467a <st_sssa8_ch_nn_mat_mult_nt_t+0x6ce>
 8024616:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024618:	4671      	mov	r1, lr
 802461a:	f8cd e000 	str.w	lr, [sp]
 802461e:	eba3 0907 	sub.w	r9, r3, r7
 8024622:	9701      	str	r7, [sp, #4]
 8024624:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8024628:	f109 0801 	add.w	r8, r9, #1
 802462c:	e9dd 4507 	ldrd	r4, r5, [sp, #28]
 8024630:	eb0a 0c88 	add.w	ip, sl, r8, lsl #2
 8024634:	f85a 3b04 	ldr.w	r3, [sl], #4
 8024638:	3110      	adds	r1, #16
 802463a:	f851 0c10 	ldr.w	r0, [r1, #-16]
 802463e:	f851 ec0c 	ldr.w	lr, [r1, #-12]
 8024642:	f851 7c08 	ldr.w	r7, [r1, #-8]
 8024646:	f851 6c04 	ldr.w	r6, [r1, #-4]
 802464a:	fa2f f283 	sxtb16	r2, r3
 802464e:	fa2f f393 	sxtb16	r3, r3, ror #8
 8024652:	fb22 4400 	smlad	r4, r2, r0, r4
 8024656:	fb23 440e 	smlad	r4, r3, lr, r4
 802465a:	fb22 5507 	smlad	r5, r2, r7, r5
 802465e:	fb23 5506 	smlad	r5, r3, r6, r5
 8024662:	45e2      	cmp	sl, ip
 8024664:	d1e6      	bne.n	8024634 <st_sssa8_ch_nn_mat_mult_nt_t+0x688>
 8024666:	9f01      	ldr	r7, [sp, #4]
 8024668:	f8dd e000 	ldr.w	lr, [sp]
 802466c:	3704      	adds	r7, #4
 802466e:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8024672:	eb07 0789 	add.w	r7, r7, r9, lsl #2
 8024676:	e9cd 4507 	strd	r4, r5, [sp, #28]
 802467a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 802467c:	42bb      	cmp	r3, r7
 802467e:	dd2d      	ble.n	80246dc <st_sssa8_ch_nn_mat_mult_nt_t+0x730>
 8024680:	f99a 2000 	ldrsb.w	r2, [sl]
 8024684:	1c7b      	adds	r3, r7, #1
 8024686:	9c07      	ldr	r4, [sp, #28]
 8024688:	f8be 0000 	ldrh.w	r0, [lr]
 802468c:	f8be 1002 	ldrh.w	r1, [lr, #2]
 8024690:	fb10 4002 	smlabb	r0, r0, r2, r4
 8024694:	9c08      	ldr	r4, [sp, #32]
 8024696:	fb11 4402 	smlabb	r4, r1, r2, r4
 802469a:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 802469c:	9007      	str	r0, [sp, #28]
 802469e:	429a      	cmp	r2, r3
 80246a0:	9408      	str	r4, [sp, #32]
 80246a2:	dd1b      	ble.n	80246dc <st_sssa8_ch_nn_mat_mult_nt_t+0x730>
 80246a4:	f99a 3001 	ldrsb.w	r3, [sl, #1]
 80246a8:	3702      	adds	r7, #2
 80246aa:	f8be 1004 	ldrh.w	r1, [lr, #4]
 80246ae:	f8be 2006 	ldrh.w	r2, [lr, #6]
 80246b2:	fb11 0003 	smlabb	r0, r1, r3, r0
 80246b6:	fb12 4403 	smlabb	r4, r2, r3, r4
 80246ba:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80246bc:	9007      	str	r0, [sp, #28]
 80246be:	42bb      	cmp	r3, r7
 80246c0:	9408      	str	r4, [sp, #32]
 80246c2:	dd0b      	ble.n	80246dc <st_sssa8_ch_nn_mat_mult_nt_t+0x730>
 80246c4:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 80246c8:	f8be 2008 	ldrh.w	r2, [lr, #8]
 80246cc:	f8be 100a 	ldrh.w	r1, [lr, #10]
 80246d0:	fb12 0203 	smlabb	r2, r2, r3, r0
 80246d4:	fb11 4303 	smlabb	r3, r1, r3, r4
 80246d8:	9207      	str	r2, [sp, #28]
 80246da:	9308      	str	r3, [sp, #32]
 80246dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80246de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80246e0:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 80246e4:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80246e8:	2b00      	cmp	r3, #0
 80246ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80246ec:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80246f0:	f340 80d3 	ble.w	802489a <st_sssa8_ch_nn_mat_mult_nt_t+0x8ee>
 80246f4:	9807      	ldr	r0, [sp, #28]
 80246f6:	0040      	lsls	r0, r0, #1
 80246f8:	fb50 2201 	smmla	r2, r0, r1, r2
 80246fc:	fa42 f303 	asr.w	r3, r2, r3
 8024700:	f303 0307 	ssat	r3, #8, r3
 8024704:	f88b 3000 	strb.w	r3, [fp]
 8024708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802470a:	f9b3 1000 	ldrsh.w	r1, [r3]
 802470e:	2900      	cmp	r1, #0
 8024710:	f340 80af 	ble.w	8024872 <st_sssa8_ch_nn_mat_mult_nt_t+0x8c6>
 8024714:	9b08      	ldr	r3, [sp, #32]
 8024716:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8024718:	0058      	lsls	r0, r3, #1
 802471a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802471c:	461c      	mov	r4, r3
 802471e:	58a3      	ldr	r3, [r4, r2]
 8024720:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8024722:	58a2      	ldr	r2, [r4, r2]
 8024724:	fb50 2303 	smmla	r3, r0, r3, r2
 8024728:	410b      	asrs	r3, r1
 802472a:	f303 0307 	ssat	r3, #8, r3
 802472e:	f88b 3001 	strb.w	r3, [fp, #1]
 8024732:	e655      	b.n	80243e0 <st_sssa8_ch_nn_mat_mult_nt_t+0x434>
 8024734:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8024736:	2c00      	cmp	r4, #0
 8024738:	f000 80cb 	beq.w	80248d2 <st_sssa8_ch_nn_mat_mult_nt_t+0x926>
 802473c:	2300      	movs	r3, #0
 802473e:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8024740:	4619      	mov	r1, r3
 8024742:	f102 0010 	add.w	r0, r2, #16
 8024746:	f930 5c10 	ldrsh.w	r5, [r0, #-16]
 802474a:	3c01      	subs	r4, #1
 802474c:	f930 2c08 	ldrsh.w	r2, [r0, #-8]
 8024750:	f100 0010 	add.w	r0, r0, #16
 8024754:	eba1 0105 	sub.w	r1, r1, r5
 8024758:	f930 5c1e 	ldrsh.w	r5, [r0, #-30]
 802475c:	eba3 0302 	sub.w	r3, r3, r2
 8024760:	f930 2c16 	ldrsh.w	r2, [r0, #-22]
 8024764:	eba1 0105 	sub.w	r1, r1, r5
 8024768:	f930 5c1c 	ldrsh.w	r5, [r0, #-28]
 802476c:	eba3 0302 	sub.w	r3, r3, r2
 8024770:	f930 2c14 	ldrsh.w	r2, [r0, #-20]
 8024774:	eba1 0105 	sub.w	r1, r1, r5
 8024778:	f930 5c1a 	ldrsh.w	r5, [r0, #-26]
 802477c:	eba3 0302 	sub.w	r3, r3, r2
 8024780:	f930 2c12 	ldrsh.w	r2, [r0, #-18]
 8024784:	eba1 0105 	sub.w	r1, r1, r5
 8024788:	eba3 0302 	sub.w	r3, r3, r2
 802478c:	d1db      	bne.n	8024746 <st_sssa8_ch_nn_mat_mult_nt_t+0x79a>
 802478e:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8024790:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8024792:	4402      	add	r2, r0
 8024794:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8024796:	b1cd      	cbz	r5, 80247cc <st_sssa8_ch_nn_mat_mult_nt_t+0x820>
 8024798:	f9b2 4000 	ldrsh.w	r4, [r2]
 802479c:	2d01      	cmp	r5, #1
 802479e:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 80247a2:	eba1 0104 	sub.w	r1, r1, r4
 80247a6:	eba3 0300 	sub.w	r3, r3, r0
 80247aa:	d00f      	beq.n	80247cc <st_sssa8_ch_nn_mat_mult_nt_t+0x820>
 80247ac:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 80247b0:	2d02      	cmp	r5, #2
 80247b2:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 80247b6:	eba1 0104 	sub.w	r1, r1, r4
 80247ba:	eba3 0300 	sub.w	r3, r3, r0
 80247be:	d005      	beq.n	80247cc <st_sssa8_ch_nn_mat_mult_nt_t+0x820>
 80247c0:	f9b2 0008 	ldrsh.w	r0, [r2, #8]
 80247c4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80247c8:	1a09      	subs	r1, r1, r0
 80247ca:	1a9b      	subs	r3, r3, r2
 80247cc:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 80247ce:	fb02 f101 	mul.w	r1, r2, r1
 80247d2:	fb02 f303 	mul.w	r3, r2, r3
 80247d6:	e460      	b.n	802409a <st_sssa8_ch_nn_mat_mult_nt_t+0xee>
 80247d8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80247da:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80247dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80247de:	18f5      	adds	r5, r6, r3
 80247e0:	2c00      	cmp	r4, #0
 80247e2:	d07e      	beq.n	80248e2 <st_sssa8_ch_nn_mat_mult_nt_t+0x936>
 80247e4:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80247e6:	f856 1b04 	ldr.w	r1, [r6], #4
 80247ea:	3c01      	subs	r4, #1
 80247ec:	f855 2b04 	ldr.w	r2, [r5], #4
 80247f0:	f103 0310 	add.w	r3, r3, #16
 80247f4:	ea4f 2031 	mov.w	r0, r1, ror #8
 80247f8:	fa2f f181 	sxtb16	r1, r1
 80247fc:	fa2f f080 	sxtb16	r0, r0
 8024800:	f843 1c10 	str.w	r1, [r3, #-16]
 8024804:	ea4f 2132 	mov.w	r1, r2, ror #8
 8024808:	f843 0c0c 	str.w	r0, [r3, #-12]
 802480c:	fa2f f181 	sxtb16	r1, r1
 8024810:	fa2f f282 	sxtb16	r2, r2
 8024814:	f843 1c04 	str.w	r1, [r3, #-4]
 8024818:	f843 2c08 	str.w	r2, [r3, #-8]
 802481c:	d1e3      	bne.n	80247e6 <st_sssa8_ch_nn_mat_mult_nt_t+0x83a>
 802481e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024820:	992b      	ldr	r1, [sp, #172]	; 0xac
 8024822:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024824:	185d      	adds	r5, r3, r1
 8024826:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8024828:	189a      	adds	r2, r3, r2
 802482a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 802482c:	440b      	add	r3, r1
 802482e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8024830:	2800      	cmp	r0, #0
 8024832:	f43f ac2d 	beq.w	8024090 <st_sssa8_ch_nn_mat_mult_nt_t+0xe4>
 8024836:	f992 1000 	ldrsb.w	r1, [r2]
 802483a:	2801      	cmp	r0, #1
 802483c:	8019      	strh	r1, [r3, #0]
 802483e:	f995 1000 	ldrsb.w	r1, [r5]
 8024842:	8059      	strh	r1, [r3, #2]
 8024844:	f43f ac24 	beq.w	8024090 <st_sssa8_ch_nn_mat_mult_nt_t+0xe4>
 8024848:	f992 1001 	ldrsb.w	r1, [r2, #1]
 802484c:	2802      	cmp	r0, #2
 802484e:	8099      	strh	r1, [r3, #4]
 8024850:	f995 1001 	ldrsb.w	r1, [r5, #1]
 8024854:	80d9      	strh	r1, [r3, #6]
 8024856:	f43f ac1b 	beq.w	8024090 <st_sssa8_ch_nn_mat_mult_nt_t+0xe4>
 802485a:	f992 2002 	ldrsb.w	r2, [r2, #2]
 802485e:	811a      	strh	r2, [r3, #8]
 8024860:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8024864:	815a      	strh	r2, [r3, #10]
 8024866:	e413      	b.n	8024090 <st_sssa8_ch_nn_mat_mult_nt_t+0xe4>
 8024868:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 802486c:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8024870:	e5b2      	b.n	80243d8 <st_sssa8_ch_nn_mat_mult_nt_t+0x42c>
 8024872:	f1c1 0101 	rsb	r1, r1, #1
 8024876:	9a08      	ldr	r2, [sp, #32]
 8024878:	408a      	lsls	r2, r1
 802487a:	f302 021f 	ssat	r2, #32, r2
 802487e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024880:	9915      	ldr	r1, [sp, #84]	; 0x54
 8024882:	4618      	mov	r0, r3
 8024884:	5843      	ldr	r3, [r0, r1]
 8024886:	fb52 f213 	smmulr	r2, r2, r3
 802488a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 802488c:	585b      	ldr	r3, [r3, r1]
 802488e:	4413      	add	r3, r2
 8024890:	f303 0307 	ssat	r3, #8, r3
 8024894:	f88b 3001 	strb.w	r3, [fp, #1]
 8024898:	e5a2      	b.n	80243e0 <st_sssa8_ch_nn_mat_mult_nt_t+0x434>
 802489a:	f1c3 0301 	rsb	r3, r3, #1
 802489e:	9807      	ldr	r0, [sp, #28]
 80248a0:	4098      	lsls	r0, r3
 80248a2:	f300 031f 	ssat	r3, #32, r0
 80248a6:	fb53 f311 	smmulr	r3, r3, r1
 80248aa:	4413      	add	r3, r2
 80248ac:	f303 0307 	ssat	r3, #8, r3
 80248b0:	f88b 3000 	strb.w	r3, [fp]
 80248b4:	e728      	b.n	8024708 <st_sssa8_ch_nn_mat_mult_nt_t+0x75c>
 80248b6:	f1c3 0301 	rsb	r3, r3, #1
 80248ba:	fa02 f303 	lsl.w	r3, r2, r3
 80248be:	f303 031f 	ssat	r3, #32, r3
 80248c2:	fb53 f314 	smmulr	r3, r3, r4
 80248c6:	4403      	add	r3, r0
 80248c8:	f303 0307 	ssat	r3, #8, r3
 80248cc:	f88a 3000 	strb.w	r3, [sl]
 80248d0:	e5ee      	b.n	80244b0 <st_sssa8_ch_nn_mat_mult_nt_t+0x504>
 80248d2:	4621      	mov	r1, r4
 80248d4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80248d6:	4623      	mov	r3, r4
 80248d8:	e75c      	b.n	8024794 <st_sssa8_ch_nn_mat_mult_nt_t+0x7e8>
 80248da:	f8dd e0fc 	ldr.w	lr, [sp, #252]	; 0xfc
 80248de:	2700      	movs	r7, #0
 80248e0:	e696      	b.n	8024610 <st_sssa8_ch_nn_mat_mult_nt_t+0x664>
 80248e2:	4632      	mov	r2, r6
 80248e4:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80248e6:	e7a2      	b.n	802482e <st_sssa8_ch_nn_mat_mult_nt_t+0x882>

080248e8 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 80248e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248ec:	b09b      	sub	sp, #108	; 0x6c
 80248ee:	4683      	mov	fp, r0
 80248f0:	460f      	mov	r7, r1
 80248f2:	f8bd 4090 	ldrh.w	r4, [sp, #144]	; 0x90
 80248f6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80248f8:	910d      	str	r1, [sp, #52]	; 0x34
 80248fa:	0861      	lsrs	r1, r4, #1
 80248fc:	eb00 0503 	add.w	r5, r0, r3
 8024900:	f8bd 0094 	ldrh.w	r0, [sp, #148]	; 0x94
 8024904:	9318      	str	r3, [sp, #96]	; 0x60
 8024906:	9417      	str	r4, [sp, #92]	; 0x5c
 8024908:	9215      	str	r2, [sp, #84]	; 0x54
 802490a:	9516      	str	r5, [sp, #88]	; 0x58
 802490c:	9006      	str	r0, [sp, #24]
 802490e:	f000 81c5 	beq.w	8024c9c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3b4>
 8024912:	3901      	subs	r1, #1
 8024914:	1ec4      	subs	r4, r0, #3
 8024916:	3210      	adds	r2, #16
 8024918:	f1a0 0310 	sub.w	r3, r0, #16
 802491c:	940f      	str	r4, [sp, #60]	; 0x3c
 802491e:	b28c      	uxth	r4, r1
 8024920:	9915      	ldr	r1, [sp, #84]	; 0x54
 8024922:	091b      	lsrs	r3, r3, #4
 8024924:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8024928:	9419      	str	r4, [sp, #100]	; 0x64
 802492a:	3108      	adds	r1, #8
 802492c:	3301      	adds	r3, #1
 802492e:	920e      	str	r2, [sp, #56]	; 0x38
 8024930:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 8024934:	9107      	str	r1, [sp, #28]
 8024936:	9926      	ldr	r1, [sp, #152]	; 0x98
 8024938:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802493a:	3104      	adds	r1, #4
 802493c:	9610      	str	r6, [sp, #64]	; 0x40
 802493e:	3208      	adds	r2, #8
 8024940:	9105      	str	r1, [sp, #20]
 8024942:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8024944:	9204      	str	r2, [sp, #16]
 8024946:	015a      	lsls	r2, r3, #5
 8024948:	3102      	adds	r1, #2
 802494a:	9103      	str	r1, [sp, #12]
 802494c:	0119      	lsls	r1, r3, #4
 802494e:	019b      	lsls	r3, r3, #6
 8024950:	9113      	str	r1, [sp, #76]	; 0x4c
 8024952:	9311      	str	r3, [sp, #68]	; 0x44
 8024954:	1cab      	adds	r3, r5, #2
 8024956:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024958:	9302      	str	r3, [sp, #8]
 802495a:	1f03      	subs	r3, r0, #4
 802495c:	3108      	adds	r1, #8
 802495e:	9314      	str	r3, [sp, #80]	; 0x50
 8024960:	9101      	str	r1, [sp, #4]
 8024962:	18b9      	adds	r1, r7, r2
 8024964:	9b07      	ldr	r3, [sp, #28]
 8024966:	18b2      	adds	r2, r6, r2
 8024968:	9108      	str	r1, [sp, #32]
 802496a:	9212      	str	r2, [sp, #72]	; 0x48
 802496c:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8024970:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8024974:	9b06      	ldr	r3, [sp, #24]
 8024976:	2b0f      	cmp	r3, #15
 8024978:	f340 8255 	ble.w	8024e26 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x53e>
 802497c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8024980:	46dc      	mov	ip, fp
 8024982:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8024986:	4603      	mov	r3, r0
 8024988:	462c      	mov	r4, r5
 802498a:	9e08      	ldr	r6, [sp, #32]
 802498c:	f8de 7000 	ldr.w	r7, [lr]
 8024990:	f8d8 2000 	ldr.w	r2, [r8]
 8024994:	f8dc 1000 	ldr.w	r1, [ip]
 8024998:	f8dc a004 	ldr.w	sl, [ip, #4]
 802499c:	fb21 5507 	smlad	r5, r1, r7, r5
 80249a0:	fb21 4102 	smlad	r1, r1, r2, r4
 80249a4:	fb2a 0007 	smlad	r0, sl, r7, r0
 80249a8:	fb2a 3202 	smlad	r2, sl, r2, r3
 80249ac:	f8de 7004 	ldr.w	r7, [lr, #4]
 80249b0:	f8d8 a004 	ldr.w	sl, [r8, #4]
 80249b4:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80249b8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80249bc:	fb24 5507 	smlad	r5, r4, r7, r5
 80249c0:	fb24 110a 	smlad	r1, r4, sl, r1
 80249c4:	fb23 0007 	smlad	r0, r3, r7, r0
 80249c8:	fb23 230a 	smlad	r3, r3, sl, r2
 80249cc:	f8de 7008 	ldr.w	r7, [lr, #8]
 80249d0:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80249d4:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80249d8:	f8dc a014 	ldr.w	sl, [ip, #20]
 80249dc:	fb24 5507 	smlad	r5, r4, r7, r5
 80249e0:	fb24 1102 	smlad	r1, r4, r2, r1
 80249e4:	fb2a 0007 	smlad	r0, sl, r7, r0
 80249e8:	fb2a 3202 	smlad	r2, sl, r2, r3
 80249ec:	f8de 700c 	ldr.w	r7, [lr, #12]
 80249f0:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 80249f4:	f8dc 4018 	ldr.w	r4, [ip, #24]
 80249f8:	f8dc 901c 	ldr.w	r9, [ip, #28]
 80249fc:	fb24 5507 	smlad	r5, r4, r7, r5
 8024a00:	fb24 140a 	smlad	r4, r4, sl, r1
 8024a04:	fb29 0007 	smlad	r0, r9, r7, r0
 8024a08:	fb29 2a0a 	smlad	sl, r9, sl, r2
 8024a0c:	f8de 7010 	ldr.w	r7, [lr, #16]
 8024a10:	f8d8 9010 	ldr.w	r9, [r8, #16]
 8024a14:	f8dc 1020 	ldr.w	r1, [ip, #32]
 8024a18:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8024a1c:	fb21 5507 	smlad	r5, r1, r7, r5
 8024a20:	fb21 4409 	smlad	r4, r1, r9, r4
 8024a24:	fb23 0007 	smlad	r0, r3, r7, r0
 8024a28:	fb23 a909 	smlad	r9, r3, r9, sl
 8024a2c:	f8de 7014 	ldr.w	r7, [lr, #20]
 8024a30:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8024a34:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
 8024a38:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 8024a3c:	fb21 5507 	smlad	r5, r1, r7, r5
 8024a40:	fb21 4402 	smlad	r4, r1, r2, r4
 8024a44:	fb23 0007 	smlad	r0, r3, r7, r0
 8024a48:	fb23 9302 	smlad	r3, r3, r2, r9
 8024a4c:	f8de 7018 	ldr.w	r7, [lr, #24]
 8024a50:	f8d8 9018 	ldr.w	r9, [r8, #24]
 8024a54:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
 8024a58:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
 8024a5c:	fb21 5507 	smlad	r5, r1, r7, r5
 8024a60:	fb21 4409 	smlad	r4, r1, r9, r4
 8024a64:	fb22 0707 	smlad	r7, r2, r7, r0
 8024a68:	fb22 3909 	smlad	r9, r2, r9, r3
 8024a6c:	f8de 001c 	ldr.w	r0, [lr, #28]
 8024a70:	f108 0820 	add.w	r8, r8, #32
 8024a74:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8024a78:	f10e 0e20 	add.w	lr, lr, #32
 8024a7c:	f8dc 1038 	ldr.w	r1, [ip, #56]	; 0x38
 8024a80:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8024a84:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 8024a88:	fb21 5500 	smlad	r5, r1, r0, r5
 8024a8c:	fb21 4403 	smlad	r4, r1, r3, r4
 8024a90:	fb22 7000 	smlad	r0, r2, r0, r7
 8024a94:	fb22 9303 	smlad	r3, r2, r3, r9
 8024a98:	45b6      	cmp	lr, r6
 8024a9a:	f47f af77 	bne.w	802498c <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa4>
 8024a9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024aa0:	9f08      	ldr	r7, [sp, #32]
 8024aa2:	4493      	add	fp, r2
 8024aa4:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8024aa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024aaa:	9200      	str	r2, [sp, #0]
 8024aac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024aae:	4596      	cmp	lr, r2
 8024ab0:	da41      	bge.n	8024b36 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24e>
 8024ab2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024ab4:	465e      	mov	r6, fp
 8024ab6:	f8dd c000 	ldr.w	ip, [sp]
 8024aba:	eba2 020e 	sub.w	r2, r2, lr
 8024abe:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8024ac2:	0892      	lsrs	r2, r2, #2
 8024ac4:	920b      	str	r2, [sp, #44]	; 0x2c
 8024ac6:	3201      	adds	r2, #1
 8024ac8:	920a      	str	r2, [sp, #40]	; 0x28
 8024aca:	00d2      	lsls	r2, r2, #3
 8024acc:	eb07 0802 	add.w	r8, r7, r2
 8024ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8024ad2:	f8d7 e000 	ldr.w	lr, [r7]
 8024ad6:	f8dc 9000 	ldr.w	r9, [ip]
 8024ada:	6831      	ldr	r1, [r6, #0]
 8024adc:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8024ae0:	fb21 550e 	smlad	r5, r1, lr, r5
 8024ae4:	fb21 4409 	smlad	r4, r1, r9, r4
 8024ae8:	fb2a 000e 	smlad	r0, sl, lr, r0
 8024aec:	fb2a 3309 	smlad	r3, sl, r9, r3
 8024af0:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8024af4:	f10c 0c08 	add.w	ip, ip, #8
 8024af8:	f85c 9c04 	ldr.w	r9, [ip, #-4]
 8024afc:	3708      	adds	r7, #8
 8024afe:	68b1      	ldr	r1, [r6, #8]
 8024b00:	3610      	adds	r6, #16
 8024b02:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8024b06:	fb21 550e 	smlad	r5, r1, lr, r5
 8024b0a:	fb21 4409 	smlad	r4, r1, r9, r4
 8024b0e:	fb22 000e 	smlad	r0, r2, lr, r0
 8024b12:	fb22 3309 	smlad	r3, r2, r9, r3
 8024b16:	4547      	cmp	r7, r8
 8024b18:	d1db      	bne.n	8024ad2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1ea>
 8024b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024b1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024b1e:	eb0b 1b02 	add.w	fp, fp, r2, lsl #4
 8024b22:	9a00      	ldr	r2, [sp, #0]
 8024b24:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8024b28:	440a      	add	r2, r1
 8024b2a:	f10e 0e04 	add.w	lr, lr, #4
 8024b2e:	9200      	str	r2, [sp, #0]
 8024b30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024b32:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 8024b36:	9a06      	ldr	r2, [sp, #24]
 8024b38:	4572      	cmp	r2, lr
 8024b3a:	dd40      	ble.n	8024bbe <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8024b3c:	9e00      	ldr	r6, [sp, #0]
 8024b3e:	f10e 0201 	add.w	r2, lr, #1
 8024b42:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8024b46:	f9b7 c000 	ldrsh.w	ip, [r7]
 8024b4a:	f9b6 6000 	ldrsh.w	r6, [r6]
 8024b4e:	fb0c 0001 	mla	r0, ip, r1, r0
 8024b52:	f9bb 8000 	ldrsh.w	r8, [fp]
 8024b56:	fb06 3301 	mla	r3, r6, r1, r3
 8024b5a:	9906      	ldr	r1, [sp, #24]
 8024b5c:	fb08 550c 	mla	r5, r8, ip, r5
 8024b60:	4291      	cmp	r1, r2
 8024b62:	fb08 4406 	mla	r4, r8, r6, r4
 8024b66:	f340 815b 	ble.w	8024e20 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x538>
 8024b6a:	9a00      	ldr	r2, [sp, #0]
 8024b6c:	f10e 0e02 	add.w	lr, lr, #2
 8024b70:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 8024b74:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8024b78:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 8024b7c:	f9bb c004 	ldrsh.w	ip, [fp, #4]
 8024b80:	fb06 0002 	mla	r0, r6, r2, r0
 8024b84:	fb01 3302 	mla	r3, r1, r2, r3
 8024b88:	9a06      	ldr	r2, [sp, #24]
 8024b8a:	fb0c 5506 	mla	r5, ip, r6, r5
 8024b8e:	4572      	cmp	r2, lr
 8024b90:	fb0c 4401 	mla	r4, ip, r1, r4
 8024b94:	f340 814f 	ble.w	8024e36 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x54e>
 8024b98:	9a00      	ldr	r2, [sp, #0]
 8024b9a:	f10b 0b0c 	add.w	fp, fp, #12
 8024b9e:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 8024ba2:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8024ba6:	f93b 7c04 	ldrsh.w	r7, [fp, #-4]
 8024baa:	f93b 2c02 	ldrsh.w	r2, [fp, #-2]
 8024bae:	fb07 5506 	mla	r5, r7, r6, r5
 8024bb2:	fb07 4401 	mla	r4, r7, r1, r4
 8024bb6:	fb06 0002 	mla	r0, r6, r2, r0
 8024bba:	fb01 3302 	mla	r3, r1, r2, r3
 8024bbe:	9f05      	ldr	r7, [sp, #20]
 8024bc0:	9904      	ldr	r1, [sp, #16]
 8024bc2:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8024bc6:	9e01      	ldr	r6, [sp, #4]
 8024bc8:	2a00      	cmp	r2, #0
 8024bca:	f851 1c08 	ldr.w	r1, [r1, #-8]
 8024bce:	f856 6c08 	ldr.w	r6, [r6, #-8]
 8024bd2:	f340 8107 	ble.w	8024de4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4fc>
 8024bd6:	006d      	lsls	r5, r5, #1
 8024bd8:	0064      	lsls	r4, r4, #1
 8024bda:	fb55 6501 	smmla	r5, r5, r1, r6
 8024bde:	fb54 6401 	smmla	r4, r4, r1, r6
 8024be2:	fa45 f202 	asr.w	r2, r5, r2
 8024be6:	f302 0207 	ssat	r2, #8, r2
 8024bea:	9903      	ldr	r1, [sp, #12]
 8024bec:	f801 2c02 	strb.w	r2, [r1, #-2]
 8024bf0:	f937 1c04 	ldrsh.w	r1, [r7, #-4]
 8024bf4:	410c      	asrs	r4, r1
 8024bf6:	f304 0407 	ssat	r4, #8, r4
 8024bfa:	9a02      	ldr	r2, [sp, #8]
 8024bfc:	463d      	mov	r5, r7
 8024bfe:	f802 4c02 	strb.w	r4, [r2, #-2]
 8024c02:	f935 2c02 	ldrsh.w	r2, [r5, #-2]
 8024c06:	2a00      	cmp	r2, #0
 8024c08:	f340 80c8 	ble.w	8024d9c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b4>
 8024c0c:	9904      	ldr	r1, [sp, #16]
 8024c0e:	0040      	lsls	r0, r0, #1
 8024c10:	9c01      	ldr	r4, [sp, #4]
 8024c12:	005b      	lsls	r3, r3, #1
 8024c14:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8024c18:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8024c1c:	fb50 4001 	smmla	r0, r0, r1, r4
 8024c20:	fb53 4301 	smmla	r3, r3, r1, r4
 8024c24:	4110      	asrs	r0, r2
 8024c26:	f300 0007 	ssat	r0, #8, r0
 8024c2a:	9a03      	ldr	r2, [sp, #12]
 8024c2c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8024c30:	f935 4c02 	ldrsh.w	r4, [r5, #-2]
 8024c34:	fa43 f404 	asr.w	r4, r3, r4
 8024c38:	f304 0407 	ssat	r4, #8, r4
 8024c3c:	9b02      	ldr	r3, [sp, #8]
 8024c3e:	462a      	mov	r2, r5
 8024c40:	f803 4c01 	strb.w	r4, [r3, #-1]
 8024c44:	3204      	adds	r2, #4
 8024c46:	9b07      	ldr	r3, [sp, #28]
 8024c48:	9205      	str	r2, [sp, #20]
 8024c4a:	3308      	adds	r3, #8
 8024c4c:	9a04      	ldr	r2, [sp, #16]
 8024c4e:	9307      	str	r3, [sp, #28]
 8024c50:	3208      	adds	r2, #8
 8024c52:	9204      	str	r2, [sp, #16]
 8024c54:	9a03      	ldr	r2, [sp, #12]
 8024c56:	3202      	adds	r2, #2
 8024c58:	9203      	str	r2, [sp, #12]
 8024c5a:	9a01      	ldr	r2, [sp, #4]
 8024c5c:	3208      	adds	r2, #8
 8024c5e:	9201      	str	r2, [sp, #4]
 8024c60:	9a02      	ldr	r2, [sp, #8]
 8024c62:	3202      	adds	r2, #2
 8024c64:	9202      	str	r2, [sp, #8]
 8024c66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024c68:	429a      	cmp	r2, r3
 8024c6a:	f47f ae7f 	bne.w	802496c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x84>
 8024c6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024c70:	9826      	ldr	r0, [sp, #152]	; 0x98
 8024c72:	3301      	adds	r3, #1
 8024c74:	00da      	lsls	r2, r3, #3
 8024c76:	0059      	lsls	r1, r3, #1
 8024c78:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8024c7c:	9326      	str	r3, [sp, #152]	; 0x98
 8024c7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024c80:	4413      	add	r3, r2
 8024c82:	9315      	str	r3, [sp, #84]	; 0x54
 8024c84:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024c86:	4413      	add	r3, r2
 8024c88:	9327      	str	r3, [sp, #156]	; 0x9c
 8024c8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024c8c:	4413      	add	r3, r2
 8024c8e:	9328      	str	r3, [sp, #160]	; 0xa0
 8024c90:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024c92:	440b      	add	r3, r1
 8024c94:	9329      	str	r3, [sp, #164]	; 0xa4
 8024c96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024c98:	440b      	add	r3, r1
 8024c9a:	9316      	str	r3, [sp, #88]	; 0x58
 8024c9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024c9e:	07da      	lsls	r2, r3, #31
 8024ca0:	d574      	bpl.n	8024d8c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a4>
 8024ca2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024ca4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024ca6:	6819      	ldr	r1, [r3, #0]
 8024ca8:	9b06      	ldr	r3, [sp, #24]
 8024caa:	089e      	lsrs	r6, r3, #2
 8024cac:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
 8024cb0:	f000 80e0 	beq.w	8024e74 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x58c>
 8024cb4:	3e01      	subs	r6, #1
 8024cb6:	4664      	mov	r4, ip
 8024cb8:	460b      	mov	r3, r1
 8024cba:	b2b6      	uxth	r6, r6
 8024cbc:	3601      	adds	r6, #1
 8024cbe:	00f6      	lsls	r6, r6, #3
 8024cc0:	eb0b 0706 	add.w	r7, fp, r6
 8024cc4:	f8db 5000 	ldr.w	r5, [fp]
 8024cc8:	f10b 0b08 	add.w	fp, fp, #8
 8024ccc:	f85b 2c04 	ldr.w	r2, [fp, #-4]
 8024cd0:	f8d0 e000 	ldr.w	lr, [r0]
 8024cd4:	fb25 110e 	smlad	r1, r5, lr, r1
 8024cd8:	f8d4 e000 	ldr.w	lr, [r4]
 8024cdc:	fb25 330e 	smlad	r3, r5, lr, r3
 8024ce0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8024ce4:	3408      	adds	r4, #8
 8024ce6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8024cea:	3008      	adds	r0, #8
 8024cec:	fb22 110e 	smlad	r1, r2, lr, r1
 8024cf0:	fb22 3305 	smlad	r3, r2, r5, r3
 8024cf4:	45bb      	cmp	fp, r7
 8024cf6:	d1e5      	bne.n	8024cc4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3dc>
 8024cf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024cfa:	44b4      	add	ip, r6
 8024cfc:	4432      	add	r2, r6
 8024cfe:	920d      	str	r2, [sp, #52]	; 0x34
 8024d00:	9a06      	ldr	r2, [sp, #24]
 8024d02:	f012 0203 	ands.w	r2, r2, #3
 8024d06:	d01f      	beq.n	8024d48 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x460>
 8024d08:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8024d0a:	2a01      	cmp	r2, #1
 8024d0c:	f9bb 0000 	ldrsh.w	r0, [fp]
 8024d10:	8835      	ldrh	r5, [r6, #0]
 8024d12:	f8bc 4000 	ldrh.w	r4, [ip]
 8024d16:	fb15 1100 	smlabb	r1, r5, r0, r1
 8024d1a:	fb14 3300 	smlabb	r3, r4, r0, r3
 8024d1e:	d013      	beq.n	8024d48 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x460>
 8024d20:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 8024d24:	2a02      	cmp	r2, #2
 8024d26:	8875      	ldrh	r5, [r6, #2]
 8024d28:	f8bc 4002 	ldrh.w	r4, [ip, #2]
 8024d2c:	fb15 1100 	smlabb	r1, r5, r0, r1
 8024d30:	fb14 3300 	smlabb	r3, r4, r0, r3
 8024d34:	d008      	beq.n	8024d48 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x460>
 8024d36:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 8024d3a:	88b4      	ldrh	r4, [r6, #4]
 8024d3c:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 8024d40:	fb12 1104 	smlabb	r1, r2, r4, r1
 8024d44:	fb12 3300 	smlabb	r3, r2, r0, r3
 8024d48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024d4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8024d4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8024d50:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8024d52:	6825      	ldr	r5, [r4, #0]
 8024d54:	2a00      	cmp	r2, #0
 8024d56:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8024d58:	f100 0001 	add.w	r0, r0, #1
 8024d5c:	6824      	ldr	r4, [r4, #0]
 8024d5e:	dd6d      	ble.n	8024e3c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x554>
 8024d60:	0049      	lsls	r1, r1, #1
 8024d62:	005b      	lsls	r3, r3, #1
 8024d64:	fb51 4105 	smmla	r1, r1, r5, r4
 8024d68:	fb53 4305 	smmla	r3, r3, r5, r4
 8024d6c:	fa41 f202 	asr.w	r2, r1, r2
 8024d70:	f302 0207 	ssat	r2, #8, r2
 8024d74:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8024d76:	700a      	strb	r2, [r1, #0]
 8024d78:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024d7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8024d7e:	4113      	asrs	r3, r2
 8024d80:	f303 0307 	ssat	r3, #8, r3
 8024d84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024d86:	9029      	str	r0, [sp, #164]	; 0xa4
 8024d88:	7013      	strb	r3, [r2, #0]
 8024d8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024d8c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024d8e:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 8024d92:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024d94:	4418      	add	r0, r3
 8024d96:	b01b      	add	sp, #108	; 0x6c
 8024d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d9c:	f1c2 0201 	rsb	r2, r2, #1
 8024da0:	fa00 f102 	lsl.w	r1, r0, r2
 8024da4:	f301 011f 	ssat	r1, #32, r1
 8024da8:	9804      	ldr	r0, [sp, #16]
 8024daa:	f850 4c04 	ldr.w	r4, [r0, #-4]
 8024dae:	fb51 f114 	smmulr	r1, r1, r4
 8024db2:	fa03 f202 	lsl.w	r2, r3, r2
 8024db6:	f302 001f 	ssat	r0, #32, r2
 8024dba:	fb50 f014 	smmulr	r0, r0, r4
 8024dbe:	9b01      	ldr	r3, [sp, #4]
 8024dc0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8024dc4:	440a      	add	r2, r1
 8024dc6:	f302 0207 	ssat	r2, #8, r2
 8024dca:	9903      	ldr	r1, [sp, #12]
 8024dcc:	f801 2c01 	strb.w	r2, [r1, #-1]
 8024dd0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8024dd4:	4403      	add	r3, r0
 8024dd6:	f303 0307 	ssat	r3, #8, r3
 8024dda:	9a02      	ldr	r2, [sp, #8]
 8024ddc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8024de0:	462a      	mov	r2, r5
 8024de2:	e72f      	b.n	8024c44 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x35c>
 8024de4:	f1c2 0201 	rsb	r2, r2, #1
 8024de8:	4095      	lsls	r5, r2
 8024dea:	f305 051f 	ssat	r5, #32, r5
 8024dee:	fb55 f511 	smmulr	r5, r5, r1
 8024df2:	fa04 f202 	lsl.w	r2, r4, r2
 8024df6:	f302 021f 	ssat	r2, #32, r2
 8024dfa:	fb52 f111 	smmulr	r1, r2, r1
 8024dfe:	4435      	add	r5, r6
 8024e00:	f305 0507 	ssat	r5, #8, r5
 8024e04:	9a03      	ldr	r2, [sp, #12]
 8024e06:	f802 5c02 	strb.w	r5, [r2, #-2]
 8024e0a:	9a01      	ldr	r2, [sp, #4]
 8024e0c:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8024e10:	4411      	add	r1, r2
 8024e12:	f301 0107 	ssat	r1, #8, r1
 8024e16:	9a02      	ldr	r2, [sp, #8]
 8024e18:	463d      	mov	r5, r7
 8024e1a:	f802 1c02 	strb.w	r1, [r2, #-2]
 8024e1e:	e6f0      	b.n	8024c02 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31a>
 8024e20:	f10b 0b04 	add.w	fp, fp, #4
 8024e24:	e6cb      	b.n	8024bbe <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8024e26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024e28:	462c      	mov	r4, r5
 8024e2a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8024e2c:	f04f 0e00 	mov.w	lr, #0
 8024e30:	9300      	str	r3, [sp, #0]
 8024e32:	4603      	mov	r3, r0
 8024e34:	e63a      	b.n	8024aac <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c4>
 8024e36:	f10b 0b08 	add.w	fp, fp, #8
 8024e3a:	e6c0      	b.n	8024bbe <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8024e3c:	f1c2 0601 	rsb	r6, r2, #1
 8024e40:	fa01 f206 	lsl.w	r2, r1, r6
 8024e44:	f302 021f 	ssat	r2, #32, r2
 8024e48:	fb52 f215 	smmulr	r2, r2, r5
 8024e4c:	40b3      	lsls	r3, r6
 8024e4e:	f303 031f 	ssat	r3, #32, r3
 8024e52:	fb53 f115 	smmulr	r1, r3, r5
 8024e56:	1913      	adds	r3, r2, r4
 8024e58:	f303 0307 	ssat	r3, #8, r3
 8024e5c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024e5e:	7013      	strb	r3, [r2, #0]
 8024e60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024e62:	681b      	ldr	r3, [r3, #0]
 8024e64:	440b      	add	r3, r1
 8024e66:	f303 0307 	ssat	r3, #8, r3
 8024e6a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024e6c:	9029      	str	r0, [sp, #164]	; 0xa4
 8024e6e:	7013      	strb	r3, [r2, #0]
 8024e70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024e72:	e78b      	b.n	8024d8c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a4>
 8024e74:	460b      	mov	r3, r1
 8024e76:	e743      	b.n	8024d00 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x418>

08024e78 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8024e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e7c:	b08f      	sub	sp, #60	; 0x3c
 8024e7e:	460f      	mov	r7, r1
 8024e80:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8024e84:	9105      	str	r1, [sp, #20]
 8024e86:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
 8024e8a:	0859      	lsrs	r1, r3, #1
 8024e8c:	930c      	str	r3, [sp, #48]	; 0x30
 8024e8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8024e90:	9402      	str	r4, [sp, #8]
 8024e92:	f000 819c 	beq.w	80251ce <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x356>
 8024e96:	4616      	mov	r6, r2
 8024e98:	1ee5      	subs	r5, r4, #3
 8024e9a:	3901      	subs	r1, #1
 8024e9c:	3210      	adds	r2, #16
 8024e9e:	9507      	str	r5, [sp, #28]
 8024ea0:	f106 0508 	add.w	r5, r6, #8
 8024ea4:	f1a4 0310 	sub.w	r3, r4, #16
 8024ea8:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8024eaa:	9503      	str	r5, [sp, #12]
 8024eac:	b28d      	uxth	r5, r1
 8024eae:	091b      	lsrs	r3, r3, #4
 8024eb0:	3602      	adds	r6, #2
 8024eb2:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8024eb6:	950d      	str	r5, [sp, #52]	; 0x34
 8024eb8:	3301      	adds	r3, #1
 8024eba:	9601      	str	r6, [sp, #4]
 8024ebc:	9206      	str	r2, [sp, #24]
 8024ebe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8024ec0:	eb07 1e43 	add.w	lr, r7, r3, lsl #5
 8024ec4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8024ec6:	f102 0b08 	add.w	fp, r2, #8
 8024eca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8024ecc:	3604      	adds	r6, #4
 8024ece:	f102 0a08 	add.w	sl, r2, #8
 8024ed2:	011a      	lsls	r2, r3, #4
 8024ed4:	019b      	lsls	r3, r3, #6
 8024ed6:	9600      	str	r6, [sp, #0]
 8024ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8024eda:	1f22      	subs	r2, r4, #4
 8024edc:	9308      	str	r3, [sp, #32]
 8024ede:	9b03      	ldr	r3, [sp, #12]
 8024ee0:	920a      	str	r2, [sp, #40]	; 0x28
 8024ee2:	9a02      	ldr	r2, [sp, #8]
 8024ee4:	f853 4c08 	ldr.w	r4, [r3, #-8]
 8024ee8:	2a0f      	cmp	r2, #15
 8024eea:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8024eee:	f340 8158 	ble.w	80251a2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32a>
 8024ef2:	f8dd c014 	ldr.w	ip, [sp, #20]
 8024ef6:	4607      	mov	r7, r0
 8024ef8:	f8dc 5000 	ldr.w	r5, [ip]
 8024efc:	6839      	ldr	r1, [r7, #0]
 8024efe:	fb21 4405 	smlad	r4, r1, r5, r4
 8024f02:	687a      	ldr	r2, [r7, #4]
 8024f04:	fb22 3305 	smlad	r3, r2, r5, r3
 8024f08:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8024f0c:	68b9      	ldr	r1, [r7, #8]
 8024f0e:	fb21 4105 	smlad	r1, r1, r5, r4
 8024f12:	68fa      	ldr	r2, [r7, #12]
 8024f14:	fb22 3205 	smlad	r2, r2, r5, r3
 8024f18:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8024f1c:	693c      	ldr	r4, [r7, #16]
 8024f1e:	fb24 1105 	smlad	r1, r4, r5, r1
 8024f22:	697b      	ldr	r3, [r7, #20]
 8024f24:	fb23 2205 	smlad	r2, r3, r5, r2
 8024f28:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8024f2c:	69bc      	ldr	r4, [r7, #24]
 8024f2e:	fb24 1405 	smlad	r4, r4, r5, r1
 8024f32:	69fb      	ldr	r3, [r7, #28]
 8024f34:	fb23 2305 	smlad	r3, r3, r5, r2
 8024f38:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8024f3c:	6a39      	ldr	r1, [r7, #32]
 8024f3e:	fb21 4405 	smlad	r4, r1, r5, r4
 8024f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024f44:	fb22 3305 	smlad	r3, r2, r5, r3
 8024f48:	f8dc 5014 	ldr.w	r5, [ip, #20]
 8024f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024f4e:	fb21 4105 	smlad	r1, r1, r5, r4
 8024f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024f54:	fb22 3205 	smlad	r2, r2, r5, r3
 8024f58:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8024f5c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8024f5e:	fb24 1105 	smlad	r1, r4, r5, r1
 8024f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024f64:	fb23 2205 	smlad	r2, r3, r5, r2
 8024f68:	f8dc 501c 	ldr.w	r5, [ip, #28]
 8024f6c:	3740      	adds	r7, #64	; 0x40
 8024f6e:	f857 4c08 	ldr.w	r4, [r7, #-8]
 8024f72:	f10c 0c20 	add.w	ip, ip, #32
 8024f76:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8024f7a:	fb24 1405 	smlad	r4, r4, r5, r1
 8024f7e:	fb23 2305 	smlad	r3, r3, r5, r2
 8024f82:	45f4      	cmp	ip, lr
 8024f84:	d1b8      	bne.n	8024ef8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x80>
 8024f86:	9a08      	ldr	r2, [sp, #32]
 8024f88:	4677      	mov	r7, lr
 8024f8a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8024f8e:	4410      	add	r0, r2
 8024f90:	9a07      	ldr	r2, [sp, #28]
 8024f92:	4594      	cmp	ip, r2
 8024f94:	da25      	bge.n	8024fe2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x16a>
 8024f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024f98:	4606      	mov	r6, r0
 8024f9a:	eba2 090c 	sub.w	r9, r2, ip
 8024f9e:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8024fa2:	f109 0201 	add.w	r2, r9, #1
 8024fa6:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8024faa:	9204      	str	r2, [sp, #16]
 8024fac:	683a      	ldr	r2, [r7, #0]
 8024fae:	6831      	ldr	r1, [r6, #0]
 8024fb0:	fb21 4402 	smlad	r4, r1, r2, r4
 8024fb4:	6871      	ldr	r1, [r6, #4]
 8024fb6:	fb21 3202 	smlad	r2, r1, r2, r3
 8024fba:	6879      	ldr	r1, [r7, #4]
 8024fbc:	3610      	adds	r6, #16
 8024fbe:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8024fc2:	3708      	adds	r7, #8
 8024fc4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8024fc8:	fb25 4401 	smlad	r4, r5, r1, r4
 8024fcc:	fb23 2301 	smlad	r3, r3, r1, r2
 8024fd0:	4547      	cmp	r7, r8
 8024fd2:	d1eb      	bne.n	8024fac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x134>
 8024fd4:	f10c 0c04 	add.w	ip, ip, #4
 8024fd8:	9a04      	ldr	r2, [sp, #16]
 8024fda:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
 8024fde:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8024fe2:	9a02      	ldr	r2, [sp, #8]
 8024fe4:	4562      	cmp	r2, ip
 8024fe6:	dd26      	ble.n	8025036 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 8024fe8:	f9b7 1000 	ldrsh.w	r1, [r7]
 8024fec:	f10c 0201 	add.w	r2, ip, #1
 8024ff0:	8806      	ldrh	r6, [r0, #0]
 8024ff2:	8845      	ldrh	r5, [r0, #2]
 8024ff4:	fb16 4401 	smlabb	r4, r6, r1, r4
 8024ff8:	fb11 3305 	smlabb	r3, r1, r5, r3
 8024ffc:	9902      	ldr	r1, [sp, #8]
 8024ffe:	4291      	cmp	r1, r2
 8025000:	f340 80cd 	ble.w	802519e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x326>
 8025004:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8025008:	f10c 0c02 	add.w	ip, ip, #2
 802500c:	8885      	ldrh	r5, [r0, #4]
 802500e:	88c1      	ldrh	r1, [r0, #6]
 8025010:	fb15 4402 	smlabb	r4, r5, r2, r4
 8025014:	fb12 3301 	smlabb	r3, r2, r1, r3
 8025018:	9a02      	ldr	r2, [sp, #8]
 802501a:	4562      	cmp	r2, ip
 802501c:	f340 80c5 	ble.w	80251aa <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x332>
 8025020:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8025024:	300c      	adds	r0, #12
 8025026:	f830 5c04 	ldrh.w	r5, [r0, #-4]
 802502a:	f830 1c02 	ldrh.w	r1, [r0, #-2]
 802502e:	fb15 4402 	smlabb	r4, r5, r2, r4
 8025032:	fb12 3301 	smlabb	r3, r2, r1, r3
 8025036:	9a00      	ldr	r2, [sp, #0]
 8025038:	f85b 6c08 	ldr.w	r6, [fp, #-8]
 802503c:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 8025040:	f85a 1c08 	ldr.w	r1, [sl, #-8]
 8025044:	2a00      	cmp	r2, #0
 8025046:	f340 809b 	ble.w	8025180 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x308>
 802504a:	0064      	lsls	r4, r4, #1
 802504c:	fb54 1406 	smmla	r4, r4, r6, r1
 8025050:	4114      	asrs	r4, r2
 8025052:	f304 0407 	ssat	r4, #8, r4
 8025056:	9a01      	ldr	r2, [sp, #4]
 8025058:	f802 4c02 	strb.w	r4, [r2, #-2]
 802505c:	9a00      	ldr	r2, [sp, #0]
 802505e:	f932 6c02 	ldrsh.w	r6, [r2, #-2]
 8025062:	2e00      	cmp	r6, #0
 8025064:	dd79      	ble.n	802515a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e2>
 8025066:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 802506a:	005b      	lsls	r3, r3, #1
 802506c:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 8025070:	fb53 5304 	smmla	r3, r3, r4, r5
 8025074:	4133      	asrs	r3, r6
 8025076:	f303 0307 	ssat	r3, #8, r3
 802507a:	9a01      	ldr	r2, [sp, #4]
 802507c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8025080:	3202      	adds	r2, #2
 8025082:	9b03      	ldr	r3, [sp, #12]
 8025084:	f10b 0b08 	add.w	fp, fp, #8
 8025088:	f10a 0a08 	add.w	sl, sl, #8
 802508c:	9201      	str	r2, [sp, #4]
 802508e:	3308      	adds	r3, #8
 8025090:	9a00      	ldr	r2, [sp, #0]
 8025092:	9303      	str	r3, [sp, #12]
 8025094:	3204      	adds	r2, #4
 8025096:	9200      	str	r2, [sp, #0]
 8025098:	9a06      	ldr	r2, [sp, #24]
 802509a:	429a      	cmp	r2, r3
 802509c:	f47f af21 	bne.w	8024ee2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6a>
 80250a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80250a2:	991d      	ldr	r1, [sp, #116]	; 0x74
 80250a4:	3301      	adds	r3, #1
 80250a6:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80250aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80250ac:	00da      	lsls	r2, r3, #3
 80250ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80250b2:	931a      	str	r3, [sp, #104]	; 0x68
 80250b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80250b6:	4413      	add	r3, r2
 80250b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80250ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80250bc:	4413      	add	r3, r2
 80250be:	931b      	str	r3, [sp, #108]	; 0x6c
 80250c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80250c2:	4413      	add	r3, r2
 80250c4:	931c      	str	r3, [sp, #112]	; 0x70
 80250c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80250c8:	07db      	lsls	r3, r3, #31
 80250ca:	d542      	bpl.n	8025152 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2da>
 80250cc:	9a02      	ldr	r2, [sp, #8]
 80250ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80250d0:	0892      	lsrs	r2, r2, #2
 80250d2:	681b      	ldr	r3, [r3, #0]
 80250d4:	d016      	beq.n	8025104 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x28c>
 80250d6:	1e56      	subs	r6, r2, #1
 80250d8:	9905      	ldr	r1, [sp, #20]
 80250da:	b2b6      	uxth	r6, r6
 80250dc:	3601      	adds	r6, #1
 80250de:	00f6      	lsls	r6, r6, #3
 80250e0:	1987      	adds	r7, r0, r6
 80250e2:	6805      	ldr	r5, [r0, #0]
 80250e4:	3008      	adds	r0, #8
 80250e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80250ea:	f8d1 c000 	ldr.w	ip, [r1]
 80250ee:	fb25 330c 	smlad	r3, r5, ip, r3
 80250f2:	684d      	ldr	r5, [r1, #4]
 80250f4:	3108      	adds	r1, #8
 80250f6:	fb22 3305 	smlad	r3, r2, r5, r3
 80250fa:	42b8      	cmp	r0, r7
 80250fc:	d1f1      	bne.n	80250e2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x26a>
 80250fe:	9a05      	ldr	r2, [sp, #20]
 8025100:	4432      	add	r2, r6
 8025102:	9205      	str	r2, [sp, #20]
 8025104:	9a02      	ldr	r2, [sp, #8]
 8025106:	f012 0203 	ands.w	r2, r2, #3
 802510a:	d010      	beq.n	802512e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2b6>
 802510c:	9e05      	ldr	r6, [sp, #20]
 802510e:	2a01      	cmp	r2, #1
 8025110:	8801      	ldrh	r1, [r0, #0]
 8025112:	8835      	ldrh	r5, [r6, #0]
 8025114:	fb15 3301 	smlabb	r3, r5, r1, r3
 8025118:	d009      	beq.n	802512e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2b6>
 802511a:	8875      	ldrh	r5, [r6, #2]
 802511c:	2a02      	cmp	r2, #2
 802511e:	8841      	ldrh	r1, [r0, #2]
 8025120:	fb15 3301 	smlabb	r3, r5, r1, r3
 8025124:	d003      	beq.n	802512e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2b6>
 8025126:	8881      	ldrh	r1, [r0, #4]
 8025128:	88b2      	ldrh	r2, [r6, #4]
 802512a:	fb11 3302 	smlabb	r3, r1, r2, r3
 802512e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8025130:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8025132:	f9b2 1000 	ldrsh.w	r1, [r2]
 8025136:	1c62      	adds	r2, r4, #1
 8025138:	6805      	ldr	r5, [r0, #0]
 802513a:	2900      	cmp	r1, #0
 802513c:	981c      	ldr	r0, [sp, #112]	; 0x70
 802513e:	6800      	ldr	r0, [r0, #0]
 8025140:	dd35      	ble.n	80251ae <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x336>
 8025142:	005b      	lsls	r3, r3, #1
 8025144:	fb53 0305 	smmla	r3, r3, r5, r0
 8025148:	410b      	asrs	r3, r1
 802514a:	f303 0307 	ssat	r3, #8, r3
 802514e:	7023      	strb	r3, [r4, #0]
 8025150:	4614      	mov	r4, r2
 8025152:	4620      	mov	r0, r4
 8025154:	b00f      	add	sp, #60	; 0x3c
 8025156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802515a:	f1c6 0601 	rsb	r6, r6, #1
 802515e:	40b3      	lsls	r3, r6
 8025160:	f303 031f 	ssat	r3, #32, r3
 8025164:	f85b 2c04 	ldr.w	r2, [fp, #-4]
 8025168:	fb53 f212 	smmulr	r2, r3, r2
 802516c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 8025170:	441a      	add	r2, r3
 8025172:	f302 0207 	ssat	r2, #8, r2
 8025176:	9b01      	ldr	r3, [sp, #4]
 8025178:	f803 2c01 	strb.w	r2, [r3, #-1]
 802517c:	461a      	mov	r2, r3
 802517e:	e77f      	b.n	8025080 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x208>
 8025180:	f1c2 0201 	rsb	r2, r2, #1
 8025184:	fa04 f202 	lsl.w	r2, r4, r2
 8025188:	f302 021f 	ssat	r2, #32, r2
 802518c:	fb52 f216 	smmulr	r2, r2, r6
 8025190:	440a      	add	r2, r1
 8025192:	f302 0207 	ssat	r2, #8, r2
 8025196:	9901      	ldr	r1, [sp, #4]
 8025198:	f801 2c02 	strb.w	r2, [r1, #-2]
 802519c:	e75e      	b.n	802505c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e4>
 802519e:	3004      	adds	r0, #4
 80251a0:	e749      	b.n	8025036 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 80251a2:	9f05      	ldr	r7, [sp, #20]
 80251a4:	f04f 0c00 	mov.w	ip, #0
 80251a8:	e6f2      	b.n	8024f90 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x118>
 80251aa:	3008      	adds	r0, #8
 80251ac:	e743      	b.n	8025036 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 80251ae:	f1c1 0101 	rsb	r1, r1, #1
 80251b2:	408b      	lsls	r3, r1
 80251b4:	f303 031f 	ssat	r3, #32, r3
 80251b8:	fb53 f315 	smmulr	r3, r3, r5
 80251bc:	4403      	add	r3, r0
 80251be:	f303 0307 	ssat	r3, #8, r3
 80251c2:	7023      	strb	r3, [r4, #0]
 80251c4:	4614      	mov	r4, r2
 80251c6:	4620      	mov	r0, r4
 80251c8:	b00f      	add	sp, #60	; 0x3c
 80251ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251ce:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80251d0:	e77a      	b.n	80250c8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x250>
 80251d2:	bf00      	nop

080251d4 <st_int8_avepool>:
 80251d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251d8:	b099      	sub	sp, #100	; 0x64
 80251da:	4615      	mov	r5, r2
 80251dc:	eec0 4a20 	vdiv.f32	s9, s0, s1
 80251e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80251e2:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 80251e6:	f8bd 40a8 	ldrh.w	r4, [sp, #168]	; 0xa8
 80251ea:	9012      	str	r0, [sp, #72]	; 0x48
 80251ec:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 80251f0:	9109      	str	r1, [sp, #36]	; 0x24
 80251f2:	9015      	str	r0, [sp, #84]	; 0x54
 80251f4:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	; 0xa4
 80251f8:	9416      	str	r4, [sp, #88]	; 0x58
 80251fa:	900e      	str	r0, [sp, #56]	; 0x38
 80251fc:	f99d 00ac 	ldrsb.w	r0, [sp, #172]	; 0xac
 8025200:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8025204:	ee03 0a90 	vmov	s7, r0
 8025208:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 802520c:	f99d 00b0 	ldrsb.w	r0, [sp, #176]	; 0xb0
 8025210:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8025214:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8025218:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 802521c:	9311      	str	r3, [sp, #68]	; 0x44
 802521e:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8025222:	2c00      	cmp	r4, #0
 8025224:	f000 80dd 	beq.w	80253e2 <st_int8_avepool+0x20e>
 8025228:	1a89      	subs	r1, r1, r2
 802522a:	eeb4 0a60 	vcmp.f32	s0, s1
 802522e:	4252      	negs	r2, r2
 8025230:	425b      	negs	r3, r3
 8025232:	b289      	uxth	r1, r1
 8025234:	ee04 0a10 	vmov	s8, r0
 8025238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802523c:	f04f 0000 	mov.w	r0, #0
 8025240:	b29b      	uxth	r3, r3
 8025242:	9113      	str	r1, [sp, #76]	; 0x4c
 8025244:	b291      	uxth	r1, r2
 8025246:	9014      	str	r0, [sp, #80]	; 0x50
 8025248:	9317      	str	r3, [sp, #92]	; 0x5c
 802524a:	4602      	mov	r2, r0
 802524c:	462b      	mov	r3, r5
 802524e:	9101      	str	r1, [sp, #4]
 8025250:	bf18      	it	ne
 8025252:	4603      	movne	r3, r0
 8025254:	fb05 fb07 	mul.w	fp, r5, r7
 8025258:	bf08      	it	eq
 802525a:	2301      	moveq	r3, #1
 802525c:	ee13 1a90 	vmov	r1, s7
 8025260:	ee14 0a10 	vmov	r0, s8
 8025264:	ed9f 3a6d 	vldr	s6, [pc, #436]	; 802541c <st_int8_avepool+0x248>
 8025268:	46da      	mov	sl, fp
 802526a:	46b9      	mov	r9, r7
 802526c:	4281      	cmp	r1, r0
 802526e:	bf14      	ite	ne
 8025270:	2300      	movne	r3, #0
 8025272:	f003 0301 	andeq.w	r3, r3, #1
 8025276:	9307      	str	r3, [sp, #28]
 8025278:	990e      	ldr	r1, [sp, #56]	; 0x38
 802527a:	2900      	cmp	r1, #0
 802527c:	f000 809e 	beq.w	80253bc <st_int8_avepool+0x1e8>
 8025280:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8025282:	fb01 f202 	mul.w	r2, r1, r2
 8025286:	9d01      	ldr	r5, [sp, #4]
 8025288:	2400      	movs	r4, #0
 802528a:	1e43      	subs	r3, r0, #1
 802528c:	920f      	str	r2, [sp, #60]	; 0x3c
 802528e:	fa0f fb85 	sxth.w	fp, r5
 8025292:	9a03      	ldr	r2, [sp, #12]
 8025294:	1b5b      	subs	r3, r3, r5
 8025296:	b201      	sxth	r1, r0
 8025298:	fb02 f20b 	mul.w	r2, r2, fp
 802529c:	464f      	mov	r7, r9
 802529e:	b29b      	uxth	r3, r3
 80252a0:	9108      	str	r1, [sp, #32]
 80252a2:	9210      	str	r2, [sp, #64]	; 0x40
 80252a4:	4622      	mov	r2, r4
 80252a6:	3301      	adds	r3, #1
 80252a8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80252aa:	940d      	str	r4, [sp, #52]	; 0x34
 80252ac:	4699      	mov	r9, r3
 80252ae:	910c      	str	r1, [sp, #48]	; 0x30
 80252b0:	2f00      	cmp	r7, #0
 80252b2:	d075      	beq.n	80253a0 <st_int8_avepool+0x1cc>
 80252b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80252b6:	eeb8 5ae3 	vcvt.f32.s32	s10, s7
 80252ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80252bc:	eef8 5ac4 	vcvt.f32.s32	s11, s8
 80252c0:	441a      	add	r2, r3
 80252c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80252c4:	fa0f f881 	sxth.w	r8, r1
 80252c8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80252cc:	185d      	adds	r5, r3, r1
 80252ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80252d0:	2100      	movs	r1, #0
 80252d2:	fb07 f202 	mul.w	r2, r7, r2
 80252d6:	4443      	add	r3, r8
 80252d8:	b22d      	sxth	r5, r5
 80252da:	9105      	str	r1, [sp, #20]
 80252dc:	fb07 f303 	mul.w	r3, r7, r3
 80252e0:	9206      	str	r2, [sp, #24]
 80252e2:	930a      	str	r3, [sp, #40]	; 0x28
 80252e4:	9104      	str	r1, [sp, #16]
 80252e6:	9b08      	ldr	r3, [sp, #32]
 80252e8:	459b      	cmp	fp, r3
 80252ea:	f280 8090 	bge.w	802540e <st_int8_avepool+0x23a>
 80252ee:	9b04      	ldr	r3, [sp, #16]
 80252f0:	2400      	movs	r4, #0
 80252f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80252f4:	46a4      	mov	ip, r4
 80252f6:	46a6      	mov	lr, r4
 80252f8:	189e      	adds	r6, r3, r2
 80252fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80252fc:	441e      	add	r6, r3
 80252fe:	45a8      	cmp	r8, r5
 8025300:	da1b      	bge.n	802533a <st_int8_avepool+0x166>
 8025302:	9b01      	ldr	r3, [sp, #4]
 8025304:	9902      	ldr	r1, [sp, #8]
 8025306:	191a      	adds	r2, r3, r4
 8025308:	eb0b 0304 	add.w	r3, fp, r4
 802530c:	43d2      	mvns	r2, r2
 802530e:	4299      	cmp	r1, r3
 8025310:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8025314:	dd11      	ble.n	802533a <st_int8_avepool+0x166>
 8025316:	4631      	mov	r1, r6
 8025318:	4643      	mov	r3, r8
 802531a:	0418      	lsls	r0, r3, #16
 802531c:	d408      	bmi.n	8025330 <st_int8_avepool+0x15c>
 802531e:	b13a      	cbz	r2, 8025330 <st_int8_avepool+0x15c>
 8025320:	9803      	ldr	r0, [sp, #12]
 8025322:	4298      	cmp	r0, r3
 8025324:	dd04      	ble.n	8025330 <st_int8_avepool+0x15c>
 8025326:	f991 0000 	ldrsb.w	r0, [r1]
 802532a:	f10c 0c01 	add.w	ip, ip, #1
 802532e:	4486      	add	lr, r0
 8025330:	3301      	adds	r3, #1
 8025332:	4439      	add	r1, r7
 8025334:	b218      	sxth	r0, r3
 8025336:	4285      	cmp	r5, r0
 8025338:	dcef      	bgt.n	802531a <st_int8_avepool+0x146>
 802533a:	3401      	adds	r4, #1
 802533c:	4456      	add	r6, sl
 802533e:	45a1      	cmp	r9, r4
 8025340:	d1dd      	bne.n	80252fe <st_int8_avepool+0x12a>
 8025342:	9b07      	ldr	r3, [sp, #28]
 8025344:	2b00      	cmp	r3, #0
 8025346:	d14f      	bne.n	80253e8 <st_int8_avepool+0x214>
 8025348:	ee07 ea90 	vmov	s15, lr
 802534c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8025350:	ee07 ca90 	vmov	s15, ip
 8025354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8025358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802535c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8025360:	eef0 6a65 	vmov.f32	s13, s11
 8025364:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8025368:	eee7 6aa4 	vfma.f32	s13, s15, s9
 802536c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8025370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025374:	fe26 7a07 	vselge.f32	s14, s12, s14
 8025378:	ee77 7a26 	vadd.f32	s15, s14, s13
 802537c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025380:	ee17 3a90 	vmov	r3, s15
 8025384:	f303 0307 	ssat	r3, #8, r3
 8025388:	9906      	ldr	r1, [sp, #24]
 802538a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802538c:	440a      	add	r2, r1
 802538e:	9904      	ldr	r1, [sp, #16]
 8025390:	5453      	strb	r3, [r2, r1]
 8025392:	9b05      	ldr	r3, [sp, #20]
 8025394:	3301      	adds	r3, #1
 8025396:	b21b      	sxth	r3, r3
 8025398:	42bb      	cmp	r3, r7
 802539a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 802539e:	dba2      	blt.n	80252e6 <st_int8_avepool+0x112>
 80253a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80253a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80253a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80253a6:	3201      	adds	r2, #1
 80253a8:	440b      	add	r3, r1
 80253aa:	b212      	sxth	r2, r2
 80253ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80253ae:	b29b      	uxth	r3, r3
 80253b0:	920d      	str	r2, [sp, #52]	; 0x34
 80253b2:	428a      	cmp	r2, r1
 80253b4:	930c      	str	r3, [sp, #48]	; 0x30
 80253b6:	f6ff af7b 	blt.w	80252b0 <st_int8_avepool+0xdc>
 80253ba:	46b9      	mov	r9, r7
 80253bc:	9b01      	ldr	r3, [sp, #4]
 80253be:	9815      	ldr	r0, [sp, #84]	; 0x54
 80253c0:	461a      	mov	r2, r3
 80253c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80253c4:	9914      	ldr	r1, [sp, #80]	; 0x50
 80253c6:	4403      	add	r3, r0
 80253c8:	4402      	add	r2, r0
 80253ca:	3101      	adds	r1, #1
 80253cc:	b29b      	uxth	r3, r3
 80253ce:	b209      	sxth	r1, r1
 80253d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80253d2:	b292      	uxth	r2, r2
 80253d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80253d6:	9201      	str	r2, [sp, #4]
 80253d8:	460a      	mov	r2, r1
 80253da:	428b      	cmp	r3, r1
 80253dc:	9114      	str	r1, [sp, #80]	; 0x50
 80253de:	f73f af4b 	bgt.w	8025278 <st_int8_avepool+0xa4>
 80253e2:	b019      	add	sp, #100	; 0x64
 80253e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253e8:	f1be 0f00 	cmp.w	lr, #0
 80253ec:	db04      	blt.n	80253f8 <st_int8_avepool+0x224>
 80253ee:	eb0e 0e6c 	add.w	lr, lr, ip, asr #1
 80253f2:	fb9e f3fc 	sdiv	r3, lr, ip
 80253f6:	e7c5      	b.n	8025384 <st_int8_avepool+0x1b0>
 80253f8:	f1bc 0f00 	cmp.w	ip, #0
 80253fc:	4663      	mov	r3, ip
 80253fe:	bfb8      	it	lt
 8025400:	f10c 0301 	addlt.w	r3, ip, #1
 8025404:	ebae 0363 	sub.w	r3, lr, r3, asr #1
 8025408:	fb93 f3fc 	sdiv	r3, r3, ip
 802540c:	e7ba      	b.n	8025384 <st_int8_avepool+0x1b0>
 802540e:	9b07      	ldr	r3, [sp, #28]
 8025410:	b913      	cbnz	r3, 8025418 <st_int8_avepool+0x244>
 8025412:	eef0 7a43 	vmov.f32	s15, s6
 8025416:	e7a1      	b.n	802535c <st_int8_avepool+0x188>
 8025418:	deff      	udf	#255	; 0xff
 802541a:	bf00      	nop
 802541c:	7fc00000 	.word	0x7fc00000

08025420 <ai_array_to_buffer_fmt>:
 8025420:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8025424:	2b02      	cmp	r3, #2
 8025426:	d02e      	beq.n	8025486 <ai_array_to_buffer_fmt+0x66>
 8025428:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 802542c:	4a1a      	ldr	r2, [pc, #104]	; (8025498 <ai_array_to_buffer_fmt+0x78>)
 802542e:	4293      	cmp	r3, r2
 8025430:	d00e      	beq.n	8025450 <ai_array_to_buffer_fmt+0x30>
 8025432:	dd11      	ble.n	8025458 <ai_array_to_buffer_fmt+0x38>
 8025434:	4a19      	ldr	r2, [pc, #100]	; (802549c <ai_array_to_buffer_fmt+0x7c>)
 8025436:	4293      	cmp	r3, r2
 8025438:	d00a      	beq.n	8025450 <ai_array_to_buffer_fmt+0x30>
 802543a:	dd18      	ble.n	802546e <ai_array_to_buffer_fmt+0x4e>
 802543c:	4a18      	ldr	r2, [pc, #96]	; (80254a0 <ai_array_to_buffer_fmt+0x80>)
 802543e:	4293      	cmp	r3, r2
 8025440:	d006      	beq.n	8025450 <ai_array_to_buffer_fmt+0x30>
 8025442:	4a18      	ldr	r2, [pc, #96]	; (80254a4 <ai_array_to_buffer_fmt+0x84>)
 8025444:	4293      	cmp	r3, r2
 8025446:	d003      	beq.n	8025450 <ai_array_to_buffer_fmt+0x30>
 8025448:	4a17      	ldr	r2, [pc, #92]	; (80254a8 <ai_array_to_buffer_fmt+0x88>)
 802544a:	4293      	cmp	r3, r2
 802544c:	d000      	beq.n	8025450 <ai_array_to_buffer_fmt+0x30>
 802544e:	2340      	movs	r3, #64	; 0x40
 8025450:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8025454:	4318      	orrs	r0, r3
 8025456:	4770      	bx	lr
 8025458:	4a14      	ldr	r2, [pc, #80]	; (80254ac <ai_array_to_buffer_fmt+0x8c>)
 802545a:	4293      	cmp	r3, r2
 802545c:	d0f8      	beq.n	8025450 <ai_array_to_buffer_fmt+0x30>
 802545e:	dd06      	ble.n	802546e <ai_array_to_buffer_fmt+0x4e>
 8025460:	4a13      	ldr	r2, [pc, #76]	; (80254b0 <ai_array_to_buffer_fmt+0x90>)
 8025462:	4293      	cmp	r3, r2
 8025464:	d0f4      	beq.n	8025450 <ai_array_to_buffer_fmt+0x30>
 8025466:	320f      	adds	r2, #15
 8025468:	4293      	cmp	r3, r2
 802546a:	d0f1      	beq.n	8025450 <ai_array_to_buffer_fmt+0x30>
 802546c:	e7ef      	b.n	802544e <ai_array_to_buffer_fmt+0x2e>
 802546e:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8025472:	4293      	cmp	r3, r2
 8025474:	d0ec      	beq.n	8025450 <ai_array_to_buffer_fmt+0x30>
 8025476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802547a:	4293      	cmp	r3, r2
 802547c:	d1e7      	bne.n	802544e <ai_array_to_buffer_fmt+0x2e>
 802547e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8025482:	4318      	orrs	r0, r3
 8025484:	4770      	bx	lr
 8025486:	4b0b      	ldr	r3, [pc, #44]	; (80254b4 <ai_array_to_buffer_fmt+0x94>)
 8025488:	4003      	ands	r3, r0
 802548a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 802548e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8025492:	4318      	orrs	r0, r3
 8025494:	4770      	bx	lr
 8025496:	bf00      	nop
 8025498:	00060440 	.word	0x00060440
 802549c:	00840447 	.word	0x00840447
 80254a0:	0084084f 	.word	0x0084084f
 80254a4:	01821040 	.word	0x01821040
 80254a8:	00840840 	.word	0x00840840
 80254ac:	00040447 	.word	0x00040447
 80254b0:	00040840 	.word	0x00040840
 80254b4:	00803fff 	.word	0x00803fff

080254b8 <ai_array_get_byte_size>:
 80254b8:	b1e1      	cbz	r1, 80254f4 <ai_array_get_byte_size+0x3c>
 80254ba:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80254be:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80254c2:	b410      	push	{r4}
 80254c4:	f3c0 3482 	ubfx	r4, r0, #14, #3
 80254c8:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80254cc:	4423      	add	r3, r4
 80254ce:	2804      	cmp	r0, #4
 80254d0:	fb01 f103 	mul.w	r1, r1, r3
 80254d4:	f101 0107 	add.w	r1, r1, #7
 80254d8:	f021 0107 	bic.w	r1, r1, #7
 80254dc:	fa21 f102 	lsr.w	r1, r1, r2
 80254e0:	d00a      	beq.n	80254f8 <ai_array_get_byte_size+0x40>
 80254e2:	2808      	cmp	r0, #8
 80254e4:	d101      	bne.n	80254ea <ai_array_get_byte_size+0x32>
 80254e6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80254ea:	3107      	adds	r1, #7
 80254ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80254f0:	08c8      	lsrs	r0, r1, #3
 80254f2:	4770      	bx	lr
 80254f4:	4608      	mov	r0, r1
 80254f6:	4770      	bx	lr
 80254f8:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80254fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025500:	3107      	adds	r1, #7
 8025502:	08c8      	lsrs	r0, r1, #3
 8025504:	4770      	bx	lr
 8025506:	bf00      	nop

08025508 <core_get_broadcasted_shape>:
 8025508:	b4f0      	push	{r4, r5, r6, r7}
 802550a:	680c      	ldr	r4, [r1, #0]
 802550c:	6803      	ldr	r3, [r0, #0]
 802550e:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8025512:	f364 231f 	bfi	r3, r4, #8, #24
 8025516:	6003      	str	r3, [r0, #0]
 8025518:	b184      	cbz	r4, 802553c <core_get_broadcasted_shape+0x34>
 802551a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 802551e:	4423      	add	r3, r4
 8025520:	009b      	lsls	r3, r3, #2
 8025522:	684e      	ldr	r6, [r1, #4]
 8025524:	6855      	ldr	r5, [r2, #4]
 8025526:	58f7      	ldr	r7, [r6, r3]
 8025528:	58ed      	ldr	r5, [r5, r3]
 802552a:	6846      	ldr	r6, [r0, #4]
 802552c:	42bd      	cmp	r5, r7
 802552e:	bf38      	it	cc
 8025530:	463d      	movcc	r5, r7
 8025532:	3c01      	subs	r4, #1
 8025534:	50f5      	str	r5, [r6, r3]
 8025536:	f1a3 0304 	sub.w	r3, r3, #4
 802553a:	d1f2      	bne.n	8025522 <core_get_broadcasted_shape+0x1a>
 802553c:	bcf0      	pop	{r4, r5, r6, r7}
 802553e:	4770      	bx	lr

08025540 <core_compute_offsets>:
 8025540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025544:	680b      	ldr	r3, [r1, #0]
 8025546:	6804      	ldr	r4, [r0, #0]
 8025548:	f3c3 2317 	ubfx	r3, r3, #8, #24
 802554c:	f363 241f 	bfi	r4, r3, #8, #24
 8025550:	6004      	str	r4, [r0, #0]
 8025552:	684b      	ldr	r3, [r1, #4]
 8025554:	6852      	ldr	r2, [r2, #4]
 8025556:	681f      	ldr	r7, [r3, #0]
 8025558:	6811      	ldr	r1, [r2, #0]
 802555a:	685c      	ldr	r4, [r3, #4]
 802555c:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8025560:	1a7d      	subs	r5, r7, r1
 8025562:	689e      	ldr	r6, [r3, #8]
 8025564:	eba7 0e01 	sub.w	lr, r7, r1
 8025568:	bf18      	it	ne
 802556a:	2501      	movne	r5, #1
 802556c:	6891      	ldr	r1, [r2, #8]
 802556e:	ebb4 0c0a 	subs.w	ip, r4, sl
 8025572:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8025576:	68d2      	ldr	r2, [r2, #12]
 8025578:	fabe fe8e 	clz	lr, lr
 802557c:	bf18      	it	ne
 802557e:	f04f 0c01 	movne.w	ip, #1
 8025582:	4554      	cmp	r4, sl
 8025584:	bf14      	ite	ne
 8025586:	f04f 0800 	movne.w	r8, #0
 802558a:	f005 0801 	andeq.w	r8, r5, #1
 802558e:	ebb6 0b01 	subs.w	fp, r6, r1
 8025592:	fb04 f407 	mul.w	r4, r4, r7
 8025596:	ea05 050c 	and.w	r5, r5, ip
 802559a:	6843      	ldr	r3, [r0, #4]
 802559c:	bf18      	it	ne
 802559e:	f04f 0b01 	movne.w	fp, #1
 80255a2:	fb0c fc07 	mul.w	ip, ip, r7
 80255a6:	428e      	cmp	r6, r1
 80255a8:	bf14      	ite	ne
 80255aa:	2100      	movne	r1, #0
 80255ac:	f005 0101 	andeq.w	r1, r5, #1
 80255b0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80255b4:	4591      	cmp	r9, r2
 80255b6:	bf14      	ite	ne
 80255b8:	f04f 0a00 	movne.w	sl, #0
 80255bc:	f00b 0a01 	andeq.w	sl, fp, #1
 80255c0:	ebb9 0202 	subs.w	r2, r9, r2
 80255c4:	fb0b f704 	mul.w	r7, fp, r4
 80255c8:	bf18      	it	ne
 80255ca:	2201      	movne	r2, #1
 80255cc:	f1ba 0f00 	cmp.w	sl, #0
 80255d0:	f8c3 e000 	str.w	lr, [r3]
 80255d4:	eba1 0107 	sub.w	r1, r1, r7
 80255d8:	eba8 030c 	sub.w	r3, r8, ip
 80255dc:	fb04 f406 	mul.w	r4, r4, r6
 80255e0:	bf08      	it	eq
 80255e2:	2500      	moveq	r5, #0
 80255e4:	6846      	ldr	r6, [r0, #4]
 80255e6:	4461      	add	r1, ip
 80255e8:	6073      	str	r3, [r6, #4]
 80255ea:	fb04 5312 	mls	r3, r4, r2, r5
 80255ee:	6842      	ldr	r2, [r0, #4]
 80255f0:	443b      	add	r3, r7
 80255f2:	6091      	str	r1, [r2, #8]
 80255f4:	6842      	ldr	r2, [r0, #4]
 80255f6:	60d3      	str	r3, [r2, #12]
 80255f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080255fc <core_tensor_clone>:
 80255fc:	680b      	ldr	r3, [r1, #0]
 80255fe:	6882      	ldr	r2, [r0, #8]
 8025600:	6003      	str	r3, [r0, #0]
 8025602:	684b      	ldr	r3, [r1, #4]
 8025604:	6043      	str	r3, [r0, #4]
 8025606:	698b      	ldr	r3, [r1, #24]
 8025608:	6183      	str	r3, [r0, #24]
 802560a:	688b      	ldr	r3, [r1, #8]
 802560c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8025610:	f363 221f 	bfi	r2, r3, #8, #24
 8025614:	b410      	push	{r4}
 8025616:	6082      	str	r2, [r0, #8]
 8025618:	b15b      	cbz	r3, 8025632 <core_tensor_clone+0x36>
 802561a:	2300      	movs	r3, #0
 802561c:	68cc      	ldr	r4, [r1, #12]
 802561e:	68c2      	ldr	r2, [r0, #12]
 8025620:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8025624:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8025628:	3301      	adds	r3, #1
 802562a:	6882      	ldr	r2, [r0, #8]
 802562c:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8025630:	d3f4      	bcc.n	802561c <core_tensor_clone+0x20>
 8025632:	690b      	ldr	r3, [r1, #16]
 8025634:	6902      	ldr	r2, [r0, #16]
 8025636:	f3c3 2317 	ubfx	r3, r3, #8, #24
 802563a:	f363 221f 	bfi	r2, r3, #8, #24
 802563e:	6102      	str	r2, [r0, #16]
 8025640:	b15b      	cbz	r3, 802565a <core_tensor_clone+0x5e>
 8025642:	2300      	movs	r3, #0
 8025644:	694c      	ldr	r4, [r1, #20]
 8025646:	6942      	ldr	r2, [r0, #20]
 8025648:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 802564c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8025650:	3301      	adds	r3, #1
 8025652:	6902      	ldr	r2, [r0, #16]
 8025654:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8025658:	d3f4      	bcc.n	8025644 <core_tensor_clone+0x48>
 802565a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802565e:	4770      	bx	lr

08025660 <core_array_clone>:
 8025660:	b410      	push	{r4}
 8025662:	4604      	mov	r4, r0
 8025664:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8025666:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 802566a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802566e:	4770      	bx	lr

08025670 <arm_copy_q7>:
 8025670:	b470      	push	{r4, r5, r6}
 8025672:	0896      	lsrs	r6, r2, #2
 8025674:	d01b      	beq.n	80256ae <arm_copy_q7+0x3e>
 8025676:	00b6      	lsls	r6, r6, #2
 8025678:	460b      	mov	r3, r1
 802567a:	1985      	adds	r5, r0, r6
 802567c:	f850 4b04 	ldr.w	r4, [r0], #4
 8025680:	42a8      	cmp	r0, r5
 8025682:	f843 4b04 	str.w	r4, [r3], #4
 8025686:	d1f9      	bne.n	802567c <arm_copy_q7+0xc>
 8025688:	4431      	add	r1, r6
 802568a:	f012 0203 	ands.w	r2, r2, #3
 802568e:	d00c      	beq.n	80256aa <arm_copy_q7+0x3a>
 8025690:	f995 3000 	ldrsb.w	r3, [r5]
 8025694:	2a01      	cmp	r2, #1
 8025696:	700b      	strb	r3, [r1, #0]
 8025698:	d007      	beq.n	80256aa <arm_copy_q7+0x3a>
 802569a:	f995 3001 	ldrsb.w	r3, [r5, #1]
 802569e:	2a02      	cmp	r2, #2
 80256a0:	704b      	strb	r3, [r1, #1]
 80256a2:	d002      	beq.n	80256aa <arm_copy_q7+0x3a>
 80256a4:	f995 3002 	ldrsb.w	r3, [r5, #2]
 80256a8:	708b      	strb	r3, [r1, #2]
 80256aa:	bc70      	pop	{r4, r5, r6}
 80256ac:	4770      	bx	lr
 80256ae:	4605      	mov	r5, r0
 80256b0:	e7eb      	b.n	802568a <arm_copy_q7+0x1a>
 80256b2:	bf00      	nop

080256b4 <arm_fill_q15>:
 80256b4:	b470      	push	{r4, r5, r6}
 80256b6:	b285      	uxth	r5, r0
 80256b8:	0896      	lsrs	r6, r2, #2
 80256ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80256be:	d009      	beq.n	80256d4 <arm_fill_q15+0x20>
 80256c0:	460b      	mov	r3, r1
 80256c2:	4634      	mov	r4, r6
 80256c4:	3c01      	subs	r4, #1
 80256c6:	601d      	str	r5, [r3, #0]
 80256c8:	605d      	str	r5, [r3, #4]
 80256ca:	f103 0308 	add.w	r3, r3, #8
 80256ce:	d1f9      	bne.n	80256c4 <arm_fill_q15+0x10>
 80256d0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80256d4:	f012 0203 	ands.w	r2, r2, #3
 80256d8:	d006      	beq.n	80256e8 <arm_fill_q15+0x34>
 80256da:	2a01      	cmp	r2, #1
 80256dc:	8008      	strh	r0, [r1, #0]
 80256de:	d003      	beq.n	80256e8 <arm_fill_q15+0x34>
 80256e0:	2a02      	cmp	r2, #2
 80256e2:	8048      	strh	r0, [r1, #2]
 80256e4:	bf18      	it	ne
 80256e6:	8088      	strhne	r0, [r1, #4]
 80256e8:	bc70      	pop	{r4, r5, r6}
 80256ea:	4770      	bx	lr

080256ec <__libc_init_array>:
 80256ec:	b570      	push	{r4, r5, r6, lr}
 80256ee:	4d0d      	ldr	r5, [pc, #52]	; (8025724 <__libc_init_array+0x38>)
 80256f0:	4c0d      	ldr	r4, [pc, #52]	; (8025728 <__libc_init_array+0x3c>)
 80256f2:	1b64      	subs	r4, r4, r5
 80256f4:	10a4      	asrs	r4, r4, #2
 80256f6:	2600      	movs	r6, #0
 80256f8:	42a6      	cmp	r6, r4
 80256fa:	d109      	bne.n	8025710 <__libc_init_array+0x24>
 80256fc:	4d0b      	ldr	r5, [pc, #44]	; (802572c <__libc_init_array+0x40>)
 80256fe:	4c0c      	ldr	r4, [pc, #48]	; (8025730 <__libc_init_array+0x44>)
 8025700:	f003 fa28 	bl	8028b54 <_init>
 8025704:	1b64      	subs	r4, r4, r5
 8025706:	10a4      	asrs	r4, r4, #2
 8025708:	2600      	movs	r6, #0
 802570a:	42a6      	cmp	r6, r4
 802570c:	d105      	bne.n	802571a <__libc_init_array+0x2e>
 802570e:	bd70      	pop	{r4, r5, r6, pc}
 8025710:	f855 3b04 	ldr.w	r3, [r5], #4
 8025714:	4798      	blx	r3
 8025716:	3601      	adds	r6, #1
 8025718:	e7ee      	b.n	80256f8 <__libc_init_array+0xc>
 802571a:	f855 3b04 	ldr.w	r3, [r5], #4
 802571e:	4798      	blx	r3
 8025720:	3601      	adds	r6, #1
 8025722:	e7f2      	b.n	802570a <__libc_init_array+0x1e>
 8025724:	080c4028 	.word	0x080c4028
 8025728:	080c4028 	.word	0x080c4028
 802572c:	080c4028 	.word	0x080c4028
 8025730:	080c402c 	.word	0x080c402c

08025734 <malloc>:
 8025734:	4b02      	ldr	r3, [pc, #8]	; (8025740 <malloc+0xc>)
 8025736:	4601      	mov	r1, r0
 8025738:	6818      	ldr	r0, [r3, #0]
 802573a:	f000 b88d 	b.w	8025858 <_malloc_r>
 802573e:	bf00      	nop
 8025740:	240074fc 	.word	0x240074fc

08025744 <free>:
 8025744:	4b02      	ldr	r3, [pc, #8]	; (8025750 <free+0xc>)
 8025746:	4601      	mov	r1, r0
 8025748:	6818      	ldr	r0, [r3, #0]
 802574a:	f000 b819 	b.w	8025780 <_free_r>
 802574e:	bf00      	nop
 8025750:	240074fc 	.word	0x240074fc

08025754 <memcpy>:
 8025754:	440a      	add	r2, r1
 8025756:	4291      	cmp	r1, r2
 8025758:	f100 33ff 	add.w	r3, r0, #4294967295
 802575c:	d100      	bne.n	8025760 <memcpy+0xc>
 802575e:	4770      	bx	lr
 8025760:	b510      	push	{r4, lr}
 8025762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025766:	f803 4f01 	strb.w	r4, [r3, #1]!
 802576a:	4291      	cmp	r1, r2
 802576c:	d1f9      	bne.n	8025762 <memcpy+0xe>
 802576e:	bd10      	pop	{r4, pc}

08025770 <memset>:
 8025770:	4402      	add	r2, r0
 8025772:	4603      	mov	r3, r0
 8025774:	4293      	cmp	r3, r2
 8025776:	d100      	bne.n	802577a <memset+0xa>
 8025778:	4770      	bx	lr
 802577a:	f803 1b01 	strb.w	r1, [r3], #1
 802577e:	e7f9      	b.n	8025774 <memset+0x4>

08025780 <_free_r>:
 8025780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025782:	2900      	cmp	r1, #0
 8025784:	d044      	beq.n	8025810 <_free_r+0x90>
 8025786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802578a:	9001      	str	r0, [sp, #4]
 802578c:	2b00      	cmp	r3, #0
 802578e:	f1a1 0404 	sub.w	r4, r1, #4
 8025792:	bfb8      	it	lt
 8025794:	18e4      	addlt	r4, r4, r3
 8025796:	f001 fb55 	bl	8026e44 <__malloc_lock>
 802579a:	4a1e      	ldr	r2, [pc, #120]	; (8025814 <_free_r+0x94>)
 802579c:	9801      	ldr	r0, [sp, #4]
 802579e:	6813      	ldr	r3, [r2, #0]
 80257a0:	b933      	cbnz	r3, 80257b0 <_free_r+0x30>
 80257a2:	6063      	str	r3, [r4, #4]
 80257a4:	6014      	str	r4, [r2, #0]
 80257a6:	b003      	add	sp, #12
 80257a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80257ac:	f001 bb50 	b.w	8026e50 <__malloc_unlock>
 80257b0:	42a3      	cmp	r3, r4
 80257b2:	d908      	bls.n	80257c6 <_free_r+0x46>
 80257b4:	6825      	ldr	r5, [r4, #0]
 80257b6:	1961      	adds	r1, r4, r5
 80257b8:	428b      	cmp	r3, r1
 80257ba:	bf01      	itttt	eq
 80257bc:	6819      	ldreq	r1, [r3, #0]
 80257be:	685b      	ldreq	r3, [r3, #4]
 80257c0:	1949      	addeq	r1, r1, r5
 80257c2:	6021      	streq	r1, [r4, #0]
 80257c4:	e7ed      	b.n	80257a2 <_free_r+0x22>
 80257c6:	461a      	mov	r2, r3
 80257c8:	685b      	ldr	r3, [r3, #4]
 80257ca:	b10b      	cbz	r3, 80257d0 <_free_r+0x50>
 80257cc:	42a3      	cmp	r3, r4
 80257ce:	d9fa      	bls.n	80257c6 <_free_r+0x46>
 80257d0:	6811      	ldr	r1, [r2, #0]
 80257d2:	1855      	adds	r5, r2, r1
 80257d4:	42a5      	cmp	r5, r4
 80257d6:	d10b      	bne.n	80257f0 <_free_r+0x70>
 80257d8:	6824      	ldr	r4, [r4, #0]
 80257da:	4421      	add	r1, r4
 80257dc:	1854      	adds	r4, r2, r1
 80257de:	42a3      	cmp	r3, r4
 80257e0:	6011      	str	r1, [r2, #0]
 80257e2:	d1e0      	bne.n	80257a6 <_free_r+0x26>
 80257e4:	681c      	ldr	r4, [r3, #0]
 80257e6:	685b      	ldr	r3, [r3, #4]
 80257e8:	6053      	str	r3, [r2, #4]
 80257ea:	4421      	add	r1, r4
 80257ec:	6011      	str	r1, [r2, #0]
 80257ee:	e7da      	b.n	80257a6 <_free_r+0x26>
 80257f0:	d902      	bls.n	80257f8 <_free_r+0x78>
 80257f2:	230c      	movs	r3, #12
 80257f4:	6003      	str	r3, [r0, #0]
 80257f6:	e7d6      	b.n	80257a6 <_free_r+0x26>
 80257f8:	6825      	ldr	r5, [r4, #0]
 80257fa:	1961      	adds	r1, r4, r5
 80257fc:	428b      	cmp	r3, r1
 80257fe:	bf04      	itt	eq
 8025800:	6819      	ldreq	r1, [r3, #0]
 8025802:	685b      	ldreq	r3, [r3, #4]
 8025804:	6063      	str	r3, [r4, #4]
 8025806:	bf04      	itt	eq
 8025808:	1949      	addeq	r1, r1, r5
 802580a:	6021      	streq	r1, [r4, #0]
 802580c:	6054      	str	r4, [r2, #4]
 802580e:	e7ca      	b.n	80257a6 <_free_r+0x26>
 8025810:	b003      	add	sp, #12
 8025812:	bd30      	pop	{r4, r5, pc}
 8025814:	2400a764 	.word	0x2400a764

08025818 <sbrk_aligned>:
 8025818:	b570      	push	{r4, r5, r6, lr}
 802581a:	4e0e      	ldr	r6, [pc, #56]	; (8025854 <sbrk_aligned+0x3c>)
 802581c:	460c      	mov	r4, r1
 802581e:	6831      	ldr	r1, [r6, #0]
 8025820:	4605      	mov	r5, r0
 8025822:	b911      	cbnz	r1, 802582a <sbrk_aligned+0x12>
 8025824:	f000 fcce 	bl	80261c4 <_sbrk_r>
 8025828:	6030      	str	r0, [r6, #0]
 802582a:	4621      	mov	r1, r4
 802582c:	4628      	mov	r0, r5
 802582e:	f000 fcc9 	bl	80261c4 <_sbrk_r>
 8025832:	1c43      	adds	r3, r0, #1
 8025834:	d00a      	beq.n	802584c <sbrk_aligned+0x34>
 8025836:	1cc4      	adds	r4, r0, #3
 8025838:	f024 0403 	bic.w	r4, r4, #3
 802583c:	42a0      	cmp	r0, r4
 802583e:	d007      	beq.n	8025850 <sbrk_aligned+0x38>
 8025840:	1a21      	subs	r1, r4, r0
 8025842:	4628      	mov	r0, r5
 8025844:	f000 fcbe 	bl	80261c4 <_sbrk_r>
 8025848:	3001      	adds	r0, #1
 802584a:	d101      	bne.n	8025850 <sbrk_aligned+0x38>
 802584c:	f04f 34ff 	mov.w	r4, #4294967295
 8025850:	4620      	mov	r0, r4
 8025852:	bd70      	pop	{r4, r5, r6, pc}
 8025854:	2400a768 	.word	0x2400a768

08025858 <_malloc_r>:
 8025858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802585c:	1ccd      	adds	r5, r1, #3
 802585e:	f025 0503 	bic.w	r5, r5, #3
 8025862:	3508      	adds	r5, #8
 8025864:	2d0c      	cmp	r5, #12
 8025866:	bf38      	it	cc
 8025868:	250c      	movcc	r5, #12
 802586a:	2d00      	cmp	r5, #0
 802586c:	4607      	mov	r7, r0
 802586e:	db01      	blt.n	8025874 <_malloc_r+0x1c>
 8025870:	42a9      	cmp	r1, r5
 8025872:	d905      	bls.n	8025880 <_malloc_r+0x28>
 8025874:	230c      	movs	r3, #12
 8025876:	603b      	str	r3, [r7, #0]
 8025878:	2600      	movs	r6, #0
 802587a:	4630      	mov	r0, r6
 802587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025880:	4e2e      	ldr	r6, [pc, #184]	; (802593c <_malloc_r+0xe4>)
 8025882:	f001 fadf 	bl	8026e44 <__malloc_lock>
 8025886:	6833      	ldr	r3, [r6, #0]
 8025888:	461c      	mov	r4, r3
 802588a:	bb34      	cbnz	r4, 80258da <_malloc_r+0x82>
 802588c:	4629      	mov	r1, r5
 802588e:	4638      	mov	r0, r7
 8025890:	f7ff ffc2 	bl	8025818 <sbrk_aligned>
 8025894:	1c43      	adds	r3, r0, #1
 8025896:	4604      	mov	r4, r0
 8025898:	d14d      	bne.n	8025936 <_malloc_r+0xde>
 802589a:	6834      	ldr	r4, [r6, #0]
 802589c:	4626      	mov	r6, r4
 802589e:	2e00      	cmp	r6, #0
 80258a0:	d140      	bne.n	8025924 <_malloc_r+0xcc>
 80258a2:	6823      	ldr	r3, [r4, #0]
 80258a4:	4631      	mov	r1, r6
 80258a6:	4638      	mov	r0, r7
 80258a8:	eb04 0803 	add.w	r8, r4, r3
 80258ac:	f000 fc8a 	bl	80261c4 <_sbrk_r>
 80258b0:	4580      	cmp	r8, r0
 80258b2:	d13a      	bne.n	802592a <_malloc_r+0xd2>
 80258b4:	6821      	ldr	r1, [r4, #0]
 80258b6:	3503      	adds	r5, #3
 80258b8:	1a6d      	subs	r5, r5, r1
 80258ba:	f025 0503 	bic.w	r5, r5, #3
 80258be:	3508      	adds	r5, #8
 80258c0:	2d0c      	cmp	r5, #12
 80258c2:	bf38      	it	cc
 80258c4:	250c      	movcc	r5, #12
 80258c6:	4629      	mov	r1, r5
 80258c8:	4638      	mov	r0, r7
 80258ca:	f7ff ffa5 	bl	8025818 <sbrk_aligned>
 80258ce:	3001      	adds	r0, #1
 80258d0:	d02b      	beq.n	802592a <_malloc_r+0xd2>
 80258d2:	6823      	ldr	r3, [r4, #0]
 80258d4:	442b      	add	r3, r5
 80258d6:	6023      	str	r3, [r4, #0]
 80258d8:	e00e      	b.n	80258f8 <_malloc_r+0xa0>
 80258da:	6822      	ldr	r2, [r4, #0]
 80258dc:	1b52      	subs	r2, r2, r5
 80258de:	d41e      	bmi.n	802591e <_malloc_r+0xc6>
 80258e0:	2a0b      	cmp	r2, #11
 80258e2:	d916      	bls.n	8025912 <_malloc_r+0xba>
 80258e4:	1961      	adds	r1, r4, r5
 80258e6:	42a3      	cmp	r3, r4
 80258e8:	6025      	str	r5, [r4, #0]
 80258ea:	bf18      	it	ne
 80258ec:	6059      	strne	r1, [r3, #4]
 80258ee:	6863      	ldr	r3, [r4, #4]
 80258f0:	bf08      	it	eq
 80258f2:	6031      	streq	r1, [r6, #0]
 80258f4:	5162      	str	r2, [r4, r5]
 80258f6:	604b      	str	r3, [r1, #4]
 80258f8:	4638      	mov	r0, r7
 80258fa:	f104 060b 	add.w	r6, r4, #11
 80258fe:	f001 faa7 	bl	8026e50 <__malloc_unlock>
 8025902:	f026 0607 	bic.w	r6, r6, #7
 8025906:	1d23      	adds	r3, r4, #4
 8025908:	1af2      	subs	r2, r6, r3
 802590a:	d0b6      	beq.n	802587a <_malloc_r+0x22>
 802590c:	1b9b      	subs	r3, r3, r6
 802590e:	50a3      	str	r3, [r4, r2]
 8025910:	e7b3      	b.n	802587a <_malloc_r+0x22>
 8025912:	6862      	ldr	r2, [r4, #4]
 8025914:	42a3      	cmp	r3, r4
 8025916:	bf0c      	ite	eq
 8025918:	6032      	streq	r2, [r6, #0]
 802591a:	605a      	strne	r2, [r3, #4]
 802591c:	e7ec      	b.n	80258f8 <_malloc_r+0xa0>
 802591e:	4623      	mov	r3, r4
 8025920:	6864      	ldr	r4, [r4, #4]
 8025922:	e7b2      	b.n	802588a <_malloc_r+0x32>
 8025924:	4634      	mov	r4, r6
 8025926:	6876      	ldr	r6, [r6, #4]
 8025928:	e7b9      	b.n	802589e <_malloc_r+0x46>
 802592a:	230c      	movs	r3, #12
 802592c:	603b      	str	r3, [r7, #0]
 802592e:	4638      	mov	r0, r7
 8025930:	f001 fa8e 	bl	8026e50 <__malloc_unlock>
 8025934:	e7a1      	b.n	802587a <_malloc_r+0x22>
 8025936:	6025      	str	r5, [r4, #0]
 8025938:	e7de      	b.n	80258f8 <_malloc_r+0xa0>
 802593a:	bf00      	nop
 802593c:	2400a764 	.word	0x2400a764

08025940 <__cvt>:
 8025940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025942:	ed2d 8b02 	vpush	{d8}
 8025946:	eeb0 8b40 	vmov.f64	d8, d0
 802594a:	b085      	sub	sp, #20
 802594c:	4617      	mov	r7, r2
 802594e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025950:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025952:	ee18 2a90 	vmov	r2, s17
 8025956:	f025 0520 	bic.w	r5, r5, #32
 802595a:	2a00      	cmp	r2, #0
 802595c:	bfb6      	itet	lt
 802595e:	222d      	movlt	r2, #45	; 0x2d
 8025960:	2200      	movge	r2, #0
 8025962:	eeb1 8b40 	vneglt.f64	d8, d0
 8025966:	2d46      	cmp	r5, #70	; 0x46
 8025968:	460c      	mov	r4, r1
 802596a:	701a      	strb	r2, [r3, #0]
 802596c:	d004      	beq.n	8025978 <__cvt+0x38>
 802596e:	2d45      	cmp	r5, #69	; 0x45
 8025970:	d100      	bne.n	8025974 <__cvt+0x34>
 8025972:	3401      	adds	r4, #1
 8025974:	2102      	movs	r1, #2
 8025976:	e000      	b.n	802597a <__cvt+0x3a>
 8025978:	2103      	movs	r1, #3
 802597a:	ab03      	add	r3, sp, #12
 802597c:	9301      	str	r3, [sp, #4]
 802597e:	ab02      	add	r3, sp, #8
 8025980:	9300      	str	r3, [sp, #0]
 8025982:	4622      	mov	r2, r4
 8025984:	4633      	mov	r3, r6
 8025986:	eeb0 0b48 	vmov.f64	d0, d8
 802598a:	f000 fce9 	bl	8026360 <_dtoa_r>
 802598e:	2d47      	cmp	r5, #71	; 0x47
 8025990:	d101      	bne.n	8025996 <__cvt+0x56>
 8025992:	07fb      	lsls	r3, r7, #31
 8025994:	d51a      	bpl.n	80259cc <__cvt+0x8c>
 8025996:	2d46      	cmp	r5, #70	; 0x46
 8025998:	eb00 0204 	add.w	r2, r0, r4
 802599c:	d10c      	bne.n	80259b8 <__cvt+0x78>
 802599e:	7803      	ldrb	r3, [r0, #0]
 80259a0:	2b30      	cmp	r3, #48	; 0x30
 80259a2:	d107      	bne.n	80259b4 <__cvt+0x74>
 80259a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80259a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80259ac:	bf1c      	itt	ne
 80259ae:	f1c4 0401 	rsbne	r4, r4, #1
 80259b2:	6034      	strne	r4, [r6, #0]
 80259b4:	6833      	ldr	r3, [r6, #0]
 80259b6:	441a      	add	r2, r3
 80259b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80259bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80259c0:	bf08      	it	eq
 80259c2:	9203      	streq	r2, [sp, #12]
 80259c4:	2130      	movs	r1, #48	; 0x30
 80259c6:	9b03      	ldr	r3, [sp, #12]
 80259c8:	4293      	cmp	r3, r2
 80259ca:	d307      	bcc.n	80259dc <__cvt+0x9c>
 80259cc:	9b03      	ldr	r3, [sp, #12]
 80259ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80259d0:	1a1b      	subs	r3, r3, r0
 80259d2:	6013      	str	r3, [r2, #0]
 80259d4:	b005      	add	sp, #20
 80259d6:	ecbd 8b02 	vpop	{d8}
 80259da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80259dc:	1c5c      	adds	r4, r3, #1
 80259de:	9403      	str	r4, [sp, #12]
 80259e0:	7019      	strb	r1, [r3, #0]
 80259e2:	e7f0      	b.n	80259c6 <__cvt+0x86>

080259e4 <__exponent>:
 80259e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80259e6:	4603      	mov	r3, r0
 80259e8:	2900      	cmp	r1, #0
 80259ea:	bfb8      	it	lt
 80259ec:	4249      	neglt	r1, r1
 80259ee:	f803 2b02 	strb.w	r2, [r3], #2
 80259f2:	bfb4      	ite	lt
 80259f4:	222d      	movlt	r2, #45	; 0x2d
 80259f6:	222b      	movge	r2, #43	; 0x2b
 80259f8:	2909      	cmp	r1, #9
 80259fa:	7042      	strb	r2, [r0, #1]
 80259fc:	dd2a      	ble.n	8025a54 <__exponent+0x70>
 80259fe:	f10d 0407 	add.w	r4, sp, #7
 8025a02:	46a4      	mov	ip, r4
 8025a04:	270a      	movs	r7, #10
 8025a06:	46a6      	mov	lr, r4
 8025a08:	460a      	mov	r2, r1
 8025a0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8025a0e:	fb07 1516 	mls	r5, r7, r6, r1
 8025a12:	3530      	adds	r5, #48	; 0x30
 8025a14:	2a63      	cmp	r2, #99	; 0x63
 8025a16:	f104 34ff 	add.w	r4, r4, #4294967295
 8025a1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8025a1e:	4631      	mov	r1, r6
 8025a20:	dcf1      	bgt.n	8025a06 <__exponent+0x22>
 8025a22:	3130      	adds	r1, #48	; 0x30
 8025a24:	f1ae 0502 	sub.w	r5, lr, #2
 8025a28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8025a2c:	1c44      	adds	r4, r0, #1
 8025a2e:	4629      	mov	r1, r5
 8025a30:	4561      	cmp	r1, ip
 8025a32:	d30a      	bcc.n	8025a4a <__exponent+0x66>
 8025a34:	f10d 0209 	add.w	r2, sp, #9
 8025a38:	eba2 020e 	sub.w	r2, r2, lr
 8025a3c:	4565      	cmp	r5, ip
 8025a3e:	bf88      	it	hi
 8025a40:	2200      	movhi	r2, #0
 8025a42:	4413      	add	r3, r2
 8025a44:	1a18      	subs	r0, r3, r0
 8025a46:	b003      	add	sp, #12
 8025a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025a4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8025a52:	e7ed      	b.n	8025a30 <__exponent+0x4c>
 8025a54:	2330      	movs	r3, #48	; 0x30
 8025a56:	3130      	adds	r1, #48	; 0x30
 8025a58:	7083      	strb	r3, [r0, #2]
 8025a5a:	70c1      	strb	r1, [r0, #3]
 8025a5c:	1d03      	adds	r3, r0, #4
 8025a5e:	e7f1      	b.n	8025a44 <__exponent+0x60>

08025a60 <_printf_float>:
 8025a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a64:	b08b      	sub	sp, #44	; 0x2c
 8025a66:	460c      	mov	r4, r1
 8025a68:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8025a6c:	4616      	mov	r6, r2
 8025a6e:	461f      	mov	r7, r3
 8025a70:	4605      	mov	r5, r0
 8025a72:	f001 f9e3 	bl	8026e3c <_localeconv_r>
 8025a76:	f8d0 b000 	ldr.w	fp, [r0]
 8025a7a:	4658      	mov	r0, fp
 8025a7c:	f7da fc3a 	bl	80002f4 <strlen>
 8025a80:	2300      	movs	r3, #0
 8025a82:	9308      	str	r3, [sp, #32]
 8025a84:	f8d8 3000 	ldr.w	r3, [r8]
 8025a88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8025a8c:	6822      	ldr	r2, [r4, #0]
 8025a8e:	3307      	adds	r3, #7
 8025a90:	f023 0307 	bic.w	r3, r3, #7
 8025a94:	f103 0108 	add.w	r1, r3, #8
 8025a98:	f8c8 1000 	str.w	r1, [r8]
 8025a9c:	4682      	mov	sl, r0
 8025a9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025aa2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8025aa6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8025d08 <_printf_float+0x2a8>
 8025aaa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8025aae:	eeb0 6bc0 	vabs.f64	d6, d0
 8025ab2:	eeb4 6b47 	vcmp.f64	d6, d7
 8025ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025aba:	dd24      	ble.n	8025b06 <_printf_float+0xa6>
 8025abc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ac4:	d502      	bpl.n	8025acc <_printf_float+0x6c>
 8025ac6:	232d      	movs	r3, #45	; 0x2d
 8025ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025acc:	4b90      	ldr	r3, [pc, #576]	; (8025d10 <_printf_float+0x2b0>)
 8025ace:	4891      	ldr	r0, [pc, #580]	; (8025d14 <_printf_float+0x2b4>)
 8025ad0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8025ad4:	bf94      	ite	ls
 8025ad6:	4698      	movls	r8, r3
 8025ad8:	4680      	movhi	r8, r0
 8025ada:	2303      	movs	r3, #3
 8025adc:	6123      	str	r3, [r4, #16]
 8025ade:	f022 0204 	bic.w	r2, r2, #4
 8025ae2:	2300      	movs	r3, #0
 8025ae4:	6022      	str	r2, [r4, #0]
 8025ae6:	9304      	str	r3, [sp, #16]
 8025ae8:	9700      	str	r7, [sp, #0]
 8025aea:	4633      	mov	r3, r6
 8025aec:	aa09      	add	r2, sp, #36	; 0x24
 8025aee:	4621      	mov	r1, r4
 8025af0:	4628      	mov	r0, r5
 8025af2:	f000 f9d3 	bl	8025e9c <_printf_common>
 8025af6:	3001      	adds	r0, #1
 8025af8:	f040 808a 	bne.w	8025c10 <_printf_float+0x1b0>
 8025afc:	f04f 30ff 	mov.w	r0, #4294967295
 8025b00:	b00b      	add	sp, #44	; 0x2c
 8025b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b06:	eeb4 0b40 	vcmp.f64	d0, d0
 8025b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b0e:	d709      	bvc.n	8025b24 <_printf_float+0xc4>
 8025b10:	ee10 3a90 	vmov	r3, s1
 8025b14:	2b00      	cmp	r3, #0
 8025b16:	bfbc      	itt	lt
 8025b18:	232d      	movlt	r3, #45	; 0x2d
 8025b1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8025b1e:	487e      	ldr	r0, [pc, #504]	; (8025d18 <_printf_float+0x2b8>)
 8025b20:	4b7e      	ldr	r3, [pc, #504]	; (8025d1c <_printf_float+0x2bc>)
 8025b22:	e7d5      	b.n	8025ad0 <_printf_float+0x70>
 8025b24:	6863      	ldr	r3, [r4, #4]
 8025b26:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8025b2a:	9104      	str	r1, [sp, #16]
 8025b2c:	1c59      	adds	r1, r3, #1
 8025b2e:	d13c      	bne.n	8025baa <_printf_float+0x14a>
 8025b30:	2306      	movs	r3, #6
 8025b32:	6063      	str	r3, [r4, #4]
 8025b34:	2300      	movs	r3, #0
 8025b36:	9303      	str	r3, [sp, #12]
 8025b38:	ab08      	add	r3, sp, #32
 8025b3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8025b3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8025b42:	ab07      	add	r3, sp, #28
 8025b44:	6861      	ldr	r1, [r4, #4]
 8025b46:	9300      	str	r3, [sp, #0]
 8025b48:	6022      	str	r2, [r4, #0]
 8025b4a:	f10d 031b 	add.w	r3, sp, #27
 8025b4e:	4628      	mov	r0, r5
 8025b50:	f7ff fef6 	bl	8025940 <__cvt>
 8025b54:	9b04      	ldr	r3, [sp, #16]
 8025b56:	9907      	ldr	r1, [sp, #28]
 8025b58:	2b47      	cmp	r3, #71	; 0x47
 8025b5a:	4680      	mov	r8, r0
 8025b5c:	d108      	bne.n	8025b70 <_printf_float+0x110>
 8025b5e:	1cc8      	adds	r0, r1, #3
 8025b60:	db02      	blt.n	8025b68 <_printf_float+0x108>
 8025b62:	6863      	ldr	r3, [r4, #4]
 8025b64:	4299      	cmp	r1, r3
 8025b66:	dd41      	ble.n	8025bec <_printf_float+0x18c>
 8025b68:	f1a9 0902 	sub.w	r9, r9, #2
 8025b6c:	fa5f f989 	uxtb.w	r9, r9
 8025b70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8025b74:	d820      	bhi.n	8025bb8 <_printf_float+0x158>
 8025b76:	3901      	subs	r1, #1
 8025b78:	464a      	mov	r2, r9
 8025b7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8025b7e:	9107      	str	r1, [sp, #28]
 8025b80:	f7ff ff30 	bl	80259e4 <__exponent>
 8025b84:	9a08      	ldr	r2, [sp, #32]
 8025b86:	9004      	str	r0, [sp, #16]
 8025b88:	1813      	adds	r3, r2, r0
 8025b8a:	2a01      	cmp	r2, #1
 8025b8c:	6123      	str	r3, [r4, #16]
 8025b8e:	dc02      	bgt.n	8025b96 <_printf_float+0x136>
 8025b90:	6822      	ldr	r2, [r4, #0]
 8025b92:	07d2      	lsls	r2, r2, #31
 8025b94:	d501      	bpl.n	8025b9a <_printf_float+0x13a>
 8025b96:	3301      	adds	r3, #1
 8025b98:	6123      	str	r3, [r4, #16]
 8025b9a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8025b9e:	2b00      	cmp	r3, #0
 8025ba0:	d0a2      	beq.n	8025ae8 <_printf_float+0x88>
 8025ba2:	232d      	movs	r3, #45	; 0x2d
 8025ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025ba8:	e79e      	b.n	8025ae8 <_printf_float+0x88>
 8025baa:	9904      	ldr	r1, [sp, #16]
 8025bac:	2947      	cmp	r1, #71	; 0x47
 8025bae:	d1c1      	bne.n	8025b34 <_printf_float+0xd4>
 8025bb0:	2b00      	cmp	r3, #0
 8025bb2:	d1bf      	bne.n	8025b34 <_printf_float+0xd4>
 8025bb4:	2301      	movs	r3, #1
 8025bb6:	e7bc      	b.n	8025b32 <_printf_float+0xd2>
 8025bb8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8025bbc:	d118      	bne.n	8025bf0 <_printf_float+0x190>
 8025bbe:	2900      	cmp	r1, #0
 8025bc0:	6863      	ldr	r3, [r4, #4]
 8025bc2:	dd0b      	ble.n	8025bdc <_printf_float+0x17c>
 8025bc4:	6121      	str	r1, [r4, #16]
 8025bc6:	b913      	cbnz	r3, 8025bce <_printf_float+0x16e>
 8025bc8:	6822      	ldr	r2, [r4, #0]
 8025bca:	07d0      	lsls	r0, r2, #31
 8025bcc:	d502      	bpl.n	8025bd4 <_printf_float+0x174>
 8025bce:	3301      	adds	r3, #1
 8025bd0:	440b      	add	r3, r1
 8025bd2:	6123      	str	r3, [r4, #16]
 8025bd4:	2300      	movs	r3, #0
 8025bd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8025bd8:	9304      	str	r3, [sp, #16]
 8025bda:	e7de      	b.n	8025b9a <_printf_float+0x13a>
 8025bdc:	b913      	cbnz	r3, 8025be4 <_printf_float+0x184>
 8025bde:	6822      	ldr	r2, [r4, #0]
 8025be0:	07d2      	lsls	r2, r2, #31
 8025be2:	d501      	bpl.n	8025be8 <_printf_float+0x188>
 8025be4:	3302      	adds	r3, #2
 8025be6:	e7f4      	b.n	8025bd2 <_printf_float+0x172>
 8025be8:	2301      	movs	r3, #1
 8025bea:	e7f2      	b.n	8025bd2 <_printf_float+0x172>
 8025bec:	f04f 0967 	mov.w	r9, #103	; 0x67
 8025bf0:	9b08      	ldr	r3, [sp, #32]
 8025bf2:	4299      	cmp	r1, r3
 8025bf4:	db05      	blt.n	8025c02 <_printf_float+0x1a2>
 8025bf6:	6823      	ldr	r3, [r4, #0]
 8025bf8:	6121      	str	r1, [r4, #16]
 8025bfa:	07d8      	lsls	r0, r3, #31
 8025bfc:	d5ea      	bpl.n	8025bd4 <_printf_float+0x174>
 8025bfe:	1c4b      	adds	r3, r1, #1
 8025c00:	e7e7      	b.n	8025bd2 <_printf_float+0x172>
 8025c02:	2900      	cmp	r1, #0
 8025c04:	bfd4      	ite	le
 8025c06:	f1c1 0202 	rsble	r2, r1, #2
 8025c0a:	2201      	movgt	r2, #1
 8025c0c:	4413      	add	r3, r2
 8025c0e:	e7e0      	b.n	8025bd2 <_printf_float+0x172>
 8025c10:	6823      	ldr	r3, [r4, #0]
 8025c12:	055a      	lsls	r2, r3, #21
 8025c14:	d407      	bmi.n	8025c26 <_printf_float+0x1c6>
 8025c16:	6923      	ldr	r3, [r4, #16]
 8025c18:	4642      	mov	r2, r8
 8025c1a:	4631      	mov	r1, r6
 8025c1c:	4628      	mov	r0, r5
 8025c1e:	47b8      	blx	r7
 8025c20:	3001      	adds	r0, #1
 8025c22:	d12a      	bne.n	8025c7a <_printf_float+0x21a>
 8025c24:	e76a      	b.n	8025afc <_printf_float+0x9c>
 8025c26:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8025c2a:	f240 80e2 	bls.w	8025df2 <_printf_float+0x392>
 8025c2e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8025c32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c3a:	d133      	bne.n	8025ca4 <_printf_float+0x244>
 8025c3c:	4a38      	ldr	r2, [pc, #224]	; (8025d20 <_printf_float+0x2c0>)
 8025c3e:	2301      	movs	r3, #1
 8025c40:	4631      	mov	r1, r6
 8025c42:	4628      	mov	r0, r5
 8025c44:	47b8      	blx	r7
 8025c46:	3001      	adds	r0, #1
 8025c48:	f43f af58 	beq.w	8025afc <_printf_float+0x9c>
 8025c4c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025c50:	429a      	cmp	r2, r3
 8025c52:	db02      	blt.n	8025c5a <_printf_float+0x1fa>
 8025c54:	6823      	ldr	r3, [r4, #0]
 8025c56:	07d8      	lsls	r0, r3, #31
 8025c58:	d50f      	bpl.n	8025c7a <_printf_float+0x21a>
 8025c5a:	4653      	mov	r3, sl
 8025c5c:	465a      	mov	r2, fp
 8025c5e:	4631      	mov	r1, r6
 8025c60:	4628      	mov	r0, r5
 8025c62:	47b8      	blx	r7
 8025c64:	3001      	adds	r0, #1
 8025c66:	f43f af49 	beq.w	8025afc <_printf_float+0x9c>
 8025c6a:	f04f 0800 	mov.w	r8, #0
 8025c6e:	f104 091a 	add.w	r9, r4, #26
 8025c72:	9b08      	ldr	r3, [sp, #32]
 8025c74:	3b01      	subs	r3, #1
 8025c76:	4543      	cmp	r3, r8
 8025c78:	dc09      	bgt.n	8025c8e <_printf_float+0x22e>
 8025c7a:	6823      	ldr	r3, [r4, #0]
 8025c7c:	079b      	lsls	r3, r3, #30
 8025c7e:	f100 8108 	bmi.w	8025e92 <_printf_float+0x432>
 8025c82:	68e0      	ldr	r0, [r4, #12]
 8025c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c86:	4298      	cmp	r0, r3
 8025c88:	bfb8      	it	lt
 8025c8a:	4618      	movlt	r0, r3
 8025c8c:	e738      	b.n	8025b00 <_printf_float+0xa0>
 8025c8e:	2301      	movs	r3, #1
 8025c90:	464a      	mov	r2, r9
 8025c92:	4631      	mov	r1, r6
 8025c94:	4628      	mov	r0, r5
 8025c96:	47b8      	blx	r7
 8025c98:	3001      	adds	r0, #1
 8025c9a:	f43f af2f 	beq.w	8025afc <_printf_float+0x9c>
 8025c9e:	f108 0801 	add.w	r8, r8, #1
 8025ca2:	e7e6      	b.n	8025c72 <_printf_float+0x212>
 8025ca4:	9b07      	ldr	r3, [sp, #28]
 8025ca6:	2b00      	cmp	r3, #0
 8025ca8:	dc3c      	bgt.n	8025d24 <_printf_float+0x2c4>
 8025caa:	4a1d      	ldr	r2, [pc, #116]	; (8025d20 <_printf_float+0x2c0>)
 8025cac:	2301      	movs	r3, #1
 8025cae:	4631      	mov	r1, r6
 8025cb0:	4628      	mov	r0, r5
 8025cb2:	47b8      	blx	r7
 8025cb4:	3001      	adds	r0, #1
 8025cb6:	f43f af21 	beq.w	8025afc <_printf_float+0x9c>
 8025cba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025cbe:	4313      	orrs	r3, r2
 8025cc0:	d102      	bne.n	8025cc8 <_printf_float+0x268>
 8025cc2:	6823      	ldr	r3, [r4, #0]
 8025cc4:	07d9      	lsls	r1, r3, #31
 8025cc6:	d5d8      	bpl.n	8025c7a <_printf_float+0x21a>
 8025cc8:	4653      	mov	r3, sl
 8025cca:	465a      	mov	r2, fp
 8025ccc:	4631      	mov	r1, r6
 8025cce:	4628      	mov	r0, r5
 8025cd0:	47b8      	blx	r7
 8025cd2:	3001      	adds	r0, #1
 8025cd4:	f43f af12 	beq.w	8025afc <_printf_float+0x9c>
 8025cd8:	f04f 0900 	mov.w	r9, #0
 8025cdc:	f104 0a1a 	add.w	sl, r4, #26
 8025ce0:	9b07      	ldr	r3, [sp, #28]
 8025ce2:	425b      	negs	r3, r3
 8025ce4:	454b      	cmp	r3, r9
 8025ce6:	dc01      	bgt.n	8025cec <_printf_float+0x28c>
 8025ce8:	9b08      	ldr	r3, [sp, #32]
 8025cea:	e795      	b.n	8025c18 <_printf_float+0x1b8>
 8025cec:	2301      	movs	r3, #1
 8025cee:	4652      	mov	r2, sl
 8025cf0:	4631      	mov	r1, r6
 8025cf2:	4628      	mov	r0, r5
 8025cf4:	47b8      	blx	r7
 8025cf6:	3001      	adds	r0, #1
 8025cf8:	f43f af00 	beq.w	8025afc <_printf_float+0x9c>
 8025cfc:	f109 0901 	add.w	r9, r9, #1
 8025d00:	e7ee      	b.n	8025ce0 <_printf_float+0x280>
 8025d02:	bf00      	nop
 8025d04:	f3af 8000 	nop.w
 8025d08:	ffffffff 	.word	0xffffffff
 8025d0c:	7fefffff 	.word	0x7fefffff
 8025d10:	080c3144 	.word	0x080c3144
 8025d14:	080c3148 	.word	0x080c3148
 8025d18:	080c3150 	.word	0x080c3150
 8025d1c:	080c314c 	.word	0x080c314c
 8025d20:	080c3154 	.word	0x080c3154
 8025d24:	9a08      	ldr	r2, [sp, #32]
 8025d26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025d28:	429a      	cmp	r2, r3
 8025d2a:	bfa8      	it	ge
 8025d2c:	461a      	movge	r2, r3
 8025d2e:	2a00      	cmp	r2, #0
 8025d30:	4691      	mov	r9, r2
 8025d32:	dc38      	bgt.n	8025da6 <_printf_float+0x346>
 8025d34:	2300      	movs	r3, #0
 8025d36:	9305      	str	r3, [sp, #20]
 8025d38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025d3c:	f104 021a 	add.w	r2, r4, #26
 8025d40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025d42:	9905      	ldr	r1, [sp, #20]
 8025d44:	9304      	str	r3, [sp, #16]
 8025d46:	eba3 0309 	sub.w	r3, r3, r9
 8025d4a:	428b      	cmp	r3, r1
 8025d4c:	dc33      	bgt.n	8025db6 <_printf_float+0x356>
 8025d4e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025d52:	429a      	cmp	r2, r3
 8025d54:	db3c      	blt.n	8025dd0 <_printf_float+0x370>
 8025d56:	6823      	ldr	r3, [r4, #0]
 8025d58:	07da      	lsls	r2, r3, #31
 8025d5a:	d439      	bmi.n	8025dd0 <_printf_float+0x370>
 8025d5c:	9b08      	ldr	r3, [sp, #32]
 8025d5e:	9a04      	ldr	r2, [sp, #16]
 8025d60:	9907      	ldr	r1, [sp, #28]
 8025d62:	1a9a      	subs	r2, r3, r2
 8025d64:	eba3 0901 	sub.w	r9, r3, r1
 8025d68:	4591      	cmp	r9, r2
 8025d6a:	bfa8      	it	ge
 8025d6c:	4691      	movge	r9, r2
 8025d6e:	f1b9 0f00 	cmp.w	r9, #0
 8025d72:	dc35      	bgt.n	8025de0 <_printf_float+0x380>
 8025d74:	f04f 0800 	mov.w	r8, #0
 8025d78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025d7c:	f104 0a1a 	add.w	sl, r4, #26
 8025d80:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8025d84:	1a9b      	subs	r3, r3, r2
 8025d86:	eba3 0309 	sub.w	r3, r3, r9
 8025d8a:	4543      	cmp	r3, r8
 8025d8c:	f77f af75 	ble.w	8025c7a <_printf_float+0x21a>
 8025d90:	2301      	movs	r3, #1
 8025d92:	4652      	mov	r2, sl
 8025d94:	4631      	mov	r1, r6
 8025d96:	4628      	mov	r0, r5
 8025d98:	47b8      	blx	r7
 8025d9a:	3001      	adds	r0, #1
 8025d9c:	f43f aeae 	beq.w	8025afc <_printf_float+0x9c>
 8025da0:	f108 0801 	add.w	r8, r8, #1
 8025da4:	e7ec      	b.n	8025d80 <_printf_float+0x320>
 8025da6:	4613      	mov	r3, r2
 8025da8:	4631      	mov	r1, r6
 8025daa:	4642      	mov	r2, r8
 8025dac:	4628      	mov	r0, r5
 8025dae:	47b8      	blx	r7
 8025db0:	3001      	adds	r0, #1
 8025db2:	d1bf      	bne.n	8025d34 <_printf_float+0x2d4>
 8025db4:	e6a2      	b.n	8025afc <_printf_float+0x9c>
 8025db6:	2301      	movs	r3, #1
 8025db8:	4631      	mov	r1, r6
 8025dba:	4628      	mov	r0, r5
 8025dbc:	9204      	str	r2, [sp, #16]
 8025dbe:	47b8      	blx	r7
 8025dc0:	3001      	adds	r0, #1
 8025dc2:	f43f ae9b 	beq.w	8025afc <_printf_float+0x9c>
 8025dc6:	9b05      	ldr	r3, [sp, #20]
 8025dc8:	9a04      	ldr	r2, [sp, #16]
 8025dca:	3301      	adds	r3, #1
 8025dcc:	9305      	str	r3, [sp, #20]
 8025dce:	e7b7      	b.n	8025d40 <_printf_float+0x2e0>
 8025dd0:	4653      	mov	r3, sl
 8025dd2:	465a      	mov	r2, fp
 8025dd4:	4631      	mov	r1, r6
 8025dd6:	4628      	mov	r0, r5
 8025dd8:	47b8      	blx	r7
 8025dda:	3001      	adds	r0, #1
 8025ddc:	d1be      	bne.n	8025d5c <_printf_float+0x2fc>
 8025dde:	e68d      	b.n	8025afc <_printf_float+0x9c>
 8025de0:	9a04      	ldr	r2, [sp, #16]
 8025de2:	464b      	mov	r3, r9
 8025de4:	4442      	add	r2, r8
 8025de6:	4631      	mov	r1, r6
 8025de8:	4628      	mov	r0, r5
 8025dea:	47b8      	blx	r7
 8025dec:	3001      	adds	r0, #1
 8025dee:	d1c1      	bne.n	8025d74 <_printf_float+0x314>
 8025df0:	e684      	b.n	8025afc <_printf_float+0x9c>
 8025df2:	9a08      	ldr	r2, [sp, #32]
 8025df4:	2a01      	cmp	r2, #1
 8025df6:	dc01      	bgt.n	8025dfc <_printf_float+0x39c>
 8025df8:	07db      	lsls	r3, r3, #31
 8025dfa:	d537      	bpl.n	8025e6c <_printf_float+0x40c>
 8025dfc:	2301      	movs	r3, #1
 8025dfe:	4642      	mov	r2, r8
 8025e00:	4631      	mov	r1, r6
 8025e02:	4628      	mov	r0, r5
 8025e04:	47b8      	blx	r7
 8025e06:	3001      	adds	r0, #1
 8025e08:	f43f ae78 	beq.w	8025afc <_printf_float+0x9c>
 8025e0c:	4653      	mov	r3, sl
 8025e0e:	465a      	mov	r2, fp
 8025e10:	4631      	mov	r1, r6
 8025e12:	4628      	mov	r0, r5
 8025e14:	47b8      	blx	r7
 8025e16:	3001      	adds	r0, #1
 8025e18:	f43f ae70 	beq.w	8025afc <_printf_float+0x9c>
 8025e1c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8025e20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e28:	d01b      	beq.n	8025e62 <_printf_float+0x402>
 8025e2a:	9b08      	ldr	r3, [sp, #32]
 8025e2c:	f108 0201 	add.w	r2, r8, #1
 8025e30:	3b01      	subs	r3, #1
 8025e32:	4631      	mov	r1, r6
 8025e34:	4628      	mov	r0, r5
 8025e36:	47b8      	blx	r7
 8025e38:	3001      	adds	r0, #1
 8025e3a:	d10e      	bne.n	8025e5a <_printf_float+0x3fa>
 8025e3c:	e65e      	b.n	8025afc <_printf_float+0x9c>
 8025e3e:	2301      	movs	r3, #1
 8025e40:	464a      	mov	r2, r9
 8025e42:	4631      	mov	r1, r6
 8025e44:	4628      	mov	r0, r5
 8025e46:	47b8      	blx	r7
 8025e48:	3001      	adds	r0, #1
 8025e4a:	f43f ae57 	beq.w	8025afc <_printf_float+0x9c>
 8025e4e:	f108 0801 	add.w	r8, r8, #1
 8025e52:	9b08      	ldr	r3, [sp, #32]
 8025e54:	3b01      	subs	r3, #1
 8025e56:	4543      	cmp	r3, r8
 8025e58:	dcf1      	bgt.n	8025e3e <_printf_float+0x3de>
 8025e5a:	9b04      	ldr	r3, [sp, #16]
 8025e5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8025e60:	e6db      	b.n	8025c1a <_printf_float+0x1ba>
 8025e62:	f04f 0800 	mov.w	r8, #0
 8025e66:	f104 091a 	add.w	r9, r4, #26
 8025e6a:	e7f2      	b.n	8025e52 <_printf_float+0x3f2>
 8025e6c:	2301      	movs	r3, #1
 8025e6e:	4642      	mov	r2, r8
 8025e70:	e7df      	b.n	8025e32 <_printf_float+0x3d2>
 8025e72:	2301      	movs	r3, #1
 8025e74:	464a      	mov	r2, r9
 8025e76:	4631      	mov	r1, r6
 8025e78:	4628      	mov	r0, r5
 8025e7a:	47b8      	blx	r7
 8025e7c:	3001      	adds	r0, #1
 8025e7e:	f43f ae3d 	beq.w	8025afc <_printf_float+0x9c>
 8025e82:	f108 0801 	add.w	r8, r8, #1
 8025e86:	68e3      	ldr	r3, [r4, #12]
 8025e88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025e8a:	1a5b      	subs	r3, r3, r1
 8025e8c:	4543      	cmp	r3, r8
 8025e8e:	dcf0      	bgt.n	8025e72 <_printf_float+0x412>
 8025e90:	e6f7      	b.n	8025c82 <_printf_float+0x222>
 8025e92:	f04f 0800 	mov.w	r8, #0
 8025e96:	f104 0919 	add.w	r9, r4, #25
 8025e9a:	e7f4      	b.n	8025e86 <_printf_float+0x426>

08025e9c <_printf_common>:
 8025e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025ea0:	4616      	mov	r6, r2
 8025ea2:	4699      	mov	r9, r3
 8025ea4:	688a      	ldr	r2, [r1, #8]
 8025ea6:	690b      	ldr	r3, [r1, #16]
 8025ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025eac:	4293      	cmp	r3, r2
 8025eae:	bfb8      	it	lt
 8025eb0:	4613      	movlt	r3, r2
 8025eb2:	6033      	str	r3, [r6, #0]
 8025eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025eb8:	4607      	mov	r7, r0
 8025eba:	460c      	mov	r4, r1
 8025ebc:	b10a      	cbz	r2, 8025ec2 <_printf_common+0x26>
 8025ebe:	3301      	adds	r3, #1
 8025ec0:	6033      	str	r3, [r6, #0]
 8025ec2:	6823      	ldr	r3, [r4, #0]
 8025ec4:	0699      	lsls	r1, r3, #26
 8025ec6:	bf42      	ittt	mi
 8025ec8:	6833      	ldrmi	r3, [r6, #0]
 8025eca:	3302      	addmi	r3, #2
 8025ecc:	6033      	strmi	r3, [r6, #0]
 8025ece:	6825      	ldr	r5, [r4, #0]
 8025ed0:	f015 0506 	ands.w	r5, r5, #6
 8025ed4:	d106      	bne.n	8025ee4 <_printf_common+0x48>
 8025ed6:	f104 0a19 	add.w	sl, r4, #25
 8025eda:	68e3      	ldr	r3, [r4, #12]
 8025edc:	6832      	ldr	r2, [r6, #0]
 8025ede:	1a9b      	subs	r3, r3, r2
 8025ee0:	42ab      	cmp	r3, r5
 8025ee2:	dc26      	bgt.n	8025f32 <_printf_common+0x96>
 8025ee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025ee8:	1e13      	subs	r3, r2, #0
 8025eea:	6822      	ldr	r2, [r4, #0]
 8025eec:	bf18      	it	ne
 8025eee:	2301      	movne	r3, #1
 8025ef0:	0692      	lsls	r2, r2, #26
 8025ef2:	d42b      	bmi.n	8025f4c <_printf_common+0xb0>
 8025ef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025ef8:	4649      	mov	r1, r9
 8025efa:	4638      	mov	r0, r7
 8025efc:	47c0      	blx	r8
 8025efe:	3001      	adds	r0, #1
 8025f00:	d01e      	beq.n	8025f40 <_printf_common+0xa4>
 8025f02:	6823      	ldr	r3, [r4, #0]
 8025f04:	68e5      	ldr	r5, [r4, #12]
 8025f06:	6832      	ldr	r2, [r6, #0]
 8025f08:	f003 0306 	and.w	r3, r3, #6
 8025f0c:	2b04      	cmp	r3, #4
 8025f0e:	bf08      	it	eq
 8025f10:	1aad      	subeq	r5, r5, r2
 8025f12:	68a3      	ldr	r3, [r4, #8]
 8025f14:	6922      	ldr	r2, [r4, #16]
 8025f16:	bf0c      	ite	eq
 8025f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025f1c:	2500      	movne	r5, #0
 8025f1e:	4293      	cmp	r3, r2
 8025f20:	bfc4      	itt	gt
 8025f22:	1a9b      	subgt	r3, r3, r2
 8025f24:	18ed      	addgt	r5, r5, r3
 8025f26:	2600      	movs	r6, #0
 8025f28:	341a      	adds	r4, #26
 8025f2a:	42b5      	cmp	r5, r6
 8025f2c:	d11a      	bne.n	8025f64 <_printf_common+0xc8>
 8025f2e:	2000      	movs	r0, #0
 8025f30:	e008      	b.n	8025f44 <_printf_common+0xa8>
 8025f32:	2301      	movs	r3, #1
 8025f34:	4652      	mov	r2, sl
 8025f36:	4649      	mov	r1, r9
 8025f38:	4638      	mov	r0, r7
 8025f3a:	47c0      	blx	r8
 8025f3c:	3001      	adds	r0, #1
 8025f3e:	d103      	bne.n	8025f48 <_printf_common+0xac>
 8025f40:	f04f 30ff 	mov.w	r0, #4294967295
 8025f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025f48:	3501      	adds	r5, #1
 8025f4a:	e7c6      	b.n	8025eda <_printf_common+0x3e>
 8025f4c:	18e1      	adds	r1, r4, r3
 8025f4e:	1c5a      	adds	r2, r3, #1
 8025f50:	2030      	movs	r0, #48	; 0x30
 8025f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025f56:	4422      	add	r2, r4
 8025f58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025f5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025f60:	3302      	adds	r3, #2
 8025f62:	e7c7      	b.n	8025ef4 <_printf_common+0x58>
 8025f64:	2301      	movs	r3, #1
 8025f66:	4622      	mov	r2, r4
 8025f68:	4649      	mov	r1, r9
 8025f6a:	4638      	mov	r0, r7
 8025f6c:	47c0      	blx	r8
 8025f6e:	3001      	adds	r0, #1
 8025f70:	d0e6      	beq.n	8025f40 <_printf_common+0xa4>
 8025f72:	3601      	adds	r6, #1
 8025f74:	e7d9      	b.n	8025f2a <_printf_common+0x8e>
	...

08025f78 <_printf_i>:
 8025f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025f7c:	7e0f      	ldrb	r7, [r1, #24]
 8025f7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025f80:	2f78      	cmp	r7, #120	; 0x78
 8025f82:	4691      	mov	r9, r2
 8025f84:	4680      	mov	r8, r0
 8025f86:	460c      	mov	r4, r1
 8025f88:	469a      	mov	sl, r3
 8025f8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8025f8e:	d807      	bhi.n	8025fa0 <_printf_i+0x28>
 8025f90:	2f62      	cmp	r7, #98	; 0x62
 8025f92:	d80a      	bhi.n	8025faa <_printf_i+0x32>
 8025f94:	2f00      	cmp	r7, #0
 8025f96:	f000 80d8 	beq.w	802614a <_printf_i+0x1d2>
 8025f9a:	2f58      	cmp	r7, #88	; 0x58
 8025f9c:	f000 80a3 	beq.w	80260e6 <_printf_i+0x16e>
 8025fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025fa8:	e03a      	b.n	8026020 <_printf_i+0xa8>
 8025faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025fae:	2b15      	cmp	r3, #21
 8025fb0:	d8f6      	bhi.n	8025fa0 <_printf_i+0x28>
 8025fb2:	a101      	add	r1, pc, #4	; (adr r1, 8025fb8 <_printf_i+0x40>)
 8025fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025fb8:	08026011 	.word	0x08026011
 8025fbc:	08026025 	.word	0x08026025
 8025fc0:	08025fa1 	.word	0x08025fa1
 8025fc4:	08025fa1 	.word	0x08025fa1
 8025fc8:	08025fa1 	.word	0x08025fa1
 8025fcc:	08025fa1 	.word	0x08025fa1
 8025fd0:	08026025 	.word	0x08026025
 8025fd4:	08025fa1 	.word	0x08025fa1
 8025fd8:	08025fa1 	.word	0x08025fa1
 8025fdc:	08025fa1 	.word	0x08025fa1
 8025fe0:	08025fa1 	.word	0x08025fa1
 8025fe4:	08026131 	.word	0x08026131
 8025fe8:	08026055 	.word	0x08026055
 8025fec:	08026113 	.word	0x08026113
 8025ff0:	08025fa1 	.word	0x08025fa1
 8025ff4:	08025fa1 	.word	0x08025fa1
 8025ff8:	08026153 	.word	0x08026153
 8025ffc:	08025fa1 	.word	0x08025fa1
 8026000:	08026055 	.word	0x08026055
 8026004:	08025fa1 	.word	0x08025fa1
 8026008:	08025fa1 	.word	0x08025fa1
 802600c:	0802611b 	.word	0x0802611b
 8026010:	682b      	ldr	r3, [r5, #0]
 8026012:	1d1a      	adds	r2, r3, #4
 8026014:	681b      	ldr	r3, [r3, #0]
 8026016:	602a      	str	r2, [r5, #0]
 8026018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802601c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026020:	2301      	movs	r3, #1
 8026022:	e0a3      	b.n	802616c <_printf_i+0x1f4>
 8026024:	6820      	ldr	r0, [r4, #0]
 8026026:	6829      	ldr	r1, [r5, #0]
 8026028:	0606      	lsls	r6, r0, #24
 802602a:	f101 0304 	add.w	r3, r1, #4
 802602e:	d50a      	bpl.n	8026046 <_printf_i+0xce>
 8026030:	680e      	ldr	r6, [r1, #0]
 8026032:	602b      	str	r3, [r5, #0]
 8026034:	2e00      	cmp	r6, #0
 8026036:	da03      	bge.n	8026040 <_printf_i+0xc8>
 8026038:	232d      	movs	r3, #45	; 0x2d
 802603a:	4276      	negs	r6, r6
 802603c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026040:	485e      	ldr	r0, [pc, #376]	; (80261bc <_printf_i+0x244>)
 8026042:	230a      	movs	r3, #10
 8026044:	e019      	b.n	802607a <_printf_i+0x102>
 8026046:	680e      	ldr	r6, [r1, #0]
 8026048:	602b      	str	r3, [r5, #0]
 802604a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802604e:	bf18      	it	ne
 8026050:	b236      	sxthne	r6, r6
 8026052:	e7ef      	b.n	8026034 <_printf_i+0xbc>
 8026054:	682b      	ldr	r3, [r5, #0]
 8026056:	6820      	ldr	r0, [r4, #0]
 8026058:	1d19      	adds	r1, r3, #4
 802605a:	6029      	str	r1, [r5, #0]
 802605c:	0601      	lsls	r1, r0, #24
 802605e:	d501      	bpl.n	8026064 <_printf_i+0xec>
 8026060:	681e      	ldr	r6, [r3, #0]
 8026062:	e002      	b.n	802606a <_printf_i+0xf2>
 8026064:	0646      	lsls	r6, r0, #25
 8026066:	d5fb      	bpl.n	8026060 <_printf_i+0xe8>
 8026068:	881e      	ldrh	r6, [r3, #0]
 802606a:	4854      	ldr	r0, [pc, #336]	; (80261bc <_printf_i+0x244>)
 802606c:	2f6f      	cmp	r7, #111	; 0x6f
 802606e:	bf0c      	ite	eq
 8026070:	2308      	moveq	r3, #8
 8026072:	230a      	movne	r3, #10
 8026074:	2100      	movs	r1, #0
 8026076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802607a:	6865      	ldr	r5, [r4, #4]
 802607c:	60a5      	str	r5, [r4, #8]
 802607e:	2d00      	cmp	r5, #0
 8026080:	bfa2      	ittt	ge
 8026082:	6821      	ldrge	r1, [r4, #0]
 8026084:	f021 0104 	bicge.w	r1, r1, #4
 8026088:	6021      	strge	r1, [r4, #0]
 802608a:	b90e      	cbnz	r6, 8026090 <_printf_i+0x118>
 802608c:	2d00      	cmp	r5, #0
 802608e:	d04d      	beq.n	802612c <_printf_i+0x1b4>
 8026090:	4615      	mov	r5, r2
 8026092:	fbb6 f1f3 	udiv	r1, r6, r3
 8026096:	fb03 6711 	mls	r7, r3, r1, r6
 802609a:	5dc7      	ldrb	r7, [r0, r7]
 802609c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80260a0:	4637      	mov	r7, r6
 80260a2:	42bb      	cmp	r3, r7
 80260a4:	460e      	mov	r6, r1
 80260a6:	d9f4      	bls.n	8026092 <_printf_i+0x11a>
 80260a8:	2b08      	cmp	r3, #8
 80260aa:	d10b      	bne.n	80260c4 <_printf_i+0x14c>
 80260ac:	6823      	ldr	r3, [r4, #0]
 80260ae:	07de      	lsls	r6, r3, #31
 80260b0:	d508      	bpl.n	80260c4 <_printf_i+0x14c>
 80260b2:	6923      	ldr	r3, [r4, #16]
 80260b4:	6861      	ldr	r1, [r4, #4]
 80260b6:	4299      	cmp	r1, r3
 80260b8:	bfde      	ittt	le
 80260ba:	2330      	movle	r3, #48	; 0x30
 80260bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80260c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80260c4:	1b52      	subs	r2, r2, r5
 80260c6:	6122      	str	r2, [r4, #16]
 80260c8:	f8cd a000 	str.w	sl, [sp]
 80260cc:	464b      	mov	r3, r9
 80260ce:	aa03      	add	r2, sp, #12
 80260d0:	4621      	mov	r1, r4
 80260d2:	4640      	mov	r0, r8
 80260d4:	f7ff fee2 	bl	8025e9c <_printf_common>
 80260d8:	3001      	adds	r0, #1
 80260da:	d14c      	bne.n	8026176 <_printf_i+0x1fe>
 80260dc:	f04f 30ff 	mov.w	r0, #4294967295
 80260e0:	b004      	add	sp, #16
 80260e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80260e6:	4835      	ldr	r0, [pc, #212]	; (80261bc <_printf_i+0x244>)
 80260e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80260ec:	6829      	ldr	r1, [r5, #0]
 80260ee:	6823      	ldr	r3, [r4, #0]
 80260f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80260f4:	6029      	str	r1, [r5, #0]
 80260f6:	061d      	lsls	r5, r3, #24
 80260f8:	d514      	bpl.n	8026124 <_printf_i+0x1ac>
 80260fa:	07df      	lsls	r7, r3, #31
 80260fc:	bf44      	itt	mi
 80260fe:	f043 0320 	orrmi.w	r3, r3, #32
 8026102:	6023      	strmi	r3, [r4, #0]
 8026104:	b91e      	cbnz	r6, 802610e <_printf_i+0x196>
 8026106:	6823      	ldr	r3, [r4, #0]
 8026108:	f023 0320 	bic.w	r3, r3, #32
 802610c:	6023      	str	r3, [r4, #0]
 802610e:	2310      	movs	r3, #16
 8026110:	e7b0      	b.n	8026074 <_printf_i+0xfc>
 8026112:	6823      	ldr	r3, [r4, #0]
 8026114:	f043 0320 	orr.w	r3, r3, #32
 8026118:	6023      	str	r3, [r4, #0]
 802611a:	2378      	movs	r3, #120	; 0x78
 802611c:	4828      	ldr	r0, [pc, #160]	; (80261c0 <_printf_i+0x248>)
 802611e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8026122:	e7e3      	b.n	80260ec <_printf_i+0x174>
 8026124:	0659      	lsls	r1, r3, #25
 8026126:	bf48      	it	mi
 8026128:	b2b6      	uxthmi	r6, r6
 802612a:	e7e6      	b.n	80260fa <_printf_i+0x182>
 802612c:	4615      	mov	r5, r2
 802612e:	e7bb      	b.n	80260a8 <_printf_i+0x130>
 8026130:	682b      	ldr	r3, [r5, #0]
 8026132:	6826      	ldr	r6, [r4, #0]
 8026134:	6961      	ldr	r1, [r4, #20]
 8026136:	1d18      	adds	r0, r3, #4
 8026138:	6028      	str	r0, [r5, #0]
 802613a:	0635      	lsls	r5, r6, #24
 802613c:	681b      	ldr	r3, [r3, #0]
 802613e:	d501      	bpl.n	8026144 <_printf_i+0x1cc>
 8026140:	6019      	str	r1, [r3, #0]
 8026142:	e002      	b.n	802614a <_printf_i+0x1d2>
 8026144:	0670      	lsls	r0, r6, #25
 8026146:	d5fb      	bpl.n	8026140 <_printf_i+0x1c8>
 8026148:	8019      	strh	r1, [r3, #0]
 802614a:	2300      	movs	r3, #0
 802614c:	6123      	str	r3, [r4, #16]
 802614e:	4615      	mov	r5, r2
 8026150:	e7ba      	b.n	80260c8 <_printf_i+0x150>
 8026152:	682b      	ldr	r3, [r5, #0]
 8026154:	1d1a      	adds	r2, r3, #4
 8026156:	602a      	str	r2, [r5, #0]
 8026158:	681d      	ldr	r5, [r3, #0]
 802615a:	6862      	ldr	r2, [r4, #4]
 802615c:	2100      	movs	r1, #0
 802615e:	4628      	mov	r0, r5
 8026160:	f7da f8d6 	bl	8000310 <memchr>
 8026164:	b108      	cbz	r0, 802616a <_printf_i+0x1f2>
 8026166:	1b40      	subs	r0, r0, r5
 8026168:	6060      	str	r0, [r4, #4]
 802616a:	6863      	ldr	r3, [r4, #4]
 802616c:	6123      	str	r3, [r4, #16]
 802616e:	2300      	movs	r3, #0
 8026170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026174:	e7a8      	b.n	80260c8 <_printf_i+0x150>
 8026176:	6923      	ldr	r3, [r4, #16]
 8026178:	462a      	mov	r2, r5
 802617a:	4649      	mov	r1, r9
 802617c:	4640      	mov	r0, r8
 802617e:	47d0      	blx	sl
 8026180:	3001      	adds	r0, #1
 8026182:	d0ab      	beq.n	80260dc <_printf_i+0x164>
 8026184:	6823      	ldr	r3, [r4, #0]
 8026186:	079b      	lsls	r3, r3, #30
 8026188:	d413      	bmi.n	80261b2 <_printf_i+0x23a>
 802618a:	68e0      	ldr	r0, [r4, #12]
 802618c:	9b03      	ldr	r3, [sp, #12]
 802618e:	4298      	cmp	r0, r3
 8026190:	bfb8      	it	lt
 8026192:	4618      	movlt	r0, r3
 8026194:	e7a4      	b.n	80260e0 <_printf_i+0x168>
 8026196:	2301      	movs	r3, #1
 8026198:	4632      	mov	r2, r6
 802619a:	4649      	mov	r1, r9
 802619c:	4640      	mov	r0, r8
 802619e:	47d0      	blx	sl
 80261a0:	3001      	adds	r0, #1
 80261a2:	d09b      	beq.n	80260dc <_printf_i+0x164>
 80261a4:	3501      	adds	r5, #1
 80261a6:	68e3      	ldr	r3, [r4, #12]
 80261a8:	9903      	ldr	r1, [sp, #12]
 80261aa:	1a5b      	subs	r3, r3, r1
 80261ac:	42ab      	cmp	r3, r5
 80261ae:	dcf2      	bgt.n	8026196 <_printf_i+0x21e>
 80261b0:	e7eb      	b.n	802618a <_printf_i+0x212>
 80261b2:	2500      	movs	r5, #0
 80261b4:	f104 0619 	add.w	r6, r4, #25
 80261b8:	e7f5      	b.n	80261a6 <_printf_i+0x22e>
 80261ba:	bf00      	nop
 80261bc:	080c3156 	.word	0x080c3156
 80261c0:	080c3167 	.word	0x080c3167

080261c4 <_sbrk_r>:
 80261c4:	b538      	push	{r3, r4, r5, lr}
 80261c6:	4d06      	ldr	r5, [pc, #24]	; (80261e0 <_sbrk_r+0x1c>)
 80261c8:	2300      	movs	r3, #0
 80261ca:	4604      	mov	r4, r0
 80261cc:	4608      	mov	r0, r1
 80261ce:	602b      	str	r3, [r5, #0]
 80261d0:	f002 fca8 	bl	8028b24 <_sbrk>
 80261d4:	1c43      	adds	r3, r0, #1
 80261d6:	d102      	bne.n	80261de <_sbrk_r+0x1a>
 80261d8:	682b      	ldr	r3, [r5, #0]
 80261da:	b103      	cbz	r3, 80261de <_sbrk_r+0x1a>
 80261dc:	6023      	str	r3, [r4, #0]
 80261de:	bd38      	pop	{r3, r4, r5, pc}
 80261e0:	2400a76c 	.word	0x2400a76c

080261e4 <siprintf>:
 80261e4:	b40e      	push	{r1, r2, r3}
 80261e6:	b500      	push	{lr}
 80261e8:	b09c      	sub	sp, #112	; 0x70
 80261ea:	ab1d      	add	r3, sp, #116	; 0x74
 80261ec:	9002      	str	r0, [sp, #8]
 80261ee:	9006      	str	r0, [sp, #24]
 80261f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80261f4:	4809      	ldr	r0, [pc, #36]	; (802621c <siprintf+0x38>)
 80261f6:	9107      	str	r1, [sp, #28]
 80261f8:	9104      	str	r1, [sp, #16]
 80261fa:	4909      	ldr	r1, [pc, #36]	; (8026220 <siprintf+0x3c>)
 80261fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8026200:	9105      	str	r1, [sp, #20]
 8026202:	6800      	ldr	r0, [r0, #0]
 8026204:	9301      	str	r3, [sp, #4]
 8026206:	a902      	add	r1, sp, #8
 8026208:	f001 fa4c 	bl	80276a4 <_svfiprintf_r>
 802620c:	9b02      	ldr	r3, [sp, #8]
 802620e:	2200      	movs	r2, #0
 8026210:	701a      	strb	r2, [r3, #0]
 8026212:	b01c      	add	sp, #112	; 0x70
 8026214:	f85d eb04 	ldr.w	lr, [sp], #4
 8026218:	b003      	add	sp, #12
 802621a:	4770      	bx	lr
 802621c:	240074fc 	.word	0x240074fc
 8026220:	ffff0208 	.word	0xffff0208

08026224 <stpcpy>:
 8026224:	4603      	mov	r3, r0
 8026226:	f811 2b01 	ldrb.w	r2, [r1], #1
 802622a:	4618      	mov	r0, r3
 802622c:	f803 2b01 	strb.w	r2, [r3], #1
 8026230:	2a00      	cmp	r2, #0
 8026232:	d1f8      	bne.n	8026226 <stpcpy+0x2>
 8026234:	4770      	bx	lr

08026236 <strcpy>:
 8026236:	4603      	mov	r3, r0
 8026238:	f811 2b01 	ldrb.w	r2, [r1], #1
 802623c:	f803 2b01 	strb.w	r2, [r3], #1
 8026240:	2a00      	cmp	r2, #0
 8026242:	d1f9      	bne.n	8026238 <strcpy+0x2>
 8026244:	4770      	bx	lr

08026246 <quorem>:
 8026246:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802624a:	6903      	ldr	r3, [r0, #16]
 802624c:	690c      	ldr	r4, [r1, #16]
 802624e:	42a3      	cmp	r3, r4
 8026250:	4607      	mov	r7, r0
 8026252:	f2c0 8081 	blt.w	8026358 <quorem+0x112>
 8026256:	3c01      	subs	r4, #1
 8026258:	f101 0814 	add.w	r8, r1, #20
 802625c:	f100 0514 	add.w	r5, r0, #20
 8026260:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026264:	9301      	str	r3, [sp, #4]
 8026266:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802626a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802626e:	3301      	adds	r3, #1
 8026270:	429a      	cmp	r2, r3
 8026272:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8026276:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802627a:	fbb2 f6f3 	udiv	r6, r2, r3
 802627e:	d331      	bcc.n	80262e4 <quorem+0x9e>
 8026280:	f04f 0e00 	mov.w	lr, #0
 8026284:	4640      	mov	r0, r8
 8026286:	46ac      	mov	ip, r5
 8026288:	46f2      	mov	sl, lr
 802628a:	f850 2b04 	ldr.w	r2, [r0], #4
 802628e:	b293      	uxth	r3, r2
 8026290:	fb06 e303 	mla	r3, r6, r3, lr
 8026294:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8026298:	b29b      	uxth	r3, r3
 802629a:	ebaa 0303 	sub.w	r3, sl, r3
 802629e:	f8dc a000 	ldr.w	sl, [ip]
 80262a2:	0c12      	lsrs	r2, r2, #16
 80262a4:	fa13 f38a 	uxtah	r3, r3, sl
 80262a8:	fb06 e202 	mla	r2, r6, r2, lr
 80262ac:	9300      	str	r3, [sp, #0]
 80262ae:	9b00      	ldr	r3, [sp, #0]
 80262b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80262b4:	b292      	uxth	r2, r2
 80262b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80262ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80262be:	f8bd 3000 	ldrh.w	r3, [sp]
 80262c2:	4581      	cmp	r9, r0
 80262c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80262c8:	f84c 3b04 	str.w	r3, [ip], #4
 80262cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80262d0:	d2db      	bcs.n	802628a <quorem+0x44>
 80262d2:	f855 300b 	ldr.w	r3, [r5, fp]
 80262d6:	b92b      	cbnz	r3, 80262e4 <quorem+0x9e>
 80262d8:	9b01      	ldr	r3, [sp, #4]
 80262da:	3b04      	subs	r3, #4
 80262dc:	429d      	cmp	r5, r3
 80262de:	461a      	mov	r2, r3
 80262e0:	d32e      	bcc.n	8026340 <quorem+0xfa>
 80262e2:	613c      	str	r4, [r7, #16]
 80262e4:	4638      	mov	r0, r7
 80262e6:	f001 f83b 	bl	8027360 <__mcmp>
 80262ea:	2800      	cmp	r0, #0
 80262ec:	db24      	blt.n	8026338 <quorem+0xf2>
 80262ee:	3601      	adds	r6, #1
 80262f0:	4628      	mov	r0, r5
 80262f2:	f04f 0c00 	mov.w	ip, #0
 80262f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80262fa:	f8d0 e000 	ldr.w	lr, [r0]
 80262fe:	b293      	uxth	r3, r2
 8026300:	ebac 0303 	sub.w	r3, ip, r3
 8026304:	0c12      	lsrs	r2, r2, #16
 8026306:	fa13 f38e 	uxtah	r3, r3, lr
 802630a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802630e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026312:	b29b      	uxth	r3, r3
 8026314:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026318:	45c1      	cmp	r9, r8
 802631a:	f840 3b04 	str.w	r3, [r0], #4
 802631e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8026322:	d2e8      	bcs.n	80262f6 <quorem+0xb0>
 8026324:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026328:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802632c:	b922      	cbnz	r2, 8026338 <quorem+0xf2>
 802632e:	3b04      	subs	r3, #4
 8026330:	429d      	cmp	r5, r3
 8026332:	461a      	mov	r2, r3
 8026334:	d30a      	bcc.n	802634c <quorem+0x106>
 8026336:	613c      	str	r4, [r7, #16]
 8026338:	4630      	mov	r0, r6
 802633a:	b003      	add	sp, #12
 802633c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026340:	6812      	ldr	r2, [r2, #0]
 8026342:	3b04      	subs	r3, #4
 8026344:	2a00      	cmp	r2, #0
 8026346:	d1cc      	bne.n	80262e2 <quorem+0x9c>
 8026348:	3c01      	subs	r4, #1
 802634a:	e7c7      	b.n	80262dc <quorem+0x96>
 802634c:	6812      	ldr	r2, [r2, #0]
 802634e:	3b04      	subs	r3, #4
 8026350:	2a00      	cmp	r2, #0
 8026352:	d1f0      	bne.n	8026336 <quorem+0xf0>
 8026354:	3c01      	subs	r4, #1
 8026356:	e7eb      	b.n	8026330 <quorem+0xea>
 8026358:	2000      	movs	r0, #0
 802635a:	e7ee      	b.n	802633a <quorem+0xf4>
 802635c:	0000      	movs	r0, r0
	...

08026360 <_dtoa_r>:
 8026360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026364:	ed2d 8b02 	vpush	{d8}
 8026368:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802636a:	b091      	sub	sp, #68	; 0x44
 802636c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8026370:	ec59 8b10 	vmov	r8, r9, d0
 8026374:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026376:	9106      	str	r1, [sp, #24]
 8026378:	4606      	mov	r6, r0
 802637a:	9208      	str	r2, [sp, #32]
 802637c:	930c      	str	r3, [sp, #48]	; 0x30
 802637e:	b975      	cbnz	r5, 802639e <_dtoa_r+0x3e>
 8026380:	2010      	movs	r0, #16
 8026382:	f7ff f9d7 	bl	8025734 <malloc>
 8026386:	4602      	mov	r2, r0
 8026388:	6270      	str	r0, [r6, #36]	; 0x24
 802638a:	b920      	cbnz	r0, 8026396 <_dtoa_r+0x36>
 802638c:	4baa      	ldr	r3, [pc, #680]	; (8026638 <_dtoa_r+0x2d8>)
 802638e:	21ea      	movs	r1, #234	; 0xea
 8026390:	48aa      	ldr	r0, [pc, #680]	; (802663c <_dtoa_r+0x2dc>)
 8026392:	f001 fa87 	bl	80278a4 <__assert_func>
 8026396:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802639a:	6005      	str	r5, [r0, #0]
 802639c:	60c5      	str	r5, [r0, #12]
 802639e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80263a0:	6819      	ldr	r1, [r3, #0]
 80263a2:	b151      	cbz	r1, 80263ba <_dtoa_r+0x5a>
 80263a4:	685a      	ldr	r2, [r3, #4]
 80263a6:	604a      	str	r2, [r1, #4]
 80263a8:	2301      	movs	r3, #1
 80263aa:	4093      	lsls	r3, r2
 80263ac:	608b      	str	r3, [r1, #8]
 80263ae:	4630      	mov	r0, r6
 80263b0:	f000 fd94 	bl	8026edc <_Bfree>
 80263b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80263b6:	2200      	movs	r2, #0
 80263b8:	601a      	str	r2, [r3, #0]
 80263ba:	f1b9 0300 	subs.w	r3, r9, #0
 80263be:	bfbb      	ittet	lt
 80263c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80263c4:	9303      	strlt	r3, [sp, #12]
 80263c6:	2300      	movge	r3, #0
 80263c8:	2201      	movlt	r2, #1
 80263ca:	bfac      	ite	ge
 80263cc:	6023      	strge	r3, [r4, #0]
 80263ce:	6022      	strlt	r2, [r4, #0]
 80263d0:	4b9b      	ldr	r3, [pc, #620]	; (8026640 <_dtoa_r+0x2e0>)
 80263d2:	9c03      	ldr	r4, [sp, #12]
 80263d4:	43a3      	bics	r3, r4
 80263d6:	d11c      	bne.n	8026412 <_dtoa_r+0xb2>
 80263d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80263da:	f242 730f 	movw	r3, #9999	; 0x270f
 80263de:	6013      	str	r3, [r2, #0]
 80263e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80263e4:	ea53 0308 	orrs.w	r3, r3, r8
 80263e8:	f000 84fd 	beq.w	8026de6 <_dtoa_r+0xa86>
 80263ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80263ee:	b963      	cbnz	r3, 802640a <_dtoa_r+0xaa>
 80263f0:	4b94      	ldr	r3, [pc, #592]	; (8026644 <_dtoa_r+0x2e4>)
 80263f2:	e01f      	b.n	8026434 <_dtoa_r+0xd4>
 80263f4:	4b94      	ldr	r3, [pc, #592]	; (8026648 <_dtoa_r+0x2e8>)
 80263f6:	9301      	str	r3, [sp, #4]
 80263f8:	3308      	adds	r3, #8
 80263fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80263fc:	6013      	str	r3, [r2, #0]
 80263fe:	9801      	ldr	r0, [sp, #4]
 8026400:	b011      	add	sp, #68	; 0x44
 8026402:	ecbd 8b02 	vpop	{d8}
 8026406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802640a:	4b8e      	ldr	r3, [pc, #568]	; (8026644 <_dtoa_r+0x2e4>)
 802640c:	9301      	str	r3, [sp, #4]
 802640e:	3303      	adds	r3, #3
 8026410:	e7f3      	b.n	80263fa <_dtoa_r+0x9a>
 8026412:	ed9d 8b02 	vldr	d8, [sp, #8]
 8026416:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802641a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802641e:	d10b      	bne.n	8026438 <_dtoa_r+0xd8>
 8026420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026422:	2301      	movs	r3, #1
 8026424:	6013      	str	r3, [r2, #0]
 8026426:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026428:	2b00      	cmp	r3, #0
 802642a:	f000 84d9 	beq.w	8026de0 <_dtoa_r+0xa80>
 802642e:	4887      	ldr	r0, [pc, #540]	; (802664c <_dtoa_r+0x2ec>)
 8026430:	6018      	str	r0, [r3, #0]
 8026432:	1e43      	subs	r3, r0, #1
 8026434:	9301      	str	r3, [sp, #4]
 8026436:	e7e2      	b.n	80263fe <_dtoa_r+0x9e>
 8026438:	a90f      	add	r1, sp, #60	; 0x3c
 802643a:	aa0e      	add	r2, sp, #56	; 0x38
 802643c:	4630      	mov	r0, r6
 802643e:	eeb0 0b48 	vmov.f64	d0, d8
 8026442:	f001 f833 	bl	80274ac <__d2b>
 8026446:	f3c4 510a 	ubfx	r1, r4, #20, #11
 802644a:	4605      	mov	r5, r0
 802644c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802644e:	2900      	cmp	r1, #0
 8026450:	d046      	beq.n	80264e0 <_dtoa_r+0x180>
 8026452:	ee18 4a90 	vmov	r4, s17
 8026456:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802645a:	ec53 2b18 	vmov	r2, r3, d8
 802645e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8026462:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8026466:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802646a:	2400      	movs	r4, #0
 802646c:	ec43 2b16 	vmov	d6, r2, r3
 8026470:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8026474:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8026620 <_dtoa_r+0x2c0>
 8026478:	ee36 7b47 	vsub.f64	d7, d6, d7
 802647c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8026628 <_dtoa_r+0x2c8>
 8026480:	eea7 6b05 	vfma.f64	d6, d7, d5
 8026484:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8026630 <_dtoa_r+0x2d0>
 8026488:	ee07 1a90 	vmov	s15, r1
 802648c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8026490:	eeb0 7b46 	vmov.f64	d7, d6
 8026494:	eea4 7b05 	vfma.f64	d7, d4, d5
 8026498:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802649c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80264a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80264a4:	ee16 ba90 	vmov	fp, s13
 80264a8:	940a      	str	r4, [sp, #40]	; 0x28
 80264aa:	d508      	bpl.n	80264be <_dtoa_r+0x15e>
 80264ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80264b0:	eeb4 6b47 	vcmp.f64	d6, d7
 80264b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80264b8:	bf18      	it	ne
 80264ba:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80264be:	f1bb 0f16 	cmp.w	fp, #22
 80264c2:	d82f      	bhi.n	8026524 <_dtoa_r+0x1c4>
 80264c4:	4b62      	ldr	r3, [pc, #392]	; (8026650 <_dtoa_r+0x2f0>)
 80264c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80264ca:	ed93 7b00 	vldr	d7, [r3]
 80264ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80264d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80264d6:	d501      	bpl.n	80264dc <_dtoa_r+0x17c>
 80264d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80264dc:	2300      	movs	r3, #0
 80264de:	e022      	b.n	8026526 <_dtoa_r+0x1c6>
 80264e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80264e2:	4401      	add	r1, r0
 80264e4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80264e8:	2b20      	cmp	r3, #32
 80264ea:	bfc1      	itttt	gt
 80264ec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80264f0:	fa04 f303 	lslgt.w	r3, r4, r3
 80264f4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80264f8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80264fc:	bfd6      	itet	le
 80264fe:	f1c3 0320 	rsble	r3, r3, #32
 8026502:	ea43 0808 	orrgt.w	r8, r3, r8
 8026506:	fa08 f803 	lslle.w	r8, r8, r3
 802650a:	ee07 8a90 	vmov	s15, r8
 802650e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8026512:	3901      	subs	r1, #1
 8026514:	ee17 4a90 	vmov	r4, s15
 8026518:	ec53 2b17 	vmov	r2, r3, d7
 802651c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8026520:	2401      	movs	r4, #1
 8026522:	e7a3      	b.n	802646c <_dtoa_r+0x10c>
 8026524:	2301      	movs	r3, #1
 8026526:	930b      	str	r3, [sp, #44]	; 0x2c
 8026528:	1a43      	subs	r3, r0, r1
 802652a:	1e5a      	subs	r2, r3, #1
 802652c:	bf45      	ittet	mi
 802652e:	f1c3 0301 	rsbmi	r3, r3, #1
 8026532:	9304      	strmi	r3, [sp, #16]
 8026534:	2300      	movpl	r3, #0
 8026536:	2300      	movmi	r3, #0
 8026538:	9205      	str	r2, [sp, #20]
 802653a:	bf54      	ite	pl
 802653c:	9304      	strpl	r3, [sp, #16]
 802653e:	9305      	strmi	r3, [sp, #20]
 8026540:	f1bb 0f00 	cmp.w	fp, #0
 8026544:	db18      	blt.n	8026578 <_dtoa_r+0x218>
 8026546:	9b05      	ldr	r3, [sp, #20]
 8026548:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 802654c:	445b      	add	r3, fp
 802654e:	9305      	str	r3, [sp, #20]
 8026550:	2300      	movs	r3, #0
 8026552:	9a06      	ldr	r2, [sp, #24]
 8026554:	2a09      	cmp	r2, #9
 8026556:	d849      	bhi.n	80265ec <_dtoa_r+0x28c>
 8026558:	2a05      	cmp	r2, #5
 802655a:	bfc4      	itt	gt
 802655c:	3a04      	subgt	r2, #4
 802655e:	9206      	strgt	r2, [sp, #24]
 8026560:	9a06      	ldr	r2, [sp, #24]
 8026562:	f1a2 0202 	sub.w	r2, r2, #2
 8026566:	bfcc      	ite	gt
 8026568:	2400      	movgt	r4, #0
 802656a:	2401      	movle	r4, #1
 802656c:	2a03      	cmp	r2, #3
 802656e:	d848      	bhi.n	8026602 <_dtoa_r+0x2a2>
 8026570:	e8df f002 	tbb	[pc, r2]
 8026574:	3a2c2e0b 	.word	0x3a2c2e0b
 8026578:	9b04      	ldr	r3, [sp, #16]
 802657a:	2200      	movs	r2, #0
 802657c:	eba3 030b 	sub.w	r3, r3, fp
 8026580:	9304      	str	r3, [sp, #16]
 8026582:	9209      	str	r2, [sp, #36]	; 0x24
 8026584:	f1cb 0300 	rsb	r3, fp, #0
 8026588:	e7e3      	b.n	8026552 <_dtoa_r+0x1f2>
 802658a:	2200      	movs	r2, #0
 802658c:	9207      	str	r2, [sp, #28]
 802658e:	9a08      	ldr	r2, [sp, #32]
 8026590:	2a00      	cmp	r2, #0
 8026592:	dc39      	bgt.n	8026608 <_dtoa_r+0x2a8>
 8026594:	f04f 0a01 	mov.w	sl, #1
 8026598:	46d1      	mov	r9, sl
 802659a:	4652      	mov	r2, sl
 802659c:	f8cd a020 	str.w	sl, [sp, #32]
 80265a0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80265a2:	2100      	movs	r1, #0
 80265a4:	6079      	str	r1, [r7, #4]
 80265a6:	2004      	movs	r0, #4
 80265a8:	f100 0c14 	add.w	ip, r0, #20
 80265ac:	4594      	cmp	ip, r2
 80265ae:	6879      	ldr	r1, [r7, #4]
 80265b0:	d92f      	bls.n	8026612 <_dtoa_r+0x2b2>
 80265b2:	4630      	mov	r0, r6
 80265b4:	930d      	str	r3, [sp, #52]	; 0x34
 80265b6:	f000 fc51 	bl	8026e5c <_Balloc>
 80265ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80265bc:	9001      	str	r0, [sp, #4]
 80265be:	4602      	mov	r2, r0
 80265c0:	2800      	cmp	r0, #0
 80265c2:	d149      	bne.n	8026658 <_dtoa_r+0x2f8>
 80265c4:	4b23      	ldr	r3, [pc, #140]	; (8026654 <_dtoa_r+0x2f4>)
 80265c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80265ca:	e6e1      	b.n	8026390 <_dtoa_r+0x30>
 80265cc:	2201      	movs	r2, #1
 80265ce:	e7dd      	b.n	802658c <_dtoa_r+0x22c>
 80265d0:	2200      	movs	r2, #0
 80265d2:	9207      	str	r2, [sp, #28]
 80265d4:	9a08      	ldr	r2, [sp, #32]
 80265d6:	eb0b 0a02 	add.w	sl, fp, r2
 80265da:	f10a 0901 	add.w	r9, sl, #1
 80265de:	464a      	mov	r2, r9
 80265e0:	2a01      	cmp	r2, #1
 80265e2:	bfb8      	it	lt
 80265e4:	2201      	movlt	r2, #1
 80265e6:	e7db      	b.n	80265a0 <_dtoa_r+0x240>
 80265e8:	2201      	movs	r2, #1
 80265ea:	e7f2      	b.n	80265d2 <_dtoa_r+0x272>
 80265ec:	2401      	movs	r4, #1
 80265ee:	2200      	movs	r2, #0
 80265f0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80265f4:	f04f 3aff 	mov.w	sl, #4294967295
 80265f8:	2100      	movs	r1, #0
 80265fa:	46d1      	mov	r9, sl
 80265fc:	2212      	movs	r2, #18
 80265fe:	9108      	str	r1, [sp, #32]
 8026600:	e7ce      	b.n	80265a0 <_dtoa_r+0x240>
 8026602:	2201      	movs	r2, #1
 8026604:	9207      	str	r2, [sp, #28]
 8026606:	e7f5      	b.n	80265f4 <_dtoa_r+0x294>
 8026608:	f8dd a020 	ldr.w	sl, [sp, #32]
 802660c:	46d1      	mov	r9, sl
 802660e:	4652      	mov	r2, sl
 8026610:	e7c6      	b.n	80265a0 <_dtoa_r+0x240>
 8026612:	3101      	adds	r1, #1
 8026614:	6079      	str	r1, [r7, #4]
 8026616:	0040      	lsls	r0, r0, #1
 8026618:	e7c6      	b.n	80265a8 <_dtoa_r+0x248>
 802661a:	bf00      	nop
 802661c:	f3af 8000 	nop.w
 8026620:	636f4361 	.word	0x636f4361
 8026624:	3fd287a7 	.word	0x3fd287a7
 8026628:	8b60c8b3 	.word	0x8b60c8b3
 802662c:	3fc68a28 	.word	0x3fc68a28
 8026630:	509f79fb 	.word	0x509f79fb
 8026634:	3fd34413 	.word	0x3fd34413
 8026638:	080c3185 	.word	0x080c3185
 802663c:	080c319c 	.word	0x080c319c
 8026640:	7ff00000 	.word	0x7ff00000
 8026644:	080c3181 	.word	0x080c3181
 8026648:	080c3178 	.word	0x080c3178
 802664c:	080c3155 	.word	0x080c3155
 8026650:	080c3290 	.word	0x080c3290
 8026654:	080c31f7 	.word	0x080c31f7
 8026658:	6a72      	ldr	r2, [r6, #36]	; 0x24
 802665a:	9901      	ldr	r1, [sp, #4]
 802665c:	6011      	str	r1, [r2, #0]
 802665e:	f1b9 0f0e 	cmp.w	r9, #14
 8026662:	d86c      	bhi.n	802673e <_dtoa_r+0x3de>
 8026664:	2c00      	cmp	r4, #0
 8026666:	d06a      	beq.n	802673e <_dtoa_r+0x3de>
 8026668:	f1bb 0f00 	cmp.w	fp, #0
 802666c:	f340 80a0 	ble.w	80267b0 <_dtoa_r+0x450>
 8026670:	49c1      	ldr	r1, [pc, #772]	; (8026978 <_dtoa_r+0x618>)
 8026672:	f00b 020f 	and.w	r2, fp, #15
 8026676:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802667a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802667e:	ed92 7b00 	vldr	d7, [r2]
 8026682:	ea4f 112b 	mov.w	r1, fp, asr #4
 8026686:	f000 8087 	beq.w	8026798 <_dtoa_r+0x438>
 802668a:	4abc      	ldr	r2, [pc, #752]	; (802697c <_dtoa_r+0x61c>)
 802668c:	ed92 6b08 	vldr	d6, [r2, #32]
 8026690:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8026694:	ed8d 6b02 	vstr	d6, [sp, #8]
 8026698:	f001 010f 	and.w	r1, r1, #15
 802669c:	2203      	movs	r2, #3
 802669e:	48b7      	ldr	r0, [pc, #732]	; (802697c <_dtoa_r+0x61c>)
 80266a0:	2900      	cmp	r1, #0
 80266a2:	d17b      	bne.n	802679c <_dtoa_r+0x43c>
 80266a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80266a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80266ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80266b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80266b2:	2900      	cmp	r1, #0
 80266b4:	f000 80a2 	beq.w	80267fc <_dtoa_r+0x49c>
 80266b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80266bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80266c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80266c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80266c8:	f140 8098 	bpl.w	80267fc <_dtoa_r+0x49c>
 80266cc:	f1b9 0f00 	cmp.w	r9, #0
 80266d0:	f000 8094 	beq.w	80267fc <_dtoa_r+0x49c>
 80266d4:	f1ba 0f00 	cmp.w	sl, #0
 80266d8:	dd2f      	ble.n	802673a <_dtoa_r+0x3da>
 80266da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80266de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80266e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80266e6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80266ea:	3201      	adds	r2, #1
 80266ec:	4650      	mov	r0, sl
 80266ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 80266f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80266f6:	ee07 2a90 	vmov	s15, r2
 80266fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80266fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 8026702:	ee15 4a90 	vmov	r4, s11
 8026706:	ec52 1b15 	vmov	r1, r2, d5
 802670a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 802670e:	2800      	cmp	r0, #0
 8026710:	d177      	bne.n	8026802 <_dtoa_r+0x4a2>
 8026712:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8026716:	ee36 6b47 	vsub.f64	d6, d6, d7
 802671a:	ec42 1b17 	vmov	d7, r1, r2
 802671e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026726:	f300 8263 	bgt.w	8026bf0 <_dtoa_r+0x890>
 802672a:	eeb1 7b47 	vneg.f64	d7, d7
 802672e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026736:	f100 8258 	bmi.w	8026bea <_dtoa_r+0x88a>
 802673a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802673e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026740:	2a00      	cmp	r2, #0
 8026742:	f2c0 811d 	blt.w	8026980 <_dtoa_r+0x620>
 8026746:	f1bb 0f0e 	cmp.w	fp, #14
 802674a:	f300 8119 	bgt.w	8026980 <_dtoa_r+0x620>
 802674e:	4b8a      	ldr	r3, [pc, #552]	; (8026978 <_dtoa_r+0x618>)
 8026750:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8026754:	ed93 6b00 	vldr	d6, [r3]
 8026758:	9b08      	ldr	r3, [sp, #32]
 802675a:	2b00      	cmp	r3, #0
 802675c:	f280 80b7 	bge.w	80268ce <_dtoa_r+0x56e>
 8026760:	f1b9 0f00 	cmp.w	r9, #0
 8026764:	f300 80b3 	bgt.w	80268ce <_dtoa_r+0x56e>
 8026768:	f040 823f 	bne.w	8026bea <_dtoa_r+0x88a>
 802676c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8026770:	ee26 6b07 	vmul.f64	d6, d6, d7
 8026774:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026778:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802677c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026780:	464c      	mov	r4, r9
 8026782:	464f      	mov	r7, r9
 8026784:	f280 8215 	bge.w	8026bb2 <_dtoa_r+0x852>
 8026788:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802678c:	2331      	movs	r3, #49	; 0x31
 802678e:	f808 3b01 	strb.w	r3, [r8], #1
 8026792:	f10b 0b01 	add.w	fp, fp, #1
 8026796:	e211      	b.n	8026bbc <_dtoa_r+0x85c>
 8026798:	2202      	movs	r2, #2
 802679a:	e780      	b.n	802669e <_dtoa_r+0x33e>
 802679c:	07cc      	lsls	r4, r1, #31
 802679e:	d504      	bpl.n	80267aa <_dtoa_r+0x44a>
 80267a0:	ed90 6b00 	vldr	d6, [r0]
 80267a4:	3201      	adds	r2, #1
 80267a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80267aa:	1049      	asrs	r1, r1, #1
 80267ac:	3008      	adds	r0, #8
 80267ae:	e777      	b.n	80266a0 <_dtoa_r+0x340>
 80267b0:	d022      	beq.n	80267f8 <_dtoa_r+0x498>
 80267b2:	f1cb 0100 	rsb	r1, fp, #0
 80267b6:	4a70      	ldr	r2, [pc, #448]	; (8026978 <_dtoa_r+0x618>)
 80267b8:	f001 000f 	and.w	r0, r1, #15
 80267bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80267c0:	ed92 7b00 	vldr	d7, [r2]
 80267c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80267c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80267cc:	486b      	ldr	r0, [pc, #428]	; (802697c <_dtoa_r+0x61c>)
 80267ce:	1109      	asrs	r1, r1, #4
 80267d0:	2400      	movs	r4, #0
 80267d2:	2202      	movs	r2, #2
 80267d4:	b929      	cbnz	r1, 80267e2 <_dtoa_r+0x482>
 80267d6:	2c00      	cmp	r4, #0
 80267d8:	f43f af6a 	beq.w	80266b0 <_dtoa_r+0x350>
 80267dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80267e0:	e766      	b.n	80266b0 <_dtoa_r+0x350>
 80267e2:	07cf      	lsls	r7, r1, #31
 80267e4:	d505      	bpl.n	80267f2 <_dtoa_r+0x492>
 80267e6:	ed90 6b00 	vldr	d6, [r0]
 80267ea:	3201      	adds	r2, #1
 80267ec:	2401      	movs	r4, #1
 80267ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80267f2:	1049      	asrs	r1, r1, #1
 80267f4:	3008      	adds	r0, #8
 80267f6:	e7ed      	b.n	80267d4 <_dtoa_r+0x474>
 80267f8:	2202      	movs	r2, #2
 80267fa:	e759      	b.n	80266b0 <_dtoa_r+0x350>
 80267fc:	465f      	mov	r7, fp
 80267fe:	4648      	mov	r0, r9
 8026800:	e775      	b.n	80266ee <_dtoa_r+0x38e>
 8026802:	ec42 1b17 	vmov	d7, r1, r2
 8026806:	4a5c      	ldr	r2, [pc, #368]	; (8026978 <_dtoa_r+0x618>)
 8026808:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802680c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8026810:	9a01      	ldr	r2, [sp, #4]
 8026812:	1814      	adds	r4, r2, r0
 8026814:	9a07      	ldr	r2, [sp, #28]
 8026816:	b352      	cbz	r2, 802686e <_dtoa_r+0x50e>
 8026818:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 802681c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8026820:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026824:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8026828:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802682c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8026830:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8026834:	ee14 2a90 	vmov	r2, s9
 8026838:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802683c:	3230      	adds	r2, #48	; 0x30
 802683e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8026842:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802684a:	f808 2b01 	strb.w	r2, [r8], #1
 802684e:	d439      	bmi.n	80268c4 <_dtoa_r+0x564>
 8026850:	ee32 5b46 	vsub.f64	d5, d2, d6
 8026854:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8026858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802685c:	d472      	bmi.n	8026944 <_dtoa_r+0x5e4>
 802685e:	45a0      	cmp	r8, r4
 8026860:	f43f af6b 	beq.w	802673a <_dtoa_r+0x3da>
 8026864:	ee27 7b03 	vmul.f64	d7, d7, d3
 8026868:	ee26 6b03 	vmul.f64	d6, d6, d3
 802686c:	e7e0      	b.n	8026830 <_dtoa_r+0x4d0>
 802686e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026872:	ee27 7b04 	vmul.f64	d7, d7, d4
 8026876:	4621      	mov	r1, r4
 8026878:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802687c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8026880:	ee14 2a90 	vmov	r2, s9
 8026884:	3230      	adds	r2, #48	; 0x30
 8026886:	f808 2b01 	strb.w	r2, [r8], #1
 802688a:	45a0      	cmp	r8, r4
 802688c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8026890:	ee36 6b45 	vsub.f64	d6, d6, d5
 8026894:	d118      	bne.n	80268c8 <_dtoa_r+0x568>
 8026896:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 802689a:	ee37 4b05 	vadd.f64	d4, d7, d5
 802689e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80268a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268a6:	dc4d      	bgt.n	8026944 <_dtoa_r+0x5e4>
 80268a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80268ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80268b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268b4:	f57f af41 	bpl.w	802673a <_dtoa_r+0x3da>
 80268b8:	4688      	mov	r8, r1
 80268ba:	3901      	subs	r1, #1
 80268bc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80268c0:	2b30      	cmp	r3, #48	; 0x30
 80268c2:	d0f9      	beq.n	80268b8 <_dtoa_r+0x558>
 80268c4:	46bb      	mov	fp, r7
 80268c6:	e02a      	b.n	802691e <_dtoa_r+0x5be>
 80268c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80268cc:	e7d6      	b.n	802687c <_dtoa_r+0x51c>
 80268ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80268d2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80268d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80268da:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80268de:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80268e2:	ee15 3a10 	vmov	r3, s10
 80268e6:	3330      	adds	r3, #48	; 0x30
 80268e8:	f808 3b01 	strb.w	r3, [r8], #1
 80268ec:	9b01      	ldr	r3, [sp, #4]
 80268ee:	eba8 0303 	sub.w	r3, r8, r3
 80268f2:	4599      	cmp	r9, r3
 80268f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80268f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80268fc:	d133      	bne.n	8026966 <_dtoa_r+0x606>
 80268fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8026902:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8026906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802690a:	dc1a      	bgt.n	8026942 <_dtoa_r+0x5e2>
 802690c:	eeb4 7b46 	vcmp.f64	d7, d6
 8026910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026914:	d103      	bne.n	802691e <_dtoa_r+0x5be>
 8026916:	ee15 3a10 	vmov	r3, s10
 802691a:	07d9      	lsls	r1, r3, #31
 802691c:	d411      	bmi.n	8026942 <_dtoa_r+0x5e2>
 802691e:	4629      	mov	r1, r5
 8026920:	4630      	mov	r0, r6
 8026922:	f000 fadb 	bl	8026edc <_Bfree>
 8026926:	2300      	movs	r3, #0
 8026928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802692a:	f888 3000 	strb.w	r3, [r8]
 802692e:	f10b 0301 	add.w	r3, fp, #1
 8026932:	6013      	str	r3, [r2, #0]
 8026934:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026936:	2b00      	cmp	r3, #0
 8026938:	f43f ad61 	beq.w	80263fe <_dtoa_r+0x9e>
 802693c:	f8c3 8000 	str.w	r8, [r3]
 8026940:	e55d      	b.n	80263fe <_dtoa_r+0x9e>
 8026942:	465f      	mov	r7, fp
 8026944:	4643      	mov	r3, r8
 8026946:	4698      	mov	r8, r3
 8026948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802694c:	2a39      	cmp	r2, #57	; 0x39
 802694e:	d106      	bne.n	802695e <_dtoa_r+0x5fe>
 8026950:	9a01      	ldr	r2, [sp, #4]
 8026952:	429a      	cmp	r2, r3
 8026954:	d1f7      	bne.n	8026946 <_dtoa_r+0x5e6>
 8026956:	9901      	ldr	r1, [sp, #4]
 8026958:	2230      	movs	r2, #48	; 0x30
 802695a:	3701      	adds	r7, #1
 802695c:	700a      	strb	r2, [r1, #0]
 802695e:	781a      	ldrb	r2, [r3, #0]
 8026960:	3201      	adds	r2, #1
 8026962:	701a      	strb	r2, [r3, #0]
 8026964:	e7ae      	b.n	80268c4 <_dtoa_r+0x564>
 8026966:	ee27 7b04 	vmul.f64	d7, d7, d4
 802696a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802696e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026972:	d1b2      	bne.n	80268da <_dtoa_r+0x57a>
 8026974:	e7d3      	b.n	802691e <_dtoa_r+0x5be>
 8026976:	bf00      	nop
 8026978:	080c3290 	.word	0x080c3290
 802697c:	080c3268 	.word	0x080c3268
 8026980:	9907      	ldr	r1, [sp, #28]
 8026982:	2900      	cmp	r1, #0
 8026984:	f000 80d0 	beq.w	8026b28 <_dtoa_r+0x7c8>
 8026988:	9906      	ldr	r1, [sp, #24]
 802698a:	2901      	cmp	r1, #1
 802698c:	f300 80b4 	bgt.w	8026af8 <_dtoa_r+0x798>
 8026990:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026992:	2900      	cmp	r1, #0
 8026994:	f000 80ac 	beq.w	8026af0 <_dtoa_r+0x790>
 8026998:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802699c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80269a0:	461c      	mov	r4, r3
 80269a2:	930a      	str	r3, [sp, #40]	; 0x28
 80269a4:	9b04      	ldr	r3, [sp, #16]
 80269a6:	4413      	add	r3, r2
 80269a8:	9304      	str	r3, [sp, #16]
 80269aa:	9b05      	ldr	r3, [sp, #20]
 80269ac:	2101      	movs	r1, #1
 80269ae:	4413      	add	r3, r2
 80269b0:	4630      	mov	r0, r6
 80269b2:	9305      	str	r3, [sp, #20]
 80269b4:	f000 fb4a 	bl	802704c <__i2b>
 80269b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80269ba:	4607      	mov	r7, r0
 80269bc:	f1b8 0f00 	cmp.w	r8, #0
 80269c0:	dd0d      	ble.n	80269de <_dtoa_r+0x67e>
 80269c2:	9a05      	ldr	r2, [sp, #20]
 80269c4:	2a00      	cmp	r2, #0
 80269c6:	dd0a      	ble.n	80269de <_dtoa_r+0x67e>
 80269c8:	4542      	cmp	r2, r8
 80269ca:	9904      	ldr	r1, [sp, #16]
 80269cc:	bfa8      	it	ge
 80269ce:	4642      	movge	r2, r8
 80269d0:	1a89      	subs	r1, r1, r2
 80269d2:	9104      	str	r1, [sp, #16]
 80269d4:	9905      	ldr	r1, [sp, #20]
 80269d6:	eba8 0802 	sub.w	r8, r8, r2
 80269da:	1a8a      	subs	r2, r1, r2
 80269dc:	9205      	str	r2, [sp, #20]
 80269de:	b303      	cbz	r3, 8026a22 <_dtoa_r+0x6c2>
 80269e0:	9a07      	ldr	r2, [sp, #28]
 80269e2:	2a00      	cmp	r2, #0
 80269e4:	f000 80a5 	beq.w	8026b32 <_dtoa_r+0x7d2>
 80269e8:	2c00      	cmp	r4, #0
 80269ea:	dd13      	ble.n	8026a14 <_dtoa_r+0x6b4>
 80269ec:	4639      	mov	r1, r7
 80269ee:	4622      	mov	r2, r4
 80269f0:	4630      	mov	r0, r6
 80269f2:	930d      	str	r3, [sp, #52]	; 0x34
 80269f4:	f000 fbea 	bl	80271cc <__pow5mult>
 80269f8:	462a      	mov	r2, r5
 80269fa:	4601      	mov	r1, r0
 80269fc:	4607      	mov	r7, r0
 80269fe:	4630      	mov	r0, r6
 8026a00:	f000 fb3a 	bl	8027078 <__multiply>
 8026a04:	4629      	mov	r1, r5
 8026a06:	900a      	str	r0, [sp, #40]	; 0x28
 8026a08:	4630      	mov	r0, r6
 8026a0a:	f000 fa67 	bl	8026edc <_Bfree>
 8026a0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026a10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026a12:	4615      	mov	r5, r2
 8026a14:	1b1a      	subs	r2, r3, r4
 8026a16:	d004      	beq.n	8026a22 <_dtoa_r+0x6c2>
 8026a18:	4629      	mov	r1, r5
 8026a1a:	4630      	mov	r0, r6
 8026a1c:	f000 fbd6 	bl	80271cc <__pow5mult>
 8026a20:	4605      	mov	r5, r0
 8026a22:	2101      	movs	r1, #1
 8026a24:	4630      	mov	r0, r6
 8026a26:	f000 fb11 	bl	802704c <__i2b>
 8026a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a2c:	2b00      	cmp	r3, #0
 8026a2e:	4604      	mov	r4, r0
 8026a30:	f340 8081 	ble.w	8026b36 <_dtoa_r+0x7d6>
 8026a34:	461a      	mov	r2, r3
 8026a36:	4601      	mov	r1, r0
 8026a38:	4630      	mov	r0, r6
 8026a3a:	f000 fbc7 	bl	80271cc <__pow5mult>
 8026a3e:	9b06      	ldr	r3, [sp, #24]
 8026a40:	2b01      	cmp	r3, #1
 8026a42:	4604      	mov	r4, r0
 8026a44:	dd7a      	ble.n	8026b3c <_dtoa_r+0x7dc>
 8026a46:	2300      	movs	r3, #0
 8026a48:	930a      	str	r3, [sp, #40]	; 0x28
 8026a4a:	6922      	ldr	r2, [r4, #16]
 8026a4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8026a50:	6910      	ldr	r0, [r2, #16]
 8026a52:	f000 faab 	bl	8026fac <__hi0bits>
 8026a56:	f1c0 0020 	rsb	r0, r0, #32
 8026a5a:	9b05      	ldr	r3, [sp, #20]
 8026a5c:	4418      	add	r0, r3
 8026a5e:	f010 001f 	ands.w	r0, r0, #31
 8026a62:	f000 808c 	beq.w	8026b7e <_dtoa_r+0x81e>
 8026a66:	f1c0 0220 	rsb	r2, r0, #32
 8026a6a:	2a04      	cmp	r2, #4
 8026a6c:	f340 8085 	ble.w	8026b7a <_dtoa_r+0x81a>
 8026a70:	f1c0 001c 	rsb	r0, r0, #28
 8026a74:	9b04      	ldr	r3, [sp, #16]
 8026a76:	4403      	add	r3, r0
 8026a78:	9304      	str	r3, [sp, #16]
 8026a7a:	9b05      	ldr	r3, [sp, #20]
 8026a7c:	4403      	add	r3, r0
 8026a7e:	4480      	add	r8, r0
 8026a80:	9305      	str	r3, [sp, #20]
 8026a82:	9b04      	ldr	r3, [sp, #16]
 8026a84:	2b00      	cmp	r3, #0
 8026a86:	dd05      	ble.n	8026a94 <_dtoa_r+0x734>
 8026a88:	4629      	mov	r1, r5
 8026a8a:	461a      	mov	r2, r3
 8026a8c:	4630      	mov	r0, r6
 8026a8e:	f000 fbf7 	bl	8027280 <__lshift>
 8026a92:	4605      	mov	r5, r0
 8026a94:	9b05      	ldr	r3, [sp, #20]
 8026a96:	2b00      	cmp	r3, #0
 8026a98:	dd05      	ble.n	8026aa6 <_dtoa_r+0x746>
 8026a9a:	4621      	mov	r1, r4
 8026a9c:	461a      	mov	r2, r3
 8026a9e:	4630      	mov	r0, r6
 8026aa0:	f000 fbee 	bl	8027280 <__lshift>
 8026aa4:	4604      	mov	r4, r0
 8026aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026aa8:	2b00      	cmp	r3, #0
 8026aaa:	d06a      	beq.n	8026b82 <_dtoa_r+0x822>
 8026aac:	4621      	mov	r1, r4
 8026aae:	4628      	mov	r0, r5
 8026ab0:	f000 fc56 	bl	8027360 <__mcmp>
 8026ab4:	2800      	cmp	r0, #0
 8026ab6:	da64      	bge.n	8026b82 <_dtoa_r+0x822>
 8026ab8:	2300      	movs	r3, #0
 8026aba:	4629      	mov	r1, r5
 8026abc:	220a      	movs	r2, #10
 8026abe:	4630      	mov	r0, r6
 8026ac0:	f000 fa2e 	bl	8026f20 <__multadd>
 8026ac4:	9b07      	ldr	r3, [sp, #28]
 8026ac6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026aca:	4605      	mov	r5, r0
 8026acc:	2b00      	cmp	r3, #0
 8026ace:	f000 8191 	beq.w	8026df4 <_dtoa_r+0xa94>
 8026ad2:	4639      	mov	r1, r7
 8026ad4:	2300      	movs	r3, #0
 8026ad6:	220a      	movs	r2, #10
 8026ad8:	4630      	mov	r0, r6
 8026ada:	f000 fa21 	bl	8026f20 <__multadd>
 8026ade:	f1ba 0f00 	cmp.w	sl, #0
 8026ae2:	4607      	mov	r7, r0
 8026ae4:	f300 808d 	bgt.w	8026c02 <_dtoa_r+0x8a2>
 8026ae8:	9b06      	ldr	r3, [sp, #24]
 8026aea:	2b02      	cmp	r3, #2
 8026aec:	dc50      	bgt.n	8026b90 <_dtoa_r+0x830>
 8026aee:	e088      	b.n	8026c02 <_dtoa_r+0x8a2>
 8026af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026af2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8026af6:	e751      	b.n	802699c <_dtoa_r+0x63c>
 8026af8:	f109 34ff 	add.w	r4, r9, #4294967295
 8026afc:	42a3      	cmp	r3, r4
 8026afe:	bfbf      	itttt	lt
 8026b00:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8026b02:	1ae3      	sublt	r3, r4, r3
 8026b04:	18d2      	addlt	r2, r2, r3
 8026b06:	9209      	strlt	r2, [sp, #36]	; 0x24
 8026b08:	bfb6      	itet	lt
 8026b0a:	4623      	movlt	r3, r4
 8026b0c:	1b1c      	subge	r4, r3, r4
 8026b0e:	2400      	movlt	r4, #0
 8026b10:	f1b9 0f00 	cmp.w	r9, #0
 8026b14:	bfb5      	itete	lt
 8026b16:	9a04      	ldrlt	r2, [sp, #16]
 8026b18:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8026b1c:	eba2 0809 	sublt.w	r8, r2, r9
 8026b20:	464a      	movge	r2, r9
 8026b22:	bfb8      	it	lt
 8026b24:	2200      	movlt	r2, #0
 8026b26:	e73c      	b.n	80269a2 <_dtoa_r+0x642>
 8026b28:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8026b2c:	9f07      	ldr	r7, [sp, #28]
 8026b2e:	461c      	mov	r4, r3
 8026b30:	e744      	b.n	80269bc <_dtoa_r+0x65c>
 8026b32:	461a      	mov	r2, r3
 8026b34:	e770      	b.n	8026a18 <_dtoa_r+0x6b8>
 8026b36:	9b06      	ldr	r3, [sp, #24]
 8026b38:	2b01      	cmp	r3, #1
 8026b3a:	dc18      	bgt.n	8026b6e <_dtoa_r+0x80e>
 8026b3c:	9b02      	ldr	r3, [sp, #8]
 8026b3e:	b9b3      	cbnz	r3, 8026b6e <_dtoa_r+0x80e>
 8026b40:	9b03      	ldr	r3, [sp, #12]
 8026b42:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8026b46:	b9a2      	cbnz	r2, 8026b72 <_dtoa_r+0x812>
 8026b48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8026b4c:	0d12      	lsrs	r2, r2, #20
 8026b4e:	0512      	lsls	r2, r2, #20
 8026b50:	b18a      	cbz	r2, 8026b76 <_dtoa_r+0x816>
 8026b52:	9b04      	ldr	r3, [sp, #16]
 8026b54:	3301      	adds	r3, #1
 8026b56:	9304      	str	r3, [sp, #16]
 8026b58:	9b05      	ldr	r3, [sp, #20]
 8026b5a:	3301      	adds	r3, #1
 8026b5c:	9305      	str	r3, [sp, #20]
 8026b5e:	2301      	movs	r3, #1
 8026b60:	930a      	str	r3, [sp, #40]	; 0x28
 8026b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026b64:	2b00      	cmp	r3, #0
 8026b66:	f47f af70 	bne.w	8026a4a <_dtoa_r+0x6ea>
 8026b6a:	2001      	movs	r0, #1
 8026b6c:	e775      	b.n	8026a5a <_dtoa_r+0x6fa>
 8026b6e:	2300      	movs	r3, #0
 8026b70:	e7f6      	b.n	8026b60 <_dtoa_r+0x800>
 8026b72:	9b02      	ldr	r3, [sp, #8]
 8026b74:	e7f4      	b.n	8026b60 <_dtoa_r+0x800>
 8026b76:	920a      	str	r2, [sp, #40]	; 0x28
 8026b78:	e7f3      	b.n	8026b62 <_dtoa_r+0x802>
 8026b7a:	d082      	beq.n	8026a82 <_dtoa_r+0x722>
 8026b7c:	4610      	mov	r0, r2
 8026b7e:	301c      	adds	r0, #28
 8026b80:	e778      	b.n	8026a74 <_dtoa_r+0x714>
 8026b82:	f1b9 0f00 	cmp.w	r9, #0
 8026b86:	dc37      	bgt.n	8026bf8 <_dtoa_r+0x898>
 8026b88:	9b06      	ldr	r3, [sp, #24]
 8026b8a:	2b02      	cmp	r3, #2
 8026b8c:	dd34      	ble.n	8026bf8 <_dtoa_r+0x898>
 8026b8e:	46ca      	mov	sl, r9
 8026b90:	f1ba 0f00 	cmp.w	sl, #0
 8026b94:	d10d      	bne.n	8026bb2 <_dtoa_r+0x852>
 8026b96:	4621      	mov	r1, r4
 8026b98:	4653      	mov	r3, sl
 8026b9a:	2205      	movs	r2, #5
 8026b9c:	4630      	mov	r0, r6
 8026b9e:	f000 f9bf 	bl	8026f20 <__multadd>
 8026ba2:	4601      	mov	r1, r0
 8026ba4:	4604      	mov	r4, r0
 8026ba6:	4628      	mov	r0, r5
 8026ba8:	f000 fbda 	bl	8027360 <__mcmp>
 8026bac:	2800      	cmp	r0, #0
 8026bae:	f73f adeb 	bgt.w	8026788 <_dtoa_r+0x428>
 8026bb2:	9b08      	ldr	r3, [sp, #32]
 8026bb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026bb8:	ea6f 0b03 	mvn.w	fp, r3
 8026bbc:	f04f 0900 	mov.w	r9, #0
 8026bc0:	4621      	mov	r1, r4
 8026bc2:	4630      	mov	r0, r6
 8026bc4:	f000 f98a 	bl	8026edc <_Bfree>
 8026bc8:	2f00      	cmp	r7, #0
 8026bca:	f43f aea8 	beq.w	802691e <_dtoa_r+0x5be>
 8026bce:	f1b9 0f00 	cmp.w	r9, #0
 8026bd2:	d005      	beq.n	8026be0 <_dtoa_r+0x880>
 8026bd4:	45b9      	cmp	r9, r7
 8026bd6:	d003      	beq.n	8026be0 <_dtoa_r+0x880>
 8026bd8:	4649      	mov	r1, r9
 8026bda:	4630      	mov	r0, r6
 8026bdc:	f000 f97e 	bl	8026edc <_Bfree>
 8026be0:	4639      	mov	r1, r7
 8026be2:	4630      	mov	r0, r6
 8026be4:	f000 f97a 	bl	8026edc <_Bfree>
 8026be8:	e699      	b.n	802691e <_dtoa_r+0x5be>
 8026bea:	2400      	movs	r4, #0
 8026bec:	4627      	mov	r7, r4
 8026bee:	e7e0      	b.n	8026bb2 <_dtoa_r+0x852>
 8026bf0:	46bb      	mov	fp, r7
 8026bf2:	4604      	mov	r4, r0
 8026bf4:	4607      	mov	r7, r0
 8026bf6:	e5c7      	b.n	8026788 <_dtoa_r+0x428>
 8026bf8:	9b07      	ldr	r3, [sp, #28]
 8026bfa:	46ca      	mov	sl, r9
 8026bfc:	2b00      	cmp	r3, #0
 8026bfe:	f000 8100 	beq.w	8026e02 <_dtoa_r+0xaa2>
 8026c02:	f1b8 0f00 	cmp.w	r8, #0
 8026c06:	dd05      	ble.n	8026c14 <_dtoa_r+0x8b4>
 8026c08:	4639      	mov	r1, r7
 8026c0a:	4642      	mov	r2, r8
 8026c0c:	4630      	mov	r0, r6
 8026c0e:	f000 fb37 	bl	8027280 <__lshift>
 8026c12:	4607      	mov	r7, r0
 8026c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026c16:	2b00      	cmp	r3, #0
 8026c18:	d05d      	beq.n	8026cd6 <_dtoa_r+0x976>
 8026c1a:	6879      	ldr	r1, [r7, #4]
 8026c1c:	4630      	mov	r0, r6
 8026c1e:	f000 f91d 	bl	8026e5c <_Balloc>
 8026c22:	4680      	mov	r8, r0
 8026c24:	b928      	cbnz	r0, 8026c32 <_dtoa_r+0x8d2>
 8026c26:	4b82      	ldr	r3, [pc, #520]	; (8026e30 <_dtoa_r+0xad0>)
 8026c28:	4602      	mov	r2, r0
 8026c2a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8026c2e:	f7ff bbaf 	b.w	8026390 <_dtoa_r+0x30>
 8026c32:	693a      	ldr	r2, [r7, #16]
 8026c34:	3202      	adds	r2, #2
 8026c36:	0092      	lsls	r2, r2, #2
 8026c38:	f107 010c 	add.w	r1, r7, #12
 8026c3c:	300c      	adds	r0, #12
 8026c3e:	f7fe fd89 	bl	8025754 <memcpy>
 8026c42:	2201      	movs	r2, #1
 8026c44:	4641      	mov	r1, r8
 8026c46:	4630      	mov	r0, r6
 8026c48:	f000 fb1a 	bl	8027280 <__lshift>
 8026c4c:	9b01      	ldr	r3, [sp, #4]
 8026c4e:	3301      	adds	r3, #1
 8026c50:	9304      	str	r3, [sp, #16]
 8026c52:	9b01      	ldr	r3, [sp, #4]
 8026c54:	4453      	add	r3, sl
 8026c56:	9308      	str	r3, [sp, #32]
 8026c58:	9b02      	ldr	r3, [sp, #8]
 8026c5a:	f003 0301 	and.w	r3, r3, #1
 8026c5e:	46b9      	mov	r9, r7
 8026c60:	9307      	str	r3, [sp, #28]
 8026c62:	4607      	mov	r7, r0
 8026c64:	9b04      	ldr	r3, [sp, #16]
 8026c66:	4621      	mov	r1, r4
 8026c68:	3b01      	subs	r3, #1
 8026c6a:	4628      	mov	r0, r5
 8026c6c:	9302      	str	r3, [sp, #8]
 8026c6e:	f7ff faea 	bl	8026246 <quorem>
 8026c72:	4603      	mov	r3, r0
 8026c74:	3330      	adds	r3, #48	; 0x30
 8026c76:	9005      	str	r0, [sp, #20]
 8026c78:	4649      	mov	r1, r9
 8026c7a:	4628      	mov	r0, r5
 8026c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8026c7e:	f000 fb6f 	bl	8027360 <__mcmp>
 8026c82:	463a      	mov	r2, r7
 8026c84:	4682      	mov	sl, r0
 8026c86:	4621      	mov	r1, r4
 8026c88:	4630      	mov	r0, r6
 8026c8a:	f000 fb85 	bl	8027398 <__mdiff>
 8026c8e:	68c2      	ldr	r2, [r0, #12]
 8026c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026c92:	4680      	mov	r8, r0
 8026c94:	bb0a      	cbnz	r2, 8026cda <_dtoa_r+0x97a>
 8026c96:	4601      	mov	r1, r0
 8026c98:	4628      	mov	r0, r5
 8026c9a:	f000 fb61 	bl	8027360 <__mcmp>
 8026c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ca0:	4602      	mov	r2, r0
 8026ca2:	4641      	mov	r1, r8
 8026ca4:	4630      	mov	r0, r6
 8026ca6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8026caa:	f000 f917 	bl	8026edc <_Bfree>
 8026cae:	9b06      	ldr	r3, [sp, #24]
 8026cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026cb2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8026cb6:	ea43 0102 	orr.w	r1, r3, r2
 8026cba:	9b07      	ldr	r3, [sp, #28]
 8026cbc:	430b      	orrs	r3, r1
 8026cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026cc0:	d10d      	bne.n	8026cde <_dtoa_r+0x97e>
 8026cc2:	2b39      	cmp	r3, #57	; 0x39
 8026cc4:	d029      	beq.n	8026d1a <_dtoa_r+0x9ba>
 8026cc6:	f1ba 0f00 	cmp.w	sl, #0
 8026cca:	dd01      	ble.n	8026cd0 <_dtoa_r+0x970>
 8026ccc:	9b05      	ldr	r3, [sp, #20]
 8026cce:	3331      	adds	r3, #49	; 0x31
 8026cd0:	9a02      	ldr	r2, [sp, #8]
 8026cd2:	7013      	strb	r3, [r2, #0]
 8026cd4:	e774      	b.n	8026bc0 <_dtoa_r+0x860>
 8026cd6:	4638      	mov	r0, r7
 8026cd8:	e7b8      	b.n	8026c4c <_dtoa_r+0x8ec>
 8026cda:	2201      	movs	r2, #1
 8026cdc:	e7e1      	b.n	8026ca2 <_dtoa_r+0x942>
 8026cde:	f1ba 0f00 	cmp.w	sl, #0
 8026ce2:	db06      	blt.n	8026cf2 <_dtoa_r+0x992>
 8026ce4:	9906      	ldr	r1, [sp, #24]
 8026ce6:	ea41 0a0a 	orr.w	sl, r1, sl
 8026cea:	9907      	ldr	r1, [sp, #28]
 8026cec:	ea5a 0101 	orrs.w	r1, sl, r1
 8026cf0:	d120      	bne.n	8026d34 <_dtoa_r+0x9d4>
 8026cf2:	2a00      	cmp	r2, #0
 8026cf4:	ddec      	ble.n	8026cd0 <_dtoa_r+0x970>
 8026cf6:	4629      	mov	r1, r5
 8026cf8:	2201      	movs	r2, #1
 8026cfa:	4630      	mov	r0, r6
 8026cfc:	9304      	str	r3, [sp, #16]
 8026cfe:	f000 fabf 	bl	8027280 <__lshift>
 8026d02:	4621      	mov	r1, r4
 8026d04:	4605      	mov	r5, r0
 8026d06:	f000 fb2b 	bl	8027360 <__mcmp>
 8026d0a:	2800      	cmp	r0, #0
 8026d0c:	9b04      	ldr	r3, [sp, #16]
 8026d0e:	dc02      	bgt.n	8026d16 <_dtoa_r+0x9b6>
 8026d10:	d1de      	bne.n	8026cd0 <_dtoa_r+0x970>
 8026d12:	07da      	lsls	r2, r3, #31
 8026d14:	d5dc      	bpl.n	8026cd0 <_dtoa_r+0x970>
 8026d16:	2b39      	cmp	r3, #57	; 0x39
 8026d18:	d1d8      	bne.n	8026ccc <_dtoa_r+0x96c>
 8026d1a:	9a02      	ldr	r2, [sp, #8]
 8026d1c:	2339      	movs	r3, #57	; 0x39
 8026d1e:	7013      	strb	r3, [r2, #0]
 8026d20:	4643      	mov	r3, r8
 8026d22:	4698      	mov	r8, r3
 8026d24:	3b01      	subs	r3, #1
 8026d26:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8026d2a:	2a39      	cmp	r2, #57	; 0x39
 8026d2c:	d051      	beq.n	8026dd2 <_dtoa_r+0xa72>
 8026d2e:	3201      	adds	r2, #1
 8026d30:	701a      	strb	r2, [r3, #0]
 8026d32:	e745      	b.n	8026bc0 <_dtoa_r+0x860>
 8026d34:	2a00      	cmp	r2, #0
 8026d36:	dd03      	ble.n	8026d40 <_dtoa_r+0x9e0>
 8026d38:	2b39      	cmp	r3, #57	; 0x39
 8026d3a:	d0ee      	beq.n	8026d1a <_dtoa_r+0x9ba>
 8026d3c:	3301      	adds	r3, #1
 8026d3e:	e7c7      	b.n	8026cd0 <_dtoa_r+0x970>
 8026d40:	9a04      	ldr	r2, [sp, #16]
 8026d42:	9908      	ldr	r1, [sp, #32]
 8026d44:	f802 3c01 	strb.w	r3, [r2, #-1]
 8026d48:	428a      	cmp	r2, r1
 8026d4a:	d02b      	beq.n	8026da4 <_dtoa_r+0xa44>
 8026d4c:	4629      	mov	r1, r5
 8026d4e:	2300      	movs	r3, #0
 8026d50:	220a      	movs	r2, #10
 8026d52:	4630      	mov	r0, r6
 8026d54:	f000 f8e4 	bl	8026f20 <__multadd>
 8026d58:	45b9      	cmp	r9, r7
 8026d5a:	4605      	mov	r5, r0
 8026d5c:	f04f 0300 	mov.w	r3, #0
 8026d60:	f04f 020a 	mov.w	r2, #10
 8026d64:	4649      	mov	r1, r9
 8026d66:	4630      	mov	r0, r6
 8026d68:	d107      	bne.n	8026d7a <_dtoa_r+0xa1a>
 8026d6a:	f000 f8d9 	bl	8026f20 <__multadd>
 8026d6e:	4681      	mov	r9, r0
 8026d70:	4607      	mov	r7, r0
 8026d72:	9b04      	ldr	r3, [sp, #16]
 8026d74:	3301      	adds	r3, #1
 8026d76:	9304      	str	r3, [sp, #16]
 8026d78:	e774      	b.n	8026c64 <_dtoa_r+0x904>
 8026d7a:	f000 f8d1 	bl	8026f20 <__multadd>
 8026d7e:	4639      	mov	r1, r7
 8026d80:	4681      	mov	r9, r0
 8026d82:	2300      	movs	r3, #0
 8026d84:	220a      	movs	r2, #10
 8026d86:	4630      	mov	r0, r6
 8026d88:	f000 f8ca 	bl	8026f20 <__multadd>
 8026d8c:	4607      	mov	r7, r0
 8026d8e:	e7f0      	b.n	8026d72 <_dtoa_r+0xa12>
 8026d90:	f1ba 0f00 	cmp.w	sl, #0
 8026d94:	9a01      	ldr	r2, [sp, #4]
 8026d96:	bfcc      	ite	gt
 8026d98:	46d0      	movgt	r8, sl
 8026d9a:	f04f 0801 	movle.w	r8, #1
 8026d9e:	4490      	add	r8, r2
 8026da0:	f04f 0900 	mov.w	r9, #0
 8026da4:	4629      	mov	r1, r5
 8026da6:	2201      	movs	r2, #1
 8026da8:	4630      	mov	r0, r6
 8026daa:	9302      	str	r3, [sp, #8]
 8026dac:	f000 fa68 	bl	8027280 <__lshift>
 8026db0:	4621      	mov	r1, r4
 8026db2:	4605      	mov	r5, r0
 8026db4:	f000 fad4 	bl	8027360 <__mcmp>
 8026db8:	2800      	cmp	r0, #0
 8026dba:	dcb1      	bgt.n	8026d20 <_dtoa_r+0x9c0>
 8026dbc:	d102      	bne.n	8026dc4 <_dtoa_r+0xa64>
 8026dbe:	9b02      	ldr	r3, [sp, #8]
 8026dc0:	07db      	lsls	r3, r3, #31
 8026dc2:	d4ad      	bmi.n	8026d20 <_dtoa_r+0x9c0>
 8026dc4:	4643      	mov	r3, r8
 8026dc6:	4698      	mov	r8, r3
 8026dc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026dcc:	2a30      	cmp	r2, #48	; 0x30
 8026dce:	d0fa      	beq.n	8026dc6 <_dtoa_r+0xa66>
 8026dd0:	e6f6      	b.n	8026bc0 <_dtoa_r+0x860>
 8026dd2:	9a01      	ldr	r2, [sp, #4]
 8026dd4:	429a      	cmp	r2, r3
 8026dd6:	d1a4      	bne.n	8026d22 <_dtoa_r+0x9c2>
 8026dd8:	f10b 0b01 	add.w	fp, fp, #1
 8026ddc:	2331      	movs	r3, #49	; 0x31
 8026dde:	e778      	b.n	8026cd2 <_dtoa_r+0x972>
 8026de0:	4b14      	ldr	r3, [pc, #80]	; (8026e34 <_dtoa_r+0xad4>)
 8026de2:	f7ff bb27 	b.w	8026434 <_dtoa_r+0xd4>
 8026de6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026de8:	2b00      	cmp	r3, #0
 8026dea:	f47f ab03 	bne.w	80263f4 <_dtoa_r+0x94>
 8026dee:	4b12      	ldr	r3, [pc, #72]	; (8026e38 <_dtoa_r+0xad8>)
 8026df0:	f7ff bb20 	b.w	8026434 <_dtoa_r+0xd4>
 8026df4:	f1ba 0f00 	cmp.w	sl, #0
 8026df8:	dc03      	bgt.n	8026e02 <_dtoa_r+0xaa2>
 8026dfa:	9b06      	ldr	r3, [sp, #24]
 8026dfc:	2b02      	cmp	r3, #2
 8026dfe:	f73f aec7 	bgt.w	8026b90 <_dtoa_r+0x830>
 8026e02:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026e06:	4621      	mov	r1, r4
 8026e08:	4628      	mov	r0, r5
 8026e0a:	f7ff fa1c 	bl	8026246 <quorem>
 8026e0e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8026e12:	f808 3b01 	strb.w	r3, [r8], #1
 8026e16:	9a01      	ldr	r2, [sp, #4]
 8026e18:	eba8 0202 	sub.w	r2, r8, r2
 8026e1c:	4592      	cmp	sl, r2
 8026e1e:	ddb7      	ble.n	8026d90 <_dtoa_r+0xa30>
 8026e20:	4629      	mov	r1, r5
 8026e22:	2300      	movs	r3, #0
 8026e24:	220a      	movs	r2, #10
 8026e26:	4630      	mov	r0, r6
 8026e28:	f000 f87a 	bl	8026f20 <__multadd>
 8026e2c:	4605      	mov	r5, r0
 8026e2e:	e7ea      	b.n	8026e06 <_dtoa_r+0xaa6>
 8026e30:	080c31f7 	.word	0x080c31f7
 8026e34:	080c3154 	.word	0x080c3154
 8026e38:	080c3178 	.word	0x080c3178

08026e3c <_localeconv_r>:
 8026e3c:	4800      	ldr	r0, [pc, #0]	; (8026e40 <_localeconv_r+0x4>)
 8026e3e:	4770      	bx	lr
 8026e40:	24007650 	.word	0x24007650

08026e44 <__malloc_lock>:
 8026e44:	4801      	ldr	r0, [pc, #4]	; (8026e4c <__malloc_lock+0x8>)
 8026e46:	f000 bd5e 	b.w	8027906 <__retarget_lock_acquire_recursive>
 8026e4a:	bf00      	nop
 8026e4c:	2400a770 	.word	0x2400a770

08026e50 <__malloc_unlock>:
 8026e50:	4801      	ldr	r0, [pc, #4]	; (8026e58 <__malloc_unlock+0x8>)
 8026e52:	f000 bd59 	b.w	8027908 <__retarget_lock_release_recursive>
 8026e56:	bf00      	nop
 8026e58:	2400a770 	.word	0x2400a770

08026e5c <_Balloc>:
 8026e5c:	b570      	push	{r4, r5, r6, lr}
 8026e5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026e60:	4604      	mov	r4, r0
 8026e62:	460d      	mov	r5, r1
 8026e64:	b976      	cbnz	r6, 8026e84 <_Balloc+0x28>
 8026e66:	2010      	movs	r0, #16
 8026e68:	f7fe fc64 	bl	8025734 <malloc>
 8026e6c:	4602      	mov	r2, r0
 8026e6e:	6260      	str	r0, [r4, #36]	; 0x24
 8026e70:	b920      	cbnz	r0, 8026e7c <_Balloc+0x20>
 8026e72:	4b18      	ldr	r3, [pc, #96]	; (8026ed4 <_Balloc+0x78>)
 8026e74:	4818      	ldr	r0, [pc, #96]	; (8026ed8 <_Balloc+0x7c>)
 8026e76:	2166      	movs	r1, #102	; 0x66
 8026e78:	f000 fd14 	bl	80278a4 <__assert_func>
 8026e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026e80:	6006      	str	r6, [r0, #0]
 8026e82:	60c6      	str	r6, [r0, #12]
 8026e84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8026e86:	68f3      	ldr	r3, [r6, #12]
 8026e88:	b183      	cbz	r3, 8026eac <_Balloc+0x50>
 8026e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026e8c:	68db      	ldr	r3, [r3, #12]
 8026e8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8026e92:	b9b8      	cbnz	r0, 8026ec4 <_Balloc+0x68>
 8026e94:	2101      	movs	r1, #1
 8026e96:	fa01 f605 	lsl.w	r6, r1, r5
 8026e9a:	1d72      	adds	r2, r6, #5
 8026e9c:	0092      	lsls	r2, r2, #2
 8026e9e:	4620      	mov	r0, r4
 8026ea0:	f000 fb60 	bl	8027564 <_calloc_r>
 8026ea4:	b160      	cbz	r0, 8026ec0 <_Balloc+0x64>
 8026ea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8026eaa:	e00e      	b.n	8026eca <_Balloc+0x6e>
 8026eac:	2221      	movs	r2, #33	; 0x21
 8026eae:	2104      	movs	r1, #4
 8026eb0:	4620      	mov	r0, r4
 8026eb2:	f000 fb57 	bl	8027564 <_calloc_r>
 8026eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026eb8:	60f0      	str	r0, [r6, #12]
 8026eba:	68db      	ldr	r3, [r3, #12]
 8026ebc:	2b00      	cmp	r3, #0
 8026ebe:	d1e4      	bne.n	8026e8a <_Balloc+0x2e>
 8026ec0:	2000      	movs	r0, #0
 8026ec2:	bd70      	pop	{r4, r5, r6, pc}
 8026ec4:	6802      	ldr	r2, [r0, #0]
 8026ec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8026eca:	2300      	movs	r3, #0
 8026ecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026ed0:	e7f7      	b.n	8026ec2 <_Balloc+0x66>
 8026ed2:	bf00      	nop
 8026ed4:	080c3185 	.word	0x080c3185
 8026ed8:	080c3208 	.word	0x080c3208

08026edc <_Bfree>:
 8026edc:	b570      	push	{r4, r5, r6, lr}
 8026ede:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026ee0:	4605      	mov	r5, r0
 8026ee2:	460c      	mov	r4, r1
 8026ee4:	b976      	cbnz	r6, 8026f04 <_Bfree+0x28>
 8026ee6:	2010      	movs	r0, #16
 8026ee8:	f7fe fc24 	bl	8025734 <malloc>
 8026eec:	4602      	mov	r2, r0
 8026eee:	6268      	str	r0, [r5, #36]	; 0x24
 8026ef0:	b920      	cbnz	r0, 8026efc <_Bfree+0x20>
 8026ef2:	4b09      	ldr	r3, [pc, #36]	; (8026f18 <_Bfree+0x3c>)
 8026ef4:	4809      	ldr	r0, [pc, #36]	; (8026f1c <_Bfree+0x40>)
 8026ef6:	218a      	movs	r1, #138	; 0x8a
 8026ef8:	f000 fcd4 	bl	80278a4 <__assert_func>
 8026efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026f00:	6006      	str	r6, [r0, #0]
 8026f02:	60c6      	str	r6, [r0, #12]
 8026f04:	b13c      	cbz	r4, 8026f16 <_Bfree+0x3a>
 8026f06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8026f08:	6862      	ldr	r2, [r4, #4]
 8026f0a:	68db      	ldr	r3, [r3, #12]
 8026f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026f10:	6021      	str	r1, [r4, #0]
 8026f12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8026f16:	bd70      	pop	{r4, r5, r6, pc}
 8026f18:	080c3185 	.word	0x080c3185
 8026f1c:	080c3208 	.word	0x080c3208

08026f20 <__multadd>:
 8026f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026f24:	690d      	ldr	r5, [r1, #16]
 8026f26:	4607      	mov	r7, r0
 8026f28:	460c      	mov	r4, r1
 8026f2a:	461e      	mov	r6, r3
 8026f2c:	f101 0c14 	add.w	ip, r1, #20
 8026f30:	2000      	movs	r0, #0
 8026f32:	f8dc 3000 	ldr.w	r3, [ip]
 8026f36:	b299      	uxth	r1, r3
 8026f38:	fb02 6101 	mla	r1, r2, r1, r6
 8026f3c:	0c1e      	lsrs	r6, r3, #16
 8026f3e:	0c0b      	lsrs	r3, r1, #16
 8026f40:	fb02 3306 	mla	r3, r2, r6, r3
 8026f44:	b289      	uxth	r1, r1
 8026f46:	3001      	adds	r0, #1
 8026f48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026f4c:	4285      	cmp	r5, r0
 8026f4e:	f84c 1b04 	str.w	r1, [ip], #4
 8026f52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8026f56:	dcec      	bgt.n	8026f32 <__multadd+0x12>
 8026f58:	b30e      	cbz	r6, 8026f9e <__multadd+0x7e>
 8026f5a:	68a3      	ldr	r3, [r4, #8]
 8026f5c:	42ab      	cmp	r3, r5
 8026f5e:	dc19      	bgt.n	8026f94 <__multadd+0x74>
 8026f60:	6861      	ldr	r1, [r4, #4]
 8026f62:	4638      	mov	r0, r7
 8026f64:	3101      	adds	r1, #1
 8026f66:	f7ff ff79 	bl	8026e5c <_Balloc>
 8026f6a:	4680      	mov	r8, r0
 8026f6c:	b928      	cbnz	r0, 8026f7a <__multadd+0x5a>
 8026f6e:	4602      	mov	r2, r0
 8026f70:	4b0c      	ldr	r3, [pc, #48]	; (8026fa4 <__multadd+0x84>)
 8026f72:	480d      	ldr	r0, [pc, #52]	; (8026fa8 <__multadd+0x88>)
 8026f74:	21b5      	movs	r1, #181	; 0xb5
 8026f76:	f000 fc95 	bl	80278a4 <__assert_func>
 8026f7a:	6922      	ldr	r2, [r4, #16]
 8026f7c:	3202      	adds	r2, #2
 8026f7e:	f104 010c 	add.w	r1, r4, #12
 8026f82:	0092      	lsls	r2, r2, #2
 8026f84:	300c      	adds	r0, #12
 8026f86:	f7fe fbe5 	bl	8025754 <memcpy>
 8026f8a:	4621      	mov	r1, r4
 8026f8c:	4638      	mov	r0, r7
 8026f8e:	f7ff ffa5 	bl	8026edc <_Bfree>
 8026f92:	4644      	mov	r4, r8
 8026f94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8026f98:	3501      	adds	r5, #1
 8026f9a:	615e      	str	r6, [r3, #20]
 8026f9c:	6125      	str	r5, [r4, #16]
 8026f9e:	4620      	mov	r0, r4
 8026fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026fa4:	080c31f7 	.word	0x080c31f7
 8026fa8:	080c3208 	.word	0x080c3208

08026fac <__hi0bits>:
 8026fac:	0c03      	lsrs	r3, r0, #16
 8026fae:	041b      	lsls	r3, r3, #16
 8026fb0:	b9d3      	cbnz	r3, 8026fe8 <__hi0bits+0x3c>
 8026fb2:	0400      	lsls	r0, r0, #16
 8026fb4:	2310      	movs	r3, #16
 8026fb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8026fba:	bf04      	itt	eq
 8026fbc:	0200      	lsleq	r0, r0, #8
 8026fbe:	3308      	addeq	r3, #8
 8026fc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8026fc4:	bf04      	itt	eq
 8026fc6:	0100      	lsleq	r0, r0, #4
 8026fc8:	3304      	addeq	r3, #4
 8026fca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8026fce:	bf04      	itt	eq
 8026fd0:	0080      	lsleq	r0, r0, #2
 8026fd2:	3302      	addeq	r3, #2
 8026fd4:	2800      	cmp	r0, #0
 8026fd6:	db05      	blt.n	8026fe4 <__hi0bits+0x38>
 8026fd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8026fdc:	f103 0301 	add.w	r3, r3, #1
 8026fe0:	bf08      	it	eq
 8026fe2:	2320      	moveq	r3, #32
 8026fe4:	4618      	mov	r0, r3
 8026fe6:	4770      	bx	lr
 8026fe8:	2300      	movs	r3, #0
 8026fea:	e7e4      	b.n	8026fb6 <__hi0bits+0xa>

08026fec <__lo0bits>:
 8026fec:	6803      	ldr	r3, [r0, #0]
 8026fee:	f013 0207 	ands.w	r2, r3, #7
 8026ff2:	4601      	mov	r1, r0
 8026ff4:	d00b      	beq.n	802700e <__lo0bits+0x22>
 8026ff6:	07da      	lsls	r2, r3, #31
 8026ff8:	d423      	bmi.n	8027042 <__lo0bits+0x56>
 8026ffa:	0798      	lsls	r0, r3, #30
 8026ffc:	bf49      	itett	mi
 8026ffe:	085b      	lsrmi	r3, r3, #1
 8027000:	089b      	lsrpl	r3, r3, #2
 8027002:	2001      	movmi	r0, #1
 8027004:	600b      	strmi	r3, [r1, #0]
 8027006:	bf5c      	itt	pl
 8027008:	600b      	strpl	r3, [r1, #0]
 802700a:	2002      	movpl	r0, #2
 802700c:	4770      	bx	lr
 802700e:	b298      	uxth	r0, r3
 8027010:	b9a8      	cbnz	r0, 802703e <__lo0bits+0x52>
 8027012:	0c1b      	lsrs	r3, r3, #16
 8027014:	2010      	movs	r0, #16
 8027016:	b2da      	uxtb	r2, r3
 8027018:	b90a      	cbnz	r2, 802701e <__lo0bits+0x32>
 802701a:	3008      	adds	r0, #8
 802701c:	0a1b      	lsrs	r3, r3, #8
 802701e:	071a      	lsls	r2, r3, #28
 8027020:	bf04      	itt	eq
 8027022:	091b      	lsreq	r3, r3, #4
 8027024:	3004      	addeq	r0, #4
 8027026:	079a      	lsls	r2, r3, #30
 8027028:	bf04      	itt	eq
 802702a:	089b      	lsreq	r3, r3, #2
 802702c:	3002      	addeq	r0, #2
 802702e:	07da      	lsls	r2, r3, #31
 8027030:	d403      	bmi.n	802703a <__lo0bits+0x4e>
 8027032:	085b      	lsrs	r3, r3, #1
 8027034:	f100 0001 	add.w	r0, r0, #1
 8027038:	d005      	beq.n	8027046 <__lo0bits+0x5a>
 802703a:	600b      	str	r3, [r1, #0]
 802703c:	4770      	bx	lr
 802703e:	4610      	mov	r0, r2
 8027040:	e7e9      	b.n	8027016 <__lo0bits+0x2a>
 8027042:	2000      	movs	r0, #0
 8027044:	4770      	bx	lr
 8027046:	2020      	movs	r0, #32
 8027048:	4770      	bx	lr
	...

0802704c <__i2b>:
 802704c:	b510      	push	{r4, lr}
 802704e:	460c      	mov	r4, r1
 8027050:	2101      	movs	r1, #1
 8027052:	f7ff ff03 	bl	8026e5c <_Balloc>
 8027056:	4602      	mov	r2, r0
 8027058:	b928      	cbnz	r0, 8027066 <__i2b+0x1a>
 802705a:	4b05      	ldr	r3, [pc, #20]	; (8027070 <__i2b+0x24>)
 802705c:	4805      	ldr	r0, [pc, #20]	; (8027074 <__i2b+0x28>)
 802705e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8027062:	f000 fc1f 	bl	80278a4 <__assert_func>
 8027066:	2301      	movs	r3, #1
 8027068:	6144      	str	r4, [r0, #20]
 802706a:	6103      	str	r3, [r0, #16]
 802706c:	bd10      	pop	{r4, pc}
 802706e:	bf00      	nop
 8027070:	080c31f7 	.word	0x080c31f7
 8027074:	080c3208 	.word	0x080c3208

08027078 <__multiply>:
 8027078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802707c:	4691      	mov	r9, r2
 802707e:	690a      	ldr	r2, [r1, #16]
 8027080:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8027084:	429a      	cmp	r2, r3
 8027086:	bfb8      	it	lt
 8027088:	460b      	movlt	r3, r1
 802708a:	460c      	mov	r4, r1
 802708c:	bfbc      	itt	lt
 802708e:	464c      	movlt	r4, r9
 8027090:	4699      	movlt	r9, r3
 8027092:	6927      	ldr	r7, [r4, #16]
 8027094:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8027098:	68a3      	ldr	r3, [r4, #8]
 802709a:	6861      	ldr	r1, [r4, #4]
 802709c:	eb07 060a 	add.w	r6, r7, sl
 80270a0:	42b3      	cmp	r3, r6
 80270a2:	b085      	sub	sp, #20
 80270a4:	bfb8      	it	lt
 80270a6:	3101      	addlt	r1, #1
 80270a8:	f7ff fed8 	bl	8026e5c <_Balloc>
 80270ac:	b930      	cbnz	r0, 80270bc <__multiply+0x44>
 80270ae:	4602      	mov	r2, r0
 80270b0:	4b44      	ldr	r3, [pc, #272]	; (80271c4 <__multiply+0x14c>)
 80270b2:	4845      	ldr	r0, [pc, #276]	; (80271c8 <__multiply+0x150>)
 80270b4:	f240 115d 	movw	r1, #349	; 0x15d
 80270b8:	f000 fbf4 	bl	80278a4 <__assert_func>
 80270bc:	f100 0514 	add.w	r5, r0, #20
 80270c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80270c4:	462b      	mov	r3, r5
 80270c6:	2200      	movs	r2, #0
 80270c8:	4543      	cmp	r3, r8
 80270ca:	d321      	bcc.n	8027110 <__multiply+0x98>
 80270cc:	f104 0314 	add.w	r3, r4, #20
 80270d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80270d4:	f109 0314 	add.w	r3, r9, #20
 80270d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80270dc:	9202      	str	r2, [sp, #8]
 80270de:	1b3a      	subs	r2, r7, r4
 80270e0:	3a15      	subs	r2, #21
 80270e2:	f022 0203 	bic.w	r2, r2, #3
 80270e6:	3204      	adds	r2, #4
 80270e8:	f104 0115 	add.w	r1, r4, #21
 80270ec:	428f      	cmp	r7, r1
 80270ee:	bf38      	it	cc
 80270f0:	2204      	movcc	r2, #4
 80270f2:	9201      	str	r2, [sp, #4]
 80270f4:	9a02      	ldr	r2, [sp, #8]
 80270f6:	9303      	str	r3, [sp, #12]
 80270f8:	429a      	cmp	r2, r3
 80270fa:	d80c      	bhi.n	8027116 <__multiply+0x9e>
 80270fc:	2e00      	cmp	r6, #0
 80270fe:	dd03      	ble.n	8027108 <__multiply+0x90>
 8027100:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8027104:	2b00      	cmp	r3, #0
 8027106:	d05a      	beq.n	80271be <__multiply+0x146>
 8027108:	6106      	str	r6, [r0, #16]
 802710a:	b005      	add	sp, #20
 802710c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027110:	f843 2b04 	str.w	r2, [r3], #4
 8027114:	e7d8      	b.n	80270c8 <__multiply+0x50>
 8027116:	f8b3 a000 	ldrh.w	sl, [r3]
 802711a:	f1ba 0f00 	cmp.w	sl, #0
 802711e:	d024      	beq.n	802716a <__multiply+0xf2>
 8027120:	f104 0e14 	add.w	lr, r4, #20
 8027124:	46a9      	mov	r9, r5
 8027126:	f04f 0c00 	mov.w	ip, #0
 802712a:	f85e 2b04 	ldr.w	r2, [lr], #4
 802712e:	f8d9 1000 	ldr.w	r1, [r9]
 8027132:	fa1f fb82 	uxth.w	fp, r2
 8027136:	b289      	uxth	r1, r1
 8027138:	fb0a 110b 	mla	r1, sl, fp, r1
 802713c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8027140:	f8d9 2000 	ldr.w	r2, [r9]
 8027144:	4461      	add	r1, ip
 8027146:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802714a:	fb0a c20b 	mla	r2, sl, fp, ip
 802714e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8027152:	b289      	uxth	r1, r1
 8027154:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8027158:	4577      	cmp	r7, lr
 802715a:	f849 1b04 	str.w	r1, [r9], #4
 802715e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8027162:	d8e2      	bhi.n	802712a <__multiply+0xb2>
 8027164:	9a01      	ldr	r2, [sp, #4]
 8027166:	f845 c002 	str.w	ip, [r5, r2]
 802716a:	9a03      	ldr	r2, [sp, #12]
 802716c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8027170:	3304      	adds	r3, #4
 8027172:	f1b9 0f00 	cmp.w	r9, #0
 8027176:	d020      	beq.n	80271ba <__multiply+0x142>
 8027178:	6829      	ldr	r1, [r5, #0]
 802717a:	f104 0c14 	add.w	ip, r4, #20
 802717e:	46ae      	mov	lr, r5
 8027180:	f04f 0a00 	mov.w	sl, #0
 8027184:	f8bc b000 	ldrh.w	fp, [ip]
 8027188:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802718c:	fb09 220b 	mla	r2, r9, fp, r2
 8027190:	4492      	add	sl, r2
 8027192:	b289      	uxth	r1, r1
 8027194:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8027198:	f84e 1b04 	str.w	r1, [lr], #4
 802719c:	f85c 2b04 	ldr.w	r2, [ip], #4
 80271a0:	f8be 1000 	ldrh.w	r1, [lr]
 80271a4:	0c12      	lsrs	r2, r2, #16
 80271a6:	fb09 1102 	mla	r1, r9, r2, r1
 80271aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80271ae:	4567      	cmp	r7, ip
 80271b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80271b4:	d8e6      	bhi.n	8027184 <__multiply+0x10c>
 80271b6:	9a01      	ldr	r2, [sp, #4]
 80271b8:	50a9      	str	r1, [r5, r2]
 80271ba:	3504      	adds	r5, #4
 80271bc:	e79a      	b.n	80270f4 <__multiply+0x7c>
 80271be:	3e01      	subs	r6, #1
 80271c0:	e79c      	b.n	80270fc <__multiply+0x84>
 80271c2:	bf00      	nop
 80271c4:	080c31f7 	.word	0x080c31f7
 80271c8:	080c3208 	.word	0x080c3208

080271cc <__pow5mult>:
 80271cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80271d0:	4615      	mov	r5, r2
 80271d2:	f012 0203 	ands.w	r2, r2, #3
 80271d6:	4606      	mov	r6, r0
 80271d8:	460f      	mov	r7, r1
 80271da:	d007      	beq.n	80271ec <__pow5mult+0x20>
 80271dc:	4c25      	ldr	r4, [pc, #148]	; (8027274 <__pow5mult+0xa8>)
 80271de:	3a01      	subs	r2, #1
 80271e0:	2300      	movs	r3, #0
 80271e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80271e6:	f7ff fe9b 	bl	8026f20 <__multadd>
 80271ea:	4607      	mov	r7, r0
 80271ec:	10ad      	asrs	r5, r5, #2
 80271ee:	d03d      	beq.n	802726c <__pow5mult+0xa0>
 80271f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80271f2:	b97c      	cbnz	r4, 8027214 <__pow5mult+0x48>
 80271f4:	2010      	movs	r0, #16
 80271f6:	f7fe fa9d 	bl	8025734 <malloc>
 80271fa:	4602      	mov	r2, r0
 80271fc:	6270      	str	r0, [r6, #36]	; 0x24
 80271fe:	b928      	cbnz	r0, 802720c <__pow5mult+0x40>
 8027200:	4b1d      	ldr	r3, [pc, #116]	; (8027278 <__pow5mult+0xac>)
 8027202:	481e      	ldr	r0, [pc, #120]	; (802727c <__pow5mult+0xb0>)
 8027204:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8027208:	f000 fb4c 	bl	80278a4 <__assert_func>
 802720c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8027210:	6004      	str	r4, [r0, #0]
 8027212:	60c4      	str	r4, [r0, #12]
 8027214:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8027218:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802721c:	b94c      	cbnz	r4, 8027232 <__pow5mult+0x66>
 802721e:	f240 2171 	movw	r1, #625	; 0x271
 8027222:	4630      	mov	r0, r6
 8027224:	f7ff ff12 	bl	802704c <__i2b>
 8027228:	2300      	movs	r3, #0
 802722a:	f8c8 0008 	str.w	r0, [r8, #8]
 802722e:	4604      	mov	r4, r0
 8027230:	6003      	str	r3, [r0, #0]
 8027232:	f04f 0900 	mov.w	r9, #0
 8027236:	07eb      	lsls	r3, r5, #31
 8027238:	d50a      	bpl.n	8027250 <__pow5mult+0x84>
 802723a:	4639      	mov	r1, r7
 802723c:	4622      	mov	r2, r4
 802723e:	4630      	mov	r0, r6
 8027240:	f7ff ff1a 	bl	8027078 <__multiply>
 8027244:	4639      	mov	r1, r7
 8027246:	4680      	mov	r8, r0
 8027248:	4630      	mov	r0, r6
 802724a:	f7ff fe47 	bl	8026edc <_Bfree>
 802724e:	4647      	mov	r7, r8
 8027250:	106d      	asrs	r5, r5, #1
 8027252:	d00b      	beq.n	802726c <__pow5mult+0xa0>
 8027254:	6820      	ldr	r0, [r4, #0]
 8027256:	b938      	cbnz	r0, 8027268 <__pow5mult+0x9c>
 8027258:	4622      	mov	r2, r4
 802725a:	4621      	mov	r1, r4
 802725c:	4630      	mov	r0, r6
 802725e:	f7ff ff0b 	bl	8027078 <__multiply>
 8027262:	6020      	str	r0, [r4, #0]
 8027264:	f8c0 9000 	str.w	r9, [r0]
 8027268:	4604      	mov	r4, r0
 802726a:	e7e4      	b.n	8027236 <__pow5mult+0x6a>
 802726c:	4638      	mov	r0, r7
 802726e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027272:	bf00      	nop
 8027274:	080c3358 	.word	0x080c3358
 8027278:	080c3185 	.word	0x080c3185
 802727c:	080c3208 	.word	0x080c3208

08027280 <__lshift>:
 8027280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027284:	460c      	mov	r4, r1
 8027286:	6849      	ldr	r1, [r1, #4]
 8027288:	6923      	ldr	r3, [r4, #16]
 802728a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802728e:	68a3      	ldr	r3, [r4, #8]
 8027290:	4607      	mov	r7, r0
 8027292:	4691      	mov	r9, r2
 8027294:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8027298:	f108 0601 	add.w	r6, r8, #1
 802729c:	42b3      	cmp	r3, r6
 802729e:	db0b      	blt.n	80272b8 <__lshift+0x38>
 80272a0:	4638      	mov	r0, r7
 80272a2:	f7ff fddb 	bl	8026e5c <_Balloc>
 80272a6:	4605      	mov	r5, r0
 80272a8:	b948      	cbnz	r0, 80272be <__lshift+0x3e>
 80272aa:	4602      	mov	r2, r0
 80272ac:	4b2a      	ldr	r3, [pc, #168]	; (8027358 <__lshift+0xd8>)
 80272ae:	482b      	ldr	r0, [pc, #172]	; (802735c <__lshift+0xdc>)
 80272b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80272b4:	f000 faf6 	bl	80278a4 <__assert_func>
 80272b8:	3101      	adds	r1, #1
 80272ba:	005b      	lsls	r3, r3, #1
 80272bc:	e7ee      	b.n	802729c <__lshift+0x1c>
 80272be:	2300      	movs	r3, #0
 80272c0:	f100 0114 	add.w	r1, r0, #20
 80272c4:	f100 0210 	add.w	r2, r0, #16
 80272c8:	4618      	mov	r0, r3
 80272ca:	4553      	cmp	r3, sl
 80272cc:	db37      	blt.n	802733e <__lshift+0xbe>
 80272ce:	6920      	ldr	r0, [r4, #16]
 80272d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80272d4:	f104 0314 	add.w	r3, r4, #20
 80272d8:	f019 091f 	ands.w	r9, r9, #31
 80272dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80272e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80272e4:	d02f      	beq.n	8027346 <__lshift+0xc6>
 80272e6:	f1c9 0e20 	rsb	lr, r9, #32
 80272ea:	468a      	mov	sl, r1
 80272ec:	f04f 0c00 	mov.w	ip, #0
 80272f0:	681a      	ldr	r2, [r3, #0]
 80272f2:	fa02 f209 	lsl.w	r2, r2, r9
 80272f6:	ea42 020c 	orr.w	r2, r2, ip
 80272fa:	f84a 2b04 	str.w	r2, [sl], #4
 80272fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8027302:	4298      	cmp	r0, r3
 8027304:	fa22 fc0e 	lsr.w	ip, r2, lr
 8027308:	d8f2      	bhi.n	80272f0 <__lshift+0x70>
 802730a:	1b03      	subs	r3, r0, r4
 802730c:	3b15      	subs	r3, #21
 802730e:	f023 0303 	bic.w	r3, r3, #3
 8027312:	3304      	adds	r3, #4
 8027314:	f104 0215 	add.w	r2, r4, #21
 8027318:	4290      	cmp	r0, r2
 802731a:	bf38      	it	cc
 802731c:	2304      	movcc	r3, #4
 802731e:	f841 c003 	str.w	ip, [r1, r3]
 8027322:	f1bc 0f00 	cmp.w	ip, #0
 8027326:	d001      	beq.n	802732c <__lshift+0xac>
 8027328:	f108 0602 	add.w	r6, r8, #2
 802732c:	3e01      	subs	r6, #1
 802732e:	4638      	mov	r0, r7
 8027330:	612e      	str	r6, [r5, #16]
 8027332:	4621      	mov	r1, r4
 8027334:	f7ff fdd2 	bl	8026edc <_Bfree>
 8027338:	4628      	mov	r0, r5
 802733a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802733e:	f842 0f04 	str.w	r0, [r2, #4]!
 8027342:	3301      	adds	r3, #1
 8027344:	e7c1      	b.n	80272ca <__lshift+0x4a>
 8027346:	3904      	subs	r1, #4
 8027348:	f853 2b04 	ldr.w	r2, [r3], #4
 802734c:	f841 2f04 	str.w	r2, [r1, #4]!
 8027350:	4298      	cmp	r0, r3
 8027352:	d8f9      	bhi.n	8027348 <__lshift+0xc8>
 8027354:	e7ea      	b.n	802732c <__lshift+0xac>
 8027356:	bf00      	nop
 8027358:	080c31f7 	.word	0x080c31f7
 802735c:	080c3208 	.word	0x080c3208

08027360 <__mcmp>:
 8027360:	b530      	push	{r4, r5, lr}
 8027362:	6902      	ldr	r2, [r0, #16]
 8027364:	690c      	ldr	r4, [r1, #16]
 8027366:	1b12      	subs	r2, r2, r4
 8027368:	d10e      	bne.n	8027388 <__mcmp+0x28>
 802736a:	f100 0314 	add.w	r3, r0, #20
 802736e:	3114      	adds	r1, #20
 8027370:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8027374:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8027378:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802737c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8027380:	42a5      	cmp	r5, r4
 8027382:	d003      	beq.n	802738c <__mcmp+0x2c>
 8027384:	d305      	bcc.n	8027392 <__mcmp+0x32>
 8027386:	2201      	movs	r2, #1
 8027388:	4610      	mov	r0, r2
 802738a:	bd30      	pop	{r4, r5, pc}
 802738c:	4283      	cmp	r3, r0
 802738e:	d3f3      	bcc.n	8027378 <__mcmp+0x18>
 8027390:	e7fa      	b.n	8027388 <__mcmp+0x28>
 8027392:	f04f 32ff 	mov.w	r2, #4294967295
 8027396:	e7f7      	b.n	8027388 <__mcmp+0x28>

08027398 <__mdiff>:
 8027398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802739c:	460c      	mov	r4, r1
 802739e:	4606      	mov	r6, r0
 80273a0:	4611      	mov	r1, r2
 80273a2:	4620      	mov	r0, r4
 80273a4:	4690      	mov	r8, r2
 80273a6:	f7ff ffdb 	bl	8027360 <__mcmp>
 80273aa:	1e05      	subs	r5, r0, #0
 80273ac:	d110      	bne.n	80273d0 <__mdiff+0x38>
 80273ae:	4629      	mov	r1, r5
 80273b0:	4630      	mov	r0, r6
 80273b2:	f7ff fd53 	bl	8026e5c <_Balloc>
 80273b6:	b930      	cbnz	r0, 80273c6 <__mdiff+0x2e>
 80273b8:	4b3a      	ldr	r3, [pc, #232]	; (80274a4 <__mdiff+0x10c>)
 80273ba:	4602      	mov	r2, r0
 80273bc:	f240 2132 	movw	r1, #562	; 0x232
 80273c0:	4839      	ldr	r0, [pc, #228]	; (80274a8 <__mdiff+0x110>)
 80273c2:	f000 fa6f 	bl	80278a4 <__assert_func>
 80273c6:	2301      	movs	r3, #1
 80273c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80273cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273d0:	bfa4      	itt	ge
 80273d2:	4643      	movge	r3, r8
 80273d4:	46a0      	movge	r8, r4
 80273d6:	4630      	mov	r0, r6
 80273d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80273dc:	bfa6      	itte	ge
 80273de:	461c      	movge	r4, r3
 80273e0:	2500      	movge	r5, #0
 80273e2:	2501      	movlt	r5, #1
 80273e4:	f7ff fd3a 	bl	8026e5c <_Balloc>
 80273e8:	b920      	cbnz	r0, 80273f4 <__mdiff+0x5c>
 80273ea:	4b2e      	ldr	r3, [pc, #184]	; (80274a4 <__mdiff+0x10c>)
 80273ec:	4602      	mov	r2, r0
 80273ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80273f2:	e7e5      	b.n	80273c0 <__mdiff+0x28>
 80273f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80273f8:	6926      	ldr	r6, [r4, #16]
 80273fa:	60c5      	str	r5, [r0, #12]
 80273fc:	f104 0914 	add.w	r9, r4, #20
 8027400:	f108 0514 	add.w	r5, r8, #20
 8027404:	f100 0e14 	add.w	lr, r0, #20
 8027408:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802740c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8027410:	f108 0210 	add.w	r2, r8, #16
 8027414:	46f2      	mov	sl, lr
 8027416:	2100      	movs	r1, #0
 8027418:	f859 3b04 	ldr.w	r3, [r9], #4
 802741c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8027420:	fa1f f883 	uxth.w	r8, r3
 8027424:	fa11 f18b 	uxtah	r1, r1, fp
 8027428:	0c1b      	lsrs	r3, r3, #16
 802742a:	eba1 0808 	sub.w	r8, r1, r8
 802742e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8027432:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8027436:	fa1f f888 	uxth.w	r8, r8
 802743a:	1419      	asrs	r1, r3, #16
 802743c:	454e      	cmp	r6, r9
 802743e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8027442:	f84a 3b04 	str.w	r3, [sl], #4
 8027446:	d8e7      	bhi.n	8027418 <__mdiff+0x80>
 8027448:	1b33      	subs	r3, r6, r4
 802744a:	3b15      	subs	r3, #21
 802744c:	f023 0303 	bic.w	r3, r3, #3
 8027450:	3304      	adds	r3, #4
 8027452:	3415      	adds	r4, #21
 8027454:	42a6      	cmp	r6, r4
 8027456:	bf38      	it	cc
 8027458:	2304      	movcc	r3, #4
 802745a:	441d      	add	r5, r3
 802745c:	4473      	add	r3, lr
 802745e:	469e      	mov	lr, r3
 8027460:	462e      	mov	r6, r5
 8027462:	4566      	cmp	r6, ip
 8027464:	d30e      	bcc.n	8027484 <__mdiff+0xec>
 8027466:	f10c 0203 	add.w	r2, ip, #3
 802746a:	1b52      	subs	r2, r2, r5
 802746c:	f022 0203 	bic.w	r2, r2, #3
 8027470:	3d03      	subs	r5, #3
 8027472:	45ac      	cmp	ip, r5
 8027474:	bf38      	it	cc
 8027476:	2200      	movcc	r2, #0
 8027478:	441a      	add	r2, r3
 802747a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802747e:	b17b      	cbz	r3, 80274a0 <__mdiff+0x108>
 8027480:	6107      	str	r7, [r0, #16]
 8027482:	e7a3      	b.n	80273cc <__mdiff+0x34>
 8027484:	f856 8b04 	ldr.w	r8, [r6], #4
 8027488:	fa11 f288 	uxtah	r2, r1, r8
 802748c:	1414      	asrs	r4, r2, #16
 802748e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8027492:	b292      	uxth	r2, r2
 8027494:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8027498:	f84e 2b04 	str.w	r2, [lr], #4
 802749c:	1421      	asrs	r1, r4, #16
 802749e:	e7e0      	b.n	8027462 <__mdiff+0xca>
 80274a0:	3f01      	subs	r7, #1
 80274a2:	e7ea      	b.n	802747a <__mdiff+0xe2>
 80274a4:	080c31f7 	.word	0x080c31f7
 80274a8:	080c3208 	.word	0x080c3208

080274ac <__d2b>:
 80274ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80274b0:	4689      	mov	r9, r1
 80274b2:	2101      	movs	r1, #1
 80274b4:	ec57 6b10 	vmov	r6, r7, d0
 80274b8:	4690      	mov	r8, r2
 80274ba:	f7ff fccf 	bl	8026e5c <_Balloc>
 80274be:	4604      	mov	r4, r0
 80274c0:	b930      	cbnz	r0, 80274d0 <__d2b+0x24>
 80274c2:	4602      	mov	r2, r0
 80274c4:	4b25      	ldr	r3, [pc, #148]	; (802755c <__d2b+0xb0>)
 80274c6:	4826      	ldr	r0, [pc, #152]	; (8027560 <__d2b+0xb4>)
 80274c8:	f240 310a 	movw	r1, #778	; 0x30a
 80274cc:	f000 f9ea 	bl	80278a4 <__assert_func>
 80274d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80274d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80274d8:	bb35      	cbnz	r5, 8027528 <__d2b+0x7c>
 80274da:	2e00      	cmp	r6, #0
 80274dc:	9301      	str	r3, [sp, #4]
 80274de:	d028      	beq.n	8027532 <__d2b+0x86>
 80274e0:	4668      	mov	r0, sp
 80274e2:	9600      	str	r6, [sp, #0]
 80274e4:	f7ff fd82 	bl	8026fec <__lo0bits>
 80274e8:	9900      	ldr	r1, [sp, #0]
 80274ea:	b300      	cbz	r0, 802752e <__d2b+0x82>
 80274ec:	9a01      	ldr	r2, [sp, #4]
 80274ee:	f1c0 0320 	rsb	r3, r0, #32
 80274f2:	fa02 f303 	lsl.w	r3, r2, r3
 80274f6:	430b      	orrs	r3, r1
 80274f8:	40c2      	lsrs	r2, r0
 80274fa:	6163      	str	r3, [r4, #20]
 80274fc:	9201      	str	r2, [sp, #4]
 80274fe:	9b01      	ldr	r3, [sp, #4]
 8027500:	61a3      	str	r3, [r4, #24]
 8027502:	2b00      	cmp	r3, #0
 8027504:	bf14      	ite	ne
 8027506:	2202      	movne	r2, #2
 8027508:	2201      	moveq	r2, #1
 802750a:	6122      	str	r2, [r4, #16]
 802750c:	b1d5      	cbz	r5, 8027544 <__d2b+0x98>
 802750e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8027512:	4405      	add	r5, r0
 8027514:	f8c9 5000 	str.w	r5, [r9]
 8027518:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802751c:	f8c8 0000 	str.w	r0, [r8]
 8027520:	4620      	mov	r0, r4
 8027522:	b003      	add	sp, #12
 8027524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802752c:	e7d5      	b.n	80274da <__d2b+0x2e>
 802752e:	6161      	str	r1, [r4, #20]
 8027530:	e7e5      	b.n	80274fe <__d2b+0x52>
 8027532:	a801      	add	r0, sp, #4
 8027534:	f7ff fd5a 	bl	8026fec <__lo0bits>
 8027538:	9b01      	ldr	r3, [sp, #4]
 802753a:	6163      	str	r3, [r4, #20]
 802753c:	2201      	movs	r2, #1
 802753e:	6122      	str	r2, [r4, #16]
 8027540:	3020      	adds	r0, #32
 8027542:	e7e3      	b.n	802750c <__d2b+0x60>
 8027544:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8027548:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802754c:	f8c9 0000 	str.w	r0, [r9]
 8027550:	6918      	ldr	r0, [r3, #16]
 8027552:	f7ff fd2b 	bl	8026fac <__hi0bits>
 8027556:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802755a:	e7df      	b.n	802751c <__d2b+0x70>
 802755c:	080c31f7 	.word	0x080c31f7
 8027560:	080c3208 	.word	0x080c3208

08027564 <_calloc_r>:
 8027564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027566:	fba1 2402 	umull	r2, r4, r1, r2
 802756a:	b94c      	cbnz	r4, 8027580 <_calloc_r+0x1c>
 802756c:	4611      	mov	r1, r2
 802756e:	9201      	str	r2, [sp, #4]
 8027570:	f7fe f972 	bl	8025858 <_malloc_r>
 8027574:	9a01      	ldr	r2, [sp, #4]
 8027576:	4605      	mov	r5, r0
 8027578:	b930      	cbnz	r0, 8027588 <_calloc_r+0x24>
 802757a:	4628      	mov	r0, r5
 802757c:	b003      	add	sp, #12
 802757e:	bd30      	pop	{r4, r5, pc}
 8027580:	220c      	movs	r2, #12
 8027582:	6002      	str	r2, [r0, #0]
 8027584:	2500      	movs	r5, #0
 8027586:	e7f8      	b.n	802757a <_calloc_r+0x16>
 8027588:	4621      	mov	r1, r4
 802758a:	f7fe f8f1 	bl	8025770 <memset>
 802758e:	e7f4      	b.n	802757a <_calloc_r+0x16>

08027590 <_realloc_r>:
 8027590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027594:	4680      	mov	r8, r0
 8027596:	4614      	mov	r4, r2
 8027598:	460e      	mov	r6, r1
 802759a:	b921      	cbnz	r1, 80275a6 <_realloc_r+0x16>
 802759c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80275a0:	4611      	mov	r1, r2
 80275a2:	f7fe b959 	b.w	8025858 <_malloc_r>
 80275a6:	b92a      	cbnz	r2, 80275b4 <_realloc_r+0x24>
 80275a8:	f7fe f8ea 	bl	8025780 <_free_r>
 80275ac:	4625      	mov	r5, r4
 80275ae:	4628      	mov	r0, r5
 80275b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80275b4:	f000 f9d5 	bl	8027962 <_malloc_usable_size_r>
 80275b8:	4284      	cmp	r4, r0
 80275ba:	4607      	mov	r7, r0
 80275bc:	d802      	bhi.n	80275c4 <_realloc_r+0x34>
 80275be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80275c2:	d812      	bhi.n	80275ea <_realloc_r+0x5a>
 80275c4:	4621      	mov	r1, r4
 80275c6:	4640      	mov	r0, r8
 80275c8:	f7fe f946 	bl	8025858 <_malloc_r>
 80275cc:	4605      	mov	r5, r0
 80275ce:	2800      	cmp	r0, #0
 80275d0:	d0ed      	beq.n	80275ae <_realloc_r+0x1e>
 80275d2:	42bc      	cmp	r4, r7
 80275d4:	4622      	mov	r2, r4
 80275d6:	4631      	mov	r1, r6
 80275d8:	bf28      	it	cs
 80275da:	463a      	movcs	r2, r7
 80275dc:	f7fe f8ba 	bl	8025754 <memcpy>
 80275e0:	4631      	mov	r1, r6
 80275e2:	4640      	mov	r0, r8
 80275e4:	f7fe f8cc 	bl	8025780 <_free_r>
 80275e8:	e7e1      	b.n	80275ae <_realloc_r+0x1e>
 80275ea:	4635      	mov	r5, r6
 80275ec:	e7df      	b.n	80275ae <_realloc_r+0x1e>

080275ee <__ssputs_r>:
 80275ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80275f2:	688e      	ldr	r6, [r1, #8]
 80275f4:	429e      	cmp	r6, r3
 80275f6:	4682      	mov	sl, r0
 80275f8:	460c      	mov	r4, r1
 80275fa:	4690      	mov	r8, r2
 80275fc:	461f      	mov	r7, r3
 80275fe:	d838      	bhi.n	8027672 <__ssputs_r+0x84>
 8027600:	898a      	ldrh	r2, [r1, #12]
 8027602:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8027606:	d032      	beq.n	802766e <__ssputs_r+0x80>
 8027608:	6825      	ldr	r5, [r4, #0]
 802760a:	6909      	ldr	r1, [r1, #16]
 802760c:	eba5 0901 	sub.w	r9, r5, r1
 8027610:	6965      	ldr	r5, [r4, #20]
 8027612:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027616:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802761a:	3301      	adds	r3, #1
 802761c:	444b      	add	r3, r9
 802761e:	106d      	asrs	r5, r5, #1
 8027620:	429d      	cmp	r5, r3
 8027622:	bf38      	it	cc
 8027624:	461d      	movcc	r5, r3
 8027626:	0553      	lsls	r3, r2, #21
 8027628:	d531      	bpl.n	802768e <__ssputs_r+0xa0>
 802762a:	4629      	mov	r1, r5
 802762c:	f7fe f914 	bl	8025858 <_malloc_r>
 8027630:	4606      	mov	r6, r0
 8027632:	b950      	cbnz	r0, 802764a <__ssputs_r+0x5c>
 8027634:	230c      	movs	r3, #12
 8027636:	f8ca 3000 	str.w	r3, [sl]
 802763a:	89a3      	ldrh	r3, [r4, #12]
 802763c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027640:	81a3      	strh	r3, [r4, #12]
 8027642:	f04f 30ff 	mov.w	r0, #4294967295
 8027646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802764a:	6921      	ldr	r1, [r4, #16]
 802764c:	464a      	mov	r2, r9
 802764e:	f7fe f881 	bl	8025754 <memcpy>
 8027652:	89a3      	ldrh	r3, [r4, #12]
 8027654:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8027658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802765c:	81a3      	strh	r3, [r4, #12]
 802765e:	6126      	str	r6, [r4, #16]
 8027660:	6165      	str	r5, [r4, #20]
 8027662:	444e      	add	r6, r9
 8027664:	eba5 0509 	sub.w	r5, r5, r9
 8027668:	6026      	str	r6, [r4, #0]
 802766a:	60a5      	str	r5, [r4, #8]
 802766c:	463e      	mov	r6, r7
 802766e:	42be      	cmp	r6, r7
 8027670:	d900      	bls.n	8027674 <__ssputs_r+0x86>
 8027672:	463e      	mov	r6, r7
 8027674:	6820      	ldr	r0, [r4, #0]
 8027676:	4632      	mov	r2, r6
 8027678:	4641      	mov	r1, r8
 802767a:	f000 f958 	bl	802792e <memmove>
 802767e:	68a3      	ldr	r3, [r4, #8]
 8027680:	1b9b      	subs	r3, r3, r6
 8027682:	60a3      	str	r3, [r4, #8]
 8027684:	6823      	ldr	r3, [r4, #0]
 8027686:	4433      	add	r3, r6
 8027688:	6023      	str	r3, [r4, #0]
 802768a:	2000      	movs	r0, #0
 802768c:	e7db      	b.n	8027646 <__ssputs_r+0x58>
 802768e:	462a      	mov	r2, r5
 8027690:	f7ff ff7e 	bl	8027590 <_realloc_r>
 8027694:	4606      	mov	r6, r0
 8027696:	2800      	cmp	r0, #0
 8027698:	d1e1      	bne.n	802765e <__ssputs_r+0x70>
 802769a:	6921      	ldr	r1, [r4, #16]
 802769c:	4650      	mov	r0, sl
 802769e:	f7fe f86f 	bl	8025780 <_free_r>
 80276a2:	e7c7      	b.n	8027634 <__ssputs_r+0x46>

080276a4 <_svfiprintf_r>:
 80276a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276a8:	4698      	mov	r8, r3
 80276aa:	898b      	ldrh	r3, [r1, #12]
 80276ac:	061b      	lsls	r3, r3, #24
 80276ae:	b09d      	sub	sp, #116	; 0x74
 80276b0:	4607      	mov	r7, r0
 80276b2:	460d      	mov	r5, r1
 80276b4:	4614      	mov	r4, r2
 80276b6:	d50e      	bpl.n	80276d6 <_svfiprintf_r+0x32>
 80276b8:	690b      	ldr	r3, [r1, #16]
 80276ba:	b963      	cbnz	r3, 80276d6 <_svfiprintf_r+0x32>
 80276bc:	2140      	movs	r1, #64	; 0x40
 80276be:	f7fe f8cb 	bl	8025858 <_malloc_r>
 80276c2:	6028      	str	r0, [r5, #0]
 80276c4:	6128      	str	r0, [r5, #16]
 80276c6:	b920      	cbnz	r0, 80276d2 <_svfiprintf_r+0x2e>
 80276c8:	230c      	movs	r3, #12
 80276ca:	603b      	str	r3, [r7, #0]
 80276cc:	f04f 30ff 	mov.w	r0, #4294967295
 80276d0:	e0d1      	b.n	8027876 <_svfiprintf_r+0x1d2>
 80276d2:	2340      	movs	r3, #64	; 0x40
 80276d4:	616b      	str	r3, [r5, #20]
 80276d6:	2300      	movs	r3, #0
 80276d8:	9309      	str	r3, [sp, #36]	; 0x24
 80276da:	2320      	movs	r3, #32
 80276dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80276e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80276e4:	2330      	movs	r3, #48	; 0x30
 80276e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8027890 <_svfiprintf_r+0x1ec>
 80276ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80276ee:	f04f 0901 	mov.w	r9, #1
 80276f2:	4623      	mov	r3, r4
 80276f4:	469a      	mov	sl, r3
 80276f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80276fa:	b10a      	cbz	r2, 8027700 <_svfiprintf_r+0x5c>
 80276fc:	2a25      	cmp	r2, #37	; 0x25
 80276fe:	d1f9      	bne.n	80276f4 <_svfiprintf_r+0x50>
 8027700:	ebba 0b04 	subs.w	fp, sl, r4
 8027704:	d00b      	beq.n	802771e <_svfiprintf_r+0x7a>
 8027706:	465b      	mov	r3, fp
 8027708:	4622      	mov	r2, r4
 802770a:	4629      	mov	r1, r5
 802770c:	4638      	mov	r0, r7
 802770e:	f7ff ff6e 	bl	80275ee <__ssputs_r>
 8027712:	3001      	adds	r0, #1
 8027714:	f000 80aa 	beq.w	802786c <_svfiprintf_r+0x1c8>
 8027718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802771a:	445a      	add	r2, fp
 802771c:	9209      	str	r2, [sp, #36]	; 0x24
 802771e:	f89a 3000 	ldrb.w	r3, [sl]
 8027722:	2b00      	cmp	r3, #0
 8027724:	f000 80a2 	beq.w	802786c <_svfiprintf_r+0x1c8>
 8027728:	2300      	movs	r3, #0
 802772a:	f04f 32ff 	mov.w	r2, #4294967295
 802772e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027732:	f10a 0a01 	add.w	sl, sl, #1
 8027736:	9304      	str	r3, [sp, #16]
 8027738:	9307      	str	r3, [sp, #28]
 802773a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802773e:	931a      	str	r3, [sp, #104]	; 0x68
 8027740:	4654      	mov	r4, sl
 8027742:	2205      	movs	r2, #5
 8027744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027748:	4851      	ldr	r0, [pc, #324]	; (8027890 <_svfiprintf_r+0x1ec>)
 802774a:	f7d8 fde1 	bl	8000310 <memchr>
 802774e:	9a04      	ldr	r2, [sp, #16]
 8027750:	b9d8      	cbnz	r0, 802778a <_svfiprintf_r+0xe6>
 8027752:	06d0      	lsls	r0, r2, #27
 8027754:	bf44      	itt	mi
 8027756:	2320      	movmi	r3, #32
 8027758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802775c:	0711      	lsls	r1, r2, #28
 802775e:	bf44      	itt	mi
 8027760:	232b      	movmi	r3, #43	; 0x2b
 8027762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027766:	f89a 3000 	ldrb.w	r3, [sl]
 802776a:	2b2a      	cmp	r3, #42	; 0x2a
 802776c:	d015      	beq.n	802779a <_svfiprintf_r+0xf6>
 802776e:	9a07      	ldr	r2, [sp, #28]
 8027770:	4654      	mov	r4, sl
 8027772:	2000      	movs	r0, #0
 8027774:	f04f 0c0a 	mov.w	ip, #10
 8027778:	4621      	mov	r1, r4
 802777a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802777e:	3b30      	subs	r3, #48	; 0x30
 8027780:	2b09      	cmp	r3, #9
 8027782:	d94e      	bls.n	8027822 <_svfiprintf_r+0x17e>
 8027784:	b1b0      	cbz	r0, 80277b4 <_svfiprintf_r+0x110>
 8027786:	9207      	str	r2, [sp, #28]
 8027788:	e014      	b.n	80277b4 <_svfiprintf_r+0x110>
 802778a:	eba0 0308 	sub.w	r3, r0, r8
 802778e:	fa09 f303 	lsl.w	r3, r9, r3
 8027792:	4313      	orrs	r3, r2
 8027794:	9304      	str	r3, [sp, #16]
 8027796:	46a2      	mov	sl, r4
 8027798:	e7d2      	b.n	8027740 <_svfiprintf_r+0x9c>
 802779a:	9b03      	ldr	r3, [sp, #12]
 802779c:	1d19      	adds	r1, r3, #4
 802779e:	681b      	ldr	r3, [r3, #0]
 80277a0:	9103      	str	r1, [sp, #12]
 80277a2:	2b00      	cmp	r3, #0
 80277a4:	bfbb      	ittet	lt
 80277a6:	425b      	neglt	r3, r3
 80277a8:	f042 0202 	orrlt.w	r2, r2, #2
 80277ac:	9307      	strge	r3, [sp, #28]
 80277ae:	9307      	strlt	r3, [sp, #28]
 80277b0:	bfb8      	it	lt
 80277b2:	9204      	strlt	r2, [sp, #16]
 80277b4:	7823      	ldrb	r3, [r4, #0]
 80277b6:	2b2e      	cmp	r3, #46	; 0x2e
 80277b8:	d10c      	bne.n	80277d4 <_svfiprintf_r+0x130>
 80277ba:	7863      	ldrb	r3, [r4, #1]
 80277bc:	2b2a      	cmp	r3, #42	; 0x2a
 80277be:	d135      	bne.n	802782c <_svfiprintf_r+0x188>
 80277c0:	9b03      	ldr	r3, [sp, #12]
 80277c2:	1d1a      	adds	r2, r3, #4
 80277c4:	681b      	ldr	r3, [r3, #0]
 80277c6:	9203      	str	r2, [sp, #12]
 80277c8:	2b00      	cmp	r3, #0
 80277ca:	bfb8      	it	lt
 80277cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80277d0:	3402      	adds	r4, #2
 80277d2:	9305      	str	r3, [sp, #20]
 80277d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80278a0 <_svfiprintf_r+0x1fc>
 80277d8:	7821      	ldrb	r1, [r4, #0]
 80277da:	2203      	movs	r2, #3
 80277dc:	4650      	mov	r0, sl
 80277de:	f7d8 fd97 	bl	8000310 <memchr>
 80277e2:	b140      	cbz	r0, 80277f6 <_svfiprintf_r+0x152>
 80277e4:	2340      	movs	r3, #64	; 0x40
 80277e6:	eba0 000a 	sub.w	r0, r0, sl
 80277ea:	fa03 f000 	lsl.w	r0, r3, r0
 80277ee:	9b04      	ldr	r3, [sp, #16]
 80277f0:	4303      	orrs	r3, r0
 80277f2:	3401      	adds	r4, #1
 80277f4:	9304      	str	r3, [sp, #16]
 80277f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80277fa:	4826      	ldr	r0, [pc, #152]	; (8027894 <_svfiprintf_r+0x1f0>)
 80277fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027800:	2206      	movs	r2, #6
 8027802:	f7d8 fd85 	bl	8000310 <memchr>
 8027806:	2800      	cmp	r0, #0
 8027808:	d038      	beq.n	802787c <_svfiprintf_r+0x1d8>
 802780a:	4b23      	ldr	r3, [pc, #140]	; (8027898 <_svfiprintf_r+0x1f4>)
 802780c:	bb1b      	cbnz	r3, 8027856 <_svfiprintf_r+0x1b2>
 802780e:	9b03      	ldr	r3, [sp, #12]
 8027810:	3307      	adds	r3, #7
 8027812:	f023 0307 	bic.w	r3, r3, #7
 8027816:	3308      	adds	r3, #8
 8027818:	9303      	str	r3, [sp, #12]
 802781a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802781c:	4433      	add	r3, r6
 802781e:	9309      	str	r3, [sp, #36]	; 0x24
 8027820:	e767      	b.n	80276f2 <_svfiprintf_r+0x4e>
 8027822:	fb0c 3202 	mla	r2, ip, r2, r3
 8027826:	460c      	mov	r4, r1
 8027828:	2001      	movs	r0, #1
 802782a:	e7a5      	b.n	8027778 <_svfiprintf_r+0xd4>
 802782c:	2300      	movs	r3, #0
 802782e:	3401      	adds	r4, #1
 8027830:	9305      	str	r3, [sp, #20]
 8027832:	4619      	mov	r1, r3
 8027834:	f04f 0c0a 	mov.w	ip, #10
 8027838:	4620      	mov	r0, r4
 802783a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802783e:	3a30      	subs	r2, #48	; 0x30
 8027840:	2a09      	cmp	r2, #9
 8027842:	d903      	bls.n	802784c <_svfiprintf_r+0x1a8>
 8027844:	2b00      	cmp	r3, #0
 8027846:	d0c5      	beq.n	80277d4 <_svfiprintf_r+0x130>
 8027848:	9105      	str	r1, [sp, #20]
 802784a:	e7c3      	b.n	80277d4 <_svfiprintf_r+0x130>
 802784c:	fb0c 2101 	mla	r1, ip, r1, r2
 8027850:	4604      	mov	r4, r0
 8027852:	2301      	movs	r3, #1
 8027854:	e7f0      	b.n	8027838 <_svfiprintf_r+0x194>
 8027856:	ab03      	add	r3, sp, #12
 8027858:	9300      	str	r3, [sp, #0]
 802785a:	462a      	mov	r2, r5
 802785c:	4b0f      	ldr	r3, [pc, #60]	; (802789c <_svfiprintf_r+0x1f8>)
 802785e:	a904      	add	r1, sp, #16
 8027860:	4638      	mov	r0, r7
 8027862:	f7fe f8fd 	bl	8025a60 <_printf_float>
 8027866:	1c42      	adds	r2, r0, #1
 8027868:	4606      	mov	r6, r0
 802786a:	d1d6      	bne.n	802781a <_svfiprintf_r+0x176>
 802786c:	89ab      	ldrh	r3, [r5, #12]
 802786e:	065b      	lsls	r3, r3, #25
 8027870:	f53f af2c 	bmi.w	80276cc <_svfiprintf_r+0x28>
 8027874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027876:	b01d      	add	sp, #116	; 0x74
 8027878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802787c:	ab03      	add	r3, sp, #12
 802787e:	9300      	str	r3, [sp, #0]
 8027880:	462a      	mov	r2, r5
 8027882:	4b06      	ldr	r3, [pc, #24]	; (802789c <_svfiprintf_r+0x1f8>)
 8027884:	a904      	add	r1, sp, #16
 8027886:	4638      	mov	r0, r7
 8027888:	f7fe fb76 	bl	8025f78 <_printf_i>
 802788c:	e7eb      	b.n	8027866 <_svfiprintf_r+0x1c2>
 802788e:	bf00      	nop
 8027890:	080c3364 	.word	0x080c3364
 8027894:	080c336e 	.word	0x080c336e
 8027898:	08025a61 	.word	0x08025a61
 802789c:	080275ef 	.word	0x080275ef
 80278a0:	080c336a 	.word	0x080c336a

080278a4 <__assert_func>:
 80278a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80278a6:	4614      	mov	r4, r2
 80278a8:	461a      	mov	r2, r3
 80278aa:	4b09      	ldr	r3, [pc, #36]	; (80278d0 <__assert_func+0x2c>)
 80278ac:	681b      	ldr	r3, [r3, #0]
 80278ae:	4605      	mov	r5, r0
 80278b0:	68d8      	ldr	r0, [r3, #12]
 80278b2:	b14c      	cbz	r4, 80278c8 <__assert_func+0x24>
 80278b4:	4b07      	ldr	r3, [pc, #28]	; (80278d4 <__assert_func+0x30>)
 80278b6:	9100      	str	r1, [sp, #0]
 80278b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80278bc:	4906      	ldr	r1, [pc, #24]	; (80278d8 <__assert_func+0x34>)
 80278be:	462b      	mov	r3, r5
 80278c0:	f000 f80e 	bl	80278e0 <fiprintf>
 80278c4:	f000 fa7c 	bl	8027dc0 <abort>
 80278c8:	4b04      	ldr	r3, [pc, #16]	; (80278dc <__assert_func+0x38>)
 80278ca:	461c      	mov	r4, r3
 80278cc:	e7f3      	b.n	80278b6 <__assert_func+0x12>
 80278ce:	bf00      	nop
 80278d0:	240074fc 	.word	0x240074fc
 80278d4:	080c3375 	.word	0x080c3375
 80278d8:	080c3382 	.word	0x080c3382
 80278dc:	080c33b0 	.word	0x080c33b0

080278e0 <fiprintf>:
 80278e0:	b40e      	push	{r1, r2, r3}
 80278e2:	b503      	push	{r0, r1, lr}
 80278e4:	4601      	mov	r1, r0
 80278e6:	ab03      	add	r3, sp, #12
 80278e8:	4805      	ldr	r0, [pc, #20]	; (8027900 <fiprintf+0x20>)
 80278ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80278ee:	6800      	ldr	r0, [r0, #0]
 80278f0:	9301      	str	r3, [sp, #4]
 80278f2:	f000 f867 	bl	80279c4 <_vfiprintf_r>
 80278f6:	b002      	add	sp, #8
 80278f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80278fc:	b003      	add	sp, #12
 80278fe:	4770      	bx	lr
 8027900:	240074fc 	.word	0x240074fc

08027904 <__retarget_lock_init_recursive>:
 8027904:	4770      	bx	lr

08027906 <__retarget_lock_acquire_recursive>:
 8027906:	4770      	bx	lr

08027908 <__retarget_lock_release_recursive>:
 8027908:	4770      	bx	lr

0802790a <__ascii_mbtowc>:
 802790a:	b082      	sub	sp, #8
 802790c:	b901      	cbnz	r1, 8027910 <__ascii_mbtowc+0x6>
 802790e:	a901      	add	r1, sp, #4
 8027910:	b142      	cbz	r2, 8027924 <__ascii_mbtowc+0x1a>
 8027912:	b14b      	cbz	r3, 8027928 <__ascii_mbtowc+0x1e>
 8027914:	7813      	ldrb	r3, [r2, #0]
 8027916:	600b      	str	r3, [r1, #0]
 8027918:	7812      	ldrb	r2, [r2, #0]
 802791a:	1e10      	subs	r0, r2, #0
 802791c:	bf18      	it	ne
 802791e:	2001      	movne	r0, #1
 8027920:	b002      	add	sp, #8
 8027922:	4770      	bx	lr
 8027924:	4610      	mov	r0, r2
 8027926:	e7fb      	b.n	8027920 <__ascii_mbtowc+0x16>
 8027928:	f06f 0001 	mvn.w	r0, #1
 802792c:	e7f8      	b.n	8027920 <__ascii_mbtowc+0x16>

0802792e <memmove>:
 802792e:	4288      	cmp	r0, r1
 8027930:	b510      	push	{r4, lr}
 8027932:	eb01 0402 	add.w	r4, r1, r2
 8027936:	d902      	bls.n	802793e <memmove+0x10>
 8027938:	4284      	cmp	r4, r0
 802793a:	4623      	mov	r3, r4
 802793c:	d807      	bhi.n	802794e <memmove+0x20>
 802793e:	1e43      	subs	r3, r0, #1
 8027940:	42a1      	cmp	r1, r4
 8027942:	d008      	beq.n	8027956 <memmove+0x28>
 8027944:	f811 2b01 	ldrb.w	r2, [r1], #1
 8027948:	f803 2f01 	strb.w	r2, [r3, #1]!
 802794c:	e7f8      	b.n	8027940 <memmove+0x12>
 802794e:	4402      	add	r2, r0
 8027950:	4601      	mov	r1, r0
 8027952:	428a      	cmp	r2, r1
 8027954:	d100      	bne.n	8027958 <memmove+0x2a>
 8027956:	bd10      	pop	{r4, pc}
 8027958:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802795c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8027960:	e7f7      	b.n	8027952 <memmove+0x24>

08027962 <_malloc_usable_size_r>:
 8027962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027966:	1f18      	subs	r0, r3, #4
 8027968:	2b00      	cmp	r3, #0
 802796a:	bfbc      	itt	lt
 802796c:	580b      	ldrlt	r3, [r1, r0]
 802796e:	18c0      	addlt	r0, r0, r3
 8027970:	4770      	bx	lr

08027972 <__sfputc_r>:
 8027972:	6893      	ldr	r3, [r2, #8]
 8027974:	3b01      	subs	r3, #1
 8027976:	2b00      	cmp	r3, #0
 8027978:	b410      	push	{r4}
 802797a:	6093      	str	r3, [r2, #8]
 802797c:	da08      	bge.n	8027990 <__sfputc_r+0x1e>
 802797e:	6994      	ldr	r4, [r2, #24]
 8027980:	42a3      	cmp	r3, r4
 8027982:	db01      	blt.n	8027988 <__sfputc_r+0x16>
 8027984:	290a      	cmp	r1, #10
 8027986:	d103      	bne.n	8027990 <__sfputc_r+0x1e>
 8027988:	f85d 4b04 	ldr.w	r4, [sp], #4
 802798c:	f000 b94a 	b.w	8027c24 <__swbuf_r>
 8027990:	6813      	ldr	r3, [r2, #0]
 8027992:	1c58      	adds	r0, r3, #1
 8027994:	6010      	str	r0, [r2, #0]
 8027996:	7019      	strb	r1, [r3, #0]
 8027998:	4608      	mov	r0, r1
 802799a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802799e:	4770      	bx	lr

080279a0 <__sfputs_r>:
 80279a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80279a2:	4606      	mov	r6, r0
 80279a4:	460f      	mov	r7, r1
 80279a6:	4614      	mov	r4, r2
 80279a8:	18d5      	adds	r5, r2, r3
 80279aa:	42ac      	cmp	r4, r5
 80279ac:	d101      	bne.n	80279b2 <__sfputs_r+0x12>
 80279ae:	2000      	movs	r0, #0
 80279b0:	e007      	b.n	80279c2 <__sfputs_r+0x22>
 80279b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80279b6:	463a      	mov	r2, r7
 80279b8:	4630      	mov	r0, r6
 80279ba:	f7ff ffda 	bl	8027972 <__sfputc_r>
 80279be:	1c43      	adds	r3, r0, #1
 80279c0:	d1f3      	bne.n	80279aa <__sfputs_r+0xa>
 80279c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080279c4 <_vfiprintf_r>:
 80279c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80279c8:	460d      	mov	r5, r1
 80279ca:	b09d      	sub	sp, #116	; 0x74
 80279cc:	4614      	mov	r4, r2
 80279ce:	4698      	mov	r8, r3
 80279d0:	4606      	mov	r6, r0
 80279d2:	b118      	cbz	r0, 80279dc <_vfiprintf_r+0x18>
 80279d4:	6983      	ldr	r3, [r0, #24]
 80279d6:	b90b      	cbnz	r3, 80279dc <_vfiprintf_r+0x18>
 80279d8:	f000 fb14 	bl	8028004 <__sinit>
 80279dc:	4b89      	ldr	r3, [pc, #548]	; (8027c04 <_vfiprintf_r+0x240>)
 80279de:	429d      	cmp	r5, r3
 80279e0:	d11b      	bne.n	8027a1a <_vfiprintf_r+0x56>
 80279e2:	6875      	ldr	r5, [r6, #4]
 80279e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80279e6:	07d9      	lsls	r1, r3, #31
 80279e8:	d405      	bmi.n	80279f6 <_vfiprintf_r+0x32>
 80279ea:	89ab      	ldrh	r3, [r5, #12]
 80279ec:	059a      	lsls	r2, r3, #22
 80279ee:	d402      	bmi.n	80279f6 <_vfiprintf_r+0x32>
 80279f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80279f2:	f7ff ff88 	bl	8027906 <__retarget_lock_acquire_recursive>
 80279f6:	89ab      	ldrh	r3, [r5, #12]
 80279f8:	071b      	lsls	r3, r3, #28
 80279fa:	d501      	bpl.n	8027a00 <_vfiprintf_r+0x3c>
 80279fc:	692b      	ldr	r3, [r5, #16]
 80279fe:	b9eb      	cbnz	r3, 8027a3c <_vfiprintf_r+0x78>
 8027a00:	4629      	mov	r1, r5
 8027a02:	4630      	mov	r0, r6
 8027a04:	f000 f96e 	bl	8027ce4 <__swsetup_r>
 8027a08:	b1c0      	cbz	r0, 8027a3c <_vfiprintf_r+0x78>
 8027a0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027a0c:	07dc      	lsls	r4, r3, #31
 8027a0e:	d50e      	bpl.n	8027a2e <_vfiprintf_r+0x6a>
 8027a10:	f04f 30ff 	mov.w	r0, #4294967295
 8027a14:	b01d      	add	sp, #116	; 0x74
 8027a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a1a:	4b7b      	ldr	r3, [pc, #492]	; (8027c08 <_vfiprintf_r+0x244>)
 8027a1c:	429d      	cmp	r5, r3
 8027a1e:	d101      	bne.n	8027a24 <_vfiprintf_r+0x60>
 8027a20:	68b5      	ldr	r5, [r6, #8]
 8027a22:	e7df      	b.n	80279e4 <_vfiprintf_r+0x20>
 8027a24:	4b79      	ldr	r3, [pc, #484]	; (8027c0c <_vfiprintf_r+0x248>)
 8027a26:	429d      	cmp	r5, r3
 8027a28:	bf08      	it	eq
 8027a2a:	68f5      	ldreq	r5, [r6, #12]
 8027a2c:	e7da      	b.n	80279e4 <_vfiprintf_r+0x20>
 8027a2e:	89ab      	ldrh	r3, [r5, #12]
 8027a30:	0598      	lsls	r0, r3, #22
 8027a32:	d4ed      	bmi.n	8027a10 <_vfiprintf_r+0x4c>
 8027a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027a36:	f7ff ff67 	bl	8027908 <__retarget_lock_release_recursive>
 8027a3a:	e7e9      	b.n	8027a10 <_vfiprintf_r+0x4c>
 8027a3c:	2300      	movs	r3, #0
 8027a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8027a40:	2320      	movs	r3, #32
 8027a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8027a4a:	2330      	movs	r3, #48	; 0x30
 8027a4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8027c10 <_vfiprintf_r+0x24c>
 8027a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027a54:	f04f 0901 	mov.w	r9, #1
 8027a58:	4623      	mov	r3, r4
 8027a5a:	469a      	mov	sl, r3
 8027a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027a60:	b10a      	cbz	r2, 8027a66 <_vfiprintf_r+0xa2>
 8027a62:	2a25      	cmp	r2, #37	; 0x25
 8027a64:	d1f9      	bne.n	8027a5a <_vfiprintf_r+0x96>
 8027a66:	ebba 0b04 	subs.w	fp, sl, r4
 8027a6a:	d00b      	beq.n	8027a84 <_vfiprintf_r+0xc0>
 8027a6c:	465b      	mov	r3, fp
 8027a6e:	4622      	mov	r2, r4
 8027a70:	4629      	mov	r1, r5
 8027a72:	4630      	mov	r0, r6
 8027a74:	f7ff ff94 	bl	80279a0 <__sfputs_r>
 8027a78:	3001      	adds	r0, #1
 8027a7a:	f000 80aa 	beq.w	8027bd2 <_vfiprintf_r+0x20e>
 8027a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027a80:	445a      	add	r2, fp
 8027a82:	9209      	str	r2, [sp, #36]	; 0x24
 8027a84:	f89a 3000 	ldrb.w	r3, [sl]
 8027a88:	2b00      	cmp	r3, #0
 8027a8a:	f000 80a2 	beq.w	8027bd2 <_vfiprintf_r+0x20e>
 8027a8e:	2300      	movs	r3, #0
 8027a90:	f04f 32ff 	mov.w	r2, #4294967295
 8027a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027a98:	f10a 0a01 	add.w	sl, sl, #1
 8027a9c:	9304      	str	r3, [sp, #16]
 8027a9e:	9307      	str	r3, [sp, #28]
 8027aa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027aa4:	931a      	str	r3, [sp, #104]	; 0x68
 8027aa6:	4654      	mov	r4, sl
 8027aa8:	2205      	movs	r2, #5
 8027aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027aae:	4858      	ldr	r0, [pc, #352]	; (8027c10 <_vfiprintf_r+0x24c>)
 8027ab0:	f7d8 fc2e 	bl	8000310 <memchr>
 8027ab4:	9a04      	ldr	r2, [sp, #16]
 8027ab6:	b9d8      	cbnz	r0, 8027af0 <_vfiprintf_r+0x12c>
 8027ab8:	06d1      	lsls	r1, r2, #27
 8027aba:	bf44      	itt	mi
 8027abc:	2320      	movmi	r3, #32
 8027abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027ac2:	0713      	lsls	r3, r2, #28
 8027ac4:	bf44      	itt	mi
 8027ac6:	232b      	movmi	r3, #43	; 0x2b
 8027ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027acc:	f89a 3000 	ldrb.w	r3, [sl]
 8027ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8027ad2:	d015      	beq.n	8027b00 <_vfiprintf_r+0x13c>
 8027ad4:	9a07      	ldr	r2, [sp, #28]
 8027ad6:	4654      	mov	r4, sl
 8027ad8:	2000      	movs	r0, #0
 8027ada:	f04f 0c0a 	mov.w	ip, #10
 8027ade:	4621      	mov	r1, r4
 8027ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027ae4:	3b30      	subs	r3, #48	; 0x30
 8027ae6:	2b09      	cmp	r3, #9
 8027ae8:	d94e      	bls.n	8027b88 <_vfiprintf_r+0x1c4>
 8027aea:	b1b0      	cbz	r0, 8027b1a <_vfiprintf_r+0x156>
 8027aec:	9207      	str	r2, [sp, #28]
 8027aee:	e014      	b.n	8027b1a <_vfiprintf_r+0x156>
 8027af0:	eba0 0308 	sub.w	r3, r0, r8
 8027af4:	fa09 f303 	lsl.w	r3, r9, r3
 8027af8:	4313      	orrs	r3, r2
 8027afa:	9304      	str	r3, [sp, #16]
 8027afc:	46a2      	mov	sl, r4
 8027afe:	e7d2      	b.n	8027aa6 <_vfiprintf_r+0xe2>
 8027b00:	9b03      	ldr	r3, [sp, #12]
 8027b02:	1d19      	adds	r1, r3, #4
 8027b04:	681b      	ldr	r3, [r3, #0]
 8027b06:	9103      	str	r1, [sp, #12]
 8027b08:	2b00      	cmp	r3, #0
 8027b0a:	bfbb      	ittet	lt
 8027b0c:	425b      	neglt	r3, r3
 8027b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8027b12:	9307      	strge	r3, [sp, #28]
 8027b14:	9307      	strlt	r3, [sp, #28]
 8027b16:	bfb8      	it	lt
 8027b18:	9204      	strlt	r2, [sp, #16]
 8027b1a:	7823      	ldrb	r3, [r4, #0]
 8027b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8027b1e:	d10c      	bne.n	8027b3a <_vfiprintf_r+0x176>
 8027b20:	7863      	ldrb	r3, [r4, #1]
 8027b22:	2b2a      	cmp	r3, #42	; 0x2a
 8027b24:	d135      	bne.n	8027b92 <_vfiprintf_r+0x1ce>
 8027b26:	9b03      	ldr	r3, [sp, #12]
 8027b28:	1d1a      	adds	r2, r3, #4
 8027b2a:	681b      	ldr	r3, [r3, #0]
 8027b2c:	9203      	str	r2, [sp, #12]
 8027b2e:	2b00      	cmp	r3, #0
 8027b30:	bfb8      	it	lt
 8027b32:	f04f 33ff 	movlt.w	r3, #4294967295
 8027b36:	3402      	adds	r4, #2
 8027b38:	9305      	str	r3, [sp, #20]
 8027b3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8027c20 <_vfiprintf_r+0x25c>
 8027b3e:	7821      	ldrb	r1, [r4, #0]
 8027b40:	2203      	movs	r2, #3
 8027b42:	4650      	mov	r0, sl
 8027b44:	f7d8 fbe4 	bl	8000310 <memchr>
 8027b48:	b140      	cbz	r0, 8027b5c <_vfiprintf_r+0x198>
 8027b4a:	2340      	movs	r3, #64	; 0x40
 8027b4c:	eba0 000a 	sub.w	r0, r0, sl
 8027b50:	fa03 f000 	lsl.w	r0, r3, r0
 8027b54:	9b04      	ldr	r3, [sp, #16]
 8027b56:	4303      	orrs	r3, r0
 8027b58:	3401      	adds	r4, #1
 8027b5a:	9304      	str	r3, [sp, #16]
 8027b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027b60:	482c      	ldr	r0, [pc, #176]	; (8027c14 <_vfiprintf_r+0x250>)
 8027b62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027b66:	2206      	movs	r2, #6
 8027b68:	f7d8 fbd2 	bl	8000310 <memchr>
 8027b6c:	2800      	cmp	r0, #0
 8027b6e:	d03f      	beq.n	8027bf0 <_vfiprintf_r+0x22c>
 8027b70:	4b29      	ldr	r3, [pc, #164]	; (8027c18 <_vfiprintf_r+0x254>)
 8027b72:	bb1b      	cbnz	r3, 8027bbc <_vfiprintf_r+0x1f8>
 8027b74:	9b03      	ldr	r3, [sp, #12]
 8027b76:	3307      	adds	r3, #7
 8027b78:	f023 0307 	bic.w	r3, r3, #7
 8027b7c:	3308      	adds	r3, #8
 8027b7e:	9303      	str	r3, [sp, #12]
 8027b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b82:	443b      	add	r3, r7
 8027b84:	9309      	str	r3, [sp, #36]	; 0x24
 8027b86:	e767      	b.n	8027a58 <_vfiprintf_r+0x94>
 8027b88:	fb0c 3202 	mla	r2, ip, r2, r3
 8027b8c:	460c      	mov	r4, r1
 8027b8e:	2001      	movs	r0, #1
 8027b90:	e7a5      	b.n	8027ade <_vfiprintf_r+0x11a>
 8027b92:	2300      	movs	r3, #0
 8027b94:	3401      	adds	r4, #1
 8027b96:	9305      	str	r3, [sp, #20]
 8027b98:	4619      	mov	r1, r3
 8027b9a:	f04f 0c0a 	mov.w	ip, #10
 8027b9e:	4620      	mov	r0, r4
 8027ba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027ba4:	3a30      	subs	r2, #48	; 0x30
 8027ba6:	2a09      	cmp	r2, #9
 8027ba8:	d903      	bls.n	8027bb2 <_vfiprintf_r+0x1ee>
 8027baa:	2b00      	cmp	r3, #0
 8027bac:	d0c5      	beq.n	8027b3a <_vfiprintf_r+0x176>
 8027bae:	9105      	str	r1, [sp, #20]
 8027bb0:	e7c3      	b.n	8027b3a <_vfiprintf_r+0x176>
 8027bb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8027bb6:	4604      	mov	r4, r0
 8027bb8:	2301      	movs	r3, #1
 8027bba:	e7f0      	b.n	8027b9e <_vfiprintf_r+0x1da>
 8027bbc:	ab03      	add	r3, sp, #12
 8027bbe:	9300      	str	r3, [sp, #0]
 8027bc0:	462a      	mov	r2, r5
 8027bc2:	4b16      	ldr	r3, [pc, #88]	; (8027c1c <_vfiprintf_r+0x258>)
 8027bc4:	a904      	add	r1, sp, #16
 8027bc6:	4630      	mov	r0, r6
 8027bc8:	f7fd ff4a 	bl	8025a60 <_printf_float>
 8027bcc:	4607      	mov	r7, r0
 8027bce:	1c78      	adds	r0, r7, #1
 8027bd0:	d1d6      	bne.n	8027b80 <_vfiprintf_r+0x1bc>
 8027bd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027bd4:	07d9      	lsls	r1, r3, #31
 8027bd6:	d405      	bmi.n	8027be4 <_vfiprintf_r+0x220>
 8027bd8:	89ab      	ldrh	r3, [r5, #12]
 8027bda:	059a      	lsls	r2, r3, #22
 8027bdc:	d402      	bmi.n	8027be4 <_vfiprintf_r+0x220>
 8027bde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027be0:	f7ff fe92 	bl	8027908 <__retarget_lock_release_recursive>
 8027be4:	89ab      	ldrh	r3, [r5, #12]
 8027be6:	065b      	lsls	r3, r3, #25
 8027be8:	f53f af12 	bmi.w	8027a10 <_vfiprintf_r+0x4c>
 8027bec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027bee:	e711      	b.n	8027a14 <_vfiprintf_r+0x50>
 8027bf0:	ab03      	add	r3, sp, #12
 8027bf2:	9300      	str	r3, [sp, #0]
 8027bf4:	462a      	mov	r2, r5
 8027bf6:	4b09      	ldr	r3, [pc, #36]	; (8027c1c <_vfiprintf_r+0x258>)
 8027bf8:	a904      	add	r1, sp, #16
 8027bfa:	4630      	mov	r0, r6
 8027bfc:	f7fe f9bc 	bl	8025f78 <_printf_i>
 8027c00:	e7e4      	b.n	8027bcc <_vfiprintf_r+0x208>
 8027c02:	bf00      	nop
 8027c04:	080c34dc 	.word	0x080c34dc
 8027c08:	080c34fc 	.word	0x080c34fc
 8027c0c:	080c34bc 	.word	0x080c34bc
 8027c10:	080c3364 	.word	0x080c3364
 8027c14:	080c336e 	.word	0x080c336e
 8027c18:	08025a61 	.word	0x08025a61
 8027c1c:	080279a1 	.word	0x080279a1
 8027c20:	080c336a 	.word	0x080c336a

08027c24 <__swbuf_r>:
 8027c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027c26:	460e      	mov	r6, r1
 8027c28:	4614      	mov	r4, r2
 8027c2a:	4605      	mov	r5, r0
 8027c2c:	b118      	cbz	r0, 8027c36 <__swbuf_r+0x12>
 8027c2e:	6983      	ldr	r3, [r0, #24]
 8027c30:	b90b      	cbnz	r3, 8027c36 <__swbuf_r+0x12>
 8027c32:	f000 f9e7 	bl	8028004 <__sinit>
 8027c36:	4b21      	ldr	r3, [pc, #132]	; (8027cbc <__swbuf_r+0x98>)
 8027c38:	429c      	cmp	r4, r3
 8027c3a:	d12b      	bne.n	8027c94 <__swbuf_r+0x70>
 8027c3c:	686c      	ldr	r4, [r5, #4]
 8027c3e:	69a3      	ldr	r3, [r4, #24]
 8027c40:	60a3      	str	r3, [r4, #8]
 8027c42:	89a3      	ldrh	r3, [r4, #12]
 8027c44:	071a      	lsls	r2, r3, #28
 8027c46:	d52f      	bpl.n	8027ca8 <__swbuf_r+0x84>
 8027c48:	6923      	ldr	r3, [r4, #16]
 8027c4a:	b36b      	cbz	r3, 8027ca8 <__swbuf_r+0x84>
 8027c4c:	6923      	ldr	r3, [r4, #16]
 8027c4e:	6820      	ldr	r0, [r4, #0]
 8027c50:	1ac0      	subs	r0, r0, r3
 8027c52:	6963      	ldr	r3, [r4, #20]
 8027c54:	b2f6      	uxtb	r6, r6
 8027c56:	4283      	cmp	r3, r0
 8027c58:	4637      	mov	r7, r6
 8027c5a:	dc04      	bgt.n	8027c66 <__swbuf_r+0x42>
 8027c5c:	4621      	mov	r1, r4
 8027c5e:	4628      	mov	r0, r5
 8027c60:	f000 f93c 	bl	8027edc <_fflush_r>
 8027c64:	bb30      	cbnz	r0, 8027cb4 <__swbuf_r+0x90>
 8027c66:	68a3      	ldr	r3, [r4, #8]
 8027c68:	3b01      	subs	r3, #1
 8027c6a:	60a3      	str	r3, [r4, #8]
 8027c6c:	6823      	ldr	r3, [r4, #0]
 8027c6e:	1c5a      	adds	r2, r3, #1
 8027c70:	6022      	str	r2, [r4, #0]
 8027c72:	701e      	strb	r6, [r3, #0]
 8027c74:	6963      	ldr	r3, [r4, #20]
 8027c76:	3001      	adds	r0, #1
 8027c78:	4283      	cmp	r3, r0
 8027c7a:	d004      	beq.n	8027c86 <__swbuf_r+0x62>
 8027c7c:	89a3      	ldrh	r3, [r4, #12]
 8027c7e:	07db      	lsls	r3, r3, #31
 8027c80:	d506      	bpl.n	8027c90 <__swbuf_r+0x6c>
 8027c82:	2e0a      	cmp	r6, #10
 8027c84:	d104      	bne.n	8027c90 <__swbuf_r+0x6c>
 8027c86:	4621      	mov	r1, r4
 8027c88:	4628      	mov	r0, r5
 8027c8a:	f000 f927 	bl	8027edc <_fflush_r>
 8027c8e:	b988      	cbnz	r0, 8027cb4 <__swbuf_r+0x90>
 8027c90:	4638      	mov	r0, r7
 8027c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027c94:	4b0a      	ldr	r3, [pc, #40]	; (8027cc0 <__swbuf_r+0x9c>)
 8027c96:	429c      	cmp	r4, r3
 8027c98:	d101      	bne.n	8027c9e <__swbuf_r+0x7a>
 8027c9a:	68ac      	ldr	r4, [r5, #8]
 8027c9c:	e7cf      	b.n	8027c3e <__swbuf_r+0x1a>
 8027c9e:	4b09      	ldr	r3, [pc, #36]	; (8027cc4 <__swbuf_r+0xa0>)
 8027ca0:	429c      	cmp	r4, r3
 8027ca2:	bf08      	it	eq
 8027ca4:	68ec      	ldreq	r4, [r5, #12]
 8027ca6:	e7ca      	b.n	8027c3e <__swbuf_r+0x1a>
 8027ca8:	4621      	mov	r1, r4
 8027caa:	4628      	mov	r0, r5
 8027cac:	f000 f81a 	bl	8027ce4 <__swsetup_r>
 8027cb0:	2800      	cmp	r0, #0
 8027cb2:	d0cb      	beq.n	8027c4c <__swbuf_r+0x28>
 8027cb4:	f04f 37ff 	mov.w	r7, #4294967295
 8027cb8:	e7ea      	b.n	8027c90 <__swbuf_r+0x6c>
 8027cba:	bf00      	nop
 8027cbc:	080c34dc 	.word	0x080c34dc
 8027cc0:	080c34fc 	.word	0x080c34fc
 8027cc4:	080c34bc 	.word	0x080c34bc

08027cc8 <__ascii_wctomb>:
 8027cc8:	b149      	cbz	r1, 8027cde <__ascii_wctomb+0x16>
 8027cca:	2aff      	cmp	r2, #255	; 0xff
 8027ccc:	bf85      	ittet	hi
 8027cce:	238a      	movhi	r3, #138	; 0x8a
 8027cd0:	6003      	strhi	r3, [r0, #0]
 8027cd2:	700a      	strbls	r2, [r1, #0]
 8027cd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8027cd8:	bf98      	it	ls
 8027cda:	2001      	movls	r0, #1
 8027cdc:	4770      	bx	lr
 8027cde:	4608      	mov	r0, r1
 8027ce0:	4770      	bx	lr
	...

08027ce4 <__swsetup_r>:
 8027ce4:	4b32      	ldr	r3, [pc, #200]	; (8027db0 <__swsetup_r+0xcc>)
 8027ce6:	b570      	push	{r4, r5, r6, lr}
 8027ce8:	681d      	ldr	r5, [r3, #0]
 8027cea:	4606      	mov	r6, r0
 8027cec:	460c      	mov	r4, r1
 8027cee:	b125      	cbz	r5, 8027cfa <__swsetup_r+0x16>
 8027cf0:	69ab      	ldr	r3, [r5, #24]
 8027cf2:	b913      	cbnz	r3, 8027cfa <__swsetup_r+0x16>
 8027cf4:	4628      	mov	r0, r5
 8027cf6:	f000 f985 	bl	8028004 <__sinit>
 8027cfa:	4b2e      	ldr	r3, [pc, #184]	; (8027db4 <__swsetup_r+0xd0>)
 8027cfc:	429c      	cmp	r4, r3
 8027cfe:	d10f      	bne.n	8027d20 <__swsetup_r+0x3c>
 8027d00:	686c      	ldr	r4, [r5, #4]
 8027d02:	89a3      	ldrh	r3, [r4, #12]
 8027d04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027d08:	0719      	lsls	r1, r3, #28
 8027d0a:	d42c      	bmi.n	8027d66 <__swsetup_r+0x82>
 8027d0c:	06dd      	lsls	r5, r3, #27
 8027d0e:	d411      	bmi.n	8027d34 <__swsetup_r+0x50>
 8027d10:	2309      	movs	r3, #9
 8027d12:	6033      	str	r3, [r6, #0]
 8027d14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027d18:	81a3      	strh	r3, [r4, #12]
 8027d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8027d1e:	e03e      	b.n	8027d9e <__swsetup_r+0xba>
 8027d20:	4b25      	ldr	r3, [pc, #148]	; (8027db8 <__swsetup_r+0xd4>)
 8027d22:	429c      	cmp	r4, r3
 8027d24:	d101      	bne.n	8027d2a <__swsetup_r+0x46>
 8027d26:	68ac      	ldr	r4, [r5, #8]
 8027d28:	e7eb      	b.n	8027d02 <__swsetup_r+0x1e>
 8027d2a:	4b24      	ldr	r3, [pc, #144]	; (8027dbc <__swsetup_r+0xd8>)
 8027d2c:	429c      	cmp	r4, r3
 8027d2e:	bf08      	it	eq
 8027d30:	68ec      	ldreq	r4, [r5, #12]
 8027d32:	e7e6      	b.n	8027d02 <__swsetup_r+0x1e>
 8027d34:	0758      	lsls	r0, r3, #29
 8027d36:	d512      	bpl.n	8027d5e <__swsetup_r+0x7a>
 8027d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027d3a:	b141      	cbz	r1, 8027d4e <__swsetup_r+0x6a>
 8027d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027d40:	4299      	cmp	r1, r3
 8027d42:	d002      	beq.n	8027d4a <__swsetup_r+0x66>
 8027d44:	4630      	mov	r0, r6
 8027d46:	f7fd fd1b 	bl	8025780 <_free_r>
 8027d4a:	2300      	movs	r3, #0
 8027d4c:	6363      	str	r3, [r4, #52]	; 0x34
 8027d4e:	89a3      	ldrh	r3, [r4, #12]
 8027d50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8027d54:	81a3      	strh	r3, [r4, #12]
 8027d56:	2300      	movs	r3, #0
 8027d58:	6063      	str	r3, [r4, #4]
 8027d5a:	6923      	ldr	r3, [r4, #16]
 8027d5c:	6023      	str	r3, [r4, #0]
 8027d5e:	89a3      	ldrh	r3, [r4, #12]
 8027d60:	f043 0308 	orr.w	r3, r3, #8
 8027d64:	81a3      	strh	r3, [r4, #12]
 8027d66:	6923      	ldr	r3, [r4, #16]
 8027d68:	b94b      	cbnz	r3, 8027d7e <__swsetup_r+0x9a>
 8027d6a:	89a3      	ldrh	r3, [r4, #12]
 8027d6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027d74:	d003      	beq.n	8027d7e <__swsetup_r+0x9a>
 8027d76:	4621      	mov	r1, r4
 8027d78:	4630      	mov	r0, r6
 8027d7a:	f000 fa05 	bl	8028188 <__smakebuf_r>
 8027d7e:	89a0      	ldrh	r0, [r4, #12]
 8027d80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027d84:	f010 0301 	ands.w	r3, r0, #1
 8027d88:	d00a      	beq.n	8027da0 <__swsetup_r+0xbc>
 8027d8a:	2300      	movs	r3, #0
 8027d8c:	60a3      	str	r3, [r4, #8]
 8027d8e:	6963      	ldr	r3, [r4, #20]
 8027d90:	425b      	negs	r3, r3
 8027d92:	61a3      	str	r3, [r4, #24]
 8027d94:	6923      	ldr	r3, [r4, #16]
 8027d96:	b943      	cbnz	r3, 8027daa <__swsetup_r+0xc6>
 8027d98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8027d9c:	d1ba      	bne.n	8027d14 <__swsetup_r+0x30>
 8027d9e:	bd70      	pop	{r4, r5, r6, pc}
 8027da0:	0781      	lsls	r1, r0, #30
 8027da2:	bf58      	it	pl
 8027da4:	6963      	ldrpl	r3, [r4, #20]
 8027da6:	60a3      	str	r3, [r4, #8]
 8027da8:	e7f4      	b.n	8027d94 <__swsetup_r+0xb0>
 8027daa:	2000      	movs	r0, #0
 8027dac:	e7f7      	b.n	8027d9e <__swsetup_r+0xba>
 8027dae:	bf00      	nop
 8027db0:	240074fc 	.word	0x240074fc
 8027db4:	080c34dc 	.word	0x080c34dc
 8027db8:	080c34fc 	.word	0x080c34fc
 8027dbc:	080c34bc 	.word	0x080c34bc

08027dc0 <abort>:
 8027dc0:	b508      	push	{r3, lr}
 8027dc2:	2006      	movs	r0, #6
 8027dc4:	f000 fa48 	bl	8028258 <raise>
 8027dc8:	2001      	movs	r0, #1
 8027dca:	f000 fec1 	bl	8028b50 <_exit>
	...

08027dd0 <__sflush_r>:
 8027dd0:	898a      	ldrh	r2, [r1, #12]
 8027dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027dd6:	4605      	mov	r5, r0
 8027dd8:	0710      	lsls	r0, r2, #28
 8027dda:	460c      	mov	r4, r1
 8027ddc:	d458      	bmi.n	8027e90 <__sflush_r+0xc0>
 8027dde:	684b      	ldr	r3, [r1, #4]
 8027de0:	2b00      	cmp	r3, #0
 8027de2:	dc05      	bgt.n	8027df0 <__sflush_r+0x20>
 8027de4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8027de6:	2b00      	cmp	r3, #0
 8027de8:	dc02      	bgt.n	8027df0 <__sflush_r+0x20>
 8027dea:	2000      	movs	r0, #0
 8027dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027df0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027df2:	2e00      	cmp	r6, #0
 8027df4:	d0f9      	beq.n	8027dea <__sflush_r+0x1a>
 8027df6:	2300      	movs	r3, #0
 8027df8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027dfc:	682f      	ldr	r7, [r5, #0]
 8027dfe:	602b      	str	r3, [r5, #0]
 8027e00:	d032      	beq.n	8027e68 <__sflush_r+0x98>
 8027e02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8027e04:	89a3      	ldrh	r3, [r4, #12]
 8027e06:	075a      	lsls	r2, r3, #29
 8027e08:	d505      	bpl.n	8027e16 <__sflush_r+0x46>
 8027e0a:	6863      	ldr	r3, [r4, #4]
 8027e0c:	1ac0      	subs	r0, r0, r3
 8027e0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027e10:	b10b      	cbz	r3, 8027e16 <__sflush_r+0x46>
 8027e12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027e14:	1ac0      	subs	r0, r0, r3
 8027e16:	2300      	movs	r3, #0
 8027e18:	4602      	mov	r2, r0
 8027e1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027e1c:	6a21      	ldr	r1, [r4, #32]
 8027e1e:	4628      	mov	r0, r5
 8027e20:	47b0      	blx	r6
 8027e22:	1c43      	adds	r3, r0, #1
 8027e24:	89a3      	ldrh	r3, [r4, #12]
 8027e26:	d106      	bne.n	8027e36 <__sflush_r+0x66>
 8027e28:	6829      	ldr	r1, [r5, #0]
 8027e2a:	291d      	cmp	r1, #29
 8027e2c:	d82c      	bhi.n	8027e88 <__sflush_r+0xb8>
 8027e2e:	4a2a      	ldr	r2, [pc, #168]	; (8027ed8 <__sflush_r+0x108>)
 8027e30:	40ca      	lsrs	r2, r1
 8027e32:	07d6      	lsls	r6, r2, #31
 8027e34:	d528      	bpl.n	8027e88 <__sflush_r+0xb8>
 8027e36:	2200      	movs	r2, #0
 8027e38:	6062      	str	r2, [r4, #4]
 8027e3a:	04d9      	lsls	r1, r3, #19
 8027e3c:	6922      	ldr	r2, [r4, #16]
 8027e3e:	6022      	str	r2, [r4, #0]
 8027e40:	d504      	bpl.n	8027e4c <__sflush_r+0x7c>
 8027e42:	1c42      	adds	r2, r0, #1
 8027e44:	d101      	bne.n	8027e4a <__sflush_r+0x7a>
 8027e46:	682b      	ldr	r3, [r5, #0]
 8027e48:	b903      	cbnz	r3, 8027e4c <__sflush_r+0x7c>
 8027e4a:	6560      	str	r0, [r4, #84]	; 0x54
 8027e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027e4e:	602f      	str	r7, [r5, #0]
 8027e50:	2900      	cmp	r1, #0
 8027e52:	d0ca      	beq.n	8027dea <__sflush_r+0x1a>
 8027e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027e58:	4299      	cmp	r1, r3
 8027e5a:	d002      	beq.n	8027e62 <__sflush_r+0x92>
 8027e5c:	4628      	mov	r0, r5
 8027e5e:	f7fd fc8f 	bl	8025780 <_free_r>
 8027e62:	2000      	movs	r0, #0
 8027e64:	6360      	str	r0, [r4, #52]	; 0x34
 8027e66:	e7c1      	b.n	8027dec <__sflush_r+0x1c>
 8027e68:	6a21      	ldr	r1, [r4, #32]
 8027e6a:	2301      	movs	r3, #1
 8027e6c:	4628      	mov	r0, r5
 8027e6e:	47b0      	blx	r6
 8027e70:	1c41      	adds	r1, r0, #1
 8027e72:	d1c7      	bne.n	8027e04 <__sflush_r+0x34>
 8027e74:	682b      	ldr	r3, [r5, #0]
 8027e76:	2b00      	cmp	r3, #0
 8027e78:	d0c4      	beq.n	8027e04 <__sflush_r+0x34>
 8027e7a:	2b1d      	cmp	r3, #29
 8027e7c:	d001      	beq.n	8027e82 <__sflush_r+0xb2>
 8027e7e:	2b16      	cmp	r3, #22
 8027e80:	d101      	bne.n	8027e86 <__sflush_r+0xb6>
 8027e82:	602f      	str	r7, [r5, #0]
 8027e84:	e7b1      	b.n	8027dea <__sflush_r+0x1a>
 8027e86:	89a3      	ldrh	r3, [r4, #12]
 8027e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027e8c:	81a3      	strh	r3, [r4, #12]
 8027e8e:	e7ad      	b.n	8027dec <__sflush_r+0x1c>
 8027e90:	690f      	ldr	r7, [r1, #16]
 8027e92:	2f00      	cmp	r7, #0
 8027e94:	d0a9      	beq.n	8027dea <__sflush_r+0x1a>
 8027e96:	0793      	lsls	r3, r2, #30
 8027e98:	680e      	ldr	r6, [r1, #0]
 8027e9a:	bf08      	it	eq
 8027e9c:	694b      	ldreq	r3, [r1, #20]
 8027e9e:	600f      	str	r7, [r1, #0]
 8027ea0:	bf18      	it	ne
 8027ea2:	2300      	movne	r3, #0
 8027ea4:	eba6 0807 	sub.w	r8, r6, r7
 8027ea8:	608b      	str	r3, [r1, #8]
 8027eaa:	f1b8 0f00 	cmp.w	r8, #0
 8027eae:	dd9c      	ble.n	8027dea <__sflush_r+0x1a>
 8027eb0:	6a21      	ldr	r1, [r4, #32]
 8027eb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027eb4:	4643      	mov	r3, r8
 8027eb6:	463a      	mov	r2, r7
 8027eb8:	4628      	mov	r0, r5
 8027eba:	47b0      	blx	r6
 8027ebc:	2800      	cmp	r0, #0
 8027ebe:	dc06      	bgt.n	8027ece <__sflush_r+0xfe>
 8027ec0:	89a3      	ldrh	r3, [r4, #12]
 8027ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027ec6:	81a3      	strh	r3, [r4, #12]
 8027ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8027ecc:	e78e      	b.n	8027dec <__sflush_r+0x1c>
 8027ece:	4407      	add	r7, r0
 8027ed0:	eba8 0800 	sub.w	r8, r8, r0
 8027ed4:	e7e9      	b.n	8027eaa <__sflush_r+0xda>
 8027ed6:	bf00      	nop
 8027ed8:	20400001 	.word	0x20400001

08027edc <_fflush_r>:
 8027edc:	b538      	push	{r3, r4, r5, lr}
 8027ede:	690b      	ldr	r3, [r1, #16]
 8027ee0:	4605      	mov	r5, r0
 8027ee2:	460c      	mov	r4, r1
 8027ee4:	b913      	cbnz	r3, 8027eec <_fflush_r+0x10>
 8027ee6:	2500      	movs	r5, #0
 8027ee8:	4628      	mov	r0, r5
 8027eea:	bd38      	pop	{r3, r4, r5, pc}
 8027eec:	b118      	cbz	r0, 8027ef6 <_fflush_r+0x1a>
 8027eee:	6983      	ldr	r3, [r0, #24]
 8027ef0:	b90b      	cbnz	r3, 8027ef6 <_fflush_r+0x1a>
 8027ef2:	f000 f887 	bl	8028004 <__sinit>
 8027ef6:	4b14      	ldr	r3, [pc, #80]	; (8027f48 <_fflush_r+0x6c>)
 8027ef8:	429c      	cmp	r4, r3
 8027efa:	d11b      	bne.n	8027f34 <_fflush_r+0x58>
 8027efc:	686c      	ldr	r4, [r5, #4]
 8027efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027f02:	2b00      	cmp	r3, #0
 8027f04:	d0ef      	beq.n	8027ee6 <_fflush_r+0xa>
 8027f06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027f08:	07d0      	lsls	r0, r2, #31
 8027f0a:	d404      	bmi.n	8027f16 <_fflush_r+0x3a>
 8027f0c:	0599      	lsls	r1, r3, #22
 8027f0e:	d402      	bmi.n	8027f16 <_fflush_r+0x3a>
 8027f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027f12:	f7ff fcf8 	bl	8027906 <__retarget_lock_acquire_recursive>
 8027f16:	4628      	mov	r0, r5
 8027f18:	4621      	mov	r1, r4
 8027f1a:	f7ff ff59 	bl	8027dd0 <__sflush_r>
 8027f1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027f20:	07da      	lsls	r2, r3, #31
 8027f22:	4605      	mov	r5, r0
 8027f24:	d4e0      	bmi.n	8027ee8 <_fflush_r+0xc>
 8027f26:	89a3      	ldrh	r3, [r4, #12]
 8027f28:	059b      	lsls	r3, r3, #22
 8027f2a:	d4dd      	bmi.n	8027ee8 <_fflush_r+0xc>
 8027f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027f2e:	f7ff fceb 	bl	8027908 <__retarget_lock_release_recursive>
 8027f32:	e7d9      	b.n	8027ee8 <_fflush_r+0xc>
 8027f34:	4b05      	ldr	r3, [pc, #20]	; (8027f4c <_fflush_r+0x70>)
 8027f36:	429c      	cmp	r4, r3
 8027f38:	d101      	bne.n	8027f3e <_fflush_r+0x62>
 8027f3a:	68ac      	ldr	r4, [r5, #8]
 8027f3c:	e7df      	b.n	8027efe <_fflush_r+0x22>
 8027f3e:	4b04      	ldr	r3, [pc, #16]	; (8027f50 <_fflush_r+0x74>)
 8027f40:	429c      	cmp	r4, r3
 8027f42:	bf08      	it	eq
 8027f44:	68ec      	ldreq	r4, [r5, #12]
 8027f46:	e7da      	b.n	8027efe <_fflush_r+0x22>
 8027f48:	080c34dc 	.word	0x080c34dc
 8027f4c:	080c34fc 	.word	0x080c34fc
 8027f50:	080c34bc 	.word	0x080c34bc

08027f54 <std>:
 8027f54:	2300      	movs	r3, #0
 8027f56:	b510      	push	{r4, lr}
 8027f58:	4604      	mov	r4, r0
 8027f5a:	e9c0 3300 	strd	r3, r3, [r0]
 8027f5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8027f62:	6083      	str	r3, [r0, #8]
 8027f64:	8181      	strh	r1, [r0, #12]
 8027f66:	6643      	str	r3, [r0, #100]	; 0x64
 8027f68:	81c2      	strh	r2, [r0, #14]
 8027f6a:	6183      	str	r3, [r0, #24]
 8027f6c:	4619      	mov	r1, r3
 8027f6e:	2208      	movs	r2, #8
 8027f70:	305c      	adds	r0, #92	; 0x5c
 8027f72:	f7fd fbfd 	bl	8025770 <memset>
 8027f76:	4b05      	ldr	r3, [pc, #20]	; (8027f8c <std+0x38>)
 8027f78:	6263      	str	r3, [r4, #36]	; 0x24
 8027f7a:	4b05      	ldr	r3, [pc, #20]	; (8027f90 <std+0x3c>)
 8027f7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8027f7e:	4b05      	ldr	r3, [pc, #20]	; (8027f94 <std+0x40>)
 8027f80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8027f82:	4b05      	ldr	r3, [pc, #20]	; (8027f98 <std+0x44>)
 8027f84:	6224      	str	r4, [r4, #32]
 8027f86:	6323      	str	r3, [r4, #48]	; 0x30
 8027f88:	bd10      	pop	{r4, pc}
 8027f8a:	bf00      	nop
 8027f8c:	08028291 	.word	0x08028291
 8027f90:	080282b3 	.word	0x080282b3
 8027f94:	080282eb 	.word	0x080282eb
 8027f98:	0802830f 	.word	0x0802830f

08027f9c <_cleanup_r>:
 8027f9c:	4901      	ldr	r1, [pc, #4]	; (8027fa4 <_cleanup_r+0x8>)
 8027f9e:	f000 b8af 	b.w	8028100 <_fwalk_reent>
 8027fa2:	bf00      	nop
 8027fa4:	08027edd 	.word	0x08027edd

08027fa8 <__sfmoreglue>:
 8027fa8:	b570      	push	{r4, r5, r6, lr}
 8027faa:	2268      	movs	r2, #104	; 0x68
 8027fac:	1e4d      	subs	r5, r1, #1
 8027fae:	4355      	muls	r5, r2
 8027fb0:	460e      	mov	r6, r1
 8027fb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8027fb6:	f7fd fc4f 	bl	8025858 <_malloc_r>
 8027fba:	4604      	mov	r4, r0
 8027fbc:	b140      	cbz	r0, 8027fd0 <__sfmoreglue+0x28>
 8027fbe:	2100      	movs	r1, #0
 8027fc0:	e9c0 1600 	strd	r1, r6, [r0]
 8027fc4:	300c      	adds	r0, #12
 8027fc6:	60a0      	str	r0, [r4, #8]
 8027fc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8027fcc:	f7fd fbd0 	bl	8025770 <memset>
 8027fd0:	4620      	mov	r0, r4
 8027fd2:	bd70      	pop	{r4, r5, r6, pc}

08027fd4 <__sfp_lock_acquire>:
 8027fd4:	4801      	ldr	r0, [pc, #4]	; (8027fdc <__sfp_lock_acquire+0x8>)
 8027fd6:	f7ff bc96 	b.w	8027906 <__retarget_lock_acquire_recursive>
 8027fda:	bf00      	nop
 8027fdc:	2400a771 	.word	0x2400a771

08027fe0 <__sfp_lock_release>:
 8027fe0:	4801      	ldr	r0, [pc, #4]	; (8027fe8 <__sfp_lock_release+0x8>)
 8027fe2:	f7ff bc91 	b.w	8027908 <__retarget_lock_release_recursive>
 8027fe6:	bf00      	nop
 8027fe8:	2400a771 	.word	0x2400a771

08027fec <__sinit_lock_acquire>:
 8027fec:	4801      	ldr	r0, [pc, #4]	; (8027ff4 <__sinit_lock_acquire+0x8>)
 8027fee:	f7ff bc8a 	b.w	8027906 <__retarget_lock_acquire_recursive>
 8027ff2:	bf00      	nop
 8027ff4:	2400a772 	.word	0x2400a772

08027ff8 <__sinit_lock_release>:
 8027ff8:	4801      	ldr	r0, [pc, #4]	; (8028000 <__sinit_lock_release+0x8>)
 8027ffa:	f7ff bc85 	b.w	8027908 <__retarget_lock_release_recursive>
 8027ffe:	bf00      	nop
 8028000:	2400a772 	.word	0x2400a772

08028004 <__sinit>:
 8028004:	b510      	push	{r4, lr}
 8028006:	4604      	mov	r4, r0
 8028008:	f7ff fff0 	bl	8027fec <__sinit_lock_acquire>
 802800c:	69a3      	ldr	r3, [r4, #24]
 802800e:	b11b      	cbz	r3, 8028018 <__sinit+0x14>
 8028010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028014:	f7ff bff0 	b.w	8027ff8 <__sinit_lock_release>
 8028018:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802801c:	6523      	str	r3, [r4, #80]	; 0x50
 802801e:	4b13      	ldr	r3, [pc, #76]	; (802806c <__sinit+0x68>)
 8028020:	4a13      	ldr	r2, [pc, #76]	; (8028070 <__sinit+0x6c>)
 8028022:	681b      	ldr	r3, [r3, #0]
 8028024:	62a2      	str	r2, [r4, #40]	; 0x28
 8028026:	42a3      	cmp	r3, r4
 8028028:	bf04      	itt	eq
 802802a:	2301      	moveq	r3, #1
 802802c:	61a3      	streq	r3, [r4, #24]
 802802e:	4620      	mov	r0, r4
 8028030:	f000 f820 	bl	8028074 <__sfp>
 8028034:	6060      	str	r0, [r4, #4]
 8028036:	4620      	mov	r0, r4
 8028038:	f000 f81c 	bl	8028074 <__sfp>
 802803c:	60a0      	str	r0, [r4, #8]
 802803e:	4620      	mov	r0, r4
 8028040:	f000 f818 	bl	8028074 <__sfp>
 8028044:	2200      	movs	r2, #0
 8028046:	60e0      	str	r0, [r4, #12]
 8028048:	2104      	movs	r1, #4
 802804a:	6860      	ldr	r0, [r4, #4]
 802804c:	f7ff ff82 	bl	8027f54 <std>
 8028050:	68a0      	ldr	r0, [r4, #8]
 8028052:	2201      	movs	r2, #1
 8028054:	2109      	movs	r1, #9
 8028056:	f7ff ff7d 	bl	8027f54 <std>
 802805a:	68e0      	ldr	r0, [r4, #12]
 802805c:	2202      	movs	r2, #2
 802805e:	2112      	movs	r1, #18
 8028060:	f7ff ff78 	bl	8027f54 <std>
 8028064:	2301      	movs	r3, #1
 8028066:	61a3      	str	r3, [r4, #24]
 8028068:	e7d2      	b.n	8028010 <__sinit+0xc>
 802806a:	bf00      	nop
 802806c:	080c3140 	.word	0x080c3140
 8028070:	08027f9d 	.word	0x08027f9d

08028074 <__sfp>:
 8028074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028076:	4607      	mov	r7, r0
 8028078:	f7ff ffac 	bl	8027fd4 <__sfp_lock_acquire>
 802807c:	4b1e      	ldr	r3, [pc, #120]	; (80280f8 <__sfp+0x84>)
 802807e:	681e      	ldr	r6, [r3, #0]
 8028080:	69b3      	ldr	r3, [r6, #24]
 8028082:	b913      	cbnz	r3, 802808a <__sfp+0x16>
 8028084:	4630      	mov	r0, r6
 8028086:	f7ff ffbd 	bl	8028004 <__sinit>
 802808a:	3648      	adds	r6, #72	; 0x48
 802808c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8028090:	3b01      	subs	r3, #1
 8028092:	d503      	bpl.n	802809c <__sfp+0x28>
 8028094:	6833      	ldr	r3, [r6, #0]
 8028096:	b30b      	cbz	r3, 80280dc <__sfp+0x68>
 8028098:	6836      	ldr	r6, [r6, #0]
 802809a:	e7f7      	b.n	802808c <__sfp+0x18>
 802809c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80280a0:	b9d5      	cbnz	r5, 80280d8 <__sfp+0x64>
 80280a2:	4b16      	ldr	r3, [pc, #88]	; (80280fc <__sfp+0x88>)
 80280a4:	60e3      	str	r3, [r4, #12]
 80280a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80280aa:	6665      	str	r5, [r4, #100]	; 0x64
 80280ac:	f7ff fc2a 	bl	8027904 <__retarget_lock_init_recursive>
 80280b0:	f7ff ff96 	bl	8027fe0 <__sfp_lock_release>
 80280b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80280b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80280bc:	6025      	str	r5, [r4, #0]
 80280be:	61a5      	str	r5, [r4, #24]
 80280c0:	2208      	movs	r2, #8
 80280c2:	4629      	mov	r1, r5
 80280c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80280c8:	f7fd fb52 	bl	8025770 <memset>
 80280cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80280d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80280d4:	4620      	mov	r0, r4
 80280d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80280d8:	3468      	adds	r4, #104	; 0x68
 80280da:	e7d9      	b.n	8028090 <__sfp+0x1c>
 80280dc:	2104      	movs	r1, #4
 80280de:	4638      	mov	r0, r7
 80280e0:	f7ff ff62 	bl	8027fa8 <__sfmoreglue>
 80280e4:	4604      	mov	r4, r0
 80280e6:	6030      	str	r0, [r6, #0]
 80280e8:	2800      	cmp	r0, #0
 80280ea:	d1d5      	bne.n	8028098 <__sfp+0x24>
 80280ec:	f7ff ff78 	bl	8027fe0 <__sfp_lock_release>
 80280f0:	230c      	movs	r3, #12
 80280f2:	603b      	str	r3, [r7, #0]
 80280f4:	e7ee      	b.n	80280d4 <__sfp+0x60>
 80280f6:	bf00      	nop
 80280f8:	080c3140 	.word	0x080c3140
 80280fc:	ffff0001 	.word	0xffff0001

08028100 <_fwalk_reent>:
 8028100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028104:	4606      	mov	r6, r0
 8028106:	4688      	mov	r8, r1
 8028108:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802810c:	2700      	movs	r7, #0
 802810e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8028112:	f1b9 0901 	subs.w	r9, r9, #1
 8028116:	d505      	bpl.n	8028124 <_fwalk_reent+0x24>
 8028118:	6824      	ldr	r4, [r4, #0]
 802811a:	2c00      	cmp	r4, #0
 802811c:	d1f7      	bne.n	802810e <_fwalk_reent+0xe>
 802811e:	4638      	mov	r0, r7
 8028120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028124:	89ab      	ldrh	r3, [r5, #12]
 8028126:	2b01      	cmp	r3, #1
 8028128:	d907      	bls.n	802813a <_fwalk_reent+0x3a>
 802812a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802812e:	3301      	adds	r3, #1
 8028130:	d003      	beq.n	802813a <_fwalk_reent+0x3a>
 8028132:	4629      	mov	r1, r5
 8028134:	4630      	mov	r0, r6
 8028136:	47c0      	blx	r8
 8028138:	4307      	orrs	r7, r0
 802813a:	3568      	adds	r5, #104	; 0x68
 802813c:	e7e9      	b.n	8028112 <_fwalk_reent+0x12>

0802813e <__swhatbuf_r>:
 802813e:	b570      	push	{r4, r5, r6, lr}
 8028140:	460e      	mov	r6, r1
 8028142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028146:	2900      	cmp	r1, #0
 8028148:	b096      	sub	sp, #88	; 0x58
 802814a:	4614      	mov	r4, r2
 802814c:	461d      	mov	r5, r3
 802814e:	da08      	bge.n	8028162 <__swhatbuf_r+0x24>
 8028150:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8028154:	2200      	movs	r2, #0
 8028156:	602a      	str	r2, [r5, #0]
 8028158:	061a      	lsls	r2, r3, #24
 802815a:	d410      	bmi.n	802817e <__swhatbuf_r+0x40>
 802815c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028160:	e00e      	b.n	8028180 <__swhatbuf_r+0x42>
 8028162:	466a      	mov	r2, sp
 8028164:	f000 f8fa 	bl	802835c <_fstat_r>
 8028168:	2800      	cmp	r0, #0
 802816a:	dbf1      	blt.n	8028150 <__swhatbuf_r+0x12>
 802816c:	9a01      	ldr	r2, [sp, #4]
 802816e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8028172:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8028176:	425a      	negs	r2, r3
 8028178:	415a      	adcs	r2, r3
 802817a:	602a      	str	r2, [r5, #0]
 802817c:	e7ee      	b.n	802815c <__swhatbuf_r+0x1e>
 802817e:	2340      	movs	r3, #64	; 0x40
 8028180:	2000      	movs	r0, #0
 8028182:	6023      	str	r3, [r4, #0]
 8028184:	b016      	add	sp, #88	; 0x58
 8028186:	bd70      	pop	{r4, r5, r6, pc}

08028188 <__smakebuf_r>:
 8028188:	898b      	ldrh	r3, [r1, #12]
 802818a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802818c:	079d      	lsls	r5, r3, #30
 802818e:	4606      	mov	r6, r0
 8028190:	460c      	mov	r4, r1
 8028192:	d507      	bpl.n	80281a4 <__smakebuf_r+0x1c>
 8028194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028198:	6023      	str	r3, [r4, #0]
 802819a:	6123      	str	r3, [r4, #16]
 802819c:	2301      	movs	r3, #1
 802819e:	6163      	str	r3, [r4, #20]
 80281a0:	b002      	add	sp, #8
 80281a2:	bd70      	pop	{r4, r5, r6, pc}
 80281a4:	ab01      	add	r3, sp, #4
 80281a6:	466a      	mov	r2, sp
 80281a8:	f7ff ffc9 	bl	802813e <__swhatbuf_r>
 80281ac:	9900      	ldr	r1, [sp, #0]
 80281ae:	4605      	mov	r5, r0
 80281b0:	4630      	mov	r0, r6
 80281b2:	f7fd fb51 	bl	8025858 <_malloc_r>
 80281b6:	b948      	cbnz	r0, 80281cc <__smakebuf_r+0x44>
 80281b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80281bc:	059a      	lsls	r2, r3, #22
 80281be:	d4ef      	bmi.n	80281a0 <__smakebuf_r+0x18>
 80281c0:	f023 0303 	bic.w	r3, r3, #3
 80281c4:	f043 0302 	orr.w	r3, r3, #2
 80281c8:	81a3      	strh	r3, [r4, #12]
 80281ca:	e7e3      	b.n	8028194 <__smakebuf_r+0xc>
 80281cc:	4b0d      	ldr	r3, [pc, #52]	; (8028204 <__smakebuf_r+0x7c>)
 80281ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80281d0:	89a3      	ldrh	r3, [r4, #12]
 80281d2:	6020      	str	r0, [r4, #0]
 80281d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80281d8:	81a3      	strh	r3, [r4, #12]
 80281da:	9b00      	ldr	r3, [sp, #0]
 80281dc:	6163      	str	r3, [r4, #20]
 80281de:	9b01      	ldr	r3, [sp, #4]
 80281e0:	6120      	str	r0, [r4, #16]
 80281e2:	b15b      	cbz	r3, 80281fc <__smakebuf_r+0x74>
 80281e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80281e8:	4630      	mov	r0, r6
 80281ea:	f000 f8c9 	bl	8028380 <_isatty_r>
 80281ee:	b128      	cbz	r0, 80281fc <__smakebuf_r+0x74>
 80281f0:	89a3      	ldrh	r3, [r4, #12]
 80281f2:	f023 0303 	bic.w	r3, r3, #3
 80281f6:	f043 0301 	orr.w	r3, r3, #1
 80281fa:	81a3      	strh	r3, [r4, #12]
 80281fc:	89a0      	ldrh	r0, [r4, #12]
 80281fe:	4305      	orrs	r5, r0
 8028200:	81a5      	strh	r5, [r4, #12]
 8028202:	e7cd      	b.n	80281a0 <__smakebuf_r+0x18>
 8028204:	08027f9d 	.word	0x08027f9d

08028208 <_raise_r>:
 8028208:	291f      	cmp	r1, #31
 802820a:	b538      	push	{r3, r4, r5, lr}
 802820c:	4604      	mov	r4, r0
 802820e:	460d      	mov	r5, r1
 8028210:	d904      	bls.n	802821c <_raise_r+0x14>
 8028212:	2316      	movs	r3, #22
 8028214:	6003      	str	r3, [r0, #0]
 8028216:	f04f 30ff 	mov.w	r0, #4294967295
 802821a:	bd38      	pop	{r3, r4, r5, pc}
 802821c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802821e:	b112      	cbz	r2, 8028226 <_raise_r+0x1e>
 8028220:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028224:	b94b      	cbnz	r3, 802823a <_raise_r+0x32>
 8028226:	4620      	mov	r0, r4
 8028228:	f000 f830 	bl	802828c <_getpid_r>
 802822c:	462a      	mov	r2, r5
 802822e:	4601      	mov	r1, r0
 8028230:	4620      	mov	r0, r4
 8028232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028236:	f000 b817 	b.w	8028268 <_kill_r>
 802823a:	2b01      	cmp	r3, #1
 802823c:	d00a      	beq.n	8028254 <_raise_r+0x4c>
 802823e:	1c59      	adds	r1, r3, #1
 8028240:	d103      	bne.n	802824a <_raise_r+0x42>
 8028242:	2316      	movs	r3, #22
 8028244:	6003      	str	r3, [r0, #0]
 8028246:	2001      	movs	r0, #1
 8028248:	e7e7      	b.n	802821a <_raise_r+0x12>
 802824a:	2400      	movs	r4, #0
 802824c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028250:	4628      	mov	r0, r5
 8028252:	4798      	blx	r3
 8028254:	2000      	movs	r0, #0
 8028256:	e7e0      	b.n	802821a <_raise_r+0x12>

08028258 <raise>:
 8028258:	4b02      	ldr	r3, [pc, #8]	; (8028264 <raise+0xc>)
 802825a:	4601      	mov	r1, r0
 802825c:	6818      	ldr	r0, [r3, #0]
 802825e:	f7ff bfd3 	b.w	8028208 <_raise_r>
 8028262:	bf00      	nop
 8028264:	240074fc 	.word	0x240074fc

08028268 <_kill_r>:
 8028268:	b538      	push	{r3, r4, r5, lr}
 802826a:	4d07      	ldr	r5, [pc, #28]	; (8028288 <_kill_r+0x20>)
 802826c:	2300      	movs	r3, #0
 802826e:	4604      	mov	r4, r0
 8028270:	4608      	mov	r0, r1
 8028272:	4611      	mov	r1, r2
 8028274:	602b      	str	r3, [r5, #0]
 8028276:	f000 fc3d 	bl	8028af4 <_kill>
 802827a:	1c43      	adds	r3, r0, #1
 802827c:	d102      	bne.n	8028284 <_kill_r+0x1c>
 802827e:	682b      	ldr	r3, [r5, #0]
 8028280:	b103      	cbz	r3, 8028284 <_kill_r+0x1c>
 8028282:	6023      	str	r3, [r4, #0]
 8028284:	bd38      	pop	{r3, r4, r5, pc}
 8028286:	bf00      	nop
 8028288:	2400a76c 	.word	0x2400a76c

0802828c <_getpid_r>:
 802828c:	f000 bc22 	b.w	8028ad4 <_getpid>

08028290 <__sread>:
 8028290:	b510      	push	{r4, lr}
 8028292:	460c      	mov	r4, r1
 8028294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028298:	f000 f894 	bl	80283c4 <_read_r>
 802829c:	2800      	cmp	r0, #0
 802829e:	bfab      	itete	ge
 80282a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80282a2:	89a3      	ldrhlt	r3, [r4, #12]
 80282a4:	181b      	addge	r3, r3, r0
 80282a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80282aa:	bfac      	ite	ge
 80282ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80282ae:	81a3      	strhlt	r3, [r4, #12]
 80282b0:	bd10      	pop	{r4, pc}

080282b2 <__swrite>:
 80282b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80282b6:	461f      	mov	r7, r3
 80282b8:	898b      	ldrh	r3, [r1, #12]
 80282ba:	05db      	lsls	r3, r3, #23
 80282bc:	4605      	mov	r5, r0
 80282be:	460c      	mov	r4, r1
 80282c0:	4616      	mov	r6, r2
 80282c2:	d505      	bpl.n	80282d0 <__swrite+0x1e>
 80282c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80282c8:	2302      	movs	r3, #2
 80282ca:	2200      	movs	r2, #0
 80282cc:	f000 f868 	bl	80283a0 <_lseek_r>
 80282d0:	89a3      	ldrh	r3, [r4, #12]
 80282d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80282d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80282da:	81a3      	strh	r3, [r4, #12]
 80282dc:	4632      	mov	r2, r6
 80282de:	463b      	mov	r3, r7
 80282e0:	4628      	mov	r0, r5
 80282e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80282e6:	f000 b817 	b.w	8028318 <_write_r>

080282ea <__sseek>:
 80282ea:	b510      	push	{r4, lr}
 80282ec:	460c      	mov	r4, r1
 80282ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80282f2:	f000 f855 	bl	80283a0 <_lseek_r>
 80282f6:	1c43      	adds	r3, r0, #1
 80282f8:	89a3      	ldrh	r3, [r4, #12]
 80282fa:	bf15      	itete	ne
 80282fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80282fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8028302:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8028306:	81a3      	strheq	r3, [r4, #12]
 8028308:	bf18      	it	ne
 802830a:	81a3      	strhne	r3, [r4, #12]
 802830c:	bd10      	pop	{r4, pc}

0802830e <__sclose>:
 802830e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028312:	f000 b813 	b.w	802833c <_close_r>
	...

08028318 <_write_r>:
 8028318:	b538      	push	{r3, r4, r5, lr}
 802831a:	4d07      	ldr	r5, [pc, #28]	; (8028338 <_write_r+0x20>)
 802831c:	4604      	mov	r4, r0
 802831e:	4608      	mov	r0, r1
 8028320:	4611      	mov	r1, r2
 8028322:	2200      	movs	r2, #0
 8028324:	602a      	str	r2, [r5, #0]
 8028326:	461a      	mov	r2, r3
 8028328:	f000 fc0a 	bl	8028b40 <_write>
 802832c:	1c43      	adds	r3, r0, #1
 802832e:	d102      	bne.n	8028336 <_write_r+0x1e>
 8028330:	682b      	ldr	r3, [r5, #0]
 8028332:	b103      	cbz	r3, 8028336 <_write_r+0x1e>
 8028334:	6023      	str	r3, [r4, #0]
 8028336:	bd38      	pop	{r3, r4, r5, pc}
 8028338:	2400a76c 	.word	0x2400a76c

0802833c <_close_r>:
 802833c:	b538      	push	{r3, r4, r5, lr}
 802833e:	4d06      	ldr	r5, [pc, #24]	; (8028358 <_close_r+0x1c>)
 8028340:	2300      	movs	r3, #0
 8028342:	4604      	mov	r4, r0
 8028344:	4608      	mov	r0, r1
 8028346:	602b      	str	r3, [r5, #0]
 8028348:	f000 fbb4 	bl	8028ab4 <_close>
 802834c:	1c43      	adds	r3, r0, #1
 802834e:	d102      	bne.n	8028356 <_close_r+0x1a>
 8028350:	682b      	ldr	r3, [r5, #0]
 8028352:	b103      	cbz	r3, 8028356 <_close_r+0x1a>
 8028354:	6023      	str	r3, [r4, #0]
 8028356:	bd38      	pop	{r3, r4, r5, pc}
 8028358:	2400a76c 	.word	0x2400a76c

0802835c <_fstat_r>:
 802835c:	b538      	push	{r3, r4, r5, lr}
 802835e:	4d07      	ldr	r5, [pc, #28]	; (802837c <_fstat_r+0x20>)
 8028360:	2300      	movs	r3, #0
 8028362:	4604      	mov	r4, r0
 8028364:	4608      	mov	r0, r1
 8028366:	4611      	mov	r1, r2
 8028368:	602b      	str	r3, [r5, #0]
 802836a:	f000 fbab 	bl	8028ac4 <_fstat>
 802836e:	1c43      	adds	r3, r0, #1
 8028370:	d102      	bne.n	8028378 <_fstat_r+0x1c>
 8028372:	682b      	ldr	r3, [r5, #0]
 8028374:	b103      	cbz	r3, 8028378 <_fstat_r+0x1c>
 8028376:	6023      	str	r3, [r4, #0]
 8028378:	bd38      	pop	{r3, r4, r5, pc}
 802837a:	bf00      	nop
 802837c:	2400a76c 	.word	0x2400a76c

08028380 <_isatty_r>:
 8028380:	b538      	push	{r3, r4, r5, lr}
 8028382:	4d06      	ldr	r5, [pc, #24]	; (802839c <_isatty_r+0x1c>)
 8028384:	2300      	movs	r3, #0
 8028386:	4604      	mov	r4, r0
 8028388:	4608      	mov	r0, r1
 802838a:	602b      	str	r3, [r5, #0]
 802838c:	f000 fbaa 	bl	8028ae4 <_isatty>
 8028390:	1c43      	adds	r3, r0, #1
 8028392:	d102      	bne.n	802839a <_isatty_r+0x1a>
 8028394:	682b      	ldr	r3, [r5, #0]
 8028396:	b103      	cbz	r3, 802839a <_isatty_r+0x1a>
 8028398:	6023      	str	r3, [r4, #0]
 802839a:	bd38      	pop	{r3, r4, r5, pc}
 802839c:	2400a76c 	.word	0x2400a76c

080283a0 <_lseek_r>:
 80283a0:	b538      	push	{r3, r4, r5, lr}
 80283a2:	4d07      	ldr	r5, [pc, #28]	; (80283c0 <_lseek_r+0x20>)
 80283a4:	4604      	mov	r4, r0
 80283a6:	4608      	mov	r0, r1
 80283a8:	4611      	mov	r1, r2
 80283aa:	2200      	movs	r2, #0
 80283ac:	602a      	str	r2, [r5, #0]
 80283ae:	461a      	mov	r2, r3
 80283b0:	f000 fba8 	bl	8028b04 <_lseek>
 80283b4:	1c43      	adds	r3, r0, #1
 80283b6:	d102      	bne.n	80283be <_lseek_r+0x1e>
 80283b8:	682b      	ldr	r3, [r5, #0]
 80283ba:	b103      	cbz	r3, 80283be <_lseek_r+0x1e>
 80283bc:	6023      	str	r3, [r4, #0]
 80283be:	bd38      	pop	{r3, r4, r5, pc}
 80283c0:	2400a76c 	.word	0x2400a76c

080283c4 <_read_r>:
 80283c4:	b538      	push	{r3, r4, r5, lr}
 80283c6:	4d07      	ldr	r5, [pc, #28]	; (80283e4 <_read_r+0x20>)
 80283c8:	4604      	mov	r4, r0
 80283ca:	4608      	mov	r0, r1
 80283cc:	4611      	mov	r1, r2
 80283ce:	2200      	movs	r2, #0
 80283d0:	602a      	str	r2, [r5, #0]
 80283d2:	461a      	mov	r2, r3
 80283d4:	f000 fb9e 	bl	8028b14 <_read>
 80283d8:	1c43      	adds	r3, r0, #1
 80283da:	d102      	bne.n	80283e2 <_read_r+0x1e>
 80283dc:	682b      	ldr	r3, [r5, #0]
 80283de:	b103      	cbz	r3, 80283e2 <_read_r+0x1e>
 80283e0:	6023      	str	r3, [r4, #0]
 80283e2:	bd38      	pop	{r3, r4, r5, pc}
 80283e4:	2400a76c 	.word	0x2400a76c

080283e8 <log>:
 80283e8:	b470      	push	{r4, r5, r6}
 80283ea:	ee10 1a90 	vmov	r1, s1
 80283ee:	ee10 2a10 	vmov	r2, s0
 80283f2:	f04f 34ff 	mov.w	r4, #4294967295
 80283f6:	4294      	cmp	r4, r2
 80283f8:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 80283fc:	4c72      	ldr	r4, [pc, #456]	; (80285c8 <log+0x1e0>)
 80283fe:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 8028402:	eb74 0000 	sbcs.w	r0, r4, r0
 8028406:	ed2d 8b02 	vpush	{d8}
 802840a:	ea4f 4311 	mov.w	r3, r1, lsr #16
 802840e:	d35c      	bcc.n	80284ca <log+0xe2>
 8028410:	4b6e      	ldr	r3, [pc, #440]	; (80285cc <log+0x1e4>)
 8028412:	4299      	cmp	r1, r3
 8028414:	bf08      	it	eq
 8028416:	2a00      	cmpeq	r2, #0
 8028418:	f000 80c6 	beq.w	80285a8 <log+0x1c0>
 802841c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8028420:	ee30 0b47 	vsub.f64	d0, d0, d7
 8028424:	4b6a      	ldr	r3, [pc, #424]	; (80285d0 <log+0x1e8>)
 8028426:	ee20 2b00 	vmul.f64	d2, d0, d0
 802842a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 802842e:	ee20 4b02 	vmul.f64	d4, d0, d2
 8028432:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8028436:	eea6 7b00 	vfma.f64	d7, d6, d0
 802843a:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 802843e:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8028442:	eea6 7b02 	vfma.f64	d7, d6, d2
 8028446:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 802844a:	eea5 6b00 	vfma.f64	d6, d5, d0
 802844e:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8028452:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 8028456:	eea5 6b02 	vfma.f64	d6, d5, d2
 802845a:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 802845e:	eea3 5b00 	vfma.f64	d5, d3, d0
 8028462:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 8028466:	eea3 5b02 	vfma.f64	d5, d3, d2
 802846a:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 802846e:	eeb0 2b40 	vmov.f64	d2, d0
 8028472:	eea3 5b04 	vfma.f64	d5, d3, d4
 8028476:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 802847a:	eea5 6b04 	vfma.f64	d6, d5, d4
 802847e:	eea6 7b04 	vfma.f64	d7, d6, d4
 8028482:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80285b0 <log+0x1c8>
 8028486:	eeb0 1b47 	vmov.f64	d1, d7
 802848a:	eeb0 5b40 	vmov.f64	d5, d0
 802848e:	eea0 5b06 	vfma.f64	d5, d0, d6
 8028492:	eea0 5b46 	vfms.f64	d5, d0, d6
 8028496:	ee30 8b45 	vsub.f64	d8, d0, d5
 802849a:	ee25 7b05 	vmul.f64	d7, d5, d5
 802849e:	ee30 5b05 	vadd.f64	d5, d0, d5
 80284a2:	eea7 2b03 	vfma.f64	d2, d7, d3
 80284a6:	ee30 6b42 	vsub.f64	d6, d0, d2
 80284aa:	eea7 6b03 	vfma.f64	d6, d7, d3
 80284ae:	ee23 3b08 	vmul.f64	d3, d3, d8
 80284b2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80284b6:	eeb0 0b46 	vmov.f64	d0, d6
 80284ba:	eea1 0b04 	vfma.f64	d0, d1, d4
 80284be:	ee32 0b00 	vadd.f64	d0, d2, d0
 80284c2:	ecbd 8b02 	vpop	{d8}
 80284c6:	bc70      	pop	{r4, r5, r6}
 80284c8:	4770      	bx	lr
 80284ca:	f1a3 0410 	sub.w	r4, r3, #16
 80284ce:	f647 70df 	movw	r0, #32735	; 0x7fdf
 80284d2:	4284      	cmp	r4, r0
 80284d4:	d923      	bls.n	802851e <log+0x136>
 80284d6:	1894      	adds	r4, r2, r2
 80284d8:	eb41 0001 	adc.w	r0, r1, r1
 80284dc:	4320      	orrs	r0, r4
 80284de:	d105      	bne.n	80284ec <log+0x104>
 80284e0:	ecbd 8b02 	vpop	{d8}
 80284e4:	2001      	movs	r0, #1
 80284e6:	bc70      	pop	{r4, r5, r6}
 80284e8:	f000 b882 	b.w	80285f0 <__math_divzero>
 80284ec:	4839      	ldr	r0, [pc, #228]	; (80285d4 <log+0x1ec>)
 80284ee:	4281      	cmp	r1, r0
 80284f0:	bf08      	it	eq
 80284f2:	2a00      	cmpeq	r2, #0
 80284f4:	d0e5      	beq.n	80284c2 <log+0xda>
 80284f6:	041a      	lsls	r2, r3, #16
 80284f8:	d404      	bmi.n	8028504 <log+0x11c>
 80284fa:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 80284fe:	ea32 0303 	bics.w	r3, r2, r3
 8028502:	d104      	bne.n	802850e <log+0x126>
 8028504:	ecbd 8b02 	vpop	{d8}
 8028508:	bc70      	pop	{r4, r5, r6}
 802850a:	f000 b889 	b.w	8028620 <__math_invalid>
 802850e:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 80285b8 <log+0x1d0>
 8028512:	ee20 7b07 	vmul.f64	d7, d0, d7
 8028516:	ec53 2b17 	vmov	r2, r3, d7
 802851a:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 802851e:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8028522:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 8028526:	0d1e      	lsrs	r6, r3, #20
 8028528:	1e14      	subs	r4, r2, #0
 802852a:	4a29      	ldr	r2, [pc, #164]	; (80285d0 <log+0x1e8>)
 802852c:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8028530:	f3c3 3046 	ubfx	r0, r3, #13, #7
 8028534:	0536      	lsls	r6, r6, #20
 8028536:	1b8d      	subs	r5, r1, r6
 8028538:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 802853c:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 8028540:	ec45 4b16 	vmov	d6, r4, r5
 8028544:	151b      	asrs	r3, r3, #20
 8028546:	eea6 5b07 	vfma.f64	d5, d6, d7
 802854a:	ee07 3a90 	vmov	s15, r3
 802854e:	ee25 2b05 	vmul.f64	d2, d5, d5
 8028552:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8028556:	ed92 4b00 	vldr	d4, [r2]
 802855a:	ee25 1b02 	vmul.f64	d1, d5, d2
 802855e:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 8028562:	eea4 7b06 	vfma.f64	d7, d4, d6
 8028566:	ee35 4b07 	vadd.f64	d4, d5, d7
 802856a:	ee37 0b44 	vsub.f64	d0, d7, d4
 802856e:	ed92 7b02 	vldr	d7, [r2, #8]
 8028572:	ee30 0b05 	vadd.f64	d0, d0, d5
 8028576:	eea7 0b06 	vfma.f64	d0, d7, d6
 802857a:	ed92 7b04 	vldr	d7, [r2, #16]
 802857e:	ed92 6b08 	vldr	d6, [r2, #32]
 8028582:	eea7 0b02 	vfma.f64	d0, d7, d2
 8028586:	ed92 7b06 	vldr	d7, [r2, #24]
 802858a:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 802858e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8028592:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 8028596:	eea3 6b05 	vfma.f64	d6, d3, d5
 802859a:	eea6 7b02 	vfma.f64	d7, d6, d2
 802859e:	eea1 0b07 	vfma.f64	d0, d1, d7
 80285a2:	ee30 0b04 	vadd.f64	d0, d0, d4
 80285a6:	e78c      	b.n	80284c2 <log+0xda>
 80285a8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80285c0 <log+0x1d8>
 80285ac:	e789      	b.n	80284c2 <log+0xda>
 80285ae:	bf00      	nop
 80285b0:	00000000 	.word	0x00000000
 80285b4:	41a00000 	.word	0x41a00000
 80285b8:	00000000 	.word	0x00000000
 80285bc:	43300000 	.word	0x43300000
	...
 80285c8:	000308ff 	.word	0x000308ff
 80285cc:	3ff00000 	.word	0x3ff00000
 80285d0:	080c3520 	.word	0x080c3520
 80285d4:	7ff00000 	.word	0x7ff00000

080285d8 <with_errno>:
 80285d8:	b513      	push	{r0, r1, r4, lr}
 80285da:	4604      	mov	r4, r0
 80285dc:	ed8d 0b00 	vstr	d0, [sp]
 80285e0:	f000 fa62 	bl	8028aa8 <__errno>
 80285e4:	ed9d 0b00 	vldr	d0, [sp]
 80285e8:	6004      	str	r4, [r0, #0]
 80285ea:	b002      	add	sp, #8
 80285ec:	bd10      	pop	{r4, pc}
	...

080285f0 <__math_divzero>:
 80285f0:	b082      	sub	sp, #8
 80285f2:	2800      	cmp	r0, #0
 80285f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80285f8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80285fc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8028600:	ed8d 7b00 	vstr	d7, [sp]
 8028604:	ed9d 0b00 	vldr	d0, [sp]
 8028608:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8028618 <__math_divzero+0x28>
 802860c:	2022      	movs	r0, #34	; 0x22
 802860e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8028612:	b002      	add	sp, #8
 8028614:	f7ff bfe0 	b.w	80285d8 <with_errno>
	...

08028620 <__math_invalid>:
 8028620:	eeb0 7b40 	vmov.f64	d7, d0
 8028624:	eeb4 7b47 	vcmp.f64	d7, d7
 8028628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802862c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8028630:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8028634:	d602      	bvs.n	802863c <__math_invalid+0x1c>
 8028636:	2021      	movs	r0, #33	; 0x21
 8028638:	f7ff bfce 	b.w	80285d8 <with_errno>
 802863c:	4770      	bx	lr

0802863e <with_errnof>:
 802863e:	b513      	push	{r0, r1, r4, lr}
 8028640:	4604      	mov	r4, r0
 8028642:	ed8d 0a01 	vstr	s0, [sp, #4]
 8028646:	f000 fa2f 	bl	8028aa8 <__errno>
 802864a:	ed9d 0a01 	vldr	s0, [sp, #4]
 802864e:	6004      	str	r4, [r0, #0]
 8028650:	b002      	add	sp, #8
 8028652:	bd10      	pop	{r4, pc}

08028654 <xflowf>:
 8028654:	b130      	cbz	r0, 8028664 <xflowf+0x10>
 8028656:	eef1 7a40 	vneg.f32	s15, s0
 802865a:	ee27 0a80 	vmul.f32	s0, s15, s0
 802865e:	2022      	movs	r0, #34	; 0x22
 8028660:	f7ff bfed 	b.w	802863e <with_errnof>
 8028664:	eef0 7a40 	vmov.f32	s15, s0
 8028668:	e7f7      	b.n	802865a <xflowf+0x6>
	...

0802866c <__math_uflowf>:
 802866c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8028674 <__math_uflowf+0x8>
 8028670:	f7ff bff0 	b.w	8028654 <xflowf>
 8028674:	10000000 	.word	0x10000000

08028678 <__math_may_uflowf>:
 8028678:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8028680 <__math_may_uflowf+0x8>
 802867c:	f7ff bfea 	b.w	8028654 <xflowf>
 8028680:	1a200000 	.word	0x1a200000

08028684 <__math_oflowf>:
 8028684:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802868c <__math_oflowf+0x8>
 8028688:	f7ff bfe4 	b.w	8028654 <xflowf>
 802868c:	70000000 	.word	0x70000000

08028690 <__math_divzerof>:
 8028690:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8028694:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8028698:	2800      	cmp	r0, #0
 802869a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 802869e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80286ac <__math_divzerof+0x1c>
 80286a2:	2022      	movs	r0, #34	; 0x22
 80286a4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80286a8:	f7ff bfc9 	b.w	802863e <with_errnof>
 80286ac:	00000000 	.word	0x00000000

080286b0 <__math_invalidf>:
 80286b0:	eef0 7a40 	vmov.f32	s15, s0
 80286b4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80286b8:	eef4 7a67 	vcmp.f32	s15, s15
 80286bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80286c0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80286c4:	d602      	bvs.n	80286cc <__math_invalidf+0x1c>
 80286c6:	2021      	movs	r0, #33	; 0x21
 80286c8:	f7ff bfb9 	b.w	802863e <with_errnof>
 80286cc:	4770      	bx	lr
	...

080286d0 <expf>:
 80286d0:	ee10 2a10 	vmov	r2, s0
 80286d4:	f240 412a 	movw	r1, #1066	; 0x42a
 80286d8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80286dc:	428b      	cmp	r3, r1
 80286de:	b430      	push	{r4, r5}
 80286e0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80286e4:	d92a      	bls.n	802873c <expf+0x6c>
 80286e6:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 80286ea:	d058      	beq.n	802879e <expf+0xce>
 80286ec:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80286f0:	d303      	bcc.n	80286fa <expf+0x2a>
 80286f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80286f6:	bc30      	pop	{r4, r5}
 80286f8:	4770      	bx	lr
 80286fa:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80287a4 <expf+0xd4>
 80286fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028706:	dd03      	ble.n	8028710 <expf+0x40>
 8028708:	bc30      	pop	{r4, r5}
 802870a:	2000      	movs	r0, #0
 802870c:	f7ff bfba 	b.w	8028684 <__math_oflowf>
 8028710:	eddf 7a25 	vldr	s15, [pc, #148]	; 80287a8 <expf+0xd8>
 8028714:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802871c:	d503      	bpl.n	8028726 <expf+0x56>
 802871e:	bc30      	pop	{r4, r5}
 8028720:	2000      	movs	r0, #0
 8028722:	f7ff bfa3 	b.w	802866c <__math_uflowf>
 8028726:	eddf 7a21 	vldr	s15, [pc, #132]	; 80287ac <expf+0xdc>
 802872a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802872e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028732:	d503      	bpl.n	802873c <expf+0x6c>
 8028734:	bc30      	pop	{r4, r5}
 8028736:	2000      	movs	r0, #0
 8028738:	f7ff bf9e 	b.w	8028678 <__math_may_uflowf>
 802873c:	4b1c      	ldr	r3, [pc, #112]	; (80287b0 <expf+0xe0>)
 802873e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8028742:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8028746:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 802874a:	eeb0 7b44 	vmov.f64	d7, d4
 802874e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8028752:	ee17 0a10 	vmov	r0, s14
 8028756:	ee37 7b44 	vsub.f64	d7, d7, d4
 802875a:	f000 021f 	and.w	r2, r0, #31
 802875e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8028762:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8028766:	ee27 4b07 	vmul.f64	d4, d7, d7
 802876a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 802876e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8028772:	eea5 6b07 	vfma.f64	d6, d5, d7
 8028776:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 802877a:	684d      	ldr	r5, [r1, #4]
 802877c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8028780:	2100      	movs	r1, #0
 8028782:	190a      	adds	r2, r1, r4
 8028784:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8028788:	eea5 0b07 	vfma.f64	d0, d5, d7
 802878c:	ec43 2b17 	vmov	d7, r2, r3
 8028790:	eea6 0b04 	vfma.f64	d0, d6, d4
 8028794:	ee20 0b07 	vmul.f64	d0, d0, d7
 8028798:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802879c:	e7ab      	b.n	80286f6 <expf+0x26>
 802879e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80287b4 <expf+0xe4>
 80287a2:	e7a8      	b.n	80286f6 <expf+0x26>
 80287a4:	42b17217 	.word	0x42b17217
 80287a8:	c2cff1b4 	.word	0xc2cff1b4
 80287ac:	c2ce8ecf 	.word	0xc2ce8ecf
 80287b0:	080c3db0 	.word	0x080c3db0
 80287b4:	00000000 	.word	0x00000000

080287b8 <checkint>:
 80287b8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80287bc:	2b7e      	cmp	r3, #126	; 0x7e
 80287be:	dd10      	ble.n	80287e2 <checkint+0x2a>
 80287c0:	2b96      	cmp	r3, #150	; 0x96
 80287c2:	dc0c      	bgt.n	80287de <checkint+0x26>
 80287c4:	2201      	movs	r2, #1
 80287c6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80287ca:	fa02 f303 	lsl.w	r3, r2, r3
 80287ce:	1e5a      	subs	r2, r3, #1
 80287d0:	4202      	tst	r2, r0
 80287d2:	d106      	bne.n	80287e2 <checkint+0x2a>
 80287d4:	4203      	tst	r3, r0
 80287d6:	bf0c      	ite	eq
 80287d8:	2002      	moveq	r0, #2
 80287da:	2001      	movne	r0, #1
 80287dc:	4770      	bx	lr
 80287de:	2002      	movs	r0, #2
 80287e0:	4770      	bx	lr
 80287e2:	2000      	movs	r0, #0
 80287e4:	4770      	bx	lr
	...

080287e8 <powf>:
 80287e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80287ea:	ee10 1a10 	vmov	r1, s0
 80287ee:	ee10 4a90 	vmov	r4, s1
 80287f2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80287f6:	0062      	lsls	r2, r4, #1
 80287f8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80287fc:	eef0 7a40 	vmov.f32	s15, s0
 8028800:	f102 30ff 	add.w	r0, r2, #4294967295
 8028804:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8028808:	d252      	bcs.n	80288b0 <powf+0xc8>
 802880a:	4298      	cmp	r0, r3
 802880c:	d252      	bcs.n	80288b4 <powf+0xcc>
 802880e:	2000      	movs	r0, #0
 8028810:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8028814:	4ca0      	ldr	r4, [pc, #640]	; (8028a98 <powf+0x2b0>)
 8028816:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 802881a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 802881e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8028822:	0dd2      	lsrs	r2, r2, #23
 8028824:	05d2      	lsls	r2, r2, #23
 8028826:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 802882a:	1a8b      	subs	r3, r1, r2
 802882c:	ed95 6b00 	vldr	d6, [r5]
 8028830:	ee07 3a90 	vmov	s15, r3
 8028834:	15d2      	asrs	r2, r2, #23
 8028836:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 802883a:	eea6 5b07 	vfma.f64	d5, d6, d7
 802883e:	ed95 6b02 	vldr	d6, [r5, #8]
 8028842:	ee25 2b05 	vmul.f64	d2, d5, d5
 8028846:	ee22 1b02 	vmul.f64	d1, d2, d2
 802884a:	ee07 2a90 	vmov	s15, r2
 802884e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 8028852:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028856:	ee37 7b06 	vadd.f64	d7, d7, d6
 802885a:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 802885e:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 8028862:	eea5 3b06 	vfma.f64	d3, d5, d6
 8028866:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 802886a:	eea5 6b04 	vfma.f64	d6, d5, d4
 802886e:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8028872:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8028876:	eea5 7b04 	vfma.f64	d7, d5, d4
 802887a:	eea2 7b06 	vfma.f64	d7, d2, d6
 802887e:	eea3 7b01 	vfma.f64	d7, d3, d1
 8028882:	ee20 0b07 	vmul.f64	d0, d0, d7
 8028886:	ee10 3a90 	vmov	r3, s1
 802888a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 802888e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8028892:	429a      	cmp	r2, r3
 8028894:	f0c0 80b1 	bcc.w	80289fa <powf+0x212>
 8028898:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8028a78 <powf+0x290>
 802889c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80288a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80288a4:	dd79      	ble.n	802899a <powf+0x1b2>
 80288a6:	b003      	add	sp, #12
 80288a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80288ac:	f7ff beea 	b.w	8028684 <__math_oflowf>
 80288b0:	4298      	cmp	r0, r3
 80288b2:	d32d      	bcc.n	8028910 <powf+0x128>
 80288b4:	b952      	cbnz	r2, 80288cc <powf+0xe4>
 80288b6:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 80288ba:	005b      	lsls	r3, r3, #1
 80288bc:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 80288c0:	f240 80c9 	bls.w	8028a56 <powf+0x26e>
 80288c4:	ee37 0aa0 	vadd.f32	s0, s15, s1
 80288c8:	b003      	add	sp, #12
 80288ca:	bd30      	pop	{r4, r5, pc}
 80288cc:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80288d0:	d105      	bne.n	80288de <powf+0xf6>
 80288d2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80288d6:	0064      	lsls	r4, r4, #1
 80288d8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80288dc:	e7f0      	b.n	80288c0 <powf+0xd8>
 80288de:	004b      	lsls	r3, r1, #1
 80288e0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80288e4:	d8ee      	bhi.n	80288c4 <powf+0xdc>
 80288e6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80288ea:	d1eb      	bne.n	80288c4 <powf+0xdc>
 80288ec:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80288f0:	f000 80b1 	beq.w	8028a56 <powf+0x26e>
 80288f4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80288f8:	ea6f 0404 	mvn.w	r4, r4
 80288fc:	bf34      	ite	cc
 80288fe:	2300      	movcc	r3, #0
 8028900:	2301      	movcs	r3, #1
 8028902:	0fe4      	lsrs	r4, r4, #31
 8028904:	42a3      	cmp	r3, r4
 8028906:	f040 80a9 	bne.w	8028a5c <powf+0x274>
 802890a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 802890e:	e7db      	b.n	80288c8 <powf+0xe0>
 8028910:	004d      	lsls	r5, r1, #1
 8028912:	1e6a      	subs	r2, r5, #1
 8028914:	429a      	cmp	r2, r3
 8028916:	d31c      	bcc.n	8028952 <powf+0x16a>
 8028918:	2900      	cmp	r1, #0
 802891a:	ee20 0a00 	vmul.f32	s0, s0, s0
 802891e:	da0f      	bge.n	8028940 <powf+0x158>
 8028920:	ee10 0a90 	vmov	r0, s1
 8028924:	f7ff ff48 	bl	80287b8 <checkint>
 8028928:	2801      	cmp	r0, #1
 802892a:	d109      	bne.n	8028940 <powf+0x158>
 802892c:	eeb1 0a40 	vneg.f32	s0, s0
 8028930:	b945      	cbnz	r5, 8028944 <powf+0x15c>
 8028932:	2c00      	cmp	r4, #0
 8028934:	dac8      	bge.n	80288c8 <powf+0xe0>
 8028936:	b003      	add	sp, #12
 8028938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802893c:	f7ff bea8 	b.w	8028690 <__math_divzerof>
 8028940:	2000      	movs	r0, #0
 8028942:	e7f5      	b.n	8028930 <powf+0x148>
 8028944:	2c00      	cmp	r4, #0
 8028946:	dabf      	bge.n	80288c8 <powf+0xe0>
 8028948:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802894c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8028950:	e7ba      	b.n	80288c8 <powf+0xe0>
 8028952:	2900      	cmp	r1, #0
 8028954:	da1f      	bge.n	8028996 <powf+0x1ae>
 8028956:	ee10 0a90 	vmov	r0, s1
 802895a:	f7ff ff2d 	bl	80287b8 <checkint>
 802895e:	b920      	cbnz	r0, 802896a <powf+0x182>
 8028960:	b003      	add	sp, #12
 8028962:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8028966:	f7ff bea3 	b.w	80286b0 <__math_invalidf>
 802896a:	2801      	cmp	r0, #1
 802896c:	bf14      	ite	ne
 802896e:	2000      	movne	r0, #0
 8028970:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8028974:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8028978:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 802897c:	f4bf af48 	bcs.w	8028810 <powf+0x28>
 8028980:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8028a9c <powf+0x2b4>
 8028984:	ee27 0a80 	vmul.f32	s0, s15, s0
 8028988:	ee10 3a10 	vmov	r3, s0
 802898c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8028990:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8028994:	e73c      	b.n	8028810 <powf+0x28>
 8028996:	2000      	movs	r0, #0
 8028998:	e7ee      	b.n	8028978 <powf+0x190>
 802899a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8028a80 <powf+0x298>
 802899e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80289a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80289a6:	dd10      	ble.n	80289ca <powf+0x1e2>
 80289a8:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 80289ac:	2800      	cmp	r0, #0
 80289ae:	d158      	bne.n	8028a62 <powf+0x27a>
 80289b0:	9300      	str	r3, [sp, #0]
 80289b2:	eddd 7a00 	vldr	s15, [sp]
 80289b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80289ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80289be:	eef4 7a47 	vcmp.f32	s15, s14
 80289c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80289c6:	f47f af6e 	bne.w	80288a6 <powf+0xbe>
 80289ca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8028a88 <powf+0x2a0>
 80289ce:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80289d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80289d6:	d804      	bhi.n	80289e2 <powf+0x1fa>
 80289d8:	b003      	add	sp, #12
 80289da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80289de:	f7ff be45 	b.w	802866c <__math_uflowf>
 80289e2:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8028a90 <powf+0x2a8>
 80289e6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80289ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80289ee:	d504      	bpl.n	80289fa <powf+0x212>
 80289f0:	b003      	add	sp, #12
 80289f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80289f6:	f7ff be3f 	b.w	8028678 <__math_may_uflowf>
 80289fa:	4b29      	ldr	r3, [pc, #164]	; (8028aa0 <powf+0x2b8>)
 80289fc:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8028a00:	ee30 6b07 	vadd.f64	d6, d0, d7
 8028a04:	ee16 2a10 	vmov	r2, s12
 8028a08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8028a0c:	f002 011f 	and.w	r1, r2, #31
 8028a10:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8028a14:	ee30 7b47 	vsub.f64	d7, d0, d7
 8028a18:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8028a1c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8028a20:	ee27 4b07 	vmul.f64	d4, d7, d7
 8028a24:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8028a28:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8028a2c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8028a30:	686d      	ldr	r5, [r5, #4]
 8028a32:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8028a36:	1882      	adds	r2, r0, r2
 8028a38:	2300      	movs	r3, #0
 8028a3a:	1918      	adds	r0, r3, r4
 8028a3c:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8028a40:	eea7 0b05 	vfma.f64	d0, d7, d5
 8028a44:	ec41 0b17 	vmov	d7, r0, r1
 8028a48:	eea6 0b04 	vfma.f64	d0, d6, d4
 8028a4c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8028a50:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8028a54:	e738      	b.n	80288c8 <powf+0xe0>
 8028a56:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8028a5a:	e735      	b.n	80288c8 <powf+0xe0>
 8028a5c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8028aa4 <powf+0x2bc>
 8028a60:	e732      	b.n	80288c8 <powf+0xe0>
 8028a62:	9301      	str	r3, [sp, #4]
 8028a64:	eddd 7a01 	vldr	s15, [sp, #4]
 8028a68:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8028a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8028a70:	e7a5      	b.n	80289be <powf+0x1d6>
 8028a72:	bf00      	nop
 8028a74:	f3af 8000 	nop.w
 8028a78:	ffd1d571 	.word	0xffd1d571
 8028a7c:	405fffff 	.word	0x405fffff
 8028a80:	ffa3aae2 	.word	0xffa3aae2
 8028a84:	405fffff 	.word	0x405fffff
 8028a88:	00000000 	.word	0x00000000
 8028a8c:	c062c000 	.word	0xc062c000
 8028a90:	00000000 	.word	0x00000000
 8028a94:	c062a000 	.word	0xc062a000
 8028a98:	080c3ef8 	.word	0x080c3ef8
 8028a9c:	4b000000 	.word	0x4b000000
 8028aa0:	080c3db0 	.word	0x080c3db0
 8028aa4:	00000000 	.word	0x00000000

08028aa8 <__errno>:
 8028aa8:	4b01      	ldr	r3, [pc, #4]	; (8028ab0 <__errno+0x8>)
 8028aaa:	6818      	ldr	r0, [r3, #0]
 8028aac:	4770      	bx	lr
 8028aae:	bf00      	nop
 8028ab0:	240074fc 	.word	0x240074fc

08028ab4 <_close>:
 8028ab4:	4b02      	ldr	r3, [pc, #8]	; (8028ac0 <_close+0xc>)
 8028ab6:	2258      	movs	r2, #88	; 0x58
 8028ab8:	601a      	str	r2, [r3, #0]
 8028aba:	f04f 30ff 	mov.w	r0, #4294967295
 8028abe:	4770      	bx	lr
 8028ac0:	2400a76c 	.word	0x2400a76c

08028ac4 <_fstat>:
 8028ac4:	4b02      	ldr	r3, [pc, #8]	; (8028ad0 <_fstat+0xc>)
 8028ac6:	2258      	movs	r2, #88	; 0x58
 8028ac8:	601a      	str	r2, [r3, #0]
 8028aca:	f04f 30ff 	mov.w	r0, #4294967295
 8028ace:	4770      	bx	lr
 8028ad0:	2400a76c 	.word	0x2400a76c

08028ad4 <_getpid>:
 8028ad4:	4b02      	ldr	r3, [pc, #8]	; (8028ae0 <_getpid+0xc>)
 8028ad6:	2258      	movs	r2, #88	; 0x58
 8028ad8:	601a      	str	r2, [r3, #0]
 8028ada:	f04f 30ff 	mov.w	r0, #4294967295
 8028ade:	4770      	bx	lr
 8028ae0:	2400a76c 	.word	0x2400a76c

08028ae4 <_isatty>:
 8028ae4:	4b02      	ldr	r3, [pc, #8]	; (8028af0 <_isatty+0xc>)
 8028ae6:	2258      	movs	r2, #88	; 0x58
 8028ae8:	601a      	str	r2, [r3, #0]
 8028aea:	2000      	movs	r0, #0
 8028aec:	4770      	bx	lr
 8028aee:	bf00      	nop
 8028af0:	2400a76c 	.word	0x2400a76c

08028af4 <_kill>:
 8028af4:	4b02      	ldr	r3, [pc, #8]	; (8028b00 <_kill+0xc>)
 8028af6:	2258      	movs	r2, #88	; 0x58
 8028af8:	601a      	str	r2, [r3, #0]
 8028afa:	f04f 30ff 	mov.w	r0, #4294967295
 8028afe:	4770      	bx	lr
 8028b00:	2400a76c 	.word	0x2400a76c

08028b04 <_lseek>:
 8028b04:	4b02      	ldr	r3, [pc, #8]	; (8028b10 <_lseek+0xc>)
 8028b06:	2258      	movs	r2, #88	; 0x58
 8028b08:	601a      	str	r2, [r3, #0]
 8028b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8028b0e:	4770      	bx	lr
 8028b10:	2400a76c 	.word	0x2400a76c

08028b14 <_read>:
 8028b14:	4b02      	ldr	r3, [pc, #8]	; (8028b20 <_read+0xc>)
 8028b16:	2258      	movs	r2, #88	; 0x58
 8028b18:	601a      	str	r2, [r3, #0]
 8028b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8028b1e:	4770      	bx	lr
 8028b20:	2400a76c 	.word	0x2400a76c

08028b24 <_sbrk>:
 8028b24:	4a04      	ldr	r2, [pc, #16]	; (8028b38 <_sbrk+0x14>)
 8028b26:	6811      	ldr	r1, [r2, #0]
 8028b28:	4603      	mov	r3, r0
 8028b2a:	b909      	cbnz	r1, 8028b30 <_sbrk+0xc>
 8028b2c:	4903      	ldr	r1, [pc, #12]	; (8028b3c <_sbrk+0x18>)
 8028b2e:	6011      	str	r1, [r2, #0]
 8028b30:	6810      	ldr	r0, [r2, #0]
 8028b32:	4403      	add	r3, r0
 8028b34:	6013      	str	r3, [r2, #0]
 8028b36:	4770      	bx	lr
 8028b38:	2400a774 	.word	0x2400a774
 8028b3c:	2400a778 	.word	0x2400a778

08028b40 <_write>:
 8028b40:	4b02      	ldr	r3, [pc, #8]	; (8028b4c <_write+0xc>)
 8028b42:	2258      	movs	r2, #88	; 0x58
 8028b44:	601a      	str	r2, [r3, #0]
 8028b46:	f04f 30ff 	mov.w	r0, #4294967295
 8028b4a:	4770      	bx	lr
 8028b4c:	2400a76c 	.word	0x2400a76c

08028b50 <_exit>:
 8028b50:	e7fe      	b.n	8028b50 <_exit>
	...

08028b54 <_init>:
 8028b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028b56:	bf00      	nop
 8028b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028b5a:	bc08      	pop	{r3}
 8028b5c:	469e      	mov	lr, r3
 8028b5e:	4770      	bx	lr

08028b60 <_fini>:
 8028b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028b62:	bf00      	nop
 8028b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028b66:	bc08      	pop	{r3}
 8028b68:	469e      	mov	lr, r3
 8028b6a:	4770      	bx	lr
