@page Image classification application: food recognition (quantized C model) 

@par Application Description

This application demonstrates an example of image classification running on the STM32H7xx devices.
The image classification process is based on a convolutional neural network. The corresponding C model is
generated using X-CUBE-AI v6.0.0 tool.
In this application, the generated C model is a quantized model, i.e. operating on 8-bit integer.

The application consists in food recognition. The application can recognize among 18 types of foods and drinks 
like pizza, beer, French fries.
The application is based on a FD-MobileNet model. 

This application demonstrates how to make use of the C model generated by X-CUBE-AI v6.0.0 tool. 
It relies on the neural network library provided in STM32_AI_Runtime Middleware.

This application also relies on:
- The STM32_AI_Utilities Middleware which provides a set of optimized routines.
- The STM32_Image Middleware which provides a set of functions for image preprocessing.
- The STM32_Fs and FatFs Middleware components which provide a set of functions for file management (implemented on FatFs) abstraction over SD interface.

The application has several configurations. Each configuration corresponds to a specific layout of the data in volatile memory:
- STM32H747I-DISCO_FoodReco_Quantized_Ext
- STM32H747I-DISCO_FoodReco_Quantized_Split 
- STM32H747I-DISCO_FoodReco_Quantized_Int_Mem 
- STM32H747I-DISCO_FoodReco_Quantized_Int_Fps 

      
For more details about the X-CUBE-AI tool, please refer to UM2526 "Getting started with X-CUBE-AI Expansion Package for Artificial Intelligence (AI)" 

      

@par Directory contents

  - Projects/STM32H747I-DISCO/Applications/FoodReco_MobileNetDerivative/Quantized_Model/CM7/Src/main.c                  Main program
  - Projects/STM32H747I-DISCO/Applications/FoodReco_MobileNetDerivative/Quantized_Model/CM7/Src/stm32h7xx_it.c          Interrupt handlers
  - Projects/STM32H747I-DISCO/Applications/FoodReco_MobileNetDerivative/Quantized_Model/CM7/Inc/stm32h7xx_hal_msp.c     HAL MSP for Cortex-M7 core
  - Projects/STM32H747I-DISCO/Applications/FoodReco_MobileNetDerivative/Quantized_Model/CM7/Inc/fp_vision_app.c         Application's parameters
  - Projects/STM32H747I-DISCO/Applications/FoodReco_MobileNetDerivative/Quantized_Model/CM7/Inc/network.c               Generated C model (neural network's topology)
  - Projects/STM32H747I-DISCO/Applications/FoodReco_MobileNetDerivative/Quantized_Model/CM7/Inc/network_data.c          Generated C model (neural network's weights and bias)

  - Projects/STM32H747I-DISCO/Applications/Common/CM7/Src/sd_diskio.c              SD interface
  - Projects/STM32H747I-DISCO/Applications/Common/CM7/Src/fp_vision_test.c         Test and validation modes implementation 
  - Projects/STM32H747I-DISCO/Applications/Common/CM7/Src/fp_vision_utils.c        Utilities rountines 
  - Projects/STM32H747I-DISCO/Applications/Common/CM7/Src/fp_vision_preproc.c      Frame preprocessing implementation
  - Projects/STM32H747I-DISCO/Applications/Common/CM7/Src/fp_vision_display.c      Display management
  - Projects/STM32H747I-DISCO/Applications/Common/CM7/Src/fp_vision_camera.c       Camera management
  - Projects/STM32H747I-DISCO/Applications/Common/CM7/Src/fp_vision_ai.c           AI related routines
  - Projects/STM32H747I-DISCO/Applications/Common/CM7/Src/ai_interface.c           Abstraction interface to generated C model

  
@par Hardware and Software environment

  - This application runs on STM32H747xx devices.
    
  - This application has been tested with STMicroelectronics STM32H747I-DISCO RevC 
    Discovery boards and can be easily tailored to any other supported device 
    and development board.
    
  - This application relies on the B-CAMS-OMV + MB1379 camera daughterboard which has to be connected via a flex cable to the STM32H747I-DISCO board.

  - STM32H747I-Discovery RevC Set-up
    - Power supply and ST-LINK V3 connection: Connect the STM32H747I-DISCO board to the PC through USB cable connected to the connector CN2. 
    
@par How to use it ?

In order to make the program work, you must do the following :
 - Open your preferred toolchain 
 - Select your configuration
 - Rebuild all files and load your image into target memory
 - In the workspace toolbar select the project configuration
 - Run the application
 
